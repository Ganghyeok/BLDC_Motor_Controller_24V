
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ac  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080056e0  080056e0  000156e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005960  08005960  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005960  08005960  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005960  08005960  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08005968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001d0  08005b38  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005b38  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009855  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014ef  00000000  00000000  00029a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000378  00000000  00000000  0002af40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c0  00000000  00000000  0002b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008369  00000000  00000000  0002b578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005528  00000000  00000000  000338e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00023def  00000000  00000000  00038e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005cbf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001684  00000000  00000000  0005cc74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d0 	.word	0x200001d0
 800014c:	00000000 	.word	0x00000000
 8000150:	080056c4 	.word	0x080056c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d4 	.word	0x200001d4
 800016c:	080056c4 	.word	0x080056c4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	d1ed      	bne.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d16:	2afd      	cmp	r2, #253	; 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	; 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	; 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	; 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__aeabi_f2uiz>:
 8000f64:	0042      	lsls	r2, r0, #1
 8000f66:	d20e      	bcs.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f6c:	d30b      	bcc.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f76:	d409      	bmi.n	8000f8c <__aeabi_f2uiz+0x28>
 8000f78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f80:	fa23 f002 	lsr.w	r0, r3, r2
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2uiz+0x32>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d102      	bne.n	8000f9c <__aeabi_f2uiz+0x38>
 8000f96:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a96      	ldr	r2, [pc, #600]	; (8001214 <GPIO_Init+0x270>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d106      	bne.n	8000fcc <GPIO_Init+0x28>
 8000fbe:	4b96      	ldr	r3, [pc, #600]	; (8001218 <GPIO_Init+0x274>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a95      	ldr	r2, [pc, #596]	; (8001218 <GPIO_Init+0x274>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	e03c      	b.n	8001046 <GPIO_Init+0xa2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a93      	ldr	r2, [pc, #588]	; (800121c <GPIO_Init+0x278>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d106      	bne.n	8000fe2 <GPIO_Init+0x3e>
 8000fd4:	4b90      	ldr	r3, [pc, #576]	; (8001218 <GPIO_Init+0x274>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a8f      	ldr	r2, [pc, #572]	; (8001218 <GPIO_Init+0x274>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	e031      	b.n	8001046 <GPIO_Init+0xa2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a8e      	ldr	r2, [pc, #568]	; (8001220 <GPIO_Init+0x27c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d106      	bne.n	8000ff8 <GPIO_Init+0x54>
 8000fea:	4b8b      	ldr	r3, [pc, #556]	; (8001218 <GPIO_Init+0x274>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a8a      	ldr	r2, [pc, #552]	; (8001218 <GPIO_Init+0x274>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	e026      	b.n	8001046 <GPIO_Init+0xa2>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a8a      	ldr	r2, [pc, #552]	; (8001224 <GPIO_Init+0x280>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d106      	bne.n	800100e <GPIO_Init+0x6a>
 8001000:	4b85      	ldr	r3, [pc, #532]	; (8001218 <GPIO_Init+0x274>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a84      	ldr	r2, [pc, #528]	; (8001218 <GPIO_Init+0x274>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	e01b      	b.n	8001046 <GPIO_Init+0xa2>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a85      	ldr	r2, [pc, #532]	; (8001228 <GPIO_Init+0x284>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <GPIO_Init+0x80>
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <GPIO_Init+0x274>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a7f      	ldr	r2, [pc, #508]	; (8001218 <GPIO_Init+0x274>)
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	e010      	b.n	8001046 <GPIO_Init+0xa2>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a81      	ldr	r2, [pc, #516]	; (800122c <GPIO_Init+0x288>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d106      	bne.n	800103a <GPIO_Init+0x96>
 800102c:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <GPIO_Init+0x274>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a79      	ldr	r2, [pc, #484]	; (8001218 <GPIO_Init+0x274>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	e005      	b.n	8001046 <GPIO_Init+0xa2>
 800103a:	4b77      	ldr	r3, [pc, #476]	; (8001218 <GPIO_Init+0x274>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a76      	ldr	r2, [pc, #472]	; (8001218 <GPIO_Init+0x274>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	76fb      	strb	r3, [r7, #27]
 800104a:	e1d0      	b.n	80013ee <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	7efa      	ldrb	r2, [r7, #27]
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 81c0 	beq.w	80013e0 <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b11      	cmp	r3, #17
 8001066:	d039      	beq.n	80010dc <GPIO_Init+0x138>
 8001068:	2b11      	cmp	r3, #17
 800106a:	d807      	bhi.n	800107c <GPIO_Init+0xd8>
 800106c:	2b01      	cmp	r3, #1
 800106e:	d016      	beq.n	800109e <GPIO_Init+0xfa>
 8001070:	2b01      	cmp	r3, #1
 8001072:	f0c0 8090 	bcc.w	8001196 <GPIO_Init+0x1f2>
 8001076:	2b02      	cmp	r3, #2
 8001078:	d04f      	beq.n	800111a <GPIO_Init+0x176>
 800107a:	e0bd      	b.n	80011f8 <GPIO_Init+0x254>
 800107c:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <GPIO_Init+0x28c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f000 8089 	beq.w	8001196 <GPIO_Init+0x1f2>
 8001084:	4a6a      	ldr	r2, [pc, #424]	; (8001230 <GPIO_Init+0x28c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d802      	bhi.n	8001090 <GPIO_Init+0xec>
 800108a:	2b12      	cmp	r3, #18
 800108c:	d064      	beq.n	8001158 <GPIO_Init+0x1b4>
 800108e:	e0b3      	b.n	80011f8 <GPIO_Init+0x254>
 8001090:	4a68      	ldr	r2, [pc, #416]	; (8001234 <GPIO_Init+0x290>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d07f      	beq.n	8001196 <GPIO_Init+0x1f2>
 8001096:	4a68      	ldr	r2, [pc, #416]	; (8001238 <GPIO_Init+0x294>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d07c      	beq.n	8001196 <GPIO_Init+0x1f2>
 800109c:	e0ac      	b.n	80011f8 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d104      	bne.n	80010b0 <GPIO_Init+0x10c>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e010      	b.n	80010d2 <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d104      	bne.n	80010c2 <GPIO_Init+0x11e>
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	e007      	b.n	80010d2 <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d103      	bne.n	80010d2 <GPIO_Init+0x12e>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f043 0303 	orr.w	r3, r3, #3
 80010d0:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f023 030c 	bic.w	r3, r3, #12
 80010d8:	61fb      	str	r3, [r7, #28]


					break;
 80010da:	e08d      	b.n	80011f8 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d104      	bne.n	80010ee <GPIO_Init+0x14a>
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	e010      	b.n	8001110 <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d104      	bne.n	8001100 <GPIO_Init+0x15c>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e007      	b.n	8001110 <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d103      	bne.n	8001110 <GPIO_Init+0x16c>
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f043 0303 	orr.w	r3, r3, #3
 800110e:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	61fb      	str	r3, [r7, #28]

					break;
 8001118:	e06e      	b.n	80011f8 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d104      	bne.n	800112c <GPIO_Init+0x188>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e010      	b.n	800114e <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d104      	bne.n	800113e <GPIO_Init+0x19a>
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	e007      	b.n	800114e <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d103      	bne.n	800114e <GPIO_Init+0x1aa>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f043 0303 	orr.w	r3, r3, #3
 800114c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	61fb      	str	r3, [r7, #28]

					break;
 8001156:	e04f      	b.n	80011f8 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d104      	bne.n	800116a <GPIO_Init+0x1c6>
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	e010      	b.n	800118c <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d104      	bne.n	800117c <GPIO_Init+0x1d8>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e007      	b.n	800118c <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d103      	bne.n	800118c <GPIO_Init+0x1e8>
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f043 0303 	orr.w	r3, r3, #3
 800118a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f043 030c 	orr.w	r3, r3, #12
 8001192:	61fb      	str	r3, [r7, #28]

					break;
 8001194:	e030      	b.n	80011f8 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f023 0303 	bic.w	r3, r3, #3
 800119c:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80011ae:	e022      	b.n	80011f6 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10d      	bne.n	80011d4 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	7efa      	ldrb	r2, [r7, #27]
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
					break;
 80011d2:	e010      	b.n	80011f6 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d10c      	bne.n	80011f6 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	7efa      	ldrb	r2, [r7, #27]
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	615a      	str	r2, [r3, #20]
					break;
 80011f6:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 80011f8:	7efb      	ldrb	r3, [r7, #27]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	d801      	bhi.n	8001202 <GPIO_Init+0x25e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	e001      	b.n	8001206 <GPIO_Init+0x262>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3304      	adds	r3, #4
 8001206:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001208:	7efb      	ldrb	r3, [r7, #27]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d816      	bhi.n	800123c <GPIO_Init+0x298>
 800120e:	7efb      	ldrb	r3, [r7, #27]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	e016      	b.n	8001242 <GPIO_Init+0x29e>
 8001214:	40010800 	.word	0x40010800
 8001218:	40021000 	.word	0x40021000
 800121c:	40010c00 	.word	0x40010c00
 8001220:	40011000 	.word	0x40011000
 8001224:	40011400 	.word	0x40011400
 8001228:	40011800 	.word	0x40011800
 800122c:	40011c00 	.word	0x40011c00
 8001230:	10110000 	.word	0x10110000
 8001234:	10210000 	.word	0x10210000
 8001238:	10310000 	.word	0x10310000
 800123c:	7efb      	ldrb	r3, [r7, #27]
 800123e:	3b08      	subs	r3, #8
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	210f      	movs	r1, #15
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	69f9      	ldr	r1, [r7, #28]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	431a      	orrs	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80b8 	beq.w	80013e0 <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 8001270:	4b63      	ldr	r3, [pc, #396]	; (8001400 <GPIO_Init+0x45c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a62      	ldr	r2, [pc, #392]	; (8001400 <GPIO_Init+0x45c>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 800127c:	7efb      	ldrb	r3, [r7, #27]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 800128c:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <GPIO_Init+0x460>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	210f      	movs	r1, #15
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4958      	ldr	r1, [pc, #352]	; (8001408 <GPIO_Init+0x464>)
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d01f      	beq.n	80012ec <GPIO_Init+0x348>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4957      	ldr	r1, [pc, #348]	; (800140c <GPIO_Init+0x468>)
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d019      	beq.n	80012e8 <GPIO_Init+0x344>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4956      	ldr	r1, [pc, #344]	; (8001410 <GPIO_Init+0x46c>)
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d013      	beq.n	80012e4 <GPIO_Init+0x340>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4955      	ldr	r1, [pc, #340]	; (8001414 <GPIO_Init+0x470>)
 80012c0:	428b      	cmp	r3, r1
 80012c2:	d00d      	beq.n	80012e0 <GPIO_Init+0x33c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4954      	ldr	r1, [pc, #336]	; (8001418 <GPIO_Init+0x474>)
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d007      	beq.n	80012dc <GPIO_Init+0x338>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4953      	ldr	r1, [pc, #332]	; (800141c <GPIO_Init+0x478>)
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d101      	bne.n	80012d8 <GPIO_Init+0x334>
 80012d4:	2305      	movs	r3, #5
 80012d6:	e00a      	b.n	80012ee <GPIO_Init+0x34a>
 80012d8:	2306      	movs	r3, #6
 80012da:	e008      	b.n	80012ee <GPIO_Init+0x34a>
 80012dc:	2304      	movs	r3, #4
 80012de:	e006      	b.n	80012ee <GPIO_Init+0x34a>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e004      	b.n	80012ee <GPIO_Init+0x34a>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e002      	b.n	80012ee <GPIO_Init+0x34a>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <GPIO_Init+0x34a>
 80012ec:	2300      	movs	r3, #0
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	0089      	lsls	r1, r1, #2
 80012f2:	408b      	lsls	r3, r1
 80012f4:	4943      	ldr	r1, [pc, #268]	; (8001404 <GPIO_Init+0x460>)
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3302      	adds	r3, #2
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00a      	beq.n	8001322 <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <GPIO_Init+0x47c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	7efa      	ldrb	r2, [r7, #27]
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4611      	mov	r1, r2
 800131a:	4a41      	ldr	r2, [pc, #260]	; (8001420 <GPIO_Init+0x47c>)
 800131c:	430b      	orrs	r3, r1
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e00a      	b.n	8001338 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <GPIO_Init+0x47c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7efa      	ldrb	r2, [r7, #27]
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	43d2      	mvns	r2, r2
 8001330:	4611      	mov	r1, r2
 8001332:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <GPIO_Init+0x47c>)
 8001334:	400b      	ands	r3, r1
 8001336:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <GPIO_Init+0x47c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	7efa      	ldrb	r2, [r7, #27]
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f202 	lsl.w	r2, r1, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4a33      	ldr	r2, [pc, #204]	; (8001420 <GPIO_Init+0x47c>)
 8001354:	430b      	orrs	r3, r1
 8001356:	6053      	str	r3, [r2, #4]
 8001358:	e00a      	b.n	8001370 <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <GPIO_Init+0x47c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	7efa      	ldrb	r2, [r7, #27]
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	43d2      	mvns	r2, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <GPIO_Init+0x47c>)
 800136c:	400b      	ands	r3, r1
 800136e:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00a      	beq.n	8001392 <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <GPIO_Init+0x47c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	7efa      	ldrb	r2, [r7, #27]
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	4611      	mov	r1, r2
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <GPIO_Init+0x47c>)
 800138c:	430b      	orrs	r3, r1
 800138e:	6093      	str	r3, [r2, #8]
 8001390:	e00a      	b.n	80013a8 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <GPIO_Init+0x47c>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	7efa      	ldrb	r2, [r7, #27]
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	43d2      	mvns	r2, r2
 80013a0:	4611      	mov	r1, r2
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <GPIO_Init+0x47c>)
 80013a4:	400b      	ands	r3, r1
 80013a6:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00a      	beq.n	80013ca <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <GPIO_Init+0x47c>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	7efa      	ldrb	r2, [r7, #27]
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	4611      	mov	r1, r2
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <GPIO_Init+0x47c>)
 80013c4:	430b      	orrs	r3, r1
 80013c6:	60d3      	str	r3, [r2, #12]
 80013c8:	e00a      	b.n	80013e0 <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <GPIO_Init+0x47c>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	7efa      	ldrb	r2, [r7, #27]
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	43d2      	mvns	r2, r2
 80013d8:	4611      	mov	r1, r2
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <GPIO_Init+0x47c>)
 80013dc:	400b      	ands	r3, r1
 80013de:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 80013e8:	7efb      	ldrb	r3, [r7, #27]
 80013ea:	3301      	adds	r3, #1
 80013ec:	76fb      	strb	r3, [r7, #27]
 80013ee:	7efb      	ldrb	r3, [r7, #27]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	f67f ae2b 	bls.w	800104c <GPIO_Init+0xa8>
	}
}
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000
 8001414:	40011400 	.word	0x40011400
 8001418:	40011800 	.word	0x40011800
 800141c:	40011c00 	.word	0x40011c00
 8001420:	40010400 	.word	0x40010400

08001424 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d106      	bne.n	8001448 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001446:	e006      	b.n	8001456 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	611a      	str	r2, [r3, #16]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001474:	883b      	ldrh	r3, [r7, #0]
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <EXTI_IRQHandling+0x34>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <EXTI_IRQHandling+0x34>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	4905      	ldr	r1, [pc, #20]	; (80014c8 <EXTI_IRQHandling+0x34>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f001 ffd1 	bl	8003460 <EXTI_Callback>
	}
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010400 	.word	0x40010400

080014cc <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d011      	beq.n	8001504 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d10c      	bne.n	8001504 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <RCC_OscConfig+0x9c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <RCC_OscConfig+0x9c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 80014f6:	bf00      	nop
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <RCC_OscConfig+0x9c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f9      	beq.n	80014f8 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d128      	bne.n	800155e <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <RCC_OscConfig+0x9c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <RCC_OscConfig+0x9c>)
 8001512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d105      	bne.n	800152e <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <RCC_OscConfig+0x9c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <RCC_OscConfig+0x9c>)
 8001528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800152c:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <RCC_OscConfig+0x9c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	4313      	orrs	r3, r2
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <RCC_OscConfig+0x9c>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <RCC_OscConfig+0x9c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <RCC_OscConfig+0x9c>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001550:	bf00      	nop
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <RCC_OscConfig+0x9c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f9      	beq.n	8001552 <RCC_OscConfig+0x86>
	}
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <RCC_ClockConfig+0x7c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	491a      	ldr	r1, [pc, #104]	; (80015e8 <RCC_ClockConfig+0x7c>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <RCC_ClockConfig+0x80>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	4916      	ldr	r1, [pc, #88]	; (80015ec <RCC_ClockConfig+0x80>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <RCC_ClockConfig+0x80>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	4911      	ldr	r1, [pc, #68]	; (80015ec <RCC_ClockConfig+0x80>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <RCC_ClockConfig+0x80>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <RCC_ClockConfig+0x80>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <RCC_ClockConfig+0x80>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 0203 	bic.w	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4908      	ldr	r1, [pc, #32]	; (80015ec <RCC_ClockConfig+0x80>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 80015ce:	bf00      	nop
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <RCC_ClockConfig+0x80>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <RCC_ClockConfig+0x64>
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021000 	.word	0x40021000

080015f0 <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <RCC_GetPLLOutputClock+0x70>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <RCC_GetPLLOutputClock+0x1e>
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <RCC_GetPLLOutputClock+0x70>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e020      	b.n	8001654 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <RCC_GetPLLOutputClock+0x70>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <RCC_GetPLLOutputClock+0x74>)
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e001      	b.n	8001628 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <RCC_GetPLLOutputClock+0x78>)
 8001626:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <RCC_GetPLLOutputClock+0x70>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	0c9b      	lsrs	r3, r3, #18
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001636:	7abb      	ldrb	r3, [r7, #10]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d102      	bne.n	8001642 <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 800163c:	2310      	movs	r3, #16
 800163e:	72fb      	strb	r3, [r7, #11]
 8001640:	e002      	b.n	8001648 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001642:	7abb      	ldrb	r3, [r7, #10]
 8001644:	3302      	adds	r3, #2
 8001646:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001648:	7afa      	ldrb	r2, [r7, #11]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	007a1200 	.word	0x007a1200
 8001668:	003d0900 	.word	0x003d0900

0800166c <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08d      	sub	sp, #52	; 0x34
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <RCC_GetPCLKxValue+0x144>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <RCC_GetPCLKxValue+0x148>)
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001692:	e00d      	b.n	80016b0 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001698:	2b01      	cmp	r3, #1
 800169a:	d102      	bne.n	80016a2 <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <RCC_GetPCLKxValue+0x148>)
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a0:	e006      	b.n	80016b0 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 80016a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d102      	bne.n	80016b0 <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 80016aa:	f7ff ffa1 	bl	80015f0 <RCC_GetPLLOutputClock>
 80016ae:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <RCC_GetPCLKxValue+0x14c>)
 80016b2:	f107 0410 	add.w	r4, r7, #16
 80016b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <RCC_GetPCLKxValue+0x144>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 80016cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d803      	bhi.n	80016dc <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016da:	e00a      	b.n	80016f2 <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 80016dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e0:	3b08      	subs	r3, #8
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80016e8:	4413      	add	r3, r2
 80016ea:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <RCC_GetPCLKxValue+0x150>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11a      	bne.n	8001734 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <RCC_GetPCLKxValue+0x144>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 800170e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001712:	2b03      	cmp	r3, #3
 8001714:	d803      	bhi.n	800171e <RCC_GetPCLKxValue+0xb2>
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800171c:	e027      	b.n	800176e <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 800171e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001722:	3b04      	subs	r3, #4
 8001724:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001728:	4413      	add	r3, r2
 800172a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800172e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001732:	e01c      	b.n	800176e <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d119      	bne.n	800176e <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <RCC_GetPCLKxValue+0x144>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	0adb      	lsrs	r3, r3, #11
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 800174a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800174e:	2b03      	cmp	r3, #3
 8001750:	d803      	bhi.n	800175a <RCC_GetPCLKxValue+0xee>
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001758:	e009      	b.n	800176e <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 800175a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800175e:	3b04      	subs	r3, #4
 8001760:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001764:	4413      	add	r3, r2
 8001766:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800176a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10a      	bne.n	800178a <RCC_GetPCLKxValue+0x11e>
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	fbb2 f2f3 	udiv	r2, r2, r3
 800177e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e00c      	b.n	80017a4 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d109      	bne.n	80017a4 <RCC_GetPCLKxValue+0x138>
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	fbb2 f2f3 	udiv	r2, r2, r3
 800179a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3734      	adds	r7, #52	; 0x34
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	007a1200 	.word	0x007a1200
 80017b8:	080056e0 	.word	0x080056e0
 80017bc:	080056f0 	.word	0x080056f0

080017c0 <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10b      	bne.n	80017ea <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fb82 	bl	8002ee0 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f81f 	bl	8001820 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	771a      	strb	r2, [r3, #28]
 80017e8:	e000      	b.n	80017ec <TIM_Base_Init+0x2c>
		return;
 80017ea:	bf00      	nop
}
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7f1b      	ldrb	r3, [r3, #28]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 fb83 	bl	8002f10 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f808 	bl	8001820 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	771a      	strb	r2, [r3, #28]
 8001816:	e000      	b.n	800181a <TIM_PWM_Init+0x28>
		return;
 8001818:	bf00      	nop
}
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68d2      	ldr	r2, [r2, #12]
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6852      	ldr	r2, [r2, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6952      	ldr	r2, [r2, #20]
 8001870:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	615a      	str	r2, [r3, #20]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	f200 80d3 	bhi.w	8001a46 <TIM_PWM_ConfigChannel+0x1ba>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <TIM_PWM_ConfigChannel+0x1c>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	08001a47 	.word	0x08001a47
 80018b0:	08001a47 	.word	0x08001a47
 80018b4:	08001a47 	.word	0x08001a47
 80018b8:	08001935 	.word	0x08001935
 80018bc:	08001a47 	.word	0x08001a47
 80018c0:	08001a47 	.word	0x08001a47
 80018c4:	08001a47 	.word	0x08001a47
 80018c8:	08001991 	.word	0x08001991
 80018cc:	08001a47 	.word	0x08001a47
 80018d0:	08001a47 	.word	0x08001a47
 80018d4:	08001a47 	.word	0x08001a47
 80018d8:	080019eb 	.word	0x080019eb
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f023 0102 	bic.w	r1, r3, #2
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	6852      	ldr	r2, [r2, #4]
 8001920:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0208 	orr.w	r2, r2, #8
 8001930:	619a      	str	r2, [r3, #24]

			break;
 8001932:	e089      	b.n	8001a48 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0210 	bic.w	r2, r2, #16
 8001942:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	021a      	lsls	r2, r3, #8
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	f023 0120 	bic.w	r1, r3, #32
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	011a      	lsls	r2, r3, #4
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	6852      	ldr	r2, [r2, #4]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198c:	619a      	str	r2, [r3, #24]

			break;
 800198e:	e05b      	b.n	8001a48 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a1a      	ldr	r2, [r3, #32]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	6852      	ldr	r2, [r2, #4]
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0208 	orr.w	r2, r2, #8
 80019e6:	61da      	str	r2, [r3, #28]

			break;
 80019e8:	e02e      	b.n	8001a48 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f8:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	031a      	lsls	r2, r3, #12
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	6852      	ldr	r2, [r2, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a42:	61da      	str	r2, [r3, #28]

			break;
 8001a44:	e000      	b.n	8001a48 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8001a46:	bf00      	nop
	}
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d157      	bne.n	8001b16 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a5a      	ldr	r2, [pc, #360]	; (8001bd4 <TIM_PeripheralClockControl+0x180>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d106      	bne.n	8001a7c <TIM_PeripheralClockControl+0x28>
 8001a6e:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a78:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8001a7a:	e0a6      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a82:	d106      	bne.n	8001a92 <TIM_PeripheralClockControl+0x3e>
 8001a84:	4b54      	ldr	r3, [pc, #336]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	61d3      	str	r3, [r2, #28]
}
 8001a90:	e09b      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <TIM_PeripheralClockControl+0x188>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d106      	bne.n	8001aa8 <TIM_PeripheralClockControl+0x54>
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a4e      	ldr	r2, [pc, #312]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	61d3      	str	r3, [r2, #28]
}
 8001aa6:	e090      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <TIM_PeripheralClockControl+0x18c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d106      	bne.n	8001abe <TIM_PeripheralClockControl+0x6a>
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	61d3      	str	r3, [r2, #28]
}
 8001abc:	e085      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <TIM_PeripheralClockControl+0x190>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d106      	bne.n	8001ad4 <TIM_PeripheralClockControl+0x80>
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	61d3      	str	r3, [r2, #28]
}
 8001ad2:	e07a      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <TIM_PeripheralClockControl+0x194>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d106      	bne.n	8001aea <TIM_PeripheralClockControl+0x96>
 8001adc:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	61d3      	str	r3, [r2, #28]
}
 8001ae8:	e06f      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <TIM_PeripheralClockControl+0x198>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d106      	bne.n	8001b00 <TIM_PeripheralClockControl+0xac>
 8001af2:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001af8:	f043 0320 	orr.w	r3, r3, #32
 8001afc:	61d3      	str	r3, [r2, #28]
}
 8001afe:	e064      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <TIM_PeripheralClockControl+0x19c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d160      	bne.n	8001bca <TIM_PeripheralClockControl+0x176>
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b12:	6193      	str	r3, [r2, #24]
}
 8001b14:	e059      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d156      	bne.n	8001bca <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <TIM_PeripheralClockControl+0x180>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d106      	bne.n	8001b32 <TIM_PeripheralClockControl+0xde>
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b2e:	6193      	str	r3, [r2, #24]
}
 8001b30:	e04b      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d106      	bne.n	8001b48 <TIM_PeripheralClockControl+0xf4>
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
}
 8001b46:	e040      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <TIM_PeripheralClockControl+0x188>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d106      	bne.n	8001b5e <TIM_PeripheralClockControl+0x10a>
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	61d3      	str	r3, [r2, #28]
}
 8001b5c:	e035      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <TIM_PeripheralClockControl+0x18c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d106      	bne.n	8001b74 <TIM_PeripheralClockControl+0x120>
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	61d3      	str	r3, [r2, #28]
}
 8001b72:	e02a      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <TIM_PeripheralClockControl+0x190>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d106      	bne.n	8001b8a <TIM_PeripheralClockControl+0x136>
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b82:	f023 0308 	bic.w	r3, r3, #8
 8001b86:	61d3      	str	r3, [r2, #28]
}
 8001b88:	e01f      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <TIM_PeripheralClockControl+0x194>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d106      	bne.n	8001ba0 <TIM_PeripheralClockControl+0x14c>
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001b98:	f023 0310 	bic.w	r3, r3, #16
 8001b9c:	61d3      	str	r3, [r2, #28]
}
 8001b9e:	e014      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <TIM_PeripheralClockControl+0x198>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d106      	bne.n	8001bb6 <TIM_PeripheralClockControl+0x162>
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001bae:	f023 0320 	bic.w	r3, r3, #32
 8001bb2:	61d3      	str	r3, [r2, #28]
}
 8001bb4:	e009      	b.n	8001bca <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <TIM_PeripheralClockControl+0x19c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d105      	bne.n	8001bca <TIM_PeripheralClockControl+0x176>
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <TIM_PeripheralClockControl+0x184>)
 8001bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc8:	6193      	str	r3, [r2, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800
 8001be4:	40000c00 	.word	0x40000c00
 8001be8:	40001000 	.word	0x40001000
 8001bec:	40001400 	.word	0x40001400
 8001bf0:	40013400 	.word	0x40013400

08001bf4 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d108      	bne.n	8001c16 <TIM_PWM_Start+0x22>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	e022      	b.n	8001c5c <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d108      	bne.n	8001c2e <TIM_PWM_Start+0x3a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a1a      	ldr	r2, [r3, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	621a      	str	r2, [r3, #32]
 8001c2c:	e016      	b.n	8001c5c <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d108      	bne.n	8001c46 <TIM_PWM_Start+0x52>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c42:	621a      	str	r2, [r3, #32]
 8001c44:	e00a      	b.n	8001c5c <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d107      	bne.n	8001c5c <TIM_PWM_Start+0x68>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c5a:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <TIM_IRQHandling+0x3e>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <TIM_IRQHandling+0x48>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <TIM_IRQHandling+0x48>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 fb9d 	bl	8003400 <TIM_PeriodElapsedCallback>
	}
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001000 	.word	0x40001000

08001cd4 <USART_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 f89b 	bl	8002e20 <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8db 	bl	8001eac <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d16:	f023 030c 	bic.w	r3, r3, #12
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	60d3      	str	r3, [r2, #12]
	config = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
	config = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
	config = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f8b6 	bl	8001ee8 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f892 	bl	8001eac <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d136      	bne.n	8001e18 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a39      	ldr	r2, [pc, #228]	; (8001e94 <USART_PeripheralClockControl+0xfc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d106      	bne.n	8001dc0 <USART_PeripheralClockControl+0x28>
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 8001dbe:	e064      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <USART_PeripheralClockControl+0x104>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d106      	bne.n	8001dd6 <USART_PeripheralClockControl+0x3e>
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	61d3      	str	r3, [r2, #28]
}
 8001dd4:	e059      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <USART_PeripheralClockControl+0x108>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d106      	bne.n	8001dec <USART_PeripheralClockControl+0x54>
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	61d3      	str	r3, [r2, #28]
}
 8001dea:	e04e      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <USART_PeripheralClockControl+0x10c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d106      	bne.n	8001e02 <USART_PeripheralClockControl+0x6a>
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dfe:	61d3      	str	r3, [r2, #28]
}
 8001e00:	e043      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <USART_PeripheralClockControl+0x110>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d13f      	bne.n	8001e8a <USART_PeripheralClockControl+0xf2>
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e14:	61d3      	str	r3, [r2, #28]
}
 8001e16:	e038      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d135      	bne.n	8001e8a <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <USART_PeripheralClockControl+0xfc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d106      	bne.n	8001e34 <USART_PeripheralClockControl+0x9c>
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e30:	6193      	str	r3, [r2, #24]
}
 8001e32:	e02a      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <USART_PeripheralClockControl+0x104>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d106      	bne.n	8001e4a <USART_PeripheralClockControl+0xb2>
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e46:	61d3      	str	r3, [r2, #28]
}
 8001e48:	e01f      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <USART_PeripheralClockControl+0x108>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d106      	bne.n	8001e60 <USART_PeripheralClockControl+0xc8>
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5c:	61d3      	str	r3, [r2, #28]
}
 8001e5e:	e014      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <USART_PeripheralClockControl+0x10c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d106      	bne.n	8001e76 <USART_PeripheralClockControl+0xde>
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e6e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e72:	61d3      	str	r3, [r2, #28]
}
 8001e74:	e009      	b.n	8001e8a <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <USART_PeripheralClockControl+0x110>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d105      	bne.n	8001e8a <USART_PeripheralClockControl+0xf2>
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <USART_PeripheralClockControl+0x100>)
 8001e84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e88:	61d3      	str	r3, [r2, #28]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	40004800 	.word	0x40004800
 8001ea4:	40004c00 	.word	0x40004c00
 8001ea8:	40005000 	.word	0x40005000

08001eac <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <USART_PeripheralControl+0x20>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 8001eca:	e008      	b.n	8001ede <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <USART_PeripheralControl+0x32>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60da      	str	r2, [r3, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <USART_SetBaudRate+0xbc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d104      	bne.n	8001f04 <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff fbb6 	bl	800166c <RCC_GetPCLKxValue>
 8001f00:	61f8      	str	r0, [r7, #28]
 8001f02:	e003      	b.n	8001f0c <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fbb1 	bl	800166c <RCC_GetPCLKxValue>
 8001f0a:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 8001f0c:	69f8      	ldr	r0, [r7, #28]
 8001f0e:	f7fe fe81 	bl	8000c14 <__aeabi_ui2f>
 8001f12:	4604      	mov	r4, r0
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fe7b 	bl	8000c14 <__aeabi_ui2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4619      	mov	r1, r3
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7fe ff82 	bl	8000e2c <__aeabi_fdiv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	491f      	ldr	r1, [pc, #124]	; (8001fa8 <USART_SetBaudRate+0xc0>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fec9 	bl	8000cc4 <__aeabi_fmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f815 	bl	8000f64 <__aeabi_f2uiz>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <USART_SetBaudRate+0xc4>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	0089      	lsls	r1, r1, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	0088      	lsls	r0, r1, #2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	440b      	add	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	3332      	adds	r3, #50	; 0x32
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <USART_SetBaudRate+0xc4>)
 8001f72:	fb82 1203 	smull	r1, r2, r2, r3
 8001f76:	1152      	asrs	r2, r2, #5
 8001f78:	17db      	asrs	r3, r3, #31
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	0119      	lsls	r1, r3, #4
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	3724      	adds	r7, #36	; 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	42c80000 	.word	0x42c80000
 8001fac:	51eb851f 	.word	0x51eb851f

08001fb0 <USART_Transmit>:


void USART_Transmit(UART_HandleTypeDef *pUSARTHandle, uint8_t *TxBuffer, uint16_t Size)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
	// 1. Check that state of USARTx is READY
	if(pUSARTHandle->State != USART_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d133      	bne.n	8002030 <USART_Transmit+0x80>
		// state of USARTx is not ready
		return;
	}

	// 2. Change state of USARTx to BUSY_TX
	pUSARTHandle->State = USART_STATE_BUSY_TX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	// 3. Configure TxBufferSize, TxCount of USART Handler
	pUSARTHandle->TxXferSize = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	84da      	strh	r2, [r3, #38]	; 0x26

	// 4. Write data to USART_DR until TxCount value reaches to zero
	while(pUSARTHandle->TxXferCount > 0)
 8001fdc:	e016      	b.n	800200c <USART_Transmit+0x5c>
	{
		WAIT_FLAG_SET(pUSARTHandle->Instance->SR, USART_SR_TXE);
 8001fde:	bf00      	nop
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f8      	beq.n	8001fe0 <USART_Transmit+0x30>

		pUSARTHandle->Instance->DR = (uint8_t)(*TxBuffer & 0xFF);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

		TxBuffer++;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
		pUSARTHandle->TxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	84da      	strh	r2, [r3, #38]	; 0x26
	while(pUSARTHandle->TxXferCount > 0)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1e3      	bne.n	8001fde <USART_Transmit+0x2e>
	}

	// 5. Wait until TC flag is set in the SR
	WAIT_FLAG_SET(pUSARTHandle->Instance->SR, USART_SR_TC);
 8002016:	bf00      	nop
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f8      	beq.n	8002018 <USART_Transmit+0x68>

	// 6. Change state of USARTx to READY
	pUSARTHandle->State = USART_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800202e:	e000      	b.n	8002032 <USART_Transmit+0x82>
		return;
 8002030:	bf00      	nop
}
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 ffdc 	bl	8003000 <BLDC_MspInit>

}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800205e:	3b01      	subs	r3, #1
 8002060:	2b05      	cmp	r3, #5
 8002062:	d87b      	bhi.n	800215c <BLDC_Drive+0x10c>
 8002064:	a201      	add	r2, pc, #4	; (adr r2, 800206c <BLDC_Drive+0x1c>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	08002139 	.word	0x08002139
 8002070:	080020a9 	.word	0x080020a9
 8002074:	08002085 	.word	0x08002085
 8002078:	080020f1 	.word	0x080020f1
 800207c:	08002115 	.word	0x08002115
 8002080:	080020cd 	.word	0x080020cd
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <BLDC_Drive+0x46>
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb0a 	bl	80026a8 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 8002094:	e064      	b.n	8002160 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800209c:	2b01      	cmp	r3, #1
 800209e:	d15f      	bne.n	8002160 <BLDC_Drive+0x110>
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa59 	bl	8002558 <BLDC_Step2>
			break;
 80020a6:	e05b      	b.n	8002160 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <BLDC_Drive+0x6a>
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fac0 	bl	8002638 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 80020b8:	e054      	b.n	8002164 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d14f      	bne.n	8002164 <BLDC_Drive+0x114>
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa0f 	bl	80024e8 <BLDC_Step1>
			break;
 80020ca:	e04b      	b.n	8002164 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <BLDC_Drive+0x8e>
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa76 	bl	80025c8 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 80020dc:	e044      	b.n	8002168 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d13f      	bne.n	8002168 <BLDC_Drive+0x118>
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb15 	bl	8002718 <BLDC_Step6>
			break;
 80020ee:	e03b      	b.n	8002168 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <BLDC_Drive+0xb2>
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa2c 	bl	8002558 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002100:	e034      	b.n	800216c <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002108:	2b01      	cmp	r3, #1
 800210a:	d12f      	bne.n	800216c <BLDC_Drive+0x11c>
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 facb 	bl	80026a8 <BLDC_Step5>
			break;
 8002112:	e02b      	b.n	800216c <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <BLDC_Drive+0xd6>
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9e2 	bl	80024e8 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8002124:	e024      	b.n	8002170 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11f      	bne.n	8002170 <BLDC_Drive+0x120>
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fa81 	bl	8002638 <BLDC_Step4>
			break;
 8002136:	e01b      	b.n	8002170 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <BLDC_Drive+0xfa>
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fae8 	bl	8002718 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002148:	e014      	b.n	8002174 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10f      	bne.n	8002174 <BLDC_Drive+0x124>
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fa37 	bl	80025c8 <BLDC_Step3>
			break;
 800215a:	e00b      	b.n	8002174 <BLDC_Drive+0x124>
		}

		default :
			break;
 800215c:	bf00      	nop
 800215e:	e00a      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 8002160:	bf00      	nop
 8002162:	e008      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 8002164:	bf00      	nop
 8002166:	e006      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <BLDC_Drive+0x126>
			break;
 8002174:	bf00      	nop
	}
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop

08002180 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	b29b      	uxth	r3, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->Speed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 80021a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f93a 	bl	8000424 <__aeabi_i2d>
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <BLDC_Get_Speed+0x94>)
 80021b6:	f7fe f99f 	bl	80004f8 <__aeabi_dmul>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	4625      	mov	r5, r4
 80021c0:	461c      	mov	r4, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021c8:	461a      	mov	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d0:	fb03 f302 	mul.w	r3, r3, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f925 	bl	8000424 <__aeabi_i2d>
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <BLDC_Get_Speed+0x98>)
 80021e0:	f7fe f98a 	bl	80004f8 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4620      	mov	r0, r4
 80021ea:	4629      	mov	r1, r5
 80021ec:	f7fe faae 	bl	800074c <__aeabi_ddiv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	4618      	mov	r0, r3
 80021f6:	4621      	mov	r1, r4
 80021f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fc:	f7fe faa6 	bl	800074c <__aeabi_ddiv>
 8002200:	4603      	mov	r3, r0
 8002202:	460c      	mov	r4, r1
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	404e0000 	.word	0x404e0000
 8002218:	40080000 	.word	0x40080000

0800221c <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800222a:	3b01      	subs	r3, #1
 800222c:	2b05      	cmp	r3, #5
 800222e:	f200 8093 	bhi.w	8002358 <BLDC_Get_Position+0x13c>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <BLDC_Get_Position+0x1c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	0800232d 	.word	0x0800232d
 800223c:	0800227d 	.word	0x0800227d
 8002240:	08002251 	.word	0x08002251
 8002244:	080022d5 	.word	0x080022d5
 8002248:	08002301 	.word	0x08002301
 800224c:	080022a9 	.word	0x080022a9
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002256:	2b02      	cmp	r3, #2
 8002258:	d105      	bne.n	8002266 <BLDC_Get_Position+0x4a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002264:	e07a      	b.n	800235c <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800226c:	2b01      	cmp	r3, #1
 800226e:	d175      	bne.n	800235c <BLDC_Get_Position+0x140>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 800227a:	e06f      	b.n	800235c <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002282:	2b06      	cmp	r3, #6
 8002284:	d105      	bne.n	8002292 <BLDC_Get_Position+0x76>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002290:	e066      	b.n	8002360 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002298:	2b03      	cmp	r3, #3
 800229a:	d161      	bne.n	8002360 <BLDC_Get_Position+0x144>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 80022a6:	e05b      	b.n	8002360 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d105      	bne.n	80022be <BLDC_Get_Position+0xa2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 80022bc:	e052      	b.n	8002364 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d14d      	bne.n	8002364 <BLDC_Get_Position+0x148>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 80022d2:	e047      	b.n	8002364 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d105      	bne.n	80022ea <BLDC_Get_Position+0xce>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 80022e8:	e03e      	b.n	8002368 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d139      	bne.n	8002368 <BLDC_Get_Position+0x14c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 80022fe:	e033      	b.n	8002368 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002306:	2b01      	cmp	r3, #1
 8002308:	d105      	bne.n	8002316 <BLDC_Get_Position+0xfa>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002314:	e02a      	b.n	800236c <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800231c:	2b04      	cmp	r3, #4
 800231e:	d125      	bne.n	800236c <BLDC_Get_Position+0x150>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	1e5a      	subs	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 800232a:	e01f      	b.n	800236c <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002332:	2b03      	cmp	r3, #3
 8002334:	d105      	bne.n	8002342 <BLDC_Get_Position+0x126>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002340:	e016      	b.n	8002370 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002348:	2b05      	cmp	r3, #5
 800234a:	d111      	bne.n	8002370 <BLDC_Get_Position+0x154>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002356:	e00b      	b.n	8002370 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002358:	bf00      	nop
 800235a:	e00a      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 800235c:	bf00      	nop
 800235e:	e008      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 8002360:	bf00      	nop
 8002362:	e006      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 8002364:	bf00      	nop
 8002366:	e004      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 8002368:	bf00      	nop
 800236a:	e002      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <BLDC_Get_Position+0x156>
			break;
 8002370:	bf00      	nop
	}

	pBLDCHandle->Position = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f854 	bl	8000424 <__aeabi_i2d>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002382:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002386:	461a      	mov	r2, r3
 8002388:	4623      	mov	r3, r4
 800238a:	f7fe f8b5 	bl	80004f8 <__aeabi_dmul>
 800238e:	4603      	mov	r3, r0
 8002390:	460c      	mov	r4, r1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}

080023ac <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6858      	ldr	r0, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7ff f82f 	bl	8001424 <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002400:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002402:	200a      	movs	r0, #10
 8002404:	f000 fb7e 	bl	8002b04 <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002408:	f107 0308 	add.w	r3, r7, #8
 800240c:	2210      	movs	r2, #16
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f001 f913 	bl	800363c <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002424:	2301      	movs	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f107 0208 	add.w	r2, r7, #8
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fdb6 	bl	8000fa4 <GPIO_Init>
	Delay_ms(10);
 8002438:	200a      	movs	r0, #10
 800243a:	f000 fb63 	bl	8002b04 <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6898      	ldr	r0, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	b29b      	uxth	r3, r3
 8002448:	2201      	movs	r2, #1
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe ffea 	bl	8001424 <GPIO_WritePin>
	Delay_ms(10);
 8002450:	200a      	movs	r0, #10
 8002452:	f000 fb57 	bl	8002b04 <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6898      	ldr	r0, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	b29b      	uxth	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe ffde 	bl	8001424 <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	2210      	movs	r2, #16
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f8e3 	bl	800363c <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f107 0208 	add.w	r2, r7, #8
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fd86 	bl	8000fa4 <GPIO_Init>
	Delay_ms(10);
 8002498:	200a      	movs	r0, #10
 800249a:	f000 fb33 	bl	8002b04 <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0210 	orr.w	r2, r2, #16
 80024c4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d8:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 80024da:	200a      	movs	r0, #10
 80024dc:	f000 fb12 	bl	8002b04 <Delay_ms>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	b299      	uxth	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b29b      	uxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	4812      	ldr	r0, [pc, #72]	; (8002554 <BLDC_Step1+0x6c>)
 800250a:	f7fe ffa9 	bl	8001460 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002534:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40010c00 	.word	0x40010c00

08002558 <BLDC_Step2>:

void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b299      	uxth	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	4812      	ldr	r0, [pc, #72]	; (80025c4 <BLDC_Step2+0x6c>)
 800257a:	f7fe ff71 	bl	8001460 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6a1a      	ldr	r2, [r3, #32]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0210 	orr.w	r2, r2, #16
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40010c00 	.word	0x40010c00

080025c8 <BLDC_Step3>:

void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b299      	uxth	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4812      	ldr	r0, [pc, #72]	; (8002634 <BLDC_Step3+0x6c>)
 80025ea:	f7fe ff39 	bl	8001460 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0210 	bic.w	r2, r2, #16
 8002600:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002614:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40010c00 	.word	0x40010c00

08002638 <BLDC_Step4>:

void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	b299      	uxth	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b29b      	uxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <BLDC_Step4+0x6c>)
 800265a:	f7fe ff01 	bl	8001460 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0210 	bic.w	r2, r2, #16
 8002670:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002684:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40010c00 	.word	0x40010c00

080026a8 <BLDC_Step5>:

void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <BLDC_Step5+0x6c>)
 80026ca:	f7fe fec9 	bl	8001460 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0210 	bic.w	r2, r2, #16
 80026f4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40010c00 	.word	0x40010c00

08002718 <BLDC_Step6>:

void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	b299      	uxth	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b29b      	uxth	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	4812      	ldr	r0, [pc, #72]	; (8002784 <BLDC_Step6+0x6c>)
 800273a:	f7fe fe91 	bl	8001460 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0210 	bic.w	r2, r2, #16
 8002764:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40010c00 	.word	0x40010c00

08002788 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	460b      	mov	r3, r1
 8002794:	71bb      	strb	r3, [r7, #6]
 8002796:	4613      	mov	r3, r2
 8002798:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d11d      	bne.n	80027dc <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b1f      	cmp	r3, #31
 80027a4:	d80a      	bhi.n	80027bc <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	4611      	mov	r1, r2
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e033      	b.n	8002824 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2b3b      	cmp	r3, #59	; 0x3b
 80027c0:	d830      	bhi.n	8002824 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	79fa      	ldrb	r2, [r7, #7]
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4611      	mov	r1, r2
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6053      	str	r3, [r2, #4]
 80027da:	e023      	b.n	8002824 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 80027dc:	797b      	ldrb	r3, [r7, #5]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d120      	bne.n	8002824 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b1f      	cmp	r3, #31
 80027e6:	d80c      	bhi.n	8002802 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	4611      	mov	r1, r2
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <NVIC_IRQConfig+0xcc>)
 80027fa:	430b      	orrs	r3, r1
 80027fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002800:	e010      	b.n	8002824 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b3b      	cmp	r3, #59	; 0x3b
 8002806:	d80d      	bhi.n	8002824 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <NVIC_IRQConfig+0xcc>)
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280e:	79fa      	ldrb	r2, [r7, #7]
 8002810:	f002 021f 	and.w	r2, r2, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	4611      	mov	r1, r2
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <NVIC_IRQConfig+0xcc>)
 800281e:	430b      	orrs	r3, r1
 8002820:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <NVIC_IRQConfig+0xcc>)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4413      	add	r3, r2
 800282a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800282e:	b2db      	uxtb	r3, r3
 8002830:	b25a      	sxtb	r2, r3
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	b25b      	sxtb	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b259      	sxtb	r1, r3
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <NVIC_IRQConfig+0xcc>)
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	b2c9      	uxtb	r1, r1
 8002842:	4413      	add	r3, r2
 8002844:	460a      	mov	r2, r1
 8002846:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100

08002858 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b092      	sub	sp, #72	; 0x48
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	2228      	movs	r2, #40	; 0x28
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fee3 	bl	800363c <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	2214      	movs	r2, #20
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fedc 	bl	800363c <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002884:	2301      	movs	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8002888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288c:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8002898:	2302      	movs	r3, #2
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	3b10      	subs	r3, #16
 80028a0:	2b38      	cmp	r3, #56	; 0x38
 80028a2:	f200 8101 	bhi.w	8002aa8 <SystemClock_Config+0x250>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <SystemClock_Config+0x54>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	08002991 	.word	0x08002991
 80028b0:	08002aa9 	.word	0x08002aa9
 80028b4:	08002aa9 	.word	0x08002aa9
 80028b8:	08002aa9 	.word	0x08002aa9
 80028bc:	08002aa9 	.word	0x08002aa9
 80028c0:	08002aa9 	.word	0x08002aa9
 80028c4:	08002aa9 	.word	0x08002aa9
 80028c8:	08002aa9 	.word	0x08002aa9
 80028cc:	080029b1 	.word	0x080029b1
 80028d0:	08002aa9 	.word	0x08002aa9
 80028d4:	08002aa9 	.word	0x08002aa9
 80028d8:	08002aa9 	.word	0x08002aa9
 80028dc:	08002aa9 	.word	0x08002aa9
 80028e0:	08002aa9 	.word	0x08002aa9
 80028e4:	08002aa9 	.word	0x08002aa9
 80028e8:	08002aa9 	.word	0x08002aa9
 80028ec:	080029d3 	.word	0x080029d3
 80028f0:	08002aa9 	.word	0x08002aa9
 80028f4:	08002aa9 	.word	0x08002aa9
 80028f8:	08002aa9 	.word	0x08002aa9
 80028fc:	08002aa9 	.word	0x08002aa9
 8002900:	08002aa9 	.word	0x08002aa9
 8002904:	08002aa9 	.word	0x08002aa9
 8002908:	08002aa9 	.word	0x08002aa9
 800290c:	080029f5 	.word	0x080029f5
 8002910:	08002aa9 	.word	0x08002aa9
 8002914:	08002aa9 	.word	0x08002aa9
 8002918:	08002aa9 	.word	0x08002aa9
 800291c:	08002aa9 	.word	0x08002aa9
 8002920:	08002aa9 	.word	0x08002aa9
 8002924:	08002aa9 	.word	0x08002aa9
 8002928:	08002aa9 	.word	0x08002aa9
 800292c:	08002a19 	.word	0x08002a19
 8002930:	08002aa9 	.word	0x08002aa9
 8002934:	08002aa9 	.word	0x08002aa9
 8002938:	08002aa9 	.word	0x08002aa9
 800293c:	08002aa9 	.word	0x08002aa9
 8002940:	08002aa9 	.word	0x08002aa9
 8002944:	08002aa9 	.word	0x08002aa9
 8002948:	08002aa9 	.word	0x08002aa9
 800294c:	08002a3d 	.word	0x08002a3d
 8002950:	08002aa9 	.word	0x08002aa9
 8002954:	08002aa9 	.word	0x08002aa9
 8002958:	08002aa9 	.word	0x08002aa9
 800295c:	08002aa9 	.word	0x08002aa9
 8002960:	08002aa9 	.word	0x08002aa9
 8002964:	08002aa9 	.word	0x08002aa9
 8002968:	08002aa9 	.word	0x08002aa9
 800296c:	08002a61 	.word	0x08002a61
 8002970:	08002aa9 	.word	0x08002aa9
 8002974:	08002aa9 	.word	0x08002aa9
 8002978:	08002aa9 	.word	0x08002aa9
 800297c:	08002aa9 	.word	0x08002aa9
 8002980:	08002aa9 	.word	0x08002aa9
 8002984:	08002aa9 	.word	0x08002aa9
 8002988:	08002aa9 	.word	0x08002aa9
 800298c:	08002a85 	.word	0x08002a85
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8002990:	2300      	movs	r3, #0
 8002992:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002994:	230f      	movs	r3, #15
 8002996:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002998:	2302      	movs	r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80029ae:	e07c      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 80029b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b4:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029b6:	230f      	movs	r3, #15
 80029b8:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ba:	2302      	movs	r3, #2
 80029bc:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80029d0:	e06b      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 80029d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029d8:	230f      	movs	r3, #15
 80029da:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029dc:	2302      	movs	r3, #2
 80029de:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80029f2:	e05a      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 80029f4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80029f8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029fa:	230f      	movs	r3, #15
 80029fc:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fe:	2302      	movs	r3, #2
 8002a00:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8002a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002a16:	e048      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8002a18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a1e:	230f      	movs	r3, #15
 8002a20:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a22:	2302      	movs	r3, #2
 8002a24:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002a3a:	e036      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8002a3c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a42:	230f      	movs	r3, #15
 8002a44:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a46:	2302      	movs	r3, #2
 8002a48:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8002a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a52:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002a5e:	e024      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8002a60:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a66:	230f      	movs	r3, #15
 8002a68:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8002a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a76:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002a82:	e012      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a88:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8002a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002aa6:	e000      	b.n	8002aaa <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8002aa8:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fd0c 	bl	80014cc <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8002ab4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fd54 	bl	800156c <RCC_ClockConfig>
}
 8002ac4:	bf00      	nop
 8002ac6:	3748      	adds	r7, #72	; 0x48
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8002acc:	b4b0      	push	{r4, r5, r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	e006      	b.n	8002ae6 <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8002ad8:	2500      	movs	r5, #0
 8002ada:	e001      	b.n	8002ae0 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8002adc:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8002ade:	3501      	adds	r5, #1
 8002ae0:	2d4c      	cmp	r5, #76	; 0x4c
 8002ae2:	d9fb      	bls.n	8002adc <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8002ae4:	3401      	adds	r4, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <Delay_us+0x34>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	429c      	cmp	r4, r3
 8002af2:	d3f1      	bcc.n	8002ad8 <Delay_us+0xc>
		}
	}
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bcb0      	pop	{r4, r5, r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	cccccccd 	.word	0xcccccccd

08002b04 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ffd8 	bl	8002acc <Delay_us>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM6_IRQHandler+0x10>)
 8002b2a:	f7ff f8ad 	bl	8001c88 <TIM_IRQHandling>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200002c4 	.word	0x200002c4

08002b38 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <EXTI9_5_IRQHandler+0x14>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fca7 	bl	8001494 <EXTI_IRQHandling>
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000200 	.word	0x20000200

08002b50 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <main>:

#include "main.h"


int main(void)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8002b62:	2048      	movs	r0, #72	; 0x48
 8002b64:	f7ff fe78 	bl	8002858 <SystemClock_Config>

	Delay_ms(3000);
 8002b68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b6c:	f7ff ffca 	bl	8002b04 <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8002b70:	f000 fc92 	bl	8003498 <MemsetHandleStructure>

	// 3. Initialize peripherals
	Button_Init();				// Initialize peripherals related to Button
 8002b74:	f000 fb82 	bl	800327c <Button_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8002b78:	f000 fb9a 	bl	80032b0 <BLDC1_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8002b7c:	f000 fc0c 	bl	8003398 <TIM6_Init>
	UART2_Init();
 8002b80:	f000 fbe6 	bl	8003350 <UART2_Init>
	Delay_ms(10);
 8002b84:	200a      	movs	r0, #10
 8002b86:	f7ff ffbd 	bl	8002b04 <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8002b8a:	489e      	ldr	r0, [pc, #632]	; (8002e04 <main+0x2a8>)
 8002b8c:	f000 fca4 	bl	80034d8 <StartTimerPwm>
	Delay_ms(10);
 8002b90:	200a      	movs	r0, #10
 8002b92:	f7ff ffb7 	bl	8002b04 <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8002b96:	489b      	ldr	r0, [pc, #620]	; (8002e04 <main+0x2a8>)
 8002b98:	f000 fcb8 	bl	800350c <DisableTimerPwmChannel>
	Delay_ms(10);
 8002b9c:	200a      	movs	r0, #10
 8002b9e:	f7ff ffb1 	bl	8002b04 <Delay_ms>

	// 6. Set Desired PWM duty to 80%
	BLDC_SET_ROTATION_DIRECTION(&BLDC1Handle, CW);
 8002ba2:	4b98      	ldr	r3, [pc, #608]	; (8002e04 <main+0x2a8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	BLDC_SET_REFERENCE_DUTY(90);
 8002baa:	4b97      	ldr	r3, [pc, #604]	; (8002e08 <main+0x2ac>)
 8002bac:	225a      	movs	r2, #90	; 0x5a
 8002bae:	701a      	strb	r2, [r3, #0]


	char MotorSpeedStr[10] = {0,};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	811a      	strh	r2, [r3, #8]

	while(1)
	{
		sprintf(MotorSpeedStr, "%.2lf", BLDC1Handle.Speed);
 8002bba:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <main+0x2a8>)
 8002bbc:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8002bc0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002bc4:	1d38      	adds	r0, r7, #4
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4623      	mov	r3, r4
 8002bca:	4990      	ldr	r1, [pc, #576]	; (8002e0c <main+0x2b0>)
 8002bcc:	f001 f98e 	bl	8003eec <siprintf>
		strcat(MotorSpeedStr, "[RPM]\n");
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd facc 	bl	8000170 <strlen>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	4a8b      	ldr	r2, [pc, #556]	; (8002e10 <main+0x2b4>)
 8002be2:	6810      	ldr	r0, [r2, #0]
 8002be4:	6018      	str	r0, [r3, #0]
 8002be6:	8891      	ldrh	r1, [r2, #4]
 8002be8:	7992      	ldrb	r2, [r2, #6]
 8002bea:	8099      	strh	r1, [r3, #4]
 8002bec:	719a      	strb	r2, [r3, #6]
		USART_Transmit(&UART2Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fabd 	bl	8000170 <strlen>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4885      	ldr	r0, [pc, #532]	; (8002e14 <main+0x2b8>)
 8002c00:	f7ff f9d6 	bl	8001fb0 <USART_Transmit>
		Delay_ms(1000);
 8002c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c08:	f7ff ff7c 	bl	8002b04 <Delay_ms>

		// 1. Check the START/STOP Button is pressed
		if(ButtonFlag == FLAG_SET)
 8002c0c:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <main+0x2bc>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d1d2      	bne.n	8002bba <main+0x5e>
		{
			if(BLDC1Handle.MotorState == STOP)
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <main+0x2a8>)
 8002c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f040 80c1 	bne.w	8002da2 <main+0x246>
			{
				// 1. Change MotorState from STOP to START
				BLDC1Handle.MotorState = START;
 8002c20:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <main+0x2a8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 2. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	2017      	movs	r0, #23
 8002c2e:	f7ff fdab 	bl	8002788 <NVIC_IRQConfig>

				// 3. Drive motor to trigger EXTI
				SetPwmDuty(&BLDC1Handle, 10);
 8002c32:	210a      	movs	r1, #10
 8002c34:	4873      	ldr	r0, [pc, #460]	; (8002e04 <main+0x2a8>)
 8002c36:	f000 fc90 	bl	800355a <SetPwmDuty>

				// 4. Charge Bootstrap Capacitor for 10ms before Drive BLDC motor
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8002c3a:	4872      	ldr	r0, [pc, #456]	; (8002e04 <main+0x2a8>)
 8002c3c:	f7ff fbb6 	bl	80023ac <BLDC_BootstrapCap_Charge>

				// 5. Detect current HallPhase location
				BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8)) >> 6U;
 8002c40:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <main+0x2c0>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <main+0x2a8>)
 8002c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

				BLDC_FIND_OLD_HALLPHASE(&BLDC1Handle);
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <main+0x2a8>)
 8002c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	f200 8086 	bhi.w	8002d6e <main+0x212>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <main+0x10c>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002d49 	.word	0x08002d49
 8002c6c:	08002ca9 	.word	0x08002ca9
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002cf9 	.word	0x08002cf9
 8002c78:	08002d21 	.word	0x08002d21
 8002c7c:	08002cd1 	.word	0x08002cd1
 8002c80:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <main+0x2a8>)
 8002c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <main+0x138>
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <main+0x2a8>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002c92:	e06c      	b.n	8002d6e <main+0x212>
 8002c94:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <main+0x2a8>)
 8002c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d167      	bne.n	8002d6e <main+0x212>
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <main+0x2a8>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002ca6:	e062      	b.n	8002d6e <main+0x212>
 8002ca8:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <main+0x2a8>)
 8002caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <main+0x160>
 8002cb2:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <main+0x2a8>)
 8002cb4:	2206      	movs	r2, #6
 8002cb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002cba:	e058      	b.n	8002d6e <main+0x212>
 8002cbc:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <main+0x2a8>)
 8002cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d153      	bne.n	8002d6e <main+0x212>
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <main+0x2a8>)
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002cce:	e04e      	b.n	8002d6e <main+0x212>
 8002cd0:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <main+0x2a8>)
 8002cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <main+0x188>
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <main+0x2a8>)
 8002cdc:	2204      	movs	r2, #4
 8002cde:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002ce2:	e044      	b.n	8002d6e <main+0x212>
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <main+0x2a8>)
 8002ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d13f      	bne.n	8002d6e <main+0x212>
 8002cee:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <main+0x2a8>)
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002cf6:	e03a      	b.n	8002d6e <main+0x212>
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <main+0x2a8>)
 8002cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <main+0x1b0>
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <main+0x2a8>)
 8002d04:	2205      	movs	r2, #5
 8002d06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d0a:	e030      	b.n	8002d6e <main+0x212>
 8002d0c:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <main+0x2a8>)
 8002d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d12b      	bne.n	8002d6e <main+0x212>
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <main+0x2a8>)
 8002d18:	2206      	movs	r2, #6
 8002d1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d1e:	e026      	b.n	8002d6e <main+0x212>
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <main+0x2a8>)
 8002d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <main+0x1d8>
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <main+0x2a8>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d32:	e01c      	b.n	8002d6e <main+0x212>
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <main+0x2a8>)
 8002d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d117      	bne.n	8002d6e <main+0x212>
 8002d3e:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <main+0x2a8>)
 8002d40:	2204      	movs	r2, #4
 8002d42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d46:	e012      	b.n	8002d6e <main+0x212>
 8002d48:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <main+0x2a8>)
 8002d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <main+0x200>
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <main+0x2a8>)
 8002d54:	2203      	movs	r2, #3
 8002d56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d5a:	e008      	b.n	8002d6e <main+0x212>
 8002d5c:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <main+0x2a8>)
 8002d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d103      	bne.n	8002d6e <main+0x212>
 8002d66:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <main+0x2a8>)
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8002d6e:	bf00      	nop

				// 6. Drive BLDC motor according to HallPhase location
				BLDC_Drive(&BLDC1Handle);
 8002d70:	4824      	ldr	r0, [pc, #144]	; (8002e04 <main+0x2a8>)
 8002d72:	f7ff f96d 	bl	8002050 <BLDC_Drive>

				// 7. Increase PWM duty cycle from 5[%] to DutyRef[%]
				for(int duty = 10; duty <= DutyRef; duty += 5)
 8002d76:	230a      	movs	r3, #10
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e00b      	b.n	8002d94 <main+0x238>
				{
					SetPwmDuty(&BLDC1Handle, duty);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4820      	ldr	r0, [pc, #128]	; (8002e04 <main+0x2a8>)
 8002d82:	f000 fbea 	bl	800355a <SetPwmDuty>
					Delay_ms(300);
 8002d86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d8a:	f7ff febb 	bl	8002b04 <Delay_ms>
				for(int duty = 10; duty <= DutyRef; duty += 5)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3305      	adds	r3, #5
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <main+0x2ac>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	dded      	ble.n	8002d7c <main+0x220>
 8002da0:	e02c      	b.n	8002dfc <main+0x2a0>
				}
			}

			else if(BLDC1Handle.MotorState == START)
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <main+0x2a8>)
 8002da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d127      	bne.n	8002dfc <main+0x2a0>
			{
				// 1. Change MotorState from START to STOP
				BLDC1Handle.MotorState = STOP;
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <main+0x2a8>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 2. Decrease PWM duty cycle from DutyRef[%] to 0[%]
				for(int duty = DutyRef; duty >= 0; duty -= 5)
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <main+0x2ac>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e00b      	b.n	8002dd4 <main+0x278>
				{
					SetPwmDuty(&BLDC1Handle, duty);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4810      	ldr	r0, [pc, #64]	; (8002e04 <main+0x2a8>)
 8002dc2:	f000 fbca 	bl	800355a <SetPwmDuty>
					Delay_ms(300);
 8002dc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dca:	f7ff fe9b 	bl	8002b04 <Delay_ms>
				for(int duty = DutyRef; duty >= 0; duty -= 5)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3b05      	subs	r3, #5
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	daf0      	bge.n	8002dbc <main+0x260>
				}

				// 3. Wait until the BLDC motor stops
				Delay_ms(100);
 8002dda:	2064      	movs	r0, #100	; 0x64
 8002ddc:	f7ff fe92 	bl	8002b04 <Delay_ms>

				// 4. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8002de0:	2200      	movs	r2, #0
 8002de2:	2108      	movs	r1, #8
 8002de4:	2017      	movs	r0, #23
 8002de6:	f7ff fccf 	bl	8002788 <NVIC_IRQConfig>

				// 5. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <main+0x2a8>)
 8002dec:	6858      	ldr	r0, [r3, #4]
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <main+0x2a8>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fe fb14 	bl	8001424 <GPIO_WritePin>
			}

			ButtonFlag = FLAG_RESET;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <main+0x2bc>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
		sprintf(MotorSpeedStr, "%.2lf", BLDC1Handle.Speed);
 8002e02:	e6da      	b.n	8002bba <main+0x5e>
 8002e04:	20000200 	.word	0x20000200
 8002e08:	200001ec 	.word	0x200001ec
 8002e0c:	080056f4 	.word	0x080056f4
 8002e10:	080056fc 	.word	0x080056fc
 8002e14:	20000290 	.word	0x20000290
 8002e18:	200001f4 	.word	0x200001f4
 8002e1c:	40011000 	.word	0x40011000

08002e20 <USART_MspInit>:

#include "main.h"


void USART_MspInit(USART_TypeDef *USARTx)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2214      	movs	r2, #20
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fc03 	bl	800363c <memset>

	if(USARTx == USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <USART_MspInit+0xb4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d120      	bne.n	8002e80 <USART_MspInit+0x60>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <USART_MspInit+0xb8>)
 8002e40:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8002e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4a:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7fe f8a0 	bl	8000fa4 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8002e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e6c:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	3304      	adds	r3, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe f893 	bl	8000fa4 <GPIO_Init>
 8002e7e:	e021      	b.n	8002ec4 <USART_MspInit+0xa4>
	}
	else if(USARTx == USART2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <USART_MspInit+0xbc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d11d      	bne.n	8002ec4 <USART_MspInit+0xa4>
	{
		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <USART_MspInit+0xb8>)
 8002e8a:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8002e90:	2304      	movs	r3, #4
 8002e92:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8002e94:	2301      	movs	r3, #1
 8002e96:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fe f87c 	bl	8000fa4 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f7fe f870 	bl	8000fa4 <GPIO_Init>
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(USARTx, ENABLE);
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe ff66 	bl	8001d98 <USART_PeripheralClockControl>
}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40010800 	.word	0x40010800
 8002edc:	40004400 	.word	0x40004400

08002ee0 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <TIM_Base_MspInit+0x2c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fdae 	bl	8001a54 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	210f      	movs	r1, #15
 8002efc:	2036      	movs	r0, #54	; 0x36
 8002efe:	f7ff fc43 	bl	8002788 <NVIC_IRQConfig>
	}

}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40001000 	.word	0x40001000

08002f10 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a32      	ldr	r2, [pc, #200]	; (8002fe8 <TIM_PWM_MspInit+0xd8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d119      	bne.n	8002f56 <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2214      	movs	r2, #20
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fb86 	bl	800363c <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <TIM_PWM_MspInit+0xdc>)
 8002f32:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8002f34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f38:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fe f827 	bl	8000fa4 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_PWM_MspInit+0xe0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d119      	bne.n	8002f94 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	2214      	movs	r2, #20
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb67 	bl	800363c <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <TIM_PWM_MspInit+0xe4>)
 8002f70:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8002f72:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002f76:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f80:	2301      	movs	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fe f808 	bl	8000fa4 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <TIM_PWM_MspInit+0xe8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d119      	bne.n	8002fd2 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	2214      	movs	r2, #20
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fb48 	bl	800363c <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <TIM_PWM_MspInit+0xec>)
 8002fae:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8002fb0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002fb4:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f7fd ffe9 	bl	8000fa4 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fd3b 	bl	8001a54 <TIM_PeripheralClockControl>
}
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40010c00 	.word	0x40010c00

08003000 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08e      	sub	sp, #56	; 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800300c:	2210      	movs	r2, #16
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fb13 	bl	800363c <memset>

	if(pBLDCHandle->Instance == BLDC1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	f040 80f1 	bne.w	8003202 <BLDC_MspInit+0x202>
	{
	/************************************************************************
	 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
	 ***********************************************************************/

		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 8003020:	4b7a      	ldr	r3, [pc, #488]	; (800320c <BLDC_MspInit+0x20c>)
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <BLDC_MspInit+0x210>)
 8003024:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 8003026:	4b79      	ldr	r3, [pc, #484]	; (800320c <BLDC_MspInit+0x20c>)
 8003028:	2201      	movs	r2, #1
 800302a:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 800302c:	4b77      	ldr	r3, [pc, #476]	; (800320c <BLDC_MspInit+0x20c>)
 800302e:	2202      	movs	r2, #2
 8003030:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <BLDC_MspInit+0x20c>)
 8003034:	2204      	movs	r2, #4
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 8003038:	4b74      	ldr	r3, [pc, #464]	; (800320c <BLDC_MspInit+0x20c>)
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <BLDC_MspInit+0x20c>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	431a      	orrs	r2, r3
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <BLDC_MspInit+0x20c>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	4313      	orrs	r3, r2
 8003048:	4a70      	ldr	r2, [pc, #448]	; (800320c <BLDC_MspInit+0x20c>)
 800304a:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 800304c:	4b6f      	ldr	r3, [pc, #444]	; (800320c <BLDC_MspInit+0x20c>)
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <BLDC_MspInit+0x210>)
 8003050:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 8003052:	4b6e      	ldr	r3, [pc, #440]	; (800320c <BLDC_MspInit+0x20c>)
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 8003058:	4b6c      	ldr	r3, [pc, #432]	; (800320c <BLDC_MspInit+0x20c>)
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 800305e:	4b6b      	ldr	r3, [pc, #428]	; (800320c <BLDC_MspInit+0x20c>)
 8003060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 8003066:	4b69      	ldr	r3, [pc, #420]	; (800320c <BLDC_MspInit+0x20c>)
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	4b68      	ldr	r3, [pc, #416]	; (800320c <BLDC_MspInit+0x20c>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	431a      	orrs	r2, r3
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <BLDC_MspInit+0x20c>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4313      	orrs	r3, r2
 8003076:	4a65      	ldr	r2, [pc, #404]	; (800320c <BLDC_MspInit+0x20c>)
 8003078:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOC;
 800307a:	4b64      	ldr	r3, [pc, #400]	; (800320c <BLDC_MspInit+0x20c>)
 800307c:	4a65      	ldr	r2, [pc, #404]	; (8003214 <BLDC_MspInit+0x214>)
 800307e:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_6;
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <BLDC_MspInit+0x20c>)
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_7;
 8003086:	4b61      	ldr	r3, [pc, #388]	; (800320c <BLDC_MspInit+0x20c>)
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_8;
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <BLDC_MspInit+0x20c>)
 800308e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8003094:	4b5d      	ldr	r3, [pc, #372]	; (800320c <BLDC_MspInit+0x20c>)
 8003096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <BLDC_MspInit+0x20c>)
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	431a      	orrs	r2, r3
 800309e:	4b5b      	ldr	r3, [pc, #364]	; (800320c <BLDC_MspInit+0x20c>)
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	4313      	orrs	r3, r2
 80030a4:	4a59      	ldr	r2, [pc, #356]	; (800320c <BLDC_MspInit+0x20c>)
 80030a6:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80030ae:	2301      	movs	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030b6:	2301      	movs	r3, #1
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd ff6d 	bl	8000fa4 <GPIO_Init>
		Delay_ms(10);
 80030ca:	200a      	movs	r0, #10
 80030cc:	f7ff fd1a 	bl	8002b04 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6858      	ldr	r0, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2200      	movs	r2, #0
 80030dc:	4619      	mov	r1, r3
 80030de:	f7fe f9a1 	bl	8001424 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80030e8:	2301      	movs	r3, #1
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030f0:	2301      	movs	r3, #1
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd ff50 	bl	8000fa4 <GPIO_Init>
		Delay_ms(10);
 8003104:	200a      	movs	r0, #10
 8003106:	f7ff fcfd 	bl	8002b04 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6898      	ldr	r0, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	b29b      	uxth	r3, r3
 8003114:	2200      	movs	r2, #0
 8003116:	4619      	mov	r1, r3
 8003118:	f7fe f984 	bl	8001424 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 800311c:	200a      	movs	r0, #10
 800311e:	f7ff fcf1 	bl	8002b04 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6898      	ldr	r0, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	b29b      	uxth	r3, r3
 800312c:	2201      	movs	r2, #1
 800312e:	4619      	mov	r1, r3
 8003130:	f7fe f978 	bl	8001424 <GPIO_WritePin>
		Delay_ms(10);
 8003134:	200a      	movs	r0, #10
 8003136:	f7ff fce5 	bl	8002b04 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6898      	ldr	r0, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	b29b      	uxth	r3, r3
 8003144:	2200      	movs	r2, #0
 8003146:	4619      	mov	r1, r3
 8003148:	f7fe f96c 	bl	8001424 <GPIO_WritePin>
	/********************************************************************
	 *			Low level init EXTI for Hall Sensor interrupt			*
	 ********************************************************************/

		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 800314c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003150:	2210      	movs	r2, #16
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa71 	bl	800363c <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <BLDC_MspInit+0x218>)
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd ff16 	bl	8000fa4 <GPIO_Init>

	/********************************************************************
	 *				Low level init TIM to generate PWM signals			*
	 ********************************************************************/

		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a28      	ldr	r2, [pc, #160]	; (800321c <BLDC_MspInit+0x21c>)
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a27      	ldr	r2, [pc, #156]	; (8003220 <BLDC_MspInit+0x220>)
 8003184:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (36-1);		//   72MHz / 36 = 2MHz
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2223      	movs	r2, #35	; 0x23
 800319c:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (100-1);		//   2MHz / 100 = 20kHz
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2263      	movs	r2, #99	; 0x63
 80031a4:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fb21 	bl	80017f2 <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	221c      	movs	r2, #28
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa3f 	bl	800363c <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 80031be:	2360      	movs	r3, #96	; 0x60
 80031c0:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f107 010c 	add.w	r1, r7, #12
 80031d2:	2200      	movs	r2, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fb59 	bl	800188c <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f107 010c 	add.w	r1, r7, #12
 80031e6:	2204      	movs	r2, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fb4f 	bl	800188c <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f107 010c 	add.w	r1, r7, #12
 80031fa:	2208      	movs	r2, #8
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fb45 	bl	800188c <TIM_PWM_ConfigChannel>
	}
}
 8003202:	bf00      	nop
 8003204:	3738      	adds	r7, #56	; 0x38
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000200 	.word	0x20000200
 8003210:	40010c00 	.word	0x40010c00
 8003214:	40011000 	.word	0x40011000
 8003218:	10310000 	.word	0x10310000
 800321c:	20000270 	.word	0x20000270
 8003220:	40000800 	.word	0x40000800

08003224 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <_sbrk+0x50>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <_sbrk+0x16>
		heap_end = &end;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <_sbrk+0x50>)
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <_sbrk+0x54>)
 8003238:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <_sbrk+0x50>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <_sbrk+0x50>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	466a      	mov	r2, sp
 800324a:	4293      	cmp	r3, r2
 800324c:	d907      	bls.n	800325e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800324e:	f000 f9cb 	bl	80035e8 <__errno>
 8003252:	4602      	mov	r2, r0
 8003254:	230c      	movs	r3, #12
 8003256:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	e006      	b.n	800326c <_sbrk+0x48>
	}

	heap_end += incr;
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <_sbrk+0x50>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	4a03      	ldr	r2, [pc, #12]	; (8003274 <_sbrk+0x50>)
 8003268:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200001f0 	.word	0x200001f0
 8003278:	200002e8 	.word	0x200002e8

0800327c <Button_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Button_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003282:	463b      	mov	r3, r7
 8003284:	2210      	movs	r2, #16
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f9d7 	bl	800363c <memset>

	// 1. Initialize GPIO for START/STOP Button
	GPIOInit.Pin = GPIO_PIN_7;
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_INPUT;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8003296:	2301      	movs	r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800329a:	463b      	mov	r3, r7
 800329c:	4619      	mov	r1, r3
 800329e:	4803      	ldr	r0, [pc, #12]	; (80032ac <Button_Init+0x30>)
 80032a0:	f7fd fe80 	bl	8000fa4 <GPIO_Init>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40010800 	.word	0x40010800

080032b0 <BLDC1_Init>:


void BLDC1_Init(void)
{
 80032b0:	b598      	push	{r3, r4, r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	BLDC1Handle.Instance = BLDC1;
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <BLDC1_Init+0x94>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <BLDC1_Init+0x94>)
 80032bc:	2208      	movs	r2, #8
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <BLDC1_Init+0x94>)
 80032c4:	2204      	movs	r2, #4
 80032c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <BLDC1_Init+0x94>)
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f8a5 	bl	8000424 <__aeabi_i2d>
 80032da:	4603      	mov	r3, r0
 80032dc:	460c      	mov	r4, r1
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	4918      	ldr	r1, [pc, #96]	; (8003348 <BLDC1_Init+0x98>)
 80032e8:	f7fd fa30 	bl	800074c <__aeabi_ddiv>
 80032ec:	4603      	mov	r3, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4618      	mov	r0, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <BLDC1_Init+0x9c>)
 80032fa:	f7fd fa27 	bl	800074c <__aeabi_ddiv>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <BLDC1_Init+0x94>)
 8003304:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	BLDC1Handle.MotorState = STOP;
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <BLDC1_Init+0x94>)
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <BLDC1_Init+0x94>)
 8003312:	2200      	movs	r2, #0
 8003314:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <BLDC1_Init+0x94>)
 8003318:	2200      	movs	r2, #0
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.Position = (double)0;
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <BLDC1_Init+0x94>)
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.Speed = (double)0;
 800332a:	4a06      	ldr	r2, [pc, #24]	; (8003344 <BLDC1_Init+0x94>)
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f04f 0400 	mov.w	r4, #0
 8003334:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	BLDC_Init(&BLDC1Handle);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <BLDC1_Init+0x94>)
 800333a:	f7fe fe7e 	bl	800203a <BLDC_Init>
}
 800333e:	bf00      	nop
 8003340:	bd98      	pop	{r3, r4, r7, pc}
 8003342:	bf00      	nop
 8003344:	20000200 	.word	0x20000200
 8003348:	404e0000 	.word	0x404e0000
 800334c:	40100000 	.word	0x40100000

08003350 <UART2_Init>:


void UART2_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	UART2Handle.Instance = USART2;
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <UART2_Init+0x40>)
 8003356:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <UART2_Init+0x44>)
 8003358:	601a      	str	r2, [r3, #0]
	UART2Handle.Init.Mode = UART_MODE_TX;
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <UART2_Init+0x40>)
 800335c:	2208      	movs	r2, #8
 800335e:	615a      	str	r2, [r3, #20]
	UART2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <UART2_Init+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
	UART2Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <UART2_Init+0x40>)
 8003368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800336c:	605a      	str	r2, [r3, #4]
	UART2Handle.Init.Parity = UART_PARITY_NONE;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <UART2_Init+0x40>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
	UART2Handle.Init.StopBits = UART_STOPBITS_1;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <UART2_Init+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
	UART2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <UART2_Init+0x40>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
	UART2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <UART2_Init+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]

	USART_Init(&UART2Handle);
 8003386:	4802      	ldr	r0, [pc, #8]	; (8003390 <UART2_Init+0x40>)
 8003388:	f7fe fca4 	bl	8001cd4 <USART_Init>
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000290 	.word	0x20000290
 8003394:	40004400 	.word	0x40004400

08003398 <TIM6_Init>:


void TIM6_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <TIM6_Init+0x5c>)
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <TIM6_Init+0x60>)
 80033a0:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <TIM6_Init+0x5c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <TIM6_Init+0x5c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <TIM6_Init+0x5c>)
 80033b0:	2280      	movs	r2, #128	; 0x80
 80033b2:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <TIM6_Init+0x5c>)
 80033b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80033ba:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (1000-1);	// 10kHz / 1000 = 10Hz
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <TIM6_Init+0x5c>)
 80033be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033c2:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <TIM6_Init+0x5c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 80033ca:	480a      	ldr	r0, [pc, #40]	; (80033f4 <TIM6_Init+0x5c>)
 80033cc:	f7fe f9f8 	bl	80017c0 <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <TIM6_Init+0x5c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <TIM6_Init+0x5c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <TIM6_Init+0x5c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <TIM6_Init+0x5c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200002c4 	.word	0x200002c4
 80033f8:	40001000 	.word	0x40001000
 80033fc:	00000000 	.word	0x00000000

08003400 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	/* This Callback function is executed every 100ms by TIM6 */

	if(pTIMHandle->Instance == TIM6)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a10      	ldr	r2, [pc, #64]	; (8003450 <TIM_PeriodElapsedCallback+0x50>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <TIM_PeriodElapsedCallback+0x3e>
	{
		// 1. Check the Button is pressed
		if(ButtonFlag == FLAG_RESET)
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <TIM_PeriodElapsedCallback+0x54>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <TIM_PeriodElapsedCallback+0x32>
		{
			uint8_t buttonState;

			buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_7);
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <TIM_PeriodElapsedCallback+0x58>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003424:	73fb      	strb	r3, [r7, #15]

			if(buttonState == BUTTON_PRESSED)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <TIM_PeriodElapsedCallback+0x32>
			{
				ButtonFlag = FLAG_SET;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <TIM_PeriodElapsedCallback+0x54>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
			}
		}

		// 2. Calculate the Speed of BLDC Motor
		BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8003432:	a305      	add	r3, pc, #20	; (adr r3, 8003448 <TIM_PeriodElapsedCallback+0x48>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <TIM_PeriodElapsedCallback+0x5c>)
 800343a:	f7fe fea1 	bl	8002180 <BLDC_Get_Speed>
	}
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	9999999a 	.word	0x9999999a
 800344c:	3fb99999 	.word	0x3fb99999
 8003450:	40001000 	.word	0x40001000
 8003454:	200001f4 	.word	0x200001f4
 8003458:	40010800 	.word	0x40010800
 800345c:	20000200 	.word	0x20000200

08003460 <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 6U;
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <EXTI_Callback+0x30>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <EXTI_Callback+0x34>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	b29a      	uxth	r2, r3
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <EXTI_Callback+0x34>)
 8003478:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <EXTI_Callback+0x34>)
 800347e:	f7fe fecd 	bl	800221c <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 8003482:	4804      	ldr	r0, [pc, #16]	; (8003494 <EXTI_Callback+0x34>)
 8003484:	f7fe fde4 	bl	8002050 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40011000 	.word	0x40011000
 8003494:	20000200 	.word	0x20000200

08003498 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 800349c:	2220      	movs	r2, #32
 800349e:	2100      	movs	r1, #0
 80034a0:	4809      	ldr	r0, [pc, #36]	; (80034c8 <MemsetHandleStructure+0x30>)
 80034a2:	f000 f8cb 	bl	800363c <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 80034a6:	2220      	movs	r2, #32
 80034a8:	2100      	movs	r1, #0
 80034aa:	4808      	ldr	r0, [pc, #32]	; (80034cc <MemsetHandleStructure+0x34>)
 80034ac:	f000 f8c6 	bl	800363c <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 80034b0:	2270      	movs	r2, #112	; 0x70
 80034b2:	2100      	movs	r1, #0
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <MemsetHandleStructure+0x38>)
 80034b6:	f000 f8c1 	bl	800363c <memset>
	memset(&UART2Handle, 0, sizeof(UART2Handle));
 80034ba:	2234      	movs	r2, #52	; 0x34
 80034bc:	2100      	movs	r1, #0
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MemsetHandleStructure+0x3c>)
 80034c0:	f000 f8bc 	bl	800363c <memset>
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200002c4 	.word	0x200002c4
 80034cc:	20000270 	.word	0x20000270
 80034d0:	20000200 	.word	0x20000200
 80034d4:	20000290 	.word	0x20000290

080034d8 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fb84 	bl	8001bf4 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2104      	movs	r1, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fb7e 	bl	8001bf4 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2108      	movs	r1, #8
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fb78 	bl	8001bf4 <TIM_PWM_Start>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
	...

08003594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003594:	480d      	ldr	r0, [pc, #52]	; (80035cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003596:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003598:	480d      	ldr	r0, [pc, #52]	; (80035d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800359a:	490e      	ldr	r1, [pc, #56]	; (80035d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <LoopForever+0xe>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a0:	e002      	b.n	80035a8 <LoopCopyDataInit>

080035a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a6:	3304      	adds	r3, #4

080035a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ac:	d3f9      	bcc.n	80035a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80035b0:	4c0b      	ldr	r4, [pc, #44]	; (80035e0 <LoopForever+0x16>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b4:	e001      	b.n	80035ba <LoopFillZerobss>

080035b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b8:	3204      	adds	r2, #4

080035ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035bc:	d3fb      	bcc.n	80035b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035be:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80035c2:	f000 f817 	bl	80035f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035c6:	f7ff fac9 	bl	8002b5c <main>

080035ca <LoopForever>:

LoopForever:
    b LoopForever
 80035ca:	e7fe      	b.n	80035ca <LoopForever>
  ldr   r0, =_estack
 80035cc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80035d8:	08005968 	.word	0x08005968
  ldr r2, =_sbss
 80035dc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80035e0:	200002e8 	.word	0x200002e8

080035e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC1_2_IRQHandler>
	...

080035e8 <__errno>:
 80035e8:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <__errno+0x8>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	2500      	movs	r5, #0
 80035f8:	4e0c      	ldr	r6, [pc, #48]	; (800362c <__libc_init_array+0x38>)
 80035fa:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fc:	1ba4      	subs	r4, r4, r6
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	42a5      	cmp	r5, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	f002 f85e 	bl	80056c4 <_init>
 8003608:	2500      	movs	r5, #0
 800360a:	4e0a      	ldr	r6, [pc, #40]	; (8003634 <__libc_init_array+0x40>)
 800360c:	4c0a      	ldr	r4, [pc, #40]	; (8003638 <__libc_init_array+0x44>)
 800360e:	1ba4      	subs	r4, r4, r6
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	42a5      	cmp	r5, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800361c:	4798      	blx	r3
 800361e:	3501      	adds	r5, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003626:	4798      	blx	r3
 8003628:	3501      	adds	r5, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08005960 	.word	0x08005960
 8003630:	08005960 	.word	0x08005960
 8003634:	08005960 	.word	0x08005960
 8003638:	08005964 	.word	0x08005964

0800363c <memset>:
 800363c:	4603      	mov	r3, r0
 800363e:	4402      	add	r2, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <__cvt>:
 800364c:	2b00      	cmp	r3, #0
 800364e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003652:	461e      	mov	r6, r3
 8003654:	bfbb      	ittet	lt
 8003656:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800365a:	461e      	movlt	r6, r3
 800365c:	2300      	movge	r3, #0
 800365e:	232d      	movlt	r3, #45	; 0x2d
 8003660:	b088      	sub	sp, #32
 8003662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003664:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003668:	f027 0720 	bic.w	r7, r7, #32
 800366c:	2f46      	cmp	r7, #70	; 0x46
 800366e:	4614      	mov	r4, r2
 8003670:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003672:	700b      	strb	r3, [r1, #0]
 8003674:	d004      	beq.n	8003680 <__cvt+0x34>
 8003676:	2f45      	cmp	r7, #69	; 0x45
 8003678:	d100      	bne.n	800367c <__cvt+0x30>
 800367a:	3501      	adds	r5, #1
 800367c:	2302      	movs	r3, #2
 800367e:	e000      	b.n	8003682 <__cvt+0x36>
 8003680:	2303      	movs	r3, #3
 8003682:	aa07      	add	r2, sp, #28
 8003684:	9204      	str	r2, [sp, #16]
 8003686:	aa06      	add	r2, sp, #24
 8003688:	e9cd a202 	strd	sl, r2, [sp, #8]
 800368c:	e9cd 3500 	strd	r3, r5, [sp]
 8003690:	4622      	mov	r2, r4
 8003692:	4633      	mov	r3, r6
 8003694:	f000 fcd8 	bl	8004048 <_dtoa_r>
 8003698:	2f47      	cmp	r7, #71	; 0x47
 800369a:	4680      	mov	r8, r0
 800369c:	d102      	bne.n	80036a4 <__cvt+0x58>
 800369e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036a0:	07db      	lsls	r3, r3, #31
 80036a2:	d526      	bpl.n	80036f2 <__cvt+0xa6>
 80036a4:	2f46      	cmp	r7, #70	; 0x46
 80036a6:	eb08 0905 	add.w	r9, r8, r5
 80036aa:	d111      	bne.n	80036d0 <__cvt+0x84>
 80036ac:	f898 3000 	ldrb.w	r3, [r8]
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d10a      	bne.n	80036ca <__cvt+0x7e>
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	4620      	mov	r0, r4
 80036ba:	4631      	mov	r1, r6
 80036bc:	f7fd f984 	bl	80009c8 <__aeabi_dcmpeq>
 80036c0:	b918      	cbnz	r0, 80036ca <__cvt+0x7e>
 80036c2:	f1c5 0501 	rsb	r5, r5, #1
 80036c6:	f8ca 5000 	str.w	r5, [sl]
 80036ca:	f8da 3000 	ldr.w	r3, [sl]
 80036ce:	4499      	add	r9, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	2300      	movs	r3, #0
 80036d4:	4620      	mov	r0, r4
 80036d6:	4631      	mov	r1, r6
 80036d8:	f7fd f976 	bl	80009c8 <__aeabi_dcmpeq>
 80036dc:	b938      	cbnz	r0, 80036ee <__cvt+0xa2>
 80036de:	2230      	movs	r2, #48	; 0x30
 80036e0:	9b07      	ldr	r3, [sp, #28]
 80036e2:	454b      	cmp	r3, r9
 80036e4:	d205      	bcs.n	80036f2 <__cvt+0xa6>
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	9107      	str	r1, [sp, #28]
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e7f8      	b.n	80036e0 <__cvt+0x94>
 80036ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80036f2:	4640      	mov	r0, r8
 80036f4:	9b07      	ldr	r3, [sp, #28]
 80036f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80036f8:	eba3 0308 	sub.w	r3, r3, r8
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	b008      	add	sp, #32
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003704 <__exponent>:
 8003704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003706:	2900      	cmp	r1, #0
 8003708:	bfb4      	ite	lt
 800370a:	232d      	movlt	r3, #45	; 0x2d
 800370c:	232b      	movge	r3, #43	; 0x2b
 800370e:	4604      	mov	r4, r0
 8003710:	bfb8      	it	lt
 8003712:	4249      	neglt	r1, r1
 8003714:	2909      	cmp	r1, #9
 8003716:	f804 2b02 	strb.w	r2, [r4], #2
 800371a:	7043      	strb	r3, [r0, #1]
 800371c:	dd21      	ble.n	8003762 <__exponent+0x5e>
 800371e:	f10d 0307 	add.w	r3, sp, #7
 8003722:	461f      	mov	r7, r3
 8003724:	260a      	movs	r6, #10
 8003726:	fb91 f5f6 	sdiv	r5, r1, r6
 800372a:	fb06 1115 	mls	r1, r6, r5, r1
 800372e:	2d09      	cmp	r5, #9
 8003730:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003734:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003738:	f103 32ff 	add.w	r2, r3, #4294967295
 800373c:	4629      	mov	r1, r5
 800373e:	dc09      	bgt.n	8003754 <__exponent+0x50>
 8003740:	3130      	adds	r1, #48	; 0x30
 8003742:	3b02      	subs	r3, #2
 8003744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003748:	42bb      	cmp	r3, r7
 800374a:	4622      	mov	r2, r4
 800374c:	d304      	bcc.n	8003758 <__exponent+0x54>
 800374e:	1a10      	subs	r0, r2, r0
 8003750:	b003      	add	sp, #12
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	4613      	mov	r3, r2
 8003756:	e7e6      	b.n	8003726 <__exponent+0x22>
 8003758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375c:	f804 2b01 	strb.w	r2, [r4], #1
 8003760:	e7f2      	b.n	8003748 <__exponent+0x44>
 8003762:	2330      	movs	r3, #48	; 0x30
 8003764:	4419      	add	r1, r3
 8003766:	7083      	strb	r3, [r0, #2]
 8003768:	1d02      	adds	r2, r0, #4
 800376a:	70c1      	strb	r1, [r0, #3]
 800376c:	e7ef      	b.n	800374e <__exponent+0x4a>
	...

08003770 <_printf_float>:
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	b091      	sub	sp, #68	; 0x44
 8003776:	460c      	mov	r4, r1
 8003778:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800377a:	4693      	mov	fp, r2
 800377c:	461e      	mov	r6, r3
 800377e:	4605      	mov	r5, r0
 8003780:	f001 fa16 	bl	8004bb0 <_localeconv_r>
 8003784:	6803      	ldr	r3, [r0, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	9309      	str	r3, [sp, #36]	; 0x24
 800378a:	f7fc fcf1 	bl	8000170 <strlen>
 800378e:	2300      	movs	r3, #0
 8003790:	930e      	str	r3, [sp, #56]	; 0x38
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	900a      	str	r0, [sp, #40]	; 0x28
 8003796:	3307      	adds	r3, #7
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	f103 0208 	add.w	r2, r3, #8
 80037a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80037a4:	f8d4 a000 	ldr.w	sl, [r4]
 80037a8:	603a      	str	r2, [r7, #0]
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80037b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80037ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	4ba6      	ldr	r3, [pc, #664]	; (8003a5c <_printf_float+0x2ec>)
 80037c2:	4638      	mov	r0, r7
 80037c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037c6:	f7fd f931 	bl	8000a2c <__aeabi_dcmpun>
 80037ca:	bb68      	cbnz	r0, 8003828 <_printf_float+0xb8>
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	4ba2      	ldr	r3, [pc, #648]	; (8003a5c <_printf_float+0x2ec>)
 80037d2:	4638      	mov	r0, r7
 80037d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037d6:	f7fd f90b 	bl	80009f0 <__aeabi_dcmple>
 80037da:	bb28      	cbnz	r0, 8003828 <_printf_float+0xb8>
 80037dc:	2200      	movs	r2, #0
 80037de:	2300      	movs	r3, #0
 80037e0:	4638      	mov	r0, r7
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fd f8fa 	bl	80009dc <__aeabi_dcmplt>
 80037e8:	b110      	cbz	r0, 80037f0 <_printf_float+0x80>
 80037ea:	232d      	movs	r3, #45	; 0x2d
 80037ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f0:	4f9b      	ldr	r7, [pc, #620]	; (8003a60 <_printf_float+0x2f0>)
 80037f2:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <_printf_float+0x2f4>)
 80037f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037f8:	bf98      	it	ls
 80037fa:	461f      	movls	r7, r3
 80037fc:	2303      	movs	r3, #3
 80037fe:	f04f 0900 	mov.w	r9, #0
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	f02a 0304 	bic.w	r3, sl, #4
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	9600      	str	r6, [sp, #0]
 800380c:	465b      	mov	r3, fp
 800380e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003810:	4621      	mov	r1, r4
 8003812:	4628      	mov	r0, r5
 8003814:	f000 f9e2 	bl	8003bdc <_printf_common>
 8003818:	3001      	adds	r0, #1
 800381a:	f040 8090 	bne.w	800393e <_printf_float+0x1ce>
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	b011      	add	sp, #68	; 0x44
 8003824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003828:	463a      	mov	r2, r7
 800382a:	464b      	mov	r3, r9
 800382c:	4638      	mov	r0, r7
 800382e:	4649      	mov	r1, r9
 8003830:	f7fd f8fc 	bl	8000a2c <__aeabi_dcmpun>
 8003834:	b110      	cbz	r0, 800383c <_printf_float+0xcc>
 8003836:	4f8c      	ldr	r7, [pc, #560]	; (8003a68 <_printf_float+0x2f8>)
 8003838:	4b8c      	ldr	r3, [pc, #560]	; (8003a6c <_printf_float+0x2fc>)
 800383a:	e7db      	b.n	80037f4 <_printf_float+0x84>
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	a80d      	add	r0, sp, #52	; 0x34
 8003846:	a90e      	add	r1, sp, #56	; 0x38
 8003848:	d140      	bne.n	80038cc <_printf_float+0x15c>
 800384a:	2306      	movs	r3, #6
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	f04f 0c00 	mov.w	ip, #0
 8003852:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003856:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	6022      	str	r2, [r4, #0]
 800385e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	463a      	mov	r2, r7
 8003866:	464b      	mov	r3, r9
 8003868:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800386c:	4628      	mov	r0, r5
 800386e:	f7ff feed 	bl	800364c <__cvt>
 8003872:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003876:	2b47      	cmp	r3, #71	; 0x47
 8003878:	4607      	mov	r7, r0
 800387a:	d109      	bne.n	8003890 <_printf_float+0x120>
 800387c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800387e:	1cd8      	adds	r0, r3, #3
 8003880:	db02      	blt.n	8003888 <_printf_float+0x118>
 8003882:	6862      	ldr	r2, [r4, #4]
 8003884:	4293      	cmp	r3, r2
 8003886:	dd47      	ble.n	8003918 <_printf_float+0x1a8>
 8003888:	f1a8 0802 	sub.w	r8, r8, #2
 800388c:	fa5f f888 	uxtb.w	r8, r8
 8003890:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003894:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003896:	d824      	bhi.n	80038e2 <_printf_float+0x172>
 8003898:	3901      	subs	r1, #1
 800389a:	4642      	mov	r2, r8
 800389c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038a0:	910d      	str	r1, [sp, #52]	; 0x34
 80038a2:	f7ff ff2f 	bl	8003704 <__exponent>
 80038a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038a8:	4681      	mov	r9, r0
 80038aa:	1813      	adds	r3, r2, r0
 80038ac:	2a01      	cmp	r2, #1
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	dc02      	bgt.n	80038b8 <_printf_float+0x148>
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	07d1      	lsls	r1, r2, #31
 80038b6:	d501      	bpl.n	80038bc <_printf_float+0x14c>
 80038b8:	3301      	adds	r3, #1
 80038ba:	6123      	str	r3, [r4, #16]
 80038bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0a2      	beq.n	800380a <_printf_float+0x9a>
 80038c4:	232d      	movs	r3, #45	; 0x2d
 80038c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ca:	e79e      	b.n	800380a <_printf_float+0x9a>
 80038cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80038d0:	f000 816e 	beq.w	8003bb0 <_printf_float+0x440>
 80038d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038d8:	d1b9      	bne.n	800384e <_printf_float+0xde>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1b7      	bne.n	800384e <_printf_float+0xde>
 80038de:	2301      	movs	r3, #1
 80038e0:	e7b4      	b.n	800384c <_printf_float+0xdc>
 80038e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80038e6:	d119      	bne.n	800391c <_printf_float+0x1ac>
 80038e8:	2900      	cmp	r1, #0
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	dd0c      	ble.n	8003908 <_printf_float+0x198>
 80038ee:	6121      	str	r1, [r4, #16]
 80038f0:	b913      	cbnz	r3, 80038f8 <_printf_float+0x188>
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	07d2      	lsls	r2, r2, #31
 80038f6:	d502      	bpl.n	80038fe <_printf_float+0x18e>
 80038f8:	3301      	adds	r3, #1
 80038fa:	440b      	add	r3, r1
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003900:	f04f 0900 	mov.w	r9, #0
 8003904:	65a3      	str	r3, [r4, #88]	; 0x58
 8003906:	e7d9      	b.n	80038bc <_printf_float+0x14c>
 8003908:	b913      	cbnz	r3, 8003910 <_printf_float+0x1a0>
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	07d0      	lsls	r0, r2, #31
 800390e:	d501      	bpl.n	8003914 <_printf_float+0x1a4>
 8003910:	3302      	adds	r3, #2
 8003912:	e7f3      	b.n	80038fc <_printf_float+0x18c>
 8003914:	2301      	movs	r3, #1
 8003916:	e7f1      	b.n	80038fc <_printf_float+0x18c>
 8003918:	f04f 0867 	mov.w	r8, #103	; 0x67
 800391c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003920:	4293      	cmp	r3, r2
 8003922:	db05      	blt.n	8003930 <_printf_float+0x1c0>
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	6123      	str	r3, [r4, #16]
 8003928:	07d1      	lsls	r1, r2, #31
 800392a:	d5e8      	bpl.n	80038fe <_printf_float+0x18e>
 800392c:	3301      	adds	r3, #1
 800392e:	e7e5      	b.n	80038fc <_printf_float+0x18c>
 8003930:	2b00      	cmp	r3, #0
 8003932:	bfcc      	ite	gt
 8003934:	2301      	movgt	r3, #1
 8003936:	f1c3 0302 	rsble	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	e7de      	b.n	80038fc <_printf_float+0x18c>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	055a      	lsls	r2, r3, #21
 8003942:	d407      	bmi.n	8003954 <_printf_float+0x1e4>
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	463a      	mov	r2, r7
 8003948:	4659      	mov	r1, fp
 800394a:	4628      	mov	r0, r5
 800394c:	47b0      	blx	r6
 800394e:	3001      	adds	r0, #1
 8003950:	d129      	bne.n	80039a6 <_printf_float+0x236>
 8003952:	e764      	b.n	800381e <_printf_float+0xae>
 8003954:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003958:	f240 80d7 	bls.w	8003b0a <_printf_float+0x39a>
 800395c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003960:	2200      	movs	r2, #0
 8003962:	2300      	movs	r3, #0
 8003964:	f7fd f830 	bl	80009c8 <__aeabi_dcmpeq>
 8003968:	b388      	cbz	r0, 80039ce <_printf_float+0x25e>
 800396a:	2301      	movs	r3, #1
 800396c:	4a40      	ldr	r2, [pc, #256]	; (8003a70 <_printf_float+0x300>)
 800396e:	4659      	mov	r1, fp
 8003970:	4628      	mov	r0, r5
 8003972:	47b0      	blx	r6
 8003974:	3001      	adds	r0, #1
 8003976:	f43f af52 	beq.w	800381e <_printf_float+0xae>
 800397a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800397e:	429a      	cmp	r2, r3
 8003980:	db02      	blt.n	8003988 <_printf_float+0x218>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	07d8      	lsls	r0, r3, #31
 8003986:	d50e      	bpl.n	80039a6 <_printf_float+0x236>
 8003988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800398c:	4659      	mov	r1, fp
 800398e:	4628      	mov	r0, r5
 8003990:	47b0      	blx	r6
 8003992:	3001      	adds	r0, #1
 8003994:	f43f af43 	beq.w	800381e <_printf_float+0xae>
 8003998:	2700      	movs	r7, #0
 800399a:	f104 081a 	add.w	r8, r4, #26
 800399e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039a0:	3b01      	subs	r3, #1
 80039a2:	42bb      	cmp	r3, r7
 80039a4:	dc09      	bgt.n	80039ba <_printf_float+0x24a>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	079f      	lsls	r7, r3, #30
 80039aa:	f100 80fd 	bmi.w	8003ba8 <_printf_float+0x438>
 80039ae:	68e0      	ldr	r0, [r4, #12]
 80039b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039b2:	4298      	cmp	r0, r3
 80039b4:	bfb8      	it	lt
 80039b6:	4618      	movlt	r0, r3
 80039b8:	e733      	b.n	8003822 <_printf_float+0xb2>
 80039ba:	2301      	movs	r3, #1
 80039bc:	4642      	mov	r2, r8
 80039be:	4659      	mov	r1, fp
 80039c0:	4628      	mov	r0, r5
 80039c2:	47b0      	blx	r6
 80039c4:	3001      	adds	r0, #1
 80039c6:	f43f af2a 	beq.w	800381e <_printf_float+0xae>
 80039ca:	3701      	adds	r7, #1
 80039cc:	e7e7      	b.n	800399e <_printf_float+0x22e>
 80039ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dc2b      	bgt.n	8003a2c <_printf_float+0x2bc>
 80039d4:	2301      	movs	r3, #1
 80039d6:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <_printf_float+0x300>)
 80039d8:	4659      	mov	r1, fp
 80039da:	4628      	mov	r0, r5
 80039dc:	47b0      	blx	r6
 80039de:	3001      	adds	r0, #1
 80039e0:	f43f af1d 	beq.w	800381e <_printf_float+0xae>
 80039e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039e6:	b923      	cbnz	r3, 80039f2 <_printf_float+0x282>
 80039e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039ea:	b913      	cbnz	r3, 80039f2 <_printf_float+0x282>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	d5d9      	bpl.n	80039a6 <_printf_float+0x236>
 80039f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039f6:	4659      	mov	r1, fp
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b0      	blx	r6
 80039fc:	3001      	adds	r0, #1
 80039fe:	f43f af0e 	beq.w	800381e <_printf_float+0xae>
 8003a02:	f04f 0800 	mov.w	r8, #0
 8003a06:	f104 091a 	add.w	r9, r4, #26
 8003a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	4543      	cmp	r3, r8
 8003a10:	dc01      	bgt.n	8003a16 <_printf_float+0x2a6>
 8003a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a14:	e797      	b.n	8003946 <_printf_float+0x1d6>
 8003a16:	2301      	movs	r3, #1
 8003a18:	464a      	mov	r2, r9
 8003a1a:	4659      	mov	r1, fp
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b0      	blx	r6
 8003a20:	3001      	adds	r0, #1
 8003a22:	f43f aefc 	beq.w	800381e <_printf_float+0xae>
 8003a26:	f108 0801 	add.w	r8, r8, #1
 8003a2a:	e7ee      	b.n	8003a0a <_printf_float+0x29a>
 8003a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bfa8      	it	ge
 8003a34:	461a      	movge	r2, r3
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	4690      	mov	r8, r2
 8003a3a:	dd07      	ble.n	8003a4c <_printf_float+0x2dc>
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	4659      	mov	r1, fp
 8003a40:	463a      	mov	r2, r7
 8003a42:	4628      	mov	r0, r5
 8003a44:	47b0      	blx	r6
 8003a46:	3001      	adds	r0, #1
 8003a48:	f43f aee9 	beq.w	800381e <_printf_float+0xae>
 8003a4c:	f104 031a 	add.w	r3, r4, #26
 8003a50:	f04f 0a00 	mov.w	sl, #0
 8003a54:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a5a:	e015      	b.n	8003a88 <_printf_float+0x318>
 8003a5c:	7fefffff 	.word	0x7fefffff
 8003a60:	08005707 	.word	0x08005707
 8003a64:	08005703 	.word	0x08005703
 8003a68:	0800570f 	.word	0x0800570f
 8003a6c:	0800570b 	.word	0x0800570b
 8003a70:	08005713 	.word	0x08005713
 8003a74:	2301      	movs	r3, #1
 8003a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a78:	4659      	mov	r1, fp
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b0      	blx	r6
 8003a7e:	3001      	adds	r0, #1
 8003a80:	f43f aecd 	beq.w	800381e <_printf_float+0xae>
 8003a84:	f10a 0a01 	add.w	sl, sl, #1
 8003a88:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003a8c:	eba9 0308 	sub.w	r3, r9, r8
 8003a90:	4553      	cmp	r3, sl
 8003a92:	dcef      	bgt.n	8003a74 <_printf_float+0x304>
 8003a94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	444f      	add	r7, r9
 8003a9c:	db14      	blt.n	8003ac8 <_printf_float+0x358>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	07da      	lsls	r2, r3, #31
 8003aa2:	d411      	bmi.n	8003ac8 <_printf_float+0x358>
 8003aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003aa6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003aa8:	eba3 0209 	sub.w	r2, r3, r9
 8003aac:	eba3 0901 	sub.w	r9, r3, r1
 8003ab0:	4591      	cmp	r9, r2
 8003ab2:	bfa8      	it	ge
 8003ab4:	4691      	movge	r9, r2
 8003ab6:	f1b9 0f00 	cmp.w	r9, #0
 8003aba:	dc0d      	bgt.n	8003ad8 <_printf_float+0x368>
 8003abc:	2700      	movs	r7, #0
 8003abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ac2:	f104 081a 	add.w	r8, r4, #26
 8003ac6:	e018      	b.n	8003afa <_printf_float+0x38a>
 8003ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003acc:	4659      	mov	r1, fp
 8003ace:	4628      	mov	r0, r5
 8003ad0:	47b0      	blx	r6
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d1e6      	bne.n	8003aa4 <_printf_float+0x334>
 8003ad6:	e6a2      	b.n	800381e <_printf_float+0xae>
 8003ad8:	464b      	mov	r3, r9
 8003ada:	463a      	mov	r2, r7
 8003adc:	4659      	mov	r1, fp
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b0      	blx	r6
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d1ea      	bne.n	8003abc <_printf_float+0x34c>
 8003ae6:	e69a      	b.n	800381e <_printf_float+0xae>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4642      	mov	r2, r8
 8003aec:	4659      	mov	r1, fp
 8003aee:	4628      	mov	r0, r5
 8003af0:	47b0      	blx	r6
 8003af2:	3001      	adds	r0, #1
 8003af4:	f43f ae93 	beq.w	800381e <_printf_float+0xae>
 8003af8:	3701      	adds	r7, #1
 8003afa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	eba3 0309 	sub.w	r3, r3, r9
 8003b04:	42bb      	cmp	r3, r7
 8003b06:	dcef      	bgt.n	8003ae8 <_printf_float+0x378>
 8003b08:	e74d      	b.n	80039a6 <_printf_float+0x236>
 8003b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b0c:	2a01      	cmp	r2, #1
 8003b0e:	dc01      	bgt.n	8003b14 <_printf_float+0x3a4>
 8003b10:	07db      	lsls	r3, r3, #31
 8003b12:	d538      	bpl.n	8003b86 <_printf_float+0x416>
 8003b14:	2301      	movs	r3, #1
 8003b16:	463a      	mov	r2, r7
 8003b18:	4659      	mov	r1, fp
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	47b0      	blx	r6
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f43f ae7d 	beq.w	800381e <_printf_float+0xae>
 8003b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b28:	4659      	mov	r1, fp
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	47b0      	blx	r6
 8003b2e:	3001      	adds	r0, #1
 8003b30:	f107 0701 	add.w	r7, r7, #1
 8003b34:	f43f ae73 	beq.w	800381e <_printf_float+0xae>
 8003b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f103 38ff 	add.w	r8, r3, #4294967295
 8003b44:	2300      	movs	r3, #0
 8003b46:	f7fc ff3f 	bl	80009c8 <__aeabi_dcmpeq>
 8003b4a:	b9c0      	cbnz	r0, 8003b7e <_printf_float+0x40e>
 8003b4c:	4643      	mov	r3, r8
 8003b4e:	463a      	mov	r2, r7
 8003b50:	4659      	mov	r1, fp
 8003b52:	4628      	mov	r0, r5
 8003b54:	47b0      	blx	r6
 8003b56:	3001      	adds	r0, #1
 8003b58:	d10d      	bne.n	8003b76 <_printf_float+0x406>
 8003b5a:	e660      	b.n	800381e <_printf_float+0xae>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4642      	mov	r2, r8
 8003b60:	4659      	mov	r1, fp
 8003b62:	4628      	mov	r0, r5
 8003b64:	47b0      	blx	r6
 8003b66:	3001      	adds	r0, #1
 8003b68:	f43f ae59 	beq.w	800381e <_printf_float+0xae>
 8003b6c:	3701      	adds	r7, #1
 8003b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b70:	3b01      	subs	r3, #1
 8003b72:	42bb      	cmp	r3, r7
 8003b74:	dcf2      	bgt.n	8003b5c <_printf_float+0x3ec>
 8003b76:	464b      	mov	r3, r9
 8003b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b7c:	e6e4      	b.n	8003948 <_printf_float+0x1d8>
 8003b7e:	2700      	movs	r7, #0
 8003b80:	f104 081a 	add.w	r8, r4, #26
 8003b84:	e7f3      	b.n	8003b6e <_printf_float+0x3fe>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7e1      	b.n	8003b4e <_printf_float+0x3de>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	4659      	mov	r1, fp
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b0      	blx	r6
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f ae42 	beq.w	800381e <_printf_float+0xae>
 8003b9a:	3701      	adds	r7, #1
 8003b9c:	68e3      	ldr	r3, [r4, #12]
 8003b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	42bb      	cmp	r3, r7
 8003ba4:	dcf1      	bgt.n	8003b8a <_printf_float+0x41a>
 8003ba6:	e702      	b.n	80039ae <_printf_float+0x23e>
 8003ba8:	2700      	movs	r7, #0
 8003baa:	f104 0819 	add.w	r8, r4, #25
 8003bae:	e7f5      	b.n	8003b9c <_printf_float+0x42c>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f43f ae94 	beq.w	80038de <_printf_float+0x16e>
 8003bb6:	f04f 0c00 	mov.w	ip, #0
 8003bba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003bbe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003bc2:	6022      	str	r2, [r4, #0]
 8003bc4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003bc8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	463a      	mov	r2, r7
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7ff fd3a 	bl	800364c <__cvt>
 8003bd8:	4607      	mov	r7, r0
 8003bda:	e64f      	b.n	800387c <_printf_float+0x10c>

08003bdc <_printf_common>:
 8003bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	4691      	mov	r9, r2
 8003be2:	461f      	mov	r7, r3
 8003be4:	688a      	ldr	r2, [r1, #8]
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4606      	mov	r6, r0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfb8      	it	lt
 8003bee:	4613      	movlt	r3, r2
 8003bf0:	f8c9 3000 	str.w	r3, [r9]
 8003bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bfe:	b112      	cbz	r2, 8003c06 <_printf_common+0x2a>
 8003c00:	3301      	adds	r3, #1
 8003c02:	f8c9 3000 	str.w	r3, [r9]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	0699      	lsls	r1, r3, #26
 8003c0a:	bf42      	ittt	mi
 8003c0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c10:	3302      	addmi	r3, #2
 8003c12:	f8c9 3000 	strmi.w	r3, [r9]
 8003c16:	6825      	ldr	r5, [r4, #0]
 8003c18:	f015 0506 	ands.w	r5, r5, #6
 8003c1c:	d107      	bne.n	8003c2e <_printf_common+0x52>
 8003c1e:	f104 0a19 	add.w	sl, r4, #25
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	f8d9 2000 	ldr.w	r2, [r9]
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	42ab      	cmp	r3, r5
 8003c2c:	dc29      	bgt.n	8003c82 <_printf_common+0xa6>
 8003c2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	3300      	adds	r3, #0
 8003c36:	bf18      	it	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	0692      	lsls	r2, r2, #26
 8003c3c:	d42e      	bmi.n	8003c9c <_printf_common+0xc0>
 8003c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c42:	4639      	mov	r1, r7
 8003c44:	4630      	mov	r0, r6
 8003c46:	47c0      	blx	r8
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d021      	beq.n	8003c90 <_printf_common+0xb4>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	68e5      	ldr	r5, [r4, #12]
 8003c50:	f003 0306 	and.w	r3, r3, #6
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	bf18      	it	ne
 8003c58:	2500      	movne	r5, #0
 8003c5a:	f8d9 2000 	ldr.w	r2, [r9]
 8003c5e:	f04f 0900 	mov.w	r9, #0
 8003c62:	bf08      	it	eq
 8003c64:	1aad      	subeq	r5, r5, r2
 8003c66:	68a3      	ldr	r3, [r4, #8]
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	bf08      	it	eq
 8003c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bfc4      	itt	gt
 8003c74:	1a9b      	subgt	r3, r3, r2
 8003c76:	18ed      	addgt	r5, r5, r3
 8003c78:	341a      	adds	r4, #26
 8003c7a:	454d      	cmp	r5, r9
 8003c7c:	d11a      	bne.n	8003cb4 <_printf_common+0xd8>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e008      	b.n	8003c94 <_printf_common+0xb8>
 8003c82:	2301      	movs	r3, #1
 8003c84:	4652      	mov	r2, sl
 8003c86:	4639      	mov	r1, r7
 8003c88:	4630      	mov	r0, r6
 8003c8a:	47c0      	blx	r8
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d103      	bne.n	8003c98 <_printf_common+0xbc>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	3501      	adds	r5, #1
 8003c9a:	e7c2      	b.n	8003c22 <_printf_common+0x46>
 8003c9c:	2030      	movs	r0, #48	; 0x30
 8003c9e:	18e1      	adds	r1, r4, r3
 8003ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003caa:	4422      	add	r2, r4
 8003cac:	3302      	adds	r3, #2
 8003cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb2:	e7c4      	b.n	8003c3e <_printf_common+0x62>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4639      	mov	r1, r7
 8003cba:	4630      	mov	r0, r6
 8003cbc:	47c0      	blx	r8
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d0e6      	beq.n	8003c90 <_printf_common+0xb4>
 8003cc2:	f109 0901 	add.w	r9, r9, #1
 8003cc6:	e7d8      	b.n	8003c7a <_printf_common+0x9e>

08003cc8 <_printf_i>:
 8003cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ccc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	7e09      	ldrb	r1, [r1, #24]
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	296e      	cmp	r1, #110	; 0x6e
 8003cd8:	4617      	mov	r7, r2
 8003cda:	4606      	mov	r6, r0
 8003cdc:	4698      	mov	r8, r3
 8003cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ce0:	f000 80b3 	beq.w	8003e4a <_printf_i+0x182>
 8003ce4:	d822      	bhi.n	8003d2c <_printf_i+0x64>
 8003ce6:	2963      	cmp	r1, #99	; 0x63
 8003ce8:	d036      	beq.n	8003d58 <_printf_i+0x90>
 8003cea:	d80a      	bhi.n	8003d02 <_printf_i+0x3a>
 8003cec:	2900      	cmp	r1, #0
 8003cee:	f000 80b9 	beq.w	8003e64 <_printf_i+0x19c>
 8003cf2:	2958      	cmp	r1, #88	; 0x58
 8003cf4:	f000 8083 	beq.w	8003dfe <_printf_i+0x136>
 8003cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d00:	e032      	b.n	8003d68 <_printf_i+0xa0>
 8003d02:	2964      	cmp	r1, #100	; 0x64
 8003d04:	d001      	beq.n	8003d0a <_printf_i+0x42>
 8003d06:	2969      	cmp	r1, #105	; 0x69
 8003d08:	d1f6      	bne.n	8003cf8 <_printf_i+0x30>
 8003d0a:	6820      	ldr	r0, [r4, #0]
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	0605      	lsls	r5, r0, #24
 8003d10:	f103 0104 	add.w	r1, r3, #4
 8003d14:	d52a      	bpl.n	8003d6c <_printf_i+0xa4>
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6011      	str	r1, [r2, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da03      	bge.n	8003d26 <_printf_i+0x5e>
 8003d1e:	222d      	movs	r2, #45	; 0x2d
 8003d20:	425b      	negs	r3, r3
 8003d22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d26:	486f      	ldr	r0, [pc, #444]	; (8003ee4 <_printf_i+0x21c>)
 8003d28:	220a      	movs	r2, #10
 8003d2a:	e039      	b.n	8003da0 <_printf_i+0xd8>
 8003d2c:	2973      	cmp	r1, #115	; 0x73
 8003d2e:	f000 809d 	beq.w	8003e6c <_printf_i+0x1a4>
 8003d32:	d808      	bhi.n	8003d46 <_printf_i+0x7e>
 8003d34:	296f      	cmp	r1, #111	; 0x6f
 8003d36:	d020      	beq.n	8003d7a <_printf_i+0xb2>
 8003d38:	2970      	cmp	r1, #112	; 0x70
 8003d3a:	d1dd      	bne.n	8003cf8 <_printf_i+0x30>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	f043 0320 	orr.w	r3, r3, #32
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	e003      	b.n	8003d4e <_printf_i+0x86>
 8003d46:	2975      	cmp	r1, #117	; 0x75
 8003d48:	d017      	beq.n	8003d7a <_printf_i+0xb2>
 8003d4a:	2978      	cmp	r1, #120	; 0x78
 8003d4c:	d1d4      	bne.n	8003cf8 <_printf_i+0x30>
 8003d4e:	2378      	movs	r3, #120	; 0x78
 8003d50:	4865      	ldr	r0, [pc, #404]	; (8003ee8 <_printf_i+0x220>)
 8003d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d56:	e055      	b.n	8003e04 <_printf_i+0x13c>
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5e:	1d19      	adds	r1, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6011      	str	r1, [r2, #0]
 8003d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e08c      	b.n	8003e86 <_printf_i+0x1be>
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d72:	6011      	str	r1, [r2, #0]
 8003d74:	bf18      	it	ne
 8003d76:	b21b      	sxthne	r3, r3
 8003d78:	e7cf      	b.n	8003d1a <_printf_i+0x52>
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	6825      	ldr	r5, [r4, #0]
 8003d7e:	1d18      	adds	r0, r3, #4
 8003d80:	6010      	str	r0, [r2, #0]
 8003d82:	0628      	lsls	r0, r5, #24
 8003d84:	d501      	bpl.n	8003d8a <_printf_i+0xc2>
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	e002      	b.n	8003d90 <_printf_i+0xc8>
 8003d8a:	0668      	lsls	r0, r5, #25
 8003d8c:	d5fb      	bpl.n	8003d86 <_printf_i+0xbe>
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	296f      	cmp	r1, #111	; 0x6f
 8003d92:	bf14      	ite	ne
 8003d94:	220a      	movne	r2, #10
 8003d96:	2208      	moveq	r2, #8
 8003d98:	4852      	ldr	r0, [pc, #328]	; (8003ee4 <_printf_i+0x21c>)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da0:	6865      	ldr	r5, [r4, #4]
 8003da2:	2d00      	cmp	r5, #0
 8003da4:	60a5      	str	r5, [r4, #8]
 8003da6:	f2c0 8095 	blt.w	8003ed4 <_printf_i+0x20c>
 8003daa:	6821      	ldr	r1, [r4, #0]
 8003dac:	f021 0104 	bic.w	r1, r1, #4
 8003db0:	6021      	str	r1, [r4, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d13d      	bne.n	8003e32 <_printf_i+0x16a>
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	f040 808e 	bne.w	8003ed8 <_printf_i+0x210>
 8003dbc:	4665      	mov	r5, ip
 8003dbe:	2a08      	cmp	r2, #8
 8003dc0:	d10b      	bne.n	8003dda <_printf_i+0x112>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	07db      	lsls	r3, r3, #31
 8003dc6:	d508      	bpl.n	8003dda <_printf_i+0x112>
 8003dc8:	6923      	ldr	r3, [r4, #16]
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bfde      	ittt	le
 8003dd0:	2330      	movle	r3, #48	; 0x30
 8003dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dda:	ebac 0305 	sub.w	r3, ip, r5
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	f8cd 8000 	str.w	r8, [sp]
 8003de4:	463b      	mov	r3, r7
 8003de6:	aa03      	add	r2, sp, #12
 8003de8:	4621      	mov	r1, r4
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff fef6 	bl	8003bdc <_printf_common>
 8003df0:	3001      	adds	r0, #1
 8003df2:	d14d      	bne.n	8003e90 <_printf_i+0x1c8>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	b005      	add	sp, #20
 8003dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	4839      	ldr	r0, [pc, #228]	; (8003ee4 <_printf_i+0x21c>)
 8003e00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e04:	6813      	ldr	r3, [r2, #0]
 8003e06:	6821      	ldr	r1, [r4, #0]
 8003e08:	1d1d      	adds	r5, r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6015      	str	r5, [r2, #0]
 8003e0e:	060a      	lsls	r2, r1, #24
 8003e10:	d50b      	bpl.n	8003e2a <_printf_i+0x162>
 8003e12:	07ca      	lsls	r2, r1, #31
 8003e14:	bf44      	itt	mi
 8003e16:	f041 0120 	orrmi.w	r1, r1, #32
 8003e1a:	6021      	strmi	r1, [r4, #0]
 8003e1c:	b91b      	cbnz	r3, 8003e26 <_printf_i+0x15e>
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	f022 0220 	bic.w	r2, r2, #32
 8003e24:	6022      	str	r2, [r4, #0]
 8003e26:	2210      	movs	r2, #16
 8003e28:	e7b7      	b.n	8003d9a <_printf_i+0xd2>
 8003e2a:	064d      	lsls	r5, r1, #25
 8003e2c:	bf48      	it	mi
 8003e2e:	b29b      	uxthmi	r3, r3
 8003e30:	e7ef      	b.n	8003e12 <_printf_i+0x14a>
 8003e32:	4665      	mov	r5, ip
 8003e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e38:	fb02 3311 	mls	r3, r2, r1, r3
 8003e3c:	5cc3      	ldrb	r3, [r0, r3]
 8003e3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e42:	460b      	mov	r3, r1
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d1f5      	bne.n	8003e34 <_printf_i+0x16c>
 8003e48:	e7b9      	b.n	8003dbe <_printf_i+0xf6>
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1d18      	adds	r0, r3, #4
 8003e50:	6961      	ldr	r1, [r4, #20]
 8003e52:	6010      	str	r0, [r2, #0]
 8003e54:	0628      	lsls	r0, r5, #24
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0x196>
 8003e5a:	6019      	str	r1, [r3, #0]
 8003e5c:	e002      	b.n	8003e64 <_printf_i+0x19c>
 8003e5e:	066a      	lsls	r2, r5, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0x192>
 8003e62:	8019      	strh	r1, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	4665      	mov	r5, ip
 8003e68:	6123      	str	r3, [r4, #16]
 8003e6a:	e7b9      	b.n	8003de0 <_printf_i+0x118>
 8003e6c:	6813      	ldr	r3, [r2, #0]
 8003e6e:	1d19      	adds	r1, r3, #4
 8003e70:	6011      	str	r1, [r2, #0]
 8003e72:	681d      	ldr	r5, [r3, #0]
 8003e74:	6862      	ldr	r2, [r4, #4]
 8003e76:	2100      	movs	r1, #0
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 feaf 	bl	8004bdc <memchr>
 8003e7e:	b108      	cbz	r0, 8003e84 <_printf_i+0x1bc>
 8003e80:	1b40      	subs	r0, r0, r5
 8003e82:	6060      	str	r0, [r4, #4]
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8e:	e7a7      	b.n	8003de0 <_printf_i+0x118>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	462a      	mov	r2, r5
 8003e94:	4639      	mov	r1, r7
 8003e96:	4630      	mov	r0, r6
 8003e98:	47c0      	blx	r8
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0aa      	beq.n	8003df4 <_printf_i+0x12c>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	079b      	lsls	r3, r3, #30
 8003ea2:	d413      	bmi.n	8003ecc <_printf_i+0x204>
 8003ea4:	68e0      	ldr	r0, [r4, #12]
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	4298      	cmp	r0, r3
 8003eaa:	bfb8      	it	lt
 8003eac:	4618      	movlt	r0, r3
 8003eae:	e7a3      	b.n	8003df8 <_printf_i+0x130>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	464a      	mov	r2, r9
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	47c0      	blx	r8
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d09a      	beq.n	8003df4 <_printf_i+0x12c>
 8003ebe:	3501      	adds	r5, #1
 8003ec0:	68e3      	ldr	r3, [r4, #12]
 8003ec2:	9a03      	ldr	r2, [sp, #12]
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	42ab      	cmp	r3, r5
 8003ec8:	dcf2      	bgt.n	8003eb0 <_printf_i+0x1e8>
 8003eca:	e7eb      	b.n	8003ea4 <_printf_i+0x1dc>
 8003ecc:	2500      	movs	r5, #0
 8003ece:	f104 0919 	add.w	r9, r4, #25
 8003ed2:	e7f5      	b.n	8003ec0 <_printf_i+0x1f8>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ac      	bne.n	8003e32 <_printf_i+0x16a>
 8003ed8:	7803      	ldrb	r3, [r0, #0]
 8003eda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee2:	e76c      	b.n	8003dbe <_printf_i+0xf6>
 8003ee4:	08005715 	.word	0x08005715
 8003ee8:	08005726 	.word	0x08005726

08003eec <siprintf>:
 8003eec:	b40e      	push	{r1, r2, r3}
 8003eee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ef2:	b500      	push	{lr}
 8003ef4:	b09c      	sub	sp, #112	; 0x70
 8003ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef8:	9002      	str	r0, [sp, #8]
 8003efa:	9006      	str	r0, [sp, #24]
 8003efc:	9107      	str	r1, [sp, #28]
 8003efe:	9104      	str	r1, [sp, #16]
 8003f00:	4808      	ldr	r0, [pc, #32]	; (8003f24 <siprintf+0x38>)
 8003f02:	4909      	ldr	r1, [pc, #36]	; (8003f28 <siprintf+0x3c>)
 8003f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f08:	9105      	str	r1, [sp, #20]
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	a902      	add	r1, sp, #8
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	f001 fa68 	bl	80053e4 <_svfiprintf_r>
 8003f14:	2200      	movs	r2, #0
 8003f16:	9b02      	ldr	r3, [sp, #8]
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	b01c      	add	sp, #112	; 0x70
 8003f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f20:	b003      	add	sp, #12
 8003f22:	4770      	bx	lr
 8003f24:	20000000 	.word	0x20000000
 8003f28:	ffff0208 	.word	0xffff0208

08003f2c <quorem>:
 8003f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	6903      	ldr	r3, [r0, #16]
 8003f32:	690c      	ldr	r4, [r1, #16]
 8003f34:	4680      	mov	r8, r0
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	f2c0 8084 	blt.w	8004044 <quorem+0x118>
 8003f3c:	3c01      	subs	r4, #1
 8003f3e:	f101 0714 	add.w	r7, r1, #20
 8003f42:	f100 0614 	add.w	r6, r0, #20
 8003f46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003f4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003f4e:	3501      	adds	r5, #1
 8003f50:	fbb0 f5f5 	udiv	r5, r0, r5
 8003f54:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003f58:	eb06 030c 	add.w	r3, r6, ip
 8003f5c:	eb07 090c 	add.w	r9, r7, ip
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	b39d      	cbz	r5, 8003fcc <quorem+0xa0>
 8003f64:	f04f 0a00 	mov.w	sl, #0
 8003f68:	4638      	mov	r0, r7
 8003f6a:	46b6      	mov	lr, r6
 8003f6c:	46d3      	mov	fp, sl
 8003f6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f72:	b293      	uxth	r3, r2
 8003f74:	fb05 a303 	mla	r3, r5, r3, sl
 8003f78:	0c12      	lsrs	r2, r2, #16
 8003f7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f7e:	fb05 a202 	mla	r2, r5, r2, sl
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	ebab 0303 	sub.w	r3, fp, r3
 8003f88:	f8de b000 	ldr.w	fp, [lr]
 8003f8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003f90:	fa1f fb8b 	uxth.w	fp, fp
 8003f94:	445b      	add	r3, fp
 8003f96:	fa1f fb82 	uxth.w	fp, r2
 8003f9a:	f8de 2000 	ldr.w	r2, [lr]
 8003f9e:	4581      	cmp	r9, r0
 8003fa0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003fb2:	f84e 3b04 	str.w	r3, [lr], #4
 8003fb6:	d2da      	bcs.n	8003f6e <quorem+0x42>
 8003fb8:	f856 300c 	ldr.w	r3, [r6, ip]
 8003fbc:	b933      	cbnz	r3, 8003fcc <quorem+0xa0>
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	3b04      	subs	r3, #4
 8003fc2:	429e      	cmp	r6, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	d331      	bcc.n	800402c <quorem+0x100>
 8003fc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003fcc:	4640      	mov	r0, r8
 8003fce:	f001 f833 	bl	8005038 <__mcmp>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	db26      	blt.n	8004024 <quorem+0xf8>
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f04f 0c00 	mov.w	ip, #0
 8003fdc:	3501      	adds	r5, #1
 8003fde:	f857 1b04 	ldr.w	r1, [r7], #4
 8003fe2:	f8d0 e000 	ldr.w	lr, [r0]
 8003fe6:	b28b      	uxth	r3, r1
 8003fe8:	ebac 0303 	sub.w	r3, ip, r3
 8003fec:	fa1f f28e 	uxth.w	r2, lr
 8003ff0:	4413      	add	r3, r2
 8003ff2:	0c0a      	lsrs	r2, r1, #16
 8003ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004002:	45b9      	cmp	r9, r7
 8004004:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004008:	f840 3b04 	str.w	r3, [r0], #4
 800400c:	d2e7      	bcs.n	8003fde <quorem+0xb2>
 800400e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004012:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004016:	b92a      	cbnz	r2, 8004024 <quorem+0xf8>
 8004018:	3b04      	subs	r3, #4
 800401a:	429e      	cmp	r6, r3
 800401c:	461a      	mov	r2, r3
 800401e:	d30b      	bcc.n	8004038 <quorem+0x10c>
 8004020:	f8c8 4010 	str.w	r4, [r8, #16]
 8004024:	4628      	mov	r0, r5
 8004026:	b003      	add	sp, #12
 8004028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	3b04      	subs	r3, #4
 8004030:	2a00      	cmp	r2, #0
 8004032:	d1c9      	bne.n	8003fc8 <quorem+0x9c>
 8004034:	3c01      	subs	r4, #1
 8004036:	e7c4      	b.n	8003fc2 <quorem+0x96>
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	3b04      	subs	r3, #4
 800403c:	2a00      	cmp	r2, #0
 800403e:	d1ef      	bne.n	8004020 <quorem+0xf4>
 8004040:	3c01      	subs	r4, #1
 8004042:	e7ea      	b.n	800401a <quorem+0xee>
 8004044:	2000      	movs	r0, #0
 8004046:	e7ee      	b.n	8004026 <quorem+0xfa>

08004048 <_dtoa_r>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	4616      	mov	r6, r2
 800404e:	461f      	mov	r7, r3
 8004050:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004052:	b095      	sub	sp, #84	; 0x54
 8004054:	4604      	mov	r4, r0
 8004056:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800405a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800405e:	b93d      	cbnz	r5, 8004070 <_dtoa_r+0x28>
 8004060:	2010      	movs	r0, #16
 8004062:	f000 fdb3 	bl	8004bcc <malloc>
 8004066:	6260      	str	r0, [r4, #36]	; 0x24
 8004068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800406c:	6005      	str	r5, [r0, #0]
 800406e:	60c5      	str	r5, [r0, #12]
 8004070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	b151      	cbz	r1, 800408c <_dtoa_r+0x44>
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	2301      	movs	r3, #1
 800407a:	4093      	lsls	r3, r2
 800407c:	604a      	str	r2, [r1, #4]
 800407e:	608b      	str	r3, [r1, #8]
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fdf8 	bl	8004c76 <_Bfree>
 8004086:	2200      	movs	r2, #0
 8004088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	1e3b      	subs	r3, r7, #0
 800408e:	bfaf      	iteee	ge
 8004090:	2300      	movge	r3, #0
 8004092:	2201      	movlt	r2, #1
 8004094:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004098:	9303      	strlt	r3, [sp, #12]
 800409a:	bfac      	ite	ge
 800409c:	f8c8 3000 	strge.w	r3, [r8]
 80040a0:	f8c8 2000 	strlt.w	r2, [r8]
 80040a4:	4bae      	ldr	r3, [pc, #696]	; (8004360 <_dtoa_r+0x318>)
 80040a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80040aa:	ea33 0308 	bics.w	r3, r3, r8
 80040ae:	d11b      	bne.n	80040e8 <_dtoa_r+0xa0>
 80040b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80040b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	9b02      	ldr	r3, [sp, #8]
 80040ba:	b923      	cbnz	r3, 80040c6 <_dtoa_r+0x7e>
 80040bc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80040c0:	2800      	cmp	r0, #0
 80040c2:	f000 8545 	beq.w	8004b50 <_dtoa_r+0xb08>
 80040c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040c8:	b953      	cbnz	r3, 80040e0 <_dtoa_r+0x98>
 80040ca:	4ba6      	ldr	r3, [pc, #664]	; (8004364 <_dtoa_r+0x31c>)
 80040cc:	e021      	b.n	8004112 <_dtoa_r+0xca>
 80040ce:	4ba6      	ldr	r3, [pc, #664]	; (8004368 <_dtoa_r+0x320>)
 80040d0:	9306      	str	r3, [sp, #24]
 80040d2:	3308      	adds	r3, #8
 80040d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	9806      	ldr	r0, [sp, #24]
 80040da:	b015      	add	sp, #84	; 0x54
 80040dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e0:	4ba0      	ldr	r3, [pc, #640]	; (8004364 <_dtoa_r+0x31c>)
 80040e2:	9306      	str	r3, [sp, #24]
 80040e4:	3303      	adds	r3, #3
 80040e6:	e7f5      	b.n	80040d4 <_dtoa_r+0x8c>
 80040e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2300      	movs	r3, #0
 80040f0:	4630      	mov	r0, r6
 80040f2:	4639      	mov	r1, r7
 80040f4:	f7fc fc68 	bl	80009c8 <__aeabi_dcmpeq>
 80040f8:	4682      	mov	sl, r0
 80040fa:	b160      	cbz	r0, 8004116 <_dtoa_r+0xce>
 80040fc:	2301      	movs	r3, #1
 80040fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8520 	beq.w	8004b4a <_dtoa_r+0xb02>
 800410a:	4b98      	ldr	r3, [pc, #608]	; (800436c <_dtoa_r+0x324>)
 800410c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	3b01      	subs	r3, #1
 8004112:	9306      	str	r3, [sp, #24]
 8004114:	e7e0      	b.n	80040d8 <_dtoa_r+0x90>
 8004116:	ab12      	add	r3, sp, #72	; 0x48
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	ab13      	add	r3, sp, #76	; 0x4c
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	4632      	mov	r2, r6
 8004120:	463b      	mov	r3, r7
 8004122:	4620      	mov	r0, r4
 8004124:	f001 f800 	bl	8005128 <__d2b>
 8004128:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800412c:	4683      	mov	fp, r0
 800412e:	2d00      	cmp	r5, #0
 8004130:	d07d      	beq.n	800422e <_dtoa_r+0x1e6>
 8004132:	46b0      	mov	r8, r6
 8004134:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004138:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800413c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004140:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004144:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004148:	2200      	movs	r2, #0
 800414a:	4b89      	ldr	r3, [pc, #548]	; (8004370 <_dtoa_r+0x328>)
 800414c:	4640      	mov	r0, r8
 800414e:	4649      	mov	r1, r9
 8004150:	f7fc f81a 	bl	8000188 <__aeabi_dsub>
 8004154:	a37c      	add	r3, pc, #496	; (adr r3, 8004348 <_dtoa_r+0x300>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f9cd 	bl	80004f8 <__aeabi_dmul>
 800415e:	a37c      	add	r3, pc, #496	; (adr r3, 8004350 <_dtoa_r+0x308>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc f812 	bl	800018c <__adddf3>
 8004168:	4606      	mov	r6, r0
 800416a:	4628      	mov	r0, r5
 800416c:	460f      	mov	r7, r1
 800416e:	f7fc f959 	bl	8000424 <__aeabi_i2d>
 8004172:	a379      	add	r3, pc, #484	; (adr r3, 8004358 <_dtoa_r+0x310>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc f9be 	bl	80004f8 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc f802 	bl	800018c <__adddf3>
 8004188:	4606      	mov	r6, r0
 800418a:	460f      	mov	r7, r1
 800418c:	f7fc fc64 	bl	8000a58 <__aeabi_d2iz>
 8004190:	2200      	movs	r2, #0
 8004192:	4682      	mov	sl, r0
 8004194:	2300      	movs	r3, #0
 8004196:	4630      	mov	r0, r6
 8004198:	4639      	mov	r1, r7
 800419a:	f7fc fc1f 	bl	80009dc <__aeabi_dcmplt>
 800419e:	b148      	cbz	r0, 80041b4 <_dtoa_r+0x16c>
 80041a0:	4650      	mov	r0, sl
 80041a2:	f7fc f93f 	bl	8000424 <__aeabi_i2d>
 80041a6:	4632      	mov	r2, r6
 80041a8:	463b      	mov	r3, r7
 80041aa:	f7fc fc0d 	bl	80009c8 <__aeabi_dcmpeq>
 80041ae:	b908      	cbnz	r0, 80041b4 <_dtoa_r+0x16c>
 80041b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041b4:	f1ba 0f16 	cmp.w	sl, #22
 80041b8:	d85a      	bhi.n	8004270 <_dtoa_r+0x228>
 80041ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041be:	496d      	ldr	r1, [pc, #436]	; (8004374 <_dtoa_r+0x32c>)
 80041c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80041c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041c8:	f7fc fc26 	bl	8000a18 <__aeabi_dcmpgt>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d051      	beq.n	8004274 <_dtoa_r+0x22c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041d6:	930d      	str	r3, [sp, #52]	; 0x34
 80041d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041da:	1b5d      	subs	r5, r3, r5
 80041dc:	1e6b      	subs	r3, r5, #1
 80041de:	9307      	str	r3, [sp, #28]
 80041e0:	bf43      	ittte	mi
 80041e2:	2300      	movmi	r3, #0
 80041e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80041e8:	9307      	strmi	r3, [sp, #28]
 80041ea:	f04f 0900 	movpl.w	r9, #0
 80041ee:	f1ba 0f00 	cmp.w	sl, #0
 80041f2:	db41      	blt.n	8004278 <_dtoa_r+0x230>
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80041fa:	4453      	add	r3, sl
 80041fc:	9307      	str	r3, [sp, #28]
 80041fe:	2300      	movs	r3, #0
 8004200:	9308      	str	r3, [sp, #32]
 8004202:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004204:	2b09      	cmp	r3, #9
 8004206:	f200 808f 	bhi.w	8004328 <_dtoa_r+0x2e0>
 800420a:	2b05      	cmp	r3, #5
 800420c:	bfc4      	itt	gt
 800420e:	3b04      	subgt	r3, #4
 8004210:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004214:	bfc8      	it	gt
 8004216:	2500      	movgt	r5, #0
 8004218:	f1a3 0302 	sub.w	r3, r3, #2
 800421c:	bfd8      	it	le
 800421e:	2501      	movle	r5, #1
 8004220:	2b03      	cmp	r3, #3
 8004222:	f200 808d 	bhi.w	8004340 <_dtoa_r+0x2f8>
 8004226:	e8df f003 	tbb	[pc, r3]
 800422a:	7d7b      	.short	0x7d7b
 800422c:	6f2f      	.short	0x6f2f
 800422e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004232:	441d      	add	r5, r3
 8004234:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004238:	2820      	cmp	r0, #32
 800423a:	dd13      	ble.n	8004264 <_dtoa_r+0x21c>
 800423c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	fa08 f800 	lsl.w	r8, r8, r0
 8004246:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800424a:	fa23 f000 	lsr.w	r0, r3, r0
 800424e:	ea48 0000 	orr.w	r0, r8, r0
 8004252:	f7fc f8d7 	bl	8000404 <__aeabi_ui2d>
 8004256:	2301      	movs	r3, #1
 8004258:	4680      	mov	r8, r0
 800425a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800425e:	3d01      	subs	r5, #1
 8004260:	9310      	str	r3, [sp, #64]	; 0x40
 8004262:	e771      	b.n	8004148 <_dtoa_r+0x100>
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	f1c0 0020 	rsb	r0, r0, #32
 800426a:	fa03 f000 	lsl.w	r0, r3, r0
 800426e:	e7f0      	b.n	8004252 <_dtoa_r+0x20a>
 8004270:	2301      	movs	r3, #1
 8004272:	e7b0      	b.n	80041d6 <_dtoa_r+0x18e>
 8004274:	900d      	str	r0, [sp, #52]	; 0x34
 8004276:	e7af      	b.n	80041d8 <_dtoa_r+0x190>
 8004278:	f1ca 0300 	rsb	r3, sl, #0
 800427c:	9308      	str	r3, [sp, #32]
 800427e:	2300      	movs	r3, #0
 8004280:	eba9 090a 	sub.w	r9, r9, sl
 8004284:	930c      	str	r3, [sp, #48]	; 0x30
 8004286:	e7bc      	b.n	8004202 <_dtoa_r+0x1ba>
 8004288:	2301      	movs	r3, #1
 800428a:	9309      	str	r3, [sp, #36]	; 0x24
 800428c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800428e:	2b00      	cmp	r3, #0
 8004290:	dd74      	ble.n	800437c <_dtoa_r+0x334>
 8004292:	4698      	mov	r8, r3
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	2200      	movs	r2, #0
 8004298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800429a:	6072      	str	r2, [r6, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	f102 0014 	add.w	r0, r2, #20
 80042a2:	4298      	cmp	r0, r3
 80042a4:	6871      	ldr	r1, [r6, #4]
 80042a6:	d96e      	bls.n	8004386 <_dtoa_r+0x33e>
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fcb0 	bl	8004c0e <_Balloc>
 80042ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b0:	6030      	str	r0, [r6, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b8 0f0e 	cmp.w	r8, #14
 80042b8:	9306      	str	r3, [sp, #24]
 80042ba:	f200 80ed 	bhi.w	8004498 <_dtoa_r+0x450>
 80042be:	2d00      	cmp	r5, #0
 80042c0:	f000 80ea 	beq.w	8004498 <_dtoa_r+0x450>
 80042c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042c8:	f1ba 0f00 	cmp.w	sl, #0
 80042cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80042d0:	dd77      	ble.n	80043c2 <_dtoa_r+0x37a>
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <_dtoa_r+0x32c>)
 80042d4:	f00a 030f 	and.w	r3, sl, #15
 80042d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80042dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042e0:	06f0      	lsls	r0, r6, #27
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80042ea:	d568      	bpl.n	80043be <_dtoa_r+0x376>
 80042ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <_dtoa_r+0x330>)
 80042f2:	2503      	movs	r5, #3
 80042f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042f8:	f7fc fa28 	bl	800074c <__aeabi_ddiv>
 80042fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004300:	f006 060f 	and.w	r6, r6, #15
 8004304:	4f1c      	ldr	r7, [pc, #112]	; (8004378 <_dtoa_r+0x330>)
 8004306:	e04f      	b.n	80043a8 <_dtoa_r+0x360>
 8004308:	2301      	movs	r3, #1
 800430a:	9309      	str	r3, [sp, #36]	; 0x24
 800430c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800430e:	4453      	add	r3, sl
 8004310:	f103 0801 	add.w	r8, r3, #1
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	4643      	mov	r3, r8
 8004318:	2b01      	cmp	r3, #1
 800431a:	bfb8      	it	lt
 800431c:	2301      	movlt	r3, #1
 800431e:	e7ba      	b.n	8004296 <_dtoa_r+0x24e>
 8004320:	2300      	movs	r3, #0
 8004322:	e7b2      	b.n	800428a <_dtoa_r+0x242>
 8004324:	2300      	movs	r3, #0
 8004326:	e7f0      	b.n	800430a <_dtoa_r+0x2c2>
 8004328:	2501      	movs	r5, #1
 800432a:	2300      	movs	r3, #0
 800432c:	9509      	str	r5, [sp, #36]	; 0x24
 800432e:	931e      	str	r3, [sp, #120]	; 0x78
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
 8004334:	2200      	movs	r2, #0
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	4698      	mov	r8, r3
 800433a:	2312      	movs	r3, #18
 800433c:	921f      	str	r2, [sp, #124]	; 0x7c
 800433e:	e7aa      	b.n	8004296 <_dtoa_r+0x24e>
 8004340:	2301      	movs	r3, #1
 8004342:	9309      	str	r3, [sp, #36]	; 0x24
 8004344:	e7f4      	b.n	8004330 <_dtoa_r+0x2e8>
 8004346:	bf00      	nop
 8004348:	636f4361 	.word	0x636f4361
 800434c:	3fd287a7 	.word	0x3fd287a7
 8004350:	8b60c8b3 	.word	0x8b60c8b3
 8004354:	3fc68a28 	.word	0x3fc68a28
 8004358:	509f79fb 	.word	0x509f79fb
 800435c:	3fd34413 	.word	0x3fd34413
 8004360:	7ff00000 	.word	0x7ff00000
 8004364:	08005740 	.word	0x08005740
 8004368:	08005737 	.word	0x08005737
 800436c:	08005714 	.word	0x08005714
 8004370:	3ff80000 	.word	0x3ff80000
 8004374:	08005770 	.word	0x08005770
 8004378:	08005748 	.word	0x08005748
 800437c:	2301      	movs	r3, #1
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	4698      	mov	r8, r3
 8004382:	461a      	mov	r2, r3
 8004384:	e7da      	b.n	800433c <_dtoa_r+0x2f4>
 8004386:	3101      	adds	r1, #1
 8004388:	6071      	str	r1, [r6, #4]
 800438a:	0052      	lsls	r2, r2, #1
 800438c:	e787      	b.n	800429e <_dtoa_r+0x256>
 800438e:	07f1      	lsls	r1, r6, #31
 8004390:	d508      	bpl.n	80043a4 <_dtoa_r+0x35c>
 8004392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439a:	f7fc f8ad 	bl	80004f8 <__aeabi_dmul>
 800439e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043a2:	3501      	adds	r5, #1
 80043a4:	1076      	asrs	r6, r6, #1
 80043a6:	3708      	adds	r7, #8
 80043a8:	2e00      	cmp	r6, #0
 80043aa:	d1f0      	bne.n	800438e <_dtoa_r+0x346>
 80043ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043b4:	f7fc f9ca 	bl	800074c <__aeabi_ddiv>
 80043b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043bc:	e01b      	b.n	80043f6 <_dtoa_r+0x3ae>
 80043be:	2502      	movs	r5, #2
 80043c0:	e7a0      	b.n	8004304 <_dtoa_r+0x2bc>
 80043c2:	f000 80a4 	beq.w	800450e <_dtoa_r+0x4c6>
 80043c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043ca:	f1ca 0600 	rsb	r6, sl, #0
 80043ce:	4ba0      	ldr	r3, [pc, #640]	; (8004650 <_dtoa_r+0x608>)
 80043d0:	f006 020f 	and.w	r2, r6, #15
 80043d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f7fc f88c 	bl	80004f8 <__aeabi_dmul>
 80043e0:	2502      	movs	r5, #2
 80043e2:	2300      	movs	r3, #0
 80043e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e8:	4f9a      	ldr	r7, [pc, #616]	; (8004654 <_dtoa_r+0x60c>)
 80043ea:	1136      	asrs	r6, r6, #4
 80043ec:	2e00      	cmp	r6, #0
 80043ee:	f040 8083 	bne.w	80044f8 <_dtoa_r+0x4b0>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e0      	bne.n	80043b8 <_dtoa_r+0x370>
 80043f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 808a 	beq.w	8004512 <_dtoa_r+0x4ca>
 80043fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004402:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004406:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800440a:	2200      	movs	r2, #0
 800440c:	4b92      	ldr	r3, [pc, #584]	; (8004658 <_dtoa_r+0x610>)
 800440e:	f7fc fae5 	bl	80009dc <__aeabi_dcmplt>
 8004412:	2800      	cmp	r0, #0
 8004414:	d07d      	beq.n	8004512 <_dtoa_r+0x4ca>
 8004416:	f1b8 0f00 	cmp.w	r8, #0
 800441a:	d07a      	beq.n	8004512 <_dtoa_r+0x4ca>
 800441c:	9b04      	ldr	r3, [sp, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	dd36      	ble.n	8004490 <_dtoa_r+0x448>
 8004422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	4b8c      	ldr	r3, [pc, #560]	; (800465c <_dtoa_r+0x614>)
 800442a:	f7fc f865 	bl	80004f8 <__aeabi_dmul>
 800442e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004432:	9e04      	ldr	r6, [sp, #16]
 8004434:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004438:	3501      	adds	r5, #1
 800443a:	4628      	mov	r0, r5
 800443c:	f7fb fff2 	bl	8000424 <__aeabi_i2d>
 8004440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004444:	f7fc f858 	bl	80004f8 <__aeabi_dmul>
 8004448:	2200      	movs	r2, #0
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <_dtoa_r+0x618>)
 800444c:	f7fb fe9e 	bl	800018c <__adddf3>
 8004450:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004454:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004458:	950b      	str	r5, [sp, #44]	; 0x2c
 800445a:	2e00      	cmp	r6, #0
 800445c:	d15c      	bne.n	8004518 <_dtoa_r+0x4d0>
 800445e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <_dtoa_r+0x61c>)
 8004466:	f7fb fe8f 	bl	8000188 <__aeabi_dsub>
 800446a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800446c:	462b      	mov	r3, r5
 800446e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004472:	f7fc fad1 	bl	8000a18 <__aeabi_dcmpgt>
 8004476:	2800      	cmp	r0, #0
 8004478:	f040 8281 	bne.w	800497e <_dtoa_r+0x936>
 800447c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004482:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004486:	f7fc faa9 	bl	80009dc <__aeabi_dcmplt>
 800448a:	2800      	cmp	r0, #0
 800448c:	f040 8275 	bne.w	800497a <_dtoa_r+0x932>
 8004490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800449a:	2b00      	cmp	r3, #0
 800449c:	f2c0 814b 	blt.w	8004736 <_dtoa_r+0x6ee>
 80044a0:	f1ba 0f0e 	cmp.w	sl, #14
 80044a4:	f300 8147 	bgt.w	8004736 <_dtoa_r+0x6ee>
 80044a8:	4b69      	ldr	r3, [pc, #420]	; (8004650 <_dtoa_r+0x608>)
 80044aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f280 80d7 	bge.w	800466c <_dtoa_r+0x624>
 80044be:	f1b8 0f00 	cmp.w	r8, #0
 80044c2:	f300 80d3 	bgt.w	800466c <_dtoa_r+0x624>
 80044c6:	f040 8257 	bne.w	8004978 <_dtoa_r+0x930>
 80044ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ce:	2200      	movs	r2, #0
 80044d0:	4b64      	ldr	r3, [pc, #400]	; (8004664 <_dtoa_r+0x61c>)
 80044d2:	f7fc f811 	bl	80004f8 <__aeabi_dmul>
 80044d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044da:	f7fc fa93 	bl	8000a04 <__aeabi_dcmpge>
 80044de:	4646      	mov	r6, r8
 80044e0:	4647      	mov	r7, r8
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 822d 	bne.w	8004942 <_dtoa_r+0x8fa>
 80044e8:	9b06      	ldr	r3, [sp, #24]
 80044ea:	9a06      	ldr	r2, [sp, #24]
 80044ec:	1c5d      	adds	r5, r3, #1
 80044ee:	2331      	movs	r3, #49	; 0x31
 80044f0:	f10a 0a01 	add.w	sl, sl, #1
 80044f4:	7013      	strb	r3, [r2, #0]
 80044f6:	e228      	b.n	800494a <_dtoa_r+0x902>
 80044f8:	07f2      	lsls	r2, r6, #31
 80044fa:	d505      	bpl.n	8004508 <_dtoa_r+0x4c0>
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	f7fb fffa 	bl	80004f8 <__aeabi_dmul>
 8004504:	2301      	movs	r3, #1
 8004506:	3501      	adds	r5, #1
 8004508:	1076      	asrs	r6, r6, #1
 800450a:	3708      	adds	r7, #8
 800450c:	e76e      	b.n	80043ec <_dtoa_r+0x3a4>
 800450e:	2502      	movs	r5, #2
 8004510:	e771      	b.n	80043f6 <_dtoa_r+0x3ae>
 8004512:	4657      	mov	r7, sl
 8004514:	4646      	mov	r6, r8
 8004516:	e790      	b.n	800443a <_dtoa_r+0x3f2>
 8004518:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <_dtoa_r+0x608>)
 800451a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800451e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d048      	beq.n	80045ba <_dtoa_r+0x572>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	2000      	movs	r0, #0
 800452e:	494e      	ldr	r1, [pc, #312]	; (8004668 <_dtoa_r+0x620>)
 8004530:	f7fc f90c 	bl	800074c <__aeabi_ddiv>
 8004534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004538:	f7fb fe26 	bl	8000188 <__aeabi_dsub>
 800453c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004540:	9d06      	ldr	r5, [sp, #24]
 8004542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004546:	f7fc fa87 	bl	8000a58 <__aeabi_d2iz>
 800454a:	9011      	str	r0, [sp, #68]	; 0x44
 800454c:	f7fb ff6a 	bl	8000424 <__aeabi_i2d>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004558:	f7fb fe16 	bl	8000188 <__aeabi_dsub>
 800455c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800455e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004562:	3330      	adds	r3, #48	; 0x30
 8004564:	f805 3b01 	strb.w	r3, [r5], #1
 8004568:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800456c:	f7fc fa36 	bl	80009dc <__aeabi_dcmplt>
 8004570:	2800      	cmp	r0, #0
 8004572:	d163      	bne.n	800463c <_dtoa_r+0x5f4>
 8004574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004578:	2000      	movs	r0, #0
 800457a:	4937      	ldr	r1, [pc, #220]	; (8004658 <_dtoa_r+0x610>)
 800457c:	f7fb fe04 	bl	8000188 <__aeabi_dsub>
 8004580:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004584:	f7fc fa2a 	bl	80009dc <__aeabi_dcmplt>
 8004588:	2800      	cmp	r0, #0
 800458a:	f040 80b5 	bne.w	80046f8 <_dtoa_r+0x6b0>
 800458e:	9b06      	ldr	r3, [sp, #24]
 8004590:	1aeb      	subs	r3, r5, r3
 8004592:	429e      	cmp	r6, r3
 8004594:	f77f af7c 	ble.w	8004490 <_dtoa_r+0x448>
 8004598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800459c:	2200      	movs	r2, #0
 800459e:	4b2f      	ldr	r3, [pc, #188]	; (800465c <_dtoa_r+0x614>)
 80045a0:	f7fb ffaa 	bl	80004f8 <__aeabi_dmul>
 80045a4:	2200      	movs	r2, #0
 80045a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ae:	4b2b      	ldr	r3, [pc, #172]	; (800465c <_dtoa_r+0x614>)
 80045b0:	f7fb ffa2 	bl	80004f8 <__aeabi_dmul>
 80045b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b8:	e7c3      	b.n	8004542 <_dtoa_r+0x4fa>
 80045ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045be:	f7fb ff9b 	bl	80004f8 <__aeabi_dmul>
 80045c2:	9b06      	ldr	r3, [sp, #24]
 80045c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045c8:	199d      	adds	r5, r3, r6
 80045ca:	461e      	mov	r6, r3
 80045cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d0:	f7fc fa42 	bl	8000a58 <__aeabi_d2iz>
 80045d4:	9011      	str	r0, [sp, #68]	; 0x44
 80045d6:	f7fb ff25 	bl	8000424 <__aeabi_i2d>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e2:	f7fb fdd1 	bl	8000188 <__aeabi_dsub>
 80045e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ec:	3330      	adds	r3, #48	; 0x30
 80045ee:	f806 3b01 	strb.w	r3, [r6], #1
 80045f2:	42ae      	cmp	r6, r5
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	d124      	bne.n	8004644 <_dtoa_r+0x5fc>
 80045fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <_dtoa_r+0x620>)
 8004600:	f7fb fdc4 	bl	800018c <__adddf3>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800460c:	f7fc fa04 	bl	8000a18 <__aeabi_dcmpgt>
 8004610:	2800      	cmp	r0, #0
 8004612:	d171      	bne.n	80046f8 <_dtoa_r+0x6b0>
 8004614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004618:	2000      	movs	r0, #0
 800461a:	4913      	ldr	r1, [pc, #76]	; (8004668 <_dtoa_r+0x620>)
 800461c:	f7fb fdb4 	bl	8000188 <__aeabi_dsub>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004628:	f7fc f9d8 	bl	80009dc <__aeabi_dcmplt>
 800462c:	2800      	cmp	r0, #0
 800462e:	f43f af2f 	beq.w	8004490 <_dtoa_r+0x448>
 8004632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004636:	1e6a      	subs	r2, r5, #1
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d001      	beq.n	8004640 <_dtoa_r+0x5f8>
 800463c:	46ba      	mov	sl, r7
 800463e:	e04a      	b.n	80046d6 <_dtoa_r+0x68e>
 8004640:	4615      	mov	r5, r2
 8004642:	e7f6      	b.n	8004632 <_dtoa_r+0x5ea>
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_dtoa_r+0x614>)
 8004646:	f7fb ff57 	bl	80004f8 <__aeabi_dmul>
 800464a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800464e:	e7bd      	b.n	80045cc <_dtoa_r+0x584>
 8004650:	08005770 	.word	0x08005770
 8004654:	08005748 	.word	0x08005748
 8004658:	3ff00000 	.word	0x3ff00000
 800465c:	40240000 	.word	0x40240000
 8004660:	401c0000 	.word	0x401c0000
 8004664:	40140000 	.word	0x40140000
 8004668:	3fe00000 	.word	0x3fe00000
 800466c:	9d06      	ldr	r5, [sp, #24]
 800466e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fc f867 	bl	800074c <__aeabi_ddiv>
 800467e:	f7fc f9eb 	bl	8000a58 <__aeabi_d2iz>
 8004682:	4681      	mov	r9, r0
 8004684:	f7fb fece 	bl	8000424 <__aeabi_i2d>
 8004688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800468c:	f7fb ff34 	bl	80004f8 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4630      	mov	r0, r6
 8004696:	4639      	mov	r1, r7
 8004698:	f7fb fd76 	bl	8000188 <__aeabi_dsub>
 800469c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80046a0:	f805 6b01 	strb.w	r6, [r5], #1
 80046a4:	9e06      	ldr	r6, [sp, #24]
 80046a6:	4602      	mov	r2, r0
 80046a8:	1bae      	subs	r6, r5, r6
 80046aa:	45b0      	cmp	r8, r6
 80046ac:	460b      	mov	r3, r1
 80046ae:	d135      	bne.n	800471c <_dtoa_r+0x6d4>
 80046b0:	f7fb fd6c 	bl	800018c <__adddf3>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	4606      	mov	r6, r0
 80046ba:	460f      	mov	r7, r1
 80046bc:	f7fc f9ac 	bl	8000a18 <__aeabi_dcmpgt>
 80046c0:	b9c8      	cbnz	r0, 80046f6 <_dtoa_r+0x6ae>
 80046c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046c6:	4630      	mov	r0, r6
 80046c8:	4639      	mov	r1, r7
 80046ca:	f7fc f97d 	bl	80009c8 <__aeabi_dcmpeq>
 80046ce:	b110      	cbz	r0, 80046d6 <_dtoa_r+0x68e>
 80046d0:	f019 0f01 	tst.w	r9, #1
 80046d4:	d10f      	bne.n	80046f6 <_dtoa_r+0x6ae>
 80046d6:	4659      	mov	r1, fp
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 facc 	bl	8004c76 <_Bfree>
 80046de:	2300      	movs	r3, #0
 80046e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046e2:	702b      	strb	r3, [r5, #0]
 80046e4:	f10a 0301 	add.w	r3, sl, #1
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f43f acf3 	beq.w	80040d8 <_dtoa_r+0x90>
 80046f2:	601d      	str	r5, [r3, #0]
 80046f4:	e4f0      	b.n	80040d8 <_dtoa_r+0x90>
 80046f6:	4657      	mov	r7, sl
 80046f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80046fc:	1e6b      	subs	r3, r5, #1
 80046fe:	2a39      	cmp	r2, #57	; 0x39
 8004700:	d106      	bne.n	8004710 <_dtoa_r+0x6c8>
 8004702:	9a06      	ldr	r2, [sp, #24]
 8004704:	429a      	cmp	r2, r3
 8004706:	d107      	bne.n	8004718 <_dtoa_r+0x6d0>
 8004708:	2330      	movs	r3, #48	; 0x30
 800470a:	7013      	strb	r3, [r2, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	3701      	adds	r7, #1
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	3201      	adds	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e791      	b.n	800463c <_dtoa_r+0x5f4>
 8004718:	461d      	mov	r5, r3
 800471a:	e7ed      	b.n	80046f8 <_dtoa_r+0x6b0>
 800471c:	2200      	movs	r2, #0
 800471e:	4b99      	ldr	r3, [pc, #612]	; (8004984 <_dtoa_r+0x93c>)
 8004720:	f7fb feea 	bl	80004f8 <__aeabi_dmul>
 8004724:	2200      	movs	r2, #0
 8004726:	2300      	movs	r3, #0
 8004728:	4606      	mov	r6, r0
 800472a:	460f      	mov	r7, r1
 800472c:	f7fc f94c 	bl	80009c8 <__aeabi_dcmpeq>
 8004730:	2800      	cmp	r0, #0
 8004732:	d09e      	beq.n	8004672 <_dtoa_r+0x62a>
 8004734:	e7cf      	b.n	80046d6 <_dtoa_r+0x68e>
 8004736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004738:	2a00      	cmp	r2, #0
 800473a:	f000 8088 	beq.w	800484e <_dtoa_r+0x806>
 800473e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004740:	2a01      	cmp	r2, #1
 8004742:	dc6d      	bgt.n	8004820 <_dtoa_r+0x7d8>
 8004744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004746:	2a00      	cmp	r2, #0
 8004748:	d066      	beq.n	8004818 <_dtoa_r+0x7d0>
 800474a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800474e:	464d      	mov	r5, r9
 8004750:	9e08      	ldr	r6, [sp, #32]
 8004752:	9a07      	ldr	r2, [sp, #28]
 8004754:	2101      	movs	r1, #1
 8004756:	441a      	add	r2, r3
 8004758:	4620      	mov	r0, r4
 800475a:	4499      	add	r9, r3
 800475c:	9207      	str	r2, [sp, #28]
 800475e:	f000 fb2a 	bl	8004db6 <__i2b>
 8004762:	4607      	mov	r7, r0
 8004764:	2d00      	cmp	r5, #0
 8004766:	dd0b      	ble.n	8004780 <_dtoa_r+0x738>
 8004768:	9b07      	ldr	r3, [sp, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dd08      	ble.n	8004780 <_dtoa_r+0x738>
 800476e:	42ab      	cmp	r3, r5
 8004770:	bfa8      	it	ge
 8004772:	462b      	movge	r3, r5
 8004774:	9a07      	ldr	r2, [sp, #28]
 8004776:	eba9 0903 	sub.w	r9, r9, r3
 800477a:	1aed      	subs	r5, r5, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	9307      	str	r3, [sp, #28]
 8004780:	9b08      	ldr	r3, [sp, #32]
 8004782:	b1eb      	cbz	r3, 80047c0 <_dtoa_r+0x778>
 8004784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
 8004788:	d065      	beq.n	8004856 <_dtoa_r+0x80e>
 800478a:	b18e      	cbz	r6, 80047b0 <_dtoa_r+0x768>
 800478c:	4639      	mov	r1, r7
 800478e:	4632      	mov	r2, r6
 8004790:	4620      	mov	r0, r4
 8004792:	f000 fbaf 	bl	8004ef4 <__pow5mult>
 8004796:	465a      	mov	r2, fp
 8004798:	4601      	mov	r1, r0
 800479a:	4607      	mov	r7, r0
 800479c:	4620      	mov	r0, r4
 800479e:	f000 fb13 	bl	8004dc8 <__multiply>
 80047a2:	4659      	mov	r1, fp
 80047a4:	900a      	str	r0, [sp, #40]	; 0x28
 80047a6:	4620      	mov	r0, r4
 80047a8:	f000 fa65 	bl	8004c76 <_Bfree>
 80047ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ae:	469b      	mov	fp, r3
 80047b0:	9b08      	ldr	r3, [sp, #32]
 80047b2:	1b9a      	subs	r2, r3, r6
 80047b4:	d004      	beq.n	80047c0 <_dtoa_r+0x778>
 80047b6:	4659      	mov	r1, fp
 80047b8:	4620      	mov	r0, r4
 80047ba:	f000 fb9b 	bl	8004ef4 <__pow5mult>
 80047be:	4683      	mov	fp, r0
 80047c0:	2101      	movs	r1, #1
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 faf7 	bl	8004db6 <__i2b>
 80047c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047ca:	4606      	mov	r6, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 81c6 	beq.w	8004b5e <_dtoa_r+0xb16>
 80047d2:	461a      	mov	r2, r3
 80047d4:	4601      	mov	r1, r0
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 fb8c 	bl	8004ef4 <__pow5mult>
 80047dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047de:	4606      	mov	r6, r0
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	dc3e      	bgt.n	8004862 <_dtoa_r+0x81a>
 80047e4:	9b02      	ldr	r3, [sp, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d137      	bne.n	800485a <_dtoa_r+0x812>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d134      	bne.n	800485e <_dtoa_r+0x816>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047fa:	0d1b      	lsrs	r3, r3, #20
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	b12b      	cbz	r3, 800480c <_dtoa_r+0x7c4>
 8004800:	9b07      	ldr	r3, [sp, #28]
 8004802:	f109 0901 	add.w	r9, r9, #1
 8004806:	3301      	adds	r3, #1
 8004808:	9307      	str	r3, [sp, #28]
 800480a:	2301      	movs	r3, #1
 800480c:	9308      	str	r3, [sp, #32]
 800480e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004810:	2b00      	cmp	r3, #0
 8004812:	d128      	bne.n	8004866 <_dtoa_r+0x81e>
 8004814:	2001      	movs	r0, #1
 8004816:	e02e      	b.n	8004876 <_dtoa_r+0x82e>
 8004818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800481a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800481e:	e796      	b.n	800474e <_dtoa_r+0x706>
 8004820:	9b08      	ldr	r3, [sp, #32]
 8004822:	f108 36ff 	add.w	r6, r8, #4294967295
 8004826:	42b3      	cmp	r3, r6
 8004828:	bfb7      	itett	lt
 800482a:	9b08      	ldrlt	r3, [sp, #32]
 800482c:	1b9e      	subge	r6, r3, r6
 800482e:	1af2      	sublt	r2, r6, r3
 8004830:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004832:	bfbf      	itttt	lt
 8004834:	9608      	strlt	r6, [sp, #32]
 8004836:	189b      	addlt	r3, r3, r2
 8004838:	930c      	strlt	r3, [sp, #48]	; 0x30
 800483a:	2600      	movlt	r6, #0
 800483c:	f1b8 0f00 	cmp.w	r8, #0
 8004840:	bfb9      	ittee	lt
 8004842:	eba9 0508 	sublt.w	r5, r9, r8
 8004846:	2300      	movlt	r3, #0
 8004848:	464d      	movge	r5, r9
 800484a:	4643      	movge	r3, r8
 800484c:	e781      	b.n	8004752 <_dtoa_r+0x70a>
 800484e:	9e08      	ldr	r6, [sp, #32]
 8004850:	464d      	mov	r5, r9
 8004852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004854:	e786      	b.n	8004764 <_dtoa_r+0x71c>
 8004856:	9a08      	ldr	r2, [sp, #32]
 8004858:	e7ad      	b.n	80047b6 <_dtoa_r+0x76e>
 800485a:	2300      	movs	r3, #0
 800485c:	e7d6      	b.n	800480c <_dtoa_r+0x7c4>
 800485e:	9b02      	ldr	r3, [sp, #8]
 8004860:	e7d4      	b.n	800480c <_dtoa_r+0x7c4>
 8004862:	2300      	movs	r3, #0
 8004864:	9308      	str	r3, [sp, #32]
 8004866:	6933      	ldr	r3, [r6, #16]
 8004868:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800486c:	6918      	ldr	r0, [r3, #16]
 800486e:	f000 fa54 	bl	8004d1a <__hi0bits>
 8004872:	f1c0 0020 	rsb	r0, r0, #32
 8004876:	9b07      	ldr	r3, [sp, #28]
 8004878:	4418      	add	r0, r3
 800487a:	f010 001f 	ands.w	r0, r0, #31
 800487e:	d047      	beq.n	8004910 <_dtoa_r+0x8c8>
 8004880:	f1c0 0320 	rsb	r3, r0, #32
 8004884:	2b04      	cmp	r3, #4
 8004886:	dd3b      	ble.n	8004900 <_dtoa_r+0x8b8>
 8004888:	9b07      	ldr	r3, [sp, #28]
 800488a:	f1c0 001c 	rsb	r0, r0, #28
 800488e:	4481      	add	r9, r0
 8004890:	4405      	add	r5, r0
 8004892:	4403      	add	r3, r0
 8004894:	9307      	str	r3, [sp, #28]
 8004896:	f1b9 0f00 	cmp.w	r9, #0
 800489a:	dd05      	ble.n	80048a8 <_dtoa_r+0x860>
 800489c:	4659      	mov	r1, fp
 800489e:	464a      	mov	r2, r9
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 fb75 	bl	8004f90 <__lshift>
 80048a6:	4683      	mov	fp, r0
 80048a8:	9b07      	ldr	r3, [sp, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dd05      	ble.n	80048ba <_dtoa_r+0x872>
 80048ae:	4631      	mov	r1, r6
 80048b0:	461a      	mov	r2, r3
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 fb6c 	bl	8004f90 <__lshift>
 80048b8:	4606      	mov	r6, r0
 80048ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048bc:	b353      	cbz	r3, 8004914 <_dtoa_r+0x8cc>
 80048be:	4631      	mov	r1, r6
 80048c0:	4658      	mov	r0, fp
 80048c2:	f000 fbb9 	bl	8005038 <__mcmp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	da24      	bge.n	8004914 <_dtoa_r+0x8cc>
 80048ca:	2300      	movs	r3, #0
 80048cc:	4659      	mov	r1, fp
 80048ce:	220a      	movs	r2, #10
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 f9e7 	bl	8004ca4 <__multadd>
 80048d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048dc:	4683      	mov	fp, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8144 	beq.w	8004b6c <_dtoa_r+0xb24>
 80048e4:	2300      	movs	r3, #0
 80048e6:	4639      	mov	r1, r7
 80048e8:	220a      	movs	r2, #10
 80048ea:	4620      	mov	r0, r4
 80048ec:	f000 f9da 	bl	8004ca4 <__multadd>
 80048f0:	9b04      	ldr	r3, [sp, #16]
 80048f2:	4607      	mov	r7, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dc4d      	bgt.n	8004994 <_dtoa_r+0x94c>
 80048f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	dd4a      	ble.n	8004994 <_dtoa_r+0x94c>
 80048fe:	e011      	b.n	8004924 <_dtoa_r+0x8dc>
 8004900:	d0c9      	beq.n	8004896 <_dtoa_r+0x84e>
 8004902:	9a07      	ldr	r2, [sp, #28]
 8004904:	331c      	adds	r3, #28
 8004906:	441a      	add	r2, r3
 8004908:	4499      	add	r9, r3
 800490a:	441d      	add	r5, r3
 800490c:	4613      	mov	r3, r2
 800490e:	e7c1      	b.n	8004894 <_dtoa_r+0x84c>
 8004910:	4603      	mov	r3, r0
 8004912:	e7f6      	b.n	8004902 <_dtoa_r+0x8ba>
 8004914:	f1b8 0f00 	cmp.w	r8, #0
 8004918:	dc36      	bgt.n	8004988 <_dtoa_r+0x940>
 800491a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800491c:	2b02      	cmp	r3, #2
 800491e:	dd33      	ble.n	8004988 <_dtoa_r+0x940>
 8004920:	f8cd 8010 	str.w	r8, [sp, #16]
 8004924:	9b04      	ldr	r3, [sp, #16]
 8004926:	b963      	cbnz	r3, 8004942 <_dtoa_r+0x8fa>
 8004928:	4631      	mov	r1, r6
 800492a:	2205      	movs	r2, #5
 800492c:	4620      	mov	r0, r4
 800492e:	f000 f9b9 	bl	8004ca4 <__multadd>
 8004932:	4601      	mov	r1, r0
 8004934:	4606      	mov	r6, r0
 8004936:	4658      	mov	r0, fp
 8004938:	f000 fb7e 	bl	8005038 <__mcmp>
 800493c:	2800      	cmp	r0, #0
 800493e:	f73f add3 	bgt.w	80044e8 <_dtoa_r+0x4a0>
 8004942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004944:	9d06      	ldr	r5, [sp, #24]
 8004946:	ea6f 0a03 	mvn.w	sl, r3
 800494a:	f04f 0900 	mov.w	r9, #0
 800494e:	4631      	mov	r1, r6
 8004950:	4620      	mov	r0, r4
 8004952:	f000 f990 	bl	8004c76 <_Bfree>
 8004956:	2f00      	cmp	r7, #0
 8004958:	f43f aebd 	beq.w	80046d6 <_dtoa_r+0x68e>
 800495c:	f1b9 0f00 	cmp.w	r9, #0
 8004960:	d005      	beq.n	800496e <_dtoa_r+0x926>
 8004962:	45b9      	cmp	r9, r7
 8004964:	d003      	beq.n	800496e <_dtoa_r+0x926>
 8004966:	4649      	mov	r1, r9
 8004968:	4620      	mov	r0, r4
 800496a:	f000 f984 	bl	8004c76 <_Bfree>
 800496e:	4639      	mov	r1, r7
 8004970:	4620      	mov	r0, r4
 8004972:	f000 f980 	bl	8004c76 <_Bfree>
 8004976:	e6ae      	b.n	80046d6 <_dtoa_r+0x68e>
 8004978:	2600      	movs	r6, #0
 800497a:	4637      	mov	r7, r6
 800497c:	e7e1      	b.n	8004942 <_dtoa_r+0x8fa>
 800497e:	46ba      	mov	sl, r7
 8004980:	4637      	mov	r7, r6
 8004982:	e5b1      	b.n	80044e8 <_dtoa_r+0x4a0>
 8004984:	40240000 	.word	0x40240000
 8004988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498a:	f8cd 8010 	str.w	r8, [sp, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80f3 	beq.w	8004b7a <_dtoa_r+0xb32>
 8004994:	2d00      	cmp	r5, #0
 8004996:	dd05      	ble.n	80049a4 <_dtoa_r+0x95c>
 8004998:	4639      	mov	r1, r7
 800499a:	462a      	mov	r2, r5
 800499c:	4620      	mov	r0, r4
 800499e:	f000 faf7 	bl	8004f90 <__lshift>
 80049a2:	4607      	mov	r7, r0
 80049a4:	9b08      	ldr	r3, [sp, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04c      	beq.n	8004a44 <_dtoa_r+0x9fc>
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 f92e 	bl	8004c0e <_Balloc>
 80049b2:	4605      	mov	r5, r0
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	f107 010c 	add.w	r1, r7, #12
 80049ba:	3202      	adds	r2, #2
 80049bc:	0092      	lsls	r2, r2, #2
 80049be:	300c      	adds	r0, #12
 80049c0:	f000 f91a 	bl	8004bf8 <memcpy>
 80049c4:	2201      	movs	r2, #1
 80049c6:	4629      	mov	r1, r5
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fae1 	bl	8004f90 <__lshift>
 80049ce:	46b9      	mov	r9, r7
 80049d0:	4607      	mov	r7, r0
 80049d2:	9b06      	ldr	r3, [sp, #24]
 80049d4:	9307      	str	r3, [sp, #28]
 80049d6:	9b02      	ldr	r3, [sp, #8]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	9308      	str	r3, [sp, #32]
 80049de:	4631      	mov	r1, r6
 80049e0:	4658      	mov	r0, fp
 80049e2:	f7ff faa3 	bl	8003f2c <quorem>
 80049e6:	4649      	mov	r1, r9
 80049e8:	4605      	mov	r5, r0
 80049ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80049ee:	4658      	mov	r0, fp
 80049f0:	f000 fb22 	bl	8005038 <__mcmp>
 80049f4:	463a      	mov	r2, r7
 80049f6:	9002      	str	r0, [sp, #8]
 80049f8:	4631      	mov	r1, r6
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 fb36 	bl	800506c <__mdiff>
 8004a00:	68c3      	ldr	r3, [r0, #12]
 8004a02:	4602      	mov	r2, r0
 8004a04:	bb03      	cbnz	r3, 8004a48 <_dtoa_r+0xa00>
 8004a06:	4601      	mov	r1, r0
 8004a08:	9009      	str	r0, [sp, #36]	; 0x24
 8004a0a:	4658      	mov	r0, fp
 8004a0c:	f000 fb14 	bl	8005038 <__mcmp>
 8004a10:	4603      	mov	r3, r0
 8004a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a14:	4611      	mov	r1, r2
 8004a16:	4620      	mov	r0, r4
 8004a18:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1a:	f000 f92c 	bl	8004c76 <_Bfree>
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	b9a3      	cbnz	r3, 8004a4c <_dtoa_r+0xa04>
 8004a22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a24:	b992      	cbnz	r2, 8004a4c <_dtoa_r+0xa04>
 8004a26:	9a08      	ldr	r2, [sp, #32]
 8004a28:	b982      	cbnz	r2, 8004a4c <_dtoa_r+0xa04>
 8004a2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a2e:	d029      	beq.n	8004a84 <_dtoa_r+0xa3c>
 8004a30:	9b02      	ldr	r3, [sp, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dd01      	ble.n	8004a3a <_dtoa_r+0x9f2>
 8004a36:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004a3a:	9b07      	ldr	r3, [sp, #28]
 8004a3c:	1c5d      	adds	r5, r3, #1
 8004a3e:	f883 8000 	strb.w	r8, [r3]
 8004a42:	e784      	b.n	800494e <_dtoa_r+0x906>
 8004a44:	4638      	mov	r0, r7
 8004a46:	e7c2      	b.n	80049ce <_dtoa_r+0x986>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e7e3      	b.n	8004a14 <_dtoa_r+0x9cc>
 8004a4c:	9a02      	ldr	r2, [sp, #8]
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	db04      	blt.n	8004a5c <_dtoa_r+0xa14>
 8004a52:	d123      	bne.n	8004a9c <_dtoa_r+0xa54>
 8004a54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a56:	bb0a      	cbnz	r2, 8004a9c <_dtoa_r+0xa54>
 8004a58:	9a08      	ldr	r2, [sp, #32]
 8004a5a:	b9fa      	cbnz	r2, 8004a9c <_dtoa_r+0xa54>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	ddec      	ble.n	8004a3a <_dtoa_r+0x9f2>
 8004a60:	4659      	mov	r1, fp
 8004a62:	2201      	movs	r2, #1
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 fa93 	bl	8004f90 <__lshift>
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4683      	mov	fp, r0
 8004a6e:	f000 fae3 	bl	8005038 <__mcmp>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	dc03      	bgt.n	8004a7e <_dtoa_r+0xa36>
 8004a76:	d1e0      	bne.n	8004a3a <_dtoa_r+0x9f2>
 8004a78:	f018 0f01 	tst.w	r8, #1
 8004a7c:	d0dd      	beq.n	8004a3a <_dtoa_r+0x9f2>
 8004a7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a82:	d1d8      	bne.n	8004a36 <_dtoa_r+0x9ee>
 8004a84:	9b07      	ldr	r3, [sp, #28]
 8004a86:	9a07      	ldr	r2, [sp, #28]
 8004a88:	1c5d      	adds	r5, r3, #1
 8004a8a:	2339      	movs	r3, #57	; 0x39
 8004a8c:	7013      	strb	r3, [r2, #0]
 8004a8e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a92:	1e6a      	subs	r2, r5, #1
 8004a94:	2b39      	cmp	r3, #57	; 0x39
 8004a96:	d04d      	beq.n	8004b34 <_dtoa_r+0xaec>
 8004a98:	3301      	adds	r3, #1
 8004a9a:	e052      	b.n	8004b42 <_dtoa_r+0xafa>
 8004a9c:	9a07      	ldr	r2, [sp, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f102 0501 	add.w	r5, r2, #1
 8004aa4:	dd06      	ble.n	8004ab4 <_dtoa_r+0xa6c>
 8004aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004aaa:	d0eb      	beq.n	8004a84 <_dtoa_r+0xa3c>
 8004aac:	f108 0801 	add.w	r8, r8, #1
 8004ab0:	9b07      	ldr	r3, [sp, #28]
 8004ab2:	e7c4      	b.n	8004a3e <_dtoa_r+0x9f6>
 8004ab4:	9b06      	ldr	r3, [sp, #24]
 8004ab6:	9a04      	ldr	r2, [sp, #16]
 8004ab8:	1aeb      	subs	r3, r5, r3
 8004aba:	4293      	cmp	r3, r2
 8004abc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004ac0:	d021      	beq.n	8004b06 <_dtoa_r+0xabe>
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 f8eb 	bl	8004ca4 <__multadd>
 8004ace:	45b9      	cmp	r9, r7
 8004ad0:	4683      	mov	fp, r0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	f04f 020a 	mov.w	r2, #10
 8004ada:	4649      	mov	r1, r9
 8004adc:	4620      	mov	r0, r4
 8004ade:	d105      	bne.n	8004aec <_dtoa_r+0xaa4>
 8004ae0:	f000 f8e0 	bl	8004ca4 <__multadd>
 8004ae4:	4681      	mov	r9, r0
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	9507      	str	r5, [sp, #28]
 8004aea:	e778      	b.n	80049de <_dtoa_r+0x996>
 8004aec:	f000 f8da 	bl	8004ca4 <__multadd>
 8004af0:	4639      	mov	r1, r7
 8004af2:	4681      	mov	r9, r0
 8004af4:	2300      	movs	r3, #0
 8004af6:	220a      	movs	r2, #10
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 f8d3 	bl	8004ca4 <__multadd>
 8004afe:	4607      	mov	r7, r0
 8004b00:	e7f2      	b.n	8004ae8 <_dtoa_r+0xaa0>
 8004b02:	f04f 0900 	mov.w	r9, #0
 8004b06:	4659      	mov	r1, fp
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 fa40 	bl	8004f90 <__lshift>
 8004b10:	4631      	mov	r1, r6
 8004b12:	4683      	mov	fp, r0
 8004b14:	f000 fa90 	bl	8005038 <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	dcb8      	bgt.n	8004a8e <_dtoa_r+0xa46>
 8004b1c:	d102      	bne.n	8004b24 <_dtoa_r+0xadc>
 8004b1e:	f018 0f01 	tst.w	r8, #1
 8004b22:	d1b4      	bne.n	8004a8e <_dtoa_r+0xa46>
 8004b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b28:	1e6a      	subs	r2, r5, #1
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	f47f af0f 	bne.w	800494e <_dtoa_r+0x906>
 8004b30:	4615      	mov	r5, r2
 8004b32:	e7f7      	b.n	8004b24 <_dtoa_r+0xadc>
 8004b34:	9b06      	ldr	r3, [sp, #24]
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d105      	bne.n	8004b46 <_dtoa_r+0xafe>
 8004b3a:	2331      	movs	r3, #49	; 0x31
 8004b3c:	9a06      	ldr	r2, [sp, #24]
 8004b3e:	f10a 0a01 	add.w	sl, sl, #1
 8004b42:	7013      	strb	r3, [r2, #0]
 8004b44:	e703      	b.n	800494e <_dtoa_r+0x906>
 8004b46:	4615      	mov	r5, r2
 8004b48:	e7a1      	b.n	8004a8e <_dtoa_r+0xa46>
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <_dtoa_r+0xb60>)
 8004b4c:	f7ff bae1 	b.w	8004112 <_dtoa_r+0xca>
 8004b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f47f aabb 	bne.w	80040ce <_dtoa_r+0x86>
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <_dtoa_r+0xb64>)
 8004b5a:	f7ff bada 	b.w	8004112 <_dtoa_r+0xca>
 8004b5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	f77f ae3f 	ble.w	80047e4 <_dtoa_r+0x79c>
 8004b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b68:	9308      	str	r3, [sp, #32]
 8004b6a:	e653      	b.n	8004814 <_dtoa_r+0x7cc>
 8004b6c:	9b04      	ldr	r3, [sp, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dc03      	bgt.n	8004b7a <_dtoa_r+0xb32>
 8004b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	f73f aed5 	bgt.w	8004924 <_dtoa_r+0x8dc>
 8004b7a:	9d06      	ldr	r5, [sp, #24]
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4658      	mov	r0, fp
 8004b80:	f7ff f9d4 	bl	8003f2c <quorem>
 8004b84:	9b06      	ldr	r3, [sp, #24]
 8004b86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004b8a:	f805 8b01 	strb.w	r8, [r5], #1
 8004b8e:	9a04      	ldr	r2, [sp, #16]
 8004b90:	1aeb      	subs	r3, r5, r3
 8004b92:	429a      	cmp	r2, r3
 8004b94:	ddb5      	ble.n	8004b02 <_dtoa_r+0xaba>
 8004b96:	4659      	mov	r1, fp
 8004b98:	2300      	movs	r3, #0
 8004b9a:	220a      	movs	r2, #10
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f000 f881 	bl	8004ca4 <__multadd>
 8004ba2:	4683      	mov	fp, r0
 8004ba4:	e7ea      	b.n	8004b7c <_dtoa_r+0xb34>
 8004ba6:	bf00      	nop
 8004ba8:	08005713 	.word	0x08005713
 8004bac:	08005737 	.word	0x08005737

08004bb0 <_localeconv_r>:
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <_localeconv_r+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a18      	ldr	r0, [r3, #32]
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <_localeconv_r+0x18>)
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	bf08      	it	eq
 8004bbc:	4618      	moveq	r0, r3
 8004bbe:	30f0      	adds	r0, #240	; 0xf0
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	20000064 	.word	0x20000064

08004bcc <malloc>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <malloc+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f000 bb53 	b.w	800527c <_malloc_r>
 8004bd6:	bf00      	nop
 8004bd8:	20000000 	.word	0x20000000

08004bdc <memchr>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	b2c9      	uxtb	r1, r1
 8004be0:	4402      	add	r2, r0
 8004be2:	4290      	cmp	r0, r2
 8004be4:	4603      	mov	r3, r0
 8004be6:	d101      	bne.n	8004bec <memchr+0x10>
 8004be8:	2300      	movs	r3, #0
 8004bea:	e003      	b.n	8004bf4 <memchr+0x18>
 8004bec:	781c      	ldrb	r4, [r3, #0]
 8004bee:	3001      	adds	r0, #1
 8004bf0:	428c      	cmp	r4, r1
 8004bf2:	d1f6      	bne.n	8004be2 <memchr+0x6>
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <memcpy>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	1e43      	subs	r3, r0, #1
 8004bfc:	440a      	add	r2, r1
 8004bfe:	4291      	cmp	r1, r2
 8004c00:	d100      	bne.n	8004c04 <memcpy+0xc>
 8004c02:	bd10      	pop	{r4, pc}
 8004c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c0c:	e7f7      	b.n	8004bfe <memcpy+0x6>

08004c0e <_Balloc>:
 8004c0e:	b570      	push	{r4, r5, r6, lr}
 8004c10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c12:	4604      	mov	r4, r0
 8004c14:	460e      	mov	r6, r1
 8004c16:	b93d      	cbnz	r5, 8004c28 <_Balloc+0x1a>
 8004c18:	2010      	movs	r0, #16
 8004c1a:	f7ff ffd7 	bl	8004bcc <malloc>
 8004c1e:	6260      	str	r0, [r4, #36]	; 0x24
 8004c20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c24:	6005      	str	r5, [r0, #0]
 8004c26:	60c5      	str	r5, [r0, #12]
 8004c28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c2a:	68eb      	ldr	r3, [r5, #12]
 8004c2c:	b183      	cbz	r3, 8004c50 <_Balloc+0x42>
 8004c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c36:	b9b8      	cbnz	r0, 8004c68 <_Balloc+0x5a>
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f506 	lsl.w	r5, r1, r6
 8004c3e:	1d6a      	adds	r2, r5, #5
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	4620      	mov	r0, r4
 8004c44:	f000 fabf 	bl	80051c6 <_calloc_r>
 8004c48:	b160      	cbz	r0, 8004c64 <_Balloc+0x56>
 8004c4a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004c4e:	e00e      	b.n	8004c6e <_Balloc+0x60>
 8004c50:	2221      	movs	r2, #33	; 0x21
 8004c52:	2104      	movs	r1, #4
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 fab6 	bl	80051c6 <_calloc_r>
 8004c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5c:	60e8      	str	r0, [r5, #12]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e4      	bne.n	8004c2e <_Balloc+0x20>
 8004c64:	2000      	movs	r0, #0
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	6802      	ldr	r2, [r0, #0]
 8004c6a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c74:	e7f7      	b.n	8004c66 <_Balloc+0x58>

08004c76 <_Bfree>:
 8004c76:	b570      	push	{r4, r5, r6, lr}
 8004c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	b93c      	cbnz	r4, 8004c90 <_Bfree+0x1a>
 8004c80:	2010      	movs	r0, #16
 8004c82:	f7ff ffa3 	bl	8004bcc <malloc>
 8004c86:	6270      	str	r0, [r6, #36]	; 0x24
 8004c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c8c:	6004      	str	r4, [r0, #0]
 8004c8e:	60c4      	str	r4, [r0, #12]
 8004c90:	b13d      	cbz	r5, 8004ca2 <_Bfree+0x2c>
 8004c92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c94:	686a      	ldr	r2, [r5, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c9c:	6029      	str	r1, [r5, #0]
 8004c9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}

08004ca4 <__multadd>:
 8004ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca8:	461f      	mov	r7, r3
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	2300      	movs	r3, #0
 8004cb0:	690d      	ldr	r5, [r1, #16]
 8004cb2:	f101 0c14 	add.w	ip, r1, #20
 8004cb6:	f8dc 0000 	ldr.w	r0, [ip]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b281      	uxth	r1, r0
 8004cbe:	fb02 7101 	mla	r1, r2, r1, r7
 8004cc2:	0c00      	lsrs	r0, r0, #16
 8004cc4:	0c0f      	lsrs	r7, r1, #16
 8004cc6:	fb02 7000 	mla	r0, r2, r0, r7
 8004cca:	b289      	uxth	r1, r1
 8004ccc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004cd0:	429d      	cmp	r5, r3
 8004cd2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8004cda:	dcec      	bgt.n	8004cb6 <__multadd+0x12>
 8004cdc:	b1d7      	cbz	r7, 8004d14 <__multadd+0x70>
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	dc12      	bgt.n	8004d0a <__multadd+0x66>
 8004ce4:	6861      	ldr	r1, [r4, #4]
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	3101      	adds	r1, #1
 8004cea:	f7ff ff90 	bl	8004c0e <_Balloc>
 8004cee:	4680      	mov	r8, r0
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	f104 010c 	add.w	r1, r4, #12
 8004cf6:	3202      	adds	r2, #2
 8004cf8:	0092      	lsls	r2, r2, #2
 8004cfa:	300c      	adds	r0, #12
 8004cfc:	f7ff ff7c 	bl	8004bf8 <memcpy>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7ff ffb7 	bl	8004c76 <_Bfree>
 8004d08:	4644      	mov	r4, r8
 8004d0a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d0e:	3501      	adds	r5, #1
 8004d10:	615f      	str	r7, [r3, #20]
 8004d12:	6125      	str	r5, [r4, #16]
 8004d14:	4620      	mov	r0, r4
 8004d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d1a <__hi0bits>:
 8004d1a:	0c02      	lsrs	r2, r0, #16
 8004d1c:	0412      	lsls	r2, r2, #16
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b9b2      	cbnz	r2, 8004d50 <__hi0bits+0x36>
 8004d22:	0403      	lsls	r3, r0, #16
 8004d24:	2010      	movs	r0, #16
 8004d26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d2a:	bf04      	itt	eq
 8004d2c:	021b      	lsleq	r3, r3, #8
 8004d2e:	3008      	addeq	r0, #8
 8004d30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d34:	bf04      	itt	eq
 8004d36:	011b      	lsleq	r3, r3, #4
 8004d38:	3004      	addeq	r0, #4
 8004d3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d3e:	bf04      	itt	eq
 8004d40:	009b      	lsleq	r3, r3, #2
 8004d42:	3002      	addeq	r0, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	db06      	blt.n	8004d56 <__hi0bits+0x3c>
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	d503      	bpl.n	8004d54 <__hi0bits+0x3a>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	4770      	bx	lr
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7e8      	b.n	8004d26 <__hi0bits+0xc>
 8004d54:	2020      	movs	r0, #32
 8004d56:	4770      	bx	lr

08004d58 <__lo0bits>:
 8004d58:	6803      	ldr	r3, [r0, #0]
 8004d5a:	4601      	mov	r1, r0
 8004d5c:	f013 0207 	ands.w	r2, r3, #7
 8004d60:	d00b      	beq.n	8004d7a <__lo0bits+0x22>
 8004d62:	07da      	lsls	r2, r3, #31
 8004d64:	d423      	bmi.n	8004dae <__lo0bits+0x56>
 8004d66:	0798      	lsls	r0, r3, #30
 8004d68:	bf49      	itett	mi
 8004d6a:	085b      	lsrmi	r3, r3, #1
 8004d6c:	089b      	lsrpl	r3, r3, #2
 8004d6e:	2001      	movmi	r0, #1
 8004d70:	600b      	strmi	r3, [r1, #0]
 8004d72:	bf5c      	itt	pl
 8004d74:	600b      	strpl	r3, [r1, #0]
 8004d76:	2002      	movpl	r0, #2
 8004d78:	4770      	bx	lr
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	b9a8      	cbnz	r0, 8004daa <__lo0bits+0x52>
 8004d7e:	2010      	movs	r0, #16
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d86:	bf04      	itt	eq
 8004d88:	0a1b      	lsreq	r3, r3, #8
 8004d8a:	3008      	addeq	r0, #8
 8004d8c:	071a      	lsls	r2, r3, #28
 8004d8e:	bf04      	itt	eq
 8004d90:	091b      	lsreq	r3, r3, #4
 8004d92:	3004      	addeq	r0, #4
 8004d94:	079a      	lsls	r2, r3, #30
 8004d96:	bf04      	itt	eq
 8004d98:	089b      	lsreq	r3, r3, #2
 8004d9a:	3002      	addeq	r0, #2
 8004d9c:	07da      	lsls	r2, r3, #31
 8004d9e:	d402      	bmi.n	8004da6 <__lo0bits+0x4e>
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	d006      	beq.n	8004db2 <__lo0bits+0x5a>
 8004da4:	3001      	adds	r0, #1
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	4770      	bx	lr
 8004daa:	4610      	mov	r0, r2
 8004dac:	e7e9      	b.n	8004d82 <__lo0bits+0x2a>
 8004dae:	2000      	movs	r0, #0
 8004db0:	4770      	bx	lr
 8004db2:	2020      	movs	r0, #32
 8004db4:	4770      	bx	lr

08004db6 <__i2b>:
 8004db6:	b510      	push	{r4, lr}
 8004db8:	460c      	mov	r4, r1
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f7ff ff27 	bl	8004c0e <_Balloc>
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	6144      	str	r4, [r0, #20]
 8004dc4:	6102      	str	r2, [r0, #16]
 8004dc6:	bd10      	pop	{r4, pc}

08004dc8 <__multiply>:
 8004dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4614      	mov	r4, r2
 8004dce:	690a      	ldr	r2, [r1, #16]
 8004dd0:	6923      	ldr	r3, [r4, #16]
 8004dd2:	4688      	mov	r8, r1
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	bfbe      	ittt	lt
 8004dd8:	460b      	movlt	r3, r1
 8004dda:	46a0      	movlt	r8, r4
 8004ddc:	461c      	movlt	r4, r3
 8004dde:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004de2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004dea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004dee:	eb07 0609 	add.w	r6, r7, r9
 8004df2:	42b3      	cmp	r3, r6
 8004df4:	bfb8      	it	lt
 8004df6:	3101      	addlt	r1, #1
 8004df8:	f7ff ff09 	bl	8004c0e <_Balloc>
 8004dfc:	f100 0514 	add.w	r5, r0, #20
 8004e00:	462b      	mov	r3, r5
 8004e02:	2200      	movs	r2, #0
 8004e04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004e08:	4573      	cmp	r3, lr
 8004e0a:	d316      	bcc.n	8004e3a <__multiply+0x72>
 8004e0c:	f104 0214 	add.w	r2, r4, #20
 8004e10:	f108 0114 	add.w	r1, r8, #20
 8004e14:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004e18:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	9201      	str	r2, [sp, #4]
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d80c      	bhi.n	8004e40 <__multiply+0x78>
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	dd03      	ble.n	8004e32 <__multiply+0x6a>
 8004e2a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d05d      	beq.n	8004eee <__multiply+0x126>
 8004e32:	6106      	str	r6, [r0, #16]
 8004e34:	b003      	add	sp, #12
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	f843 2b04 	str.w	r2, [r3], #4
 8004e3e:	e7e3      	b.n	8004e08 <__multiply+0x40>
 8004e40:	f8b2 b000 	ldrh.w	fp, [r2]
 8004e44:	f1bb 0f00 	cmp.w	fp, #0
 8004e48:	d023      	beq.n	8004e92 <__multiply+0xca>
 8004e4a:	4689      	mov	r9, r1
 8004e4c:	46ac      	mov	ip, r5
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e56:	f8dc a000 	ldr.w	sl, [ip]
 8004e5a:	b2a3      	uxth	r3, r4
 8004e5c:	fa1f fa8a 	uxth.w	sl, sl
 8004e60:	fb0b a303 	mla	r3, fp, r3, sl
 8004e64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004e68:	f8dc 4000 	ldr.w	r4, [ip]
 8004e6c:	4443      	add	r3, r8
 8004e6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e72:	fb0b 840a 	mla	r4, fp, sl, r8
 8004e76:	46e2      	mov	sl, ip
 8004e78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e82:	454f      	cmp	r7, r9
 8004e84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e88:	f84a 3b04 	str.w	r3, [sl], #4
 8004e8c:	d82b      	bhi.n	8004ee6 <__multiply+0x11e>
 8004e8e:	f8cc 8004 	str.w	r8, [ip, #4]
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	3204      	adds	r2, #4
 8004e96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004e9a:	f1ba 0f00 	cmp.w	sl, #0
 8004e9e:	d020      	beq.n	8004ee2 <__multiply+0x11a>
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	46a8      	mov	r8, r5
 8004ea4:	f04f 0b00 	mov.w	fp, #0
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	f8b9 c000 	ldrh.w	ip, [r9]
 8004eae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	fb0a 440c 	mla	r4, sl, ip, r4
 8004eb8:	46c4      	mov	ip, r8
 8004eba:	445c      	add	r4, fp
 8004ebc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ec0:	f84c 3b04 	str.w	r3, [ip], #4
 8004ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ec8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	fb0a b303 	mla	r3, sl, r3, fp
 8004ed2:	454f      	cmp	r7, r9
 8004ed4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ed8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004edc:	d805      	bhi.n	8004eea <__multiply+0x122>
 8004ede:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ee2:	3504      	adds	r5, #4
 8004ee4:	e79b      	b.n	8004e1e <__multiply+0x56>
 8004ee6:	46d4      	mov	ip, sl
 8004ee8:	e7b3      	b.n	8004e52 <__multiply+0x8a>
 8004eea:	46e0      	mov	r8, ip
 8004eec:	e7dd      	b.n	8004eaa <__multiply+0xe2>
 8004eee:	3e01      	subs	r6, #1
 8004ef0:	e799      	b.n	8004e26 <__multiply+0x5e>
	...

08004ef4 <__pow5mult>:
 8004ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef8:	4615      	mov	r5, r2
 8004efa:	f012 0203 	ands.w	r2, r2, #3
 8004efe:	4606      	mov	r6, r0
 8004f00:	460f      	mov	r7, r1
 8004f02:	d007      	beq.n	8004f14 <__pow5mult+0x20>
 8004f04:	4c21      	ldr	r4, [pc, #132]	; (8004f8c <__pow5mult+0x98>)
 8004f06:	3a01      	subs	r2, #1
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f0e:	f7ff fec9 	bl	8004ca4 <__multadd>
 8004f12:	4607      	mov	r7, r0
 8004f14:	10ad      	asrs	r5, r5, #2
 8004f16:	d035      	beq.n	8004f84 <__pow5mult+0x90>
 8004f18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f1a:	b93c      	cbnz	r4, 8004f2c <__pow5mult+0x38>
 8004f1c:	2010      	movs	r0, #16
 8004f1e:	f7ff fe55 	bl	8004bcc <malloc>
 8004f22:	6270      	str	r0, [r6, #36]	; 0x24
 8004f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f28:	6004      	str	r4, [r0, #0]
 8004f2a:	60c4      	str	r4, [r0, #12]
 8004f2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f34:	b94c      	cbnz	r4, 8004f4a <__pow5mult+0x56>
 8004f36:	f240 2171 	movw	r1, #625	; 0x271
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f7ff ff3b 	bl	8004db6 <__i2b>
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f48:	6003      	str	r3, [r0, #0]
 8004f4a:	f04f 0800 	mov.w	r8, #0
 8004f4e:	07eb      	lsls	r3, r5, #31
 8004f50:	d50a      	bpl.n	8004f68 <__pow5mult+0x74>
 8004f52:	4639      	mov	r1, r7
 8004f54:	4622      	mov	r2, r4
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7ff ff36 	bl	8004dc8 <__multiply>
 8004f5c:	4681      	mov	r9, r0
 8004f5e:	4639      	mov	r1, r7
 8004f60:	4630      	mov	r0, r6
 8004f62:	f7ff fe88 	bl	8004c76 <_Bfree>
 8004f66:	464f      	mov	r7, r9
 8004f68:	106d      	asrs	r5, r5, #1
 8004f6a:	d00b      	beq.n	8004f84 <__pow5mult+0x90>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	b938      	cbnz	r0, 8004f80 <__pow5mult+0x8c>
 8004f70:	4622      	mov	r2, r4
 8004f72:	4621      	mov	r1, r4
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff ff27 	bl	8004dc8 <__multiply>
 8004f7a:	6020      	str	r0, [r4, #0]
 8004f7c:	f8c0 8000 	str.w	r8, [r0]
 8004f80:	4604      	mov	r4, r0
 8004f82:	e7e4      	b.n	8004f4e <__pow5mult+0x5a>
 8004f84:	4638      	mov	r0, r7
 8004f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08005838 	.word	0x08005838

08004f90 <__lshift>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	4607      	mov	r7, r0
 8004f98:	4616      	mov	r6, r2
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fa0:	eb0a 0903 	add.w	r9, sl, r3
 8004fa4:	6849      	ldr	r1, [r1, #4]
 8004fa6:	68a3      	ldr	r3, [r4, #8]
 8004fa8:	f109 0501 	add.w	r5, r9, #1
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	db32      	blt.n	8005016 <__lshift+0x86>
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f7ff fe2c 	bl	8004c0e <_Balloc>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4680      	mov	r8, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f100 0114 	add.w	r1, r0, #20
 8004fc0:	4553      	cmp	r3, sl
 8004fc2:	db2b      	blt.n	800501c <__lshift+0x8c>
 8004fc4:	6920      	ldr	r0, [r4, #16]
 8004fc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fca:	f104 0314 	add.w	r3, r4, #20
 8004fce:	f016 021f 	ands.w	r2, r6, #31
 8004fd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fda:	d025      	beq.n	8005028 <__lshift+0x98>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f1c2 0e20 	rsb	lr, r2, #32
 8004fe2:	468a      	mov	sl, r1
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	4096      	lsls	r6, r2
 8004fe8:	4330      	orrs	r0, r6
 8004fea:	f84a 0b04 	str.w	r0, [sl], #4
 8004fee:	f853 0b04 	ldr.w	r0, [r3], #4
 8004ff2:	459c      	cmp	ip, r3
 8004ff4:	fa20 f00e 	lsr.w	r0, r0, lr
 8004ff8:	d814      	bhi.n	8005024 <__lshift+0x94>
 8004ffa:	6048      	str	r0, [r1, #4]
 8004ffc:	b108      	cbz	r0, 8005002 <__lshift+0x72>
 8004ffe:	f109 0502 	add.w	r5, r9, #2
 8005002:	3d01      	subs	r5, #1
 8005004:	4638      	mov	r0, r7
 8005006:	f8c8 5010 	str.w	r5, [r8, #16]
 800500a:	4621      	mov	r1, r4
 800500c:	f7ff fe33 	bl	8004c76 <_Bfree>
 8005010:	4640      	mov	r0, r8
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	3101      	adds	r1, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	e7c7      	b.n	8004fac <__lshift+0x1c>
 800501c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005020:	3301      	adds	r3, #1
 8005022:	e7cd      	b.n	8004fc0 <__lshift+0x30>
 8005024:	4651      	mov	r1, sl
 8005026:	e7dc      	b.n	8004fe2 <__lshift+0x52>
 8005028:	3904      	subs	r1, #4
 800502a:	f853 2b04 	ldr.w	r2, [r3], #4
 800502e:	459c      	cmp	ip, r3
 8005030:	f841 2f04 	str.w	r2, [r1, #4]!
 8005034:	d8f9      	bhi.n	800502a <__lshift+0x9a>
 8005036:	e7e4      	b.n	8005002 <__lshift+0x72>

08005038 <__mcmp>:
 8005038:	6903      	ldr	r3, [r0, #16]
 800503a:	690a      	ldr	r2, [r1, #16]
 800503c:	b530      	push	{r4, r5, lr}
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	d10c      	bne.n	800505c <__mcmp+0x24>
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	3014      	adds	r0, #20
 8005046:	3114      	adds	r1, #20
 8005048:	1884      	adds	r4, r0, r2
 800504a:	4411      	add	r1, r2
 800504c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005050:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005054:	4295      	cmp	r5, r2
 8005056:	d003      	beq.n	8005060 <__mcmp+0x28>
 8005058:	d305      	bcc.n	8005066 <__mcmp+0x2e>
 800505a:	2301      	movs	r3, #1
 800505c:	4618      	mov	r0, r3
 800505e:	bd30      	pop	{r4, r5, pc}
 8005060:	42a0      	cmp	r0, r4
 8005062:	d3f3      	bcc.n	800504c <__mcmp+0x14>
 8005064:	e7fa      	b.n	800505c <__mcmp+0x24>
 8005066:	f04f 33ff 	mov.w	r3, #4294967295
 800506a:	e7f7      	b.n	800505c <__mcmp+0x24>

0800506c <__mdiff>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	460d      	mov	r5, r1
 8005072:	4607      	mov	r7, r0
 8005074:	4611      	mov	r1, r2
 8005076:	4628      	mov	r0, r5
 8005078:	4614      	mov	r4, r2
 800507a:	f7ff ffdd 	bl	8005038 <__mcmp>
 800507e:	1e06      	subs	r6, r0, #0
 8005080:	d108      	bne.n	8005094 <__mdiff+0x28>
 8005082:	4631      	mov	r1, r6
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff fdc2 	bl	8004c0e <_Balloc>
 800508a:	2301      	movs	r3, #1
 800508c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	bfa4      	itt	ge
 8005096:	4623      	movge	r3, r4
 8005098:	462c      	movge	r4, r5
 800509a:	4638      	mov	r0, r7
 800509c:	6861      	ldr	r1, [r4, #4]
 800509e:	bfa6      	itte	ge
 80050a0:	461d      	movge	r5, r3
 80050a2:	2600      	movge	r6, #0
 80050a4:	2601      	movlt	r6, #1
 80050a6:	f7ff fdb2 	bl	8004c0e <_Balloc>
 80050aa:	f04f 0e00 	mov.w	lr, #0
 80050ae:	60c6      	str	r6, [r0, #12]
 80050b0:	692b      	ldr	r3, [r5, #16]
 80050b2:	6926      	ldr	r6, [r4, #16]
 80050b4:	f104 0214 	add.w	r2, r4, #20
 80050b8:	f105 0914 	add.w	r9, r5, #20
 80050bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80050c4:	f100 0114 	add.w	r1, r0, #20
 80050c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80050cc:	f859 5b04 	ldr.w	r5, [r9], #4
 80050d0:	fa1f f38a 	uxth.w	r3, sl
 80050d4:	4473      	add	r3, lr
 80050d6:	b2ac      	uxth	r4, r5
 80050d8:	1b1b      	subs	r3, r3, r4
 80050da:	0c2c      	lsrs	r4, r5, #16
 80050dc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80050e0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80050ea:	45c8      	cmp	r8, r9
 80050ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80050f0:	4694      	mov	ip, r2
 80050f2:	f841 4b04 	str.w	r4, [r1], #4
 80050f6:	d8e7      	bhi.n	80050c8 <__mdiff+0x5c>
 80050f8:	45bc      	cmp	ip, r7
 80050fa:	d304      	bcc.n	8005106 <__mdiff+0x9a>
 80050fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005100:	b183      	cbz	r3, 8005124 <__mdiff+0xb8>
 8005102:	6106      	str	r6, [r0, #16]
 8005104:	e7c4      	b.n	8005090 <__mdiff+0x24>
 8005106:	f85c 4b04 	ldr.w	r4, [ip], #4
 800510a:	b2a2      	uxth	r2, r4
 800510c:	4472      	add	r2, lr
 800510e:	1413      	asrs	r3, r2, #16
 8005110:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005114:	b292      	uxth	r2, r2
 8005116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800511a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800511e:	f841 2b04 	str.w	r2, [r1], #4
 8005122:	e7e9      	b.n	80050f8 <__mdiff+0x8c>
 8005124:	3e01      	subs	r6, #1
 8005126:	e7e9      	b.n	80050fc <__mdiff+0x90>

08005128 <__d2b>:
 8005128:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800512c:	461c      	mov	r4, r3
 800512e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005132:	2101      	movs	r1, #1
 8005134:	4690      	mov	r8, r2
 8005136:	f7ff fd6a 	bl	8004c0e <_Balloc>
 800513a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800513e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005142:	4607      	mov	r7, r0
 8005144:	bb34      	cbnz	r4, 8005194 <__d2b+0x6c>
 8005146:	9201      	str	r2, [sp, #4]
 8005148:	f1b8 0200 	subs.w	r2, r8, #0
 800514c:	d027      	beq.n	800519e <__d2b+0x76>
 800514e:	a802      	add	r0, sp, #8
 8005150:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005154:	f7ff fe00 	bl	8004d58 <__lo0bits>
 8005158:	9900      	ldr	r1, [sp, #0]
 800515a:	b1f0      	cbz	r0, 800519a <__d2b+0x72>
 800515c:	9a01      	ldr	r2, [sp, #4]
 800515e:	f1c0 0320 	rsb	r3, r0, #32
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	430b      	orrs	r3, r1
 8005168:	40c2      	lsrs	r2, r0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf14      	ite	ne
 8005174:	2102      	movne	r1, #2
 8005176:	2101      	moveq	r1, #1
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	6139      	str	r1, [r7, #16]
 800517c:	b1c4      	cbz	r4, 80051b0 <__d2b+0x88>
 800517e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005182:	4404      	add	r4, r0
 8005184:	6034      	str	r4, [r6, #0]
 8005186:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800518a:	6028      	str	r0, [r5, #0]
 800518c:	4638      	mov	r0, r7
 800518e:	b002      	add	sp, #8
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005198:	e7d5      	b.n	8005146 <__d2b+0x1e>
 800519a:	6179      	str	r1, [r7, #20]
 800519c:	e7e7      	b.n	800516e <__d2b+0x46>
 800519e:	a801      	add	r0, sp, #4
 80051a0:	f7ff fdda 	bl	8004d58 <__lo0bits>
 80051a4:	2101      	movs	r1, #1
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	6139      	str	r1, [r7, #16]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	3020      	adds	r0, #32
 80051ae:	e7e5      	b.n	800517c <__d2b+0x54>
 80051b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051b8:	6030      	str	r0, [r6, #0]
 80051ba:	6918      	ldr	r0, [r3, #16]
 80051bc:	f7ff fdad 	bl	8004d1a <__hi0bits>
 80051c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80051c4:	e7e1      	b.n	800518a <__d2b+0x62>

080051c6 <_calloc_r>:
 80051c6:	b538      	push	{r3, r4, r5, lr}
 80051c8:	fb02 f401 	mul.w	r4, r2, r1
 80051cc:	4621      	mov	r1, r4
 80051ce:	f000 f855 	bl	800527c <_malloc_r>
 80051d2:	4605      	mov	r5, r0
 80051d4:	b118      	cbz	r0, 80051de <_calloc_r+0x18>
 80051d6:	4622      	mov	r2, r4
 80051d8:	2100      	movs	r1, #0
 80051da:	f7fe fa2f 	bl	800363c <memset>
 80051de:	4628      	mov	r0, r5
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080051e4 <_free_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4605      	mov	r5, r0
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d043      	beq.n	8005274 <_free_r+0x90>
 80051ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f0:	1f0c      	subs	r4, r1, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfb8      	it	lt
 80051f6:	18e4      	addlt	r4, r4, r3
 80051f8:	f000 fa27 	bl	800564a <__malloc_lock>
 80051fc:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <_free_r+0x94>)
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	4610      	mov	r0, r2
 8005202:	b933      	cbnz	r3, 8005212 <_free_r+0x2e>
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	6014      	str	r4, [r2, #0]
 8005208:	4628      	mov	r0, r5
 800520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800520e:	f000 ba1d 	b.w	800564c <__malloc_unlock>
 8005212:	42a3      	cmp	r3, r4
 8005214:	d90b      	bls.n	800522e <_free_r+0x4a>
 8005216:	6821      	ldr	r1, [r4, #0]
 8005218:	1862      	adds	r2, r4, r1
 800521a:	4293      	cmp	r3, r2
 800521c:	bf01      	itttt	eq
 800521e:	681a      	ldreq	r2, [r3, #0]
 8005220:	685b      	ldreq	r3, [r3, #4]
 8005222:	1852      	addeq	r2, r2, r1
 8005224:	6022      	streq	r2, [r4, #0]
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	6004      	str	r4, [r0, #0]
 800522a:	e7ed      	b.n	8005208 <_free_r+0x24>
 800522c:	4613      	mov	r3, r2
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	b10a      	cbz	r2, 8005236 <_free_r+0x52>
 8005232:	42a2      	cmp	r2, r4
 8005234:	d9fa      	bls.n	800522c <_free_r+0x48>
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	1858      	adds	r0, r3, r1
 800523a:	42a0      	cmp	r0, r4
 800523c:	d10b      	bne.n	8005256 <_free_r+0x72>
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	4401      	add	r1, r0
 8005242:	1858      	adds	r0, r3, r1
 8005244:	4282      	cmp	r2, r0
 8005246:	6019      	str	r1, [r3, #0]
 8005248:	d1de      	bne.n	8005208 <_free_r+0x24>
 800524a:	6810      	ldr	r0, [r2, #0]
 800524c:	6852      	ldr	r2, [r2, #4]
 800524e:	4401      	add	r1, r0
 8005250:	6019      	str	r1, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	e7d8      	b.n	8005208 <_free_r+0x24>
 8005256:	d902      	bls.n	800525e <_free_r+0x7a>
 8005258:	230c      	movs	r3, #12
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	e7d4      	b.n	8005208 <_free_r+0x24>
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	1821      	adds	r1, r4, r0
 8005262:	428a      	cmp	r2, r1
 8005264:	bf01      	itttt	eq
 8005266:	6811      	ldreq	r1, [r2, #0]
 8005268:	6852      	ldreq	r2, [r2, #4]
 800526a:	1809      	addeq	r1, r1, r0
 800526c:	6021      	streq	r1, [r4, #0]
 800526e:	6062      	str	r2, [r4, #4]
 8005270:	605c      	str	r4, [r3, #4]
 8005272:	e7c9      	b.n	8005208 <_free_r+0x24>
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	200001f8 	.word	0x200001f8

0800527c <_malloc_r>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	1ccd      	adds	r5, r1, #3
 8005280:	f025 0503 	bic.w	r5, r5, #3
 8005284:	3508      	adds	r5, #8
 8005286:	2d0c      	cmp	r5, #12
 8005288:	bf38      	it	cc
 800528a:	250c      	movcc	r5, #12
 800528c:	2d00      	cmp	r5, #0
 800528e:	4606      	mov	r6, r0
 8005290:	db01      	blt.n	8005296 <_malloc_r+0x1a>
 8005292:	42a9      	cmp	r1, r5
 8005294:	d903      	bls.n	800529e <_malloc_r+0x22>
 8005296:	230c      	movs	r3, #12
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	2000      	movs	r0, #0
 800529c:	bd70      	pop	{r4, r5, r6, pc}
 800529e:	f000 f9d4 	bl	800564a <__malloc_lock>
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <_malloc_r+0xac>)
 80052a4:	6814      	ldr	r4, [r2, #0]
 80052a6:	4621      	mov	r1, r4
 80052a8:	b991      	cbnz	r1, 80052d0 <_malloc_r+0x54>
 80052aa:	4c20      	ldr	r4, [pc, #128]	; (800532c <_malloc_r+0xb0>)
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	b91b      	cbnz	r3, 80052b8 <_malloc_r+0x3c>
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 f98f 	bl	80055d4 <_sbrk_r>
 80052b6:	6020      	str	r0, [r4, #0]
 80052b8:	4629      	mov	r1, r5
 80052ba:	4630      	mov	r0, r6
 80052bc:	f000 f98a 	bl	80055d4 <_sbrk_r>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d124      	bne.n	800530e <_malloc_r+0x92>
 80052c4:	230c      	movs	r3, #12
 80052c6:	4630      	mov	r0, r6
 80052c8:	6033      	str	r3, [r6, #0]
 80052ca:	f000 f9bf 	bl	800564c <__malloc_unlock>
 80052ce:	e7e4      	b.n	800529a <_malloc_r+0x1e>
 80052d0:	680b      	ldr	r3, [r1, #0]
 80052d2:	1b5b      	subs	r3, r3, r5
 80052d4:	d418      	bmi.n	8005308 <_malloc_r+0x8c>
 80052d6:	2b0b      	cmp	r3, #11
 80052d8:	d90f      	bls.n	80052fa <_malloc_r+0x7e>
 80052da:	600b      	str	r3, [r1, #0]
 80052dc:	18cc      	adds	r4, r1, r3
 80052de:	50cd      	str	r5, [r1, r3]
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f9b3 	bl	800564c <__malloc_unlock>
 80052e6:	f104 000b 	add.w	r0, r4, #11
 80052ea:	1d23      	adds	r3, r4, #4
 80052ec:	f020 0007 	bic.w	r0, r0, #7
 80052f0:	1ac3      	subs	r3, r0, r3
 80052f2:	d0d3      	beq.n	800529c <_malloc_r+0x20>
 80052f4:	425a      	negs	r2, r3
 80052f6:	50e2      	str	r2, [r4, r3]
 80052f8:	e7d0      	b.n	800529c <_malloc_r+0x20>
 80052fa:	684b      	ldr	r3, [r1, #4]
 80052fc:	428c      	cmp	r4, r1
 80052fe:	bf16      	itet	ne
 8005300:	6063      	strne	r3, [r4, #4]
 8005302:	6013      	streq	r3, [r2, #0]
 8005304:	460c      	movne	r4, r1
 8005306:	e7eb      	b.n	80052e0 <_malloc_r+0x64>
 8005308:	460c      	mov	r4, r1
 800530a:	6849      	ldr	r1, [r1, #4]
 800530c:	e7cc      	b.n	80052a8 <_malloc_r+0x2c>
 800530e:	1cc4      	adds	r4, r0, #3
 8005310:	f024 0403 	bic.w	r4, r4, #3
 8005314:	42a0      	cmp	r0, r4
 8005316:	d005      	beq.n	8005324 <_malloc_r+0xa8>
 8005318:	1a21      	subs	r1, r4, r0
 800531a:	4630      	mov	r0, r6
 800531c:	f000 f95a 	bl	80055d4 <_sbrk_r>
 8005320:	3001      	adds	r0, #1
 8005322:	d0cf      	beq.n	80052c4 <_malloc_r+0x48>
 8005324:	6025      	str	r5, [r4, #0]
 8005326:	e7db      	b.n	80052e0 <_malloc_r+0x64>
 8005328:	200001f8 	.word	0x200001f8
 800532c:	200001fc 	.word	0x200001fc

08005330 <__ssputs_r>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	688e      	ldr	r6, [r1, #8]
 8005336:	4682      	mov	sl, r0
 8005338:	429e      	cmp	r6, r3
 800533a:	460c      	mov	r4, r1
 800533c:	4690      	mov	r8, r2
 800533e:	4699      	mov	r9, r3
 8005340:	d837      	bhi.n	80053b2 <__ssputs_r+0x82>
 8005342:	898a      	ldrh	r2, [r1, #12]
 8005344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005348:	d031      	beq.n	80053ae <__ssputs_r+0x7e>
 800534a:	2302      	movs	r3, #2
 800534c:	6825      	ldr	r5, [r4, #0]
 800534e:	6909      	ldr	r1, [r1, #16]
 8005350:	1a6f      	subs	r7, r5, r1
 8005352:	6965      	ldr	r5, [r4, #20]
 8005354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005358:	fb95 f5f3 	sdiv	r5, r5, r3
 800535c:	f109 0301 	add.w	r3, r9, #1
 8005360:	443b      	add	r3, r7
 8005362:	429d      	cmp	r5, r3
 8005364:	bf38      	it	cc
 8005366:	461d      	movcc	r5, r3
 8005368:	0553      	lsls	r3, r2, #21
 800536a:	d530      	bpl.n	80053ce <__ssputs_r+0x9e>
 800536c:	4629      	mov	r1, r5
 800536e:	f7ff ff85 	bl	800527c <_malloc_r>
 8005372:	4606      	mov	r6, r0
 8005374:	b950      	cbnz	r0, 800538c <__ssputs_r+0x5c>
 8005376:	230c      	movs	r3, #12
 8005378:	f04f 30ff 	mov.w	r0, #4294967295
 800537c:	f8ca 3000 	str.w	r3, [sl]
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	463a      	mov	r2, r7
 800538e:	6921      	ldr	r1, [r4, #16]
 8005390:	f7ff fc32 	bl	8004bf8 <memcpy>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	6126      	str	r6, [r4, #16]
 80053a2:	443e      	add	r6, r7
 80053a4:	6026      	str	r6, [r4, #0]
 80053a6:	464e      	mov	r6, r9
 80053a8:	6165      	str	r5, [r4, #20]
 80053aa:	1bed      	subs	r5, r5, r7
 80053ac:	60a5      	str	r5, [r4, #8]
 80053ae:	454e      	cmp	r6, r9
 80053b0:	d900      	bls.n	80053b4 <__ssputs_r+0x84>
 80053b2:	464e      	mov	r6, r9
 80053b4:	4632      	mov	r2, r6
 80053b6:	4641      	mov	r1, r8
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	f000 f92d 	bl	8005618 <memmove>
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	2000      	movs	r0, #0
 80053c2:	1b9b      	subs	r3, r3, r6
 80053c4:	60a3      	str	r3, [r4, #8]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	441e      	add	r6, r3
 80053ca:	6026      	str	r6, [r4, #0]
 80053cc:	e7dc      	b.n	8005388 <__ssputs_r+0x58>
 80053ce:	462a      	mov	r2, r5
 80053d0:	f000 f93d 	bl	800564e <_realloc_r>
 80053d4:	4606      	mov	r6, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1e2      	bne.n	80053a0 <__ssputs_r+0x70>
 80053da:	6921      	ldr	r1, [r4, #16]
 80053dc:	4650      	mov	r0, sl
 80053de:	f7ff ff01 	bl	80051e4 <_free_r>
 80053e2:	e7c8      	b.n	8005376 <__ssputs_r+0x46>

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	461d      	mov	r5, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	b09d      	sub	sp, #116	; 0x74
 80053ee:	061f      	lsls	r7, r3, #24
 80053f0:	4680      	mov	r8, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	4616      	mov	r6, r2
 80053f6:	d50f      	bpl.n	8005418 <_svfiprintf_r+0x34>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b96b      	cbnz	r3, 8005418 <_svfiprintf_r+0x34>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f7ff ff3d 	bl	800527c <_malloc_r>
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	6120      	str	r0, [r4, #16]
 8005406:	b928      	cbnz	r0, 8005414 <_svfiprintf_r+0x30>
 8005408:	230c      	movs	r3, #12
 800540a:	f8c8 3000 	str.w	r3, [r8]
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	e0c8      	b.n	80055a6 <_svfiprintf_r+0x1c2>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	6163      	str	r3, [r4, #20]
 8005418:	2300      	movs	r3, #0
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	2320      	movs	r3, #32
 800541e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005422:	2330      	movs	r3, #48	; 0x30
 8005424:	f04f 0b01 	mov.w	fp, #1
 8005428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542c:	9503      	str	r5, [sp, #12]
 800542e:	4637      	mov	r7, r6
 8005430:	463d      	mov	r5, r7
 8005432:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005436:	b10b      	cbz	r3, 800543c <_svfiprintf_r+0x58>
 8005438:	2b25      	cmp	r3, #37	; 0x25
 800543a:	d13e      	bne.n	80054ba <_svfiprintf_r+0xd6>
 800543c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005440:	d00b      	beq.n	800545a <_svfiprintf_r+0x76>
 8005442:	4653      	mov	r3, sl
 8005444:	4632      	mov	r2, r6
 8005446:	4621      	mov	r1, r4
 8005448:	4640      	mov	r0, r8
 800544a:	f7ff ff71 	bl	8005330 <__ssputs_r>
 800544e:	3001      	adds	r0, #1
 8005450:	f000 80a4 	beq.w	800559c <_svfiprintf_r+0x1b8>
 8005454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005456:	4453      	add	r3, sl
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	783b      	ldrb	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 809d 	beq.w	800559c <_svfiprintf_r+0x1b8>
 8005462:	2300      	movs	r3, #0
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005474:	931a      	str	r3, [sp, #104]	; 0x68
 8005476:	462f      	mov	r7, r5
 8005478:	2205      	movs	r2, #5
 800547a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800547e:	4850      	ldr	r0, [pc, #320]	; (80055c0 <_svfiprintf_r+0x1dc>)
 8005480:	f7ff fbac 	bl	8004bdc <memchr>
 8005484:	9b04      	ldr	r3, [sp, #16]
 8005486:	b9d0      	cbnz	r0, 80054be <_svfiprintf_r+0xda>
 8005488:	06d9      	lsls	r1, r3, #27
 800548a:	bf44      	itt	mi
 800548c:	2220      	movmi	r2, #32
 800548e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005492:	071a      	lsls	r2, r3, #28
 8005494:	bf44      	itt	mi
 8005496:	222b      	movmi	r2, #43	; 0x2b
 8005498:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800549c:	782a      	ldrb	r2, [r5, #0]
 800549e:	2a2a      	cmp	r2, #42	; 0x2a
 80054a0:	d015      	beq.n	80054ce <_svfiprintf_r+0xea>
 80054a2:	462f      	mov	r7, r5
 80054a4:	2000      	movs	r0, #0
 80054a6:	250a      	movs	r5, #10
 80054a8:	9a07      	ldr	r2, [sp, #28]
 80054aa:	4639      	mov	r1, r7
 80054ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b0:	3b30      	subs	r3, #48	; 0x30
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d94d      	bls.n	8005552 <_svfiprintf_r+0x16e>
 80054b6:	b1b8      	cbz	r0, 80054e8 <_svfiprintf_r+0x104>
 80054b8:	e00f      	b.n	80054da <_svfiprintf_r+0xf6>
 80054ba:	462f      	mov	r7, r5
 80054bc:	e7b8      	b.n	8005430 <_svfiprintf_r+0x4c>
 80054be:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <_svfiprintf_r+0x1dc>)
 80054c0:	463d      	mov	r5, r7
 80054c2:	1a80      	subs	r0, r0, r2
 80054c4:	fa0b f000 	lsl.w	r0, fp, r0
 80054c8:	4318      	orrs	r0, r3
 80054ca:	9004      	str	r0, [sp, #16]
 80054cc:	e7d3      	b.n	8005476 <_svfiprintf_r+0x92>
 80054ce:	9a03      	ldr	r2, [sp, #12]
 80054d0:	1d11      	adds	r1, r2, #4
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	9103      	str	r1, [sp, #12]
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	db01      	blt.n	80054de <_svfiprintf_r+0xfa>
 80054da:	9207      	str	r2, [sp, #28]
 80054dc:	e004      	b.n	80054e8 <_svfiprintf_r+0x104>
 80054de:	4252      	negs	r2, r2
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	9207      	str	r2, [sp, #28]
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	783b      	ldrb	r3, [r7, #0]
 80054ea:	2b2e      	cmp	r3, #46	; 0x2e
 80054ec:	d10c      	bne.n	8005508 <_svfiprintf_r+0x124>
 80054ee:	787b      	ldrb	r3, [r7, #1]
 80054f0:	2b2a      	cmp	r3, #42	; 0x2a
 80054f2:	d133      	bne.n	800555c <_svfiprintf_r+0x178>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	3702      	adds	r7, #2
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9203      	str	r2, [sp, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfb8      	it	lt
 8005502:	f04f 33ff 	movlt.w	r3, #4294967295
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	4d2e      	ldr	r5, [pc, #184]	; (80055c4 <_svfiprintf_r+0x1e0>)
 800550a:	2203      	movs	r2, #3
 800550c:	7839      	ldrb	r1, [r7, #0]
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff fb64 	bl	8004bdc <memchr>
 8005514:	b138      	cbz	r0, 8005526 <_svfiprintf_r+0x142>
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	1b40      	subs	r0, r0, r5
 800551a:	fa03 f000 	lsl.w	r0, r3, r0
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	3701      	adds	r7, #1
 8005522:	4303      	orrs	r3, r0
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	7839      	ldrb	r1, [r7, #0]
 8005528:	2206      	movs	r2, #6
 800552a:	4827      	ldr	r0, [pc, #156]	; (80055c8 <_svfiprintf_r+0x1e4>)
 800552c:	1c7e      	adds	r6, r7, #1
 800552e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005532:	f7ff fb53 	bl	8004bdc <memchr>
 8005536:	2800      	cmp	r0, #0
 8005538:	d038      	beq.n	80055ac <_svfiprintf_r+0x1c8>
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <_svfiprintf_r+0x1e8>)
 800553c:	bb13      	cbnz	r3, 8005584 <_svfiprintf_r+0x1a0>
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554c:	444b      	add	r3, r9
 800554e:	9309      	str	r3, [sp, #36]	; 0x24
 8005550:	e76d      	b.n	800542e <_svfiprintf_r+0x4a>
 8005552:	fb05 3202 	mla	r2, r5, r2, r3
 8005556:	2001      	movs	r0, #1
 8005558:	460f      	mov	r7, r1
 800555a:	e7a6      	b.n	80054aa <_svfiprintf_r+0xc6>
 800555c:	2300      	movs	r3, #0
 800555e:	250a      	movs	r5, #10
 8005560:	4619      	mov	r1, r3
 8005562:	3701      	adds	r7, #1
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	4638      	mov	r0, r7
 8005568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556c:	3a30      	subs	r2, #48	; 0x30
 800556e:	2a09      	cmp	r2, #9
 8005570:	d903      	bls.n	800557a <_svfiprintf_r+0x196>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0c8      	beq.n	8005508 <_svfiprintf_r+0x124>
 8005576:	9105      	str	r1, [sp, #20]
 8005578:	e7c6      	b.n	8005508 <_svfiprintf_r+0x124>
 800557a:	fb05 2101 	mla	r1, r5, r1, r2
 800557e:	2301      	movs	r3, #1
 8005580:	4607      	mov	r7, r0
 8005582:	e7f0      	b.n	8005566 <_svfiprintf_r+0x182>
 8005584:	ab03      	add	r3, sp, #12
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4622      	mov	r2, r4
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800558c:	a904      	add	r1, sp, #16
 800558e:	4640      	mov	r0, r8
 8005590:	f7fe f8ee 	bl	8003770 <_printf_float>
 8005594:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005598:	4681      	mov	r9, r0
 800559a:	d1d6      	bne.n	800554a <_svfiprintf_r+0x166>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	065b      	lsls	r3, r3, #25
 80055a0:	f53f af35 	bmi.w	800540e <_svfiprintf_r+0x2a>
 80055a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055a6:	b01d      	add	sp, #116	; 0x74
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	ab03      	add	r3, sp, #12
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4622      	mov	r2, r4
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <_svfiprintf_r+0x1ec>)
 80055b4:	a904      	add	r1, sp, #16
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7fe fb86 	bl	8003cc8 <_printf_i>
 80055bc:	e7ea      	b.n	8005594 <_svfiprintf_r+0x1b0>
 80055be:	bf00      	nop
 80055c0:	08005844 	.word	0x08005844
 80055c4:	0800584a 	.word	0x0800584a
 80055c8:	0800584e 	.word	0x0800584e
 80055cc:	08003771 	.word	0x08003771
 80055d0:	08005331 	.word	0x08005331

080055d4 <_sbrk_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	2300      	movs	r3, #0
 80055d8:	4c05      	ldr	r4, [pc, #20]	; (80055f0 <_sbrk_r+0x1c>)
 80055da:	4605      	mov	r5, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	f7fd fe20 	bl	8003224 <_sbrk>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_sbrk_r+0x1a>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_sbrk_r+0x1a>
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	200002e4 	.word	0x200002e4

080055f4 <__ascii_mbtowc>:
 80055f4:	b082      	sub	sp, #8
 80055f6:	b901      	cbnz	r1, 80055fa <__ascii_mbtowc+0x6>
 80055f8:	a901      	add	r1, sp, #4
 80055fa:	b142      	cbz	r2, 800560e <__ascii_mbtowc+0x1a>
 80055fc:	b14b      	cbz	r3, 8005612 <__ascii_mbtowc+0x1e>
 80055fe:	7813      	ldrb	r3, [r2, #0]
 8005600:	600b      	str	r3, [r1, #0]
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	1c10      	adds	r0, r2, #0
 8005606:	bf18      	it	ne
 8005608:	2001      	movne	r0, #1
 800560a:	b002      	add	sp, #8
 800560c:	4770      	bx	lr
 800560e:	4610      	mov	r0, r2
 8005610:	e7fb      	b.n	800560a <__ascii_mbtowc+0x16>
 8005612:	f06f 0001 	mvn.w	r0, #1
 8005616:	e7f8      	b.n	800560a <__ascii_mbtowc+0x16>

08005618 <memmove>:
 8005618:	4288      	cmp	r0, r1
 800561a:	b510      	push	{r4, lr}
 800561c:	eb01 0302 	add.w	r3, r1, r2
 8005620:	d807      	bhi.n	8005632 <memmove+0x1a>
 8005622:	1e42      	subs	r2, r0, #1
 8005624:	4299      	cmp	r1, r3
 8005626:	d00a      	beq.n	800563e <memmove+0x26>
 8005628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005630:	e7f8      	b.n	8005624 <memmove+0xc>
 8005632:	4283      	cmp	r3, r0
 8005634:	d9f5      	bls.n	8005622 <memmove+0xa>
 8005636:	1881      	adds	r1, r0, r2
 8005638:	1ad2      	subs	r2, r2, r3
 800563a:	42d3      	cmn	r3, r2
 800563c:	d100      	bne.n	8005640 <memmove+0x28>
 800563e:	bd10      	pop	{r4, pc}
 8005640:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005644:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005648:	e7f7      	b.n	800563a <memmove+0x22>

0800564a <__malloc_lock>:
 800564a:	4770      	bx	lr

0800564c <__malloc_unlock>:
 800564c:	4770      	bx	lr

0800564e <_realloc_r>:
 800564e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005650:	4607      	mov	r7, r0
 8005652:	4614      	mov	r4, r2
 8005654:	460e      	mov	r6, r1
 8005656:	b921      	cbnz	r1, 8005662 <_realloc_r+0x14>
 8005658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800565c:	4611      	mov	r1, r2
 800565e:	f7ff be0d 	b.w	800527c <_malloc_r>
 8005662:	b922      	cbnz	r2, 800566e <_realloc_r+0x20>
 8005664:	f7ff fdbe 	bl	80051e4 <_free_r>
 8005668:	4625      	mov	r5, r4
 800566a:	4628      	mov	r0, r5
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566e:	f000 f821 	bl	80056b4 <_malloc_usable_size_r>
 8005672:	42a0      	cmp	r0, r4
 8005674:	d20f      	bcs.n	8005696 <_realloc_r+0x48>
 8005676:	4621      	mov	r1, r4
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff fdff 	bl	800527c <_malloc_r>
 800567e:	4605      	mov	r5, r0
 8005680:	2800      	cmp	r0, #0
 8005682:	d0f2      	beq.n	800566a <_realloc_r+0x1c>
 8005684:	4631      	mov	r1, r6
 8005686:	4622      	mov	r2, r4
 8005688:	f7ff fab6 	bl	8004bf8 <memcpy>
 800568c:	4631      	mov	r1, r6
 800568e:	4638      	mov	r0, r7
 8005690:	f7ff fda8 	bl	80051e4 <_free_r>
 8005694:	e7e9      	b.n	800566a <_realloc_r+0x1c>
 8005696:	4635      	mov	r5, r6
 8005698:	e7e7      	b.n	800566a <_realloc_r+0x1c>

0800569a <__ascii_wctomb>:
 800569a:	b149      	cbz	r1, 80056b0 <__ascii_wctomb+0x16>
 800569c:	2aff      	cmp	r2, #255	; 0xff
 800569e:	bf8b      	itete	hi
 80056a0:	238a      	movhi	r3, #138	; 0x8a
 80056a2:	700a      	strbls	r2, [r1, #0]
 80056a4:	6003      	strhi	r3, [r0, #0]
 80056a6:	2001      	movls	r0, #1
 80056a8:	bf88      	it	hi
 80056aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80056ae:	4770      	bx	lr
 80056b0:	4608      	mov	r0, r1
 80056b2:	4770      	bx	lr

080056b4 <_malloc_usable_size_r>:
 80056b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b8:	1f18      	subs	r0, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfbc      	itt	lt
 80056be:	580b      	ldrlt	r3, [r1, r0]
 80056c0:	18c0      	addlt	r0, r0, r3
 80056c2:	4770      	bx	lr

080056c4 <_init>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr

080056d0 <_fini>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr
