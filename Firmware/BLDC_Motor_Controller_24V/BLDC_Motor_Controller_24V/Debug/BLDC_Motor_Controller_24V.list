
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006964  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08006a98  08006a98  00016a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006d18  08006d18  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d18  08006d18  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006d20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d8  08006ef8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08006ef8  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4e9  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198f  00000000  00000000  0002d6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000458  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003a8  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009af2  00000000  00000000  0002f880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066e1  00000000  00000000  00039372  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002ab23  00000000  00000000  0003fa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006a576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a5c  00000000  00000000  0006a5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	08006a7c 	.word	0x08006a7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	08006a7c 	.word	0x08006a7c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <DMA_Init+0xbc>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d80f      	bhi.n	800101c <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <DMA_Init+0xc0>)
 8001004:	4413      	add	r3, r2
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <DMA_Init+0xc4>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	009a      	lsls	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <DMA_Init+0xc8>)
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
 800101a:	e00e      	b.n	800103a <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <DMA_Init+0xcc>)
 8001024:	4413      	add	r3, r2
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <DMA_Init+0xc4>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	009a      	lsls	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <DMA_Init+0xd0>)
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001050:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001054:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 800105e:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800106a:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001076:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40020407 	.word	0x40020407
 80010a4:	bffdfff8 	.word	0xbffdfff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40020000 	.word	0x40020000
 80010b0:	bffdfbf8 	.word	0xbffdfbf8
 80010b4:	40020400 	.word	0x40020400

080010b8 <DMA_SetConfig>:


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d108      	bne.n	80010f8 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 80010f6:	e007      	b.n	8001108 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ffbe 	bl	80010b8 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0204 	bic.w	r2, r2, #4
 800114a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2104      	movs	r1, #4
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80bf 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80bb 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b99      	ldr	r3, [pc, #612]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d958      	bls.n	800126a <DMA_IRQ_Handling+0xf6>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a97      	ldr	r2, [pc, #604]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d04f      	beq.n	8001262 <DMA_IRQ_Handling+0xee>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d048      	beq.n	800125e <DMA_IRQ_Handling+0xea>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a94      	ldr	r2, [pc, #592]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d040      	beq.n	8001258 <DMA_IRQ_Handling+0xe4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a93      	ldr	r2, [pc, #588]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d038      	beq.n	8001252 <DMA_IRQ_Handling+0xde>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a91      	ldr	r2, [pc, #580]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d030      	beq.n	800124c <DMA_IRQ_Handling+0xd8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a90      	ldr	r2, [pc, #576]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d028      	beq.n	8001246 <DMA_IRQ_Handling+0xd2>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a87      	ldr	r2, [pc, #540]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d020      	beq.n	8001240 <DMA_IRQ_Handling+0xcc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8c      	ldr	r2, [pc, #560]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d019      	beq.n	800123c <DMA_IRQ_Handling+0xc8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d012      	beq.n	8001238 <DMA_IRQ_Handling+0xc4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a89      	ldr	r2, [pc, #548]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00a      	beq.n	8001232 <DMA_IRQ_Handling+0xbe>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a87      	ldr	r2, [pc, #540]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d102      	bne.n	800122c <DMA_IRQ_Handling+0xb8>
 8001226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122a:	e01b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800122c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001230:	e018      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	e015      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	e013      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800123c:	2304      	movs	r3, #4
 800123e:	e011      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001244:	e00e      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	e00b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800124c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001250:	e008      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001256:	e005      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	e002      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800125e:	2340      	movs	r3, #64	; 0x40
 8001260:	e000      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001262:	2304      	movs	r3, #4
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001266:	6053      	str	r3, [r2, #4]
 8001268:	e057      	b.n	800131a <DMA_IRQ_Handling+0x1a6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6b      	ldr	r2, [pc, #428]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d04f      	beq.n	8001314 <DMA_IRQ_Handling+0x1a0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d048      	beq.n	8001310 <DMA_IRQ_Handling+0x19c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a68      	ldr	r2, [pc, #416]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d040      	beq.n	800130a <DMA_IRQ_Handling+0x196>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a66      	ldr	r2, [pc, #408]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d038      	beq.n	8001304 <DMA_IRQ_Handling+0x190>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a65      	ldr	r2, [pc, #404]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d030      	beq.n	80012fe <DMA_IRQ_Handling+0x18a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a63      	ldr	r2, [pc, #396]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d028      	beq.n	80012f8 <DMA_IRQ_Handling+0x184>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5b      	ldr	r2, [pc, #364]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d020      	beq.n	80012f2 <DMA_IRQ_Handling+0x17e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <DMA_IRQ_Handling+0x17a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d012      	beq.n	80012ea <DMA_IRQ_Handling+0x176>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00a      	beq.n	80012e4 <DMA_IRQ_Handling+0x170>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d102      	bne.n	80012de <DMA_IRQ_Handling+0x16a>
 80012d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012dc:	e01b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012e2:	e018      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	e015      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	e013      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e011      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012f6:	e00e      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fc:	e00b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001302:	e008      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001308:	e005      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	e002      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	e000      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001314:	2304      	movs	r3, #4
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <DMA_IRQ_Handling+0x2d4>)
 8001318:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2102      	movs	r1, #2
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80dd 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80d9 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d972      	bls.n	800144c <DMA_IRQ_Handling+0x2d8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d04f      	beq.n	8001410 <DMA_IRQ_Handling+0x29c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d048      	beq.n	800140c <DMA_IRQ_Handling+0x298>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d040      	beq.n	8001406 <DMA_IRQ_Handling+0x292>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d038      	beq.n	8001400 <DMA_IRQ_Handling+0x28c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d030      	beq.n	80013fa <DMA_IRQ_Handling+0x286>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d028      	beq.n	80013f4 <DMA_IRQ_Handling+0x280>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d020      	beq.n	80013ee <DMA_IRQ_Handling+0x27a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <DMA_IRQ_Handling+0x276>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d012      	beq.n	80013e6 <DMA_IRQ_Handling+0x272>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00a      	beq.n	80013e0 <DMA_IRQ_Handling+0x26c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <DMA_IRQ_Handling+0x266>
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	e01b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	e018      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	e015      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e6:	2320      	movs	r3, #32
 80013e8:	e013      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e011      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f2:	e00e      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f8:	e00b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	e008      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	e005      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	e002      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 800140c:	2320      	movs	r3, #32
 800140e:	e000      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001410:	2302      	movs	r3, #2
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001414:	6053      	str	r3, [r2, #4]
 8001416:	e071      	b.n	80014fc <DMA_IRQ_Handling+0x388>
 8001418:	40020080 	.word	0x40020080
 800141c:	40020008 	.word	0x40020008
 8001420:	4002001c 	.word	0x4002001c
 8001424:	40020030 	.word	0x40020030
 8001428:	40020044 	.word	0x40020044
 800142c:	40020058 	.word	0x40020058
 8001430:	4002006c 	.word	0x4002006c
 8001434:	40020408 	.word	0x40020408
 8001438:	4002041c 	.word	0x4002041c
 800143c:	40020430 	.word	0x40020430
 8001440:	40020444 	.word	0x40020444
 8001444:	40020400 	.word	0x40020400
 8001448:	40020000 	.word	0x40020000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a9a      	ldr	r2, [pc, #616]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d04f      	beq.n	80014f6 <DMA_IRQ_Handling+0x382>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a99      	ldr	r2, [pc, #612]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d048      	beq.n	80014f2 <DMA_IRQ_Handling+0x37e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a97      	ldr	r2, [pc, #604]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d040      	beq.n	80014ec <DMA_IRQ_Handling+0x378>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a96      	ldr	r2, [pc, #600]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d038      	beq.n	80014e6 <DMA_IRQ_Handling+0x372>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a94      	ldr	r2, [pc, #592]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d030      	beq.n	80014e0 <DMA_IRQ_Handling+0x36c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d028      	beq.n	80014da <DMA_IRQ_Handling+0x366>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d020      	beq.n	80014d4 <DMA_IRQ_Handling+0x360>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <DMA_IRQ_Handling+0x35c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a8e      	ldr	r2, [pc, #568]	; (80016dc <DMA_IRQ_Handling+0x568>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d012      	beq.n	80014cc <DMA_IRQ_Handling+0x358>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8d      	ldr	r2, [pc, #564]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00a      	beq.n	80014c6 <DMA_IRQ_Handling+0x352>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a8b      	ldr	r2, [pc, #556]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d102      	bne.n	80014c0 <DMA_IRQ_Handling+0x34c>
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	e01b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	e018      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	e015      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014cc:	2320      	movs	r3, #32
 80014ce:	e013      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e011      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d8:	e00e      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014de:	e00b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	e008      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	e005      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	e002      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f2:	2320      	movs	r3, #32
 80014f4:	e000      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f6:	2302      	movs	r3, #2
 80014f8:	4a7b      	ldr	r2, [pc, #492]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80014fa:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2108      	movs	r1, #8
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c3 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80bf 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d958      	bls.n	80015f2 <DMA_IRQ_Handling+0x47e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04f      	beq.n	80015ea <DMA_IRQ_Handling+0x476>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d048      	beq.n	80015e6 <DMA_IRQ_Handling+0x472>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d040      	beq.n	80015e0 <DMA_IRQ_Handling+0x46c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d038      	beq.n	80015da <DMA_IRQ_Handling+0x466>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d030      	beq.n	80015d4 <DMA_IRQ_Handling+0x460>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d028      	beq.n	80015ce <DMA_IRQ_Handling+0x45a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d020      	beq.n	80015c8 <DMA_IRQ_Handling+0x454>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <DMA_IRQ_Handling+0x450>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d012      	beq.n	80015c0 <DMA_IRQ_Handling+0x44c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00a      	beq.n	80015ba <DMA_IRQ_Handling+0x446>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d102      	bne.n	80015b4 <DMA_IRQ_Handling+0x440>
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	e01b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	e018      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e015      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e013      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e011      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015cc:	e00e      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d2:	e00b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	e008      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	e005      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	e002      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e6:	2310      	movs	r3, #16
 80015e8:	e000      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ea:	2301      	movs	r3, #1
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <DMA_IRQ_Handling+0x578>)
 80015ee:	6053      	str	r3, [r2, #4]
 80015f0:	e057      	b.n	80016a2 <DMA_IRQ_Handling+0x52e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <DMA_IRQ_Handling+0x548>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04f      	beq.n	800169c <DMA_IRQ_Handling+0x528>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d048      	beq.n	8001698 <DMA_IRQ_Handling+0x524>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d040      	beq.n	8001692 <DMA_IRQ_Handling+0x51e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d038      	beq.n	800168c <DMA_IRQ_Handling+0x518>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <DMA_IRQ_Handling+0x558>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d030      	beq.n	8001686 <DMA_IRQ_Handling+0x512>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d028      	beq.n	8001680 <DMA_IRQ_Handling+0x50c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d020      	beq.n	800167a <DMA_IRQ_Handling+0x506>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <DMA_IRQ_Handling+0x502>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a25      	ldr	r2, [pc, #148]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d012      	beq.n	8001672 <DMA_IRQ_Handling+0x4fe>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00a      	beq.n	800166c <DMA_IRQ_Handling+0x4f8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <DMA_IRQ_Handling+0x4f2>
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	e01b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	e018      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	e015      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001672:	2310      	movs	r3, #16
 8001674:	e013      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001676:	2301      	movs	r3, #1
 8001678:	e011      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167e:	e00e      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001684:	e00b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168a:	e008      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	e005      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	e002      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001698:	2310      	movs	r3, #16
 800169a:	e000      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800169c:	2301      	movs	r3, #1
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80016a0:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
	}
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020008 	.word	0x40020008
 80016c0:	4002001c 	.word	0x4002001c
 80016c4:	40020030 	.word	0x40020030
 80016c8:	40020044 	.word	0x40020044
 80016cc:	40020058 	.word	0x40020058
 80016d0:	4002006c 	.word	0x4002006c
 80016d4:	40020080 	.word	0x40020080
 80016d8:	40020408 	.word	0x40020408
 80016dc:	4002041c 	.word	0x4002041c
 80016e0:	40020430 	.word	0x40020430
 80016e4:	40020444 	.word	0x40020444
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a96      	ldr	r2, [pc, #600]	; (8001960 <GPIO_Init+0x270>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <GPIO_Init+0x28>
 800170a:	4b96      	ldr	r3, [pc, #600]	; (8001964 <GPIO_Init+0x274>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a95      	ldr	r2, [pc, #596]	; (8001964 <GPIO_Init+0x274>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	e03c      	b.n	8001792 <GPIO_Init+0xa2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a93      	ldr	r2, [pc, #588]	; (8001968 <GPIO_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d106      	bne.n	800172e <GPIO_Init+0x3e>
 8001720:	4b90      	ldr	r3, [pc, #576]	; (8001964 <GPIO_Init+0x274>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <GPIO_Init+0x274>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	e031      	b.n	8001792 <GPIO_Init+0xa2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a8e      	ldr	r2, [pc, #568]	; (800196c <GPIO_Init+0x27c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d106      	bne.n	8001744 <GPIO_Init+0x54>
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <GPIO_Init+0x274>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <GPIO_Init+0x274>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	e026      	b.n	8001792 <GPIO_Init+0xa2>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a8a      	ldr	r2, [pc, #552]	; (8001970 <GPIO_Init+0x280>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <GPIO_Init+0x6a>
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <GPIO_Init+0x274>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a84      	ldr	r2, [pc, #528]	; (8001964 <GPIO_Init+0x274>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	e01b      	b.n	8001792 <GPIO_Init+0xa2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a85      	ldr	r2, [pc, #532]	; (8001974 <GPIO_Init+0x284>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d106      	bne.n	8001770 <GPIO_Init+0x80>
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <GPIO_Init+0x274>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <GPIO_Init+0x274>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	e010      	b.n	8001792 <GPIO_Init+0xa2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a81      	ldr	r2, [pc, #516]	; (8001978 <GPIO_Init+0x288>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <GPIO_Init+0x96>
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <GPIO_Init+0x274>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a79      	ldr	r2, [pc, #484]	; (8001964 <GPIO_Init+0x274>)
 800177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	e005      	b.n	8001792 <GPIO_Init+0xa2>
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <GPIO_Init+0x274>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a76      	ldr	r2, [pc, #472]	; (8001964 <GPIO_Init+0x274>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	76fb      	strb	r3, [r7, #27]
 8001796:	e1d0      	b.n	8001b3a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	7efa      	ldrb	r2, [r7, #27]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 81c0 	beq.w	8001b2c <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d039      	beq.n	8001828 <GPIO_Init+0x138>
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d807      	bhi.n	80017c8 <GPIO_Init+0xd8>
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d016      	beq.n	80017ea <GPIO_Init+0xfa>
 80017bc:	2b01      	cmp	r3, #1
 80017be:	f0c0 8090 	bcc.w	80018e2 <GPIO_Init+0x1f2>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d04f      	beq.n	8001866 <GPIO_Init+0x176>
 80017c6:	e0bd      	b.n	8001944 <GPIO_Init+0x254>
 80017c8:	4a6c      	ldr	r2, [pc, #432]	; (800197c <GPIO_Init+0x28c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	f000 8089 	beq.w	80018e2 <GPIO_Init+0x1f2>
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <GPIO_Init+0x28c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <GPIO_Init+0xec>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d064      	beq.n	80018a4 <GPIO_Init+0x1b4>
 80017da:	e0b3      	b.n	8001944 <GPIO_Init+0x254>
 80017dc:	4a68      	ldr	r2, [pc, #416]	; (8001980 <GPIO_Init+0x290>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d07f      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e2:	4a68      	ldr	r2, [pc, #416]	; (8001984 <GPIO_Init+0x294>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d07c      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e8:	e0ac      	b.n	8001944 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d104      	bne.n	80017fc <GPIO_Init+0x10c>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e010      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d104      	bne.n	800180e <GPIO_Init+0x11e>
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	e007      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d103      	bne.n	800181e <GPIO_Init+0x12e>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f043 0303 	orr.w	r3, r3, #3
 800181c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f023 030c 	bic.w	r3, r3, #12
 8001824:	61fb      	str	r3, [r7, #28]


					break;
 8001826:	e08d      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d104      	bne.n	800183a <GPIO_Init+0x14a>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	e010      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d104      	bne.n	800184c <GPIO_Init+0x15c>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e007      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d103      	bne.n	800185c <GPIO_Init+0x16c>
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f043 0303 	orr.w	r3, r3, #3
 800185a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	61fb      	str	r3, [r7, #28]

					break;
 8001864:	e06e      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d104      	bne.n	8001878 <GPIO_Init+0x188>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e010      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <GPIO_Init+0x19a>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	e007      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d103      	bne.n	800189a <GPIO_Init+0x1aa>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f043 0303 	orr.w	r3, r3, #3
 8001898:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	61fb      	str	r3, [r7, #28]

					break;
 80018a2:	e04f      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d104      	bne.n	80018b6 <GPIO_Init+0x1c6>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e010      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <GPIO_Init+0x1d8>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e007      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d103      	bne.n	80018d8 <GPIO_Init+0x1e8>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f043 0303 	orr.w	r3, r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f043 030c 	orr.w	r3, r3, #12
 80018de:	61fb      	str	r3, [r7, #28]

					break;
 80018e0:	e030      	b.n	8001944 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80018fa:	e022      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10d      	bne.n	8001920 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	7efa      	ldrb	r2, [r7, #27]
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
					break;
 800191e:	e010      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d10c      	bne.n	8001942 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	7efa      	ldrb	r2, [r7, #27]
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	615a      	str	r2, [r3, #20]
					break;
 8001942:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001944:	7efb      	ldrb	r3, [r7, #27]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d801      	bhi.n	800194e <GPIO_Init+0x25e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <GPIO_Init+0x262>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d816      	bhi.n	8001988 <GPIO_Init+0x298>
 800195a:	7efb      	ldrb	r3, [r7, #27]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e016      	b.n	800198e <GPIO_Init+0x29e>
 8001960:	40010800 	.word	0x40010800
 8001964:	40021000 	.word	0x40021000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40011400 	.word	0x40011400
 8001974:	40011800 	.word	0x40011800
 8001978:	40011c00 	.word	0x40011c00
 800197c:	10110000 	.word	0x10110000
 8001980:	10210000 	.word	0x10210000
 8001984:	10310000 	.word	0x10310000
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b8 	beq.w	8001b2c <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <GPIO_Init+0x45c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <GPIO_Init+0x45c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 80019d0:	7efb      	ldrb	r3, [r7, #27]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 80019d8:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <GPIO_Init+0x460>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	210f      	movs	r1, #15
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4958      	ldr	r1, [pc, #352]	; (8001b54 <GPIO_Init+0x464>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d01f      	beq.n	8001a38 <GPIO_Init+0x348>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4957      	ldr	r1, [pc, #348]	; (8001b58 <GPIO_Init+0x468>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d019      	beq.n	8001a34 <GPIO_Init+0x344>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4956      	ldr	r1, [pc, #344]	; (8001b5c <GPIO_Init+0x46c>)
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d013      	beq.n	8001a30 <GPIO_Init+0x340>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4955      	ldr	r1, [pc, #340]	; (8001b60 <GPIO_Init+0x470>)
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d00d      	beq.n	8001a2c <GPIO_Init+0x33c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4954      	ldr	r1, [pc, #336]	; (8001b64 <GPIO_Init+0x474>)
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d007      	beq.n	8001a28 <GPIO_Init+0x338>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4953      	ldr	r1, [pc, #332]	; (8001b68 <GPIO_Init+0x478>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d101      	bne.n	8001a24 <GPIO_Init+0x334>
 8001a20:	2305      	movs	r3, #5
 8001a22:	e00a      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e008      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	0089      	lsls	r1, r1, #2
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	4943      	ldr	r1, [pc, #268]	; (8001b50 <GPIO_Init+0x460>)
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3302      	adds	r3, #2
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001a58:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <GPIO_Init+0x47c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	7efa      	ldrb	r2, [r7, #27]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4611      	mov	r1, r2
 8001a66:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <GPIO_Init+0x47c>)
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00a      	b.n	8001a84 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <GPIO_Init+0x47c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	7efa      	ldrb	r2, [r7, #27]
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	43d2      	mvns	r2, r2
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <GPIO_Init+0x47c>)
 8001a80:	400b      	ands	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <GPIO_Init+0x47c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	7efa      	ldrb	r2, [r7, #27]
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6053      	str	r3, [r2, #4]
 8001aa4:	e00a      	b.n	8001abc <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	7efa      	ldrb	r2, [r7, #27]
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	43d2      	mvns	r2, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <GPIO_Init+0x47c>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <GPIO_Init+0x47c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	7efa      	ldrb	r2, [r7, #27]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <GPIO_Init+0x47c>)
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]
 8001adc:	e00a      	b.n	8001af4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <GPIO_Init+0x47c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	7efa      	ldrb	r2, [r7, #27]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	43d2      	mvns	r2, r2
 8001aec:	4611      	mov	r1, r2
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <GPIO_Init+0x47c>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <GPIO_Init+0x47c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	7efa      	ldrb	r2, [r7, #27]
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <GPIO_Init+0x47c>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60d3      	str	r3, [r2, #12]
 8001b14:	e00a      	b.n	8001b2c <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <GPIO_Init+0x47c>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	7efa      	ldrb	r2, [r7, #27]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	43d2      	mvns	r2, r2
 8001b24:	4611      	mov	r1, r2
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <GPIO_Init+0x47c>)
 8001b28:	400b      	ands	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	3301      	adds	r3, #1
 8001b38:	76fb      	strb	r3, [r7, #27]
 8001b3a:	7efb      	ldrb	r3, [r7, #27]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	f67f ae2b 	bls.w	8001798 <GPIO_Init+0xa8>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40011800 	.word	0x40011800
 8001b68:	40011c00 	.word	0x40011c00
 8001b6c:	40010400 	.word	0x40010400

08001b70 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001b92:	e006      	b.n	8001ba2 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001bc0:	883b      	ldrh	r3, [r7, #0]
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <EXTI_IRQHandling+0x34>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <EXTI_IRQHandling+0x34>)
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	4905      	ldr	r1, [pc, #20]	; (8001c14 <EXTI_IRQHandling+0x34>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f002 fde9 	bl	80047dc <EXTI_Callback>
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40010400 	.word	0x40010400

08001c18 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d10c      	bne.n	8001c50 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001c42:	bf00      	nop
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f9      	beq.n	8001c44 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d128      	bne.n	8001caa <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d105      	bne.n	8001c7a <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c78:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	4313      	orrs	r3, r2
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001c9c:	bf00      	nop
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <RCC_OscConfig+0x9c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f9      	beq.n	8001c9e <RCC_OscConfig+0x86>
	}
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <RCC_ClockConfig+0x7c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	491a      	ldr	r1, [pc, #104]	; (8001d34 <RCC_ClockConfig+0x7c>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4916      	ldr	r1, [pc, #88]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	4911      	ldr	r1, [pc, #68]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	490d      	ldr	r1, [pc, #52]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 0203 	bic.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4908      	ldr	r1, [pc, #32]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001d1a:	bf00      	nop
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <RCC_ClockConfig+0x80>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f9      	beq.n	8001d1c <RCC_ClockConfig+0x64>
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000

08001d3c <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <RCC_GetPLLOutputClock+0x70>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <RCC_GetPLLOutputClock+0x1e>
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <RCC_GetPLLOutputClock+0x70>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e020      	b.n	8001da0 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <RCC_GetPLLOutputClock+0x70>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <RCC_GetPLLOutputClock+0x74>)
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e001      	b.n	8001d74 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <RCC_GetPLLOutputClock+0x78>)
 8001d72:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <RCC_GetPLLOutputClock+0x70>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001d82:	7abb      	ldrb	r3, [r7, #10]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d102      	bne.n	8001d8e <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001d88:	2310      	movs	r3, #16
 8001d8a:	72fb      	strb	r3, [r7, #11]
 8001d8c:	e002      	b.n	8001d94 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001d8e:	7abb      	ldrb	r3, [r7, #10]
 8001d90:	3302      	adds	r3, #2
 8001d92:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001d94:	7afa      	ldrb	r2, [r7, #11]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	003d0900 	.word	0x003d0900

08001db8 <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b08d      	sub	sp, #52	; 0x34
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <RCC_GetPCLKxValue+0x144>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001dd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <RCC_GetPCLKxValue+0x148>)
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	e00d      	b.n	8001dfc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001de0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <RCC_GetPCLKxValue+0x148>)
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	e006      	b.n	8001dfc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d102      	bne.n	8001dfc <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001df6:	f7ff ffa1 	bl	8001d3c <RCC_GetPLLOutputClock>
 8001dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <RCC_GetPCLKxValue+0x14c>)
 8001dfe:	f107 0410 	add.w	r4, r7, #16
 8001e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <RCC_GetPCLKxValue+0x144>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1c:	2b07      	cmp	r3, #7
 8001e1e:	d803      	bhi.n	8001e28 <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e26:	e00a      	b.n	8001e3e <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e2c:	3b08      	subs	r3, #8
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e34:	4413      	add	r3, r2
 8001e36:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <RCC_GetPCLKxValue+0x150>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11a      	bne.n	8001e80 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <RCC_GetPCLKxValue+0x144>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d803      	bhi.n	8001e6a <RCC_GetPCLKxValue+0xb2>
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e68:	e027      	b.n	8001eba <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e74:	4413      	add	r3, r2
 8001e76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e7e:	e01c      	b.n	8001eba <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d119      	bne.n	8001eba <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <RCC_GetPCLKxValue+0x144>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d803      	bhi.n	8001ea6 <RCC_GetPCLKxValue+0xee>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001ea4:	e009      	b.n	8001eba <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <RCC_GetPCLKxValue+0x11e>
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed4:	e00c      	b.n	8001ef0 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d109      	bne.n	8001ef0 <RCC_GetPCLKxValue+0x138>
 8001edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3734      	adds	r7, #52	; 0x34
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	08006a98 	.word	0x08006a98
 8001f08:	08006aa8 	.word	0x08006aa8

08001f0c <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7f1b      	ldrb	r3, [r3, #28]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 f81c 	bl	8003f60 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f81f 	bl	8001f6c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]
 8001f34:	e000      	b.n	8001f38 <TIM_Base_Init+0x2c>
		return;
 8001f36:	bf00      	nop
}
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7f1b      	ldrb	r3, [r3, #28]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f002 f81d 	bl	8003f90 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f808 	bl	8001f6c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	771a      	strb	r2, [r3, #28]
 8001f62:	e000      	b.n	8001f66 <TIM_PWM_Init+0x28>
		return;
 8001f64:	bf00      	nop
}
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68d2      	ldr	r2, [r2, #12]
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6852      	ldr	r2, [r2, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6952      	ldr	r2, [r2, #20]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	f200 80d3 	bhi.w	8002192 <TIM_PWM_ConfigChannel+0x1ba>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <TIM_PWM_ConfigChannel+0x1c>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	08002193 	.word	0x08002193
 8001ffc:	08002193 	.word	0x08002193
 8002000:	08002193 	.word	0x08002193
 8002004:	08002081 	.word	0x08002081
 8002008:	08002193 	.word	0x08002193
 800200c:	08002193 	.word	0x08002193
 8002010:	08002193 	.word	0x08002193
 8002014:	080020dd 	.word	0x080020dd
 8002018:	08002193 	.word	0x08002193
 800201c:	08002193 	.word	0x08002193
 8002020:	08002193 	.word	0x08002193
 8002024:	08002137 	.word	0x08002137
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 0102 	bic.w	r1, r3, #2
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	6852      	ldr	r2, [r2, #4]
 800206c:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0208 	orr.w	r2, r2, #8
 800207c:	619a      	str	r2, [r3, #24]

			break;
 800207e:	e089      	b.n	8002194 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0210 	bic.w	r2, r2, #16
 800208e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f023 0120 	bic.w	r1, r3, #32
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	011a      	lsls	r2, r3, #4
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	6852      	ldr	r2, [r2, #4]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d8:	619a      	str	r2, [r3, #24]

			break;
 80020da:	e05b      	b.n	8002194 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ea:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	021a      	lsls	r2, r3, #8
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	6852      	ldr	r2, [r2, #4]
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	61da      	str	r2, [r3, #28]

			break;
 8002134:	e02e      	b.n	8002194 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002144:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	021a      	lsls	r2, r3, #8
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	031a      	lsls	r2, r3, #12
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	6852      	ldr	r2, [r2, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	61da      	str	r2, [r3, #28]

			break;
 8002190:	e000      	b.n	8002194 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8002192:	bf00      	nop
	}
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d157      	bne.n	8002262 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <TIM_PeripheralClockControl+0x180>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d106      	bne.n	80021c8 <TIM_PeripheralClockControl+0x28>
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a59      	ldr	r2, [pc, #356]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c4:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 80021c6:	e0a6      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d106      	bne.n	80021de <TIM_PeripheralClockControl+0x3e>
 80021d0:	4b54      	ldr	r3, [pc, #336]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	61d3      	str	r3, [r2, #28]
}
 80021dc:	e09b      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <TIM_PeripheralClockControl+0x188>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d106      	bne.n	80021f4 <TIM_PeripheralClockControl+0x54>
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	61d3      	str	r3, [r2, #28]
}
 80021f2:	e090      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a4d      	ldr	r2, [pc, #308]	; (800232c <TIM_PeripheralClockControl+0x18c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d106      	bne.n	800220a <TIM_PeripheralClockControl+0x6a>
 80021fc:	4b49      	ldr	r3, [pc, #292]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	61d3      	str	r3, [r2, #28]
}
 8002208:	e085      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a48      	ldr	r2, [pc, #288]	; (8002330 <TIM_PeripheralClockControl+0x190>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d106      	bne.n	8002220 <TIM_PeripheralClockControl+0x80>
 8002212:	4b44      	ldr	r3, [pc, #272]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a43      	ldr	r2, [pc, #268]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	61d3      	str	r3, [r2, #28]
}
 800221e:	e07a      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a44      	ldr	r2, [pc, #272]	; (8002334 <TIM_PeripheralClockControl+0x194>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d106      	bne.n	8002236 <TIM_PeripheralClockControl+0x96>
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	61d3      	str	r3, [r2, #28]
}
 8002234:	e06f      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <TIM_PeripheralClockControl+0x198>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d106      	bne.n	800224c <TIM_PeripheralClockControl+0xac>
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a38      	ldr	r2, [pc, #224]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	61d3      	str	r3, [r2, #28]
}
 800224a:	e064      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <TIM_PeripheralClockControl+0x19c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d160      	bne.n	8002316 <TIM_PeripheralClockControl+0x176>
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a32      	ldr	r2, [pc, #200]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800225a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225e:	6193      	str	r3, [r2, #24]
}
 8002260:	e059      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d156      	bne.n	8002316 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <TIM_PeripheralClockControl+0x180>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d106      	bne.n	800227e <TIM_PeripheralClockControl+0xde>
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800227a:	6193      	str	r3, [r2, #24]
}
 800227c:	e04b      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002284:	d106      	bne.n	8002294 <TIM_PeripheralClockControl+0xf4>
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	61d3      	str	r3, [r2, #28]
}
 8002292:	e040      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a24      	ldr	r2, [pc, #144]	; (8002328 <TIM_PeripheralClockControl+0x188>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d106      	bne.n	80022aa <TIM_PeripheralClockControl+0x10a>
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a20      	ldr	r2, [pc, #128]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022a2:	f023 0302 	bic.w	r3, r3, #2
 80022a6:	61d3      	str	r3, [r2, #28]
}
 80022a8:	e035      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <TIM_PeripheralClockControl+0x18c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d106      	bne.n	80022c0 <TIM_PeripheralClockControl+0x120>
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	61d3      	str	r3, [r2, #28]
}
 80022be:	e02a      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <TIM_PeripheralClockControl+0x190>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d106      	bne.n	80022d6 <TIM_PeripheralClockControl+0x136>
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022ce:	f023 0308 	bic.w	r3, r3, #8
 80022d2:	61d3      	str	r3, [r2, #28]
}
 80022d4:	e01f      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <TIM_PeripheralClockControl+0x194>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d106      	bne.n	80022ec <TIM_PeripheralClockControl+0x14c>
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022e4:	f023 0310 	bic.w	r3, r3, #16
 80022e8:	61d3      	str	r3, [r2, #28]
}
 80022ea:	e014      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <TIM_PeripheralClockControl+0x198>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d106      	bne.n	8002302 <TIM_PeripheralClockControl+0x162>
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 80022fa:	f023 0320 	bic.w	r3, r3, #32
 80022fe:	61d3      	str	r3, [r2, #28]
}
 8002300:	e009      	b.n	8002316 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <TIM_PeripheralClockControl+0x19c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d105      	bne.n	8002316 <TIM_PeripheralClockControl+0x176>
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <TIM_PeripheralClockControl+0x184>)
 8002310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002314:	6193      	str	r3, [r2, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800
 8002330:	40000c00 	.word	0x40000c00
 8002334:	40001000 	.word	0x40001000
 8002338:	40001400 	.word	0x40001400
 800233c:	40013400 	.word	0x40013400

08002340 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d108      	bne.n	8002362 <TIM_PWM_Start+0x22>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	e022      	b.n	80023a8 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d108      	bne.n	800237a <TIM_PWM_Start+0x3a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0210 	orr.w	r2, r2, #16
 8002376:	621a      	str	r2, [r3, #32]
 8002378:	e016      	b.n	80023a8 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d108      	bne.n	8002392 <TIM_PWM_Start+0x52>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	e00a      	b.n	80023a8 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d107      	bne.n	80023a8 <TIM_PWM_Start+0x68>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023a6:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <TIM_IRQHandling+0x3e>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <TIM_IRQHandling+0x48>)
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <TIM_IRQHandling+0x48>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f002 f8c3 	bl	8004598 <TIM_PeriodElapsedCallback>
	}
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000

08002420 <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f001 fcad 	bl	8003d8c <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f8db 	bl	80025f4 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800245e:	f023 030c 	bic.w	r3, r3, #12
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	430b      	orrs	r3, r1
 800246a:	60d3      	str	r3, [r2, #12]
	config = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	430a      	orrs	r2, r1
 800248c:	611a      	str	r2, [r3, #16]
	config = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	615a      	str	r2, [r3, #20]
	config = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 f8b6 	bl	8002630 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f892 	bl	80025f4 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d136      	bne.n	8002560 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a39      	ldr	r2, [pc, #228]	; (80025dc <USART_PeripheralClockControl+0xfc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d106      	bne.n	8002508 <USART_PeripheralClockControl+0x28>
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a38      	ldr	r2, [pc, #224]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 8002506:	e064      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <USART_PeripheralClockControl+0x104>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d106      	bne.n	800251e <USART_PeripheralClockControl+0x3e>
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	61d3      	str	r3, [r2, #28]
}
 800251c:	e059      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <USART_PeripheralClockControl+0x108>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d106      	bne.n	8002534 <USART_PeripheralClockControl+0x54>
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	61d3      	str	r3, [r2, #28]
}
 8002532:	e04e      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a2d      	ldr	r2, [pc, #180]	; (80025ec <USART_PeripheralClockControl+0x10c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d106      	bne.n	800254a <USART_PeripheralClockControl+0x6a>
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002546:	61d3      	str	r3, [r2, #28]
}
 8002548:	e043      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <USART_PeripheralClockControl+0x110>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d13f      	bne.n	80025d2 <USART_PeripheralClockControl+0xf2>
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255c:	61d3      	str	r3, [r2, #28]
}
 800255e:	e038      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d135      	bne.n	80025d2 <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <USART_PeripheralClockControl+0xfc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d106      	bne.n	800257c <USART_PeripheralClockControl+0x9c>
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002578:	6193      	str	r3, [r2, #24]
}
 800257a:	e02a      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <USART_PeripheralClockControl+0x104>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d106      	bne.n	8002592 <USART_PeripheralClockControl+0xb2>
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 800258a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800258e:	61d3      	str	r3, [r2, #28]
}
 8002590:	e01f      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <USART_PeripheralClockControl+0x108>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d106      	bne.n	80025a8 <USART_PeripheralClockControl+0xc8>
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	61d3      	str	r3, [r2, #28]
}
 80025a6:	e014      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <USART_PeripheralClockControl+0x10c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d106      	bne.n	80025be <USART_PeripheralClockControl+0xde>
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80025b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025ba:	61d3      	str	r3, [r2, #28]
}
 80025bc:	e009      	b.n	80025d2 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <USART_PeripheralClockControl+0x110>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d105      	bne.n	80025d2 <USART_PeripheralClockControl+0xf2>
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <USART_PeripheralClockControl+0x100>)
 80025cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025d0:	61d3      	str	r3, [r2, #28]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40013800 	.word	0x40013800
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40004400 	.word	0x40004400
 80025e8:	40004800 	.word	0x40004800
 80025ec:	40004c00 	.word	0x40004c00
 80025f0:	40005000 	.word	0x40005000

080025f4 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <USART_PeripheralControl+0x20>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 8002612:	e008      	b.n	8002626 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <USART_PeripheralControl+0x32>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60da      	str	r2, [r3, #12]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <USART_SetBaudRate+0xbc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d104      	bne.n	800264c <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff fbb8 	bl	8001db8 <RCC_GetPCLKxValue>
 8002648:	61f8      	str	r0, [r7, #28]
 800264a:	e003      	b.n	8002654 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff fbb3 	bl	8001db8 <RCC_GetPCLKxValue>
 8002652:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 8002654:	69f8      	ldr	r0, [r7, #28]
 8002656:	f7fe fafd 	bl	8000c54 <__aeabi_ui2f>
 800265a:	4604      	mov	r4, r0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe faf7 	bl	8000c54 <__aeabi_ui2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	4620      	mov	r0, r4
 800266c:	f7fe fbfe 	bl	8000e6c <__aeabi_fdiv>
 8002670:	4603      	mov	r3, r0
 8002672:	491f      	ldr	r1, [pc, #124]	; (80026f0 <USART_SetBaudRate+0xc0>)
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb45 	bl	8000d04 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fc91 	bl	8000fa4 <__aeabi_f2uiz>
 8002682:	4603      	mov	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <USART_SetBaudRate+0xc4>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	0089      	lsls	r1, r1, #2
 800269e:	440b      	add	r3, r1
 80026a0:	4619      	mov	r1, r3
 80026a2:	0088      	lsls	r0, r1, #2
 80026a4:	4619      	mov	r1, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	440b      	add	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <USART_SetBaudRate+0xc4>)
 80026ba:	fb82 1203 	smull	r1, r2, r2, r3
 80026be:	1152      	asrs	r2, r2, #5
 80026c0:	17db      	asrs	r3, r3, #31
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	0119      	lsls	r1, r3, #4
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	430b      	orrs	r3, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3724      	adds	r7, #36	; 0x24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	40013800 	.word	0x40013800
 80026f0:	42c80000 	.word	0x42c80000
 80026f4:	51eb851f 	.word	0x51eb851f

080026f8 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a17      	ldr	r2, [pc, #92]	; (800277c <UART_Transmit_DMA+0x84>)
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <UART_Transmit_DMA+0x88>)
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <UART_Transmit_DMA+0x8c>)
 800272e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	2200      	movs	r2, #0
 8002736:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	461a      	mov	r2, r3
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	f7fe fcdf 	bl	8001112 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002772:	615a      	str	r2, [r3, #20]
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	080027bf 	.word	0x080027bf
 8002780:	080027db 	.word	0x080027db
 8002784:	080027f7 	.word	0x080027f7

08002788 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff ffdb 	bl	8002788 <UART_TxCpltCallback>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff ffd6 	bl	800279a <UART_TxHalfCpltCallback>
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff ffd1 	bl	80027ac <UART_ErrorCallback>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f001 fc30 	bl	8004080 <BLDC_MspInit>

}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002836:	3b01      	subs	r3, #1
 8002838:	2b05      	cmp	r3, #5
 800283a:	d87b      	bhi.n	8002934 <BLDC_Drive+0x10c>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <BLDC_Drive+0x1c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002911 	.word	0x08002911
 8002848:	08002881 	.word	0x08002881
 800284c:	0800285d 	.word	0x0800285d
 8002850:	080028c9 	.word	0x080028c9
 8002854:	080028ed 	.word	0x080028ed
 8002858:	080028a5 	.word	0x080028a5
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <BLDC_Drive+0x46>
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fb0a 	bl	8002e80 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 800286c:	e064      	b.n	8002938 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	2b01      	cmp	r3, #1
 8002876:	d15f      	bne.n	8002938 <BLDC_Drive+0x110>
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fa59 	bl	8002d30 <BLDC_Step2>
			break;
 800287e:	e05b      	b.n	8002938 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <BLDC_Drive+0x6a>
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fac0 	bl	8002e10 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002890:	e054      	b.n	800293c <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002898:	2b01      	cmp	r3, #1
 800289a:	d14f      	bne.n	800293c <BLDC_Drive+0x114>
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fa0f 	bl	8002cc0 <BLDC_Step1>
			break;
 80028a2:	e04b      	b.n	800293c <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <BLDC_Drive+0x8e>
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa76 	bl	8002da0 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 80028b4:	e044      	b.n	8002940 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d13f      	bne.n	8002940 <BLDC_Drive+0x118>
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fb15 	bl	8002ef0 <BLDC_Step6>
			break;
 80028c6:	e03b      	b.n	8002940 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d103      	bne.n	80028da <BLDC_Drive+0xb2>
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa2c 	bl	8002d30 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 80028d8:	e034      	b.n	8002944 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d12f      	bne.n	8002944 <BLDC_Drive+0x11c>
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 facb 	bl	8002e80 <BLDC_Step5>
			break;
 80028ea:	e02b      	b.n	8002944 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <BLDC_Drive+0xd6>
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9e2 	bl	8002cc0 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 80028fc:	e024      	b.n	8002948 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002904:	2b01      	cmp	r3, #1
 8002906:	d11f      	bne.n	8002948 <BLDC_Drive+0x120>
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa81 	bl	8002e10 <BLDC_Step4>
			break;
 800290e:	e01b      	b.n	8002948 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <BLDC_Drive+0xfa>
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fae8 	bl	8002ef0 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002920:	e014      	b.n	800294c <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10f      	bne.n	800294c <BLDC_Drive+0x124>
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa37 	bl	8002da0 <BLDC_Step3>
			break;
 8002932:	e00b      	b.n	800294c <BLDC_Drive+0x124>
		}

		default :
			break;
 8002934:	bf00      	nop
 8002936:	e00a      	b.n	800294e <BLDC_Drive+0x126>
			break;
 8002938:	bf00      	nop
 800293a:	e008      	b.n	800294e <BLDC_Drive+0x126>
			break;
 800293c:	bf00      	nop
 800293e:	e006      	b.n	800294e <BLDC_Drive+0x126>
			break;
 8002940:	bf00      	nop
 8002942:	e004      	b.n	800294e <BLDC_Drive+0x126>
			break;
 8002944:	bf00      	nop
 8002946:	e002      	b.n	800294e <BLDC_Drive+0x126>
			break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <BLDC_Drive+0x126>
			break;
 800294c:	bf00      	nop
	}
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop

08002958 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	b29b      	uxth	r3, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 800297e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fd4e 	bl	8000424 <__aeabi_i2d>
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <BLDC_Get_Speed+0x94>)
 800298e:	f7fd fdb3 	bl	80004f8 <__aeabi_dmul>
 8002992:	4603      	mov	r3, r0
 8002994:	460c      	mov	r4, r1
 8002996:	4625      	mov	r5, r4
 8002998:	461c      	mov	r4, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a8:	fb03 f302 	mul.w	r3, r3, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fd39 	bl	8000424 <__aeabi_i2d>
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <BLDC_Get_Speed+0x98>)
 80029b8:	f7fd fd9e 	bl	80004f8 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fec2 	bl	800074c <__aeabi_ddiv>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4618      	mov	r0, r3
 80029ce:	4621      	mov	r1, r4
 80029d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d4:	f7fd feba 	bl	800074c <__aeabi_ddiv>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	404e0000 	.word	0x404e0000
 80029f0:	40080000 	.word	0x40080000

080029f4 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a02:	3b01      	subs	r3, #1
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	f200 8093 	bhi.w	8002b30 <BLDC_Get_Position+0x13c>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <BLDC_Get_Position+0x1c>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002b05 	.word	0x08002b05
 8002a14:	08002a55 	.word	0x08002a55
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002aad 	.word	0x08002aad
 8002a20:	08002ad9 	.word	0x08002ad9
 8002a24:	08002a81 	.word	0x08002a81
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d105      	bne.n	8002a3e <BLDC_Get_Position+0x4a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002a3c:	e07a      	b.n	8002b34 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d175      	bne.n	8002b34 <BLDC_Get_Position+0x140>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a52:	e06f      	b.n	8002b34 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d105      	bne.n	8002a6a <BLDC_Get_Position+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002a68:	e066      	b.n	8002b38 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d161      	bne.n	8002b38 <BLDC_Get_Position+0x144>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a7e:	e05b      	b.n	8002b38 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d105      	bne.n	8002a96 <BLDC_Get_Position+0xa2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002a94:	e052      	b.n	8002b3c <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d14d      	bne.n	8002b3c <BLDC_Get_Position+0x148>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002aaa:	e047      	b.n	8002b3c <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d105      	bne.n	8002ac2 <BLDC_Get_Position+0xce>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002ac0:	e03e      	b.n	8002b40 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d139      	bne.n	8002b40 <BLDC_Get_Position+0x14c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	1e5a      	subs	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002ad6:	e033      	b.n	8002b40 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <BLDC_Get_Position+0xfa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002aec:	e02a      	b.n	8002b44 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d125      	bne.n	8002b44 <BLDC_Get_Position+0x150>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002b02:	e01f      	b.n	8002b44 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d105      	bne.n	8002b1a <BLDC_Get_Position+0x126>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002b18:	e016      	b.n	8002b48 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d111      	bne.n	8002b48 <BLDC_Get_Position+0x154>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002b2e:	e00b      	b.n	8002b48 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002b30:	bf00      	nop
 8002b32:	e00a      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b34:	bf00      	nop
 8002b36:	e008      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b38:	bf00      	nop
 8002b3a:	e006      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b3c:	bf00      	nop
 8002b3e:	e004      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b40:	bf00      	nop
 8002b42:	e002      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <BLDC_Get_Position+0x156>
			break;
 8002b48:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fc68 	bl	8000424 <__aeabi_i2d>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002b5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	f7fd fcc9 	bl	80004f8 <__aeabi_dmul>
 8002b66:	4603      	mov	r3, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd90      	pop	{r4, r7, pc}

08002b84 <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6858      	ldr	r0, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2200      	movs	r2, #0
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe ffe9 	bl	8001b70 <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0210 	bic.w	r2, r2, #16
 8002bc4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd8:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f000 ff0c 	bl	80039f8 <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002be0:	f107 0308 	add.w	r3, r7, #8
 8002be4:	2210      	movs	r2, #16
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 ff01 	bl	80049f0 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f107 0208 	add.w	r2, r7, #8
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fd70 	bl	80016f0 <GPIO_Init>
	Delay_ms(10);
 8002c10:	200a      	movs	r0, #10
 8002c12:	f000 fef1 	bl	80039f8 <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6898      	ldr	r0, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fe ffa4 	bl	8001b70 <GPIO_WritePin>
	Delay_ms(10);
 8002c28:	200a      	movs	r0, #10
 8002c2a:	f000 fee5 	bl	80039f8 <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6898      	ldr	r0, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fe ff98 	bl	8001b70 <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	2210      	movs	r2, #16
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fed1 	bl	80049f0 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f107 0208 	add.w	r2, r7, #8
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fd40 	bl	80016f0 <GPIO_Init>
	Delay_ms(10);
 8002c70:	200a      	movs	r0, #10
 8002c72:	f000 fec1 	bl	80039f8 <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0210 	orr.w	r2, r2, #16
 8002c9c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb0:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002cb2:	200a      	movs	r0, #10
 8002cb4:	f000 fea0 	bl	80039f8 <Delay_ms>
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4812      	ldr	r0, [pc, #72]	; (8002d2c <BLDC_Step1+0x6c>)
 8002ce2:	f7fe ff63 	bl	8001bac <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0210 	orr.w	r2, r2, #16
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40010c00 	.word	0x40010c00

08002d30 <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b299      	uxth	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4812      	ldr	r0, [pc, #72]	; (8002d9c <BLDC_Step2+0x6c>)
 8002d52:	f7fe ff2b 	bl	8001bac <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0210 	orr.w	r2, r2, #16
 8002d90:	621a      	str	r2, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40010c00 	.word	0x40010c00

08002da0 <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	b299      	uxth	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4812      	ldr	r0, [pc, #72]	; (8002e0c <BLDC_Step3+0x6c>)
 8002dc2:	f7fe fef3 	bl	8001bac <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dec:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	621a      	str	r2, [r3, #32]
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40010c00 	.word	0x40010c00

08002e10 <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	b299      	uxth	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4812      	ldr	r0, [pc, #72]	; (8002e7c <BLDC_Step4+0x6c>)
 8002e32:	f7fe febb 	bl	8001bac <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40010c00 	.word	0x40010c00

08002e80 <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4812      	ldr	r0, [pc, #72]	; (8002eec <BLDC_Step5+0x6c>)
 8002ea2:	f7fe fe83 	bl	8001bac <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a1a      	ldr	r2, [r3, #32]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40010c00 	.word	0x40010c00

08002ef0 <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	b299      	uxth	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4812      	ldr	r0, [pc, #72]	; (8002f5c <BLDC_Step6+0x6c>)
 8002f12:	f7fe fe4b 	bl	8001bac <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0210 	bic.w	r2, r2, #16
 8002f3c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40010c00 	.word	0x40010c00

08002f60 <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 8002f6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f74:	f7fd f908 	bl	8000188 <__aeabi_dsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002f8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4623      	mov	r3, r4
 8002f96:	f7fd faaf 	bl	80004f8 <__aeabi_dmul>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002fb6:	f7fd fa9f 	bl	80004f8 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc6:	f7fd fa97 	bl	80004f8 <__aeabi_dmul>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4620      	mov	r0, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f7fd f8db 	bl	800018c <__adddf3>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8002ff2:	f7fd f8c9 	bl	8000188 <__aeabi_dsub>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	f7fd fa7b 	bl	80004f8 <__aeabi_dmul>
 8003002:	4603      	mov	r3, r0
 8003004:	460c      	mov	r4, r1
 8003006:	4618      	mov	r0, r3
 8003008:	4621      	mov	r1, r4
 800300a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800300e:	f7fd fb9d 	bl	800074c <__aeabi_ddiv>
 8003012:	4603      	mov	r3, r0
 8003014:	460c      	mov	r4, r1
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8003028:	e9d4 3400 	ldrd	r3, r4, [r4]
 800302c:	461a      	mov	r2, r3
 800302e:	4623      	mov	r3, r4
 8003030:	f7fd f8ac 	bl	800018c <__adddf3>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	4618      	mov	r0, r3
 800303a:	4621      	mov	r1, r4
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8003042:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003046:	461a      	mov	r2, r3
 8003048:	4623      	mov	r3, r4
 800304a:	f7fd f89f 	bl	800018c <__adddf3>
 800304e:	4603      	mov	r3, r0
 8003050:	460c      	mov	r4, r1
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800305e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}

08003070 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af04      	add	r7, sp, #16
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003088:	e9d4 3400 	ldrd	r3, r4, [r4]
 800308c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003090:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003094:	e9cd 3400 	strd	r3, r4, [sp]
 8003098:	462a      	mov	r2, r5
 800309a:	4633      	mov	r3, r6
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ff5f 	bl	8002f60 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f7fd fca8 	bl	8000a04 <__aeabi_dcmpge>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <BLDC_SpeedPID+0x54>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80030c2:	e00f      	b.n	80030e4 <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f7fd fc83 	bl	80009dc <__aeabi_dcmplt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <BLDC_SpeedPID+0x74>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80030ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	4621      	mov	r1, r4
 80030f2:	f7fd fcb1 	bl	8000a58 <__aeabi_d2iz>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bfb8      	it	lt
 80030fc:	425b      	neglt	r3, r3
 80030fe:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	2b5f      	cmp	r3, #95	; 0x5f
 8003104:	d901      	bls.n	800310a <BLDC_SpeedPID+0x9a>
 8003106:	235f      	movs	r3, #95	; 0x5f
 8003108:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f001 fbfd 	bl	800490e <SetPwmDuty>
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311c <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	b08f      	sub	sp, #60	; 0x3c
 8003122:	af04      	add	r7, sp, #16
 8003124:	6278      	str	r0, [r7, #36]	; 0x24
 8003126:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 800312a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003130:	f000 f8b2 	bl	8003298 <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	//BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 8003140:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003144:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003148:	e9cd 1200 	strd	r1, r2, [sp]
 800314c:	462a      	mov	r2, r5
 800314e:	4633      	mov	r3, r6
 8003150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003152:	f7ff ff05 	bl	8002f60 <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <BLDC_PositionPID+0x174>)
 800315e:	cb18      	ldmia	r3, {r3, r4}
 8003160:	461a      	mov	r2, r3
 8003162:	4623      	mov	r3, r4
 8003164:	f7fd fc58 	bl	8000a18 <__aeabi_dcmpgt>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <BLDC_PositionPID+0x5e>
 800316e:	4b48      	ldr	r3, [pc, #288]	; (8003290 <BLDC_PositionPID+0x174>)
 8003170:	cb18      	ldmia	r3, {r3, r4}
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 8003178:	e017      	b.n	80031aa <BLDC_PositionPID+0x8e>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <BLDC_PositionPID+0x174>)
 8003182:	cb18      	ldmia	r3, {r3, r4}
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003190:	f7fd fc24 	bl	80009dc <__aeabi_dcmplt>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <BLDC_PositionPID+0x8e>
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <BLDC_PositionPID+0x174>)
 800319c:	cb18      	ldmia	r3, {r3, r4}
 800319e:	469a      	mov	sl, r3
 80031a0:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	f7fd fc24 	bl	8000a04 <__aeabi_dcmpge>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d024      	beq.n	800320c <BLDC_PositionPID+0xf0>
	{
		pBLDCHandle->RotationDir = CW;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <BLDC_PositionPID+0x178>)
 80031d2:	cb18      	ldmia	r3, {r3, r4}
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd fc00 	bl	80009dc <__aeabi_dcmplt>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <BLDC_PositionPID+0xd0>
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <BLDC_PositionPID+0x178>)
 80031e4:	cb18      	ldmia	r3, {r3, r4}
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80031f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	4621      	mov	r1, r4
 80031fa:	f7fd fc55 	bl	8000aa8 <__aeabi_d2uiz>
 80031fe:	4603      	mov	r3, r0
 8003200:	b29b      	uxth	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003206:	f001 fb82 	bl	800490e <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 800320a:	e03b      	b.n	8003284 <BLDC_PositionPID+0x168>
	else if(pBLDCHandle->PwmPID < 0)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f7fd fbdf 	bl	80009dc <__aeabi_dcmplt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d100      	bne.n	8003226 <BLDC_PositionPID+0x10a>
}
 8003224:	e02e      	b.n	8003284 <BLDC_PositionPID+0x168>
		pBLDCHandle->RotationDir = CCW;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <BLDC_PositionPID+0x178>)
 8003236:	cb18      	ldmia	r3, {r3, r4}
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003244:	f7fd fbe8 	bl	8000a18 <__aeabi_dcmpgt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <BLDC_PositionPID+0x142>
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <BLDC_PositionPID+0x178>)
 8003250:	cb18      	ldmia	r3, {r3, r4}
 8003252:	4698      	mov	r8, r3
 8003254:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003264:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003274:	f7fd fc18 	bl	8000aa8 <__aeabi_d2uiz>
 8003278:	4603      	mov	r3, r0
 800327a:	b29b      	uxth	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003280:	f001 fb45 	bl	800490e <SetPwmDuty>
}
 8003284:	bf00      	nop
 8003286:	372c      	adds	r7, #44	; 0x2c
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	20000000 	.word	0x20000000
 8003294:	200001f8 	.word	0x200001f8

08003298 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800329c:	b08f      	sub	sp, #60	; 0x3c
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80032b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4623      	mov	r3, r4
 80032ba:	f7fc ff65 	bl	8000188 <__aeabi_dsub>
 80032be:	4603      	mov	r3, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80032d2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	4623      	mov	r3, r4
 80032da:	f7fd f90d 	bl	80004f8 <__aeabi_dmul>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	4618      	mov	r0, r3
 80032e4:	4621      	mov	r1, r4
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4bb4      	ldr	r3, [pc, #720]	; (80035bc <BLDC_CalculateTrajectoryPosition+0x324>)
 80032ec:	f7fd f904 	bl	80004f8 <__aeabi_dmul>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4618      	mov	r0, r3
 80032f6:	4621      	mov	r1, r4
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80032fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	f7fd fa21 	bl	800074c <__aeabi_ddiv>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800331e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	f7fc ff2f 	bl	8000188 <__aeabi_dsub>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333e:	f7fd fb61 	bl	8000a04 <__aeabi_dcmpge>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <BLDC_CalculateTrajectoryPosition+0xb6>
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
 800334c:	e00c      	b.n	8003368 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800335a:	f7fd fb3f 	bl	80009dc <__aeabi_dcmplt>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <BLDC_CalculateTrajectoryPosition+0xd0>
 8003364:	2301      	movs	r3, #1
 8003366:	637b      	str	r3, [r7, #52]	; 0x34


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	4b93      	ldr	r3, [pc, #588]	; (80035bc <BLDC_CalculateTrajectoryPosition+0x324>)
 800336e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003372:	f7fd f8c1 	bl	80004f8 <__aeabi_dmul>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003382:	f7fd fb2b 	bl	80009dc <__aeabi_dcmplt>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d029      	beq.n	80033e0 <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003398:	e9d4 3400 	ldrd	r3, r4, [r4]
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc fef2 	bl	8000188 <__aeabi_dsub>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	461a      	mov	r2, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033b0:	f7fd fb32 	bl	8000a18 <__aeabi_dcmpgt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <BLDC_CalculateTrajectoryPosition+0x128>
 80033ba:	2301      	movs	r3, #1
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	e049      	b.n	8003454 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 80033c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033c8:	f7fd fb26 	bl	8000a18 <__aeabi_dcmpgt>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <BLDC_CalculateTrajectoryPosition+0x140>
 80033d2:	2300      	movs	r3, #0
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
 80033d6:	e03d      	b.n	8003454 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 80033d8:	f04f 33ff 	mov.w	r3, #4294967295
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 80033de:	e039      	b.n	8003454 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <BLDC_CalculateTrajectoryPosition+0x324>)
 80033e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033ea:	f7fd f885 	bl	80004f8 <__aeabi_dmul>
 80033ee:	4603      	mov	r3, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033fa:	f7fd fb03 	bl	8000a04 <__aeabi_dcmpge>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d027      	beq.n	8003454 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003410:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	f7fc feb6 	bl	8000188 <__aeabi_dsub>
 800341c:	4603      	mov	r3, r0
 800341e:	460c      	mov	r4, r1
 8003420:	4698      	mov	r8, r3
 8003422:	46a1      	mov	r9, r4
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <BLDC_CalculateTrajectoryPosition+0x324>)
 800342a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800342e:	f7fd f863 	bl	80004f8 <__aeabi_dmul>
 8003432:	4603      	mov	r3, r0
 8003434:	460c      	mov	r4, r1
 8003436:	461a      	mov	r2, r3
 8003438:	4623      	mov	r3, r4
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	f7fd facd 	bl	80009dc <__aeabi_dcmplt>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <BLDC_CalculateTrajectoryPosition+0x1b6>
 8003448:	2301      	movs	r3, #1
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
 800344c:	e002      	b.n	8003454 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
	}


	switch (accelDir)
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	2b00      	cmp	r3, #0
 8003458:	d012      	beq.n	8003480 <BLDC_CalculateTrajectoryPosition+0x1e8>
 800345a:	2b01      	cmp	r3, #1
 800345c:	d003      	beq.n	8003466 <BLDC_CalculateTrajectoryPosition+0x1ce>
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d015      	beq.n	8003490 <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 8003464:	e028      	b.n	80034b8 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800346c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003470:	f7fd f842 	bl	80004f8 <__aeabi_dmul>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800347e:	e01b      	b.n	80034b8 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f04f 0400 	mov.w	r4, #0
 800348a:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800348e:	e013      	b.n	80034b8 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003496:	e9d4 3400 	ldrd	r3, r4, [r4]
 800349a:	461d      	mov	r5, r3
 800349c:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80034a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a4:	4628      	mov	r0, r5
 80034a6:	4631      	mov	r1, r6
 80034a8:	f7fd f826 	bl	80004f8 <__aeabi_dmul>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80034b6:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80034c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	f7fc fe5e 	bl	800018c <__adddf3>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <BLDC_CalculateTrajectoryPosition+0x24e>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d06d      	beq.n	80035c0 <BLDC_CalculateTrajectoryPosition+0x328>

			break;
		}

		default :
			break;
 80034e4:	e0c2      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x3d4>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80034f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4623      	mov	r3, r4
 80034fa:	f7fd fa83 	bl	8000a04 <__aeabi_dcmpge>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	f04f 0400 	mov.w	r4, #0
 800351c:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003526:	e9d4 3400 	ldrd	r3, r4, [r4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 8003530:	e09c      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x3d4>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <BLDC_CalculateTrajectoryPosition+0x324>)
 8003538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800353c:	f7fc ffdc 	bl	80004f8 <__aeabi_dmul>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	461d      	mov	r5, r3
 8003546:	4626      	mov	r6, r4
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	f7fc fe1b 	bl	800018c <__adddf3>
 8003556:	4603      	mov	r3, r0
 8003558:	460c      	mov	r4, r1
 800355a:	4618      	mov	r0, r3
 800355c:	4621      	mov	r1, r4
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003564:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003568:	461a      	mov	r2, r3
 800356a:	4623      	mov	r3, r4
 800356c:	f7fc fe0c 	bl	8000188 <__aeabi_dsub>
 8003570:	4603      	mov	r3, r0
 8003572:	460c      	mov	r4, r1
 8003574:	461a      	mov	r2, r3
 8003576:	4623      	mov	r3, r4
 8003578:	4628      	mov	r0, r5
 800357a:	4631      	mov	r1, r6
 800357c:	f7fc ffbc 	bl	80004f8 <__aeabi_dmul>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	e9c7 3404 	strd	r3, r4, [r7, #16]
				if(dtTrjPosition >= 0)
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003594:	f7fd fa36 	bl	8000a04 <__aeabi_dcmpge>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d100      	bne.n	80035a0 <BLDC_CalculateTrajectoryPosition+0x308>
			break;
 800359e:	e065      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x3d4>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80035a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035aa:	f7fc fdef 	bl	800018c <__adddf3>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 80035b8:	e058      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x3d4>
 80035ba:	bf00      	nop
 80035bc:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80035cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	f7fd fa0c 	bl	80009f0 <__aeabi_dcmple>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <BLDC_CalculateTrajectoryPosition+0x374>
				pBLDCHandle->TrjCurSpeed = 0;
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	f04f 0400 	mov.w	r4, #0
 80035e8:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003600:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 800360a:	e02e      	b.n	800366a <BLDC_CalculateTrajectoryPosition+0x3d2>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <BLDC_CalculateTrajectoryPosition+0x3e0>)
 8003618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800361c:	f7fc ff6c 	bl	80004f8 <__aeabi_dmul>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4690      	mov	r8, r2
 8003626:	4699      	mov	r9, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	f7fc fdab 	bl	800018c <__adddf3>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003644:	f7fc fda0 	bl	8000188 <__aeabi_dsub>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4640      	mov	r0, r8
 800364e:	4649      	mov	r1, r9
 8003650:	f7fc ff52 	bl	80004f8 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc fd96 	bl	800018c <__adddf3>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800366a:	bf00      	nop
	}
}
 800366c:	bf00      	nop
 800366e:	373c      	adds	r7, #60	; 0x3c
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003676:	bf00      	nop
 8003678:	3fe00000 	.word	0x3fe00000

0800367c <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
 8003686:	460b      	mov	r3, r1
 8003688:	71bb      	strb	r3, [r7, #6]
 800368a:	4613      	mov	r3, r2
 800368c:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800368e:	797b      	ldrb	r3, [r7, #5]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d11d      	bne.n	80036d0 <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	2b1f      	cmp	r3, #31
 8003698:	d80a      	bhi.n	80036b0 <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <NVIC_IRQConfig+0xcc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	79fa      	ldrb	r2, [r7, #7]
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4611      	mov	r1, r2
 80036a8:	4a27      	ldr	r2, [pc, #156]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036aa:	430b      	orrs	r3, r1
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e033      	b.n	8003718 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b3b      	cmp	r3, #59	; 0x3b
 80036b4:	d830      	bhi.n	8003718 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	79fa      	ldrb	r2, [r7, #7]
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4611      	mov	r1, r2
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6053      	str	r3, [r2, #4]
 80036ce:	e023      	b.n	8003718 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 80036d0:	797b      	ldrb	r3, [r7, #5]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d120      	bne.n	8003718 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b1f      	cmp	r3, #31
 80036da:	d80c      	bhi.n	80036f6 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e2:	79fa      	ldrb	r2, [r7, #7]
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ea:	4611      	mov	r1, r2
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036ee:	430b      	orrs	r3, r1
 80036f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036f4:	e010      	b.n	8003718 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b3b      	cmp	r3, #59	; 0x3b
 80036fa:	d80d      	bhi.n	8003718 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <NVIC_IRQConfig+0xcc>)
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003702:	79fa      	ldrb	r2, [r7, #7]
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4611      	mov	r1, r2
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <NVIC_IRQConfig+0xcc>)
 8003712:	430b      	orrs	r3, r1
 8003714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <NVIC_IRQConfig+0xcc>)
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	4413      	add	r3, r2
 800371e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8003722:	b2db      	uxtb	r3, r3
 8003724:	b25a      	sxtb	r2, r3
 8003726:	79bb      	ldrb	r3, [r7, #6]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	b25b      	sxtb	r3, r3
 800372c:	4313      	orrs	r3, r2
 800372e:	b259      	sxtb	r1, r3
 8003730:	4a05      	ldr	r2, [pc, #20]	; (8003748 <NVIC_IRQConfig+0xcc>)
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	4413      	add	r3, r2
 8003738:	460a      	mov	r2, r1
 800373a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100

0800374c <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b092      	sub	sp, #72	; 0x48
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	2228      	movs	r2, #40	; 0x28
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f001 f943 	bl	80049f0 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	2214      	movs	r2, #20
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f93c 	bl	80049f0 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 800377c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003780:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 800378c:	2302      	movs	r3, #2
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	3b10      	subs	r3, #16
 8003794:	2b38      	cmp	r3, #56	; 0x38
 8003796:	f200 8101 	bhi.w	800399c <SystemClock_Config+0x250>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <SystemClock_Config+0x54>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	08003885 	.word	0x08003885
 80037a4:	0800399d 	.word	0x0800399d
 80037a8:	0800399d 	.word	0x0800399d
 80037ac:	0800399d 	.word	0x0800399d
 80037b0:	0800399d 	.word	0x0800399d
 80037b4:	0800399d 	.word	0x0800399d
 80037b8:	0800399d 	.word	0x0800399d
 80037bc:	0800399d 	.word	0x0800399d
 80037c0:	080038a5 	.word	0x080038a5
 80037c4:	0800399d 	.word	0x0800399d
 80037c8:	0800399d 	.word	0x0800399d
 80037cc:	0800399d 	.word	0x0800399d
 80037d0:	0800399d 	.word	0x0800399d
 80037d4:	0800399d 	.word	0x0800399d
 80037d8:	0800399d 	.word	0x0800399d
 80037dc:	0800399d 	.word	0x0800399d
 80037e0:	080038c7 	.word	0x080038c7
 80037e4:	0800399d 	.word	0x0800399d
 80037e8:	0800399d 	.word	0x0800399d
 80037ec:	0800399d 	.word	0x0800399d
 80037f0:	0800399d 	.word	0x0800399d
 80037f4:	0800399d 	.word	0x0800399d
 80037f8:	0800399d 	.word	0x0800399d
 80037fc:	0800399d 	.word	0x0800399d
 8003800:	080038e9 	.word	0x080038e9
 8003804:	0800399d 	.word	0x0800399d
 8003808:	0800399d 	.word	0x0800399d
 800380c:	0800399d 	.word	0x0800399d
 8003810:	0800399d 	.word	0x0800399d
 8003814:	0800399d 	.word	0x0800399d
 8003818:	0800399d 	.word	0x0800399d
 800381c:	0800399d 	.word	0x0800399d
 8003820:	0800390d 	.word	0x0800390d
 8003824:	0800399d 	.word	0x0800399d
 8003828:	0800399d 	.word	0x0800399d
 800382c:	0800399d 	.word	0x0800399d
 8003830:	0800399d 	.word	0x0800399d
 8003834:	0800399d 	.word	0x0800399d
 8003838:	0800399d 	.word	0x0800399d
 800383c:	0800399d 	.word	0x0800399d
 8003840:	08003931 	.word	0x08003931
 8003844:	0800399d 	.word	0x0800399d
 8003848:	0800399d 	.word	0x0800399d
 800384c:	0800399d 	.word	0x0800399d
 8003850:	0800399d 	.word	0x0800399d
 8003854:	0800399d 	.word	0x0800399d
 8003858:	0800399d 	.word	0x0800399d
 800385c:	0800399d 	.word	0x0800399d
 8003860:	08003955 	.word	0x08003955
 8003864:	0800399d 	.word	0x0800399d
 8003868:	0800399d 	.word	0x0800399d
 800386c:	0800399d 	.word	0x0800399d
 8003870:	0800399d 	.word	0x0800399d
 8003874:	0800399d 	.word	0x0800399d
 8003878:	0800399d 	.word	0x0800399d
 800387c:	0800399d 	.word	0x0800399d
 8003880:	08003979 	.word	0x08003979
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003888:	230f      	movs	r3, #15
 800388a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388c:	2302      	movs	r3, #2
 800388e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80038a2:	e07c      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 80038a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038aa:	230f      	movs	r3, #15
 80038ac:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ae:	2302      	movs	r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80038c4:	e06b      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 80038c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038cc:	230f      	movs	r3, #15
 80038ce:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d0:	2302      	movs	r3, #2
 80038d2:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80038e6:	e05a      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 80038e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80038ec:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038ee:	230f      	movs	r3, #15
 80038f0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f2:	2302      	movs	r3, #2
 80038f4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 80038fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038fe:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800390a:	e048      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 800390c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003910:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003912:	230f      	movs	r3, #15
 8003914:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003916:	2302      	movs	r3, #2
 8003918:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 800391e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003922:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800392e:	e036      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003930:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003934:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003936:	230f      	movs	r3, #15
 8003938:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800393a:	2302      	movs	r3, #2
 800393c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003946:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 800394c:	2302      	movs	r3, #2
 800394e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003952:	e024      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003954:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003958:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800395a:	230f      	movs	r3, #15
 800395c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800395e:	2302      	movs	r3, #2
 8003960:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8003966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800396a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003970:	2302      	movs	r3, #2
 8003972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003976:	e012      	b.n	800399e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8003978:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800397c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800397e:	230f      	movs	r3, #15
 8003980:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003982:	2302      	movs	r3, #2
 8003984:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 800398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003994:	2302      	movs	r3, #2
 8003996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800399a:	e000      	b.n	800399e <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 800399c:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe f938 	bl	8001c18 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 80039a8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f980 	bl	8001cb8 <RCC_ClockConfig>
}
 80039b8:	bf00      	nop
 80039ba:	3748      	adds	r7, #72	; 0x48
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <Delay_us>:
//}



void Delay_us(uint32_t time_us)
{
 80039c0:	b4b0      	push	{r4, r5, r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 80039c8:	2400      	movs	r4, #0
 80039ca:	e006      	b.n	80039da <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 80039cc:	2500      	movs	r5, #0
 80039ce:	e001      	b.n	80039d4 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 80039d0:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 80039d2:	3501      	adds	r5, #1
 80039d4:	2d4c      	cmp	r5, #76	; 0x4c
 80039d6:	d9fb      	bls.n	80039d0 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 80039d8:	3401      	adds	r4, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <Delay_us+0x34>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d3f1      	bcc.n	80039cc <Delay_us+0xc>
		}
	}
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bcb0      	pop	{r4, r5, r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	cccccccd 	.word	0xcccccccd

080039f8 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ffd8 	bl	80039c0 <Delay_us>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <TIM6_IRQHandler+0x10>)
 8003a1e:	f7fe fcd9 	bl	80023d4 <TIM_IRQHandling>
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200004a8 	.word	0x200004a8

08003a2c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <EXTI9_5_IRQHandler+0x14>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe f8d3 	bl	8001be0 <EXTI_IRQHandling>
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000280 	.word	0x20000280

08003a44 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART3Handle.hdmatx);
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <DMA1_Channel2_IRQHandler+0x14>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fb8b 	bl	8001174 <DMA_IRQ_Handling>
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000378 	.word	0x20000378

08003a68 <main>:

#include "main.h"


int main(void)
{
 8003a68:	b598      	push	{r3, r4, r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003a6c:	2048      	movs	r0, #72	; 0x48
 8003a6e:	f7ff fe6d 	bl	800374c <SystemClock_Config>

	Delay_ms(3000);
 8003a72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a76:	f7ff ffbf 	bl	80039f8 <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8003a7a:	f000 fecb 	bl	8004814 <MemsetHandleStructure>

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 8003a7e:	f000 fd79 	bl	8004574 <DMA1_Init>
	Button_Init();				// Initialize peripherals related to Button
 8003a82:	f000 fc3b 	bl	80042fc <Button_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003a86:	f000 fc53 	bl	8004330 <BLDC1_Init>
	UART3_Init();				// Initialize UART2 to transmit data to PC
 8003a8a:	f000 fd17 	bl	80044bc <UART3_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8003a8e:	f000 fd3f 	bl	8004510 <TIM6_Init>
	Delay_ms(10);
 8003a92:	200a      	movs	r0, #10
 8003a94:	f7ff ffb0 	bl	80039f8 <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003a98:	48b5      	ldr	r0, [pc, #724]	; (8003d70 <main+0x308>)
 8003a9a:	f000 fef7 	bl	800488c <StartTimerPwm>
	Delay_ms(10);
 8003a9e:	200a      	movs	r0, #10
 8003aa0:	f7ff ffaa 	bl	80039f8 <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003aa4:	48b2      	ldr	r0, [pc, #712]	; (8003d70 <main+0x308>)
 8003aa6:	f000 ff0b 	bl	80048c0 <DisableTimerPwmChannel>
	Delay_ms(10);
 8003aaa:	200a      	movs	r0, #10
 8003aac:	f7ff ffa4 	bl	80039f8 <Delay_ms>
	 */

	while(1)
	{

		if(ButtonFlag == FLAG_SET)
 8003ab0:	4bb0      	ldr	r3, [pc, #704]	; (8003d74 <main+0x30c>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d1fb      	bne.n	8003ab0 <main+0x48>
		{
			/* Button is pressed */

			Delay_ms(2000);		// Wait a while to avoid Button chattering
 8003ab8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003abc:	f7ff ff9c 	bl	80039f8 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8003ac0:	4bab      	ldr	r3, [pc, #684]	; (8003d70 <main+0x308>)
 8003ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80d5 	bne.w	8003c76 <main+0x20e>
			{
				/* Previous Motor state was MOTOR_STATE_STOP */

				// 1. To Make 'BLDC_Get_Position' function Operate perfectly, Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8003acc:	4baa      	ldr	r3, [pc, #680]	; (8003d78 <main+0x310>)
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4ba7      	ldr	r3, [pc, #668]	; (8003d70 <main+0x308>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4ba5      	ldr	r3, [pc, #660]	; (8003d70 <main+0x308>)
 8003adc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003ae0:	4ba3      	ldr	r3, [pc, #652]	; (8003d70 <main+0x308>)
 8003ae2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	f200 8086 	bhi.w	8003bfa <main+0x192>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <main+0x8c>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003bd5 	.word	0x08003bd5
 8003af8:	08003b35 	.word	0x08003b35
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003bad 	.word	0x08003bad
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	4b98      	ldr	r3, [pc, #608]	; (8003d70 <main+0x308>)
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <main+0xb8>
 8003b16:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <main+0x308>)
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b1e:	e06c      	b.n	8003bfa <main+0x192>
 8003b20:	4b93      	ldr	r3, [pc, #588]	; (8003d70 <main+0x308>)
 8003b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d167      	bne.n	8003bfa <main+0x192>
 8003b2a:	4b91      	ldr	r3, [pc, #580]	; (8003d70 <main+0x308>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b32:	e062      	b.n	8003bfa <main+0x192>
 8003b34:	4b8e      	ldr	r3, [pc, #568]	; (8003d70 <main+0x308>)
 8003b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <main+0xe0>
 8003b3e:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <main+0x308>)
 8003b40:	2206      	movs	r2, #6
 8003b42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b46:	e058      	b.n	8003bfa <main+0x192>
 8003b48:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <main+0x308>)
 8003b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d153      	bne.n	8003bfa <main+0x192>
 8003b52:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <main+0x308>)
 8003b54:	2203      	movs	r2, #3
 8003b56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b5a:	e04e      	b.n	8003bfa <main+0x192>
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <main+0x308>)
 8003b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <main+0x108>
 8003b66:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <main+0x308>)
 8003b68:	2204      	movs	r2, #4
 8003b6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b6e:	e044      	b.n	8003bfa <main+0x192>
 8003b70:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <main+0x308>)
 8003b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d13f      	bne.n	8003bfa <main+0x192>
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <main+0x308>)
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b82:	e03a      	b.n	8003bfa <main+0x192>
 8003b84:	4b7a      	ldr	r3, [pc, #488]	; (8003d70 <main+0x308>)
 8003b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <main+0x130>
 8003b8e:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <main+0x308>)
 8003b90:	2205      	movs	r2, #5
 8003b92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003b96:	e030      	b.n	8003bfa <main+0x192>
 8003b98:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <main+0x308>)
 8003b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d12b      	bne.n	8003bfa <main+0x192>
 8003ba2:	4b73      	ldr	r3, [pc, #460]	; (8003d70 <main+0x308>)
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003baa:	e026      	b.n	8003bfa <main+0x192>
 8003bac:	4b70      	ldr	r3, [pc, #448]	; (8003d70 <main+0x308>)
 8003bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <main+0x158>
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	; (8003d70 <main+0x308>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003bbe:	e01c      	b.n	8003bfa <main+0x192>
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <main+0x308>)
 8003bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d117      	bne.n	8003bfa <main+0x192>
 8003bca:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <main+0x308>)
 8003bcc:	2204      	movs	r2, #4
 8003bce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003bd2:	e012      	b.n	8003bfa <main+0x192>
 8003bd4:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <main+0x308>)
 8003bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d104      	bne.n	8003be8 <main+0x180>
 8003bde:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <main+0x308>)
 8003be0:	2203      	movs	r2, #3
 8003be2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003be6:	e008      	b.n	8003bfa <main+0x192>
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <main+0x308>)
 8003bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d103      	bne.n	8003bfa <main+0x192>
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <main+0x308>)
 8003bf4:	2205      	movs	r2, #5
 8003bf6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003bfa:	bf00      	nop

				// 2. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2108      	movs	r1, #8
 8003c00:	2017      	movs	r0, #23
 8003c02:	f7ff fd3b 	bl	800367c <NVIC_IRQConfig>

				// 3. Charge Bootstrap Capacitor for 10ms before Drive BLDC motor
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8003c06:	485a      	ldr	r0, [pc, #360]	; (8003d70 <main+0x308>)
 8003c08:	f7fe ffbc 	bl	8002b84 <BLDC_BootstrapCap_Charge>

				// 4. Set Reference Position, PID gain, etc
				BLDC1Handle.RefPosition = 36000;
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <main+0x308>)
 8003c0e:	a452      	add	r4, pc, #328	; (adr r4, 8003d58 <main+0x2f0>)
 8003c10:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c14:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
				BLDC1Handle.TrjRefMaxSpeed = 7500;
 8003c18:	4a55      	ldr	r2, [pc, #340]	; (8003d70 <main+0x308>)
 8003c1a:	a451      	add	r4, pc, #324	; (adr r4, 8003d60 <main+0x2f8>)
 8003c1c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c20:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
				BLDC1Handle.TrjRefAcceleration = 2500;
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <main+0x308>)
 8003c26:	a450      	add	r4, pc, #320	; (adr r4, 8003d68 <main+0x300>)
 8003c28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c2c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

				BLDC_PID_GAIN_SET(&BLDC1Handle, 33, 4, 0); // Kp : 33, Ki : 4, Kd : 0
 8003c30:	4a4f      	ldr	r2, [pc, #316]	; (8003d70 <main+0x308>)
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	4c51      	ldr	r4, [pc, #324]	; (8003d7c <main+0x314>)
 8003c38:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <main+0x308>)
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	4c4f      	ldr	r4, [pc, #316]	; (8003d80 <main+0x318>)
 8003c44:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8003c48:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <main+0x308>)
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f04f 0400 	mov.w	r4, #0
 8003c52:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION;
 8003c56:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <main+0x308>)
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 6. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. Then, Motor rotates with given PWM duty cycle
				while(startFlag != FLAG_SET);
 8003c5e:	bf00      	nop
 8003c60:	4b48      	ldr	r3, [pc, #288]	; (8003d84 <main+0x31c>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d1fb      	bne.n	8003c60 <main+0x1f8>
				EXTI->SWIER |= (0x1 << 5);
 8003c68:	4b47      	ldr	r3, [pc, #284]	; (8003d88 <main+0x320>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a46      	ldr	r2, [pc, #280]	; (8003d88 <main+0x320>)
 8003c6e:	f043 0320 	orr.w	r3, r3, #32
 8003c72:	6113      	str	r3, [r2, #16]
 8003c74:	e06b      	b.n	8003d4e <main+0x2e6>
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8003c76:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <main+0x308>)
 8003c78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d166      	bne.n	8003d4e <main+0x2e6>
			{
				/* Previous Motor state was MOTOR_STATE_POSITION */

				Delay_ms(100);
 8003c80:	2064      	movs	r0, #100	; 0x64
 8003c82:	f7ff feb9 	bl	80039f8 <Delay_ms>

				// 3. Change MotorState from MOTOR_STATE_POSITION to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8003c86:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <main+0x308>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 4. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2108      	movs	r1, #8
 8003c92:	2017      	movs	r0, #23
 8003c94:	f7ff fcf2 	bl	800367c <NVIC_IRQConfig>

				// 5. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <main+0x308>)
 8003c9a:	6858      	ldr	r0, [r3, #4]
 8003c9c:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <main+0x308>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fd ff63 	bl	8001b70 <GPIO_WritePin>

				// 6. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8003caa:	4831      	ldr	r0, [pc, #196]	; (8003d70 <main+0x308>)
 8003cac:	f000 fe08 	bl	80048c0 <DisableTimerPwmChannel>

				startFlag = FLAG_RESET;
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <main+0x31c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]

				BLDC1Handle.HallCount = 0;
 8003cb6:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <main+0x308>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58
				BLDC1Handle.OldHallCount = 0;
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <main+0x308>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	65da      	str	r2, [r3, #92]	; 0x5c
				BLDC1Handle.CurPosition = 0;
 8003cc2:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <main+0x308>)
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	f04f 0400 	mov.w	r4, #0
 8003ccc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
				BLDC1Handle.Kp = 0;
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <main+0x308>)
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
				BLDC1Handle.Ki = 0;
 8003cde:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <main+0x308>)
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
				BLDC1Handle.Kd = 0;
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <main+0x308>)
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
				BLDC1Handle.Error = 0;
 8003cfa:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <main+0x308>)
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
				BLDC1Handle.PrvError = 0;
 8003d08:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <main+0x308>)
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
				BLDC1Handle.P_term = 0;
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <main+0x308>)
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f04f 0400 	mov.w	r4, #0
 8003d20:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
				BLDC1Handle.I_term = 0;
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <main+0x308>)
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	f04f 0400 	mov.w	r4, #0
 8003d2e:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
				BLDC1Handle.D_term = 0;
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <main+0x308>)
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
				BLDC1Handle.PwmPID = 0;
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <main+0x308>)
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
			}

			ButtonFlag = FLAG_RESET;
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <main+0x30c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
		if(ButtonFlag == FLAG_SET)
 8003d54:	e6ac      	b.n	8003ab0 <main+0x48>
 8003d56:	bf00      	nop
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	40e19400 	.word	0x40e19400
 8003d60:	00000000 	.word	0x00000000
 8003d64:	40bd4c00 	.word	0x40bd4c00
 8003d68:	00000000 	.word	0x00000000
 8003d6c:	40a38800 	.word	0x40a38800
 8003d70:	20000280 	.word	0x20000280
 8003d74:	20000204 	.word	0x20000204
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40408000 	.word	0x40408000
 8003d80:	40100000 	.word	0x40100000
 8003d84:	20000242 	.word	0x20000242
 8003d88:	40010400 	.word	0x40010400

08003d8c <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	2214      	movs	r2, #20
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fe27 	bl	80049f0 <memset>

	if(pUARTHandle->Instance == USART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a66      	ldr	r2, [pc, #408]	; (8003f40 <USART_MspInit+0x1b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d120      	bne.n	8003dee <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003dac:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <USART_MspInit+0x1b8>)
 8003dae:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db8:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fd fc8f 	bl	80016f0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dda:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fd fc82 	bl	80016f0 <GPIO_Init>
 8003dec:	e09e      	b.n	8003f2c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a55      	ldr	r2, [pc, #340]	; (8003f48 <USART_MspInit+0x1bc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d149      	bne.n	8003e8c <USART_MspInit+0x100>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8003df8:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <USART_MspInit+0x1b8>)
 8003dfa:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003e00:	2304      	movs	r3, #4
 8003e02:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7fd fc6a 	bl	80016f0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8003e20:	2308      	movs	r3, #8
 8003e22:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f7fd fc5e 	bl	80016f0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	4a44      	ldr	r2, [pc, #272]	; (8003f4c <USART_MspInit+0x1c0>)
 8003e3a:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2210      	movs	r2, #16
 8003e42:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd f8b3 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a33      	ldr	r2, [pc, #204]	; (8003f50 <USART_MspInit+0x1c4>)
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003e84:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <USART_MspInit+0x1c4>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6253      	str	r3, [r2, #36]	; 0x24
 8003e8a:	e04f      	b.n	8003f2c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <USART_MspInit+0x1c8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d14a      	bne.n	8003f2c <USART_MspInit+0x1a0>
	{
		/* USART3 GPIO Configuration */

		// USART3 Tx
		GPIOHandle.Instance = GPIOB;
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <USART_MspInit+0x1cc>)
 8003e98:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fd fc1a 	bl	80016f0 <GPIO_Init>

		// USART3 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_11;
 8003ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec4:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fd fc0d 	bl	80016f0 <GPIO_Init>

		/* USART3 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <USART_MspInit+0x1d0>)
 8003edc:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	2280      	movs	r2, #128	; 0x80
 8003ef4:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f862 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <USART_MspInit+0x1c4>)
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <USART_MspInit+0x1c4>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fad4 	bl	80024e0 <USART_PeripheralClockControl>
}
 8003f38:	bf00      	nop
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40010800 	.word	0x40010800
 8003f48:	40004400 	.word	0x40004400
 8003f4c:	40020080 	.word	0x40020080
 8003f50:	20000410 	.word	0x20000410
 8003f54:	40004800 	.word	0x40004800
 8003f58:	40010c00 	.word	0x40010c00
 8003f5c:	4002001c 	.word	0x4002001c

08003f60 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <TIM_Base_MspInit+0x2c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d108      	bne.n	8003f82 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003f70:	2101      	movs	r1, #1
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fe f914 	bl	80021a0 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	2036      	movs	r0, #54	; 0x36
 8003f7e:	f7ff fb7d 	bl	800367c <NVIC_IRQConfig>
	}
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40001000 	.word	0x40001000

08003f90 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a32      	ldr	r2, [pc, #200]	; (8004068 <TIM_PWM_MspInit+0xd8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d119      	bne.n	8003fd6 <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003fa2:	f107 030c 	add.w	r3, r7, #12
 8003fa6:	2214      	movs	r2, #20
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd20 	bl	80049f0 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <TIM_PWM_MspInit+0xdc>)
 8003fb2:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003fb4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003fb8:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f107 030c 	add.w	r3, r7, #12
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fd fb8d 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_PWM_MspInit+0xe0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d119      	bne.n	8004014 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	2214      	movs	r2, #20
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd01 	bl	80049f0 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <TIM_PWM_MspInit+0xe4>)
 8003ff0:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003ff2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003ff6:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004000:	2301      	movs	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f7fd fb6e 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <TIM_PWM_MspInit+0xe8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d119      	bne.n	8004052 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	2214      	movs	r2, #20
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fce2 	bl	80049f0 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <TIM_PWM_MspInit+0xec>)
 800402e:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004030:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004034:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f7fd fb4f 	bl	80016f0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe f8a1 	bl	80021a0 <TIM_PeripheralClockControl>
}
 800405e:	bf00      	nop
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40010800 	.word	0x40010800
 8004070:	40000400 	.word	0x40000400
 8004074:	40011000 	.word	0x40011000
 8004078:	40000800 	.word	0x40000800
 800407c:	40010c00 	.word	0x40010c00

08004080 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800408c:	2210      	movs	r2, #16
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fcad 	bl	80049f0 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80f1 	bne.w	8004282 <BLDC_MspInit+0x202>
	{
		/************************************************************************
		 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
		 ***********************************************************************/
		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 80040a0:	4b7a      	ldr	r3, [pc, #488]	; (800428c <BLDC_MspInit+0x20c>)
 80040a2:	4a7b      	ldr	r2, [pc, #492]	; (8004290 <BLDC_MspInit+0x210>)
 80040a4:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 80040a6:	4b79      	ldr	r3, [pc, #484]	; (800428c <BLDC_MspInit+0x20c>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 80040ac:	4b77      	ldr	r3, [pc, #476]	; (800428c <BLDC_MspInit+0x20c>)
 80040ae:	2202      	movs	r2, #2
 80040b0:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 80040b2:	4b76      	ldr	r3, [pc, #472]	; (800428c <BLDC_MspInit+0x20c>)
 80040b4:	2204      	movs	r2, #4
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 80040b8:	4b74      	ldr	r3, [pc, #464]	; (800428c <BLDC_MspInit+0x20c>)
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	4b73      	ldr	r3, [pc, #460]	; (800428c <BLDC_MspInit+0x20c>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	4b72      	ldr	r3, [pc, #456]	; (800428c <BLDC_MspInit+0x20c>)
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	4313      	orrs	r3, r2
 80040c8:	4a70      	ldr	r2, [pc, #448]	; (800428c <BLDC_MspInit+0x20c>)
 80040ca:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 80040cc:	4b6f      	ldr	r3, [pc, #444]	; (800428c <BLDC_MspInit+0x20c>)
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <BLDC_MspInit+0x210>)
 80040d0:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 80040d2:	4b6e      	ldr	r3, [pc, #440]	; (800428c <BLDC_MspInit+0x20c>)
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 80040d8:	4b6c      	ldr	r3, [pc, #432]	; (800428c <BLDC_MspInit+0x20c>)
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 80040de:	4b6b      	ldr	r3, [pc, #428]	; (800428c <BLDC_MspInit+0x20c>)
 80040e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 80040e6:	4b69      	ldr	r3, [pc, #420]	; (800428c <BLDC_MspInit+0x20c>)
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	4b68      	ldr	r3, [pc, #416]	; (800428c <BLDC_MspInit+0x20c>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	431a      	orrs	r2, r3
 80040f0:	4b66      	ldr	r3, [pc, #408]	; (800428c <BLDC_MspInit+0x20c>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	4313      	orrs	r3, r2
 80040f6:	4a65      	ldr	r2, [pc, #404]	; (800428c <BLDC_MspInit+0x20c>)
 80040f8:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOA;
 80040fa:	4b64      	ldr	r3, [pc, #400]	; (800428c <BLDC_MspInit+0x20c>)
 80040fc:	4a65      	ldr	r2, [pc, #404]	; (8004294 <BLDC_MspInit+0x214>)
 80040fe:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_5;
 8004100:	4b62      	ldr	r3, [pc, #392]	; (800428c <BLDC_MspInit+0x20c>)
 8004102:	2220      	movs	r2, #32
 8004104:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_6;
 8004106:	4b61      	ldr	r3, [pc, #388]	; (800428c <BLDC_MspInit+0x20c>)
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_7;
 800410c:	4b5f      	ldr	r3, [pc, #380]	; (800428c <BLDC_MspInit+0x20c>)
 800410e:	2280      	movs	r2, #128	; 0x80
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8004112:	4b5e      	ldr	r3, [pc, #376]	; (800428c <BLDC_MspInit+0x20c>)
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	4b5d      	ldr	r3, [pc, #372]	; (800428c <BLDC_MspInit+0x20c>)
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	431a      	orrs	r2, r3
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <BLDC_MspInit+0x20c>)
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	4313      	orrs	r3, r2
 8004122:	4a5a      	ldr	r2, [pc, #360]	; (800428c <BLDC_MspInit+0x20c>)
 8004124:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800412c:	2301      	movs	r3, #1
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004134:	2301      	movs	r3, #1
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fad4 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004148:	200a      	movs	r0, #10
 800414a:	f7ff fc55 	bl	80039f8 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6858      	ldr	r0, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	b29b      	uxth	r3, r3
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	f7fd fd08 	bl	8001b70 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004166:	2301      	movs	r3, #1
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800416e:	2301      	movs	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd fab7 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004182:	200a      	movs	r0, #10
 8004184:	f7ff fc38 	bl	80039f8 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6898      	ldr	r0, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	b29b      	uxth	r3, r3
 8004192:	2200      	movs	r2, #0
 8004194:	4619      	mov	r1, r3
 8004196:	f7fd fceb 	bl	8001b70 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 800419a:	200a      	movs	r0, #10
 800419c:	f7ff fc2c 	bl	80039f8 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6898      	ldr	r0, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2201      	movs	r2, #1
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7fd fcdf 	bl	8001b70 <GPIO_WritePin>
		Delay_ms(10);
 80041b2:	200a      	movs	r0, #10
 80041b4:	f7ff fc20 	bl	80039f8 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6898      	ldr	r0, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7fd fcd3 	bl	8001b70 <GPIO_WritePin>

		/********************************************************************
		 *			Low level init EXTI for Hall Sensor interrupt			*
		 ********************************************************************/
		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 80041ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ce:	2210      	movs	r2, #16
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fc0c 	bl	80049f0 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <BLDC_MspInit+0x218>)
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd fa7d 	bl	80016f0 <GPIO_Init>


		/********************************************************************
		 *				Low level init TIM to generate PWM signals			*
		 ********************************************************************/
		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a28      	ldr	r2, [pc, #160]	; (800429c <BLDC_MspInit+0x21c>)
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <BLDC_MspInit+0x220>)
 8004202:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (1-1);	// 72MHz / 1 = 72MHz
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2200      	movs	r2, #0
 800421a:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (3600-1);	// 72MHz / 3600 = 20kHz
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004224:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fe87 	bl	8001f3e <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	221c      	movs	r2, #28
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fbd9 	bl	80049f0 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 800423e:	2360      	movs	r3, #96	; 0x60
 8004240:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f107 010c 	add.w	r1, r7, #12
 8004252:	2200      	movs	r2, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd febf 	bl	8001fd8 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f107 010c 	add.w	r1, r7, #12
 8004266:	2204      	movs	r2, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd feb5 	bl	8001fd8 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f107 010c 	add.w	r1, r7, #12
 800427a:	2208      	movs	r2, #8
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd feab 	bl	8001fd8 <TIM_PWM_ConfigChannel>
	}
}
 8004282:	bf00      	nop
 8004284:	3738      	adds	r7, #56	; 0x38
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000280 	.word	0x20000280
 8004290:	40010c00 	.word	0x40010c00
 8004294:	40010800 	.word	0x40010800
 8004298:	10310000 	.word	0x10310000
 800429c:	200003f0 	.word	0x200003f0
 80042a0:	40000800 	.word	0x40000800

080042a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <_sbrk+0x50>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <_sbrk+0x16>
		heap_end = &end;
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <_sbrk+0x50>)
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <_sbrk+0x54>)
 80042b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <_sbrk+0x50>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <_sbrk+0x50>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	466a      	mov	r2, sp
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d907      	bls.n	80042de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80042ce:	f000 fb65 	bl	800499c <__errno>
 80042d2:	4602      	mov	r2, r0
 80042d4:	230c      	movs	r3, #12
 80042d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e006      	b.n	80042ec <_sbrk+0x48>
	}

	heap_end += incr;
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_sbrk+0x50>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <_sbrk+0x50>)
 80042e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000200 	.word	0x20000200
 80042f8:	200004d0 	.word	0x200004d0

080042fc <Button_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Button_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004302:	463b      	mov	r3, r7
 8004304:	2210      	movs	r2, #16
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fb71 	bl	80049f0 <memset>

	// 1. Initialize GPIO for START/STOP Button
	GPIOInit.Pin = GPIO_PIN_4;
 800430e:	2310      	movs	r3, #16
 8004310:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_INPUT;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8004316:	2301      	movs	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800431a:	463b      	mov	r3, r7
 800431c:	4619      	mov	r1, r3
 800431e:	4803      	ldr	r0, [pc, #12]	; (800432c <Button_Init+0x30>)
 8004320:	f7fd f9e6 	bl	80016f0 <GPIO_Init>
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40010800 	.word	0x40010800

08004330 <BLDC1_Init>:


void BLDC1_Init(void)
{
 8004330:	b598      	push	{r3, r4, r7, lr}
 8004332:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 8004334:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <BLDC1_Init+0x180>)
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 800433a:	4b5d      	ldr	r3, [pc, #372]	; (80044b0 <BLDC1_Init+0x180>)
 800433c:	2208      	movs	r2, #8
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 8004342:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <BLDC1_Init+0x180>)
 8004344:	2204      	movs	r2, #4
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 800434a:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <BLDC1_Init+0x180>)
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f865 	bl	8000424 <__aeabi_i2d>
 800435a:	4603      	mov	r3, r0
 800435c:	460c      	mov	r4, r1
 800435e:	461a      	mov	r2, r3
 8004360:	4623      	mov	r3, r4
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	4953      	ldr	r1, [pc, #332]	; (80044b4 <BLDC1_Init+0x184>)
 8004368:	f7fc f9f0 	bl	800074c <__aeabi_ddiv>
 800436c:	4603      	mov	r3, r0
 800436e:	460c      	mov	r4, r1
 8004370:	4618      	mov	r0, r3
 8004372:	4621      	mov	r1, r4
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	4b4f      	ldr	r3, [pc, #316]	; (80044b8 <BLDC1_Init+0x188>)
 800437a:	f7fc f9e7 	bl	800074c <__aeabi_ddiv>
 800437e:	4603      	mov	r3, r0
 8004380:	460c      	mov	r4, r1
 8004382:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <BLDC1_Init+0x180>)
 8004384:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8004388:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <BLDC1_Init+0x180>)
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8004390:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <BLDC1_Init+0x180>)
 8004392:	2200      	movs	r2, #0
 8004394:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <BLDC1_Init+0x180>)
 8004398:	2200      	movs	r2, #0
 800439a:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 800439c:	4a44      	ldr	r2, [pc, #272]	; (80044b0 <BLDC1_Init+0x180>)
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 80043aa:	4a41      	ldr	r2, [pc, #260]	; (80044b0 <BLDC1_Init+0x180>)
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 80043b8:	4a3d      	ldr	r2, [pc, #244]	; (80044b0 <BLDC1_Init+0x180>)
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <BLDC1_Init+0x180>)
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f04f 0400 	mov.w	r4, #0
 80043d0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <BLDC1_Init+0x180>)
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	f04f 0400 	mov.w	r4, #0
 80043de:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 80043e2:	4a33      	ldr	r2, [pc, #204]	; (80044b0 <BLDC1_Init+0x180>)
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 80043f0:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <BLDC1_Init+0x180>)
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	f04f 0400 	mov.w	r4, #0
 80043fa:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 80043fe:	4a2c      	ldr	r2, [pc, #176]	; (80044b0 <BLDC1_Init+0x180>)
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	f04f 0400 	mov.w	r4, #0
 8004408:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 800440c:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <BLDC1_Init+0x180>)
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 800441a:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <BLDC1_Init+0x180>)
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <BLDC1_Init+0x180>)
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <BLDC1_Init+0x180>)
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f04f 0400 	mov.w	r4, #0
 8004440:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <BLDC1_Init+0x180>)
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <BLDC1_Init+0x180>)
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	f04f 0400 	mov.w	r4, #0
 800445c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <BLDC1_Init+0x180>)
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <BLDC1_Init+0x180>)
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	f04f 0400 	mov.w	r4, #0
 8004478:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 800447c:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <BLDC1_Init+0x180>)
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <BLDC1_Init+0x180>)
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	f04f 0400 	mov.w	r4, #0
 8004494:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 8004498:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <BLDC1_Init+0x180>)
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 80044a6:	4802      	ldr	r0, [pc, #8]	; (80044b0 <BLDC1_Init+0x180>)
 80044a8:	f7fe f9b3 	bl	8002812 <BLDC_Init>
}
 80044ac:	bf00      	nop
 80044ae:	bd98      	pop	{r3, r4, r7, pc}
 80044b0:	20000280 	.word	0x20000280
 80044b4:	404e0000 	.word	0x404e0000
 80044b8:	40100000 	.word	0x40100000

080044bc <UART3_Init>:


void UART3_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
	UART3Handle.Instance = USART3;
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <UART3_Init+0x48>)
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <UART3_Init+0x4c>)
 80044c4:	601a      	str	r2, [r3, #0]
	UART3Handle.Init.Mode = UART_MODE_TX;
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <UART3_Init+0x48>)
 80044c8:	2208      	movs	r2, #8
 80044ca:	615a      	str	r2, [r3, #20]
	UART3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <UART3_Init+0x48>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
	UART3Handle.Init.BaudRate = USART_STD_BAUD_115200;
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <UART3_Init+0x48>)
 80044d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044d8:	605a      	str	r2, [r3, #4]
	UART3Handle.Init.Parity = UART_PARITY_NONE;
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <UART3_Init+0x48>)
 80044dc:	2200      	movs	r2, #0
 80044de:	611a      	str	r2, [r3, #16]
	UART3Handle.Init.StopBits = UART_STOPBITS_1;
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <UART3_Init+0x48>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	60da      	str	r2, [r3, #12]
	UART3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <UART3_Init+0x48>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
	UART3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <UART3_Init+0x48>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
	UART3Handle.hdmatx = &DMA1Handle;
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <UART3_Init+0x48>)
 80044f4:	4a05      	ldr	r2, [pc, #20]	; (800450c <UART3_Init+0x50>)
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART3Handle);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <UART3_Init+0x48>)
 80044fa:	f7fd ff91 	bl	8002420 <USART_Init>
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000378 	.word	0x20000378
 8004508:	40004800 	.word	0x40004800
 800450c:	20000410 	.word	0x20000410

08004510 <TIM6_Init>:


void TIM6_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <TIM6_Init+0x5c>)
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <TIM6_Init+0x60>)
 8004518:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <TIM6_Init+0x5c>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <TIM6_Init+0x5c>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <TIM6_Init+0x5c>)
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <TIM6_Init+0x5c>)
 800452e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004532:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <TIM6_Init+0x5c>)
 8004536:	2209      	movs	r2, #9
 8004538:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <TIM6_Init+0x5c>)
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8004540:	480a      	ldr	r0, [pc, #40]	; (800456c <TIM6_Init+0x5c>)
 8004542:	f7fd fce3 	bl	8001f0c <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <TIM6_Init+0x5c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <TIM6_Init+0x5c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <TIM6_Init+0x5c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <TIM6_Init+0x5c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200004a8 	.word	0x200004a8
 8004570:	40001000 	.word	0x40001000

08004574 <DMA1_Init>:


void DMA1_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <DMA1_Init+0x20>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	4a05      	ldr	r2, [pc, #20]	; (8004594 <DMA1_Init+0x20>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL2, NVIC_PRIOR_15, ENABLE);
 8004584:	2201      	movs	r2, #1
 8004586:	210f      	movs	r1, #15
 8004588:	200c      	movs	r0, #12
 800458a:	f7ff f877 	bl	800367c <NVIC_IRQConfig>
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b087      	sub	sp, #28
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(ButtonFlag == FLAG_RESET)
 80045a0:	4b81      	ldr	r3, [pc, #516]	; (80047a8 <TIM_PeriodElapsedCallback+0x210>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_4);
 80045a8:	4b80      	ldr	r3, [pc, #512]	; (80047ac <TIM_PeriodElapsedCallback+0x214>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <TIM_PeriodElapsedCallback+0x28>
		{
			ButtonFlag = FLAG_SET;
 80045ba:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <TIM_PeriodElapsedCallback+0x210>)
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <TIM_PeriodElapsedCallback+0x218>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f040 80e0 	bne.w	800478c <TIM_PeriodElapsedCallback+0x1f4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 80045cc:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 80045ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 8097 	bne.w	8004706 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 80045d8:	4b77      	ldr	r3, [pc, #476]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b63      	cmp	r3, #99	; 0x63
 80045de:	f340 80a0 	ble.w	8004722 <TIM_PeriodElapsedCallback+0x18a>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 80045e2:	a36d      	add	r3, pc, #436	; (adr r3, 8004798 <TIM_PeriodElapsedCallback+0x200>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	4872      	ldr	r0, [pc, #456]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 80045ea:	f7fe f9b5 	bl	8002958 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 80045ee:	a36a      	add	r3, pc, #424	; (adr r3, 8004798 <TIM_PeriodElapsedCallback+0x200>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	486f      	ldr	r0, [pc, #444]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 80045f6:	f7fe fd3b 	bl	8003070 <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART3 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 80045fa:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 80045fc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8004600:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004604:	4618      	mov	r0, r3
 8004606:	4621      	mov	r1, r4
 8004608:	f7fc fa26 	bl	8000a58 <__aeabi_d2iz>
 800460c:	4603      	mov	r3, r0
 800460e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8004610:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfb8      	it	lt
 8004618:	425b      	neglt	r3, r3
 800461a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 800461c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db02      	blt.n	800462a <TIM_PeriodElapsedCallback+0x92>
 8004624:	232b      	movs	r3, #43	; 0x2b
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e005      	b.n	8004636 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 800462a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da01      	bge.n	8004636 <TIM_PeriodElapsedCallback+0x9e>
 8004632:	232d      	movs	r3, #45	; 0x2d
 8004634:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8004636:	4a61      	ldr	r2, [pc, #388]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 800463c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004640:	4a5f      	ldr	r2, [pc, #380]	; (80047c0 <TIM_PeriodElapsedCallback+0x228>)
 8004642:	fb82 1203 	smull	r1, r2, r2, r3
 8004646:	1192      	asrs	r2, r2, #6
 8004648:	17db      	asrs	r3, r3, #31
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b21b      	sxth	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3330      	adds	r3, #48	; 0x30
 8004652:	b2da      	uxtb	r2, r3
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 8004656:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8004658:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <TIM_PeriodElapsedCallback+0x228>)
 800465e:	fb82 1203 	smull	r1, r2, r2, r3
 8004662:	1191      	asrs	r1, r2, #6
 8004664:	17da      	asrs	r2, r3, #31
 8004666:	1a8a      	subs	r2, r1, r2
 8004668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800466c:	fb01 f202 	mul.w	r2, r1, r2
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	b21b      	sxth	r3, r3
 8004674:	4a53      	ldr	r2, [pc, #332]	; (80047c4 <TIM_PeriodElapsedCallback+0x22c>)
 8004676:	fb82 1203 	smull	r1, r2, r2, r3
 800467a:	1152      	asrs	r2, r2, #5
 800467c:	17db      	asrs	r3, r3, #31
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b21b      	sxth	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3330      	adds	r3, #48	; 0x30
 8004686:	b2da      	uxtb	r2, r3
 8004688:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 800468a:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 800468c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <TIM_PeriodElapsedCallback+0x22c>)
 8004692:	fb82 1203 	smull	r1, r2, r2, r3
 8004696:	1151      	asrs	r1, r2, #5
 8004698:	17da      	asrs	r2, r3, #31
 800469a:	1a8a      	subs	r2, r1, r2
 800469c:	2164      	movs	r1, #100	; 0x64
 800469e:	fb01 f202 	mul.w	r2, r1, r2
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <TIM_PeriodElapsedCallback+0x230>)
 80046a8:	fb82 1203 	smull	r1, r2, r2, r3
 80046ac:	1092      	asrs	r2, r2, #2
 80046ae:	17db      	asrs	r3, r3, #31
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	b21b      	sxth	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3330      	adds	r3, #48	; 0x30
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 80046bc:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 80046be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <TIM_PeriodElapsedCallback+0x230>)
 80046c4:	fb83 1302 	smull	r1, r3, r3, r2
 80046c8:	1099      	asrs	r1, r3, #2
 80046ca:	17d3      	asrs	r3, r2, #31
 80046cc:	1ac9      	subs	r1, r1, r3
 80046ce:	460b      	mov	r3, r1
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	b21b      	sxth	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3330      	adds	r3, #48	; 0x30
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 80046e2:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 80046e6:	220a      	movs	r2, #10
 80046e8:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART3Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 80046ea:	4834      	ldr	r0, [pc, #208]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 80046ec:	f7fb fd40 	bl	8000170 <strlen>
 80046f0:	4603      	mov	r3, r0
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4931      	ldr	r1, [pc, #196]	; (80047bc <TIM_PeriodElapsedCallback+0x224>)
 80046f8:	4834      	ldr	r0, [pc, #208]	; (80047cc <TIM_PeriodElapsedCallback+0x234>)
 80046fa:	f7fd fffd 	bl	80026f8 <UART_Transmit_DMA>

				count = 0;
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e00d      	b.n	8004722 <TIM_PeriodElapsedCallback+0x18a>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8004706:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 8004708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800470c:	2b02      	cmp	r3, #2
 800470e:	d108      	bne.n	8004722 <TIM_PeriodElapsedCallback+0x18a>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8004710:	a323      	add	r3, pc, #140	; (adr r3, 80047a0 <TIM_PeriodElapsedCallback+0x208>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	4827      	ldr	r0, [pc, #156]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 8004718:	f7fe fd00 	bl	800311c <BLDC_PositionPID>

			startFlag = FLAG_SET;
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <TIM_PeriodElapsedCallback+0x238>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
		}



		/* Transmit Motor Position value to PC through UART3 */
		if(count >= 2)		// Every 2ms
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	dd2b      	ble.n	8004782 <TIM_PeriodElapsedCallback+0x1ea>
		{
			if(BLDC1Handle.RotationDir == CW)			sign = '+';
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <TIM_PeriodElapsedCallback+0x1a2>
 8004734:	232b      	movs	r3, #43	; 0x2b
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e006      	b.n	8004748 <TIM_PeriodElapsedCallback+0x1b0>
			else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <TIM_PeriodElapsedCallback+0x1b0>
 8004744:	232d      	movs	r3, #45	; 0x2d
 8004746:	73fb      	strb	r3, [r7, #15]

			//sprintf(Msg1, "%.2lf, %.2lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
			sprintf(Msg1, "%.2lf,%.2lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition);	// To see the case of TrjCurPosition
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 800474a:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 800474e:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <TIM_PeriodElapsedCallback+0x21c>)
 8004750:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8004754:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004758:	e9cd 3400 	strd	r3, r4, [sp]
 800475c:	4613      	mov	r3, r2
 800475e:	460a      	mov	r2, r1
 8004760:	491c      	ldr	r1, [pc, #112]	; (80047d4 <TIM_PeriodElapsedCallback+0x23c>)
 8004762:	481d      	ldr	r0, [pc, #116]	; (80047d8 <TIM_PeriodElapsedCallback+0x240>)
 8004764:	f000 fd9c 	bl	80052a0 <siprintf>

			UART_Transmit_DMA(&UART3Handle, (uint8_t*)Msg1, strlen((char*)Msg1));
 8004768:	481b      	ldr	r0, [pc, #108]	; (80047d8 <TIM_PeriodElapsedCallback+0x240>)
 800476a:	f7fb fd01 	bl	8000170 <strlen>
 800476e:	4603      	mov	r3, r0
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	4918      	ldr	r1, [pc, #96]	; (80047d8 <TIM_PeriodElapsedCallback+0x240>)
 8004776:	4815      	ldr	r0, [pc, #84]	; (80047cc <TIM_PeriodElapsedCallback+0x234>)
 8004778:	f7fd ffbe 	bl	80026f8 <UART_Transmit_DMA>

			count = 0;
 800477c:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
		}

		count++;
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <TIM_PeriodElapsedCallback+0x220>)
 800478a:	6013      	str	r3, [r2, #0]
	}
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	f3af 8000 	nop.w
 8004798:	9999999a 	.word	0x9999999a
 800479c:	3fb99999 	.word	0x3fb99999
 80047a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047a4:	3f50624d 	.word	0x3f50624d
 80047a8:	20000204 	.word	0x20000204
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40001000 	.word	0x40001000
 80047b4:	20000280 	.word	0x20000280
 80047b8:	20000244 	.word	0x20000244
 80047bc:	20000208 	.word	0x20000208
 80047c0:	10624dd3 	.word	0x10624dd3
 80047c4:	51eb851f 	.word	0x51eb851f
 80047c8:	66666667 	.word	0x66666667
 80047cc:	20000378 	.word	0x20000378
 80047d0:	20000242 	.word	0x20000242
 80047d4:	08006aac 	.word	0x08006aac
 80047d8:	20000210 	.word	0x20000210

080047dc <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOA->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 5U;
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <EXTI_Callback+0x30>)
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <EXTI_Callback+0x34>)
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	4b07      	ldr	r3, [pc, #28]	; (8004810 <EXTI_Callback+0x34>)
 80047f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 80047f8:	4805      	ldr	r0, [pc, #20]	; (8004810 <EXTI_Callback+0x34>)
 80047fa:	f7fe f8fb 	bl	80029f4 <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 80047fe:	4804      	ldr	r0, [pc, #16]	; (8004810 <EXTI_Callback+0x34>)
 8004800:	f7fe f812 	bl	8002828 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40010800 	.word	0x40010800
 8004810:	20000280 	.word	0x20000280

08004814 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8004818:	2220      	movs	r2, #32
 800481a:	2100      	movs	r1, #0
 800481c:	4813      	ldr	r0, [pc, #76]	; (800486c <MemsetHandleStructure+0x58>)
 800481e:	f000 f8e7 	bl	80049f0 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8004822:	2220      	movs	r2, #32
 8004824:	2100      	movs	r1, #0
 8004826:	4812      	ldr	r0, [pc, #72]	; (8004870 <MemsetHandleStructure+0x5c>)
 8004828:	f000 f8e2 	bl	80049f0 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 800482c:	22f8      	movs	r2, #248	; 0xf8
 800482e:	2100      	movs	r1, #0
 8004830:	4810      	ldr	r0, [pc, #64]	; (8004874 <MemsetHandleStructure+0x60>)
 8004832:	f000 f8dd 	bl	80049f0 <memset>
	memset(&UART3Handle, 0, sizeof(UART3Handle));
 8004836:	223c      	movs	r2, #60	; 0x3c
 8004838:	2100      	movs	r1, #0
 800483a:	480f      	ldr	r0, [pc, #60]	; (8004878 <MemsetHandleStructure+0x64>)
 800483c:	f000 f8d8 	bl	80049f0 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8004840:	2244      	movs	r2, #68	; 0x44
 8004842:	2100      	movs	r1, #0
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <MemsetHandleStructure+0x68>)
 8004846:	f000 f8d3 	bl	80049f0 <memset>
	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 800484a:	223c      	movs	r2, #60	; 0x3c
 800484c:	2100      	movs	r1, #0
 800484e:	480c      	ldr	r0, [pc, #48]	; (8004880 <MemsetHandleStructure+0x6c>)
 8004850:	f000 f8ce 	bl	80049f0 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8004854:	2230      	movs	r2, #48	; 0x30
 8004856:	2100      	movs	r1, #0
 8004858:	480a      	ldr	r0, [pc, #40]	; (8004884 <MemsetHandleStructure+0x70>)
 800485a:	f000 f8c9 	bl	80049f0 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 800485e:	2254      	movs	r2, #84	; 0x54
 8004860:	2100      	movs	r1, #0
 8004862:	4809      	ldr	r0, [pc, #36]	; (8004888 <MemsetHandleStructure+0x74>)
 8004864:	f000 f8c4 	bl	80049f0 <memset>
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200004a8 	.word	0x200004a8
 8004870:	200003f0 	.word	0x200003f0
 8004874:	20000280 	.word	0x20000280
 8004878:	20000378 	.word	0x20000378
 800487c:	20000410 	.word	0x20000410
 8004880:	200003b4 	.word	0x200003b4
 8004884:	20000250 	.word	0x20000250
 8004888:	20000454 	.word	0x20000454

0800488c <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fd50 	bl	8002340 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2104      	movs	r1, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fd4a 	bl	8002340 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	2108      	movs	r1, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd fd44 	bl	8002340 <TIM_PWM_Start>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0210 	bic.w	r2, r2, #16
 80048ee:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
	...

08004948 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004948:	480d      	ldr	r0, [pc, #52]	; (8004980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800494a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800494c:	480d      	ldr	r0, [pc, #52]	; (8004984 <LoopForever+0x6>)
  ldr r1, =_edata
 800494e:	490e      	ldr	r1, [pc, #56]	; (8004988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <LoopForever+0xe>)
  movs r3, #0
 8004952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004954:	e002      	b.n	800495c <LoopCopyDataInit>

08004956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495a:	3304      	adds	r3, #4

0800495c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800495c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800495e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004960:	d3f9      	bcc.n	8004956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004964:	4c0b      	ldr	r4, [pc, #44]	; (8004994 <LoopForever+0x16>)
  movs r3, #0
 8004966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004968:	e001      	b.n	800496e <LoopFillZerobss>

0800496a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800496c:	3204      	adds	r2, #4

0800496e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800496e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004970:	d3fb      	bcc.n	800496a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004972:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8004976:	f000 f817 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800497a:	f7ff f875 	bl	8003a68 <main>

0800497e <LoopForever>:

LoopForever:
    b LoopForever
 800497e:	e7fe      	b.n	800497e <LoopForever>
  ldr   r0, =_estack
 8004980:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8004984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004988:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800498c:	08006d20 	.word	0x08006d20
  ldr r2, =_sbss
 8004990:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004994:	200004cc 	.word	0x200004cc

08004998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004998:	e7fe      	b.n	8004998 <ADC1_2_IRQHandler>
	...

0800499c <__errno>:
 800499c:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <__errno+0x8>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000008 	.word	0x20000008

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	2500      	movs	r5, #0
 80049ac:	4e0c      	ldr	r6, [pc, #48]	; (80049e0 <__libc_init_array+0x38>)
 80049ae:	4c0d      	ldr	r4, [pc, #52]	; (80049e4 <__libc_init_array+0x3c>)
 80049b0:	1ba4      	subs	r4, r4, r6
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	42a5      	cmp	r5, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	f002 f860 	bl	8006a7c <_init>
 80049bc:	2500      	movs	r5, #0
 80049be:	4e0a      	ldr	r6, [pc, #40]	; (80049e8 <__libc_init_array+0x40>)
 80049c0:	4c0a      	ldr	r4, [pc, #40]	; (80049ec <__libc_init_array+0x44>)
 80049c2:	1ba4      	subs	r4, r4, r6
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	42a5      	cmp	r5, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049d0:	4798      	blx	r3
 80049d2:	3501      	adds	r5, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049da:	4798      	blx	r3
 80049dc:	3501      	adds	r5, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08006d18 	.word	0x08006d18
 80049e4:	08006d18 	.word	0x08006d18
 80049e8:	08006d18 	.word	0x08006d18
 80049ec:	08006d1c 	.word	0x08006d1c

080049f0 <memset>:
 80049f0:	4603      	mov	r3, r0
 80049f2:	4402      	add	r2, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <__cvt>:
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a06:	461e      	mov	r6, r3
 8004a08:	bfbb      	ittet	lt
 8004a0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a0e:	461e      	movlt	r6, r3
 8004a10:	2300      	movge	r3, #0
 8004a12:	232d      	movlt	r3, #45	; 0x2d
 8004a14:	b088      	sub	sp, #32
 8004a16:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a18:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a1c:	f027 0720 	bic.w	r7, r7, #32
 8004a20:	2f46      	cmp	r7, #70	; 0x46
 8004a22:	4614      	mov	r4, r2
 8004a24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a26:	700b      	strb	r3, [r1, #0]
 8004a28:	d004      	beq.n	8004a34 <__cvt+0x34>
 8004a2a:	2f45      	cmp	r7, #69	; 0x45
 8004a2c:	d100      	bne.n	8004a30 <__cvt+0x30>
 8004a2e:	3501      	adds	r5, #1
 8004a30:	2302      	movs	r3, #2
 8004a32:	e000      	b.n	8004a36 <__cvt+0x36>
 8004a34:	2303      	movs	r3, #3
 8004a36:	aa07      	add	r2, sp, #28
 8004a38:	9204      	str	r2, [sp, #16]
 8004a3a:	aa06      	add	r2, sp, #24
 8004a3c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a40:	e9cd 3500 	strd	r3, r5, [sp]
 8004a44:	4622      	mov	r2, r4
 8004a46:	4633      	mov	r3, r6
 8004a48:	f000 fcda 	bl	8005400 <_dtoa_r>
 8004a4c:	2f47      	cmp	r7, #71	; 0x47
 8004a4e:	4680      	mov	r8, r0
 8004a50:	d102      	bne.n	8004a58 <__cvt+0x58>
 8004a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a54:	07db      	lsls	r3, r3, #31
 8004a56:	d526      	bpl.n	8004aa6 <__cvt+0xa6>
 8004a58:	2f46      	cmp	r7, #70	; 0x46
 8004a5a:	eb08 0905 	add.w	r9, r8, r5
 8004a5e:	d111      	bne.n	8004a84 <__cvt+0x84>
 8004a60:	f898 3000 	ldrb.w	r3, [r8]
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	d10a      	bne.n	8004a7e <__cvt+0x7e>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4631      	mov	r1, r6
 8004a70:	f7fb ffaa 	bl	80009c8 <__aeabi_dcmpeq>
 8004a74:	b918      	cbnz	r0, 8004a7e <__cvt+0x7e>
 8004a76:	f1c5 0501 	rsb	r5, r5, #1
 8004a7a:	f8ca 5000 	str.w	r5, [sl]
 8004a7e:	f8da 3000 	ldr.w	r3, [sl]
 8004a82:	4499      	add	r9, r3
 8004a84:	2200      	movs	r2, #0
 8004a86:	2300      	movs	r3, #0
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	f7fb ff9c 	bl	80009c8 <__aeabi_dcmpeq>
 8004a90:	b938      	cbnz	r0, 8004aa2 <__cvt+0xa2>
 8004a92:	2230      	movs	r2, #48	; 0x30
 8004a94:	9b07      	ldr	r3, [sp, #28]
 8004a96:	454b      	cmp	r3, r9
 8004a98:	d205      	bcs.n	8004aa6 <__cvt+0xa6>
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	9107      	str	r1, [sp, #28]
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e7f8      	b.n	8004a94 <__cvt+0x94>
 8004aa2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	9b07      	ldr	r3, [sp, #28]
 8004aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004aac:	eba3 0308 	sub.w	r3, r3, r8
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	b008      	add	sp, #32
 8004ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ab8 <__exponent>:
 8004ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aba:	2900      	cmp	r1, #0
 8004abc:	bfb4      	ite	lt
 8004abe:	232d      	movlt	r3, #45	; 0x2d
 8004ac0:	232b      	movge	r3, #43	; 0x2b
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	bfb8      	it	lt
 8004ac6:	4249      	neglt	r1, r1
 8004ac8:	2909      	cmp	r1, #9
 8004aca:	f804 2b02 	strb.w	r2, [r4], #2
 8004ace:	7043      	strb	r3, [r0, #1]
 8004ad0:	dd21      	ble.n	8004b16 <__exponent+0x5e>
 8004ad2:	f10d 0307 	add.w	r3, sp, #7
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	260a      	movs	r6, #10
 8004ada:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ade:	fb06 1115 	mls	r1, r6, r5, r1
 8004ae2:	2d09      	cmp	r5, #9
 8004ae4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ae8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004aec:	f103 32ff 	add.w	r2, r3, #4294967295
 8004af0:	4629      	mov	r1, r5
 8004af2:	dc09      	bgt.n	8004b08 <__exponent+0x50>
 8004af4:	3130      	adds	r1, #48	; 0x30
 8004af6:	3b02      	subs	r3, #2
 8004af8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004afc:	42bb      	cmp	r3, r7
 8004afe:	4622      	mov	r2, r4
 8004b00:	d304      	bcc.n	8004b0c <__exponent+0x54>
 8004b02:	1a10      	subs	r0, r2, r0
 8004b04:	b003      	add	sp, #12
 8004b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b08:	4613      	mov	r3, r2
 8004b0a:	e7e6      	b.n	8004ada <__exponent+0x22>
 8004b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b10:	f804 2b01 	strb.w	r2, [r4], #1
 8004b14:	e7f2      	b.n	8004afc <__exponent+0x44>
 8004b16:	2330      	movs	r3, #48	; 0x30
 8004b18:	4419      	add	r1, r3
 8004b1a:	7083      	strb	r3, [r0, #2]
 8004b1c:	1d02      	adds	r2, r0, #4
 8004b1e:	70c1      	strb	r1, [r0, #3]
 8004b20:	e7ef      	b.n	8004b02 <__exponent+0x4a>
	...

08004b24 <_printf_float>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	b091      	sub	sp, #68	; 0x44
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b2e:	4693      	mov	fp, r2
 8004b30:	461e      	mov	r6, r3
 8004b32:	4605      	mov	r5, r0
 8004b34:	f001 fa18 	bl	8005f68 <_localeconv_r>
 8004b38:	6803      	ldr	r3, [r0, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3e:	f7fb fb17 	bl	8000170 <strlen>
 8004b42:	2300      	movs	r3, #0
 8004b44:	930e      	str	r3, [sp, #56]	; 0x38
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	900a      	str	r0, [sp, #40]	; 0x28
 8004b4a:	3307      	adds	r3, #7
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
 8004b50:	f103 0208 	add.w	r2, r3, #8
 8004b54:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b58:	f8d4 a000 	ldr.w	sl, [r4]
 8004b5c:	603a      	str	r2, [r7, #0]
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b66:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295
 8004b74:	4ba6      	ldr	r3, [pc, #664]	; (8004e10 <_printf_float+0x2ec>)
 8004b76:	4638      	mov	r0, r7
 8004b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b7a:	f7fb ff57 	bl	8000a2c <__aeabi_dcmpun>
 8004b7e:	bb68      	cbnz	r0, 8004bdc <_printf_float+0xb8>
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	4ba2      	ldr	r3, [pc, #648]	; (8004e10 <_printf_float+0x2ec>)
 8004b86:	4638      	mov	r0, r7
 8004b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b8a:	f7fb ff31 	bl	80009f0 <__aeabi_dcmple>
 8004b8e:	bb28      	cbnz	r0, 8004bdc <_printf_float+0xb8>
 8004b90:	2200      	movs	r2, #0
 8004b92:	2300      	movs	r3, #0
 8004b94:	4638      	mov	r0, r7
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb ff20 	bl	80009dc <__aeabi_dcmplt>
 8004b9c:	b110      	cbz	r0, 8004ba4 <_printf_float+0x80>
 8004b9e:	232d      	movs	r3, #45	; 0x2d
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba4:	4f9b      	ldr	r7, [pc, #620]	; (8004e14 <_printf_float+0x2f0>)
 8004ba6:	4b9c      	ldr	r3, [pc, #624]	; (8004e18 <_printf_float+0x2f4>)
 8004ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bac:	bf98      	it	ls
 8004bae:	461f      	movls	r7, r3
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	f04f 0900 	mov.w	r9, #0
 8004bb6:	6123      	str	r3, [r4, #16]
 8004bb8:	f02a 0304 	bic.w	r3, sl, #4
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	9600      	str	r6, [sp, #0]
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f9e2 	bl	8004f90 <_printf_common>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f040 8090 	bne.w	8004cf2 <_printf_float+0x1ce>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	b011      	add	sp, #68	; 0x44
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	463a      	mov	r2, r7
 8004bde:	464b      	mov	r3, r9
 8004be0:	4638      	mov	r0, r7
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb ff22 	bl	8000a2c <__aeabi_dcmpun>
 8004be8:	b110      	cbz	r0, 8004bf0 <_printf_float+0xcc>
 8004bea:	4f8c      	ldr	r7, [pc, #560]	; (8004e1c <_printf_float+0x2f8>)
 8004bec:	4b8c      	ldr	r3, [pc, #560]	; (8004e20 <_printf_float+0x2fc>)
 8004bee:	e7db      	b.n	8004ba8 <_printf_float+0x84>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	a80d      	add	r0, sp, #52	; 0x34
 8004bfa:	a90e      	add	r1, sp, #56	; 0x38
 8004bfc:	d140      	bne.n	8004c80 <_printf_float+0x15c>
 8004bfe:	2306      	movs	r3, #6
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	f04f 0c00 	mov.w	ip, #0
 8004c06:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004c0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	6022      	str	r2, [r4, #0]
 8004c12:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	463a      	mov	r2, r7
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c20:	4628      	mov	r0, r5
 8004c22:	f7ff feed 	bl	8004a00 <__cvt>
 8004c26:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c2a:	2b47      	cmp	r3, #71	; 0x47
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	d109      	bne.n	8004c44 <_printf_float+0x120>
 8004c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c32:	1cd8      	adds	r0, r3, #3
 8004c34:	db02      	blt.n	8004c3c <_printf_float+0x118>
 8004c36:	6862      	ldr	r2, [r4, #4]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	dd47      	ble.n	8004ccc <_printf_float+0x1a8>
 8004c3c:	f1a8 0802 	sub.w	r8, r8, #2
 8004c40:	fa5f f888 	uxtb.w	r8, r8
 8004c44:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c4a:	d824      	bhi.n	8004c96 <_printf_float+0x172>
 8004c4c:	3901      	subs	r1, #1
 8004c4e:	4642      	mov	r2, r8
 8004c50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c54:	910d      	str	r1, [sp, #52]	; 0x34
 8004c56:	f7ff ff2f 	bl	8004ab8 <__exponent>
 8004c5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c5c:	4681      	mov	r9, r0
 8004c5e:	1813      	adds	r3, r2, r0
 8004c60:	2a01      	cmp	r2, #1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	dc02      	bgt.n	8004c6c <_printf_float+0x148>
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	07d1      	lsls	r1, r2, #31
 8004c6a:	d501      	bpl.n	8004c70 <_printf_float+0x14c>
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0a2      	beq.n	8004bbe <_printf_float+0x9a>
 8004c78:	232d      	movs	r3, #45	; 0x2d
 8004c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7e:	e79e      	b.n	8004bbe <_printf_float+0x9a>
 8004c80:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c84:	f000 816e 	beq.w	8004f64 <_printf_float+0x440>
 8004c88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c8c:	d1b9      	bne.n	8004c02 <_printf_float+0xde>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1b7      	bne.n	8004c02 <_printf_float+0xde>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7b4      	b.n	8004c00 <_printf_float+0xdc>
 8004c96:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c9a:	d119      	bne.n	8004cd0 <_printf_float+0x1ac>
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	6863      	ldr	r3, [r4, #4]
 8004ca0:	dd0c      	ble.n	8004cbc <_printf_float+0x198>
 8004ca2:	6121      	str	r1, [r4, #16]
 8004ca4:	b913      	cbnz	r3, 8004cac <_printf_float+0x188>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	07d2      	lsls	r2, r2, #31
 8004caa:	d502      	bpl.n	8004cb2 <_printf_float+0x18e>
 8004cac:	3301      	adds	r3, #1
 8004cae:	440b      	add	r3, r1
 8004cb0:	6123      	str	r3, [r4, #16]
 8004cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb4:	f04f 0900 	mov.w	r9, #0
 8004cb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cba:	e7d9      	b.n	8004c70 <_printf_float+0x14c>
 8004cbc:	b913      	cbnz	r3, 8004cc4 <_printf_float+0x1a0>
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	07d0      	lsls	r0, r2, #31
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_float+0x1a4>
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	e7f3      	b.n	8004cb0 <_printf_float+0x18c>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e7f1      	b.n	8004cb0 <_printf_float+0x18c>
 8004ccc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004cd0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	db05      	blt.n	8004ce4 <_printf_float+0x1c0>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	07d1      	lsls	r1, r2, #31
 8004cde:	d5e8      	bpl.n	8004cb2 <_printf_float+0x18e>
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	e7e5      	b.n	8004cb0 <_printf_float+0x18c>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfcc      	ite	gt
 8004ce8:	2301      	movgt	r3, #1
 8004cea:	f1c3 0302 	rsble	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	e7de      	b.n	8004cb0 <_printf_float+0x18c>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	055a      	lsls	r2, r3, #21
 8004cf6:	d407      	bmi.n	8004d08 <_printf_float+0x1e4>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4659      	mov	r1, fp
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b0      	blx	r6
 8004d02:	3001      	adds	r0, #1
 8004d04:	d129      	bne.n	8004d5a <_printf_float+0x236>
 8004d06:	e764      	b.n	8004bd2 <_printf_float+0xae>
 8004d08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d0c:	f240 80d7 	bls.w	8004ebe <_printf_float+0x39a>
 8004d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	f7fb fe56 	bl	80009c8 <__aeabi_dcmpeq>
 8004d1c:	b388      	cbz	r0, 8004d82 <_printf_float+0x25e>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <_printf_float+0x300>)
 8004d22:	4659      	mov	r1, fp
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b0      	blx	r6
 8004d28:	3001      	adds	r0, #1
 8004d2a:	f43f af52 	beq.w	8004bd2 <_printf_float+0xae>
 8004d2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d32:	429a      	cmp	r2, r3
 8004d34:	db02      	blt.n	8004d3c <_printf_float+0x218>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	07d8      	lsls	r0, r3, #31
 8004d3a:	d50e      	bpl.n	8004d5a <_printf_float+0x236>
 8004d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d40:	4659      	mov	r1, fp
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b0      	blx	r6
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f af43 	beq.w	8004bd2 <_printf_float+0xae>
 8004d4c:	2700      	movs	r7, #0
 8004d4e:	f104 081a 	add.w	r8, r4, #26
 8004d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d54:	3b01      	subs	r3, #1
 8004d56:	42bb      	cmp	r3, r7
 8004d58:	dc09      	bgt.n	8004d6e <_printf_float+0x24a>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	079f      	lsls	r7, r3, #30
 8004d5e:	f100 80fd 	bmi.w	8004f5c <_printf_float+0x438>
 8004d62:	68e0      	ldr	r0, [r4, #12]
 8004d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d66:	4298      	cmp	r0, r3
 8004d68:	bfb8      	it	lt
 8004d6a:	4618      	movlt	r0, r3
 8004d6c:	e733      	b.n	8004bd6 <_printf_float+0xb2>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4642      	mov	r2, r8
 8004d72:	4659      	mov	r1, fp
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b0      	blx	r6
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f af2a 	beq.w	8004bd2 <_printf_float+0xae>
 8004d7e:	3701      	adds	r7, #1
 8004d80:	e7e7      	b.n	8004d52 <_printf_float+0x22e>
 8004d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dc2b      	bgt.n	8004de0 <_printf_float+0x2bc>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <_printf_float+0x300>)
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b0      	blx	r6
 8004d92:	3001      	adds	r0, #1
 8004d94:	f43f af1d 	beq.w	8004bd2 <_printf_float+0xae>
 8004d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d9a:	b923      	cbnz	r3, 8004da6 <_printf_float+0x282>
 8004d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9e:	b913      	cbnz	r3, 8004da6 <_printf_float+0x282>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	07d9      	lsls	r1, r3, #31
 8004da4:	d5d9      	bpl.n	8004d5a <_printf_float+0x236>
 8004da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004daa:	4659      	mov	r1, fp
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b0      	blx	r6
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f af0e 	beq.w	8004bd2 <_printf_float+0xae>
 8004db6:	f04f 0800 	mov.w	r8, #0
 8004dba:	f104 091a 	add.w	r9, r4, #26
 8004dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	4543      	cmp	r3, r8
 8004dc4:	dc01      	bgt.n	8004dca <_printf_float+0x2a6>
 8004dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc8:	e797      	b.n	8004cfa <_printf_float+0x1d6>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	464a      	mov	r2, r9
 8004dce:	4659      	mov	r1, fp
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b0      	blx	r6
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f aefc 	beq.w	8004bd2 <_printf_float+0xae>
 8004dda:	f108 0801 	add.w	r8, r8, #1
 8004dde:	e7ee      	b.n	8004dbe <_printf_float+0x29a>
 8004de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bfa8      	it	ge
 8004de8:	461a      	movge	r2, r3
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	4690      	mov	r8, r2
 8004dee:	dd07      	ble.n	8004e00 <_printf_float+0x2dc>
 8004df0:	4613      	mov	r3, r2
 8004df2:	4659      	mov	r1, fp
 8004df4:	463a      	mov	r2, r7
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f aee9 	beq.w	8004bd2 <_printf_float+0xae>
 8004e00:	f104 031a 	add.w	r3, r4, #26
 8004e04:	f04f 0a00 	mov.w	sl, #0
 8004e08:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e0e:	e015      	b.n	8004e3c <_printf_float+0x318>
 8004e10:	7fefffff 	.word	0x7fefffff
 8004e14:	08006abd 	.word	0x08006abd
 8004e18:	08006ab9 	.word	0x08006ab9
 8004e1c:	08006ac5 	.word	0x08006ac5
 8004e20:	08006ac1 	.word	0x08006ac1
 8004e24:	08006ac9 	.word	0x08006ac9
 8004e28:	2301      	movs	r3, #1
 8004e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b0      	blx	r6
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f aecd 	beq.w	8004bd2 <_printf_float+0xae>
 8004e38:	f10a 0a01 	add.w	sl, sl, #1
 8004e3c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e40:	eba9 0308 	sub.w	r3, r9, r8
 8004e44:	4553      	cmp	r3, sl
 8004e46:	dcef      	bgt.n	8004e28 <_printf_float+0x304>
 8004e48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	444f      	add	r7, r9
 8004e50:	db14      	blt.n	8004e7c <_printf_float+0x358>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	07da      	lsls	r2, r3, #31
 8004e56:	d411      	bmi.n	8004e7c <_printf_float+0x358>
 8004e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e5c:	eba3 0209 	sub.w	r2, r3, r9
 8004e60:	eba3 0901 	sub.w	r9, r3, r1
 8004e64:	4591      	cmp	r9, r2
 8004e66:	bfa8      	it	ge
 8004e68:	4691      	movge	r9, r2
 8004e6a:	f1b9 0f00 	cmp.w	r9, #0
 8004e6e:	dc0d      	bgt.n	8004e8c <_printf_float+0x368>
 8004e70:	2700      	movs	r7, #0
 8004e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e76:	f104 081a 	add.w	r8, r4, #26
 8004e7a:	e018      	b.n	8004eae <_printf_float+0x38a>
 8004e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e80:	4659      	mov	r1, fp
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	3001      	adds	r0, #1
 8004e88:	d1e6      	bne.n	8004e58 <_printf_float+0x334>
 8004e8a:	e6a2      	b.n	8004bd2 <_printf_float+0xae>
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	463a      	mov	r2, r7
 8004e90:	4659      	mov	r1, fp
 8004e92:	4628      	mov	r0, r5
 8004e94:	47b0      	blx	r6
 8004e96:	3001      	adds	r0, #1
 8004e98:	d1ea      	bne.n	8004e70 <_printf_float+0x34c>
 8004e9a:	e69a      	b.n	8004bd2 <_printf_float+0xae>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b0      	blx	r6
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f ae93 	beq.w	8004bd2 <_printf_float+0xae>
 8004eac:	3701      	adds	r7, #1
 8004eae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	eba3 0309 	sub.w	r3, r3, r9
 8004eb8:	42bb      	cmp	r3, r7
 8004eba:	dcef      	bgt.n	8004e9c <_printf_float+0x378>
 8004ebc:	e74d      	b.n	8004d5a <_printf_float+0x236>
 8004ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec0:	2a01      	cmp	r2, #1
 8004ec2:	dc01      	bgt.n	8004ec8 <_printf_float+0x3a4>
 8004ec4:	07db      	lsls	r3, r3, #31
 8004ec6:	d538      	bpl.n	8004f3a <_printf_float+0x416>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	463a      	mov	r2, r7
 8004ecc:	4659      	mov	r1, fp
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b0      	blx	r6
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f ae7d 	beq.w	8004bd2 <_printf_float+0xae>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	4659      	mov	r1, fp
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b0      	blx	r6
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f107 0701 	add.w	r7, r7, #1
 8004ee8:	f43f ae73 	beq.w	8004bd2 <_printf_float+0xae>
 8004eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f7fb fd65 	bl	80009c8 <__aeabi_dcmpeq>
 8004efe:	b9c0      	cbnz	r0, 8004f32 <_printf_float+0x40e>
 8004f00:	4643      	mov	r3, r8
 8004f02:	463a      	mov	r2, r7
 8004f04:	4659      	mov	r1, fp
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b0      	blx	r6
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d10d      	bne.n	8004f2a <_printf_float+0x406>
 8004f0e:	e660      	b.n	8004bd2 <_printf_float+0xae>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4642      	mov	r2, r8
 8004f14:	4659      	mov	r1, fp
 8004f16:	4628      	mov	r0, r5
 8004f18:	47b0      	blx	r6
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f43f ae59 	beq.w	8004bd2 <_printf_float+0xae>
 8004f20:	3701      	adds	r7, #1
 8004f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f24:	3b01      	subs	r3, #1
 8004f26:	42bb      	cmp	r3, r7
 8004f28:	dcf2      	bgt.n	8004f10 <_printf_float+0x3ec>
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f30:	e6e4      	b.n	8004cfc <_printf_float+0x1d8>
 8004f32:	2700      	movs	r7, #0
 8004f34:	f104 081a 	add.w	r8, r4, #26
 8004f38:	e7f3      	b.n	8004f22 <_printf_float+0x3fe>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e7e1      	b.n	8004f02 <_printf_float+0x3de>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4642      	mov	r2, r8
 8004f42:	4659      	mov	r1, fp
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b0      	blx	r6
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f43f ae42 	beq.w	8004bd2 <_printf_float+0xae>
 8004f4e:	3701      	adds	r7, #1
 8004f50:	68e3      	ldr	r3, [r4, #12]
 8004f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	42bb      	cmp	r3, r7
 8004f58:	dcf1      	bgt.n	8004f3e <_printf_float+0x41a>
 8004f5a:	e702      	b.n	8004d62 <_printf_float+0x23e>
 8004f5c:	2700      	movs	r7, #0
 8004f5e:	f104 0819 	add.w	r8, r4, #25
 8004f62:	e7f5      	b.n	8004f50 <_printf_float+0x42c>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f43f ae94 	beq.w	8004c92 <_printf_float+0x16e>
 8004f6a:	f04f 0c00 	mov.w	ip, #0
 8004f6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	463a      	mov	r2, r7
 8004f84:	464b      	mov	r3, r9
 8004f86:	4628      	mov	r0, r5
 8004f88:	f7ff fd3a 	bl	8004a00 <__cvt>
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	e64f      	b.n	8004c30 <_printf_float+0x10c>

08004f90 <_printf_common>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4691      	mov	r9, r2
 8004f96:	461f      	mov	r7, r3
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bfb8      	it	lt
 8004fa2:	4613      	movlt	r3, r2
 8004fa4:	f8c9 3000 	str.w	r3, [r9]
 8004fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fac:	460c      	mov	r4, r1
 8004fae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fb2:	b112      	cbz	r2, 8004fba <_printf_common+0x2a>
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8c9 3000 	str.w	r3, [r9]
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	0699      	lsls	r1, r3, #26
 8004fbe:	bf42      	ittt	mi
 8004fc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fc4:	3302      	addmi	r3, #2
 8004fc6:	f8c9 3000 	strmi.w	r3, [r9]
 8004fca:	6825      	ldr	r5, [r4, #0]
 8004fcc:	f015 0506 	ands.w	r5, r5, #6
 8004fd0:	d107      	bne.n	8004fe2 <_printf_common+0x52>
 8004fd2:	f104 0a19 	add.w	sl, r4, #25
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	42ab      	cmp	r3, r5
 8004fe0:	dc29      	bgt.n	8005036 <_printf_common+0xa6>
 8004fe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	3300      	adds	r3, #0
 8004fea:	bf18      	it	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	0692      	lsls	r2, r2, #26
 8004ff0:	d42e      	bmi.n	8005050 <_printf_common+0xc0>
 8004ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	47c0      	blx	r8
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d021      	beq.n	8005044 <_printf_common+0xb4>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	68e5      	ldr	r5, [r4, #12]
 8005004:	f003 0306 	and.w	r3, r3, #6
 8005008:	2b04      	cmp	r3, #4
 800500a:	bf18      	it	ne
 800500c:	2500      	movne	r5, #0
 800500e:	f8d9 2000 	ldr.w	r2, [r9]
 8005012:	f04f 0900 	mov.w	r9, #0
 8005016:	bf08      	it	eq
 8005018:	1aad      	subeq	r5, r5, r2
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	bf08      	it	eq
 8005020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005024:	4293      	cmp	r3, r2
 8005026:	bfc4      	itt	gt
 8005028:	1a9b      	subgt	r3, r3, r2
 800502a:	18ed      	addgt	r5, r5, r3
 800502c:	341a      	adds	r4, #26
 800502e:	454d      	cmp	r5, r9
 8005030:	d11a      	bne.n	8005068 <_printf_common+0xd8>
 8005032:	2000      	movs	r0, #0
 8005034:	e008      	b.n	8005048 <_printf_common+0xb8>
 8005036:	2301      	movs	r3, #1
 8005038:	4652      	mov	r2, sl
 800503a:	4639      	mov	r1, r7
 800503c:	4630      	mov	r0, r6
 800503e:	47c0      	blx	r8
 8005040:	3001      	adds	r0, #1
 8005042:	d103      	bne.n	800504c <_printf_common+0xbc>
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	3501      	adds	r5, #1
 800504e:	e7c2      	b.n	8004fd6 <_printf_common+0x46>
 8005050:	2030      	movs	r0, #48	; 0x30
 8005052:	18e1      	adds	r1, r4, r3
 8005054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800505e:	4422      	add	r2, r4
 8005060:	3302      	adds	r3, #2
 8005062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005066:	e7c4      	b.n	8004ff2 <_printf_common+0x62>
 8005068:	2301      	movs	r3, #1
 800506a:	4622      	mov	r2, r4
 800506c:	4639      	mov	r1, r7
 800506e:	4630      	mov	r0, r6
 8005070:	47c0      	blx	r8
 8005072:	3001      	adds	r0, #1
 8005074:	d0e6      	beq.n	8005044 <_printf_common+0xb4>
 8005076:	f109 0901 	add.w	r9, r9, #1
 800507a:	e7d8      	b.n	800502e <_printf_common+0x9e>

0800507c <_printf_i>:
 800507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005080:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005084:	460c      	mov	r4, r1
 8005086:	7e09      	ldrb	r1, [r1, #24]
 8005088:	b085      	sub	sp, #20
 800508a:	296e      	cmp	r1, #110	; 0x6e
 800508c:	4617      	mov	r7, r2
 800508e:	4606      	mov	r6, r0
 8005090:	4698      	mov	r8, r3
 8005092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005094:	f000 80b3 	beq.w	80051fe <_printf_i+0x182>
 8005098:	d822      	bhi.n	80050e0 <_printf_i+0x64>
 800509a:	2963      	cmp	r1, #99	; 0x63
 800509c:	d036      	beq.n	800510c <_printf_i+0x90>
 800509e:	d80a      	bhi.n	80050b6 <_printf_i+0x3a>
 80050a0:	2900      	cmp	r1, #0
 80050a2:	f000 80b9 	beq.w	8005218 <_printf_i+0x19c>
 80050a6:	2958      	cmp	r1, #88	; 0x58
 80050a8:	f000 8083 	beq.w	80051b2 <_printf_i+0x136>
 80050ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050b4:	e032      	b.n	800511c <_printf_i+0xa0>
 80050b6:	2964      	cmp	r1, #100	; 0x64
 80050b8:	d001      	beq.n	80050be <_printf_i+0x42>
 80050ba:	2969      	cmp	r1, #105	; 0x69
 80050bc:	d1f6      	bne.n	80050ac <_printf_i+0x30>
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	0605      	lsls	r5, r0, #24
 80050c4:	f103 0104 	add.w	r1, r3, #4
 80050c8:	d52a      	bpl.n	8005120 <_printf_i+0xa4>
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da03      	bge.n	80050da <_printf_i+0x5e>
 80050d2:	222d      	movs	r2, #45	; 0x2d
 80050d4:	425b      	negs	r3, r3
 80050d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050da:	486f      	ldr	r0, [pc, #444]	; (8005298 <_printf_i+0x21c>)
 80050dc:	220a      	movs	r2, #10
 80050de:	e039      	b.n	8005154 <_printf_i+0xd8>
 80050e0:	2973      	cmp	r1, #115	; 0x73
 80050e2:	f000 809d 	beq.w	8005220 <_printf_i+0x1a4>
 80050e6:	d808      	bhi.n	80050fa <_printf_i+0x7e>
 80050e8:	296f      	cmp	r1, #111	; 0x6f
 80050ea:	d020      	beq.n	800512e <_printf_i+0xb2>
 80050ec:	2970      	cmp	r1, #112	; 0x70
 80050ee:	d1dd      	bne.n	80050ac <_printf_i+0x30>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f043 0320 	orr.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	e003      	b.n	8005102 <_printf_i+0x86>
 80050fa:	2975      	cmp	r1, #117	; 0x75
 80050fc:	d017      	beq.n	800512e <_printf_i+0xb2>
 80050fe:	2978      	cmp	r1, #120	; 0x78
 8005100:	d1d4      	bne.n	80050ac <_printf_i+0x30>
 8005102:	2378      	movs	r3, #120	; 0x78
 8005104:	4865      	ldr	r0, [pc, #404]	; (800529c <_printf_i+0x220>)
 8005106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510a:	e055      	b.n	80051b8 <_printf_i+0x13c>
 800510c:	6813      	ldr	r3, [r2, #0]
 800510e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005112:	1d19      	adds	r1, r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6011      	str	r1, [r2, #0]
 8005118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800511c:	2301      	movs	r3, #1
 800511e:	e08c      	b.n	800523a <_printf_i+0x1be>
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005126:	6011      	str	r1, [r2, #0]
 8005128:	bf18      	it	ne
 800512a:	b21b      	sxthne	r3, r3
 800512c:	e7cf      	b.n	80050ce <_printf_i+0x52>
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	6825      	ldr	r5, [r4, #0]
 8005132:	1d18      	adds	r0, r3, #4
 8005134:	6010      	str	r0, [r2, #0]
 8005136:	0628      	lsls	r0, r5, #24
 8005138:	d501      	bpl.n	800513e <_printf_i+0xc2>
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	e002      	b.n	8005144 <_printf_i+0xc8>
 800513e:	0668      	lsls	r0, r5, #25
 8005140:	d5fb      	bpl.n	800513a <_printf_i+0xbe>
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	296f      	cmp	r1, #111	; 0x6f
 8005146:	bf14      	ite	ne
 8005148:	220a      	movne	r2, #10
 800514a:	2208      	moveq	r2, #8
 800514c:	4852      	ldr	r0, [pc, #328]	; (8005298 <_printf_i+0x21c>)
 800514e:	2100      	movs	r1, #0
 8005150:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005154:	6865      	ldr	r5, [r4, #4]
 8005156:	2d00      	cmp	r5, #0
 8005158:	60a5      	str	r5, [r4, #8]
 800515a:	f2c0 8095 	blt.w	8005288 <_printf_i+0x20c>
 800515e:	6821      	ldr	r1, [r4, #0]
 8005160:	f021 0104 	bic.w	r1, r1, #4
 8005164:	6021      	str	r1, [r4, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d13d      	bne.n	80051e6 <_printf_i+0x16a>
 800516a:	2d00      	cmp	r5, #0
 800516c:	f040 808e 	bne.w	800528c <_printf_i+0x210>
 8005170:	4665      	mov	r5, ip
 8005172:	2a08      	cmp	r2, #8
 8005174:	d10b      	bne.n	800518e <_printf_i+0x112>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	07db      	lsls	r3, r3, #31
 800517a:	d508      	bpl.n	800518e <_printf_i+0x112>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	bfde      	ittt	le
 8005184:	2330      	movle	r3, #48	; 0x30
 8005186:	f805 3c01 	strble.w	r3, [r5, #-1]
 800518a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800518e:	ebac 0305 	sub.w	r3, ip, r5
 8005192:	6123      	str	r3, [r4, #16]
 8005194:	f8cd 8000 	str.w	r8, [sp]
 8005198:	463b      	mov	r3, r7
 800519a:	aa03      	add	r2, sp, #12
 800519c:	4621      	mov	r1, r4
 800519e:	4630      	mov	r0, r6
 80051a0:	f7ff fef6 	bl	8004f90 <_printf_common>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d14d      	bne.n	8005244 <_printf_i+0x1c8>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b005      	add	sp, #20
 80051ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051b2:	4839      	ldr	r0, [pc, #228]	; (8005298 <_printf_i+0x21c>)
 80051b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051b8:	6813      	ldr	r3, [r2, #0]
 80051ba:	6821      	ldr	r1, [r4, #0]
 80051bc:	1d1d      	adds	r5, r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6015      	str	r5, [r2, #0]
 80051c2:	060a      	lsls	r2, r1, #24
 80051c4:	d50b      	bpl.n	80051de <_printf_i+0x162>
 80051c6:	07ca      	lsls	r2, r1, #31
 80051c8:	bf44      	itt	mi
 80051ca:	f041 0120 	orrmi.w	r1, r1, #32
 80051ce:	6021      	strmi	r1, [r4, #0]
 80051d0:	b91b      	cbnz	r3, 80051da <_printf_i+0x15e>
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	f022 0220 	bic.w	r2, r2, #32
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	2210      	movs	r2, #16
 80051dc:	e7b7      	b.n	800514e <_printf_i+0xd2>
 80051de:	064d      	lsls	r5, r1, #25
 80051e0:	bf48      	it	mi
 80051e2:	b29b      	uxthmi	r3, r3
 80051e4:	e7ef      	b.n	80051c6 <_printf_i+0x14a>
 80051e6:	4665      	mov	r5, ip
 80051e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ec:	fb02 3311 	mls	r3, r2, r1, r3
 80051f0:	5cc3      	ldrb	r3, [r0, r3]
 80051f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051f6:	460b      	mov	r3, r1
 80051f8:	2900      	cmp	r1, #0
 80051fa:	d1f5      	bne.n	80051e8 <_printf_i+0x16c>
 80051fc:	e7b9      	b.n	8005172 <_printf_i+0xf6>
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1d18      	adds	r0, r3, #4
 8005204:	6961      	ldr	r1, [r4, #20]
 8005206:	6010      	str	r0, [r2, #0]
 8005208:	0628      	lsls	r0, r5, #24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	d501      	bpl.n	8005212 <_printf_i+0x196>
 800520e:	6019      	str	r1, [r3, #0]
 8005210:	e002      	b.n	8005218 <_printf_i+0x19c>
 8005212:	066a      	lsls	r2, r5, #25
 8005214:	d5fb      	bpl.n	800520e <_printf_i+0x192>
 8005216:	8019      	strh	r1, [r3, #0]
 8005218:	2300      	movs	r3, #0
 800521a:	4665      	mov	r5, ip
 800521c:	6123      	str	r3, [r4, #16]
 800521e:	e7b9      	b.n	8005194 <_printf_i+0x118>
 8005220:	6813      	ldr	r3, [r2, #0]
 8005222:	1d19      	adds	r1, r3, #4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	681d      	ldr	r5, [r3, #0]
 8005228:	6862      	ldr	r2, [r4, #4]
 800522a:	2100      	movs	r1, #0
 800522c:	4628      	mov	r0, r5
 800522e:	f000 feb1 	bl	8005f94 <memchr>
 8005232:	b108      	cbz	r0, 8005238 <_printf_i+0x1bc>
 8005234:	1b40      	subs	r0, r0, r5
 8005236:	6060      	str	r0, [r4, #4]
 8005238:	6863      	ldr	r3, [r4, #4]
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	2300      	movs	r3, #0
 800523e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005242:	e7a7      	b.n	8005194 <_printf_i+0x118>
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	462a      	mov	r2, r5
 8005248:	4639      	mov	r1, r7
 800524a:	4630      	mov	r0, r6
 800524c:	47c0      	blx	r8
 800524e:	3001      	adds	r0, #1
 8005250:	d0aa      	beq.n	80051a8 <_printf_i+0x12c>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	079b      	lsls	r3, r3, #30
 8005256:	d413      	bmi.n	8005280 <_printf_i+0x204>
 8005258:	68e0      	ldr	r0, [r4, #12]
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	4298      	cmp	r0, r3
 800525e:	bfb8      	it	lt
 8005260:	4618      	movlt	r0, r3
 8005262:	e7a3      	b.n	80051ac <_printf_i+0x130>
 8005264:	2301      	movs	r3, #1
 8005266:	464a      	mov	r2, r9
 8005268:	4639      	mov	r1, r7
 800526a:	4630      	mov	r0, r6
 800526c:	47c0      	blx	r8
 800526e:	3001      	adds	r0, #1
 8005270:	d09a      	beq.n	80051a8 <_printf_i+0x12c>
 8005272:	3501      	adds	r5, #1
 8005274:	68e3      	ldr	r3, [r4, #12]
 8005276:	9a03      	ldr	r2, [sp, #12]
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	42ab      	cmp	r3, r5
 800527c:	dcf2      	bgt.n	8005264 <_printf_i+0x1e8>
 800527e:	e7eb      	b.n	8005258 <_printf_i+0x1dc>
 8005280:	2500      	movs	r5, #0
 8005282:	f104 0919 	add.w	r9, r4, #25
 8005286:	e7f5      	b.n	8005274 <_printf_i+0x1f8>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ac      	bne.n	80051e6 <_printf_i+0x16a>
 800528c:	7803      	ldrb	r3, [r0, #0]
 800528e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005296:	e76c      	b.n	8005172 <_printf_i+0xf6>
 8005298:	08006acb 	.word	0x08006acb
 800529c:	08006adc 	.word	0x08006adc

080052a0 <siprintf>:
 80052a0:	b40e      	push	{r1, r2, r3}
 80052a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052a6:	b500      	push	{lr}
 80052a8:	b09c      	sub	sp, #112	; 0x70
 80052aa:	ab1d      	add	r3, sp, #116	; 0x74
 80052ac:	9002      	str	r0, [sp, #8]
 80052ae:	9006      	str	r0, [sp, #24]
 80052b0:	9107      	str	r1, [sp, #28]
 80052b2:	9104      	str	r1, [sp, #16]
 80052b4:	4808      	ldr	r0, [pc, #32]	; (80052d8 <siprintf+0x38>)
 80052b6:	4909      	ldr	r1, [pc, #36]	; (80052dc <siprintf+0x3c>)
 80052b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052bc:	9105      	str	r1, [sp, #20]
 80052be:	6800      	ldr	r0, [r0, #0]
 80052c0:	a902      	add	r1, sp, #8
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	f001 fa6a 	bl	800679c <_svfiprintf_r>
 80052c8:	2200      	movs	r2, #0
 80052ca:	9b02      	ldr	r3, [sp, #8]
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	b01c      	add	sp, #112	; 0x70
 80052d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d4:	b003      	add	sp, #12
 80052d6:	4770      	bx	lr
 80052d8:	20000008 	.word	0x20000008
 80052dc:	ffff0208 	.word	0xffff0208

080052e0 <quorem>:
 80052e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	6903      	ldr	r3, [r0, #16]
 80052e6:	690c      	ldr	r4, [r1, #16]
 80052e8:	4680      	mov	r8, r0
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	f2c0 8084 	blt.w	80053f8 <quorem+0x118>
 80052f0:	3c01      	subs	r4, #1
 80052f2:	f101 0714 	add.w	r7, r1, #20
 80052f6:	f100 0614 	add.w	r6, r0, #20
 80052fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005302:	3501      	adds	r5, #1
 8005304:	fbb0 f5f5 	udiv	r5, r0, r5
 8005308:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800530c:	eb06 030c 	add.w	r3, r6, ip
 8005310:	eb07 090c 	add.w	r9, r7, ip
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	b39d      	cbz	r5, 8005380 <quorem+0xa0>
 8005318:	f04f 0a00 	mov.w	sl, #0
 800531c:	4638      	mov	r0, r7
 800531e:	46b6      	mov	lr, r6
 8005320:	46d3      	mov	fp, sl
 8005322:	f850 2b04 	ldr.w	r2, [r0], #4
 8005326:	b293      	uxth	r3, r2
 8005328:	fb05 a303 	mla	r3, r5, r3, sl
 800532c:	0c12      	lsrs	r2, r2, #16
 800532e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005332:	fb05 a202 	mla	r2, r5, r2, sl
 8005336:	b29b      	uxth	r3, r3
 8005338:	ebab 0303 	sub.w	r3, fp, r3
 800533c:	f8de b000 	ldr.w	fp, [lr]
 8005340:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005344:	fa1f fb8b 	uxth.w	fp, fp
 8005348:	445b      	add	r3, fp
 800534a:	fa1f fb82 	uxth.w	fp, r2
 800534e:	f8de 2000 	ldr.w	r2, [lr]
 8005352:	4581      	cmp	r9, r0
 8005354:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005362:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005366:	f84e 3b04 	str.w	r3, [lr], #4
 800536a:	d2da      	bcs.n	8005322 <quorem+0x42>
 800536c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005370:	b933      	cbnz	r3, 8005380 <quorem+0xa0>
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	3b04      	subs	r3, #4
 8005376:	429e      	cmp	r6, r3
 8005378:	461a      	mov	r2, r3
 800537a:	d331      	bcc.n	80053e0 <quorem+0x100>
 800537c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005380:	4640      	mov	r0, r8
 8005382:	f001 f835 	bl	80063f0 <__mcmp>
 8005386:	2800      	cmp	r0, #0
 8005388:	db26      	blt.n	80053d8 <quorem+0xf8>
 800538a:	4630      	mov	r0, r6
 800538c:	f04f 0c00 	mov.w	ip, #0
 8005390:	3501      	adds	r5, #1
 8005392:	f857 1b04 	ldr.w	r1, [r7], #4
 8005396:	f8d0 e000 	ldr.w	lr, [r0]
 800539a:	b28b      	uxth	r3, r1
 800539c:	ebac 0303 	sub.w	r3, ip, r3
 80053a0:	fa1f f28e 	uxth.w	r2, lr
 80053a4:	4413      	add	r3, r2
 80053a6:	0c0a      	lsrs	r2, r1, #16
 80053a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b6:	45b9      	cmp	r9, r7
 80053b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053bc:	f840 3b04 	str.w	r3, [r0], #4
 80053c0:	d2e7      	bcs.n	8005392 <quorem+0xb2>
 80053c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053ca:	b92a      	cbnz	r2, 80053d8 <quorem+0xf8>
 80053cc:	3b04      	subs	r3, #4
 80053ce:	429e      	cmp	r6, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	d30b      	bcc.n	80053ec <quorem+0x10c>
 80053d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80053d8:	4628      	mov	r0, r5
 80053da:	b003      	add	sp, #12
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	3b04      	subs	r3, #4
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	d1c9      	bne.n	800537c <quorem+0x9c>
 80053e8:	3c01      	subs	r4, #1
 80053ea:	e7c4      	b.n	8005376 <quorem+0x96>
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	3b04      	subs	r3, #4
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d1ef      	bne.n	80053d4 <quorem+0xf4>
 80053f4:	3c01      	subs	r4, #1
 80053f6:	e7ea      	b.n	80053ce <quorem+0xee>
 80053f8:	2000      	movs	r0, #0
 80053fa:	e7ee      	b.n	80053da <quorem+0xfa>
 80053fc:	0000      	movs	r0, r0
	...

08005400 <_dtoa_r>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	461f      	mov	r7, r3
 8005408:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800540a:	b095      	sub	sp, #84	; 0x54
 800540c:	4604      	mov	r4, r0
 800540e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005412:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005416:	b93d      	cbnz	r5, 8005428 <_dtoa_r+0x28>
 8005418:	2010      	movs	r0, #16
 800541a:	f000 fdb3 	bl	8005f84 <malloc>
 800541e:	6260      	str	r0, [r4, #36]	; 0x24
 8005420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005424:	6005      	str	r5, [r0, #0]
 8005426:	60c5      	str	r5, [r0, #12]
 8005428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542a:	6819      	ldr	r1, [r3, #0]
 800542c:	b151      	cbz	r1, 8005444 <_dtoa_r+0x44>
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2301      	movs	r3, #1
 8005432:	4093      	lsls	r3, r2
 8005434:	604a      	str	r2, [r1, #4]
 8005436:	608b      	str	r3, [r1, #8]
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fdf8 	bl	800602e <_Bfree>
 800543e:	2200      	movs	r2, #0
 8005440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	1e3b      	subs	r3, r7, #0
 8005446:	bfaf      	iteee	ge
 8005448:	2300      	movge	r3, #0
 800544a:	2201      	movlt	r2, #1
 800544c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005450:	9303      	strlt	r3, [sp, #12]
 8005452:	bfac      	ite	ge
 8005454:	f8c8 3000 	strge.w	r3, [r8]
 8005458:	f8c8 2000 	strlt.w	r2, [r8]
 800545c:	4bae      	ldr	r3, [pc, #696]	; (8005718 <_dtoa_r+0x318>)
 800545e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005462:	ea33 0308 	bics.w	r3, r3, r8
 8005466:	d11b      	bne.n	80054a0 <_dtoa_r+0xa0>
 8005468:	f242 730f 	movw	r3, #9999	; 0x270f
 800546c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	9b02      	ldr	r3, [sp, #8]
 8005472:	b923      	cbnz	r3, 800547e <_dtoa_r+0x7e>
 8005474:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005478:	2800      	cmp	r0, #0
 800547a:	f000 8545 	beq.w	8005f08 <_dtoa_r+0xb08>
 800547e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005480:	b953      	cbnz	r3, 8005498 <_dtoa_r+0x98>
 8005482:	4ba6      	ldr	r3, [pc, #664]	; (800571c <_dtoa_r+0x31c>)
 8005484:	e021      	b.n	80054ca <_dtoa_r+0xca>
 8005486:	4ba6      	ldr	r3, [pc, #664]	; (8005720 <_dtoa_r+0x320>)
 8005488:	9306      	str	r3, [sp, #24]
 800548a:	3308      	adds	r3, #8
 800548c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	9806      	ldr	r0, [sp, #24]
 8005492:	b015      	add	sp, #84	; 0x54
 8005494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005498:	4ba0      	ldr	r3, [pc, #640]	; (800571c <_dtoa_r+0x31c>)
 800549a:	9306      	str	r3, [sp, #24]
 800549c:	3303      	adds	r3, #3
 800549e:	e7f5      	b.n	800548c <_dtoa_r+0x8c>
 80054a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fa8c 	bl	80009c8 <__aeabi_dcmpeq>
 80054b0:	4682      	mov	sl, r0
 80054b2:	b160      	cbz	r0, 80054ce <_dtoa_r+0xce>
 80054b4:	2301      	movs	r3, #1
 80054b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8520 	beq.w	8005f02 <_dtoa_r+0xb02>
 80054c2:	4b98      	ldr	r3, [pc, #608]	; (8005724 <_dtoa_r+0x324>)
 80054c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	9306      	str	r3, [sp, #24]
 80054cc:	e7e0      	b.n	8005490 <_dtoa_r+0x90>
 80054ce:	ab12      	add	r3, sp, #72	; 0x48
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	ab13      	add	r3, sp, #76	; 0x4c
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	4620      	mov	r0, r4
 80054dc:	f001 f800 	bl	80064e0 <__d2b>
 80054e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054e4:	4683      	mov	fp, r0
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	d07d      	beq.n	80055e6 <_dtoa_r+0x1e6>
 80054ea:	46b0      	mov	r8, r6
 80054ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80054f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80054f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005500:	2200      	movs	r2, #0
 8005502:	4b89      	ldr	r3, [pc, #548]	; (8005728 <_dtoa_r+0x328>)
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	f7fa fe3e 	bl	8000188 <__aeabi_dsub>
 800550c:	a37c      	add	r3, pc, #496	; (adr r3, 8005700 <_dtoa_r+0x300>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fa fff1 	bl	80004f8 <__aeabi_dmul>
 8005516:	a37c      	add	r3, pc, #496	; (adr r3, 8005708 <_dtoa_r+0x308>)
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f7fa fe36 	bl	800018c <__adddf3>
 8005520:	4606      	mov	r6, r0
 8005522:	4628      	mov	r0, r5
 8005524:	460f      	mov	r7, r1
 8005526:	f7fa ff7d 	bl	8000424 <__aeabi_i2d>
 800552a:	a379      	add	r3, pc, #484	; (adr r3, 8005710 <_dtoa_r+0x310>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa ffe2 	bl	80004f8 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fa fe26 	bl	800018c <__adddf3>
 8005540:	4606      	mov	r6, r0
 8005542:	460f      	mov	r7, r1
 8005544:	f7fb fa88 	bl	8000a58 <__aeabi_d2iz>
 8005548:	2200      	movs	r2, #0
 800554a:	4682      	mov	sl, r0
 800554c:	2300      	movs	r3, #0
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fb fa43 	bl	80009dc <__aeabi_dcmplt>
 8005556:	b148      	cbz	r0, 800556c <_dtoa_r+0x16c>
 8005558:	4650      	mov	r0, sl
 800555a:	f7fa ff63 	bl	8000424 <__aeabi_i2d>
 800555e:	4632      	mov	r2, r6
 8005560:	463b      	mov	r3, r7
 8005562:	f7fb fa31 	bl	80009c8 <__aeabi_dcmpeq>
 8005566:	b908      	cbnz	r0, 800556c <_dtoa_r+0x16c>
 8005568:	f10a 3aff 	add.w	sl, sl, #4294967295
 800556c:	f1ba 0f16 	cmp.w	sl, #22
 8005570:	d85a      	bhi.n	8005628 <_dtoa_r+0x228>
 8005572:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005576:	496d      	ldr	r1, [pc, #436]	; (800572c <_dtoa_r+0x32c>)
 8005578:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800557c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005580:	f7fb fa4a 	bl	8000a18 <__aeabi_dcmpgt>
 8005584:	2800      	cmp	r0, #0
 8005586:	d051      	beq.n	800562c <_dtoa_r+0x22c>
 8005588:	2300      	movs	r3, #0
 800558a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800558e:	930d      	str	r3, [sp, #52]	; 0x34
 8005590:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005592:	1b5d      	subs	r5, r3, r5
 8005594:	1e6b      	subs	r3, r5, #1
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	bf43      	ittte	mi
 800559a:	2300      	movmi	r3, #0
 800559c:	f1c5 0901 	rsbmi	r9, r5, #1
 80055a0:	9307      	strmi	r3, [sp, #28]
 80055a2:	f04f 0900 	movpl.w	r9, #0
 80055a6:	f1ba 0f00 	cmp.w	sl, #0
 80055aa:	db41      	blt.n	8005630 <_dtoa_r+0x230>
 80055ac:	9b07      	ldr	r3, [sp, #28]
 80055ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80055b2:	4453      	add	r3, sl
 80055b4:	9307      	str	r3, [sp, #28]
 80055b6:	2300      	movs	r3, #0
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055bc:	2b09      	cmp	r3, #9
 80055be:	f200 808f 	bhi.w	80056e0 <_dtoa_r+0x2e0>
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	bfc4      	itt	gt
 80055c6:	3b04      	subgt	r3, #4
 80055c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80055ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055cc:	bfc8      	it	gt
 80055ce:	2500      	movgt	r5, #0
 80055d0:	f1a3 0302 	sub.w	r3, r3, #2
 80055d4:	bfd8      	it	le
 80055d6:	2501      	movle	r5, #1
 80055d8:	2b03      	cmp	r3, #3
 80055da:	f200 808d 	bhi.w	80056f8 <_dtoa_r+0x2f8>
 80055de:	e8df f003 	tbb	[pc, r3]
 80055e2:	7d7b      	.short	0x7d7b
 80055e4:	6f2f      	.short	0x6f2f
 80055e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055ea:	441d      	add	r5, r3
 80055ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055f0:	2820      	cmp	r0, #32
 80055f2:	dd13      	ble.n	800561c <_dtoa_r+0x21c>
 80055f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	fa08 f800 	lsl.w	r8, r8, r0
 80055fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005602:	fa23 f000 	lsr.w	r0, r3, r0
 8005606:	ea48 0000 	orr.w	r0, r8, r0
 800560a:	f7fa fefb 	bl	8000404 <__aeabi_ui2d>
 800560e:	2301      	movs	r3, #1
 8005610:	4680      	mov	r8, r0
 8005612:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005616:	3d01      	subs	r5, #1
 8005618:	9310      	str	r3, [sp, #64]	; 0x40
 800561a:	e771      	b.n	8005500 <_dtoa_r+0x100>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	f1c0 0020 	rsb	r0, r0, #32
 8005622:	fa03 f000 	lsl.w	r0, r3, r0
 8005626:	e7f0      	b.n	800560a <_dtoa_r+0x20a>
 8005628:	2301      	movs	r3, #1
 800562a:	e7b0      	b.n	800558e <_dtoa_r+0x18e>
 800562c:	900d      	str	r0, [sp, #52]	; 0x34
 800562e:	e7af      	b.n	8005590 <_dtoa_r+0x190>
 8005630:	f1ca 0300 	rsb	r3, sl, #0
 8005634:	9308      	str	r3, [sp, #32]
 8005636:	2300      	movs	r3, #0
 8005638:	eba9 090a 	sub.w	r9, r9, sl
 800563c:	930c      	str	r3, [sp, #48]	; 0x30
 800563e:	e7bc      	b.n	80055ba <_dtoa_r+0x1ba>
 8005640:	2301      	movs	r3, #1
 8005642:	9309      	str	r3, [sp, #36]	; 0x24
 8005644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd74      	ble.n	8005734 <_dtoa_r+0x334>
 800564a:	4698      	mov	r8, r3
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	2200      	movs	r2, #0
 8005650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005652:	6072      	str	r2, [r6, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	f102 0014 	add.w	r0, r2, #20
 800565a:	4298      	cmp	r0, r3
 800565c:	6871      	ldr	r1, [r6, #4]
 800565e:	d96e      	bls.n	800573e <_dtoa_r+0x33e>
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fcb0 	bl	8005fc6 <_Balloc>
 8005666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005668:	6030      	str	r0, [r6, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b8 0f0e 	cmp.w	r8, #14
 8005670:	9306      	str	r3, [sp, #24]
 8005672:	f200 80ed 	bhi.w	8005850 <_dtoa_r+0x450>
 8005676:	2d00      	cmp	r5, #0
 8005678:	f000 80ea 	beq.w	8005850 <_dtoa_r+0x450>
 800567c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005680:	f1ba 0f00 	cmp.w	sl, #0
 8005684:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005688:	dd77      	ble.n	800577a <_dtoa_r+0x37a>
 800568a:	4a28      	ldr	r2, [pc, #160]	; (800572c <_dtoa_r+0x32c>)
 800568c:	f00a 030f 	and.w	r3, sl, #15
 8005690:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005694:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005698:	06f0      	lsls	r0, r6, #27
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056a2:	d568      	bpl.n	8005776 <_dtoa_r+0x376>
 80056a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <_dtoa_r+0x330>)
 80056aa:	2503      	movs	r5, #3
 80056ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056b0:	f7fb f84c 	bl	800074c <__aeabi_ddiv>
 80056b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b8:	f006 060f 	and.w	r6, r6, #15
 80056bc:	4f1c      	ldr	r7, [pc, #112]	; (8005730 <_dtoa_r+0x330>)
 80056be:	e04f      	b.n	8005760 <_dtoa_r+0x360>
 80056c0:	2301      	movs	r3, #1
 80056c2:	9309      	str	r3, [sp, #36]	; 0x24
 80056c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056c6:	4453      	add	r3, sl
 80056c8:	f103 0801 	add.w	r8, r3, #1
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	4643      	mov	r3, r8
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bfb8      	it	lt
 80056d4:	2301      	movlt	r3, #1
 80056d6:	e7ba      	b.n	800564e <_dtoa_r+0x24e>
 80056d8:	2300      	movs	r3, #0
 80056da:	e7b2      	b.n	8005642 <_dtoa_r+0x242>
 80056dc:	2300      	movs	r3, #0
 80056de:	e7f0      	b.n	80056c2 <_dtoa_r+0x2c2>
 80056e0:	2501      	movs	r5, #1
 80056e2:	2300      	movs	r3, #0
 80056e4:	9509      	str	r5, [sp, #36]	; 0x24
 80056e6:	931e      	str	r3, [sp, #120]	; 0x78
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	2200      	movs	r2, #0
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	4698      	mov	r8, r3
 80056f2:	2312      	movs	r3, #18
 80056f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80056f6:	e7aa      	b.n	800564e <_dtoa_r+0x24e>
 80056f8:	2301      	movs	r3, #1
 80056fa:	9309      	str	r3, [sp, #36]	; 0x24
 80056fc:	e7f4      	b.n	80056e8 <_dtoa_r+0x2e8>
 80056fe:	bf00      	nop
 8005700:	636f4361 	.word	0x636f4361
 8005704:	3fd287a7 	.word	0x3fd287a7
 8005708:	8b60c8b3 	.word	0x8b60c8b3
 800570c:	3fc68a28 	.word	0x3fc68a28
 8005710:	509f79fb 	.word	0x509f79fb
 8005714:	3fd34413 	.word	0x3fd34413
 8005718:	7ff00000 	.word	0x7ff00000
 800571c:	08006af6 	.word	0x08006af6
 8005720:	08006aed 	.word	0x08006aed
 8005724:	08006aca 	.word	0x08006aca
 8005728:	3ff80000 	.word	0x3ff80000
 800572c:	08006b28 	.word	0x08006b28
 8005730:	08006b00 	.word	0x08006b00
 8005734:	2301      	movs	r3, #1
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	4698      	mov	r8, r3
 800573a:	461a      	mov	r2, r3
 800573c:	e7da      	b.n	80056f4 <_dtoa_r+0x2f4>
 800573e:	3101      	adds	r1, #1
 8005740:	6071      	str	r1, [r6, #4]
 8005742:	0052      	lsls	r2, r2, #1
 8005744:	e787      	b.n	8005656 <_dtoa_r+0x256>
 8005746:	07f1      	lsls	r1, r6, #31
 8005748:	d508      	bpl.n	800575c <_dtoa_r+0x35c>
 800574a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800574e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005752:	f7fa fed1 	bl	80004f8 <__aeabi_dmul>
 8005756:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800575a:	3501      	adds	r5, #1
 800575c:	1076      	asrs	r6, r6, #1
 800575e:	3708      	adds	r7, #8
 8005760:	2e00      	cmp	r6, #0
 8005762:	d1f0      	bne.n	8005746 <_dtoa_r+0x346>
 8005764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800576c:	f7fa ffee 	bl	800074c <__aeabi_ddiv>
 8005770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005774:	e01b      	b.n	80057ae <_dtoa_r+0x3ae>
 8005776:	2502      	movs	r5, #2
 8005778:	e7a0      	b.n	80056bc <_dtoa_r+0x2bc>
 800577a:	f000 80a4 	beq.w	80058c6 <_dtoa_r+0x4c6>
 800577e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005782:	f1ca 0600 	rsb	r6, sl, #0
 8005786:	4ba0      	ldr	r3, [pc, #640]	; (8005a08 <_dtoa_r+0x608>)
 8005788:	f006 020f 	and.w	r2, r6, #15
 800578c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa feb0 	bl	80004f8 <__aeabi_dmul>
 8005798:	2502      	movs	r5, #2
 800579a:	2300      	movs	r3, #0
 800579c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a0:	4f9a      	ldr	r7, [pc, #616]	; (8005a0c <_dtoa_r+0x60c>)
 80057a2:	1136      	asrs	r6, r6, #4
 80057a4:	2e00      	cmp	r6, #0
 80057a6:	f040 8083 	bne.w	80058b0 <_dtoa_r+0x4b0>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e0      	bne.n	8005770 <_dtoa_r+0x370>
 80057ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 808a 	beq.w	80058ca <_dtoa_r+0x4ca>
 80057b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057c2:	2200      	movs	r2, #0
 80057c4:	4b92      	ldr	r3, [pc, #584]	; (8005a10 <_dtoa_r+0x610>)
 80057c6:	f7fb f909 	bl	80009dc <__aeabi_dcmplt>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d07d      	beq.n	80058ca <_dtoa_r+0x4ca>
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
 80057d2:	d07a      	beq.n	80058ca <_dtoa_r+0x4ca>
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd36      	ble.n	8005848 <_dtoa_r+0x448>
 80057da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057de:	2200      	movs	r2, #0
 80057e0:	4b8c      	ldr	r3, [pc, #560]	; (8005a14 <_dtoa_r+0x614>)
 80057e2:	f7fa fe89 	bl	80004f8 <__aeabi_dmul>
 80057e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ea:	9e04      	ldr	r6, [sp, #16]
 80057ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 80057f0:	3501      	adds	r5, #1
 80057f2:	4628      	mov	r0, r5
 80057f4:	f7fa fe16 	bl	8000424 <__aeabi_i2d>
 80057f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fc:	f7fa fe7c 	bl	80004f8 <__aeabi_dmul>
 8005800:	2200      	movs	r2, #0
 8005802:	4b85      	ldr	r3, [pc, #532]	; (8005a18 <_dtoa_r+0x618>)
 8005804:	f7fa fcc2 	bl	800018c <__adddf3>
 8005808:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800580c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005810:	950b      	str	r5, [sp, #44]	; 0x2c
 8005812:	2e00      	cmp	r6, #0
 8005814:	d15c      	bne.n	80058d0 <_dtoa_r+0x4d0>
 8005816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	4b7f      	ldr	r3, [pc, #508]	; (8005a1c <_dtoa_r+0x61c>)
 800581e:	f7fa fcb3 	bl	8000188 <__aeabi_dsub>
 8005822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005824:	462b      	mov	r3, r5
 8005826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800582a:	f7fb f8f5 	bl	8000a18 <__aeabi_dcmpgt>
 800582e:	2800      	cmp	r0, #0
 8005830:	f040 8281 	bne.w	8005d36 <_dtoa_r+0x936>
 8005834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800583a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800583e:	f7fb f8cd 	bl	80009dc <__aeabi_dcmplt>
 8005842:	2800      	cmp	r0, #0
 8005844:	f040 8275 	bne.w	8005d32 <_dtoa_r+0x932>
 8005848:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800584c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005852:	2b00      	cmp	r3, #0
 8005854:	f2c0 814b 	blt.w	8005aee <_dtoa_r+0x6ee>
 8005858:	f1ba 0f0e 	cmp.w	sl, #14
 800585c:	f300 8147 	bgt.w	8005aee <_dtoa_r+0x6ee>
 8005860:	4b69      	ldr	r3, [pc, #420]	; (8005a08 <_dtoa_r+0x608>)
 8005862:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800586e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f280 80d7 	bge.w	8005a24 <_dtoa_r+0x624>
 8005876:	f1b8 0f00 	cmp.w	r8, #0
 800587a:	f300 80d3 	bgt.w	8005a24 <_dtoa_r+0x624>
 800587e:	f040 8257 	bne.w	8005d30 <_dtoa_r+0x930>
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	2200      	movs	r2, #0
 8005888:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <_dtoa_r+0x61c>)
 800588a:	f7fa fe35 	bl	80004f8 <__aeabi_dmul>
 800588e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005892:	f7fb f8b7 	bl	8000a04 <__aeabi_dcmpge>
 8005896:	4646      	mov	r6, r8
 8005898:	4647      	mov	r7, r8
 800589a:	2800      	cmp	r0, #0
 800589c:	f040 822d 	bne.w	8005cfa <_dtoa_r+0x8fa>
 80058a0:	9b06      	ldr	r3, [sp, #24]
 80058a2:	9a06      	ldr	r2, [sp, #24]
 80058a4:	1c5d      	adds	r5, r3, #1
 80058a6:	2331      	movs	r3, #49	; 0x31
 80058a8:	f10a 0a01 	add.w	sl, sl, #1
 80058ac:	7013      	strb	r3, [r2, #0]
 80058ae:	e228      	b.n	8005d02 <_dtoa_r+0x902>
 80058b0:	07f2      	lsls	r2, r6, #31
 80058b2:	d505      	bpl.n	80058c0 <_dtoa_r+0x4c0>
 80058b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b8:	f7fa fe1e 	bl	80004f8 <__aeabi_dmul>
 80058bc:	2301      	movs	r3, #1
 80058be:	3501      	adds	r5, #1
 80058c0:	1076      	asrs	r6, r6, #1
 80058c2:	3708      	adds	r7, #8
 80058c4:	e76e      	b.n	80057a4 <_dtoa_r+0x3a4>
 80058c6:	2502      	movs	r5, #2
 80058c8:	e771      	b.n	80057ae <_dtoa_r+0x3ae>
 80058ca:	4657      	mov	r7, sl
 80058cc:	4646      	mov	r6, r8
 80058ce:	e790      	b.n	80057f2 <_dtoa_r+0x3f2>
 80058d0:	4b4d      	ldr	r3, [pc, #308]	; (8005a08 <_dtoa_r+0x608>)
 80058d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d048      	beq.n	8005972 <_dtoa_r+0x572>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	2000      	movs	r0, #0
 80058e6:	494e      	ldr	r1, [pc, #312]	; (8005a20 <_dtoa_r+0x620>)
 80058e8:	f7fa ff30 	bl	800074c <__aeabi_ddiv>
 80058ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058f0:	f7fa fc4a 	bl	8000188 <__aeabi_dsub>
 80058f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058f8:	9d06      	ldr	r5, [sp, #24]
 80058fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fe:	f7fb f8ab 	bl	8000a58 <__aeabi_d2iz>
 8005902:	9011      	str	r0, [sp, #68]	; 0x44
 8005904:	f7fa fd8e 	bl	8000424 <__aeabi_i2d>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005910:	f7fa fc3a 	bl	8000188 <__aeabi_dsub>
 8005914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800591a:	3330      	adds	r3, #48	; 0x30
 800591c:	f805 3b01 	strb.w	r3, [r5], #1
 8005920:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005924:	f7fb f85a 	bl	80009dc <__aeabi_dcmplt>
 8005928:	2800      	cmp	r0, #0
 800592a:	d163      	bne.n	80059f4 <_dtoa_r+0x5f4>
 800592c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005930:	2000      	movs	r0, #0
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <_dtoa_r+0x610>)
 8005934:	f7fa fc28 	bl	8000188 <__aeabi_dsub>
 8005938:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800593c:	f7fb f84e 	bl	80009dc <__aeabi_dcmplt>
 8005940:	2800      	cmp	r0, #0
 8005942:	f040 80b5 	bne.w	8005ab0 <_dtoa_r+0x6b0>
 8005946:	9b06      	ldr	r3, [sp, #24]
 8005948:	1aeb      	subs	r3, r5, r3
 800594a:	429e      	cmp	r6, r3
 800594c:	f77f af7c 	ble.w	8005848 <_dtoa_r+0x448>
 8005950:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005954:	2200      	movs	r2, #0
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <_dtoa_r+0x614>)
 8005958:	f7fa fdce 	bl	80004f8 <__aeabi_dmul>
 800595c:	2200      	movs	r2, #0
 800595e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005966:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <_dtoa_r+0x614>)
 8005968:	f7fa fdc6 	bl	80004f8 <__aeabi_dmul>
 800596c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005970:	e7c3      	b.n	80058fa <_dtoa_r+0x4fa>
 8005972:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005976:	f7fa fdbf 	bl	80004f8 <__aeabi_dmul>
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005980:	199d      	adds	r5, r3, r6
 8005982:	461e      	mov	r6, r3
 8005984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005988:	f7fb f866 	bl	8000a58 <__aeabi_d2iz>
 800598c:	9011      	str	r0, [sp, #68]	; 0x44
 800598e:	f7fa fd49 	bl	8000424 <__aeabi_i2d>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599a:	f7fa fbf5 	bl	8000188 <__aeabi_dsub>
 800599e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a4:	3330      	adds	r3, #48	; 0x30
 80059a6:	f806 3b01 	strb.w	r3, [r6], #1
 80059aa:	42ae      	cmp	r6, r5
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	d124      	bne.n	80059fc <_dtoa_r+0x5fc>
 80059b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <_dtoa_r+0x620>)
 80059b8:	f7fa fbe8 	bl	800018c <__adddf3>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c4:	f7fb f828 	bl	8000a18 <__aeabi_dcmpgt>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d171      	bne.n	8005ab0 <_dtoa_r+0x6b0>
 80059cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059d0:	2000      	movs	r0, #0
 80059d2:	4913      	ldr	r1, [pc, #76]	; (8005a20 <_dtoa_r+0x620>)
 80059d4:	f7fa fbd8 	bl	8000188 <__aeabi_dsub>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e0:	f7fa fffc 	bl	80009dc <__aeabi_dcmplt>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f43f af2f 	beq.w	8005848 <_dtoa_r+0x448>
 80059ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059ee:	1e6a      	subs	r2, r5, #1
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d001      	beq.n	80059f8 <_dtoa_r+0x5f8>
 80059f4:	46ba      	mov	sl, r7
 80059f6:	e04a      	b.n	8005a8e <_dtoa_r+0x68e>
 80059f8:	4615      	mov	r5, r2
 80059fa:	e7f6      	b.n	80059ea <_dtoa_r+0x5ea>
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <_dtoa_r+0x614>)
 80059fe:	f7fa fd7b 	bl	80004f8 <__aeabi_dmul>
 8005a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a06:	e7bd      	b.n	8005984 <_dtoa_r+0x584>
 8005a08:	08006b28 	.word	0x08006b28
 8005a0c:	08006b00 	.word	0x08006b00
 8005a10:	3ff00000 	.word	0x3ff00000
 8005a14:	40240000 	.word	0x40240000
 8005a18:	401c0000 	.word	0x401c0000
 8005a1c:	40140000 	.word	0x40140000
 8005a20:	3fe00000 	.word	0x3fe00000
 8005a24:	9d06      	ldr	r5, [sp, #24]
 8005a26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2e:	4630      	mov	r0, r6
 8005a30:	4639      	mov	r1, r7
 8005a32:	f7fa fe8b 	bl	800074c <__aeabi_ddiv>
 8005a36:	f7fb f80f 	bl	8000a58 <__aeabi_d2iz>
 8005a3a:	4681      	mov	r9, r0
 8005a3c:	f7fa fcf2 	bl	8000424 <__aeabi_i2d>
 8005a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a44:	f7fa fd58 	bl	80004f8 <__aeabi_dmul>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4639      	mov	r1, r7
 8005a50:	f7fa fb9a 	bl	8000188 <__aeabi_dsub>
 8005a54:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a58:	f805 6b01 	strb.w	r6, [r5], #1
 8005a5c:	9e06      	ldr	r6, [sp, #24]
 8005a5e:	4602      	mov	r2, r0
 8005a60:	1bae      	subs	r6, r5, r6
 8005a62:	45b0      	cmp	r8, r6
 8005a64:	460b      	mov	r3, r1
 8005a66:	d135      	bne.n	8005ad4 <_dtoa_r+0x6d4>
 8005a68:	f7fa fb90 	bl	800018c <__adddf3>
 8005a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	f7fa ffd0 	bl	8000a18 <__aeabi_dcmpgt>
 8005a78:	b9c8      	cbnz	r0, 8005aae <_dtoa_r+0x6ae>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fa ffa1 	bl	80009c8 <__aeabi_dcmpeq>
 8005a86:	b110      	cbz	r0, 8005a8e <_dtoa_r+0x68e>
 8005a88:	f019 0f01 	tst.w	r9, #1
 8005a8c:	d10f      	bne.n	8005aae <_dtoa_r+0x6ae>
 8005a8e:	4659      	mov	r1, fp
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 facc 	bl	800602e <_Bfree>
 8005a96:	2300      	movs	r3, #0
 8005a98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a9a:	702b      	strb	r3, [r5, #0]
 8005a9c:	f10a 0301 	add.w	r3, sl, #1
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f43f acf3 	beq.w	8005490 <_dtoa_r+0x90>
 8005aaa:	601d      	str	r5, [r3, #0]
 8005aac:	e4f0      	b.n	8005490 <_dtoa_r+0x90>
 8005aae:	4657      	mov	r7, sl
 8005ab0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ab4:	1e6b      	subs	r3, r5, #1
 8005ab6:	2a39      	cmp	r2, #57	; 0x39
 8005ab8:	d106      	bne.n	8005ac8 <_dtoa_r+0x6c8>
 8005aba:	9a06      	ldr	r2, [sp, #24]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d107      	bne.n	8005ad0 <_dtoa_r+0x6d0>
 8005ac0:	2330      	movs	r3, #48	; 0x30
 8005ac2:	7013      	strb	r3, [r2, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	3701      	adds	r7, #1
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	3201      	adds	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e791      	b.n	80059f4 <_dtoa_r+0x5f4>
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	e7ed      	b.n	8005ab0 <_dtoa_r+0x6b0>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	4b99      	ldr	r3, [pc, #612]	; (8005d3c <_dtoa_r+0x93c>)
 8005ad8:	f7fa fd0e 	bl	80004f8 <__aeabi_dmul>
 8005adc:	2200      	movs	r2, #0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	f7fa ff70 	bl	80009c8 <__aeabi_dcmpeq>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d09e      	beq.n	8005a2a <_dtoa_r+0x62a>
 8005aec:	e7cf      	b.n	8005a8e <_dtoa_r+0x68e>
 8005aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	f000 8088 	beq.w	8005c06 <_dtoa_r+0x806>
 8005af6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005af8:	2a01      	cmp	r2, #1
 8005afa:	dc6d      	bgt.n	8005bd8 <_dtoa_r+0x7d8>
 8005afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d066      	beq.n	8005bd0 <_dtoa_r+0x7d0>
 8005b02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b06:	464d      	mov	r5, r9
 8005b08:	9e08      	ldr	r6, [sp, #32]
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	441a      	add	r2, r3
 8005b10:	4620      	mov	r0, r4
 8005b12:	4499      	add	r9, r3
 8005b14:	9207      	str	r2, [sp, #28]
 8005b16:	f000 fb2a 	bl	800616e <__i2b>
 8005b1a:	4607      	mov	r7, r0
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	dd0b      	ble.n	8005b38 <_dtoa_r+0x738>
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd08      	ble.n	8005b38 <_dtoa_r+0x738>
 8005b26:	42ab      	cmp	r3, r5
 8005b28:	bfa8      	it	ge
 8005b2a:	462b      	movge	r3, r5
 8005b2c:	9a07      	ldr	r2, [sp, #28]
 8005b2e:	eba9 0903 	sub.w	r9, r9, r3
 8005b32:	1aed      	subs	r5, r5, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	9b08      	ldr	r3, [sp, #32]
 8005b3a:	b1eb      	cbz	r3, 8005b78 <_dtoa_r+0x778>
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d065      	beq.n	8005c0e <_dtoa_r+0x80e>
 8005b42:	b18e      	cbz	r6, 8005b68 <_dtoa_r+0x768>
 8005b44:	4639      	mov	r1, r7
 8005b46:	4632      	mov	r2, r6
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fbaf 	bl	80062ac <__pow5mult>
 8005b4e:	465a      	mov	r2, fp
 8005b50:	4601      	mov	r1, r0
 8005b52:	4607      	mov	r7, r0
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 fb13 	bl	8006180 <__multiply>
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fa65 	bl	800602e <_Bfree>
 8005b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b66:	469b      	mov	fp, r3
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	1b9a      	subs	r2, r3, r6
 8005b6c:	d004      	beq.n	8005b78 <_dtoa_r+0x778>
 8005b6e:	4659      	mov	r1, fp
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 fb9b 	bl	80062ac <__pow5mult>
 8005b76:	4683      	mov	fp, r0
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 faf7 	bl	800616e <__i2b>
 8005b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b82:	4606      	mov	r6, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 81c6 	beq.w	8005f16 <_dtoa_r+0xb16>
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fb8c 	bl	80062ac <__pow5mult>
 8005b94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b96:	4606      	mov	r6, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	dc3e      	bgt.n	8005c1a <_dtoa_r+0x81a>
 8005b9c:	9b02      	ldr	r3, [sp, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d137      	bne.n	8005c12 <_dtoa_r+0x812>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d134      	bne.n	8005c16 <_dtoa_r+0x816>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	0d1b      	lsrs	r3, r3, #20
 8005bb4:	051b      	lsls	r3, r3, #20
 8005bb6:	b12b      	cbz	r3, 8005bc4 <_dtoa_r+0x7c4>
 8005bb8:	9b07      	ldr	r3, [sp, #28]
 8005bba:	f109 0901 	add.w	r9, r9, #1
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	9307      	str	r3, [sp, #28]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	9308      	str	r3, [sp, #32]
 8005bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d128      	bne.n	8005c1e <_dtoa_r+0x81e>
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e02e      	b.n	8005c2e <_dtoa_r+0x82e>
 8005bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bd6:	e796      	b.n	8005b06 <_dtoa_r+0x706>
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	f108 36ff 	add.w	r6, r8, #4294967295
 8005bde:	42b3      	cmp	r3, r6
 8005be0:	bfb7      	itett	lt
 8005be2:	9b08      	ldrlt	r3, [sp, #32]
 8005be4:	1b9e      	subge	r6, r3, r6
 8005be6:	1af2      	sublt	r2, r6, r3
 8005be8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005bea:	bfbf      	itttt	lt
 8005bec:	9608      	strlt	r6, [sp, #32]
 8005bee:	189b      	addlt	r3, r3, r2
 8005bf0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005bf2:	2600      	movlt	r6, #0
 8005bf4:	f1b8 0f00 	cmp.w	r8, #0
 8005bf8:	bfb9      	ittee	lt
 8005bfa:	eba9 0508 	sublt.w	r5, r9, r8
 8005bfe:	2300      	movlt	r3, #0
 8005c00:	464d      	movge	r5, r9
 8005c02:	4643      	movge	r3, r8
 8005c04:	e781      	b.n	8005b0a <_dtoa_r+0x70a>
 8005c06:	9e08      	ldr	r6, [sp, #32]
 8005c08:	464d      	mov	r5, r9
 8005c0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c0c:	e786      	b.n	8005b1c <_dtoa_r+0x71c>
 8005c0e:	9a08      	ldr	r2, [sp, #32]
 8005c10:	e7ad      	b.n	8005b6e <_dtoa_r+0x76e>
 8005c12:	2300      	movs	r3, #0
 8005c14:	e7d6      	b.n	8005bc4 <_dtoa_r+0x7c4>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	e7d4      	b.n	8005bc4 <_dtoa_r+0x7c4>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9308      	str	r3, [sp, #32]
 8005c1e:	6933      	ldr	r3, [r6, #16]
 8005c20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c24:	6918      	ldr	r0, [r3, #16]
 8005c26:	f000 fa54 	bl	80060d2 <__hi0bits>
 8005c2a:	f1c0 0020 	rsb	r0, r0, #32
 8005c2e:	9b07      	ldr	r3, [sp, #28]
 8005c30:	4418      	add	r0, r3
 8005c32:	f010 001f 	ands.w	r0, r0, #31
 8005c36:	d047      	beq.n	8005cc8 <_dtoa_r+0x8c8>
 8005c38:	f1c0 0320 	rsb	r3, r0, #32
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	dd3b      	ble.n	8005cb8 <_dtoa_r+0x8b8>
 8005c40:	9b07      	ldr	r3, [sp, #28]
 8005c42:	f1c0 001c 	rsb	r0, r0, #28
 8005c46:	4481      	add	r9, r0
 8005c48:	4405      	add	r5, r0
 8005c4a:	4403      	add	r3, r0
 8005c4c:	9307      	str	r3, [sp, #28]
 8005c4e:	f1b9 0f00 	cmp.w	r9, #0
 8005c52:	dd05      	ble.n	8005c60 <_dtoa_r+0x860>
 8005c54:	4659      	mov	r1, fp
 8005c56:	464a      	mov	r2, r9
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fb75 	bl	8006348 <__lshift>
 8005c5e:	4683      	mov	fp, r0
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	dd05      	ble.n	8005c72 <_dtoa_r+0x872>
 8005c66:	4631      	mov	r1, r6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fb6c 	bl	8006348 <__lshift>
 8005c70:	4606      	mov	r6, r0
 8005c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c74:	b353      	cbz	r3, 8005ccc <_dtoa_r+0x8cc>
 8005c76:	4631      	mov	r1, r6
 8005c78:	4658      	mov	r0, fp
 8005c7a:	f000 fbb9 	bl	80063f0 <__mcmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	da24      	bge.n	8005ccc <_dtoa_r+0x8cc>
 8005c82:	2300      	movs	r3, #0
 8005c84:	4659      	mov	r1, fp
 8005c86:	220a      	movs	r2, #10
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f9e7 	bl	800605c <__multadd>
 8005c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c94:	4683      	mov	fp, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8144 	beq.w	8005f24 <_dtoa_r+0xb24>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	220a      	movs	r2, #10
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 f9da 	bl	800605c <__multadd>
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	4607      	mov	r7, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	dc4d      	bgt.n	8005d4c <_dtoa_r+0x94c>
 8005cb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	dd4a      	ble.n	8005d4c <_dtoa_r+0x94c>
 8005cb6:	e011      	b.n	8005cdc <_dtoa_r+0x8dc>
 8005cb8:	d0c9      	beq.n	8005c4e <_dtoa_r+0x84e>
 8005cba:	9a07      	ldr	r2, [sp, #28]
 8005cbc:	331c      	adds	r3, #28
 8005cbe:	441a      	add	r2, r3
 8005cc0:	4499      	add	r9, r3
 8005cc2:	441d      	add	r5, r3
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	e7c1      	b.n	8005c4c <_dtoa_r+0x84c>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	e7f6      	b.n	8005cba <_dtoa_r+0x8ba>
 8005ccc:	f1b8 0f00 	cmp.w	r8, #0
 8005cd0:	dc36      	bgt.n	8005d40 <_dtoa_r+0x940>
 8005cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	dd33      	ble.n	8005d40 <_dtoa_r+0x940>
 8005cd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	b963      	cbnz	r3, 8005cfa <_dtoa_r+0x8fa>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 f9b9 	bl	800605c <__multadd>
 8005cea:	4601      	mov	r1, r0
 8005cec:	4606      	mov	r6, r0
 8005cee:	4658      	mov	r0, fp
 8005cf0:	f000 fb7e 	bl	80063f0 <__mcmp>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f73f add3 	bgt.w	80058a0 <_dtoa_r+0x4a0>
 8005cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cfc:	9d06      	ldr	r5, [sp, #24]
 8005cfe:	ea6f 0a03 	mvn.w	sl, r3
 8005d02:	f04f 0900 	mov.w	r9, #0
 8005d06:	4631      	mov	r1, r6
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f990 	bl	800602e <_Bfree>
 8005d0e:	2f00      	cmp	r7, #0
 8005d10:	f43f aebd 	beq.w	8005a8e <_dtoa_r+0x68e>
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	d005      	beq.n	8005d26 <_dtoa_r+0x926>
 8005d1a:	45b9      	cmp	r9, r7
 8005d1c:	d003      	beq.n	8005d26 <_dtoa_r+0x926>
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f984 	bl	800602e <_Bfree>
 8005d26:	4639      	mov	r1, r7
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f980 	bl	800602e <_Bfree>
 8005d2e:	e6ae      	b.n	8005a8e <_dtoa_r+0x68e>
 8005d30:	2600      	movs	r6, #0
 8005d32:	4637      	mov	r7, r6
 8005d34:	e7e1      	b.n	8005cfa <_dtoa_r+0x8fa>
 8005d36:	46ba      	mov	sl, r7
 8005d38:	4637      	mov	r7, r6
 8005d3a:	e5b1      	b.n	80058a0 <_dtoa_r+0x4a0>
 8005d3c:	40240000 	.word	0x40240000
 8005d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d42:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80f3 	beq.w	8005f32 <_dtoa_r+0xb32>
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	dd05      	ble.n	8005d5c <_dtoa_r+0x95c>
 8005d50:	4639      	mov	r1, r7
 8005d52:	462a      	mov	r2, r5
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 faf7 	bl	8006348 <__lshift>
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	9b08      	ldr	r3, [sp, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d04c      	beq.n	8005dfc <_dtoa_r+0x9fc>
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 f92e 	bl	8005fc6 <_Balloc>
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	f107 010c 	add.w	r1, r7, #12
 8005d72:	3202      	adds	r2, #2
 8005d74:	0092      	lsls	r2, r2, #2
 8005d76:	300c      	adds	r0, #12
 8005d78:	f000 f91a 	bl	8005fb0 <memcpy>
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fae1 	bl	8006348 <__lshift>
 8005d86:	46b9      	mov	r9, r7
 8005d88:	4607      	mov	r7, r0
 8005d8a:	9b06      	ldr	r3, [sp, #24]
 8005d8c:	9307      	str	r3, [sp, #28]
 8005d8e:	9b02      	ldr	r3, [sp, #8]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	9308      	str	r3, [sp, #32]
 8005d96:	4631      	mov	r1, r6
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f7ff faa1 	bl	80052e0 <quorem>
 8005d9e:	4649      	mov	r1, r9
 8005da0:	4605      	mov	r5, r0
 8005da2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005da6:	4658      	mov	r0, fp
 8005da8:	f000 fb22 	bl	80063f0 <__mcmp>
 8005dac:	463a      	mov	r2, r7
 8005dae:	9002      	str	r0, [sp, #8]
 8005db0:	4631      	mov	r1, r6
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 fb36 	bl	8006424 <__mdiff>
 8005db8:	68c3      	ldr	r3, [r0, #12]
 8005dba:	4602      	mov	r2, r0
 8005dbc:	bb03      	cbnz	r3, 8005e00 <_dtoa_r+0xa00>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	9009      	str	r0, [sp, #36]	; 0x24
 8005dc2:	4658      	mov	r0, fp
 8005dc4:	f000 fb14 	bl	80063f0 <__mcmp>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4620      	mov	r0, r4
 8005dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd2:	f000 f92c 	bl	800602e <_Bfree>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	b9a3      	cbnz	r3, 8005e04 <_dtoa_r+0xa04>
 8005dda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ddc:	b992      	cbnz	r2, 8005e04 <_dtoa_r+0xa04>
 8005dde:	9a08      	ldr	r2, [sp, #32]
 8005de0:	b982      	cbnz	r2, 8005e04 <_dtoa_r+0xa04>
 8005de2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005de6:	d029      	beq.n	8005e3c <_dtoa_r+0xa3c>
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dd01      	ble.n	8005df2 <_dtoa_r+0x9f2>
 8005dee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005df2:	9b07      	ldr	r3, [sp, #28]
 8005df4:	1c5d      	adds	r5, r3, #1
 8005df6:	f883 8000 	strb.w	r8, [r3]
 8005dfa:	e784      	b.n	8005d06 <_dtoa_r+0x906>
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	e7c2      	b.n	8005d86 <_dtoa_r+0x986>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e7e3      	b.n	8005dcc <_dtoa_r+0x9cc>
 8005e04:	9a02      	ldr	r2, [sp, #8]
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	db04      	blt.n	8005e14 <_dtoa_r+0xa14>
 8005e0a:	d123      	bne.n	8005e54 <_dtoa_r+0xa54>
 8005e0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e0e:	bb0a      	cbnz	r2, 8005e54 <_dtoa_r+0xa54>
 8005e10:	9a08      	ldr	r2, [sp, #32]
 8005e12:	b9fa      	cbnz	r2, 8005e54 <_dtoa_r+0xa54>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	ddec      	ble.n	8005df2 <_dtoa_r+0x9f2>
 8005e18:	4659      	mov	r1, fp
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fa93 	bl	8006348 <__lshift>
 8005e22:	4631      	mov	r1, r6
 8005e24:	4683      	mov	fp, r0
 8005e26:	f000 fae3 	bl	80063f0 <__mcmp>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	dc03      	bgt.n	8005e36 <_dtoa_r+0xa36>
 8005e2e:	d1e0      	bne.n	8005df2 <_dtoa_r+0x9f2>
 8005e30:	f018 0f01 	tst.w	r8, #1
 8005e34:	d0dd      	beq.n	8005df2 <_dtoa_r+0x9f2>
 8005e36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e3a:	d1d8      	bne.n	8005dee <_dtoa_r+0x9ee>
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	9a07      	ldr	r2, [sp, #28]
 8005e40:	1c5d      	adds	r5, r3, #1
 8005e42:	2339      	movs	r3, #57	; 0x39
 8005e44:	7013      	strb	r3, [r2, #0]
 8005e46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e4a:	1e6a      	subs	r2, r5, #1
 8005e4c:	2b39      	cmp	r3, #57	; 0x39
 8005e4e:	d04d      	beq.n	8005eec <_dtoa_r+0xaec>
 8005e50:	3301      	adds	r3, #1
 8005e52:	e052      	b.n	8005efa <_dtoa_r+0xafa>
 8005e54:	9a07      	ldr	r2, [sp, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f102 0501 	add.w	r5, r2, #1
 8005e5c:	dd06      	ble.n	8005e6c <_dtoa_r+0xa6c>
 8005e5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e62:	d0eb      	beq.n	8005e3c <_dtoa_r+0xa3c>
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	9b07      	ldr	r3, [sp, #28]
 8005e6a:	e7c4      	b.n	8005df6 <_dtoa_r+0x9f6>
 8005e6c:	9b06      	ldr	r3, [sp, #24]
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	1aeb      	subs	r3, r5, r3
 8005e72:	4293      	cmp	r3, r2
 8005e74:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e78:	d021      	beq.n	8005ebe <_dtoa_r+0xabe>
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	220a      	movs	r2, #10
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 f8eb 	bl	800605c <__multadd>
 8005e86:	45b9      	cmp	r9, r7
 8005e88:	4683      	mov	fp, r0
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	f04f 020a 	mov.w	r2, #10
 8005e92:	4649      	mov	r1, r9
 8005e94:	4620      	mov	r0, r4
 8005e96:	d105      	bne.n	8005ea4 <_dtoa_r+0xaa4>
 8005e98:	f000 f8e0 	bl	800605c <__multadd>
 8005e9c:	4681      	mov	r9, r0
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	9507      	str	r5, [sp, #28]
 8005ea2:	e778      	b.n	8005d96 <_dtoa_r+0x996>
 8005ea4:	f000 f8da 	bl	800605c <__multadd>
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4681      	mov	r9, r0
 8005eac:	2300      	movs	r3, #0
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 f8d3 	bl	800605c <__multadd>
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	e7f2      	b.n	8005ea0 <_dtoa_r+0xaa0>
 8005eba:	f04f 0900 	mov.w	r9, #0
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fa40 	bl	8006348 <__lshift>
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4683      	mov	fp, r0
 8005ecc:	f000 fa90 	bl	80063f0 <__mcmp>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dcb8      	bgt.n	8005e46 <_dtoa_r+0xa46>
 8005ed4:	d102      	bne.n	8005edc <_dtoa_r+0xadc>
 8005ed6:	f018 0f01 	tst.w	r8, #1
 8005eda:	d1b4      	bne.n	8005e46 <_dtoa_r+0xa46>
 8005edc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ee0:	1e6a      	subs	r2, r5, #1
 8005ee2:	2b30      	cmp	r3, #48	; 0x30
 8005ee4:	f47f af0f 	bne.w	8005d06 <_dtoa_r+0x906>
 8005ee8:	4615      	mov	r5, r2
 8005eea:	e7f7      	b.n	8005edc <_dtoa_r+0xadc>
 8005eec:	9b06      	ldr	r3, [sp, #24]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d105      	bne.n	8005efe <_dtoa_r+0xafe>
 8005ef2:	2331      	movs	r3, #49	; 0x31
 8005ef4:	9a06      	ldr	r2, [sp, #24]
 8005ef6:	f10a 0a01 	add.w	sl, sl, #1
 8005efa:	7013      	strb	r3, [r2, #0]
 8005efc:	e703      	b.n	8005d06 <_dtoa_r+0x906>
 8005efe:	4615      	mov	r5, r2
 8005f00:	e7a1      	b.n	8005e46 <_dtoa_r+0xa46>
 8005f02:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <_dtoa_r+0xb60>)
 8005f04:	f7ff bae1 	b.w	80054ca <_dtoa_r+0xca>
 8005f08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f47f aabb 	bne.w	8005486 <_dtoa_r+0x86>
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <_dtoa_r+0xb64>)
 8005f12:	f7ff bada 	b.w	80054ca <_dtoa_r+0xca>
 8005f16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f77f ae3f 	ble.w	8005b9c <_dtoa_r+0x79c>
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f20:	9308      	str	r3, [sp, #32]
 8005f22:	e653      	b.n	8005bcc <_dtoa_r+0x7cc>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dc03      	bgt.n	8005f32 <_dtoa_r+0xb32>
 8005f2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	f73f aed5 	bgt.w	8005cdc <_dtoa_r+0x8dc>
 8005f32:	9d06      	ldr	r5, [sp, #24]
 8005f34:	4631      	mov	r1, r6
 8005f36:	4658      	mov	r0, fp
 8005f38:	f7ff f9d2 	bl	80052e0 <quorem>
 8005f3c:	9b06      	ldr	r3, [sp, #24]
 8005f3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f42:	f805 8b01 	strb.w	r8, [r5], #1
 8005f46:	9a04      	ldr	r2, [sp, #16]
 8005f48:	1aeb      	subs	r3, r5, r3
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	ddb5      	ble.n	8005eba <_dtoa_r+0xaba>
 8005f4e:	4659      	mov	r1, fp
 8005f50:	2300      	movs	r3, #0
 8005f52:	220a      	movs	r2, #10
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 f881 	bl	800605c <__multadd>
 8005f5a:	4683      	mov	fp, r0
 8005f5c:	e7ea      	b.n	8005f34 <_dtoa_r+0xb34>
 8005f5e:	bf00      	nop
 8005f60:	08006ac9 	.word	0x08006ac9
 8005f64:	08006aed 	.word	0x08006aed

08005f68 <_localeconv_r>:
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <_localeconv_r+0x14>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a18      	ldr	r0, [r3, #32]
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <_localeconv_r+0x18>)
 8005f70:	2800      	cmp	r0, #0
 8005f72:	bf08      	it	eq
 8005f74:	4618      	moveq	r0, r3
 8005f76:	30f0      	adds	r0, #240	; 0xf0
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000008 	.word	0x20000008
 8005f80:	2000006c 	.word	0x2000006c

08005f84 <malloc>:
 8005f84:	4b02      	ldr	r3, [pc, #8]	; (8005f90 <malloc+0xc>)
 8005f86:	4601      	mov	r1, r0
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	f000 bb53 	b.w	8006634 <_malloc_r>
 8005f8e:	bf00      	nop
 8005f90:	20000008 	.word	0x20000008

08005f94 <memchr>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b2c9      	uxtb	r1, r1
 8005f98:	4402      	add	r2, r0
 8005f9a:	4290      	cmp	r0, r2
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	d101      	bne.n	8005fa4 <memchr+0x10>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e003      	b.n	8005fac <memchr+0x18>
 8005fa4:	781c      	ldrb	r4, [r3, #0]
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	428c      	cmp	r4, r1
 8005faa:	d1f6      	bne.n	8005f9a <memchr+0x6>
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <memcpy>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	1e43      	subs	r3, r0, #1
 8005fb4:	440a      	add	r2, r1
 8005fb6:	4291      	cmp	r1, r2
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc4:	e7f7      	b.n	8005fb6 <memcpy+0x6>

08005fc6 <_Balloc>:
 8005fc6:	b570      	push	{r4, r5, r6, lr}
 8005fc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fca:	4604      	mov	r4, r0
 8005fcc:	460e      	mov	r6, r1
 8005fce:	b93d      	cbnz	r5, 8005fe0 <_Balloc+0x1a>
 8005fd0:	2010      	movs	r0, #16
 8005fd2:	f7ff ffd7 	bl	8005f84 <malloc>
 8005fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8005fd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fdc:	6005      	str	r5, [r0, #0]
 8005fde:	60c5      	str	r5, [r0, #12]
 8005fe0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fe2:	68eb      	ldr	r3, [r5, #12]
 8005fe4:	b183      	cbz	r3, 8006008 <_Balloc+0x42>
 8005fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005fee:	b9b8      	cbnz	r0, 8006020 <_Balloc+0x5a>
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	fa01 f506 	lsl.w	r5, r1, r6
 8005ff6:	1d6a      	adds	r2, r5, #5
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fabf 	bl	800657e <_calloc_r>
 8006000:	b160      	cbz	r0, 800601c <_Balloc+0x56>
 8006002:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006006:	e00e      	b.n	8006026 <_Balloc+0x60>
 8006008:	2221      	movs	r2, #33	; 0x21
 800600a:	2104      	movs	r1, #4
 800600c:	4620      	mov	r0, r4
 800600e:	f000 fab6 	bl	800657e <_calloc_r>
 8006012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006014:	60e8      	str	r0, [r5, #12]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e4      	bne.n	8005fe6 <_Balloc+0x20>
 800601c:	2000      	movs	r0, #0
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	6802      	ldr	r2, [r0, #0]
 8006022:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006026:	2300      	movs	r3, #0
 8006028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800602c:	e7f7      	b.n	800601e <_Balloc+0x58>

0800602e <_Bfree>:
 800602e:	b570      	push	{r4, r5, r6, lr}
 8006030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006032:	4606      	mov	r6, r0
 8006034:	460d      	mov	r5, r1
 8006036:	b93c      	cbnz	r4, 8006048 <_Bfree+0x1a>
 8006038:	2010      	movs	r0, #16
 800603a:	f7ff ffa3 	bl	8005f84 <malloc>
 800603e:	6270      	str	r0, [r6, #36]	; 0x24
 8006040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006044:	6004      	str	r4, [r0, #0]
 8006046:	60c4      	str	r4, [r0, #12]
 8006048:	b13d      	cbz	r5, 800605a <_Bfree+0x2c>
 800604a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800604c:	686a      	ldr	r2, [r5, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006054:	6029      	str	r1, [r5, #0]
 8006056:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800605a:	bd70      	pop	{r4, r5, r6, pc}

0800605c <__multadd>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	461f      	mov	r7, r3
 8006062:	4606      	mov	r6, r0
 8006064:	460c      	mov	r4, r1
 8006066:	2300      	movs	r3, #0
 8006068:	690d      	ldr	r5, [r1, #16]
 800606a:	f101 0c14 	add.w	ip, r1, #20
 800606e:	f8dc 0000 	ldr.w	r0, [ip]
 8006072:	3301      	adds	r3, #1
 8006074:	b281      	uxth	r1, r0
 8006076:	fb02 7101 	mla	r1, r2, r1, r7
 800607a:	0c00      	lsrs	r0, r0, #16
 800607c:	0c0f      	lsrs	r7, r1, #16
 800607e:	fb02 7000 	mla	r0, r2, r0, r7
 8006082:	b289      	uxth	r1, r1
 8006084:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006088:	429d      	cmp	r5, r3
 800608a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800608e:	f84c 1b04 	str.w	r1, [ip], #4
 8006092:	dcec      	bgt.n	800606e <__multadd+0x12>
 8006094:	b1d7      	cbz	r7, 80060cc <__multadd+0x70>
 8006096:	68a3      	ldr	r3, [r4, #8]
 8006098:	42ab      	cmp	r3, r5
 800609a:	dc12      	bgt.n	80060c2 <__multadd+0x66>
 800609c:	6861      	ldr	r1, [r4, #4]
 800609e:	4630      	mov	r0, r6
 80060a0:	3101      	adds	r1, #1
 80060a2:	f7ff ff90 	bl	8005fc6 <_Balloc>
 80060a6:	4680      	mov	r8, r0
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	f104 010c 	add.w	r1, r4, #12
 80060ae:	3202      	adds	r2, #2
 80060b0:	0092      	lsls	r2, r2, #2
 80060b2:	300c      	adds	r0, #12
 80060b4:	f7ff ff7c 	bl	8005fb0 <memcpy>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ffb7 	bl	800602e <_Bfree>
 80060c0:	4644      	mov	r4, r8
 80060c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060c6:	3501      	adds	r5, #1
 80060c8:	615f      	str	r7, [r3, #20]
 80060ca:	6125      	str	r5, [r4, #16]
 80060cc:	4620      	mov	r0, r4
 80060ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060d2 <__hi0bits>:
 80060d2:	0c02      	lsrs	r2, r0, #16
 80060d4:	0412      	lsls	r2, r2, #16
 80060d6:	4603      	mov	r3, r0
 80060d8:	b9b2      	cbnz	r2, 8006108 <__hi0bits+0x36>
 80060da:	0403      	lsls	r3, r0, #16
 80060dc:	2010      	movs	r0, #16
 80060de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060e2:	bf04      	itt	eq
 80060e4:	021b      	lsleq	r3, r3, #8
 80060e6:	3008      	addeq	r0, #8
 80060e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060ec:	bf04      	itt	eq
 80060ee:	011b      	lsleq	r3, r3, #4
 80060f0:	3004      	addeq	r0, #4
 80060f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060f6:	bf04      	itt	eq
 80060f8:	009b      	lsleq	r3, r3, #2
 80060fa:	3002      	addeq	r0, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	db06      	blt.n	800610e <__hi0bits+0x3c>
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	d503      	bpl.n	800610c <__hi0bits+0x3a>
 8006104:	3001      	adds	r0, #1
 8006106:	4770      	bx	lr
 8006108:	2000      	movs	r0, #0
 800610a:	e7e8      	b.n	80060de <__hi0bits+0xc>
 800610c:	2020      	movs	r0, #32
 800610e:	4770      	bx	lr

08006110 <__lo0bits>:
 8006110:	6803      	ldr	r3, [r0, #0]
 8006112:	4601      	mov	r1, r0
 8006114:	f013 0207 	ands.w	r2, r3, #7
 8006118:	d00b      	beq.n	8006132 <__lo0bits+0x22>
 800611a:	07da      	lsls	r2, r3, #31
 800611c:	d423      	bmi.n	8006166 <__lo0bits+0x56>
 800611e:	0798      	lsls	r0, r3, #30
 8006120:	bf49      	itett	mi
 8006122:	085b      	lsrmi	r3, r3, #1
 8006124:	089b      	lsrpl	r3, r3, #2
 8006126:	2001      	movmi	r0, #1
 8006128:	600b      	strmi	r3, [r1, #0]
 800612a:	bf5c      	itt	pl
 800612c:	600b      	strpl	r3, [r1, #0]
 800612e:	2002      	movpl	r0, #2
 8006130:	4770      	bx	lr
 8006132:	b298      	uxth	r0, r3
 8006134:	b9a8      	cbnz	r0, 8006162 <__lo0bits+0x52>
 8006136:	2010      	movs	r0, #16
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800613e:	bf04      	itt	eq
 8006140:	0a1b      	lsreq	r3, r3, #8
 8006142:	3008      	addeq	r0, #8
 8006144:	071a      	lsls	r2, r3, #28
 8006146:	bf04      	itt	eq
 8006148:	091b      	lsreq	r3, r3, #4
 800614a:	3004      	addeq	r0, #4
 800614c:	079a      	lsls	r2, r3, #30
 800614e:	bf04      	itt	eq
 8006150:	089b      	lsreq	r3, r3, #2
 8006152:	3002      	addeq	r0, #2
 8006154:	07da      	lsls	r2, r3, #31
 8006156:	d402      	bmi.n	800615e <__lo0bits+0x4e>
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	d006      	beq.n	800616a <__lo0bits+0x5a>
 800615c:	3001      	adds	r0, #1
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	4770      	bx	lr
 8006162:	4610      	mov	r0, r2
 8006164:	e7e9      	b.n	800613a <__lo0bits+0x2a>
 8006166:	2000      	movs	r0, #0
 8006168:	4770      	bx	lr
 800616a:	2020      	movs	r0, #32
 800616c:	4770      	bx	lr

0800616e <__i2b>:
 800616e:	b510      	push	{r4, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	2101      	movs	r1, #1
 8006174:	f7ff ff27 	bl	8005fc6 <_Balloc>
 8006178:	2201      	movs	r2, #1
 800617a:	6144      	str	r4, [r0, #20]
 800617c:	6102      	str	r2, [r0, #16]
 800617e:	bd10      	pop	{r4, pc}

08006180 <__multiply>:
 8006180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	4614      	mov	r4, r2
 8006186:	690a      	ldr	r2, [r1, #16]
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	4688      	mov	r8, r1
 800618c:	429a      	cmp	r2, r3
 800618e:	bfbe      	ittt	lt
 8006190:	460b      	movlt	r3, r1
 8006192:	46a0      	movlt	r8, r4
 8006194:	461c      	movlt	r4, r3
 8006196:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800619a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800619e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061a6:	eb07 0609 	add.w	r6, r7, r9
 80061aa:	42b3      	cmp	r3, r6
 80061ac:	bfb8      	it	lt
 80061ae:	3101      	addlt	r1, #1
 80061b0:	f7ff ff09 	bl	8005fc6 <_Balloc>
 80061b4:	f100 0514 	add.w	r5, r0, #20
 80061b8:	462b      	mov	r3, r5
 80061ba:	2200      	movs	r2, #0
 80061bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80061c0:	4573      	cmp	r3, lr
 80061c2:	d316      	bcc.n	80061f2 <__multiply+0x72>
 80061c4:	f104 0214 	add.w	r2, r4, #20
 80061c8:	f108 0114 	add.w	r1, r8, #20
 80061cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	9b00      	ldr	r3, [sp, #0]
 80061d8:	9201      	str	r2, [sp, #4]
 80061da:	4293      	cmp	r3, r2
 80061dc:	d80c      	bhi.n	80061f8 <__multiply+0x78>
 80061de:	2e00      	cmp	r6, #0
 80061e0:	dd03      	ble.n	80061ea <__multiply+0x6a>
 80061e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d05d      	beq.n	80062a6 <__multiply+0x126>
 80061ea:	6106      	str	r6, [r0, #16]
 80061ec:	b003      	add	sp, #12
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	f843 2b04 	str.w	r2, [r3], #4
 80061f6:	e7e3      	b.n	80061c0 <__multiply+0x40>
 80061f8:	f8b2 b000 	ldrh.w	fp, [r2]
 80061fc:	f1bb 0f00 	cmp.w	fp, #0
 8006200:	d023      	beq.n	800624a <__multiply+0xca>
 8006202:	4689      	mov	r9, r1
 8006204:	46ac      	mov	ip, r5
 8006206:	f04f 0800 	mov.w	r8, #0
 800620a:	f859 4b04 	ldr.w	r4, [r9], #4
 800620e:	f8dc a000 	ldr.w	sl, [ip]
 8006212:	b2a3      	uxth	r3, r4
 8006214:	fa1f fa8a 	uxth.w	sl, sl
 8006218:	fb0b a303 	mla	r3, fp, r3, sl
 800621c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006220:	f8dc 4000 	ldr.w	r4, [ip]
 8006224:	4443      	add	r3, r8
 8006226:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800622a:	fb0b 840a 	mla	r4, fp, sl, r8
 800622e:	46e2      	mov	sl, ip
 8006230:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800623a:	454f      	cmp	r7, r9
 800623c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006240:	f84a 3b04 	str.w	r3, [sl], #4
 8006244:	d82b      	bhi.n	800629e <__multiply+0x11e>
 8006246:	f8cc 8004 	str.w	r8, [ip, #4]
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	3204      	adds	r2, #4
 800624e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006252:	f1ba 0f00 	cmp.w	sl, #0
 8006256:	d020      	beq.n	800629a <__multiply+0x11a>
 8006258:	4689      	mov	r9, r1
 800625a:	46a8      	mov	r8, r5
 800625c:	f04f 0b00 	mov.w	fp, #0
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	f8b9 c000 	ldrh.w	ip, [r9]
 8006266:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800626a:	b29b      	uxth	r3, r3
 800626c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006270:	46c4      	mov	ip, r8
 8006272:	445c      	add	r4, fp
 8006274:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006278:	f84c 3b04 	str.w	r3, [ip], #4
 800627c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006280:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	fb0a b303 	mla	r3, sl, r3, fp
 800628a:	454f      	cmp	r7, r9
 800628c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006290:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006294:	d805      	bhi.n	80062a2 <__multiply+0x122>
 8006296:	f8c8 3004 	str.w	r3, [r8, #4]
 800629a:	3504      	adds	r5, #4
 800629c:	e79b      	b.n	80061d6 <__multiply+0x56>
 800629e:	46d4      	mov	ip, sl
 80062a0:	e7b3      	b.n	800620a <__multiply+0x8a>
 80062a2:	46e0      	mov	r8, ip
 80062a4:	e7dd      	b.n	8006262 <__multiply+0xe2>
 80062a6:	3e01      	subs	r6, #1
 80062a8:	e799      	b.n	80061de <__multiply+0x5e>
	...

080062ac <__pow5mult>:
 80062ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b0:	4615      	mov	r5, r2
 80062b2:	f012 0203 	ands.w	r2, r2, #3
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	d007      	beq.n	80062cc <__pow5mult+0x20>
 80062bc:	4c21      	ldr	r4, [pc, #132]	; (8006344 <__pow5mult+0x98>)
 80062be:	3a01      	subs	r2, #1
 80062c0:	2300      	movs	r3, #0
 80062c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062c6:	f7ff fec9 	bl	800605c <__multadd>
 80062ca:	4607      	mov	r7, r0
 80062cc:	10ad      	asrs	r5, r5, #2
 80062ce:	d035      	beq.n	800633c <__pow5mult+0x90>
 80062d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062d2:	b93c      	cbnz	r4, 80062e4 <__pow5mult+0x38>
 80062d4:	2010      	movs	r0, #16
 80062d6:	f7ff fe55 	bl	8005f84 <malloc>
 80062da:	6270      	str	r0, [r6, #36]	; 0x24
 80062dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e0:	6004      	str	r4, [r0, #0]
 80062e2:	60c4      	str	r4, [r0, #12]
 80062e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062ec:	b94c      	cbnz	r4, 8006302 <__pow5mult+0x56>
 80062ee:	f240 2171 	movw	r1, #625	; 0x271
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ff3b 	bl	800616e <__i2b>
 80062f8:	2300      	movs	r3, #0
 80062fa:	4604      	mov	r4, r0
 80062fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006300:	6003      	str	r3, [r0, #0]
 8006302:	f04f 0800 	mov.w	r8, #0
 8006306:	07eb      	lsls	r3, r5, #31
 8006308:	d50a      	bpl.n	8006320 <__pow5mult+0x74>
 800630a:	4639      	mov	r1, r7
 800630c:	4622      	mov	r2, r4
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ff36 	bl	8006180 <__multiply>
 8006314:	4681      	mov	r9, r0
 8006316:	4639      	mov	r1, r7
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff fe88 	bl	800602e <_Bfree>
 800631e:	464f      	mov	r7, r9
 8006320:	106d      	asrs	r5, r5, #1
 8006322:	d00b      	beq.n	800633c <__pow5mult+0x90>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	b938      	cbnz	r0, 8006338 <__pow5mult+0x8c>
 8006328:	4622      	mov	r2, r4
 800632a:	4621      	mov	r1, r4
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ff27 	bl	8006180 <__multiply>
 8006332:	6020      	str	r0, [r4, #0]
 8006334:	f8c0 8000 	str.w	r8, [r0]
 8006338:	4604      	mov	r4, r0
 800633a:	e7e4      	b.n	8006306 <__pow5mult+0x5a>
 800633c:	4638      	mov	r0, r7
 800633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006342:	bf00      	nop
 8006344:	08006bf0 	.word	0x08006bf0

08006348 <__lshift>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	460c      	mov	r4, r1
 800634e:	4607      	mov	r7, r0
 8006350:	4616      	mov	r6, r2
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006358:	eb0a 0903 	add.w	r9, sl, r3
 800635c:	6849      	ldr	r1, [r1, #4]
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	f109 0501 	add.w	r5, r9, #1
 8006364:	42ab      	cmp	r3, r5
 8006366:	db32      	blt.n	80063ce <__lshift+0x86>
 8006368:	4638      	mov	r0, r7
 800636a:	f7ff fe2c 	bl	8005fc6 <_Balloc>
 800636e:	2300      	movs	r3, #0
 8006370:	4680      	mov	r8, r0
 8006372:	461a      	mov	r2, r3
 8006374:	f100 0114 	add.w	r1, r0, #20
 8006378:	4553      	cmp	r3, sl
 800637a:	db2b      	blt.n	80063d4 <__lshift+0x8c>
 800637c:	6920      	ldr	r0, [r4, #16]
 800637e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006382:	f104 0314 	add.w	r3, r4, #20
 8006386:	f016 021f 	ands.w	r2, r6, #31
 800638a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800638e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006392:	d025      	beq.n	80063e0 <__lshift+0x98>
 8006394:	2000      	movs	r0, #0
 8006396:	f1c2 0e20 	rsb	lr, r2, #32
 800639a:	468a      	mov	sl, r1
 800639c:	681e      	ldr	r6, [r3, #0]
 800639e:	4096      	lsls	r6, r2
 80063a0:	4330      	orrs	r0, r6
 80063a2:	f84a 0b04 	str.w	r0, [sl], #4
 80063a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80063aa:	459c      	cmp	ip, r3
 80063ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80063b0:	d814      	bhi.n	80063dc <__lshift+0x94>
 80063b2:	6048      	str	r0, [r1, #4]
 80063b4:	b108      	cbz	r0, 80063ba <__lshift+0x72>
 80063b6:	f109 0502 	add.w	r5, r9, #2
 80063ba:	3d01      	subs	r5, #1
 80063bc:	4638      	mov	r0, r7
 80063be:	f8c8 5010 	str.w	r5, [r8, #16]
 80063c2:	4621      	mov	r1, r4
 80063c4:	f7ff fe33 	bl	800602e <_Bfree>
 80063c8:	4640      	mov	r0, r8
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	3101      	adds	r1, #1
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	e7c7      	b.n	8006364 <__lshift+0x1c>
 80063d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063d8:	3301      	adds	r3, #1
 80063da:	e7cd      	b.n	8006378 <__lshift+0x30>
 80063dc:	4651      	mov	r1, sl
 80063de:	e7dc      	b.n	800639a <__lshift+0x52>
 80063e0:	3904      	subs	r1, #4
 80063e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e6:	459c      	cmp	ip, r3
 80063e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80063ec:	d8f9      	bhi.n	80063e2 <__lshift+0x9a>
 80063ee:	e7e4      	b.n	80063ba <__lshift+0x72>

080063f0 <__mcmp>:
 80063f0:	6903      	ldr	r3, [r0, #16]
 80063f2:	690a      	ldr	r2, [r1, #16]
 80063f4:	b530      	push	{r4, r5, lr}
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	d10c      	bne.n	8006414 <__mcmp+0x24>
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	3014      	adds	r0, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	1884      	adds	r4, r0, r2
 8006402:	4411      	add	r1, r2
 8006404:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800640c:	4295      	cmp	r5, r2
 800640e:	d003      	beq.n	8006418 <__mcmp+0x28>
 8006410:	d305      	bcc.n	800641e <__mcmp+0x2e>
 8006412:	2301      	movs	r3, #1
 8006414:	4618      	mov	r0, r3
 8006416:	bd30      	pop	{r4, r5, pc}
 8006418:	42a0      	cmp	r0, r4
 800641a:	d3f3      	bcc.n	8006404 <__mcmp+0x14>
 800641c:	e7fa      	b.n	8006414 <__mcmp+0x24>
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	e7f7      	b.n	8006414 <__mcmp+0x24>

08006424 <__mdiff>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	460d      	mov	r5, r1
 800642a:	4607      	mov	r7, r0
 800642c:	4611      	mov	r1, r2
 800642e:	4628      	mov	r0, r5
 8006430:	4614      	mov	r4, r2
 8006432:	f7ff ffdd 	bl	80063f0 <__mcmp>
 8006436:	1e06      	subs	r6, r0, #0
 8006438:	d108      	bne.n	800644c <__mdiff+0x28>
 800643a:	4631      	mov	r1, r6
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff fdc2 	bl	8005fc6 <_Balloc>
 8006442:	2301      	movs	r3, #1
 8006444:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644c:	bfa4      	itt	ge
 800644e:	4623      	movge	r3, r4
 8006450:	462c      	movge	r4, r5
 8006452:	4638      	mov	r0, r7
 8006454:	6861      	ldr	r1, [r4, #4]
 8006456:	bfa6      	itte	ge
 8006458:	461d      	movge	r5, r3
 800645a:	2600      	movge	r6, #0
 800645c:	2601      	movlt	r6, #1
 800645e:	f7ff fdb2 	bl	8005fc6 <_Balloc>
 8006462:	f04f 0e00 	mov.w	lr, #0
 8006466:	60c6      	str	r6, [r0, #12]
 8006468:	692b      	ldr	r3, [r5, #16]
 800646a:	6926      	ldr	r6, [r4, #16]
 800646c:	f104 0214 	add.w	r2, r4, #20
 8006470:	f105 0914 	add.w	r9, r5, #20
 8006474:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006478:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800647c:	f100 0114 	add.w	r1, r0, #20
 8006480:	f852 ab04 	ldr.w	sl, [r2], #4
 8006484:	f859 5b04 	ldr.w	r5, [r9], #4
 8006488:	fa1f f38a 	uxth.w	r3, sl
 800648c:	4473      	add	r3, lr
 800648e:	b2ac      	uxth	r4, r5
 8006490:	1b1b      	subs	r3, r3, r4
 8006492:	0c2c      	lsrs	r4, r5, #16
 8006494:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006498:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80064a2:	45c8      	cmp	r8, r9
 80064a4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80064a8:	4694      	mov	ip, r2
 80064aa:	f841 4b04 	str.w	r4, [r1], #4
 80064ae:	d8e7      	bhi.n	8006480 <__mdiff+0x5c>
 80064b0:	45bc      	cmp	ip, r7
 80064b2:	d304      	bcc.n	80064be <__mdiff+0x9a>
 80064b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064b8:	b183      	cbz	r3, 80064dc <__mdiff+0xb8>
 80064ba:	6106      	str	r6, [r0, #16]
 80064bc:	e7c4      	b.n	8006448 <__mdiff+0x24>
 80064be:	f85c 4b04 	ldr.w	r4, [ip], #4
 80064c2:	b2a2      	uxth	r2, r4
 80064c4:	4472      	add	r2, lr
 80064c6:	1413      	asrs	r3, r2, #16
 80064c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064cc:	b292      	uxth	r2, r2
 80064ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064d2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80064d6:	f841 2b04 	str.w	r2, [r1], #4
 80064da:	e7e9      	b.n	80064b0 <__mdiff+0x8c>
 80064dc:	3e01      	subs	r6, #1
 80064de:	e7e9      	b.n	80064b4 <__mdiff+0x90>

080064e0 <__d2b>:
 80064e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064e4:	461c      	mov	r4, r3
 80064e6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80064ea:	2101      	movs	r1, #1
 80064ec:	4690      	mov	r8, r2
 80064ee:	f7ff fd6a 	bl	8005fc6 <_Balloc>
 80064f2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80064f6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80064fa:	4607      	mov	r7, r0
 80064fc:	bb34      	cbnz	r4, 800654c <__d2b+0x6c>
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	f1b8 0200 	subs.w	r2, r8, #0
 8006504:	d027      	beq.n	8006556 <__d2b+0x76>
 8006506:	a802      	add	r0, sp, #8
 8006508:	f840 2d08 	str.w	r2, [r0, #-8]!
 800650c:	f7ff fe00 	bl	8006110 <__lo0bits>
 8006510:	9900      	ldr	r1, [sp, #0]
 8006512:	b1f0      	cbz	r0, 8006552 <__d2b+0x72>
 8006514:	9a01      	ldr	r2, [sp, #4]
 8006516:	f1c0 0320 	rsb	r3, r0, #32
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	430b      	orrs	r3, r1
 8006520:	40c2      	lsrs	r2, r0
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf14      	ite	ne
 800652c:	2102      	movne	r1, #2
 800652e:	2101      	moveq	r1, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	6139      	str	r1, [r7, #16]
 8006534:	b1c4      	cbz	r4, 8006568 <__d2b+0x88>
 8006536:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800653a:	4404      	add	r4, r0
 800653c:	6034      	str	r4, [r6, #0]
 800653e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006542:	6028      	str	r0, [r5, #0]
 8006544:	4638      	mov	r0, r7
 8006546:	b002      	add	sp, #8
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800654c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006550:	e7d5      	b.n	80064fe <__d2b+0x1e>
 8006552:	6179      	str	r1, [r7, #20]
 8006554:	e7e7      	b.n	8006526 <__d2b+0x46>
 8006556:	a801      	add	r0, sp, #4
 8006558:	f7ff fdda 	bl	8006110 <__lo0bits>
 800655c:	2101      	movs	r1, #1
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	6139      	str	r1, [r7, #16]
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	3020      	adds	r0, #32
 8006566:	e7e5      	b.n	8006534 <__d2b+0x54>
 8006568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800656c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006570:	6030      	str	r0, [r6, #0]
 8006572:	6918      	ldr	r0, [r3, #16]
 8006574:	f7ff fdad 	bl	80060d2 <__hi0bits>
 8006578:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800657c:	e7e1      	b.n	8006542 <__d2b+0x62>

0800657e <_calloc_r>:
 800657e:	b538      	push	{r3, r4, r5, lr}
 8006580:	fb02 f401 	mul.w	r4, r2, r1
 8006584:	4621      	mov	r1, r4
 8006586:	f000 f855 	bl	8006634 <_malloc_r>
 800658a:	4605      	mov	r5, r0
 800658c:	b118      	cbz	r0, 8006596 <_calloc_r+0x18>
 800658e:	4622      	mov	r2, r4
 8006590:	2100      	movs	r1, #0
 8006592:	f7fe fa2d 	bl	80049f0 <memset>
 8006596:	4628      	mov	r0, r5
 8006598:	bd38      	pop	{r3, r4, r5, pc}
	...

0800659c <_free_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4605      	mov	r5, r0
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d043      	beq.n	800662c <_free_r+0x90>
 80065a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a8:	1f0c      	subs	r4, r1, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bfb8      	it	lt
 80065ae:	18e4      	addlt	r4, r4, r3
 80065b0:	f000 fa27 	bl	8006a02 <__malloc_lock>
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <_free_r+0x94>)
 80065b6:	6813      	ldr	r3, [r2, #0]
 80065b8:	4610      	mov	r0, r2
 80065ba:	b933      	cbnz	r3, 80065ca <_free_r+0x2e>
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	6014      	str	r4, [r2, #0]
 80065c0:	4628      	mov	r0, r5
 80065c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065c6:	f000 ba1d 	b.w	8006a04 <__malloc_unlock>
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	d90b      	bls.n	80065e6 <_free_r+0x4a>
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	1862      	adds	r2, r4, r1
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bf01      	itttt	eq
 80065d6:	681a      	ldreq	r2, [r3, #0]
 80065d8:	685b      	ldreq	r3, [r3, #4]
 80065da:	1852      	addeq	r2, r2, r1
 80065dc:	6022      	streq	r2, [r4, #0]
 80065de:	6063      	str	r3, [r4, #4]
 80065e0:	6004      	str	r4, [r0, #0]
 80065e2:	e7ed      	b.n	80065c0 <_free_r+0x24>
 80065e4:	4613      	mov	r3, r2
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	b10a      	cbz	r2, 80065ee <_free_r+0x52>
 80065ea:	42a2      	cmp	r2, r4
 80065ec:	d9fa      	bls.n	80065e4 <_free_r+0x48>
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	1858      	adds	r0, r3, r1
 80065f2:	42a0      	cmp	r0, r4
 80065f4:	d10b      	bne.n	800660e <_free_r+0x72>
 80065f6:	6820      	ldr	r0, [r4, #0]
 80065f8:	4401      	add	r1, r0
 80065fa:	1858      	adds	r0, r3, r1
 80065fc:	4282      	cmp	r2, r0
 80065fe:	6019      	str	r1, [r3, #0]
 8006600:	d1de      	bne.n	80065c0 <_free_r+0x24>
 8006602:	6810      	ldr	r0, [r2, #0]
 8006604:	6852      	ldr	r2, [r2, #4]
 8006606:	4401      	add	r1, r0
 8006608:	6019      	str	r1, [r3, #0]
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	e7d8      	b.n	80065c0 <_free_r+0x24>
 800660e:	d902      	bls.n	8006616 <_free_r+0x7a>
 8006610:	230c      	movs	r3, #12
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	e7d4      	b.n	80065c0 <_free_r+0x24>
 8006616:	6820      	ldr	r0, [r4, #0]
 8006618:	1821      	adds	r1, r4, r0
 800661a:	428a      	cmp	r2, r1
 800661c:	bf01      	itttt	eq
 800661e:	6811      	ldreq	r1, [r2, #0]
 8006620:	6852      	ldreq	r2, [r2, #4]
 8006622:	1809      	addeq	r1, r1, r0
 8006624:	6021      	streq	r1, [r4, #0]
 8006626:	6062      	str	r2, [r4, #4]
 8006628:	605c      	str	r4, [r3, #4]
 800662a:	e7c9      	b.n	80065c0 <_free_r+0x24>
 800662c:	bd38      	pop	{r3, r4, r5, pc}
 800662e:	bf00      	nop
 8006630:	20000248 	.word	0x20000248

08006634 <_malloc_r>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	1ccd      	adds	r5, r1, #3
 8006638:	f025 0503 	bic.w	r5, r5, #3
 800663c:	3508      	adds	r5, #8
 800663e:	2d0c      	cmp	r5, #12
 8006640:	bf38      	it	cc
 8006642:	250c      	movcc	r5, #12
 8006644:	2d00      	cmp	r5, #0
 8006646:	4606      	mov	r6, r0
 8006648:	db01      	blt.n	800664e <_malloc_r+0x1a>
 800664a:	42a9      	cmp	r1, r5
 800664c:	d903      	bls.n	8006656 <_malloc_r+0x22>
 800664e:	230c      	movs	r3, #12
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	2000      	movs	r0, #0
 8006654:	bd70      	pop	{r4, r5, r6, pc}
 8006656:	f000 f9d4 	bl	8006a02 <__malloc_lock>
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <_malloc_r+0xac>)
 800665c:	6814      	ldr	r4, [r2, #0]
 800665e:	4621      	mov	r1, r4
 8006660:	b991      	cbnz	r1, 8006688 <_malloc_r+0x54>
 8006662:	4c20      	ldr	r4, [pc, #128]	; (80066e4 <_malloc_r+0xb0>)
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	b91b      	cbnz	r3, 8006670 <_malloc_r+0x3c>
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f98f 	bl	800698c <_sbrk_r>
 800666e:	6020      	str	r0, [r4, #0]
 8006670:	4629      	mov	r1, r5
 8006672:	4630      	mov	r0, r6
 8006674:	f000 f98a 	bl	800698c <_sbrk_r>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d124      	bne.n	80066c6 <_malloc_r+0x92>
 800667c:	230c      	movs	r3, #12
 800667e:	4630      	mov	r0, r6
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	f000 f9bf 	bl	8006a04 <__malloc_unlock>
 8006686:	e7e4      	b.n	8006652 <_malloc_r+0x1e>
 8006688:	680b      	ldr	r3, [r1, #0]
 800668a:	1b5b      	subs	r3, r3, r5
 800668c:	d418      	bmi.n	80066c0 <_malloc_r+0x8c>
 800668e:	2b0b      	cmp	r3, #11
 8006690:	d90f      	bls.n	80066b2 <_malloc_r+0x7e>
 8006692:	600b      	str	r3, [r1, #0]
 8006694:	18cc      	adds	r4, r1, r3
 8006696:	50cd      	str	r5, [r1, r3]
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f9b3 	bl	8006a04 <__malloc_unlock>
 800669e:	f104 000b 	add.w	r0, r4, #11
 80066a2:	1d23      	adds	r3, r4, #4
 80066a4:	f020 0007 	bic.w	r0, r0, #7
 80066a8:	1ac3      	subs	r3, r0, r3
 80066aa:	d0d3      	beq.n	8006654 <_malloc_r+0x20>
 80066ac:	425a      	negs	r2, r3
 80066ae:	50e2      	str	r2, [r4, r3]
 80066b0:	e7d0      	b.n	8006654 <_malloc_r+0x20>
 80066b2:	684b      	ldr	r3, [r1, #4]
 80066b4:	428c      	cmp	r4, r1
 80066b6:	bf16      	itet	ne
 80066b8:	6063      	strne	r3, [r4, #4]
 80066ba:	6013      	streq	r3, [r2, #0]
 80066bc:	460c      	movne	r4, r1
 80066be:	e7eb      	b.n	8006698 <_malloc_r+0x64>
 80066c0:	460c      	mov	r4, r1
 80066c2:	6849      	ldr	r1, [r1, #4]
 80066c4:	e7cc      	b.n	8006660 <_malloc_r+0x2c>
 80066c6:	1cc4      	adds	r4, r0, #3
 80066c8:	f024 0403 	bic.w	r4, r4, #3
 80066cc:	42a0      	cmp	r0, r4
 80066ce:	d005      	beq.n	80066dc <_malloc_r+0xa8>
 80066d0:	1a21      	subs	r1, r4, r0
 80066d2:	4630      	mov	r0, r6
 80066d4:	f000 f95a 	bl	800698c <_sbrk_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	d0cf      	beq.n	800667c <_malloc_r+0x48>
 80066dc:	6025      	str	r5, [r4, #0]
 80066de:	e7db      	b.n	8006698 <_malloc_r+0x64>
 80066e0:	20000248 	.word	0x20000248
 80066e4:	2000024c 	.word	0x2000024c

080066e8 <__ssputs_r>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	688e      	ldr	r6, [r1, #8]
 80066ee:	4682      	mov	sl, r0
 80066f0:	429e      	cmp	r6, r3
 80066f2:	460c      	mov	r4, r1
 80066f4:	4690      	mov	r8, r2
 80066f6:	4699      	mov	r9, r3
 80066f8:	d837      	bhi.n	800676a <__ssputs_r+0x82>
 80066fa:	898a      	ldrh	r2, [r1, #12]
 80066fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006700:	d031      	beq.n	8006766 <__ssputs_r+0x7e>
 8006702:	2302      	movs	r3, #2
 8006704:	6825      	ldr	r5, [r4, #0]
 8006706:	6909      	ldr	r1, [r1, #16]
 8006708:	1a6f      	subs	r7, r5, r1
 800670a:	6965      	ldr	r5, [r4, #20]
 800670c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006710:	fb95 f5f3 	sdiv	r5, r5, r3
 8006714:	f109 0301 	add.w	r3, r9, #1
 8006718:	443b      	add	r3, r7
 800671a:	429d      	cmp	r5, r3
 800671c:	bf38      	it	cc
 800671e:	461d      	movcc	r5, r3
 8006720:	0553      	lsls	r3, r2, #21
 8006722:	d530      	bpl.n	8006786 <__ssputs_r+0x9e>
 8006724:	4629      	mov	r1, r5
 8006726:	f7ff ff85 	bl	8006634 <_malloc_r>
 800672a:	4606      	mov	r6, r0
 800672c:	b950      	cbnz	r0, 8006744 <__ssputs_r+0x5c>
 800672e:	230c      	movs	r3, #12
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	f8ca 3000 	str.w	r3, [sl]
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006744:	463a      	mov	r2, r7
 8006746:	6921      	ldr	r1, [r4, #16]
 8006748:	f7ff fc32 	bl	8005fb0 <memcpy>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	6126      	str	r6, [r4, #16]
 800675a:	443e      	add	r6, r7
 800675c:	6026      	str	r6, [r4, #0]
 800675e:	464e      	mov	r6, r9
 8006760:	6165      	str	r5, [r4, #20]
 8006762:	1bed      	subs	r5, r5, r7
 8006764:	60a5      	str	r5, [r4, #8]
 8006766:	454e      	cmp	r6, r9
 8006768:	d900      	bls.n	800676c <__ssputs_r+0x84>
 800676a:	464e      	mov	r6, r9
 800676c:	4632      	mov	r2, r6
 800676e:	4641      	mov	r1, r8
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	f000 f92d 	bl	80069d0 <memmove>
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	2000      	movs	r0, #0
 800677a:	1b9b      	subs	r3, r3, r6
 800677c:	60a3      	str	r3, [r4, #8]
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	441e      	add	r6, r3
 8006782:	6026      	str	r6, [r4, #0]
 8006784:	e7dc      	b.n	8006740 <__ssputs_r+0x58>
 8006786:	462a      	mov	r2, r5
 8006788:	f000 f93d 	bl	8006a06 <_realloc_r>
 800678c:	4606      	mov	r6, r0
 800678e:	2800      	cmp	r0, #0
 8006790:	d1e2      	bne.n	8006758 <__ssputs_r+0x70>
 8006792:	6921      	ldr	r1, [r4, #16]
 8006794:	4650      	mov	r0, sl
 8006796:	f7ff ff01 	bl	800659c <_free_r>
 800679a:	e7c8      	b.n	800672e <__ssputs_r+0x46>

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	461d      	mov	r5, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	b09d      	sub	sp, #116	; 0x74
 80067a6:	061f      	lsls	r7, r3, #24
 80067a8:	4680      	mov	r8, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4616      	mov	r6, r2
 80067ae:	d50f      	bpl.n	80067d0 <_svfiprintf_r+0x34>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b96b      	cbnz	r3, 80067d0 <_svfiprintf_r+0x34>
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	f7ff ff3d 	bl	8006634 <_malloc_r>
 80067ba:	6020      	str	r0, [r4, #0]
 80067bc:	6120      	str	r0, [r4, #16]
 80067be:	b928      	cbnz	r0, 80067cc <_svfiprintf_r+0x30>
 80067c0:	230c      	movs	r3, #12
 80067c2:	f8c8 3000 	str.w	r3, [r8]
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	e0c8      	b.n	800695e <_svfiprintf_r+0x1c2>
 80067cc:	2340      	movs	r3, #64	; 0x40
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	2300      	movs	r3, #0
 80067d2:	9309      	str	r3, [sp, #36]	; 0x24
 80067d4:	2320      	movs	r3, #32
 80067d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067da:	2330      	movs	r3, #48	; 0x30
 80067dc:	f04f 0b01 	mov.w	fp, #1
 80067e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067e4:	9503      	str	r5, [sp, #12]
 80067e6:	4637      	mov	r7, r6
 80067e8:	463d      	mov	r5, r7
 80067ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067ee:	b10b      	cbz	r3, 80067f4 <_svfiprintf_r+0x58>
 80067f0:	2b25      	cmp	r3, #37	; 0x25
 80067f2:	d13e      	bne.n	8006872 <_svfiprintf_r+0xd6>
 80067f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80067f8:	d00b      	beq.n	8006812 <_svfiprintf_r+0x76>
 80067fa:	4653      	mov	r3, sl
 80067fc:	4632      	mov	r2, r6
 80067fe:	4621      	mov	r1, r4
 8006800:	4640      	mov	r0, r8
 8006802:	f7ff ff71 	bl	80066e8 <__ssputs_r>
 8006806:	3001      	adds	r0, #1
 8006808:	f000 80a4 	beq.w	8006954 <_svfiprintf_r+0x1b8>
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	4453      	add	r3, sl
 8006810:	9309      	str	r3, [sp, #36]	; 0x24
 8006812:	783b      	ldrb	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 809d 	beq.w	8006954 <_svfiprintf_r+0x1b8>
 800681a:	2300      	movs	r3, #0
 800681c:	f04f 32ff 	mov.w	r2, #4294967295
 8006820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	9307      	str	r3, [sp, #28]
 8006828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800682c:	931a      	str	r3, [sp, #104]	; 0x68
 800682e:	462f      	mov	r7, r5
 8006830:	2205      	movs	r2, #5
 8006832:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006836:	4850      	ldr	r0, [pc, #320]	; (8006978 <_svfiprintf_r+0x1dc>)
 8006838:	f7ff fbac 	bl	8005f94 <memchr>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	b9d0      	cbnz	r0, 8006876 <_svfiprintf_r+0xda>
 8006840:	06d9      	lsls	r1, r3, #27
 8006842:	bf44      	itt	mi
 8006844:	2220      	movmi	r2, #32
 8006846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800684a:	071a      	lsls	r2, r3, #28
 800684c:	bf44      	itt	mi
 800684e:	222b      	movmi	r2, #43	; 0x2b
 8006850:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006854:	782a      	ldrb	r2, [r5, #0]
 8006856:	2a2a      	cmp	r2, #42	; 0x2a
 8006858:	d015      	beq.n	8006886 <_svfiprintf_r+0xea>
 800685a:	462f      	mov	r7, r5
 800685c:	2000      	movs	r0, #0
 800685e:	250a      	movs	r5, #10
 8006860:	9a07      	ldr	r2, [sp, #28]
 8006862:	4639      	mov	r1, r7
 8006864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006868:	3b30      	subs	r3, #48	; 0x30
 800686a:	2b09      	cmp	r3, #9
 800686c:	d94d      	bls.n	800690a <_svfiprintf_r+0x16e>
 800686e:	b1b8      	cbz	r0, 80068a0 <_svfiprintf_r+0x104>
 8006870:	e00f      	b.n	8006892 <_svfiprintf_r+0xf6>
 8006872:	462f      	mov	r7, r5
 8006874:	e7b8      	b.n	80067e8 <_svfiprintf_r+0x4c>
 8006876:	4a40      	ldr	r2, [pc, #256]	; (8006978 <_svfiprintf_r+0x1dc>)
 8006878:	463d      	mov	r5, r7
 800687a:	1a80      	subs	r0, r0, r2
 800687c:	fa0b f000 	lsl.w	r0, fp, r0
 8006880:	4318      	orrs	r0, r3
 8006882:	9004      	str	r0, [sp, #16]
 8006884:	e7d3      	b.n	800682e <_svfiprintf_r+0x92>
 8006886:	9a03      	ldr	r2, [sp, #12]
 8006888:	1d11      	adds	r1, r2, #4
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	9103      	str	r1, [sp, #12]
 800688e:	2a00      	cmp	r2, #0
 8006890:	db01      	blt.n	8006896 <_svfiprintf_r+0xfa>
 8006892:	9207      	str	r2, [sp, #28]
 8006894:	e004      	b.n	80068a0 <_svfiprintf_r+0x104>
 8006896:	4252      	negs	r2, r2
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	9207      	str	r2, [sp, #28]
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	783b      	ldrb	r3, [r7, #0]
 80068a2:	2b2e      	cmp	r3, #46	; 0x2e
 80068a4:	d10c      	bne.n	80068c0 <_svfiprintf_r+0x124>
 80068a6:	787b      	ldrb	r3, [r7, #1]
 80068a8:	2b2a      	cmp	r3, #42	; 0x2a
 80068aa:	d133      	bne.n	8006914 <_svfiprintf_r+0x178>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	3702      	adds	r7, #2
 80068b0:	1d1a      	adds	r2, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	9203      	str	r2, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfb8      	it	lt
 80068ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	4d2e      	ldr	r5, [pc, #184]	; (800697c <_svfiprintf_r+0x1e0>)
 80068c2:	2203      	movs	r2, #3
 80068c4:	7839      	ldrb	r1, [r7, #0]
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff fb64 	bl	8005f94 <memchr>
 80068cc:	b138      	cbz	r0, 80068de <_svfiprintf_r+0x142>
 80068ce:	2340      	movs	r3, #64	; 0x40
 80068d0:	1b40      	subs	r0, r0, r5
 80068d2:	fa03 f000 	lsl.w	r0, r3, r0
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	3701      	adds	r7, #1
 80068da:	4303      	orrs	r3, r0
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	7839      	ldrb	r1, [r7, #0]
 80068e0:	2206      	movs	r2, #6
 80068e2:	4827      	ldr	r0, [pc, #156]	; (8006980 <_svfiprintf_r+0x1e4>)
 80068e4:	1c7e      	adds	r6, r7, #1
 80068e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ea:	f7ff fb53 	bl	8005f94 <memchr>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d038      	beq.n	8006964 <_svfiprintf_r+0x1c8>
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <_svfiprintf_r+0x1e8>)
 80068f4:	bb13      	cbnz	r3, 800693c <_svfiprintf_r+0x1a0>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	3307      	adds	r3, #7
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	3308      	adds	r3, #8
 8006900:	9303      	str	r3, [sp, #12]
 8006902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006904:	444b      	add	r3, r9
 8006906:	9309      	str	r3, [sp, #36]	; 0x24
 8006908:	e76d      	b.n	80067e6 <_svfiprintf_r+0x4a>
 800690a:	fb05 3202 	mla	r2, r5, r2, r3
 800690e:	2001      	movs	r0, #1
 8006910:	460f      	mov	r7, r1
 8006912:	e7a6      	b.n	8006862 <_svfiprintf_r+0xc6>
 8006914:	2300      	movs	r3, #0
 8006916:	250a      	movs	r5, #10
 8006918:	4619      	mov	r1, r3
 800691a:	3701      	adds	r7, #1
 800691c:	9305      	str	r3, [sp, #20]
 800691e:	4638      	mov	r0, r7
 8006920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006924:	3a30      	subs	r2, #48	; 0x30
 8006926:	2a09      	cmp	r2, #9
 8006928:	d903      	bls.n	8006932 <_svfiprintf_r+0x196>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0c8      	beq.n	80068c0 <_svfiprintf_r+0x124>
 800692e:	9105      	str	r1, [sp, #20]
 8006930:	e7c6      	b.n	80068c0 <_svfiprintf_r+0x124>
 8006932:	fb05 2101 	mla	r1, r5, r1, r2
 8006936:	2301      	movs	r3, #1
 8006938:	4607      	mov	r7, r0
 800693a:	e7f0      	b.n	800691e <_svfiprintf_r+0x182>
 800693c:	ab03      	add	r3, sp, #12
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	4622      	mov	r2, r4
 8006942:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_svfiprintf_r+0x1ec>)
 8006944:	a904      	add	r1, sp, #16
 8006946:	4640      	mov	r0, r8
 8006948:	f7fe f8ec 	bl	8004b24 <_printf_float>
 800694c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006950:	4681      	mov	r9, r0
 8006952:	d1d6      	bne.n	8006902 <_svfiprintf_r+0x166>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	065b      	lsls	r3, r3, #25
 8006958:	f53f af35 	bmi.w	80067c6 <_svfiprintf_r+0x2a>
 800695c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800695e:	b01d      	add	sp, #116	; 0x74
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4622      	mov	r2, r4
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <_svfiprintf_r+0x1ec>)
 800696c:	a904      	add	r1, sp, #16
 800696e:	4640      	mov	r0, r8
 8006970:	f7fe fb84 	bl	800507c <_printf_i>
 8006974:	e7ea      	b.n	800694c <_svfiprintf_r+0x1b0>
 8006976:	bf00      	nop
 8006978:	08006bfc 	.word	0x08006bfc
 800697c:	08006c02 	.word	0x08006c02
 8006980:	08006c06 	.word	0x08006c06
 8006984:	08004b25 	.word	0x08004b25
 8006988:	080066e9 	.word	0x080066e9

0800698c <_sbrk_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	2300      	movs	r3, #0
 8006990:	4c05      	ldr	r4, [pc, #20]	; (80069a8 <_sbrk_r+0x1c>)
 8006992:	4605      	mov	r5, r0
 8006994:	4608      	mov	r0, r1
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	f7fd fc84 	bl	80042a4 <_sbrk>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_sbrk_r+0x1a>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_sbrk_r+0x1a>
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	200004c8 	.word	0x200004c8

080069ac <__ascii_mbtowc>:
 80069ac:	b082      	sub	sp, #8
 80069ae:	b901      	cbnz	r1, 80069b2 <__ascii_mbtowc+0x6>
 80069b0:	a901      	add	r1, sp, #4
 80069b2:	b142      	cbz	r2, 80069c6 <__ascii_mbtowc+0x1a>
 80069b4:	b14b      	cbz	r3, 80069ca <__ascii_mbtowc+0x1e>
 80069b6:	7813      	ldrb	r3, [r2, #0]
 80069b8:	600b      	str	r3, [r1, #0]
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	1c10      	adds	r0, r2, #0
 80069be:	bf18      	it	ne
 80069c0:	2001      	movne	r0, #1
 80069c2:	b002      	add	sp, #8
 80069c4:	4770      	bx	lr
 80069c6:	4610      	mov	r0, r2
 80069c8:	e7fb      	b.n	80069c2 <__ascii_mbtowc+0x16>
 80069ca:	f06f 0001 	mvn.w	r0, #1
 80069ce:	e7f8      	b.n	80069c2 <__ascii_mbtowc+0x16>

080069d0 <memmove>:
 80069d0:	4288      	cmp	r0, r1
 80069d2:	b510      	push	{r4, lr}
 80069d4:	eb01 0302 	add.w	r3, r1, r2
 80069d8:	d807      	bhi.n	80069ea <memmove+0x1a>
 80069da:	1e42      	subs	r2, r0, #1
 80069dc:	4299      	cmp	r1, r3
 80069de:	d00a      	beq.n	80069f6 <memmove+0x26>
 80069e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069e8:	e7f8      	b.n	80069dc <memmove+0xc>
 80069ea:	4283      	cmp	r3, r0
 80069ec:	d9f5      	bls.n	80069da <memmove+0xa>
 80069ee:	1881      	adds	r1, r0, r2
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	42d3      	cmn	r3, r2
 80069f4:	d100      	bne.n	80069f8 <memmove+0x28>
 80069f6:	bd10      	pop	{r4, pc}
 80069f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a00:	e7f7      	b.n	80069f2 <memmove+0x22>

08006a02 <__malloc_lock>:
 8006a02:	4770      	bx	lr

08006a04 <__malloc_unlock>:
 8006a04:	4770      	bx	lr

08006a06 <_realloc_r>:
 8006a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a08:	4607      	mov	r7, r0
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	460e      	mov	r6, r1
 8006a0e:	b921      	cbnz	r1, 8006a1a <_realloc_r+0x14>
 8006a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a14:	4611      	mov	r1, r2
 8006a16:	f7ff be0d 	b.w	8006634 <_malloc_r>
 8006a1a:	b922      	cbnz	r2, 8006a26 <_realloc_r+0x20>
 8006a1c:	f7ff fdbe 	bl	800659c <_free_r>
 8006a20:	4625      	mov	r5, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a26:	f000 f821 	bl	8006a6c <_malloc_usable_size_r>
 8006a2a:	42a0      	cmp	r0, r4
 8006a2c:	d20f      	bcs.n	8006a4e <_realloc_r+0x48>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff fdff 	bl	8006634 <_malloc_r>
 8006a36:	4605      	mov	r5, r0
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d0f2      	beq.n	8006a22 <_realloc_r+0x1c>
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4622      	mov	r2, r4
 8006a40:	f7ff fab6 	bl	8005fb0 <memcpy>
 8006a44:	4631      	mov	r1, r6
 8006a46:	4638      	mov	r0, r7
 8006a48:	f7ff fda8 	bl	800659c <_free_r>
 8006a4c:	e7e9      	b.n	8006a22 <_realloc_r+0x1c>
 8006a4e:	4635      	mov	r5, r6
 8006a50:	e7e7      	b.n	8006a22 <_realloc_r+0x1c>

08006a52 <__ascii_wctomb>:
 8006a52:	b149      	cbz	r1, 8006a68 <__ascii_wctomb+0x16>
 8006a54:	2aff      	cmp	r2, #255	; 0xff
 8006a56:	bf8b      	itete	hi
 8006a58:	238a      	movhi	r3, #138	; 0x8a
 8006a5a:	700a      	strbls	r2, [r1, #0]
 8006a5c:	6003      	strhi	r3, [r0, #0]
 8006a5e:	2001      	movls	r0, #1
 8006a60:	bf88      	it	hi
 8006a62:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a66:	4770      	bx	lr
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4770      	bx	lr

08006a6c <_malloc_usable_size_r>:
 8006a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a70:	1f18      	subs	r0, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bfbc      	itt	lt
 8006a76:	580b      	ldrlt	r3, [r1, r0]
 8006a78:	18c0      	addlt	r0, r0, r3
 8006a7a:	4770      	bx	lr

08006a7c <_init>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr

08006a88 <_fini>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	bf00      	nop
 8006a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8e:	bc08      	pop	{r3}
 8006a90:	469e      	mov	lr, r3
 8006a92:	4770      	bx	lr
