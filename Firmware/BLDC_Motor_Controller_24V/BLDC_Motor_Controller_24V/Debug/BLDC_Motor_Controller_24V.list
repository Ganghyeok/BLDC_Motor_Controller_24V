
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a70  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005ba0  08005ba0  00015ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005de0  08005de0  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de0  08005de0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d0  08005fb8  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08005fb8  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b510  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001753  00000000  00000000  0002b709  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009148  00000000  00000000  0002d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062fd  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00027eab  00000000  00000000  0003c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00064898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d8  00000000  00000000  00064914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d0 	.word	0x200001d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08005b88 	.word	0x08005b88

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d4 	.word	0x200001d4
 800016c:	08005b88 	.word	0x08005b88

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	d1ed      	bne.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d16:	2afd      	cmp	r2, #253	; 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	; 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	; 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	; 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__aeabi_f2uiz>:
 8000f64:	0042      	lsls	r2, r0, #1
 8000f66:	d20e      	bcs.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f6c:	d30b      	bcc.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f76:	d409      	bmi.n	8000f8c <__aeabi_f2uiz+0x28>
 8000f78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f80:	fa23 f002 	lsr.w	r0, r3, r2
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2uiz+0x32>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d102      	bne.n	8000f9c <__aeabi_f2uiz+0x38>
 8000f96:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <DMA_Init+0xbc>)
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d80f      	bhi.n	8000fdc <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <DMA_Init+0xc0>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <DMA_Init+0xc4>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	009a      	lsls	r2, r3, #2
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <DMA_Init+0xc8>)
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fda:	e00e      	b.n	8000ffa <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <DMA_Init+0xcc>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <DMA_Init+0xc4>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	009a      	lsls	r2, r3, #2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <DMA_Init+0xd0>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001010:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001014:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 800101e:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800102a:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001036:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40020407 	.word	0x40020407
 8001064:	bffdfff8 	.word	0xbffdfff8
 8001068:	cccccccd 	.word	0xcccccccd
 800106c:	40020000 	.word	0x40020000
 8001070:	bffdfbf8 	.word	0xbffdfbf8
 8001074:	40020400 	.word	0x40020400

08001078 <DMA_SetConfig>:


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d108      	bne.n	80010b8 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 80010b6:	e007      	b.n	80010c8 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	60da      	str	r2, [r3, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff ffbe 	bl	8001078 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0202 	orr.w	r2, r2, #2
 800111a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	2104      	movs	r1, #4
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 80bf 	beq.w	80012e2 <DMA_IRQ_Handling+0x1ae>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80bb 	beq.w	80012e2 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001174:	429a      	cmp	r2, r3
 8001176:	d958      	bls.n	800122a <DMA_IRQ_Handling+0xf6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a97      	ldr	r2, [pc, #604]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d04f      	beq.n	8001222 <DMA_IRQ_Handling+0xee>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a96      	ldr	r2, [pc, #600]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d048      	beq.n	800121e <DMA_IRQ_Handling+0xea>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a94      	ldr	r2, [pc, #592]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d040      	beq.n	8001218 <DMA_IRQ_Handling+0xe4>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d038      	beq.n	8001212 <DMA_IRQ_Handling+0xde>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a91      	ldr	r2, [pc, #580]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d030      	beq.n	800120c <DMA_IRQ_Handling+0xd8>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a90      	ldr	r2, [pc, #576]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d028      	beq.n	8001206 <DMA_IRQ_Handling+0xd2>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d020      	beq.n	8001200 <DMA_IRQ_Handling+0xcc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8c      	ldr	r2, [pc, #560]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d019      	beq.n	80011fc <DMA_IRQ_Handling+0xc8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a8a      	ldr	r2, [pc, #552]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d012      	beq.n	80011f8 <DMA_IRQ_Handling+0xc4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a89      	ldr	r2, [pc, #548]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00a      	beq.n	80011f2 <DMA_IRQ_Handling+0xbe>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a87      	ldr	r2, [pc, #540]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d102      	bne.n	80011ec <DMA_IRQ_Handling+0xb8>
 80011e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ea:	e01b      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011f0:	e018      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	e015      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	e013      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e011      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001204:	e00e      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120a:	e00b      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 800120c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001210:	e008      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001216:	e005      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121c:	e002      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 800121e:	2340      	movs	r3, #64	; 0x40
 8001220:	e000      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001222:	2304      	movs	r3, #4
 8001224:	4a77      	ldr	r2, [pc, #476]	; (8001404 <DMA_IRQ_Handling+0x2d0>)
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e057      	b.n	80012da <DMA_IRQ_Handling+0x1a6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6b      	ldr	r2, [pc, #428]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04f      	beq.n	80012d4 <DMA_IRQ_Handling+0x1a0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d048      	beq.n	80012d0 <DMA_IRQ_Handling+0x19c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d040      	beq.n	80012ca <DMA_IRQ_Handling+0x196>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d038      	beq.n	80012c4 <DMA_IRQ_Handling+0x190>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a65      	ldr	r2, [pc, #404]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d030      	beq.n	80012be <DMA_IRQ_Handling+0x18a>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d028      	beq.n	80012b8 <DMA_IRQ_Handling+0x184>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d020      	beq.n	80012b2 <DMA_IRQ_Handling+0x17e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <DMA_IRQ_Handling+0x17a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d012      	beq.n	80012aa <DMA_IRQ_Handling+0x176>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00a      	beq.n	80012a4 <DMA_IRQ_Handling+0x170>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <DMA_IRQ_Handling+0x16a>
 8001298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129c:	e01b      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 800129e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a2:	e018      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a8:	e015      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	e013      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e011      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012b6:	e00e      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012bc:	e00b      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012c2:	e008      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c8:	e005      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	e002      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	e000      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012d4:	2304      	movs	r3, #4
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <DMA_IRQ_Handling+0x2d4>)
 80012d8:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2102      	movs	r1, #2
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80dd 	beq.w	80014c4 <DMA_IRQ_Handling+0x390>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80d9 	beq.w	80014c4 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001322:	429a      	cmp	r2, r3
 8001324:	d972      	bls.n	800140c <DMA_IRQ_Handling+0x2d8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04f      	beq.n	80013d0 <DMA_IRQ_Handling+0x29c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d048      	beq.n	80013cc <DMA_IRQ_Handling+0x298>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d040      	beq.n	80013c6 <DMA_IRQ_Handling+0x292>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d038      	beq.n	80013c0 <DMA_IRQ_Handling+0x28c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a26      	ldr	r2, [pc, #152]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d030      	beq.n	80013ba <DMA_IRQ_Handling+0x286>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d028      	beq.n	80013b4 <DMA_IRQ_Handling+0x280>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d020      	beq.n	80013ae <DMA_IRQ_Handling+0x27a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <DMA_IRQ_Handling+0x276>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <DMA_IRQ_Handling+0x272>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <DMA_IRQ_Handling+0x26c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <DMA_IRQ_Handling+0x266>
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	e01b      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	e018      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a4:	e015      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013a6:	2320      	movs	r3, #32
 80013a8:	e013      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e011      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b2:	e00e      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b8:	e00b      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013be:	e008      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	e005      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	e002      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013cc:	2320      	movs	r3, #32
 80013ce:	e000      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013d0:	2302      	movs	r3, #2
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <DMA_IRQ_Handling+0x2d0>)
 80013d4:	6053      	str	r3, [r2, #4]
 80013d6:	e071      	b.n	80014bc <DMA_IRQ_Handling+0x388>
 80013d8:	40020080 	.word	0x40020080
 80013dc:	40020008 	.word	0x40020008
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	40020030 	.word	0x40020030
 80013e8:	40020044 	.word	0x40020044
 80013ec:	40020058 	.word	0x40020058
 80013f0:	4002006c 	.word	0x4002006c
 80013f4:	40020408 	.word	0x40020408
 80013f8:	4002041c 	.word	0x4002041c
 80013fc:	40020430 	.word	0x40020430
 8001400:	40020444 	.word	0x40020444
 8001404:	40020400 	.word	0x40020400
 8001408:	40020000 	.word	0x40020000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9a      	ldr	r2, [pc, #616]	; (800167c <DMA_IRQ_Handling+0x548>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d04f      	beq.n	80014b6 <DMA_IRQ_Handling+0x382>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a99      	ldr	r2, [pc, #612]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d048      	beq.n	80014b2 <DMA_IRQ_Handling+0x37e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a97      	ldr	r2, [pc, #604]	; (8001684 <DMA_IRQ_Handling+0x550>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d040      	beq.n	80014ac <DMA_IRQ_Handling+0x378>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a96      	ldr	r2, [pc, #600]	; (8001688 <DMA_IRQ_Handling+0x554>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d038      	beq.n	80014a6 <DMA_IRQ_Handling+0x372>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <DMA_IRQ_Handling+0x558>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d030      	beq.n	80014a0 <DMA_IRQ_Handling+0x36c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a93      	ldr	r2, [pc, #588]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d028      	beq.n	800149a <DMA_IRQ_Handling+0x366>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a91      	ldr	r2, [pc, #580]	; (8001694 <DMA_IRQ_Handling+0x560>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d020      	beq.n	8001494 <DMA_IRQ_Handling+0x360>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a90      	ldr	r2, [pc, #576]	; (8001698 <DMA_IRQ_Handling+0x564>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d019      	beq.n	8001490 <DMA_IRQ_Handling+0x35c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a8e      	ldr	r2, [pc, #568]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d012      	beq.n	800148c <DMA_IRQ_Handling+0x358>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a8d      	ldr	r2, [pc, #564]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00a      	beq.n	8001486 <DMA_IRQ_Handling+0x352>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a8b      	ldr	r2, [pc, #556]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d102      	bne.n	8001480 <DMA_IRQ_Handling+0x34c>
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	e01b      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001484:	e018      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	e015      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 800148c:	2320      	movs	r3, #32
 800148e:	e013      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001490:	2302      	movs	r3, #2
 8001492:	e011      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001498:	e00e      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 800149a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800149e:	e00b      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	e008      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	e005      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	e002      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014b2:	2320      	movs	r3, #32
 80014b4:	e000      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014b6:	2302      	movs	r3, #2
 80014b8:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <DMA_IRQ_Handling+0x574>)
 80014ba:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2108      	movs	r1, #8
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80c3 	beq.w	8001672 <DMA_IRQ_Handling+0x53e>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80bf 	beq.w	8001672 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <DMA_IRQ_Handling+0x560>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d958      	bls.n	80015b2 <DMA_IRQ_Handling+0x47e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a5d      	ldr	r2, [pc, #372]	; (800167c <DMA_IRQ_Handling+0x548>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04f      	beq.n	80015aa <DMA_IRQ_Handling+0x476>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d048      	beq.n	80015a6 <DMA_IRQ_Handling+0x472>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <DMA_IRQ_Handling+0x550>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d040      	beq.n	80015a0 <DMA_IRQ_Handling+0x46c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a59      	ldr	r2, [pc, #356]	; (8001688 <DMA_IRQ_Handling+0x554>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d038      	beq.n	800159a <DMA_IRQ_Handling+0x466>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <DMA_IRQ_Handling+0x558>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d030      	beq.n	8001594 <DMA_IRQ_Handling+0x460>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d028      	beq.n	800158e <DMA_IRQ_Handling+0x45a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a54      	ldr	r2, [pc, #336]	; (8001694 <DMA_IRQ_Handling+0x560>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d020      	beq.n	8001588 <DMA_IRQ_Handling+0x454>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a53      	ldr	r2, [pc, #332]	; (8001698 <DMA_IRQ_Handling+0x564>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <DMA_IRQ_Handling+0x450>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <DMA_IRQ_Handling+0x44c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <DMA_IRQ_Handling+0x446>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <DMA_IRQ_Handling+0x440>
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	e01b      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	e018      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	e015      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001580:	2310      	movs	r3, #16
 8001582:	e013      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001584:	2301      	movs	r3, #1
 8001586:	e011      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158c:	e00e      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800158e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001592:	e00b      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	e008      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	e005      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	e002      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015a6:	2310      	movs	r3, #16
 80015a8:	e000      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <DMA_IRQ_Handling+0x578>)
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e057      	b.n	8001662 <DMA_IRQ_Handling+0x52e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <DMA_IRQ_Handling+0x548>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04f      	beq.n	800165c <DMA_IRQ_Handling+0x528>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d048      	beq.n	8001658 <DMA_IRQ_Handling+0x524>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <DMA_IRQ_Handling+0x550>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <DMA_IRQ_Handling+0x51e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <DMA_IRQ_Handling+0x554>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d038      	beq.n	800164c <DMA_IRQ_Handling+0x518>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2b      	ldr	r2, [pc, #172]	; (800168c <DMA_IRQ_Handling+0x558>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d030      	beq.n	8001646 <DMA_IRQ_Handling+0x512>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d028      	beq.n	8001640 <DMA_IRQ_Handling+0x50c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <DMA_IRQ_Handling+0x560>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d020      	beq.n	800163a <DMA_IRQ_Handling+0x506>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <DMA_IRQ_Handling+0x564>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <DMA_IRQ_Handling+0x502>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <DMA_IRQ_Handling+0x4fe>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <DMA_IRQ_Handling+0x4f8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <DMA_IRQ_Handling+0x4f2>
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	e01b      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	e018      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	e015      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001632:	2310      	movs	r3, #16
 8001634:	e013      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001636:	2301      	movs	r3, #1
 8001638:	e011      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800163a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163e:	e00e      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001644:	e00b      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	e008      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	e005      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	e002      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001658:	2310      	movs	r3, #16
 800165a:	e000      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800165c:	2301      	movs	r3, #1
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <DMA_IRQ_Handling+0x574>)
 8001660:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
	}
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020008 	.word	0x40020008
 8001680:	4002001c 	.word	0x4002001c
 8001684:	40020030 	.word	0x40020030
 8001688:	40020044 	.word	0x40020044
 800168c:	40020058 	.word	0x40020058
 8001690:	4002006c 	.word	0x4002006c
 8001694:	40020080 	.word	0x40020080
 8001698:	40020408 	.word	0x40020408
 800169c:	4002041c 	.word	0x4002041c
 80016a0:	40020430 	.word	0x40020430
 80016a4:	40020444 	.word	0x40020444
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400

080016b0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <GPIO_Init+0x270>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d106      	bne.n	80016d8 <GPIO_Init+0x28>
 80016ca:	4b96      	ldr	r3, [pc, #600]	; (8001924 <GPIO_Init+0x274>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a95      	ldr	r2, [pc, #596]	; (8001924 <GPIO_Init+0x274>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	e03c      	b.n	8001752 <GPIO_Init+0xa2>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <GPIO_Init+0x278>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d106      	bne.n	80016ee <GPIO_Init+0x3e>
 80016e0:	4b90      	ldr	r3, [pc, #576]	; (8001924 <GPIO_Init+0x274>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a8f      	ldr	r2, [pc, #572]	; (8001924 <GPIO_Init+0x274>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	e031      	b.n	8001752 <GPIO_Init+0xa2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a8e      	ldr	r2, [pc, #568]	; (800192c <GPIO_Init+0x27c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d106      	bne.n	8001704 <GPIO_Init+0x54>
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <GPIO_Init+0x274>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a8a      	ldr	r2, [pc, #552]	; (8001924 <GPIO_Init+0x274>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	e026      	b.n	8001752 <GPIO_Init+0xa2>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a8a      	ldr	r2, [pc, #552]	; (8001930 <GPIO_Init+0x280>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d106      	bne.n	800171a <GPIO_Init+0x6a>
 800170c:	4b85      	ldr	r3, [pc, #532]	; (8001924 <GPIO_Init+0x274>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a84      	ldr	r2, [pc, #528]	; (8001924 <GPIO_Init+0x274>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	e01b      	b.n	8001752 <GPIO_Init+0xa2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a85      	ldr	r2, [pc, #532]	; (8001934 <GPIO_Init+0x284>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d106      	bne.n	8001730 <GPIO_Init+0x80>
 8001722:	4b80      	ldr	r3, [pc, #512]	; (8001924 <GPIO_Init+0x274>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <GPIO_Init+0x274>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	e010      	b.n	8001752 <GPIO_Init+0xa2>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a81      	ldr	r2, [pc, #516]	; (8001938 <GPIO_Init+0x288>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d106      	bne.n	8001746 <GPIO_Init+0x96>
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <GPIO_Init+0x274>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a79      	ldr	r2, [pc, #484]	; (8001924 <GPIO_Init+0x274>)
 800173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	e005      	b.n	8001752 <GPIO_Init+0xa2>
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <GPIO_Init+0x274>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a76      	ldr	r2, [pc, #472]	; (8001924 <GPIO_Init+0x274>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001752:	2300      	movs	r3, #0
 8001754:	76fb      	strb	r3, [r7, #27]
 8001756:	e1d0      	b.n	8001afa <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	7efa      	ldrb	r2, [r7, #27]
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 81c0 	beq.w	8001aec <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b11      	cmp	r3, #17
 8001772:	d039      	beq.n	80017e8 <GPIO_Init+0x138>
 8001774:	2b11      	cmp	r3, #17
 8001776:	d807      	bhi.n	8001788 <GPIO_Init+0xd8>
 8001778:	2b01      	cmp	r3, #1
 800177a:	d016      	beq.n	80017aa <GPIO_Init+0xfa>
 800177c:	2b01      	cmp	r3, #1
 800177e:	f0c0 8090 	bcc.w	80018a2 <GPIO_Init+0x1f2>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d04f      	beq.n	8001826 <GPIO_Init+0x176>
 8001786:	e0bd      	b.n	8001904 <GPIO_Init+0x254>
 8001788:	4a6c      	ldr	r2, [pc, #432]	; (800193c <GPIO_Init+0x28c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f000 8089 	beq.w	80018a2 <GPIO_Init+0x1f2>
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <GPIO_Init+0x28c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d802      	bhi.n	800179c <GPIO_Init+0xec>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d064      	beq.n	8001864 <GPIO_Init+0x1b4>
 800179a:	e0b3      	b.n	8001904 <GPIO_Init+0x254>
 800179c:	4a68      	ldr	r2, [pc, #416]	; (8001940 <GPIO_Init+0x290>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d07f      	beq.n	80018a2 <GPIO_Init+0x1f2>
 80017a2:	4a68      	ldr	r2, [pc, #416]	; (8001944 <GPIO_Init+0x294>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d07c      	beq.n	80018a2 <GPIO_Init+0x1f2>
 80017a8:	e0ac      	b.n	8001904 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <GPIO_Init+0x10c>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e010      	b.n	80017de <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <GPIO_Init+0x11e>
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	e007      	b.n	80017de <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d103      	bne.n	80017de <GPIO_Init+0x12e>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f043 0303 	orr.w	r3, r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f023 030c 	bic.w	r3, r3, #12
 80017e4:	61fb      	str	r3, [r7, #28]


					break;
 80017e6:	e08d      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d104      	bne.n	80017fa <GPIO_Init+0x14a>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e010      	b.n	800181c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d104      	bne.n	800180c <GPIO_Init+0x15c>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e007      	b.n	800181c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d103      	bne.n	800181c <GPIO_Init+0x16c>
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f043 0303 	orr.w	r3, r3, #3
 800181a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	61fb      	str	r3, [r7, #28]

					break;
 8001824:	e06e      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d104      	bne.n	8001838 <GPIO_Init+0x188>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e010      	b.n	800185a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d104      	bne.n	800184a <GPIO_Init+0x19a>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	e007      	b.n	800185a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d103      	bne.n	800185a <GPIO_Init+0x1aa>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f043 0303 	orr.w	r3, r3, #3
 8001858:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	61fb      	str	r3, [r7, #28]

					break;
 8001862:	e04f      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d104      	bne.n	8001876 <GPIO_Init+0x1c6>
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e010      	b.n	8001898 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d104      	bne.n	8001888 <GPIO_Init+0x1d8>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e007      	b.n	8001898 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d103      	bne.n	8001898 <GPIO_Init+0x1e8>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f043 0303 	orr.w	r3, r3, #3
 8001896:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f043 030c 	orr.w	r3, r3, #12
 800189e:	61fb      	str	r3, [r7, #28]

					break;
 80018a0:	e030      	b.n	8001904 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80018ba:	e022      	b.n	8001902 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	7efa      	ldrb	r2, [r7, #27]
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
					break;
 80018de:	e010      	b.n	8001902 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d10c      	bne.n	8001902 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	7efa      	ldrb	r2, [r7, #27]
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	615a      	str	r2, [r3, #20]
					break;
 8001902:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001904:	7efb      	ldrb	r3, [r7, #27]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d801      	bhi.n	800190e <GPIO_Init+0x25e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <GPIO_Init+0x262>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001914:	7efb      	ldrb	r3, [r7, #27]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d816      	bhi.n	8001948 <GPIO_Init+0x298>
 800191a:	7efb      	ldrb	r3, [r7, #27]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	e016      	b.n	800194e <GPIO_Init+0x29e>
 8001920:	40010800 	.word	0x40010800
 8001924:	40021000 	.word	0x40021000
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	40011800 	.word	0x40011800
 8001938:	40011c00 	.word	0x40011c00
 800193c:	10110000 	.word	0x10110000
 8001940:	10210000 	.word	0x10210000
 8001944:	10310000 	.word	0x10310000
 8001948:	7efb      	ldrb	r3, [r7, #27]
 800194a:	3b08      	subs	r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	210f      	movs	r1, #15
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	69f9      	ldr	r1, [r7, #28]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80b8 	beq.w	8001aec <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <GPIO_Init+0x45c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a62      	ldr	r2, [pc, #392]	; (8001b0c <GPIO_Init+0x45c>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001990:	7efb      	ldrb	r3, [r7, #27]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <GPIO_Init+0x460>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	210f      	movs	r1, #15
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4958      	ldr	r1, [pc, #352]	; (8001b14 <GPIO_Init+0x464>)
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d01f      	beq.n	80019f8 <GPIO_Init+0x348>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4957      	ldr	r1, [pc, #348]	; (8001b18 <GPIO_Init+0x468>)
 80019bc:	428b      	cmp	r3, r1
 80019be:	d019      	beq.n	80019f4 <GPIO_Init+0x344>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4956      	ldr	r1, [pc, #344]	; (8001b1c <GPIO_Init+0x46c>)
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d013      	beq.n	80019f0 <GPIO_Init+0x340>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4955      	ldr	r1, [pc, #340]	; (8001b20 <GPIO_Init+0x470>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d00d      	beq.n	80019ec <GPIO_Init+0x33c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4954      	ldr	r1, [pc, #336]	; (8001b24 <GPIO_Init+0x474>)
 80019d4:	428b      	cmp	r3, r1
 80019d6:	d007      	beq.n	80019e8 <GPIO_Init+0x338>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4953      	ldr	r1, [pc, #332]	; (8001b28 <GPIO_Init+0x478>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d101      	bne.n	80019e4 <GPIO_Init+0x334>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e00a      	b.n	80019fa <GPIO_Init+0x34a>
 80019e4:	2306      	movs	r3, #6
 80019e6:	e008      	b.n	80019fa <GPIO_Init+0x34a>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e006      	b.n	80019fa <GPIO_Init+0x34a>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e004      	b.n	80019fa <GPIO_Init+0x34a>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <GPIO_Init+0x34a>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <GPIO_Init+0x34a>
 80019f8:	2300      	movs	r3, #0
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	0089      	lsls	r1, r1, #2
 80019fe:	408b      	lsls	r3, r1
 8001a00:	4943      	ldr	r1, [pc, #268]	; (8001b10 <GPIO_Init+0x460>)
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3302      	adds	r3, #2
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001a18:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <GPIO_Init+0x47c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	7efa      	ldrb	r2, [r7, #27]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4611      	mov	r1, r2
 8001a26:	4a41      	ldr	r2, [pc, #260]	; (8001b2c <GPIO_Init+0x47c>)
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e00a      	b.n	8001a44 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <GPIO_Init+0x47c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7efa      	ldrb	r2, [r7, #27]
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	43d2      	mvns	r2, r2
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <GPIO_Init+0x47c>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001a50:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <GPIO_Init+0x47c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	7efa      	ldrb	r2, [r7, #27]
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <GPIO_Init+0x47c>)
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6053      	str	r3, [r2, #4]
 8001a64:	e00a      	b.n	8001a7c <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <GPIO_Init+0x47c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	7efa      	ldrb	r2, [r7, #27]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	43d2      	mvns	r2, r2
 8001a74:	4611      	mov	r1, r2
 8001a76:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <GPIO_Init+0x47c>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <GPIO_Init+0x47c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	7efa      	ldrb	r2, [r7, #27]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4611      	mov	r1, r2
 8001a96:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <GPIO_Init+0x47c>)
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]
 8001a9c:	e00a      	b.n	8001ab4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <GPIO_Init+0x47c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	7efa      	ldrb	r2, [r7, #27]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	43d2      	mvns	r2, r2
 8001aac:	4611      	mov	r1, r2
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <GPIO_Init+0x47c>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <GPIO_Init+0x47c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	7efa      	ldrb	r2, [r7, #27]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <GPIO_Init+0x47c>)
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	60d3      	str	r3, [r2, #12]
 8001ad4:	e00a      	b.n	8001aec <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <GPIO_Init+0x47c>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	7efa      	ldrb	r2, [r7, #27]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	43d2      	mvns	r2, r2
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <GPIO_Init+0x47c>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001af4:	7efb      	ldrb	r3, [r7, #27]
 8001af6:	3301      	adds	r3, #1
 8001af8:	76fb      	strb	r3, [r7, #27]
 8001afa:	7efb      	ldrb	r3, [r7, #27]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	f67f ae2b 	bls.w	8001758 <GPIO_Init+0xa8>
	}
}
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40011800 	.word	0x40011800
 8001b28:	40011c00 	.word	0x40011c00
 8001b2c:	40010400 	.word	0x40010400

08001b30 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d106      	bne.n	8001b54 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001b52:	e006      	b.n	8001b62 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001b80:	883b      	ldrh	r3, [r7, #0]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f002 f9c9 	bl	8003f5c <EXTI_Callback>
	}
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d011      	beq.n	8001c10 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d10c      	bne.n	8001c10 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001c02:	bf00      	nop
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f9      	beq.n	8001c04 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d128      	bne.n	8001c6a <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d105      	bne.n	8001c3a <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c38:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	4313      	orrs	r3, r2
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001c5c:	bf00      	nop
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f9      	beq.n	8001c5e <RCC_OscConfig+0x86>
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000

08001c78 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <RCC_ClockConfig+0x7c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <RCC_ClockConfig+0x7c>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4911      	ldr	r1, [pc, #68]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 0203 	bic.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001cda:	bf00      	nop
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f9      	beq.n	8001cdc <RCC_ClockConfig+0x64>
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000

08001cfc <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <RCC_GetPLLOutputClock+0x1e>
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e020      	b.n	8001d60 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <RCC_GetPLLOutputClock+0x74>)
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e001      	b.n	8001d34 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <RCC_GetPLLOutputClock+0x78>)
 8001d32:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d102      	bne.n	8001d4e <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	72fb      	strb	r3, [r7, #11]
 8001d4c:	e002      	b.n	8001d54 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001d4e:	7abb      	ldrb	r3, [r7, #10]
 8001d50:	3302      	adds	r3, #2
 8001d52:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001d54:	7afa      	ldrb	r2, [r7, #11]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b08d      	sub	sp, #52	; 0x34
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001d92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <RCC_GetPCLKxValue+0x148>)
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9e:	e00d      	b.n	8001dbc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001da8:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <RCC_GetPCLKxValue+0x148>)
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dac:	e006      	b.n	8001dbc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d102      	bne.n	8001dbc <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001db6:	f7ff ffa1 	bl	8001cfc <RCC_GetPLLOutputClock>
 8001dba:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <RCC_GetPCLKxValue+0x14c>)
 8001dbe:	f107 0410 	add.w	r4, r7, #16
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d803      	bhi.n	8001de8 <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001de6:	e00a      	b.n	8001dfe <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dec:	3b08      	subs	r3, #8
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001df4:	4413      	add	r3, r2
 8001df6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <RCC_GetPCLKxValue+0x150>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11a      	bne.n	8001e40 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d803      	bhi.n	8001e2a <RCC_GetPCLKxValue+0xb2>
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e28:	e027      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e34:	4413      	add	r3, r2
 8001e36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e3e:	e01c      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d119      	bne.n	8001e7a <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0adb      	lsrs	r3, r3, #11
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d803      	bhi.n	8001e66 <RCC_GetPCLKxValue+0xee>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e64:	e009      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e70:	4413      	add	r3, r2
 8001e72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <RCC_GetPCLKxValue+0x11e>
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e94:	e00c      	b.n	8001eb0 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d109      	bne.n	8001eb0 <RCC_GetPCLKxValue+0x138>
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3734      	adds	r7, #52	; 0x34
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	007a1200 	.word	0x007a1200
 8001ec4:	08005ba0 	.word	0x08005ba0
 8001ec8:	08005bb0 	.word	0x08005bb0

08001ecc <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fca8 	bl	8003838 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f81f 	bl	8001f2c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]
 8001ef4:	e000      	b.n	8001ef8 <TIM_Base_Init+0x2c>
		return;
 8001ef6:	bf00      	nop
}
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7f1b      	ldrb	r3, [r3, #28]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 fca9 	bl	8003868 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f808 	bl	8001f2c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	771a      	strb	r2, [r3, #28]
 8001f22:	e000      	b.n	8001f26 <TIM_PWM_Init+0x28>
		return;
 8001f24:	bf00      	nop
}
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68d2      	ldr	r2, [r2, #12]
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6852      	ldr	r2, [r2, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6952      	ldr	r2, [r2, #20]
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	f200 80d3 	bhi.w	8002152 <TIM_PWM_ConfigChannel+0x1ba>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <TIM_PWM_ConfigChannel+0x1c>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fe9 	.word	0x08001fe9
 8001fb8:	08002153 	.word	0x08002153
 8001fbc:	08002153 	.word	0x08002153
 8001fc0:	08002153 	.word	0x08002153
 8001fc4:	08002041 	.word	0x08002041
 8001fc8:	08002153 	.word	0x08002153
 8001fcc:	08002153 	.word	0x08002153
 8001fd0:	08002153 	.word	0x08002153
 8001fd4:	0800209d 	.word	0x0800209d
 8001fd8:	08002153 	.word	0x08002153
 8001fdc:	08002153 	.word	0x08002153
 8001fe0:	08002153 	.word	0x08002153
 8001fe4:	080020f7 	.word	0x080020f7
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 0102 	bic.w	r1, r3, #2
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0208 	orr.w	r2, r2, #8
 800203c:	619a      	str	r2, [r3, #24]

			break;
 800203e:	e089      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0210 	bic.w	r2, r2, #16
 800204e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0120 	bic.w	r1, r3, #32
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	011a      	lsls	r2, r3, #4
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	6852      	ldr	r2, [r2, #4]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002098:	619a      	str	r2, [r3, #24]

			break;
 800209a:	e05b      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020aa:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	61da      	str	r2, [r3, #28]

			break;
 80020f4:	e02e      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002104:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	031a      	lsls	r2, r3, #12
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	6852      	ldr	r2, [r2, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214e:	61da      	str	r2, [r3, #28]

			break;
 8002150:	e000      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8002152:	bf00      	nop
	}
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d157      	bne.n	8002222 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <TIM_PeripheralClockControl+0x180>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d106      	bne.n	8002188 <TIM_PeripheralClockControl+0x28>
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002184:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002186:	e0a6      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d106      	bne.n	800219e <TIM_PeripheralClockControl+0x3e>
 8002190:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4a53      	ldr	r2, [pc, #332]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	61d3      	str	r3, [r2, #28]
}
 800219c:	e09b      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <TIM_PeripheralClockControl+0x188>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d106      	bne.n	80021b4 <TIM_PeripheralClockControl+0x54>
 80021a6:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a4e      	ldr	r2, [pc, #312]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	61d3      	str	r3, [r2, #28]
}
 80021b2:	e090      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <TIM_PeripheralClockControl+0x18c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <TIM_PeripheralClockControl+0x6a>
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a48      	ldr	r2, [pc, #288]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	61d3      	str	r3, [r2, #28]
}
 80021c8:	e085      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <TIM_PeripheralClockControl+0x190>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d106      	bne.n	80021e0 <TIM_PeripheralClockControl+0x80>
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	61d3      	str	r3, [r2, #28]
}
 80021de:	e07a      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <TIM_PeripheralClockControl+0x194>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d106      	bne.n	80021f6 <TIM_PeripheralClockControl+0x96>
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	61d3      	str	r3, [r2, #28]
}
 80021f4:	e06f      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <TIM_PeripheralClockControl+0x198>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d106      	bne.n	800220c <TIM_PeripheralClockControl+0xac>
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	61d3      	str	r3, [r2, #28]
}
 800220a:	e064      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <TIM_PeripheralClockControl+0x19c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d160      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800221a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800221e:	6193      	str	r3, [r2, #24]
}
 8002220:	e059      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d156      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <TIM_PeripheralClockControl+0x180>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d106      	bne.n	800223e <TIM_PeripheralClockControl+0xde>
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223a:	6193      	str	r3, [r2, #24]
}
 800223c:	e04b      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d106      	bne.n	8002254 <TIM_PeripheralClockControl+0xf4>
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	61d3      	str	r3, [r2, #28]
}
 8002252:	e040      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <TIM_PeripheralClockControl+0x188>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <TIM_PeripheralClockControl+0x10a>
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002262:	f023 0302 	bic.w	r3, r3, #2
 8002266:	61d3      	str	r3, [r2, #28]
}
 8002268:	e035      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <TIM_PeripheralClockControl+0x18c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <TIM_PeripheralClockControl+0x120>
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	61d3      	str	r3, [r2, #28]
}
 800227e:	e02a      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <TIM_PeripheralClockControl+0x190>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d106      	bne.n	8002296 <TIM_PeripheralClockControl+0x136>
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800228e:	f023 0308 	bic.w	r3, r3, #8
 8002292:	61d3      	str	r3, [r2, #28]
}
 8002294:	e01f      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <TIM_PeripheralClockControl+0x194>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d106      	bne.n	80022ac <TIM_PeripheralClockControl+0x14c>
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022a4:	f023 0310 	bic.w	r3, r3, #16
 80022a8:	61d3      	str	r3, [r2, #28]
}
 80022aa:	e014      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <TIM_PeripheralClockControl+0x198>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d106      	bne.n	80022c2 <TIM_PeripheralClockControl+0x162>
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022ba:	f023 0320 	bic.w	r3, r3, #32
 80022be:	61d3      	str	r3, [r2, #28]
}
 80022c0:	e009      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <TIM_PeripheralClockControl+0x19c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d105      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d4:	6193      	str	r3, [r2, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40001000 	.word	0x40001000
 80022f8:	40001400 	.word	0x40001400
 80022fc:	40013400 	.word	0x40013400

08002300 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <TIM_PWM_Start+0x22>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	621a      	str	r2, [r3, #32]
 8002320:	e022      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d108      	bne.n	800233a <TIM_PWM_Start+0x3a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0210 	orr.w	r2, r2, #16
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e016      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d108      	bne.n	8002352 <TIM_PWM_Start+0x52>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	e00a      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d107      	bne.n	8002368 <TIM_PWM_Start+0x68>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a1a      	ldr	r2, [r3, #32]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002366:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002376:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
	...

08002394 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <TIM_IRQHandling+0x3e>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <TIM_IRQHandling+0x48>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <TIM_IRQHandling+0x48>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f001 fd03 	bl	8003dd8 <TIM_PeriodElapsedCallback>
	}
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40001000 	.word	0x40001000

080023e0 <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 f98f 	bl	8003710 <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f8db 	bl	80025b4 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800241e:	f023 030c 	bic.w	r3, r3, #12
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
	config = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	430a      	orrs	r2, r1
 800244c:	611a      	str	r2, [r3, #16]
	config = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	430a      	orrs	r2, r1
 800246e:	615a      	str	r2, [r3, #20]
	config = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 f8b6 	bl	80025f0 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f892 	bl	80025b4 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d136      	bne.n	8002520 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <USART_PeripheralClockControl+0xfc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d106      	bne.n	80024c8 <USART_PeripheralClockControl+0x28>
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 80024c6:	e064      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <USART_PeripheralClockControl+0x104>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d106      	bne.n	80024de <USART_PeripheralClockControl+0x3e>
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	61d3      	str	r3, [r2, #28]
}
 80024dc:	e059      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <USART_PeripheralClockControl+0x108>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d106      	bne.n	80024f4 <USART_PeripheralClockControl+0x54>
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	61d3      	str	r3, [r2, #28]
}
 80024f2:	e04e      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <USART_PeripheralClockControl+0x10c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <USART_PeripheralClockControl+0x6a>
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002506:	61d3      	str	r3, [r2, #28]
}
 8002508:	e043      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <USART_PeripheralClockControl+0x110>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d13f      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251c:	61d3      	str	r3, [r2, #28]
}
 800251e:	e038      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d135      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <USART_PeripheralClockControl+0xfc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <USART_PeripheralClockControl+0x9c>
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002538:	6193      	str	r3, [r2, #24]
}
 800253a:	e02a      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <USART_PeripheralClockControl+0x104>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d106      	bne.n	8002552 <USART_PeripheralClockControl+0xb2>
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800254a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800254e:	61d3      	str	r3, [r2, #28]
}
 8002550:	e01f      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <USART_PeripheralClockControl+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d106      	bne.n	8002568 <USART_PeripheralClockControl+0xc8>
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	61d3      	str	r3, [r2, #28]
}
 8002566:	e014      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <USART_PeripheralClockControl+0x10c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d106      	bne.n	800257e <USART_PeripheralClockControl+0xde>
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002576:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800257a:	61d3      	str	r3, [r2, #28]
}
 800257c:	e009      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <USART_PeripheralClockControl+0x110>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d105      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800258c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002590:	61d3      	str	r3, [r2, #28]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40013800 	.word	0x40013800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40004800 	.word	0x40004800
 80025ac:	40004c00 	.word	0x40004c00
 80025b0:	40005000 	.word	0x40005000

080025b4 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <USART_PeripheralControl+0x20>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 80025d2:	e008      	b.n	80025e6 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <USART_PeripheralControl+0x32>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <USART_SetBaudRate+0xbc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d104      	bne.n	800260c <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff fbb8 	bl	8001d78 <RCC_GetPCLKxValue>
 8002608:	61f8      	str	r0, [r7, #28]
 800260a:	e003      	b.n	8002614 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fbb3 	bl	8001d78 <RCC_GetPCLKxValue>
 8002612:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 8002614:	69f8      	ldr	r0, [r7, #28]
 8002616:	f7fe fafd 	bl	8000c14 <__aeabi_ui2f>
 800261a:	4604      	mov	r4, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe faf7 	bl	8000c14 <__aeabi_ui2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f7fe fbfe 	bl	8000e2c <__aeabi_fdiv>
 8002630:	4603      	mov	r3, r0
 8002632:	491f      	ldr	r1, [pc, #124]	; (80026b0 <USART_SetBaudRate+0xc0>)
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb45 	bl	8000cc4 <__aeabi_fmul>
 800263a:	4603      	mov	r3, r0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fc91 	bl	8000f64 <__aeabi_f2uiz>
 8002642:	4603      	mov	r3, r0
 8002644:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <USART_SetBaudRate+0xc4>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	440b      	add	r3, r1
 8002660:	4619      	mov	r1, r3
 8002662:	0088      	lsls	r0, r1, #2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	440b      	add	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	3332      	adds	r3, #50	; 0x32
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <USART_SetBaudRate+0xc4>)
 800267a:	fb82 1203 	smull	r1, r2, r2, r3
 800267e:	1152      	asrs	r2, r2, #5
 8002680:	17db      	asrs	r3, r3, #31
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	0119      	lsls	r1, r3, #4
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	430b      	orrs	r3, r1
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	3724      	adds	r7, #36	; 0x24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	40013800 	.word	0x40013800
 80026b0:	42c80000 	.word	0x42c80000
 80026b4:	51eb851f 	.word	0x51eb851f

080026b8 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <UART_Transmit_DMA+0x84>)
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <UART_Transmit_DMA+0x88>)
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <UART_Transmit_DMA+0x8c>)
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3304      	adds	r3, #4
 800270c:	461a      	mov	r2, r3
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f7fe fcdf 	bl	80010d2 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002732:	615a      	str	r2, [r3, #20]
}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800277f 	.word	0x0800277f
 8002740:	0800279b 	.word	0x0800279b
 8002744:	080027b7 	.word	0x080027b7

08002748 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ffdb 	bl	8002748 <UART_TxCpltCallback>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ffd6 	bl	800275a <UART_TxHalfCpltCallback>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff ffd1 	bl	800276c <UART_ErrorCallback>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f001 f8bc 	bl	8003958 <BLDC_MspInit>

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f6:	3b01      	subs	r3, #1
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d87b      	bhi.n	80028f4 <BLDC_Drive+0x10c>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <BLDC_Drive+0x1c>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	080028d1 	.word	0x080028d1
 8002808:	08002841 	.word	0x08002841
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002889 	.word	0x08002889
 8002814:	080028ad 	.word	0x080028ad
 8002818:	08002865 	.word	0x08002865
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <BLDC_Drive+0x46>
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb0a 	bl	8002e40 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 800282c:	e064      	b.n	80028f8 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002834:	2b01      	cmp	r3, #1
 8002836:	d15f      	bne.n	80028f8 <BLDC_Drive+0x110>
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa59 	bl	8002cf0 <BLDC_Step2>
			break;
 800283e:	e05b      	b.n	80028f8 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <BLDC_Drive+0x6a>
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fac0 	bl	8002dd0 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002850:	e054      	b.n	80028fc <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002858:	2b01      	cmp	r3, #1
 800285a:	d14f      	bne.n	80028fc <BLDC_Drive+0x114>
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fa0f 	bl	8002c80 <BLDC_Step1>
			break;
 8002862:	e04b      	b.n	80028fc <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <BLDC_Drive+0x8e>
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa76 	bl	8002d60 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8002874:	e044      	b.n	8002900 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287c:	2b01      	cmp	r3, #1
 800287e:	d13f      	bne.n	8002900 <BLDC_Drive+0x118>
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb15 	bl	8002eb0 <BLDC_Step6>
			break;
 8002886:	e03b      	b.n	8002900 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <BLDC_Drive+0xb2>
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa2c 	bl	8002cf0 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002898:	e034      	b.n	8002904 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d12f      	bne.n	8002904 <BLDC_Drive+0x11c>
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 facb 	bl	8002e40 <BLDC_Step5>
			break;
 80028aa:	e02b      	b.n	8002904 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <BLDC_Drive+0xd6>
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9e2 	bl	8002c80 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 80028bc:	e024      	b.n	8002908 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d11f      	bne.n	8002908 <BLDC_Drive+0x120>
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa81 	bl	8002dd0 <BLDC_Step4>
			break;
 80028ce:	e01b      	b.n	8002908 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <BLDC_Drive+0xfa>
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fae8 	bl	8002eb0 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 80028e0:	e014      	b.n	800290c <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10f      	bne.n	800290c <BLDC_Drive+0x124>
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa37 	bl	8002d60 <BLDC_Step3>
			break;
 80028f2:	e00b      	b.n	800290c <BLDC_Drive+0x124>
		}

		default :
			break;
 80028f4:	bf00      	nop
 80028f6:	e00a      	b.n	800290e <BLDC_Drive+0x126>
			break;
 80028f8:	bf00      	nop
 80028fa:	e008      	b.n	800290e <BLDC_Drive+0x126>
			break;
 80028fc:	bf00      	nop
 80028fe:	e006      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002900:	bf00      	nop
 8002902:	e004      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <BLDC_Drive+0x126>
			break;
 800290c:	bf00      	nop
	}
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop

08002918 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	b29b      	uxth	r3, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->Speed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 800293e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fd6e 	bl	8000424 <__aeabi_i2d>
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <BLDC_Get_Speed+0x94>)
 800294e:	f7fd fdd3 	bl	80004f8 <__aeabi_dmul>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	4625      	mov	r5, r4
 8002958:	461c      	mov	r4, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	461a      	mov	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002968:	fb03 f302 	mul.w	r3, r3, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fd59 	bl	8000424 <__aeabi_i2d>
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <BLDC_Get_Speed+0x98>)
 8002978:	f7fd fdbe 	bl	80004f8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fee2 	bl	800074c <__aeabi_ddiv>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	4618      	mov	r0, r3
 800298e:	4621      	mov	r1, r4
 8002990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002994:	f7fd feda 	bl	800074c <__aeabi_ddiv>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	404e0000 	.word	0x404e0000
 80029b0:	40080000 	.word	0x40080000

080029b4 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c2:	3b01      	subs	r3, #1
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	f200 8093 	bhi.w	8002af0 <BLDC_Get_Position+0x13c>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <BLDC_Get_Position+0x1c>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	08002ac5 	.word	0x08002ac5
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	08002a6d 	.word	0x08002a6d
 80029e0:	08002a99 	.word	0x08002a99
 80029e4:	08002a41 	.word	0x08002a41
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d105      	bne.n	80029fe <BLDC_Get_Position+0x4a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 80029fc:	e07a      	b.n	8002af4 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d175      	bne.n	8002af4 <BLDC_Get_Position+0x140>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a12:	e06f      	b.n	8002af4 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d105      	bne.n	8002a2a <BLDC_Get_Position+0x76>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002a28:	e066      	b.n	8002af8 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d161      	bne.n	8002af8 <BLDC_Get_Position+0x144>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a3e:	e05b      	b.n	8002af8 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d105      	bne.n	8002a56 <BLDC_Get_Position+0xa2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002a54:	e052      	b.n	8002afc <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d14d      	bne.n	8002afc <BLDC_Get_Position+0x148>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a6a:	e047      	b.n	8002afc <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d105      	bne.n	8002a82 <BLDC_Get_Position+0xce>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002a80:	e03e      	b.n	8002b00 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d139      	bne.n	8002b00 <BLDC_Get_Position+0x14c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a96:	e033      	b.n	8002b00 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d105      	bne.n	8002aae <BLDC_Get_Position+0xfa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002aac:	e02a      	b.n	8002b04 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d125      	bne.n	8002b04 <BLDC_Get_Position+0x150>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002ac2:	e01f      	b.n	8002b04 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d105      	bne.n	8002ada <BLDC_Get_Position+0x126>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002ad8:	e016      	b.n	8002b08 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d111      	bne.n	8002b08 <BLDC_Get_Position+0x154>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002aee:	e00b      	b.n	8002b08 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002af0:	bf00      	nop
 8002af2:	e00a      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002af4:	bf00      	nop
 8002af6:	e008      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002af8:	bf00      	nop
 8002afa:	e006      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002afc:	bf00      	nop
 8002afe:	e004      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b08:	bf00      	nop
	}

	pBLDCHandle->Position = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fc88 	bl	8000424 <__aeabi_i2d>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002b1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	f7fd fce9 	bl	80004f8 <__aeabi_dmul>
 8002b26:	4603      	mov	r3, r0
 8002b28:	460c      	mov	r4, r1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6858      	ldr	r0, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe ffe9 	bl	8001b30 <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0210 	bic.w	r2, r2, #16
 8002b84:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b98:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	f000 fc3e 	bl	800341c <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 facd 	bl	8004148 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f107 0208 	add.w	r2, r7, #8
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fd70 	bl	80016b0 <GPIO_Init>
	Delay_ms(10);
 8002bd0:	200a      	movs	r0, #10
 8002bd2:	f000 fc23 	bl	800341c <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6898      	ldr	r0, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fe ffa4 	bl	8001b30 <GPIO_WritePin>
	Delay_ms(10);
 8002be8:	200a      	movs	r0, #10
 8002bea:	f000 fc17 	bl	800341c <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6898      	ldr	r0, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7fe ff98 	bl	8001b30 <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	2210      	movs	r2, #16
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fa9d 	bl	8004148 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fd40 	bl	80016b0 <GPIO_Init>
	Delay_ms(10);
 8002c30:	200a      	movs	r0, #10
 8002c32:	f000 fbf3 	bl	800341c <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0210 	orr.w	r2, r2, #16
 8002c5c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c70:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002c72:	200a      	movs	r0, #10
 8002c74:	f000 fbd2 	bl	800341c <Delay_ms>
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4812      	ldr	r0, [pc, #72]	; (8002cec <BLDC_Step1+0x6c>)
 8002ca2:	f7fe ff63 	bl	8001b6c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ccc:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0210 	orr.w	r2, r2, #16
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40010c00 	.word	0x40010c00

08002cf0 <BLDC_Step2>:

void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4812      	ldr	r0, [pc, #72]	; (8002d5c <BLDC_Step2+0x6c>)
 8002d12:	f7fe ff2b 	bl	8001b6c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a1a      	ldr	r2, [r3, #32]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0210 	orr.w	r2, r2, #16
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40010c00 	.word	0x40010c00

08002d60 <BLDC_Step3>:

void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4812      	ldr	r0, [pc, #72]	; (8002dcc <BLDC_Step3+0x6c>)
 8002d82:	f7fe fef3 	bl	8001b6c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0210 	bic.w	r2, r2, #16
 8002d98:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dac:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40010c00 	.word	0x40010c00

08002dd0 <BLDC_Step4>:

void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	b299      	uxth	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4812      	ldr	r0, [pc, #72]	; (8002e3c <BLDC_Step4+0x6c>)
 8002df2:	f7fe febb 	bl	8001b6c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40010c00 	.word	0x40010c00

08002e40 <BLDC_Step5>:

void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4812      	ldr	r0, [pc, #72]	; (8002eac <BLDC_Step5+0x6c>)
 8002e62:	f7fe fe83 	bl	8001b6c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0210 	bic.w	r2, r2, #16
 8002e8c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40010c00 	.word	0x40010c00

08002eb0 <BLDC_Step6>:

void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4812      	ldr	r0, [pc, #72]	; (8002f1c <BLDC_Step6+0x6c>)
 8002ed2:	f7fe fe4b 	bl	8001b6c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0210 	bic.w	r2, r2, #16
 8002efc:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40010c00 	.word	0x40010c00

08002f20 <BLDC_SpeedPID>:


void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8002f20:	b5b0      	push	{r4, r5, r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */

	err = pBLDCHandle->RefSpeed - pBLDCHandle->Speed;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002f38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	f7fd f922 	bl	8000188 <__aeabi_dsub>
 8002f44:	4603      	mov	r3, r0
 8002f46:	460c      	mov	r4, r1
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <BLDC_SpeedPID+0x16c>)
 8002f4a:	e9c2 3400 	strd	r3, r4, [r2]

	P_term = pBLDCHandle->Kp * err;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <BLDC_SpeedPID+0x16c>)
 8002f56:	cb18      	ldmia	r3, {r3, r4}
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	f7fd facc 	bl	80004f8 <__aeabi_dmul>
 8002f60:	4603      	mov	r3, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <BLDC_SpeedPID+0x170>)
 8002f66:	e9c2 3400 	strd	r3, r4, [r2]
	I_term += pBLDCHandle->Ki * err * dt;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <BLDC_SpeedPID+0x16c>)
 8002f72:	cb18      	ldmia	r3, {r3, r4}
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	f7fd fabe 	bl	80004f8 <__aeabi_dmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	4618      	mov	r0, r3
 8002f82:	4621      	mov	r1, r4
 8002f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f88:	f7fd fab6 	bl	80004f8 <__aeabi_dmul>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	4618      	mov	r0, r3
 8002f92:	4621      	mov	r1, r4
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <BLDC_SpeedPID+0x174>)
 8002f96:	cb18      	ldmia	r3, {r3, r4}
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	f7fd f8f6 	bl	800018c <__adddf3>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <BLDC_SpeedPID+0x174>)
 8002fa6:	e9c2 3400 	strd	r3, r4, [r2]
	D_term = pBLDCHandle->Kd * (err - errPrv);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <BLDC_SpeedPID+0x16c>)
 8002fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <BLDC_SpeedPID+0x178>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd f8e4 	bl	8000188 <__aeabi_dsub>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd fa96 	bl	80004f8 <__aeabi_dmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <BLDC_SpeedPID+0x17c>)
 8002fd2:	e9c2 3400 	strd	r3, r4, [r2]

	pBLDCHandle->PwmPID = P_term + I_term + D_term;
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <BLDC_SpeedPID+0x170>)
 8002fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <BLDC_SpeedPID+0x174>)
 8002fde:	cb18      	ldmia	r3, {r3, r4}
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	f7fd f8d2 	bl	800018c <__adddf3>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	460c      	mov	r4, r1
 8002fec:	4618      	mov	r0, r3
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <BLDC_SpeedPID+0x17c>)
 8002ff2:	cb18      	ldmia	r3, {r3, r4}
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f7fd f8c8 	bl	800018c <__adddf3>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98

	errPrv = err;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <BLDC_SpeedPID+0x16c>)
 8003008:	cb18      	ldmia	r3, {r3, r4}
 800300a:	4a23      	ldr	r2, [pc, #140]	; (8003098 <BLDC_SpeedPID+0x178>)
 800300c:	e9c2 3400 	strd	r3, r4, [r2]

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f7fd fcf1 	bl	8000a04 <__aeabi_dcmpge>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <BLDC_SpeedPID+0x112>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003030:	e00f      	b.n	8003052 <BLDC_SpeedPID+0x132>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd fccc 	bl	80009dc <__aeabi_dcmplt>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <BLDC_SpeedPID+0x132>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8003058:	e9d4 3400 	ldrd	r3, r4, [r4]
 800305c:	4618      	mov	r0, r3
 800305e:	4621      	mov	r1, r4
 8003060:	f7fd fcfa 	bl	8000a58 <__aeabi_d2iz>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	bfb8      	it	lt
 800306a:	425b      	neglt	r3, r3
 800306c:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 800306e:	8afb      	ldrh	r3, [r7, #22]
 8003070:	2b5f      	cmp	r3, #95	; 0x5f
 8003072:	d901      	bls.n	8003078 <BLDC_SpeedPID+0x158>
 8003074:	235f      	movs	r3, #95	; 0x5f
 8003076:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 8003078:	8afb      	ldrh	r3, [r7, #22]
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fff2 	bl	8004066 <SetPwmDuty>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	bf00      	nop
 800308c:	200001f0 	.word	0x200001f0
 8003090:	20000200 	.word	0x20000200
 8003094:	20000208 	.word	0x20000208
 8003098:	200001f8 	.word	0x200001f8
 800309c:	20000210 	.word	0x20000210

080030a0 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	460b      	mov	r3, r1
 80030ac:	71bb      	strb	r3, [r7, #6]
 80030ae:	4613      	mov	r3, r2
 80030b0:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 80030b2:	797b      	ldrb	r3, [r7, #5]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11d      	bne.n	80030f4 <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b1f      	cmp	r3, #31
 80030bc:	d80a      	bhi.n	80030d4 <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <NVIC_IRQConfig+0xcc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	79fa      	ldrb	r2, [r7, #7]
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <NVIC_IRQConfig+0xcc>)
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e033      	b.n	800313c <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b3b      	cmp	r3, #59	; 0x3b
 80030d8:	d830      	bhi.n	800313c <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <NVIC_IRQConfig+0xcc>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <NVIC_IRQConfig+0xcc>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]
 80030f2:	e023      	b.n	800313c <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 80030f4:	797b      	ldrb	r3, [r7, #5]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d120      	bne.n	800313c <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b1f      	cmp	r3, #31
 80030fe:	d80c      	bhi.n	800311a <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <NVIC_IRQConfig+0xcc>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4611      	mov	r1, r2
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <NVIC_IRQConfig+0xcc>)
 8003112:	430b      	orrs	r3, r1
 8003114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003118:	e010      	b.n	800313c <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b3b      	cmp	r3, #59	; 0x3b
 800311e:	d80d      	bhi.n	800313c <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <NVIC_IRQConfig+0xcc>)
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	79fa      	ldrb	r2, [r7, #7]
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4611      	mov	r1, r2
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <NVIC_IRQConfig+0xcc>)
 8003136:	430b      	orrs	r3, r1
 8003138:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <NVIC_IRQConfig+0xcc>)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	4413      	add	r3, r2
 8003142:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8003146:	b2db      	uxtb	r3, r3
 8003148:	b25a      	sxtb	r2, r3
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	b25b      	sxtb	r3, r3
 8003150:	4313      	orrs	r3, r2
 8003152:	b259      	sxtb	r1, r3
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <NVIC_IRQConfig+0xcc>)
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	b2c9      	uxtb	r1, r1
 800315a:	4413      	add	r3, r2
 800315c:	460a      	mov	r2, r1
 800315e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	e000e100 	.word	0xe000e100

08003170 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b092      	sub	sp, #72	; 0x48
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	2228      	movs	r2, #40	; 0x28
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 ffdd 	bl	8004148 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	2214      	movs	r2, #20
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 ffd6 	bl	8004148 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800319c:	2301      	movs	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 80031a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a4:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 80031b0:	2302      	movs	r3, #2
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	3b10      	subs	r3, #16
 80031b8:	2b38      	cmp	r3, #56	; 0x38
 80031ba:	f200 8101 	bhi.w	80033c0 <SystemClock_Config+0x250>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <SystemClock_Config+0x54>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080032a9 	.word	0x080032a9
 80031c8:	080033c1 	.word	0x080033c1
 80031cc:	080033c1 	.word	0x080033c1
 80031d0:	080033c1 	.word	0x080033c1
 80031d4:	080033c1 	.word	0x080033c1
 80031d8:	080033c1 	.word	0x080033c1
 80031dc:	080033c1 	.word	0x080033c1
 80031e0:	080033c1 	.word	0x080033c1
 80031e4:	080032c9 	.word	0x080032c9
 80031e8:	080033c1 	.word	0x080033c1
 80031ec:	080033c1 	.word	0x080033c1
 80031f0:	080033c1 	.word	0x080033c1
 80031f4:	080033c1 	.word	0x080033c1
 80031f8:	080033c1 	.word	0x080033c1
 80031fc:	080033c1 	.word	0x080033c1
 8003200:	080033c1 	.word	0x080033c1
 8003204:	080032eb 	.word	0x080032eb
 8003208:	080033c1 	.word	0x080033c1
 800320c:	080033c1 	.word	0x080033c1
 8003210:	080033c1 	.word	0x080033c1
 8003214:	080033c1 	.word	0x080033c1
 8003218:	080033c1 	.word	0x080033c1
 800321c:	080033c1 	.word	0x080033c1
 8003220:	080033c1 	.word	0x080033c1
 8003224:	0800330d 	.word	0x0800330d
 8003228:	080033c1 	.word	0x080033c1
 800322c:	080033c1 	.word	0x080033c1
 8003230:	080033c1 	.word	0x080033c1
 8003234:	080033c1 	.word	0x080033c1
 8003238:	080033c1 	.word	0x080033c1
 800323c:	080033c1 	.word	0x080033c1
 8003240:	080033c1 	.word	0x080033c1
 8003244:	08003331 	.word	0x08003331
 8003248:	080033c1 	.word	0x080033c1
 800324c:	080033c1 	.word	0x080033c1
 8003250:	080033c1 	.word	0x080033c1
 8003254:	080033c1 	.word	0x080033c1
 8003258:	080033c1 	.word	0x080033c1
 800325c:	080033c1 	.word	0x080033c1
 8003260:	080033c1 	.word	0x080033c1
 8003264:	08003355 	.word	0x08003355
 8003268:	080033c1 	.word	0x080033c1
 800326c:	080033c1 	.word	0x080033c1
 8003270:	080033c1 	.word	0x080033c1
 8003274:	080033c1 	.word	0x080033c1
 8003278:	080033c1 	.word	0x080033c1
 800327c:	080033c1 	.word	0x080033c1
 8003280:	080033c1 	.word	0x080033c1
 8003284:	08003379 	.word	0x08003379
 8003288:	080033c1 	.word	0x080033c1
 800328c:	080033c1 	.word	0x080033c1
 8003290:	080033c1 	.word	0x080033c1
 8003294:	080033c1 	.word	0x080033c1
 8003298:	080033c1 	.word	0x080033c1
 800329c:	080033c1 	.word	0x080033c1
 80032a0:	080033c1 	.word	0x080033c1
 80032a4:	0800339d 	.word	0x0800339d
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 80032a8:	2300      	movs	r3, #0
 80032aa:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ac:	230f      	movs	r3, #15
 80032ae:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b0:	2302      	movs	r3, #2
 80032b2:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80032c6:	e07c      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 80032c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ce:	230f      	movs	r3, #15
 80032d0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032d2:	2302      	movs	r3, #2
 80032d4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80032e8:	e06b      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 80032ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f0:	230f      	movs	r3, #15
 80032f2:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f4:	2302      	movs	r3, #2
 80032f6:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800330a:	e05a      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 800330c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003310:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003312:	230f      	movs	r3, #15
 8003314:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003316:	2302      	movs	r3, #2
 8003318:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 800331e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003322:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800332e:	e048      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8003330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003334:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003336:	230f      	movs	r3, #15
 8003338:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800333a:	2302      	movs	r3, #2
 800333c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8003342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003346:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003352:	e036      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003354:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003358:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800335a:	230f      	movs	r3, #15
 800335c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800335e:	2302      	movs	r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003370:	2302      	movs	r3, #2
 8003372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003376:	e024      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003378:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800337c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800337e:	230f      	movs	r3, #15
 8003380:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003382:	2302      	movs	r3, #2
 8003384:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 800338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003394:	2302      	movs	r3, #2
 8003396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800339a:	e012      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 800339c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033a2:	230f      	movs	r3, #15
 80033a4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a6:	2302      	movs	r3, #2
 80033a8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 80033ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80033be:	e000      	b.n	80033c2 <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 80033c0:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fc06 	bl	8001bd8 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 80033cc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fc4e 	bl	8001c78 <RCC_ClockConfig>
}
 80033dc:	bf00      	nop
 80033de:	3748      	adds	r7, #72	; 0x48
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <Delay_us>:


void Delay_us(uint32_t time_us)
{
 80033e4:	b4b0      	push	{r4, r5, r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 80033ec:	2400      	movs	r4, #0
 80033ee:	e006      	b.n	80033fe <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 80033f0:	2500      	movs	r5, #0
 80033f2:	e001      	b.n	80033f8 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 80033f4:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 80033f6:	3501      	adds	r5, #1
 80033f8:	2d4c      	cmp	r5, #76	; 0x4c
 80033fa:	d9fb      	bls.n	80033f4 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 80033fc:	3401      	adds	r4, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <Delay_us+0x34>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	429c      	cmp	r4, r3
 800340a:	d3f1      	bcc.n	80033f0 <Delay_us+0xc>
		}
	}
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bcb0      	pop	{r4, r5, r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	cccccccd 	.word	0xcccccccd

0800341c <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ffd8 	bl	80033e4 <Delay_us>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <TIM6_IRQHandler+0x10>)
 8003442:	f7fe ffa7 	bl	8002394 <TIM_IRQHandling>
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000370 	.word	0x20000370

08003450 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <EXTI9_5_IRQHandler+0x14>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fba1 	bl	8001ba0 <EXTI_IRQHandling>
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000230 	.word	0x20000230

08003468 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <DMA1_Channel7_IRQHandler>:


void DMA1_Channel7_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART2Handle.hdmatx);
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <DMA1_Channel7_IRQHandler+0x14>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fe59 	bl	8001134 <DMA_IRQ_Handling>
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200002f0 	.word	0x200002f0
 800348c:	00000000 	.word	0x00000000

08003490 <main>:

#include "main.h"


int main(void)
{
 8003490:	b598      	push	{r3, r4, r7, lr}
 8003492:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003494:	2048      	movs	r0, #72	; 0x48
 8003496:	f7ff fe6b 	bl	8003170 <SystemClock_Config>

	Delay_ms(3000);
 800349a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800349e:	f7ff ffbd 	bl	800341c <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 80034a2:	f000 fd77 	bl	8003f94 <MemsetHandleStructure>

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 80034a6:	f000 fc85 	bl	8003db4 <DMA1_Init>
	Button_Init();				// Initialize peripherals related to Button
 80034aa:	f000 fb93 	bl	8003bd4 <Button_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 80034ae:	f000 fbab 	bl	8003c08 <BLDC1_Init>
	UART2_Init();				// Initialize UART2 to transmit data to PC
 80034b2:	f000 fc23 	bl	8003cfc <UART2_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 80034b6:	f000 fc4b 	bl	8003d50 <TIM6_Init>
	Delay_ms(10);
 80034ba:	200a      	movs	r0, #10
 80034bc:	f7ff ffae 	bl	800341c <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 80034c0:	488f      	ldr	r0, [pc, #572]	; (8003700 <main+0x270>)
 80034c2:	f000 fd8f 	bl	8003fe4 <StartTimerPwm>
	Delay_ms(10);
 80034c6:	200a      	movs	r0, #10
 80034c8:	f7ff ffa8 	bl	800341c <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 80034cc:	488c      	ldr	r0, [pc, #560]	; (8003700 <main+0x270>)
 80034ce:	f000 fda3 	bl	8004018 <DisableTimerPwmChannel>
	Delay_ms(10);
 80034d2:	200a      	movs	r0, #10
 80034d4:	f7ff ffa2 	bl	800341c <Delay_ms>
	 */


	while(1)
	{
		if(ButtonFlag == FLAG_SET)
 80034d8:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <main+0x274>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d1fb      	bne.n	80034d8 <main+0x48>
		{
			/* Button is pressed */

			Delay_ms(2000);		// Wait a while to avoid Button chattering
 80034e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034e4:	f7ff ff9a 	bl	800341c <Delay_ms>

			if(BLDC1Handle.MotorState == STOP)
 80034e8:	4b85      	ldr	r3, [pc, #532]	; (8003700 <main+0x270>)
 80034ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	f040 80c4 	bne.w	800367c <main+0x1ec>
			{
				/* Previous Motor state was STOP */

				// 1. Change MotorState from STOP to RUN
				BLDC1Handle.MotorState = RUN;
 80034f4:	4b82      	ldr	r3, [pc, #520]	; (8003700 <main+0x270>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 3. To Make 'BLDC_Get_Position' function Operate perfectly, Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 80034fc:	4b82      	ldr	r3, [pc, #520]	; (8003708 <main+0x278>)
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <main+0x270>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <main+0x270>)
 800350c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003510:	4b7b      	ldr	r3, [pc, #492]	; (8003700 <main+0x270>)
 8003512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003516:	3b01      	subs	r3, #1
 8003518:	2b05      	cmp	r3, #5
 800351a:	f200 8086 	bhi.w	800362a <main+0x19a>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <main+0x94>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003605 	.word	0x08003605
 8003528:	08003565 	.word	0x08003565
 800352c:	0800353d 	.word	0x0800353d
 8003530:	080035b5 	.word	0x080035b5
 8003534:	080035dd 	.word	0x080035dd
 8003538:	0800358d 	.word	0x0800358d
 800353c:	4b70      	ldr	r3, [pc, #448]	; (8003700 <main+0x270>)
 800353e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <main+0xc0>
 8003546:	4b6e      	ldr	r3, [pc, #440]	; (8003700 <main+0x270>)
 8003548:	2202      	movs	r2, #2
 800354a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800354e:	e06c      	b.n	800362a <main+0x19a>
 8003550:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <main+0x270>)
 8003552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003556:	2b01      	cmp	r3, #1
 8003558:	d167      	bne.n	800362a <main+0x19a>
 800355a:	4b69      	ldr	r3, [pc, #420]	; (8003700 <main+0x270>)
 800355c:	2201      	movs	r2, #1
 800355e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003562:	e062      	b.n	800362a <main+0x19a>
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <main+0x270>)
 8003566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <main+0xe8>
 800356e:	4b64      	ldr	r3, [pc, #400]	; (8003700 <main+0x270>)
 8003570:	2206      	movs	r2, #6
 8003572:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003576:	e058      	b.n	800362a <main+0x19a>
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <main+0x270>)
 800357a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800357e:	2b01      	cmp	r3, #1
 8003580:	d153      	bne.n	800362a <main+0x19a>
 8003582:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <main+0x270>)
 8003584:	2203      	movs	r2, #3
 8003586:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800358a:	e04e      	b.n	800362a <main+0x19a>
 800358c:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <main+0x270>)
 800358e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <main+0x110>
 8003596:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <main+0x270>)
 8003598:	2204      	movs	r2, #4
 800359a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800359e:	e044      	b.n	800362a <main+0x19a>
 80035a0:	4b57      	ldr	r3, [pc, #348]	; (8003700 <main+0x270>)
 80035a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d13f      	bne.n	800362a <main+0x19a>
 80035aa:	4b55      	ldr	r3, [pc, #340]	; (8003700 <main+0x270>)
 80035ac:	2202      	movs	r2, #2
 80035ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80035b2:	e03a      	b.n	800362a <main+0x19a>
 80035b4:	4b52      	ldr	r3, [pc, #328]	; (8003700 <main+0x270>)
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <main+0x138>
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <main+0x270>)
 80035c0:	2205      	movs	r2, #5
 80035c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80035c6:	e030      	b.n	800362a <main+0x19a>
 80035c8:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <main+0x270>)
 80035ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d12b      	bne.n	800362a <main+0x19a>
 80035d2:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <main+0x270>)
 80035d4:	2206      	movs	r2, #6
 80035d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80035da:	e026      	b.n	800362a <main+0x19a>
 80035dc:	4b48      	ldr	r3, [pc, #288]	; (8003700 <main+0x270>)
 80035de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <main+0x160>
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <main+0x270>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80035ee:	e01c      	b.n	800362a <main+0x19a>
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <main+0x270>)
 80035f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d117      	bne.n	800362a <main+0x19a>
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <main+0x270>)
 80035fc:	2204      	movs	r2, #4
 80035fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003602:	e012      	b.n	800362a <main+0x19a>
 8003604:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <main+0x270>)
 8003606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <main+0x188>
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <main+0x270>)
 8003610:	2203      	movs	r2, #3
 8003612:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003616:	e008      	b.n	800362a <main+0x19a>
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <main+0x270>)
 800361a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800361e:	2b01      	cmp	r3, #1
 8003620:	d103      	bne.n	800362a <main+0x19a>
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <main+0x270>)
 8003624:	2205      	movs	r2, #5
 8003626:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800362a:	bf00      	nop

				// 5. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 800362c:	2201      	movs	r2, #1
 800362e:	2108      	movs	r1, #8
 8003630:	2017      	movs	r0, #23
 8003632:	f7ff fd35 	bl	80030a0 <NVIC_IRQConfig>

				// 2. Charge Bootstrap Capacitor for 10ms before Drive BLDC motor
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8003636:	4832      	ldr	r0, [pc, #200]	; (8003700 <main+0x270>)
 8003638:	f7ff fa84 	bl	8002b44 <BLDC_BootstrapCap_Charge>

				// 4. Set Reference Speed and PID gain
				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, -1000);
 800363c:	4a30      	ldr	r2, [pc, #192]	; (8003700 <main+0x270>)
 800363e:	a42a      	add	r4, pc, #168	; (adr r4, 80036e8 <main+0x258>)
 8003640:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003644:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
				BLDC_PID_GAIN_SET(&BLDC1Handle, 0.01, 0.10, 0);	// P : 0.03, I : 0.40, D : 0
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <main+0x270>)
 800364a:	a429      	add	r4, pc, #164	; (adr r4, 80036f0 <main+0x260>)
 800364c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003650:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <main+0x270>)
 8003656:	a428      	add	r4, pc, #160	; (adr r4, 80036f8 <main+0x268>)
 8003658:	e9d4 3400 	ldrd	r3, r4, [r4]
 800365c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <main+0x270>)
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	f04f 0400 	mov.w	r4, #0
 800366a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90

				// 6. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. Then, Motor rotates with given PWM duty cycle
				EXTI->SWIER |= (0x1 << 6);
 800366e:	4b27      	ldr	r3, [pc, #156]	; (800370c <main+0x27c>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4a26      	ldr	r2, [pc, #152]	; (800370c <main+0x27c>)
 8003674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003678:	6113      	str	r3, [r2, #16]
 800367a:	e02f      	b.n	80036dc <main+0x24c>
			}

			else if(BLDC1Handle.MotorState == RUN)
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <main+0x270>)
 800367e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003682:	2b00      	cmp	r3, #0
 8003684:	d12a      	bne.n	80036dc <main+0x24c>
			{
				/* Previous Motor state was RUN */

				// 1. Change MotorState from RUN to STOP
				BLDC1Handle.MotorState = STOP;
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <main+0x270>)
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 2. Set Reference Speed to 0
				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 0);
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <main+0x270>)
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
//				Delay_ms(5000);
//
//				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 0);

				// 3. Wait until the Motor stops
				while( ((int16_t)BLDC1Handle.Speed) != 0 );
 800369c:	bf00      	nop
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <main+0x270>)
 80036a0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80036a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	4621      	mov	r1, r4
 80036ac:	f7fd f9d4 	bl	8000a58 <__aeabi_d2iz>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f2      	bne.n	800369e <main+0x20e>

				Delay_ms(5000);
 80036b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80036bc:	f7ff feae 	bl	800341c <Delay_ms>

				// 4. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 80036c0:	2200      	movs	r2, #0
 80036c2:	2108      	movs	r1, #8
 80036c4:	2017      	movs	r0, #23
 80036c6:	f7ff fceb 	bl	80030a0 <NVIC_IRQConfig>

				// 5. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <main+0x270>)
 80036cc:	6858      	ldr	r0, [r3, #4]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <main+0x270>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2200      	movs	r2, #0
 80036d6:	4619      	mov	r1, r3
 80036d8:	f7fe fa2a 	bl	8001b30 <GPIO_WritePin>
			}

			ButtonFlag = FLAG_RESET;
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <main+0x274>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
		if(ButtonFlag == FLAG_SET)
 80036e2:	e6f9      	b.n	80034d8 <main+0x48>
 80036e4:	f3af 8000 	nop.w
 80036e8:	00000000 	.word	0x00000000
 80036ec:	c08f4000 	.word	0xc08f4000
 80036f0:	47ae147b 	.word	0x47ae147b
 80036f4:	3f847ae1 	.word	0x3f847ae1
 80036f8:	9999999a 	.word	0x9999999a
 80036fc:	3fb99999 	.word	0x3fb99999
 8003700:	20000230 	.word	0x20000230
 8003704:	2000021c 	.word	0x2000021c
 8003708:	40011000 	.word	0x40011000
 800370c:	40010400 	.word	0x40010400

08003710 <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	2214      	movs	r2, #20
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fd11 	bl	8004148 <memset>

	if(pUARTHandle->Instance == USART1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3e      	ldr	r2, [pc, #248]	; (8003824 <USART_MspInit+0x114>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003730:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <USART_MspInit+0x118>)
 8003732:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373c:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fd ffad 	bl	80016b0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7fd ffa0 	bl	80016b0 <GPIO_Init>
 8003770:	e04d      	b.n	800380e <USART_MspInit+0xfe>
	}
	else if(pUARTHandle->Instance == USART2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <USART_MspInit+0x11c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d148      	bne.n	800380e <USART_MspInit+0xfe>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <USART_MspInit+0x118>)
 800377e:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003784:	2304      	movs	r3, #4
 8003786:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003788:	2301      	movs	r3, #1
 800378a:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	3304      	adds	r3, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f7fd ff88 	bl	80016b0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 80037a4:	2308      	movs	r3, #8
 80037a6:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fd ff7c 	bl	80016b0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <USART_MspInit+0x120>)
 80037be:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2210      	movs	r2, #16
 80037c6:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fbd1 	bl	8000fa4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <USART_MspInit+0x124>)
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <USART_MspInit+0x124>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fe43 	bl	80024a0 <USART_PeripheralClockControl>
}
 800381a:	bf00      	nop
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40013800 	.word	0x40013800
 8003828:	40010800 	.word	0x40010800
 800382c:	40004400 	.word	0x40004400
 8003830:	40020080 	.word	0x40020080
 8003834:	2000032c 	.word	0x2000032c

08003838 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <TIM_Base_MspInit+0x2c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d108      	bne.n	800385a <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003848:	2101      	movs	r1, #1
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe fc88 	bl	8002160 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 8003850:	2201      	movs	r2, #1
 8003852:	210f      	movs	r1, #15
 8003854:	2036      	movs	r0, #54	; 0x36
 8003856:	f7ff fc23 	bl	80030a0 <NVIC_IRQConfig>
	}
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40001000 	.word	0x40001000

08003868 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a32      	ldr	r2, [pc, #200]	; (8003940 <TIM_PWM_MspInit+0xd8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d119      	bne.n	80038ae <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	2214      	movs	r2, #20
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fc60 	bl	8004148 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <TIM_PWM_MspInit+0xdc>)
 800388a:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 800388c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003890:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fd ff01 	bl	80016b0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_PWM_MspInit+0xe0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d119      	bne.n	80038ec <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	2214      	movs	r2, #20
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fc41 	bl	8004148 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <TIM_PWM_MspInit+0xe4>)
 80038c8:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 80038ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80038ce:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fd fee2 	bl	80016b0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <TIM_PWM_MspInit+0xe8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d119      	bne.n	800392a <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	2214      	movs	r2, #20
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fc22 	bl	8004148 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <TIM_PWM_MspInit+0xec>)
 8003906:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003908:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800390c:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	3304      	adds	r3, #4
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fd fec3 	bl	80016b0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fc15 	bl	8002160 <TIM_PeripheralClockControl>
}
 8003936:	bf00      	nop
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40010800 	.word	0x40010800
 8003948:	40000400 	.word	0x40000400
 800394c:	40011000 	.word	0x40011000
 8003950:	40000800 	.word	0x40000800
 8003954:	40010c00 	.word	0x40010c00

08003958 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003964:	2210      	movs	r2, #16
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fbed 	bl	8004148 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	f040 80f1 	bne.w	8003b5a <BLDC_MspInit+0x202>
	{
	/************************************************************************
	 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
	 ***********************************************************************/

		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 8003978:	4b7a      	ldr	r3, [pc, #488]	; (8003b64 <BLDC_MspInit+0x20c>)
 800397a:	4a7b      	ldr	r2, [pc, #492]	; (8003b68 <BLDC_MspInit+0x210>)
 800397c:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <BLDC_MspInit+0x20c>)
 8003980:	2201      	movs	r2, #1
 8003982:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 8003984:	4b77      	ldr	r3, [pc, #476]	; (8003b64 <BLDC_MspInit+0x20c>)
 8003986:	2202      	movs	r2, #2
 8003988:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <BLDC_MspInit+0x20c>)
 800398c:	2204      	movs	r2, #4
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 8003990:	4b74      	ldr	r3, [pc, #464]	; (8003b64 <BLDC_MspInit+0x20c>)
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <BLDC_MspInit+0x20c>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	431a      	orrs	r2, r3
 800399a:	4b72      	ldr	r3, [pc, #456]	; (8003b64 <BLDC_MspInit+0x20c>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	4313      	orrs	r3, r2
 80039a0:	4a70      	ldr	r2, [pc, #448]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039a2:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039a6:	4a70      	ldr	r2, [pc, #448]	; (8003b68 <BLDC_MspInit+0x210>)
 80039a8:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 80039aa:	4b6e      	ldr	r3, [pc, #440]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 80039b0:	4b6c      	ldr	r3, [pc, #432]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 80039b6:	4b6b      	ldr	r3, [pc, #428]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 80039be:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	431a      	orrs	r2, r3
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4313      	orrs	r3, r2
 80039ce:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039d0:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOC;
 80039d2:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039d4:	4a65      	ldr	r2, [pc, #404]	; (8003b6c <BLDC_MspInit+0x214>)
 80039d6:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_6;
 80039d8:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039da:	2240      	movs	r2, #64	; 0x40
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_7;
 80039de:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_8;
 80039e4:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 80039ec:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f0:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	431a      	orrs	r2, r3
 80039f6:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a59      	ldr	r2, [pc, #356]	; (8003b64 <BLDC_MspInit+0x20c>)
 80039fe:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd fe47 	bl	80016b0 <GPIO_Init>
		Delay_ms(10);
 8003a22:	200a      	movs	r0, #10
 8003a24:	f7ff fcfa 	bl	800341c <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6858      	ldr	r0, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fe f87b 	bl	8001b30 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003a40:	2301      	movs	r3, #1
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fe2a 	bl	80016b0 <GPIO_Init>
		Delay_ms(10);
 8003a5c:	200a      	movs	r0, #10
 8003a5e:	f7ff fcdd 	bl	800341c <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6898      	ldr	r0, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fe f85e 	bl	8001b30 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 8003a74:	200a      	movs	r0, #10
 8003a76:	f7ff fcd1 	bl	800341c <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6898      	ldr	r0, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2201      	movs	r2, #1
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7fe f852 	bl	8001b30 <GPIO_WritePin>
		Delay_ms(10);
 8003a8c:	200a      	movs	r0, #10
 8003a8e:	f7ff fcc5 	bl	800341c <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6898      	ldr	r0, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fe f846 	bl	8001b30 <GPIO_WritePin>
	/********************************************************************
	 *			Low level init EXTI for Hall Sensor interrupt			*
	 ********************************************************************/

		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fb4b 	bl	8004148 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <BLDC_MspInit+0x218>)
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fdf0 	bl	80016b0 <GPIO_Init>

	/********************************************************************
	 *				Low level init TIM to generate PWM signals			*
	 ********************************************************************/

		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <BLDC_MspInit+0x21c>)
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <BLDC_MspInit+0x220>)
 8003adc:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (36-1);		//   72MHz / 36 = 2MHz
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2223      	movs	r2, #35	; 0x23
 8003af4:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (100-1);		//   2MHz / 100 = 20kHz
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2263      	movs	r2, #99	; 0x63
 8003afc:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe f9fb 	bl	8001efe <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	221c      	movs	r2, #28
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fb19 	bl	8004148 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 8003b16:	2360      	movs	r3, #96	; 0x60
 8003b18:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f107 010c 	add.w	r1, r7, #12
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fa33 	bl	8001f98 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f107 010c 	add.w	r1, r7, #12
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fa29 	bl	8001f98 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f107 010c 	add.w	r1, r7, #12
 8003b52:	2208      	movs	r2, #8
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fa1f 	bl	8001f98 <TIM_PWM_ConfigChannel>
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	3738      	adds	r7, #56	; 0x38
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000230 	.word	0x20000230
 8003b68:	40010c00 	.word	0x40010c00
 8003b6c:	40011000 	.word	0x40011000
 8003b70:	10310000 	.word	0x10310000
 8003b74:	200002d0 	.word	0x200002d0
 8003b78:	40000800 	.word	0x40000800

08003b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <_sbrk+0x50>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <_sbrk+0x16>
		heap_end = &end;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <_sbrk+0x50>)
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <_sbrk+0x54>)
 8003b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <_sbrk+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <_sbrk+0x50>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	466a      	mov	r2, sp
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d907      	bls.n	8003bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ba6:	f000 faa5 	bl	80040f4 <__errno>
 8003baa:	4602      	mov	r2, r0
 8003bac:	230c      	movs	r3, #12
 8003bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	e006      	b.n	8003bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <_sbrk+0x50>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a03      	ldr	r2, [pc, #12]	; (8003bcc <_sbrk+0x50>)
 8003bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000218 	.word	0x20000218
 8003bd0:	20000398 	.word	0x20000398

08003bd4 <Button_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Button_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003bda:	463b      	mov	r3, r7
 8003bdc:	2210      	movs	r2, #16
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fab1 	bl	8004148 <memset>

	// 1. Initialize GPIO for START/STOP Button
	GPIOInit.Pin = GPIO_PIN_7;
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_INPUT;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <Button_Init+0x30>)
 8003bf8:	f7fd fd5a 	bl	80016b0 <GPIO_Init>
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40010800 	.word	0x40010800

08003c08 <BLDC1_Init>:


void BLDC1_Init(void)
{
 8003c08:	b598      	push	{r3, r4, r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	BLDC1Handle.Instance = BLDC1;
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c14:	2208      	movs	r2, #8
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 8003c1a:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fc fbf9 	bl	8000424 <__aeabi_i2d>
 8003c32:	4603      	mov	r3, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	461a      	mov	r2, r3
 8003c38:	4623      	mov	r3, r4
 8003c3a:	f04f 0000 	mov.w	r0, #0
 8003c3e:	492d      	ldr	r1, [pc, #180]	; (8003cf4 <BLDC1_Init+0xec>)
 8003c40:	f7fc fd84 	bl	800074c <__aeabi_ddiv>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <BLDC1_Init+0xf0>)
 8003c52:	f7fc fd7b 	bl	800074c <__aeabi_ddiv>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c5c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	BLDC1Handle.MotorState = STOP;
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.Position = 0;
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	f04f 0400 	mov.w	r4, #0
 8003c7e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 8003c82:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.Speed = 0;
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 8003c9e:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.Kp = 0;
 8003cac:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	BLDC1Handle.Ki = 0;
 8003cba:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f04f 0400 	mov.w	r4, #0
 8003cc4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.Kd = 0;
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.PwmPID = 0;
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	f04f 0400 	mov.w	r4, #0
 8003ce0:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98

	BLDC_Init(&BLDC1Handle);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <BLDC1_Init+0xe8>)
 8003ce6:	f7fe fd74 	bl	80027d2 <BLDC_Init>
}
 8003cea:	bf00      	nop
 8003cec:	bd98      	pop	{r3, r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000230 	.word	0x20000230
 8003cf4:	404e0000 	.word	0x404e0000
 8003cf8:	40100000 	.word	0x40100000

08003cfc <UART2_Init>:


void UART2_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	UART2Handle.Instance = USART2;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <UART2_Init+0x48>)
 8003d02:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <UART2_Init+0x4c>)
 8003d04:	601a      	str	r2, [r3, #0]
	UART2Handle.Init.Mode = UART_MODE_TX;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <UART2_Init+0x48>)
 8003d08:	2208      	movs	r2, #8
 8003d0a:	615a      	str	r2, [r3, #20]
	UART2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <UART2_Init+0x48>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
	UART2Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <UART2_Init+0x48>)
 8003d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d18:	605a      	str	r2, [r3, #4]
	UART2Handle.Init.Parity = UART_PARITY_NONE;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <UART2_Init+0x48>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
	UART2Handle.Init.StopBits = UART_STOPBITS_1;
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <UART2_Init+0x48>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
	UART2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <UART2_Init+0x48>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	619a      	str	r2, [r3, #24]
	UART2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <UART2_Init+0x48>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
	UART2Handle.hdmatx = &DMA1Handle;
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <UART2_Init+0x48>)
 8003d34:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <UART2_Init+0x50>)
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART2Handle);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <UART2_Init+0x48>)
 8003d3a:	f7fe fb51 	bl	80023e0 <USART_Init>
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200002f0 	.word	0x200002f0
 8003d48:	40004400 	.word	0x40004400
 8003d4c:	2000032c 	.word	0x2000032c

08003d50 <TIM6_Init>:


void TIM6_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <TIM6_Init+0x5c>)
 8003d56:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <TIM6_Init+0x60>)
 8003d58:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <TIM6_Init+0x5c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <TIM6_Init+0x5c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <TIM6_Init+0x5c>)
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <TIM6_Init+0x5c>)
 8003d6e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003d72:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (500-1);	// 10kHz / 500 = 20Hz
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <TIM6_Init+0x5c>)
 8003d76:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d7a:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <TIM6_Init+0x5c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8003d82:	480a      	ldr	r0, [pc, #40]	; (8003dac <TIM6_Init+0x5c>)
 8003d84:	f7fe f8a2 	bl	8001ecc <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <TIM6_Init+0x5c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <TIM6_Init+0x5c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <TIM6_Init+0x5c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b03      	ldr	r3, [pc, #12]	; (8003dac <TIM6_Init+0x5c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000370 	.word	0x20000370
 8003db0:	40001000 	.word	0x40001000

08003db4 <DMA1_Init>:


void DMA1_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <DMA1_Init+0x20>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <DMA1_Init+0x20>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL7, NVIC_PRIOR_15, ENABLE);
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	210f      	movs	r1, #15
 8003dc8:	2011      	movs	r0, #17
 8003dca:	f7ff f969 	bl	80030a0 <NVIC_IRQConfig>
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* This Callback function is executed every 50ms by TIM6 */

	if(pTIMHandle->Instance == TIM6)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <TIM_PeriodElapsedCallback+0x160>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f040 809e 	bne.w	8003f28 <TIM_PeriodElapsedCallback+0x150>
	{
		/* Check the Button is pressed */
		if(ButtonFlag == FLAG_RESET)
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <TIM_PeriodElapsedCallback+0x164>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <TIM_PeriodElapsedCallback+0x34>
		{
			uint8_t buttonState;

			buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_7);
 8003df4:	4b52      	ldr	r3, [pc, #328]	; (8003f40 <TIM_PeriodElapsedCallback+0x168>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dfe:	73bb      	strb	r3, [r7, #14]

			if(buttonState == BUTTON_PRESSED)
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <TIM_PeriodElapsedCallback+0x34>
			{
				ButtonFlag = FLAG_SET;
 8003e06:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <TIM_PeriodElapsedCallback+0x164>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Calculate the Current Speed of BLDC Motor */
		BLDC_Get_Speed(&BLDC1Handle, 0.05);
 8003e0c:	a348      	add	r3, pc, #288	; (adr r3, 8003f30 <TIM_PeriodElapsedCallback+0x158>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	484c      	ldr	r0, [pc, #304]	; (8003f44 <TIM_PeriodElapsedCallback+0x16c>)
 8003e14:	f7fe fd80 	bl	8002918 <BLDC_Get_Speed>

		/* Set PWM duty cycle by PID calculation */
		BLDC_SpeedPID(&BLDC1Handle, 0.05);
 8003e18:	a345      	add	r3, pc, #276	; (adr r3, 8003f30 <TIM_PeriodElapsedCallback+0x158>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	4849      	ldr	r0, [pc, #292]	; (8003f44 <TIM_PeriodElapsedCallback+0x16c>)
 8003e20:	f7ff f87e 	bl	8002f20 <BLDC_SpeedPID>
		/* Transmit Motor Speed value to PC through UART2 */
		int16_t motorSpeed, motorSpeedAbs;
		uint8_t sign;


		motorSpeed = (int16_t)BLDC1Handle.Speed;
 8003e24:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <TIM_PeriodElapsedCallback+0x16c>)
 8003e26:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003e2a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	4621      	mov	r1, r4
 8003e32:	f7fc fe11 	bl	8000a58 <__aeabi_d2iz>
 8003e36:	4603      	mov	r3, r0
 8003e38:	81bb      	strh	r3, [r7, #12]
		motorSpeedAbs = abs(motorSpeed);
 8003e3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bfb8      	it	lt
 8003e42:	425b      	neglt	r3, r3
 8003e44:	817b      	strh	r3, [r7, #10]

		if(motorSpeed >= 0)			sign = '+';
 8003e46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db02      	blt.n	8003e54 <TIM_PeriodElapsedCallback+0x7c>
 8003e4e:	232b      	movs	r3, #43	; 0x2b
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e005      	b.n	8003e60 <TIM_PeriodElapsedCallback+0x88>
		else if(motorSpeed < 0)		sign = '-';
 8003e54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da01      	bge.n	8003e60 <TIM_PeriodElapsedCallback+0x88>
 8003e5c:	232d      	movs	r3, #45	; 0x2d
 8003e5e:	73fb      	strb	r3, [r7, #15]

		MotorSpeedStr[0] = sign;
 8003e60:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	7013      	strb	r3, [r2, #0]
		MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 8003e66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e6a:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <TIM_PeriodElapsedCallback+0x174>)
 8003e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8003e70:	1192      	asrs	r2, r2, #6
 8003e72:	17db      	asrs	r3, r3, #31
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3330      	adds	r3, #48	; 0x30
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003e80:	705a      	strb	r2, [r3, #1]
		MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8003e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e86:	4a31      	ldr	r2, [pc, #196]	; (8003f4c <TIM_PeriodElapsedCallback+0x174>)
 8003e88:	fb82 1203 	smull	r1, r2, r2, r3
 8003e8c:	1191      	asrs	r1, r2, #6
 8003e8e:	17da      	asrs	r2, r3, #31
 8003e90:	1a8a      	subs	r2, r1, r2
 8003e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e96:	fb01 f202 	mul.w	r2, r1, r2
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <TIM_PeriodElapsedCallback+0x178>)
 8003ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ea4:	1152      	asrs	r2, r2, #5
 8003ea6:	17db      	asrs	r3, r3, #31
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b21b      	sxth	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3330      	adds	r3, #48	; 0x30
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003eb4:	709a      	strb	r2, [r3, #2]
		MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 8003eb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <TIM_PeriodElapsedCallback+0x178>)
 8003ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ec0:	1151      	asrs	r1, r2, #5
 8003ec2:	17da      	asrs	r2, r3, #31
 8003ec4:	1a8a      	subs	r2, r1, r2
 8003ec6:	2164      	movs	r1, #100	; 0x64
 8003ec8:	fb01 f202 	mul.w	r2, r1, r2
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	b21b      	sxth	r3, r3
 8003ed0:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <TIM_PeriodElapsedCallback+0x17c>)
 8003ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed6:	1092      	asrs	r2, r2, #2
 8003ed8:	17db      	asrs	r3, r3, #31
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3330      	adds	r3, #48	; 0x30
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003ee6:	70da      	strb	r2, [r3, #3]
		MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 8003ee8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <TIM_PeriodElapsedCallback+0x17c>)
 8003eee:	fb83 1302 	smull	r1, r3, r3, r2
 8003ef2:	1099      	asrs	r1, r3, #2
 8003ef4:	17d3      	asrs	r3, r2, #31
 8003ef6:	1ac9      	subs	r1, r1, r3
 8003ef8:	460b      	mov	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3330      	adds	r3, #48	; 0x30
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003f0c:	711a      	strb	r2, [r3, #4]
		MotorSpeedStr[5] = '\n';
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003f10:	220a      	movs	r2, #10
 8003f12:	715a      	strb	r2, [r3, #5]

		UART_Transmit_DMA(&UART2Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 8003f14:	480c      	ldr	r0, [pc, #48]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003f16:	f7fc f92b 	bl	8000170 <strlen>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <TIM_PeriodElapsedCallback+0x170>)
 8003f22:	480d      	ldr	r0, [pc, #52]	; (8003f58 <TIM_PeriodElapsedCallback+0x180>)
 8003f24:	f7fe fbc8 	bl	80026b8 <UART_Transmit_DMA>
	}
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	9999999a 	.word	0x9999999a
 8003f34:	3fa99999 	.word	0x3fa99999
 8003f38:	40001000 	.word	0x40001000
 8003f3c:	2000021c 	.word	0x2000021c
 8003f40:	40010800 	.word	0x40010800
 8003f44:	20000230 	.word	0x20000230
 8003f48:	20000220 	.word	0x20000220
 8003f4c:	10624dd3 	.word	0x10624dd3
 8003f50:	51eb851f 	.word	0x51eb851f
 8003f54:	66666667 	.word	0x66666667
 8003f58:	200002f0 	.word	0x200002f0

08003f5c <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 6U;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <EXTI_Callback+0x30>)
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <EXTI_Callback+0x34>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <EXTI_Callback+0x34>)
 8003f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 8003f78:	4805      	ldr	r0, [pc, #20]	; (8003f90 <EXTI_Callback+0x34>)
 8003f7a:	f7fe fd1b 	bl	80029b4 <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 8003f7e:	4804      	ldr	r0, [pc, #16]	; (8003f90 <EXTI_Callback+0x34>)
 8003f80:	f7fe fc32 	bl	80027e8 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40011000 	.word	0x40011000
 8003f90:	20000230 	.word	0x20000230

08003f94 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8003f98:	2220      	movs	r2, #32
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <MemsetHandleStructure+0x3c>)
 8003f9e:	f000 f8d3 	bl	8004148 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <MemsetHandleStructure+0x40>)
 8003fa8:	f000 f8ce 	bl	8004148 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 8003fac:	22a0      	movs	r2, #160	; 0xa0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <MemsetHandleStructure+0x44>)
 8003fb2:	f000 f8c9 	bl	8004148 <memset>
	memset(&UART2Handle, 0, sizeof(UART2Handle));
 8003fb6:	223c      	movs	r2, #60	; 0x3c
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4808      	ldr	r0, [pc, #32]	; (8003fdc <MemsetHandleStructure+0x48>)
 8003fbc:	f000 f8c4 	bl	8004148 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8003fc0:	2244      	movs	r2, #68	; 0x44
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <MemsetHandleStructure+0x4c>)
 8003fc6:	f000 f8bf 	bl	8004148 <memset>
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000370 	.word	0x20000370
 8003fd4:	200002d0 	.word	0x200002d0
 8003fd8:	20000230 	.word	0x20000230
 8003fdc:	200002f0 	.word	0x200002f0
 8003fe0:	2000032c 	.word	0x2000032c

08003fe4 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f984 	bl	8002300 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f97e 	bl	8002300 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	2108      	movs	r1, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f978 	bl	8002300 <TIM_PWM_Start>
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0210 	bic.w	r2, r2, #16
 8004046:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
	...

080040a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a4:	480d      	ldr	r0, [pc, #52]	; (80040dc <LoopForever+0x6>)
  ldr r1, =_edata
 80040a6:	490e      	ldr	r1, [pc, #56]	; (80040e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <LoopForever+0xe>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ac:	e002      	b.n	80040b4 <LoopCopyDataInit>

080040ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b2:	3304      	adds	r3, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b8:	d3f9      	bcc.n	80040ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040bc:	4c0b      	ldr	r4, [pc, #44]	; (80040ec <LoopForever+0x16>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c0:	e001      	b.n	80040c6 <LoopFillZerobss>

080040c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c4:	3204      	adds	r2, #4

080040c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c8:	d3fb      	bcc.n	80040c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040ca:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80040ce:	f000 f817 	bl	8004100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040d2:	f7ff f9dd 	bl	8003490 <main>

080040d6 <LoopForever>:

LoopForever:
    b LoopForever
 80040d6:	e7fe      	b.n	80040d6 <LoopForever>
  ldr   r0, =_estack
 80040d8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80040dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80040e4:	08005de8 	.word	0x08005de8
  ldr r2, =_sbss
 80040e8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80040ec:	20000394 	.word	0x20000394

080040f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f0:	e7fe      	b.n	80040f0 <ADC1_2_IRQHandler>
	...

080040f4 <__errno>:
 80040f4:	4b01      	ldr	r3, [pc, #4]	; (80040fc <__errno+0x8>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000000 	.word	0x20000000

08004100 <__libc_init_array>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	2500      	movs	r5, #0
 8004104:	4e0c      	ldr	r6, [pc, #48]	; (8004138 <__libc_init_array+0x38>)
 8004106:	4c0d      	ldr	r4, [pc, #52]	; (800413c <__libc_init_array+0x3c>)
 8004108:	1ba4      	subs	r4, r4, r6
 800410a:	10a4      	asrs	r4, r4, #2
 800410c:	42a5      	cmp	r5, r4
 800410e:	d109      	bne.n	8004124 <__libc_init_array+0x24>
 8004110:	f001 fd3a 	bl	8005b88 <_init>
 8004114:	2500      	movs	r5, #0
 8004116:	4e0a      	ldr	r6, [pc, #40]	; (8004140 <__libc_init_array+0x40>)
 8004118:	4c0a      	ldr	r4, [pc, #40]	; (8004144 <__libc_init_array+0x44>)
 800411a:	1ba4      	subs	r4, r4, r6
 800411c:	10a4      	asrs	r4, r4, #2
 800411e:	42a5      	cmp	r5, r4
 8004120:	d105      	bne.n	800412e <__libc_init_array+0x2e>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004128:	4798      	blx	r3
 800412a:	3501      	adds	r5, #1
 800412c:	e7ee      	b.n	800410c <__libc_init_array+0xc>
 800412e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004132:	4798      	blx	r3
 8004134:	3501      	adds	r5, #1
 8004136:	e7f2      	b.n	800411e <__libc_init_array+0x1e>
 8004138:	08005de0 	.word	0x08005de0
 800413c:	08005de0 	.word	0x08005de0
 8004140:	08005de0 	.word	0x08005de0
 8004144:	08005de4 	.word	0x08005de4

08004148 <memset>:
 8004148:	4603      	mov	r3, r0
 800414a:	4402      	add	r2, r0
 800414c:	4293      	cmp	r3, r2
 800414e:	d100      	bne.n	8004152 <memset+0xa>
 8004150:	4770      	bx	lr
 8004152:	f803 1b01 	strb.w	r1, [r3], #1
 8004156:	e7f9      	b.n	800414c <memset+0x4>

08004158 <__cvt>:
 8004158:	2b00      	cmp	r3, #0
 800415a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415e:	461e      	mov	r6, r3
 8004160:	bfbb      	ittet	lt
 8004162:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004166:	461e      	movlt	r6, r3
 8004168:	2300      	movge	r3, #0
 800416a:	232d      	movlt	r3, #45	; 0x2d
 800416c:	b088      	sub	sp, #32
 800416e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004170:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004174:	f027 0720 	bic.w	r7, r7, #32
 8004178:	2f46      	cmp	r7, #70	; 0x46
 800417a:	4614      	mov	r4, r2
 800417c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800417e:	700b      	strb	r3, [r1, #0]
 8004180:	d004      	beq.n	800418c <__cvt+0x34>
 8004182:	2f45      	cmp	r7, #69	; 0x45
 8004184:	d100      	bne.n	8004188 <__cvt+0x30>
 8004186:	3501      	adds	r5, #1
 8004188:	2302      	movs	r3, #2
 800418a:	e000      	b.n	800418e <__cvt+0x36>
 800418c:	2303      	movs	r3, #3
 800418e:	aa07      	add	r2, sp, #28
 8004190:	9204      	str	r2, [sp, #16]
 8004192:	aa06      	add	r2, sp, #24
 8004194:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004198:	e9cd 3500 	strd	r3, r5, [sp]
 800419c:	4622      	mov	r2, r4
 800419e:	4633      	mov	r3, r6
 80041a0:	f000 fba6 	bl	80048f0 <_dtoa_r>
 80041a4:	2f47      	cmp	r7, #71	; 0x47
 80041a6:	4680      	mov	r8, r0
 80041a8:	d102      	bne.n	80041b0 <__cvt+0x58>
 80041aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041ac:	07db      	lsls	r3, r3, #31
 80041ae:	d526      	bpl.n	80041fe <__cvt+0xa6>
 80041b0:	2f46      	cmp	r7, #70	; 0x46
 80041b2:	eb08 0905 	add.w	r9, r8, r5
 80041b6:	d111      	bne.n	80041dc <__cvt+0x84>
 80041b8:	f898 3000 	ldrb.w	r3, [r8]
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d10a      	bne.n	80041d6 <__cvt+0x7e>
 80041c0:	2200      	movs	r2, #0
 80041c2:	2300      	movs	r3, #0
 80041c4:	4620      	mov	r0, r4
 80041c6:	4631      	mov	r1, r6
 80041c8:	f7fc fbfe 	bl	80009c8 <__aeabi_dcmpeq>
 80041cc:	b918      	cbnz	r0, 80041d6 <__cvt+0x7e>
 80041ce:	f1c5 0501 	rsb	r5, r5, #1
 80041d2:	f8ca 5000 	str.w	r5, [sl]
 80041d6:	f8da 3000 	ldr.w	r3, [sl]
 80041da:	4499      	add	r9, r3
 80041dc:	2200      	movs	r2, #0
 80041de:	2300      	movs	r3, #0
 80041e0:	4620      	mov	r0, r4
 80041e2:	4631      	mov	r1, r6
 80041e4:	f7fc fbf0 	bl	80009c8 <__aeabi_dcmpeq>
 80041e8:	b938      	cbnz	r0, 80041fa <__cvt+0xa2>
 80041ea:	2230      	movs	r2, #48	; 0x30
 80041ec:	9b07      	ldr	r3, [sp, #28]
 80041ee:	454b      	cmp	r3, r9
 80041f0:	d205      	bcs.n	80041fe <__cvt+0xa6>
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	9107      	str	r1, [sp, #28]
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e7f8      	b.n	80041ec <__cvt+0x94>
 80041fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80041fe:	4640      	mov	r0, r8
 8004200:	9b07      	ldr	r3, [sp, #28]
 8004202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004204:	eba3 0308 	sub.w	r3, r3, r8
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	b008      	add	sp, #32
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004210 <__exponent>:
 8004210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	bfb4      	ite	lt
 8004216:	232d      	movlt	r3, #45	; 0x2d
 8004218:	232b      	movge	r3, #43	; 0x2b
 800421a:	4604      	mov	r4, r0
 800421c:	bfb8      	it	lt
 800421e:	4249      	neglt	r1, r1
 8004220:	2909      	cmp	r1, #9
 8004222:	f804 2b02 	strb.w	r2, [r4], #2
 8004226:	7043      	strb	r3, [r0, #1]
 8004228:	dd21      	ble.n	800426e <__exponent+0x5e>
 800422a:	f10d 0307 	add.w	r3, sp, #7
 800422e:	461f      	mov	r7, r3
 8004230:	260a      	movs	r6, #10
 8004232:	fb91 f5f6 	sdiv	r5, r1, r6
 8004236:	fb06 1115 	mls	r1, r6, r5, r1
 800423a:	2d09      	cmp	r5, #9
 800423c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004240:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004244:	f103 32ff 	add.w	r2, r3, #4294967295
 8004248:	4629      	mov	r1, r5
 800424a:	dc09      	bgt.n	8004260 <__exponent+0x50>
 800424c:	3130      	adds	r1, #48	; 0x30
 800424e:	3b02      	subs	r3, #2
 8004250:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004254:	42bb      	cmp	r3, r7
 8004256:	4622      	mov	r2, r4
 8004258:	d304      	bcc.n	8004264 <__exponent+0x54>
 800425a:	1a10      	subs	r0, r2, r0
 800425c:	b003      	add	sp, #12
 800425e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004260:	4613      	mov	r3, r2
 8004262:	e7e6      	b.n	8004232 <__exponent+0x22>
 8004264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004268:	f804 2b01 	strb.w	r2, [r4], #1
 800426c:	e7f2      	b.n	8004254 <__exponent+0x44>
 800426e:	2330      	movs	r3, #48	; 0x30
 8004270:	4419      	add	r1, r3
 8004272:	7083      	strb	r3, [r0, #2]
 8004274:	1d02      	adds	r2, r0, #4
 8004276:	70c1      	strb	r1, [r0, #3]
 8004278:	e7ef      	b.n	800425a <__exponent+0x4a>
	...

0800427c <_printf_float>:
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	b091      	sub	sp, #68	; 0x44
 8004282:	460c      	mov	r4, r1
 8004284:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004286:	4693      	mov	fp, r2
 8004288:	461e      	mov	r6, r3
 800428a:	4605      	mov	r5, r0
 800428c:	f001 f8e4 	bl	8005458 <_localeconv_r>
 8004290:	6803      	ldr	r3, [r0, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	f7fb ff6b 	bl	8000170 <strlen>
 800429a:	2300      	movs	r3, #0
 800429c:	930e      	str	r3, [sp, #56]	; 0x38
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	900a      	str	r0, [sp, #40]	; 0x28
 80042a2:	3307      	adds	r3, #7
 80042a4:	f023 0307 	bic.w	r3, r3, #7
 80042a8:	f103 0208 	add.w	r2, r3, #8
 80042ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80042b0:	f8d4 a000 	ldr.w	sl, [r4]
 80042b4:	603a      	str	r2, [r7, #0]
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80042c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	4ba6      	ldr	r3, [pc, #664]	; (8004568 <_printf_float+0x2ec>)
 80042ce:	4638      	mov	r0, r7
 80042d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042d2:	f7fc fbab 	bl	8000a2c <__aeabi_dcmpun>
 80042d6:	bb68      	cbnz	r0, 8004334 <_printf_float+0xb8>
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	4ba2      	ldr	r3, [pc, #648]	; (8004568 <_printf_float+0x2ec>)
 80042de:	4638      	mov	r0, r7
 80042e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042e2:	f7fc fb85 	bl	80009f0 <__aeabi_dcmple>
 80042e6:	bb28      	cbnz	r0, 8004334 <_printf_float+0xb8>
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	4638      	mov	r0, r7
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fc fb74 	bl	80009dc <__aeabi_dcmplt>
 80042f4:	b110      	cbz	r0, 80042fc <_printf_float+0x80>
 80042f6:	232d      	movs	r3, #45	; 0x2d
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	4f9b      	ldr	r7, [pc, #620]	; (800456c <_printf_float+0x2f0>)
 80042fe:	4b9c      	ldr	r3, [pc, #624]	; (8004570 <_printf_float+0x2f4>)
 8004300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004304:	bf98      	it	ls
 8004306:	461f      	movls	r7, r3
 8004308:	2303      	movs	r3, #3
 800430a:	f04f 0900 	mov.w	r9, #0
 800430e:	6123      	str	r3, [r4, #16]
 8004310:	f02a 0304 	bic.w	r3, sl, #4
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	9600      	str	r6, [sp, #0]
 8004318:	465b      	mov	r3, fp
 800431a:	aa0f      	add	r2, sp, #60	; 0x3c
 800431c:	4621      	mov	r1, r4
 800431e:	4628      	mov	r0, r5
 8004320:	f000 f9e2 	bl	80046e8 <_printf_common>
 8004324:	3001      	adds	r0, #1
 8004326:	f040 8090 	bne.w	800444a <_printf_float+0x1ce>
 800432a:	f04f 30ff 	mov.w	r0, #4294967295
 800432e:	b011      	add	sp, #68	; 0x44
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	463a      	mov	r2, r7
 8004336:	464b      	mov	r3, r9
 8004338:	4638      	mov	r0, r7
 800433a:	4649      	mov	r1, r9
 800433c:	f7fc fb76 	bl	8000a2c <__aeabi_dcmpun>
 8004340:	b110      	cbz	r0, 8004348 <_printf_float+0xcc>
 8004342:	4f8c      	ldr	r7, [pc, #560]	; (8004574 <_printf_float+0x2f8>)
 8004344:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <_printf_float+0x2fc>)
 8004346:	e7db      	b.n	8004300 <_printf_float+0x84>
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	a80d      	add	r0, sp, #52	; 0x34
 8004352:	a90e      	add	r1, sp, #56	; 0x38
 8004354:	d140      	bne.n	80043d8 <_printf_float+0x15c>
 8004356:	2306      	movs	r3, #6
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	f04f 0c00 	mov.w	ip, #0
 800435e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004362:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004366:	6863      	ldr	r3, [r4, #4]
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	463a      	mov	r2, r7
 8004372:	464b      	mov	r3, r9
 8004374:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004378:	4628      	mov	r0, r5
 800437a:	f7ff feed 	bl	8004158 <__cvt>
 800437e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004382:	2b47      	cmp	r3, #71	; 0x47
 8004384:	4607      	mov	r7, r0
 8004386:	d109      	bne.n	800439c <_printf_float+0x120>
 8004388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800438a:	1cd8      	adds	r0, r3, #3
 800438c:	db02      	blt.n	8004394 <_printf_float+0x118>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	4293      	cmp	r3, r2
 8004392:	dd47      	ble.n	8004424 <_printf_float+0x1a8>
 8004394:	f1a8 0802 	sub.w	r8, r8, #2
 8004398:	fa5f f888 	uxtb.w	r8, r8
 800439c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80043a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043a2:	d824      	bhi.n	80043ee <_printf_float+0x172>
 80043a4:	3901      	subs	r1, #1
 80043a6:	4642      	mov	r2, r8
 80043a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043ac:	910d      	str	r1, [sp, #52]	; 0x34
 80043ae:	f7ff ff2f 	bl	8004210 <__exponent>
 80043b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b4:	4681      	mov	r9, r0
 80043b6:	1813      	adds	r3, r2, r0
 80043b8:	2a01      	cmp	r2, #1
 80043ba:	6123      	str	r3, [r4, #16]
 80043bc:	dc02      	bgt.n	80043c4 <_printf_float+0x148>
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	07d1      	lsls	r1, r2, #31
 80043c2:	d501      	bpl.n	80043c8 <_printf_float+0x14c>
 80043c4:	3301      	adds	r3, #1
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0a2      	beq.n	8004316 <_printf_float+0x9a>
 80043d0:	232d      	movs	r3, #45	; 0x2d
 80043d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d6:	e79e      	b.n	8004316 <_printf_float+0x9a>
 80043d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80043dc:	f000 816e 	beq.w	80046bc <_printf_float+0x440>
 80043e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043e4:	d1b9      	bne.n	800435a <_printf_float+0xde>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1b7      	bne.n	800435a <_printf_float+0xde>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e7b4      	b.n	8004358 <_printf_float+0xdc>
 80043ee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80043f2:	d119      	bne.n	8004428 <_printf_float+0x1ac>
 80043f4:	2900      	cmp	r1, #0
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	dd0c      	ble.n	8004414 <_printf_float+0x198>
 80043fa:	6121      	str	r1, [r4, #16]
 80043fc:	b913      	cbnz	r3, 8004404 <_printf_float+0x188>
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	07d2      	lsls	r2, r2, #31
 8004402:	d502      	bpl.n	800440a <_printf_float+0x18e>
 8004404:	3301      	adds	r3, #1
 8004406:	440b      	add	r3, r1
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800440c:	f04f 0900 	mov.w	r9, #0
 8004410:	65a3      	str	r3, [r4, #88]	; 0x58
 8004412:	e7d9      	b.n	80043c8 <_printf_float+0x14c>
 8004414:	b913      	cbnz	r3, 800441c <_printf_float+0x1a0>
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	07d0      	lsls	r0, r2, #31
 800441a:	d501      	bpl.n	8004420 <_printf_float+0x1a4>
 800441c:	3302      	adds	r3, #2
 800441e:	e7f3      	b.n	8004408 <_printf_float+0x18c>
 8004420:	2301      	movs	r3, #1
 8004422:	e7f1      	b.n	8004408 <_printf_float+0x18c>
 8004424:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004428:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800442c:	4293      	cmp	r3, r2
 800442e:	db05      	blt.n	800443c <_printf_float+0x1c0>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	6123      	str	r3, [r4, #16]
 8004434:	07d1      	lsls	r1, r2, #31
 8004436:	d5e8      	bpl.n	800440a <_printf_float+0x18e>
 8004438:	3301      	adds	r3, #1
 800443a:	e7e5      	b.n	8004408 <_printf_float+0x18c>
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfcc      	ite	gt
 8004440:	2301      	movgt	r3, #1
 8004442:	f1c3 0302 	rsble	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	e7de      	b.n	8004408 <_printf_float+0x18c>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	055a      	lsls	r2, r3, #21
 800444e:	d407      	bmi.n	8004460 <_printf_float+0x1e4>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	463a      	mov	r2, r7
 8004454:	4659      	mov	r1, fp
 8004456:	4628      	mov	r0, r5
 8004458:	47b0      	blx	r6
 800445a:	3001      	adds	r0, #1
 800445c:	d129      	bne.n	80044b2 <_printf_float+0x236>
 800445e:	e764      	b.n	800432a <_printf_float+0xae>
 8004460:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004464:	f240 80d7 	bls.w	8004616 <_printf_float+0x39a>
 8004468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800446c:	2200      	movs	r2, #0
 800446e:	2300      	movs	r3, #0
 8004470:	f7fc faaa 	bl	80009c8 <__aeabi_dcmpeq>
 8004474:	b388      	cbz	r0, 80044da <_printf_float+0x25e>
 8004476:	2301      	movs	r3, #1
 8004478:	4a40      	ldr	r2, [pc, #256]	; (800457c <_printf_float+0x300>)
 800447a:	4659      	mov	r1, fp
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	3001      	adds	r0, #1
 8004482:	f43f af52 	beq.w	800432a <_printf_float+0xae>
 8004486:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800448a:	429a      	cmp	r2, r3
 800448c:	db02      	blt.n	8004494 <_printf_float+0x218>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	07d8      	lsls	r0, r3, #31
 8004492:	d50e      	bpl.n	80044b2 <_printf_float+0x236>
 8004494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004498:	4659      	mov	r1, fp
 800449a:	4628      	mov	r0, r5
 800449c:	47b0      	blx	r6
 800449e:	3001      	adds	r0, #1
 80044a0:	f43f af43 	beq.w	800432a <_printf_float+0xae>
 80044a4:	2700      	movs	r7, #0
 80044a6:	f104 081a 	add.w	r8, r4, #26
 80044aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ac:	3b01      	subs	r3, #1
 80044ae:	42bb      	cmp	r3, r7
 80044b0:	dc09      	bgt.n	80044c6 <_printf_float+0x24a>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	079f      	lsls	r7, r3, #30
 80044b6:	f100 80fd 	bmi.w	80046b4 <_printf_float+0x438>
 80044ba:	68e0      	ldr	r0, [r4, #12]
 80044bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044be:	4298      	cmp	r0, r3
 80044c0:	bfb8      	it	lt
 80044c2:	4618      	movlt	r0, r3
 80044c4:	e733      	b.n	800432e <_printf_float+0xb2>
 80044c6:	2301      	movs	r3, #1
 80044c8:	4642      	mov	r2, r8
 80044ca:	4659      	mov	r1, fp
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b0      	blx	r6
 80044d0:	3001      	adds	r0, #1
 80044d2:	f43f af2a 	beq.w	800432a <_printf_float+0xae>
 80044d6:	3701      	adds	r7, #1
 80044d8:	e7e7      	b.n	80044aa <_printf_float+0x22e>
 80044da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dc2b      	bgt.n	8004538 <_printf_float+0x2bc>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <_printf_float+0x300>)
 80044e4:	4659      	mov	r1, fp
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b0      	blx	r6
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f af1d 	beq.w	800432a <_printf_float+0xae>
 80044f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044f2:	b923      	cbnz	r3, 80044fe <_printf_float+0x282>
 80044f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f6:	b913      	cbnz	r3, 80044fe <_printf_float+0x282>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d5d9      	bpl.n	80044b2 <_printf_float+0x236>
 80044fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004502:	4659      	mov	r1, fp
 8004504:	4628      	mov	r0, r5
 8004506:	47b0      	blx	r6
 8004508:	3001      	adds	r0, #1
 800450a:	f43f af0e 	beq.w	800432a <_printf_float+0xae>
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	f104 091a 	add.w	r9, r4, #26
 8004516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004518:	425b      	negs	r3, r3
 800451a:	4543      	cmp	r3, r8
 800451c:	dc01      	bgt.n	8004522 <_printf_float+0x2a6>
 800451e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004520:	e797      	b.n	8004452 <_printf_float+0x1d6>
 8004522:	2301      	movs	r3, #1
 8004524:	464a      	mov	r2, r9
 8004526:	4659      	mov	r1, fp
 8004528:	4628      	mov	r0, r5
 800452a:	47b0      	blx	r6
 800452c:	3001      	adds	r0, #1
 800452e:	f43f aefc 	beq.w	800432a <_printf_float+0xae>
 8004532:	f108 0801 	add.w	r8, r8, #1
 8004536:	e7ee      	b.n	8004516 <_printf_float+0x29a>
 8004538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800453c:	429a      	cmp	r2, r3
 800453e:	bfa8      	it	ge
 8004540:	461a      	movge	r2, r3
 8004542:	2a00      	cmp	r2, #0
 8004544:	4690      	mov	r8, r2
 8004546:	dd07      	ble.n	8004558 <_printf_float+0x2dc>
 8004548:	4613      	mov	r3, r2
 800454a:	4659      	mov	r1, fp
 800454c:	463a      	mov	r2, r7
 800454e:	4628      	mov	r0, r5
 8004550:	47b0      	blx	r6
 8004552:	3001      	adds	r0, #1
 8004554:	f43f aee9 	beq.w	800432a <_printf_float+0xae>
 8004558:	f104 031a 	add.w	r3, r4, #26
 800455c:	f04f 0a00 	mov.w	sl, #0
 8004560:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004564:	930b      	str	r3, [sp, #44]	; 0x2c
 8004566:	e015      	b.n	8004594 <_printf_float+0x318>
 8004568:	7fefffff 	.word	0x7fefffff
 800456c:	08005bb8 	.word	0x08005bb8
 8004570:	08005bb4 	.word	0x08005bb4
 8004574:	08005bc0 	.word	0x08005bc0
 8004578:	08005bbc 	.word	0x08005bbc
 800457c:	08005bc4 	.word	0x08005bc4
 8004580:	2301      	movs	r3, #1
 8004582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004584:	4659      	mov	r1, fp
 8004586:	4628      	mov	r0, r5
 8004588:	47b0      	blx	r6
 800458a:	3001      	adds	r0, #1
 800458c:	f43f aecd 	beq.w	800432a <_printf_float+0xae>
 8004590:	f10a 0a01 	add.w	sl, sl, #1
 8004594:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004598:	eba9 0308 	sub.w	r3, r9, r8
 800459c:	4553      	cmp	r3, sl
 800459e:	dcef      	bgt.n	8004580 <_printf_float+0x304>
 80045a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045a4:	429a      	cmp	r2, r3
 80045a6:	444f      	add	r7, r9
 80045a8:	db14      	blt.n	80045d4 <_printf_float+0x358>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	07da      	lsls	r2, r3, #31
 80045ae:	d411      	bmi.n	80045d4 <_printf_float+0x358>
 80045b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045b4:	eba3 0209 	sub.w	r2, r3, r9
 80045b8:	eba3 0901 	sub.w	r9, r3, r1
 80045bc:	4591      	cmp	r9, r2
 80045be:	bfa8      	it	ge
 80045c0:	4691      	movge	r9, r2
 80045c2:	f1b9 0f00 	cmp.w	r9, #0
 80045c6:	dc0d      	bgt.n	80045e4 <_printf_float+0x368>
 80045c8:	2700      	movs	r7, #0
 80045ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ce:	f104 081a 	add.w	r8, r4, #26
 80045d2:	e018      	b.n	8004606 <_printf_float+0x38a>
 80045d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d8:	4659      	mov	r1, fp
 80045da:	4628      	mov	r0, r5
 80045dc:	47b0      	blx	r6
 80045de:	3001      	adds	r0, #1
 80045e0:	d1e6      	bne.n	80045b0 <_printf_float+0x334>
 80045e2:	e6a2      	b.n	800432a <_printf_float+0xae>
 80045e4:	464b      	mov	r3, r9
 80045e6:	463a      	mov	r2, r7
 80045e8:	4659      	mov	r1, fp
 80045ea:	4628      	mov	r0, r5
 80045ec:	47b0      	blx	r6
 80045ee:	3001      	adds	r0, #1
 80045f0:	d1ea      	bne.n	80045c8 <_printf_float+0x34c>
 80045f2:	e69a      	b.n	800432a <_printf_float+0xae>
 80045f4:	2301      	movs	r3, #1
 80045f6:	4642      	mov	r2, r8
 80045f8:	4659      	mov	r1, fp
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b0      	blx	r6
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f ae93 	beq.w	800432a <_printf_float+0xae>
 8004604:	3701      	adds	r7, #1
 8004606:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	eba3 0309 	sub.w	r3, r3, r9
 8004610:	42bb      	cmp	r3, r7
 8004612:	dcef      	bgt.n	80045f4 <_printf_float+0x378>
 8004614:	e74d      	b.n	80044b2 <_printf_float+0x236>
 8004616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004618:	2a01      	cmp	r2, #1
 800461a:	dc01      	bgt.n	8004620 <_printf_float+0x3a4>
 800461c:	07db      	lsls	r3, r3, #31
 800461e:	d538      	bpl.n	8004692 <_printf_float+0x416>
 8004620:	2301      	movs	r3, #1
 8004622:	463a      	mov	r2, r7
 8004624:	4659      	mov	r1, fp
 8004626:	4628      	mov	r0, r5
 8004628:	47b0      	blx	r6
 800462a:	3001      	adds	r0, #1
 800462c:	f43f ae7d 	beq.w	800432a <_printf_float+0xae>
 8004630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004634:	4659      	mov	r1, fp
 8004636:	4628      	mov	r0, r5
 8004638:	47b0      	blx	r6
 800463a:	3001      	adds	r0, #1
 800463c:	f107 0701 	add.w	r7, r7, #1
 8004640:	f43f ae73 	beq.w	800432a <_printf_float+0xae>
 8004644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800464a:	2200      	movs	r2, #0
 800464c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004650:	2300      	movs	r3, #0
 8004652:	f7fc f9b9 	bl	80009c8 <__aeabi_dcmpeq>
 8004656:	b9c0      	cbnz	r0, 800468a <_printf_float+0x40e>
 8004658:	4643      	mov	r3, r8
 800465a:	463a      	mov	r2, r7
 800465c:	4659      	mov	r1, fp
 800465e:	4628      	mov	r0, r5
 8004660:	47b0      	blx	r6
 8004662:	3001      	adds	r0, #1
 8004664:	d10d      	bne.n	8004682 <_printf_float+0x406>
 8004666:	e660      	b.n	800432a <_printf_float+0xae>
 8004668:	2301      	movs	r3, #1
 800466a:	4642      	mov	r2, r8
 800466c:	4659      	mov	r1, fp
 800466e:	4628      	mov	r0, r5
 8004670:	47b0      	blx	r6
 8004672:	3001      	adds	r0, #1
 8004674:	f43f ae59 	beq.w	800432a <_printf_float+0xae>
 8004678:	3701      	adds	r7, #1
 800467a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800467c:	3b01      	subs	r3, #1
 800467e:	42bb      	cmp	r3, r7
 8004680:	dcf2      	bgt.n	8004668 <_printf_float+0x3ec>
 8004682:	464b      	mov	r3, r9
 8004684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004688:	e6e4      	b.n	8004454 <_printf_float+0x1d8>
 800468a:	2700      	movs	r7, #0
 800468c:	f104 081a 	add.w	r8, r4, #26
 8004690:	e7f3      	b.n	800467a <_printf_float+0x3fe>
 8004692:	2301      	movs	r3, #1
 8004694:	e7e1      	b.n	800465a <_printf_float+0x3de>
 8004696:	2301      	movs	r3, #1
 8004698:	4642      	mov	r2, r8
 800469a:	4659      	mov	r1, fp
 800469c:	4628      	mov	r0, r5
 800469e:	47b0      	blx	r6
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f ae42 	beq.w	800432a <_printf_float+0xae>
 80046a6:	3701      	adds	r7, #1
 80046a8:	68e3      	ldr	r3, [r4, #12]
 80046aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	42bb      	cmp	r3, r7
 80046b0:	dcf1      	bgt.n	8004696 <_printf_float+0x41a>
 80046b2:	e702      	b.n	80044ba <_printf_float+0x23e>
 80046b4:	2700      	movs	r7, #0
 80046b6:	f104 0819 	add.w	r8, r4, #25
 80046ba:	e7f5      	b.n	80046a8 <_printf_float+0x42c>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f43f ae94 	beq.w	80043ea <_printf_float+0x16e>
 80046c2:	f04f 0c00 	mov.w	ip, #0
 80046c6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80046ca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80046ce:	6022      	str	r2, [r4, #0]
 80046d0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80046d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	463a      	mov	r2, r7
 80046dc:	464b      	mov	r3, r9
 80046de:	4628      	mov	r0, r5
 80046e0:	f7ff fd3a 	bl	8004158 <__cvt>
 80046e4:	4607      	mov	r7, r0
 80046e6:	e64f      	b.n	8004388 <_printf_float+0x10c>

080046e8 <_printf_common>:
 80046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	4691      	mov	r9, r2
 80046ee:	461f      	mov	r7, r3
 80046f0:	688a      	ldr	r2, [r1, #8]
 80046f2:	690b      	ldr	r3, [r1, #16]
 80046f4:	4606      	mov	r6, r0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfb8      	it	lt
 80046fa:	4613      	movlt	r3, r2
 80046fc:	f8c9 3000 	str.w	r3, [r9]
 8004700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004704:	460c      	mov	r4, r1
 8004706:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800470a:	b112      	cbz	r2, 8004712 <_printf_common+0x2a>
 800470c:	3301      	adds	r3, #1
 800470e:	f8c9 3000 	str.w	r3, [r9]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	0699      	lsls	r1, r3, #26
 8004716:	bf42      	ittt	mi
 8004718:	f8d9 3000 	ldrmi.w	r3, [r9]
 800471c:	3302      	addmi	r3, #2
 800471e:	f8c9 3000 	strmi.w	r3, [r9]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d107      	bne.n	800473a <_printf_common+0x52>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	f8d9 2000 	ldr.w	r2, [r9]
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	42ab      	cmp	r3, r5
 8004738:	dc29      	bgt.n	800478e <_printf_common+0xa6>
 800473a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	3300      	adds	r3, #0
 8004742:	bf18      	it	ne
 8004744:	2301      	movne	r3, #1
 8004746:	0692      	lsls	r2, r2, #26
 8004748:	d42e      	bmi.n	80047a8 <_printf_common+0xc0>
 800474a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474e:	4639      	mov	r1, r7
 8004750:	4630      	mov	r0, r6
 8004752:	47c0      	blx	r8
 8004754:	3001      	adds	r0, #1
 8004756:	d021      	beq.n	800479c <_printf_common+0xb4>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	68e5      	ldr	r5, [r4, #12]
 800475c:	f003 0306 	and.w	r3, r3, #6
 8004760:	2b04      	cmp	r3, #4
 8004762:	bf18      	it	ne
 8004764:	2500      	movne	r5, #0
 8004766:	f8d9 2000 	ldr.w	r2, [r9]
 800476a:	f04f 0900 	mov.w	r9, #0
 800476e:	bf08      	it	eq
 8004770:	1aad      	subeq	r5, r5, r2
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	6922      	ldr	r2, [r4, #16]
 8004776:	bf08      	it	eq
 8004778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800477c:	4293      	cmp	r3, r2
 800477e:	bfc4      	itt	gt
 8004780:	1a9b      	subgt	r3, r3, r2
 8004782:	18ed      	addgt	r5, r5, r3
 8004784:	341a      	adds	r4, #26
 8004786:	454d      	cmp	r5, r9
 8004788:	d11a      	bne.n	80047c0 <_printf_common+0xd8>
 800478a:	2000      	movs	r0, #0
 800478c:	e008      	b.n	80047a0 <_printf_common+0xb8>
 800478e:	2301      	movs	r3, #1
 8004790:	4652      	mov	r2, sl
 8004792:	4639      	mov	r1, r7
 8004794:	4630      	mov	r0, r6
 8004796:	47c0      	blx	r8
 8004798:	3001      	adds	r0, #1
 800479a:	d103      	bne.n	80047a4 <_printf_common+0xbc>
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a4:	3501      	adds	r5, #1
 80047a6:	e7c2      	b.n	800472e <_printf_common+0x46>
 80047a8:	2030      	movs	r0, #48	; 0x30
 80047aa:	18e1      	adds	r1, r4, r3
 80047ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b6:	4422      	add	r2, r4
 80047b8:	3302      	adds	r3, #2
 80047ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047be:	e7c4      	b.n	800474a <_printf_common+0x62>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4622      	mov	r2, r4
 80047c4:	4639      	mov	r1, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	47c0      	blx	r8
 80047ca:	3001      	adds	r0, #1
 80047cc:	d0e6      	beq.n	800479c <_printf_common+0xb4>
 80047ce:	f109 0901 	add.w	r9, r9, #1
 80047d2:	e7d8      	b.n	8004786 <_printf_common+0x9e>

080047d4 <quorem>:
 80047d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	6903      	ldr	r3, [r0, #16]
 80047da:	690c      	ldr	r4, [r1, #16]
 80047dc:	4680      	mov	r8, r0
 80047de:	42a3      	cmp	r3, r4
 80047e0:	f2c0 8084 	blt.w	80048ec <quorem+0x118>
 80047e4:	3c01      	subs	r4, #1
 80047e6:	f101 0714 	add.w	r7, r1, #20
 80047ea:	f100 0614 	add.w	r6, r0, #20
 80047ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80047f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80047f6:	3501      	adds	r5, #1
 80047f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80047fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004800:	eb06 030c 	add.w	r3, r6, ip
 8004804:	eb07 090c 	add.w	r9, r7, ip
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	b39d      	cbz	r5, 8004874 <quorem+0xa0>
 800480c:	f04f 0a00 	mov.w	sl, #0
 8004810:	4638      	mov	r0, r7
 8004812:	46b6      	mov	lr, r6
 8004814:	46d3      	mov	fp, sl
 8004816:	f850 2b04 	ldr.w	r2, [r0], #4
 800481a:	b293      	uxth	r3, r2
 800481c:	fb05 a303 	mla	r3, r5, r3, sl
 8004820:	0c12      	lsrs	r2, r2, #16
 8004822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004826:	fb05 a202 	mla	r2, r5, r2, sl
 800482a:	b29b      	uxth	r3, r3
 800482c:	ebab 0303 	sub.w	r3, fp, r3
 8004830:	f8de b000 	ldr.w	fp, [lr]
 8004834:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004838:	fa1f fb8b 	uxth.w	fp, fp
 800483c:	445b      	add	r3, fp
 800483e:	fa1f fb82 	uxth.w	fp, r2
 8004842:	f8de 2000 	ldr.w	r2, [lr]
 8004846:	4581      	cmp	r9, r0
 8004848:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800484c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004850:	b29b      	uxth	r3, r3
 8004852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004856:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800485a:	f84e 3b04 	str.w	r3, [lr], #4
 800485e:	d2da      	bcs.n	8004816 <quorem+0x42>
 8004860:	f856 300c 	ldr.w	r3, [r6, ip]
 8004864:	b933      	cbnz	r3, 8004874 <quorem+0xa0>
 8004866:	9b01      	ldr	r3, [sp, #4]
 8004868:	3b04      	subs	r3, #4
 800486a:	429e      	cmp	r6, r3
 800486c:	461a      	mov	r2, r3
 800486e:	d331      	bcc.n	80048d4 <quorem+0x100>
 8004870:	f8c8 4010 	str.w	r4, [r8, #16]
 8004874:	4640      	mov	r0, r8
 8004876:	f001 f825 	bl	80058c4 <__mcmp>
 800487a:	2800      	cmp	r0, #0
 800487c:	db26      	blt.n	80048cc <quorem+0xf8>
 800487e:	4630      	mov	r0, r6
 8004880:	f04f 0c00 	mov.w	ip, #0
 8004884:	3501      	adds	r5, #1
 8004886:	f857 1b04 	ldr.w	r1, [r7], #4
 800488a:	f8d0 e000 	ldr.w	lr, [r0]
 800488e:	b28b      	uxth	r3, r1
 8004890:	ebac 0303 	sub.w	r3, ip, r3
 8004894:	fa1f f28e 	uxth.w	r2, lr
 8004898:	4413      	add	r3, r2
 800489a:	0c0a      	lsrs	r2, r1, #16
 800489c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048aa:	45b9      	cmp	r9, r7
 80048ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048b0:	f840 3b04 	str.w	r3, [r0], #4
 80048b4:	d2e7      	bcs.n	8004886 <quorem+0xb2>
 80048b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048be:	b92a      	cbnz	r2, 80048cc <quorem+0xf8>
 80048c0:	3b04      	subs	r3, #4
 80048c2:	429e      	cmp	r6, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	d30b      	bcc.n	80048e0 <quorem+0x10c>
 80048c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80048cc:	4628      	mov	r0, r5
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	3b04      	subs	r3, #4
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d1c9      	bne.n	8004870 <quorem+0x9c>
 80048dc:	3c01      	subs	r4, #1
 80048de:	e7c4      	b.n	800486a <quorem+0x96>
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	3b04      	subs	r3, #4
 80048e4:	2a00      	cmp	r2, #0
 80048e6:	d1ef      	bne.n	80048c8 <quorem+0xf4>
 80048e8:	3c01      	subs	r4, #1
 80048ea:	e7ea      	b.n	80048c2 <quorem+0xee>
 80048ec:	2000      	movs	r0, #0
 80048ee:	e7ee      	b.n	80048ce <quorem+0xfa>

080048f0 <_dtoa_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	4616      	mov	r6, r2
 80048f6:	461f      	mov	r7, r3
 80048f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048fa:	b095      	sub	sp, #84	; 0x54
 80048fc:	4604      	mov	r4, r0
 80048fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004902:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004906:	b93d      	cbnz	r5, 8004918 <_dtoa_r+0x28>
 8004908:	2010      	movs	r0, #16
 800490a:	f000 fdb3 	bl	8005474 <malloc>
 800490e:	6260      	str	r0, [r4, #36]	; 0x24
 8004910:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004914:	6005      	str	r5, [r0, #0]
 8004916:	60c5      	str	r5, [r0, #12]
 8004918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	b151      	cbz	r1, 8004934 <_dtoa_r+0x44>
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	2301      	movs	r3, #1
 8004922:	4093      	lsls	r3, r2
 8004924:	604a      	str	r2, [r1, #4]
 8004926:	608b      	str	r3, [r1, #8]
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fdea 	bl	8005502 <_Bfree>
 800492e:	2200      	movs	r2, #0
 8004930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	1e3b      	subs	r3, r7, #0
 8004936:	bfaf      	iteee	ge
 8004938:	2300      	movge	r3, #0
 800493a:	2201      	movlt	r2, #1
 800493c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004940:	9303      	strlt	r3, [sp, #12]
 8004942:	bfac      	ite	ge
 8004944:	f8c8 3000 	strge.w	r3, [r8]
 8004948:	f8c8 2000 	strlt.w	r2, [r8]
 800494c:	4bae      	ldr	r3, [pc, #696]	; (8004c08 <_dtoa_r+0x318>)
 800494e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004952:	ea33 0308 	bics.w	r3, r3, r8
 8004956:	d11b      	bne.n	8004990 <_dtoa_r+0xa0>
 8004958:	f242 730f 	movw	r3, #9999	; 0x270f
 800495c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	b923      	cbnz	r3, 800496e <_dtoa_r+0x7e>
 8004964:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004968:	2800      	cmp	r0, #0
 800496a:	f000 8545 	beq.w	80053f8 <_dtoa_r+0xb08>
 800496e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004970:	b953      	cbnz	r3, 8004988 <_dtoa_r+0x98>
 8004972:	4ba6      	ldr	r3, [pc, #664]	; (8004c0c <_dtoa_r+0x31c>)
 8004974:	e021      	b.n	80049ba <_dtoa_r+0xca>
 8004976:	4ba6      	ldr	r3, [pc, #664]	; (8004c10 <_dtoa_r+0x320>)
 8004978:	9306      	str	r3, [sp, #24]
 800497a:	3308      	adds	r3, #8
 800497c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	9806      	ldr	r0, [sp, #24]
 8004982:	b015      	add	sp, #84	; 0x54
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004988:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <_dtoa_r+0x31c>)
 800498a:	9306      	str	r3, [sp, #24]
 800498c:	3303      	adds	r3, #3
 800498e:	e7f5      	b.n	800497c <_dtoa_r+0x8c>
 8004990:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f814 	bl	80009c8 <__aeabi_dcmpeq>
 80049a0:	4682      	mov	sl, r0
 80049a2:	b160      	cbz	r0, 80049be <_dtoa_r+0xce>
 80049a4:	2301      	movs	r3, #1
 80049a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8520 	beq.w	80053f2 <_dtoa_r+0xb02>
 80049b2:	4b98      	ldr	r3, [pc, #608]	; (8004c14 <_dtoa_r+0x324>)
 80049b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	9306      	str	r3, [sp, #24]
 80049bc:	e7e0      	b.n	8004980 <_dtoa_r+0x90>
 80049be:	ab12      	add	r3, sp, #72	; 0x48
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	ab13      	add	r3, sp, #76	; 0x4c
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4632      	mov	r2, r6
 80049c8:	463b      	mov	r3, r7
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 fff2 	bl	80059b4 <__d2b>
 80049d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80049d4:	4683      	mov	fp, r0
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	d07d      	beq.n	8004ad6 <_dtoa_r+0x1e6>
 80049da:	46b0      	mov	r8, r6
 80049dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80049e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80049e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80049ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80049f0:	2200      	movs	r2, #0
 80049f2:	4b89      	ldr	r3, [pc, #548]	; (8004c18 <_dtoa_r+0x328>)
 80049f4:	4640      	mov	r0, r8
 80049f6:	4649      	mov	r1, r9
 80049f8:	f7fb fbc6 	bl	8000188 <__aeabi_dsub>
 80049fc:	a37c      	add	r3, pc, #496	; (adr r3, 8004bf0 <_dtoa_r+0x300>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fd79 	bl	80004f8 <__aeabi_dmul>
 8004a06:	a37c      	add	r3, pc, #496	; (adr r3, 8004bf8 <_dtoa_r+0x308>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fbbe 	bl	800018c <__adddf3>
 8004a10:	4606      	mov	r6, r0
 8004a12:	4628      	mov	r0, r5
 8004a14:	460f      	mov	r7, r1
 8004a16:	f7fb fd05 	bl	8000424 <__aeabi_i2d>
 8004a1a:	a379      	add	r3, pc, #484	; (adr r3, 8004c00 <_dtoa_r+0x310>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fd6a 	bl	80004f8 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fbae 	bl	800018c <__adddf3>
 8004a30:	4606      	mov	r6, r0
 8004a32:	460f      	mov	r7, r1
 8004a34:	f7fc f810 	bl	8000a58 <__aeabi_d2iz>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4682      	mov	sl, r0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4630      	mov	r0, r6
 8004a40:	4639      	mov	r1, r7
 8004a42:	f7fb ffcb 	bl	80009dc <__aeabi_dcmplt>
 8004a46:	b148      	cbz	r0, 8004a5c <_dtoa_r+0x16c>
 8004a48:	4650      	mov	r0, sl
 8004a4a:	f7fb fceb 	bl	8000424 <__aeabi_i2d>
 8004a4e:	4632      	mov	r2, r6
 8004a50:	463b      	mov	r3, r7
 8004a52:	f7fb ffb9 	bl	80009c8 <__aeabi_dcmpeq>
 8004a56:	b908      	cbnz	r0, 8004a5c <_dtoa_r+0x16c>
 8004a58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a5c:	f1ba 0f16 	cmp.w	sl, #22
 8004a60:	d85a      	bhi.n	8004b18 <_dtoa_r+0x228>
 8004a62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a66:	496d      	ldr	r1, [pc, #436]	; (8004c1c <_dtoa_r+0x32c>)
 8004a68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a70:	f7fb ffd2 	bl	8000a18 <__aeabi_dcmpgt>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d051      	beq.n	8004b1c <_dtoa_r+0x22c>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a82:	1b5d      	subs	r5, r3, r5
 8004a84:	1e6b      	subs	r3, r5, #1
 8004a86:	9307      	str	r3, [sp, #28]
 8004a88:	bf43      	ittte	mi
 8004a8a:	2300      	movmi	r3, #0
 8004a8c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004a90:	9307      	strmi	r3, [sp, #28]
 8004a92:	f04f 0900 	movpl.w	r9, #0
 8004a96:	f1ba 0f00 	cmp.w	sl, #0
 8004a9a:	db41      	blt.n	8004b20 <_dtoa_r+0x230>
 8004a9c:	9b07      	ldr	r3, [sp, #28]
 8004a9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004aa2:	4453      	add	r3, sl
 8004aa4:	9307      	str	r3, [sp, #28]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9308      	str	r3, [sp, #32]
 8004aaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	f200 808f 	bhi.w	8004bd0 <_dtoa_r+0x2e0>
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	bfc4      	itt	gt
 8004ab6:	3b04      	subgt	r3, #4
 8004ab8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004aba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004abc:	bfc8      	it	gt
 8004abe:	2500      	movgt	r5, #0
 8004ac0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ac4:	bfd8      	it	le
 8004ac6:	2501      	movle	r5, #1
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	f200 808d 	bhi.w	8004be8 <_dtoa_r+0x2f8>
 8004ace:	e8df f003 	tbb	[pc, r3]
 8004ad2:	7d7b      	.short	0x7d7b
 8004ad4:	6f2f      	.short	0x6f2f
 8004ad6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004ada:	441d      	add	r5, r3
 8004adc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ae0:	2820      	cmp	r0, #32
 8004ae2:	dd13      	ble.n	8004b0c <_dtoa_r+0x21c>
 8004ae4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	fa08 f800 	lsl.w	r8, r8, r0
 8004aee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004af2:	fa23 f000 	lsr.w	r0, r3, r0
 8004af6:	ea48 0000 	orr.w	r0, r8, r0
 8004afa:	f7fb fc83 	bl	8000404 <__aeabi_ui2d>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4680      	mov	r8, r0
 8004b02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004b06:	3d01      	subs	r5, #1
 8004b08:	9310      	str	r3, [sp, #64]	; 0x40
 8004b0a:	e771      	b.n	80049f0 <_dtoa_r+0x100>
 8004b0c:	9b02      	ldr	r3, [sp, #8]
 8004b0e:	f1c0 0020 	rsb	r0, r0, #32
 8004b12:	fa03 f000 	lsl.w	r0, r3, r0
 8004b16:	e7f0      	b.n	8004afa <_dtoa_r+0x20a>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e7b0      	b.n	8004a7e <_dtoa_r+0x18e>
 8004b1c:	900d      	str	r0, [sp, #52]	; 0x34
 8004b1e:	e7af      	b.n	8004a80 <_dtoa_r+0x190>
 8004b20:	f1ca 0300 	rsb	r3, sl, #0
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	2300      	movs	r3, #0
 8004b28:	eba9 090a 	sub.w	r9, r9, sl
 8004b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b2e:	e7bc      	b.n	8004aaa <_dtoa_r+0x1ba>
 8004b30:	2301      	movs	r3, #1
 8004b32:	9309      	str	r3, [sp, #36]	; 0x24
 8004b34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dd74      	ble.n	8004c24 <_dtoa_r+0x334>
 8004b3a:	4698      	mov	r8, r3
 8004b3c:	9304      	str	r3, [sp, #16]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b42:	6072      	str	r2, [r6, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	f102 0014 	add.w	r0, r2, #20
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	6871      	ldr	r1, [r6, #4]
 8004b4e:	d96e      	bls.n	8004c2e <_dtoa_r+0x33e>
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fca2 	bl	800549a <_Balloc>
 8004b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b58:	6030      	str	r0, [r6, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b8 0f0e 	cmp.w	r8, #14
 8004b60:	9306      	str	r3, [sp, #24]
 8004b62:	f200 80ed 	bhi.w	8004d40 <_dtoa_r+0x450>
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	f000 80ea 	beq.w	8004d40 <_dtoa_r+0x450>
 8004b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b70:	f1ba 0f00 	cmp.w	sl, #0
 8004b74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b78:	dd77      	ble.n	8004c6a <_dtoa_r+0x37a>
 8004b7a:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <_dtoa_r+0x32c>)
 8004b7c:	f00a 030f 	and.w	r3, sl, #15
 8004b80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004b84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b88:	06f0      	lsls	r0, r6, #27
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004b92:	d568      	bpl.n	8004c66 <_dtoa_r+0x376>
 8004b94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <_dtoa_r+0x330>)
 8004b9a:	2503      	movs	r5, #3
 8004b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ba0:	f7fb fdd4 	bl	800074c <__aeabi_ddiv>
 8004ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba8:	f006 060f 	and.w	r6, r6, #15
 8004bac:	4f1c      	ldr	r7, [pc, #112]	; (8004c20 <_dtoa_r+0x330>)
 8004bae:	e04f      	b.n	8004c50 <_dtoa_r+0x360>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bb6:	4453      	add	r3, sl
 8004bb8:	f103 0801 	add.w	r8, r3, #1
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	4643      	mov	r3, r8
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bfb8      	it	lt
 8004bc4:	2301      	movlt	r3, #1
 8004bc6:	e7ba      	b.n	8004b3e <_dtoa_r+0x24e>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e7b2      	b.n	8004b32 <_dtoa_r+0x242>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e7f0      	b.n	8004bb2 <_dtoa_r+0x2c2>
 8004bd0:	2501      	movs	r5, #1
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9509      	str	r5, [sp, #36]	; 0x24
 8004bd6:	931e      	str	r3, [sp, #120]	; 0x78
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	2200      	movs	r2, #0
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	4698      	mov	r8, r3
 8004be2:	2312      	movs	r3, #18
 8004be4:	921f      	str	r2, [sp, #124]	; 0x7c
 8004be6:	e7aa      	b.n	8004b3e <_dtoa_r+0x24e>
 8004be8:	2301      	movs	r3, #1
 8004bea:	9309      	str	r3, [sp, #36]	; 0x24
 8004bec:	e7f4      	b.n	8004bd8 <_dtoa_r+0x2e8>
 8004bee:	bf00      	nop
 8004bf0:	636f4361 	.word	0x636f4361
 8004bf4:	3fd287a7 	.word	0x3fd287a7
 8004bf8:	8b60c8b3 	.word	0x8b60c8b3
 8004bfc:	3fc68a28 	.word	0x3fc68a28
 8004c00:	509f79fb 	.word	0x509f79fb
 8004c04:	3fd34413 	.word	0x3fd34413
 8004c08:	7ff00000 	.word	0x7ff00000
 8004c0c:	08005bcf 	.word	0x08005bcf
 8004c10:	08005bc6 	.word	0x08005bc6
 8004c14:	08005bc5 	.word	0x08005bc5
 8004c18:	3ff80000 	.word	0x3ff80000
 8004c1c:	08005c00 	.word	0x08005c00
 8004c20:	08005bd8 	.word	0x08005bd8
 8004c24:	2301      	movs	r3, #1
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	4698      	mov	r8, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	e7da      	b.n	8004be4 <_dtoa_r+0x2f4>
 8004c2e:	3101      	adds	r1, #1
 8004c30:	6071      	str	r1, [r6, #4]
 8004c32:	0052      	lsls	r2, r2, #1
 8004c34:	e787      	b.n	8004b46 <_dtoa_r+0x256>
 8004c36:	07f1      	lsls	r1, r6, #31
 8004c38:	d508      	bpl.n	8004c4c <_dtoa_r+0x35c>
 8004c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c42:	f7fb fc59 	bl	80004f8 <__aeabi_dmul>
 8004c46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	1076      	asrs	r6, r6, #1
 8004c4e:	3708      	adds	r7, #8
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d1f0      	bne.n	8004c36 <_dtoa_r+0x346>
 8004c54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5c:	f7fb fd76 	bl	800074c <__aeabi_ddiv>
 8004c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c64:	e01b      	b.n	8004c9e <_dtoa_r+0x3ae>
 8004c66:	2502      	movs	r5, #2
 8004c68:	e7a0      	b.n	8004bac <_dtoa_r+0x2bc>
 8004c6a:	f000 80a4 	beq.w	8004db6 <_dtoa_r+0x4c6>
 8004c6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004c72:	f1ca 0600 	rsb	r6, sl, #0
 8004c76:	4ba0      	ldr	r3, [pc, #640]	; (8004ef8 <_dtoa_r+0x608>)
 8004c78:	f006 020f 	and.w	r2, r6, #15
 8004c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fc38 	bl	80004f8 <__aeabi_dmul>
 8004c88:	2502      	movs	r5, #2
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c90:	4f9a      	ldr	r7, [pc, #616]	; (8004efc <_dtoa_r+0x60c>)
 8004c92:	1136      	asrs	r6, r6, #4
 8004c94:	2e00      	cmp	r6, #0
 8004c96:	f040 8083 	bne.w	8004da0 <_dtoa_r+0x4b0>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e0      	bne.n	8004c60 <_dtoa_r+0x370>
 8004c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808a 	beq.w	8004dba <_dtoa_r+0x4ca>
 8004ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004caa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004cae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4b92      	ldr	r3, [pc, #584]	; (8004f00 <_dtoa_r+0x610>)
 8004cb6:	f7fb fe91 	bl	80009dc <__aeabi_dcmplt>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d07d      	beq.n	8004dba <_dtoa_r+0x4ca>
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d07a      	beq.n	8004dba <_dtoa_r+0x4ca>
 8004cc4:	9b04      	ldr	r3, [sp, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd36      	ble.n	8004d38 <_dtoa_r+0x448>
 8004cca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	; (8004f04 <_dtoa_r+0x614>)
 8004cd2:	f7fb fc11 	bl	80004f8 <__aeabi_dmul>
 8004cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cda:	9e04      	ldr	r6, [sp, #16]
 8004cdc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f7fb fb9e 	bl	8000424 <__aeabi_i2d>
 8004ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cec:	f7fb fc04 	bl	80004f8 <__aeabi_dmul>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <_dtoa_r+0x618>)
 8004cf4:	f7fb fa4a 	bl	800018c <__adddf3>
 8004cf8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004cfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004d00:	950b      	str	r5, [sp, #44]	; 0x2c
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d15c      	bne.n	8004dc0 <_dtoa_r+0x4d0>
 8004d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <_dtoa_r+0x61c>)
 8004d0e:	f7fb fa3b 	bl	8000188 <__aeabi_dsub>
 8004d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d14:	462b      	mov	r3, r5
 8004d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d1a:	f7fb fe7d 	bl	8000a18 <__aeabi_dcmpgt>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f040 8281 	bne.w	8005226 <_dtoa_r+0x936>
 8004d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d2e:	f7fb fe55 	bl	80009dc <__aeabi_dcmplt>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	f040 8275 	bne.w	8005222 <_dtoa_r+0x932>
 8004d38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f2c0 814b 	blt.w	8004fde <_dtoa_r+0x6ee>
 8004d48:	f1ba 0f0e 	cmp.w	sl, #14
 8004d4c:	f300 8147 	bgt.w	8004fde <_dtoa_r+0x6ee>
 8004d50:	4b69      	ldr	r3, [pc, #420]	; (8004ef8 <_dtoa_r+0x608>)
 8004d52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f280 80d7 	bge.w	8004f14 <_dtoa_r+0x624>
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	f300 80d3 	bgt.w	8004f14 <_dtoa_r+0x624>
 8004d6e:	f040 8257 	bne.w	8005220 <_dtoa_r+0x930>
 8004d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d76:	2200      	movs	r2, #0
 8004d78:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <_dtoa_r+0x61c>)
 8004d7a:	f7fb fbbd 	bl	80004f8 <__aeabi_dmul>
 8004d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d82:	f7fb fe3f 	bl	8000a04 <__aeabi_dcmpge>
 8004d86:	4646      	mov	r6, r8
 8004d88:	4647      	mov	r7, r8
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	f040 822d 	bne.w	80051ea <_dtoa_r+0x8fa>
 8004d90:	9b06      	ldr	r3, [sp, #24]
 8004d92:	9a06      	ldr	r2, [sp, #24]
 8004d94:	1c5d      	adds	r5, r3, #1
 8004d96:	2331      	movs	r3, #49	; 0x31
 8004d98:	f10a 0a01 	add.w	sl, sl, #1
 8004d9c:	7013      	strb	r3, [r2, #0]
 8004d9e:	e228      	b.n	80051f2 <_dtoa_r+0x902>
 8004da0:	07f2      	lsls	r2, r6, #31
 8004da2:	d505      	bpl.n	8004db0 <_dtoa_r+0x4c0>
 8004da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da8:	f7fb fba6 	bl	80004f8 <__aeabi_dmul>
 8004dac:	2301      	movs	r3, #1
 8004dae:	3501      	adds	r5, #1
 8004db0:	1076      	asrs	r6, r6, #1
 8004db2:	3708      	adds	r7, #8
 8004db4:	e76e      	b.n	8004c94 <_dtoa_r+0x3a4>
 8004db6:	2502      	movs	r5, #2
 8004db8:	e771      	b.n	8004c9e <_dtoa_r+0x3ae>
 8004dba:	4657      	mov	r7, sl
 8004dbc:	4646      	mov	r6, r8
 8004dbe:	e790      	b.n	8004ce2 <_dtoa_r+0x3f2>
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	; (8004ef8 <_dtoa_r+0x608>)
 8004dc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004dc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d048      	beq.n	8004e62 <_dtoa_r+0x572>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	494e      	ldr	r1, [pc, #312]	; (8004f10 <_dtoa_r+0x620>)
 8004dd8:	f7fb fcb8 	bl	800074c <__aeabi_ddiv>
 8004ddc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004de0:	f7fb f9d2 	bl	8000188 <__aeabi_dsub>
 8004de4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004de8:	9d06      	ldr	r5, [sp, #24]
 8004dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dee:	f7fb fe33 	bl	8000a58 <__aeabi_d2iz>
 8004df2:	9011      	str	r0, [sp, #68]	; 0x44
 8004df4:	f7fb fb16 	bl	8000424 <__aeabi_i2d>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e00:	f7fb f9c2 	bl	8000188 <__aeabi_dsub>
 8004e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e0a:	3330      	adds	r3, #48	; 0x30
 8004e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e14:	f7fb fde2 	bl	80009dc <__aeabi_dcmplt>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d163      	bne.n	8004ee4 <_dtoa_r+0x5f4>
 8004e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e20:	2000      	movs	r0, #0
 8004e22:	4937      	ldr	r1, [pc, #220]	; (8004f00 <_dtoa_r+0x610>)
 8004e24:	f7fb f9b0 	bl	8000188 <__aeabi_dsub>
 8004e28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e2c:	f7fb fdd6 	bl	80009dc <__aeabi_dcmplt>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f040 80b5 	bne.w	8004fa0 <_dtoa_r+0x6b0>
 8004e36:	9b06      	ldr	r3, [sp, #24]
 8004e38:	1aeb      	subs	r3, r5, r3
 8004e3a:	429e      	cmp	r6, r3
 8004e3c:	f77f af7c 	ble.w	8004d38 <_dtoa_r+0x448>
 8004e40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e44:	2200      	movs	r2, #0
 8004e46:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <_dtoa_r+0x614>)
 8004e48:	f7fb fb56 	bl	80004f8 <__aeabi_dmul>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e56:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <_dtoa_r+0x614>)
 8004e58:	f7fb fb4e 	bl	80004f8 <__aeabi_dmul>
 8004e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e60:	e7c3      	b.n	8004dea <_dtoa_r+0x4fa>
 8004e62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e66:	f7fb fb47 	bl	80004f8 <__aeabi_dmul>
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e70:	199d      	adds	r5, r3, r6
 8004e72:	461e      	mov	r6, r3
 8004e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e78:	f7fb fdee 	bl	8000a58 <__aeabi_d2iz>
 8004e7c:	9011      	str	r0, [sp, #68]	; 0x44
 8004e7e:	f7fb fad1 	bl	8000424 <__aeabi_i2d>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e8a:	f7fb f97d 	bl	8000188 <__aeabi_dsub>
 8004e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e94:	3330      	adds	r3, #48	; 0x30
 8004e96:	f806 3b01 	strb.w	r3, [r6], #1
 8004e9a:	42ae      	cmp	r6, r5
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	d124      	bne.n	8004eec <_dtoa_r+0x5fc>
 8004ea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <_dtoa_r+0x620>)
 8004ea8:	f7fb f970 	bl	800018c <__adddf3>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb4:	f7fb fdb0 	bl	8000a18 <__aeabi_dcmpgt>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d171      	bne.n	8004fa0 <_dtoa_r+0x6b0>
 8004ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4913      	ldr	r1, [pc, #76]	; (8004f10 <_dtoa_r+0x620>)
 8004ec4:	f7fb f960 	bl	8000188 <__aeabi_dsub>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ed0:	f7fb fd84 	bl	80009dc <__aeabi_dcmplt>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f43f af2f 	beq.w	8004d38 <_dtoa_r+0x448>
 8004eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ede:	1e6a      	subs	r2, r5, #1
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d001      	beq.n	8004ee8 <_dtoa_r+0x5f8>
 8004ee4:	46ba      	mov	sl, r7
 8004ee6:	e04a      	b.n	8004f7e <_dtoa_r+0x68e>
 8004ee8:	4615      	mov	r5, r2
 8004eea:	e7f6      	b.n	8004eda <_dtoa_r+0x5ea>
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <_dtoa_r+0x614>)
 8004eee:	f7fb fb03 	bl	80004f8 <__aeabi_dmul>
 8004ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef6:	e7bd      	b.n	8004e74 <_dtoa_r+0x584>
 8004ef8:	08005c00 	.word	0x08005c00
 8004efc:	08005bd8 	.word	0x08005bd8
 8004f00:	3ff00000 	.word	0x3ff00000
 8004f04:	40240000 	.word	0x40240000
 8004f08:	401c0000 	.word	0x401c0000
 8004f0c:	40140000 	.word	0x40140000
 8004f10:	3fe00000 	.word	0x3fe00000
 8004f14:	9d06      	ldr	r5, [sp, #24]
 8004f16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fc13 	bl	800074c <__aeabi_ddiv>
 8004f26:	f7fb fd97 	bl	8000a58 <__aeabi_d2iz>
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	f7fb fa7a 	bl	8000424 <__aeabi_i2d>
 8004f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f34:	f7fb fae0 	bl	80004f8 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	4639      	mov	r1, r7
 8004f40:	f7fb f922 	bl	8000188 <__aeabi_dsub>
 8004f44:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004f48:	f805 6b01 	strb.w	r6, [r5], #1
 8004f4c:	9e06      	ldr	r6, [sp, #24]
 8004f4e:	4602      	mov	r2, r0
 8004f50:	1bae      	subs	r6, r5, r6
 8004f52:	45b0      	cmp	r8, r6
 8004f54:	460b      	mov	r3, r1
 8004f56:	d135      	bne.n	8004fc4 <_dtoa_r+0x6d4>
 8004f58:	f7fb f918 	bl	800018c <__adddf3>
 8004f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	f7fb fd58 	bl	8000a18 <__aeabi_dcmpgt>
 8004f68:	b9c8      	cbnz	r0, 8004f9e <_dtoa_r+0x6ae>
 8004f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6e:	4630      	mov	r0, r6
 8004f70:	4639      	mov	r1, r7
 8004f72:	f7fb fd29 	bl	80009c8 <__aeabi_dcmpeq>
 8004f76:	b110      	cbz	r0, 8004f7e <_dtoa_r+0x68e>
 8004f78:	f019 0f01 	tst.w	r9, #1
 8004f7c:	d10f      	bne.n	8004f9e <_dtoa_r+0x6ae>
 8004f7e:	4659      	mov	r1, fp
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 fabe 	bl	8005502 <_Bfree>
 8004f86:	2300      	movs	r3, #0
 8004f88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f8a:	702b      	strb	r3, [r5, #0]
 8004f8c:	f10a 0301 	add.w	r3, sl, #1
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f43f acf3 	beq.w	8004980 <_dtoa_r+0x90>
 8004f9a:	601d      	str	r5, [r3, #0]
 8004f9c:	e4f0      	b.n	8004980 <_dtoa_r+0x90>
 8004f9e:	4657      	mov	r7, sl
 8004fa0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fa4:	1e6b      	subs	r3, r5, #1
 8004fa6:	2a39      	cmp	r2, #57	; 0x39
 8004fa8:	d106      	bne.n	8004fb8 <_dtoa_r+0x6c8>
 8004faa:	9a06      	ldr	r2, [sp, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <_dtoa_r+0x6d0>
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	7013      	strb	r3, [r2, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	3201      	adds	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e791      	b.n	8004ee4 <_dtoa_r+0x5f4>
 8004fc0:	461d      	mov	r5, r3
 8004fc2:	e7ed      	b.n	8004fa0 <_dtoa_r+0x6b0>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4b99      	ldr	r3, [pc, #612]	; (800522c <_dtoa_r+0x93c>)
 8004fc8:	f7fb fa96 	bl	80004f8 <__aeabi_dmul>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	460f      	mov	r7, r1
 8004fd4:	f7fb fcf8 	bl	80009c8 <__aeabi_dcmpeq>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d09e      	beq.n	8004f1a <_dtoa_r+0x62a>
 8004fdc:	e7cf      	b.n	8004f7e <_dtoa_r+0x68e>
 8004fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	f000 8088 	beq.w	80050f6 <_dtoa_r+0x806>
 8004fe6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004fe8:	2a01      	cmp	r2, #1
 8004fea:	dc6d      	bgt.n	80050c8 <_dtoa_r+0x7d8>
 8004fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	d066      	beq.n	80050c0 <_dtoa_r+0x7d0>
 8004ff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ff6:	464d      	mov	r5, r9
 8004ff8:	9e08      	ldr	r6, [sp, #32]
 8004ffa:	9a07      	ldr	r2, [sp, #28]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	441a      	add	r2, r3
 8005000:	4620      	mov	r0, r4
 8005002:	4499      	add	r9, r3
 8005004:	9207      	str	r2, [sp, #28]
 8005006:	f000 fb1c 	bl	8005642 <__i2b>
 800500a:	4607      	mov	r7, r0
 800500c:	2d00      	cmp	r5, #0
 800500e:	dd0b      	ble.n	8005028 <_dtoa_r+0x738>
 8005010:	9b07      	ldr	r3, [sp, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dd08      	ble.n	8005028 <_dtoa_r+0x738>
 8005016:	42ab      	cmp	r3, r5
 8005018:	bfa8      	it	ge
 800501a:	462b      	movge	r3, r5
 800501c:	9a07      	ldr	r2, [sp, #28]
 800501e:	eba9 0903 	sub.w	r9, r9, r3
 8005022:	1aed      	subs	r5, r5, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	9b08      	ldr	r3, [sp, #32]
 800502a:	b1eb      	cbz	r3, 8005068 <_dtoa_r+0x778>
 800502c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d065      	beq.n	80050fe <_dtoa_r+0x80e>
 8005032:	b18e      	cbz	r6, 8005058 <_dtoa_r+0x768>
 8005034:	4639      	mov	r1, r7
 8005036:	4632      	mov	r2, r6
 8005038:	4620      	mov	r0, r4
 800503a:	f000 fba1 	bl	8005780 <__pow5mult>
 800503e:	465a      	mov	r2, fp
 8005040:	4601      	mov	r1, r0
 8005042:	4607      	mov	r7, r0
 8005044:	4620      	mov	r0, r4
 8005046:	f000 fb05 	bl	8005654 <__multiply>
 800504a:	4659      	mov	r1, fp
 800504c:	900a      	str	r0, [sp, #40]	; 0x28
 800504e:	4620      	mov	r0, r4
 8005050:	f000 fa57 	bl	8005502 <_Bfree>
 8005054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005056:	469b      	mov	fp, r3
 8005058:	9b08      	ldr	r3, [sp, #32]
 800505a:	1b9a      	subs	r2, r3, r6
 800505c:	d004      	beq.n	8005068 <_dtoa_r+0x778>
 800505e:	4659      	mov	r1, fp
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fb8d 	bl	8005780 <__pow5mult>
 8005066:	4683      	mov	fp, r0
 8005068:	2101      	movs	r1, #1
 800506a:	4620      	mov	r0, r4
 800506c:	f000 fae9 	bl	8005642 <__i2b>
 8005070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005072:	4606      	mov	r6, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 81c6 	beq.w	8005406 <_dtoa_r+0xb16>
 800507a:	461a      	mov	r2, r3
 800507c:	4601      	mov	r1, r0
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fb7e 	bl	8005780 <__pow5mult>
 8005084:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005086:	4606      	mov	r6, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	dc3e      	bgt.n	800510a <_dtoa_r+0x81a>
 800508c:	9b02      	ldr	r3, [sp, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d137      	bne.n	8005102 <_dtoa_r+0x812>
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005098:	2b00      	cmp	r3, #0
 800509a:	d134      	bne.n	8005106 <_dtoa_r+0x816>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050a2:	0d1b      	lsrs	r3, r3, #20
 80050a4:	051b      	lsls	r3, r3, #20
 80050a6:	b12b      	cbz	r3, 80050b4 <_dtoa_r+0x7c4>
 80050a8:	9b07      	ldr	r3, [sp, #28]
 80050aa:	f109 0901 	add.w	r9, r9, #1
 80050ae:	3301      	adds	r3, #1
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	2301      	movs	r3, #1
 80050b4:	9308      	str	r3, [sp, #32]
 80050b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d128      	bne.n	800510e <_dtoa_r+0x81e>
 80050bc:	2001      	movs	r0, #1
 80050be:	e02e      	b.n	800511e <_dtoa_r+0x82e>
 80050c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050c6:	e796      	b.n	8004ff6 <_dtoa_r+0x706>
 80050c8:	9b08      	ldr	r3, [sp, #32]
 80050ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80050ce:	42b3      	cmp	r3, r6
 80050d0:	bfb7      	itett	lt
 80050d2:	9b08      	ldrlt	r3, [sp, #32]
 80050d4:	1b9e      	subge	r6, r3, r6
 80050d6:	1af2      	sublt	r2, r6, r3
 80050d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80050da:	bfbf      	itttt	lt
 80050dc:	9608      	strlt	r6, [sp, #32]
 80050de:	189b      	addlt	r3, r3, r2
 80050e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80050e2:	2600      	movlt	r6, #0
 80050e4:	f1b8 0f00 	cmp.w	r8, #0
 80050e8:	bfb9      	ittee	lt
 80050ea:	eba9 0508 	sublt.w	r5, r9, r8
 80050ee:	2300      	movlt	r3, #0
 80050f0:	464d      	movge	r5, r9
 80050f2:	4643      	movge	r3, r8
 80050f4:	e781      	b.n	8004ffa <_dtoa_r+0x70a>
 80050f6:	9e08      	ldr	r6, [sp, #32]
 80050f8:	464d      	mov	r5, r9
 80050fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80050fc:	e786      	b.n	800500c <_dtoa_r+0x71c>
 80050fe:	9a08      	ldr	r2, [sp, #32]
 8005100:	e7ad      	b.n	800505e <_dtoa_r+0x76e>
 8005102:	2300      	movs	r3, #0
 8005104:	e7d6      	b.n	80050b4 <_dtoa_r+0x7c4>
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	e7d4      	b.n	80050b4 <_dtoa_r+0x7c4>
 800510a:	2300      	movs	r3, #0
 800510c:	9308      	str	r3, [sp, #32]
 800510e:	6933      	ldr	r3, [r6, #16]
 8005110:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005114:	6918      	ldr	r0, [r3, #16]
 8005116:	f000 fa46 	bl	80055a6 <__hi0bits>
 800511a:	f1c0 0020 	rsb	r0, r0, #32
 800511e:	9b07      	ldr	r3, [sp, #28]
 8005120:	4418      	add	r0, r3
 8005122:	f010 001f 	ands.w	r0, r0, #31
 8005126:	d047      	beq.n	80051b8 <_dtoa_r+0x8c8>
 8005128:	f1c0 0320 	rsb	r3, r0, #32
 800512c:	2b04      	cmp	r3, #4
 800512e:	dd3b      	ble.n	80051a8 <_dtoa_r+0x8b8>
 8005130:	9b07      	ldr	r3, [sp, #28]
 8005132:	f1c0 001c 	rsb	r0, r0, #28
 8005136:	4481      	add	r9, r0
 8005138:	4405      	add	r5, r0
 800513a:	4403      	add	r3, r0
 800513c:	9307      	str	r3, [sp, #28]
 800513e:	f1b9 0f00 	cmp.w	r9, #0
 8005142:	dd05      	ble.n	8005150 <_dtoa_r+0x860>
 8005144:	4659      	mov	r1, fp
 8005146:	464a      	mov	r2, r9
 8005148:	4620      	mov	r0, r4
 800514a:	f000 fb67 	bl	800581c <__lshift>
 800514e:	4683      	mov	fp, r0
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dd05      	ble.n	8005162 <_dtoa_r+0x872>
 8005156:	4631      	mov	r1, r6
 8005158:	461a      	mov	r2, r3
 800515a:	4620      	mov	r0, r4
 800515c:	f000 fb5e 	bl	800581c <__lshift>
 8005160:	4606      	mov	r6, r0
 8005162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005164:	b353      	cbz	r3, 80051bc <_dtoa_r+0x8cc>
 8005166:	4631      	mov	r1, r6
 8005168:	4658      	mov	r0, fp
 800516a:	f000 fbab 	bl	80058c4 <__mcmp>
 800516e:	2800      	cmp	r0, #0
 8005170:	da24      	bge.n	80051bc <_dtoa_r+0x8cc>
 8005172:	2300      	movs	r3, #0
 8005174:	4659      	mov	r1, fp
 8005176:	220a      	movs	r2, #10
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f9d9 	bl	8005530 <__multadd>
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005184:	4683      	mov	fp, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8144 	beq.w	8005414 <_dtoa_r+0xb24>
 800518c:	2300      	movs	r3, #0
 800518e:	4639      	mov	r1, r7
 8005190:	220a      	movs	r2, #10
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f9cc 	bl	8005530 <__multadd>
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	4607      	mov	r7, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	dc4d      	bgt.n	800523c <_dtoa_r+0x94c>
 80051a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	dd4a      	ble.n	800523c <_dtoa_r+0x94c>
 80051a6:	e011      	b.n	80051cc <_dtoa_r+0x8dc>
 80051a8:	d0c9      	beq.n	800513e <_dtoa_r+0x84e>
 80051aa:	9a07      	ldr	r2, [sp, #28]
 80051ac:	331c      	adds	r3, #28
 80051ae:	441a      	add	r2, r3
 80051b0:	4499      	add	r9, r3
 80051b2:	441d      	add	r5, r3
 80051b4:	4613      	mov	r3, r2
 80051b6:	e7c1      	b.n	800513c <_dtoa_r+0x84c>
 80051b8:	4603      	mov	r3, r0
 80051ba:	e7f6      	b.n	80051aa <_dtoa_r+0x8ba>
 80051bc:	f1b8 0f00 	cmp.w	r8, #0
 80051c0:	dc36      	bgt.n	8005230 <_dtoa_r+0x940>
 80051c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	dd33      	ble.n	8005230 <_dtoa_r+0x940>
 80051c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80051cc:	9b04      	ldr	r3, [sp, #16]
 80051ce:	b963      	cbnz	r3, 80051ea <_dtoa_r+0x8fa>
 80051d0:	4631      	mov	r1, r6
 80051d2:	2205      	movs	r2, #5
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f9ab 	bl	8005530 <__multadd>
 80051da:	4601      	mov	r1, r0
 80051dc:	4606      	mov	r6, r0
 80051de:	4658      	mov	r0, fp
 80051e0:	f000 fb70 	bl	80058c4 <__mcmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f73f add3 	bgt.w	8004d90 <_dtoa_r+0x4a0>
 80051ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051ec:	9d06      	ldr	r5, [sp, #24]
 80051ee:	ea6f 0a03 	mvn.w	sl, r3
 80051f2:	f04f 0900 	mov.w	r9, #0
 80051f6:	4631      	mov	r1, r6
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 f982 	bl	8005502 <_Bfree>
 80051fe:	2f00      	cmp	r7, #0
 8005200:	f43f aebd 	beq.w	8004f7e <_dtoa_r+0x68e>
 8005204:	f1b9 0f00 	cmp.w	r9, #0
 8005208:	d005      	beq.n	8005216 <_dtoa_r+0x926>
 800520a:	45b9      	cmp	r9, r7
 800520c:	d003      	beq.n	8005216 <_dtoa_r+0x926>
 800520e:	4649      	mov	r1, r9
 8005210:	4620      	mov	r0, r4
 8005212:	f000 f976 	bl	8005502 <_Bfree>
 8005216:	4639      	mov	r1, r7
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f972 	bl	8005502 <_Bfree>
 800521e:	e6ae      	b.n	8004f7e <_dtoa_r+0x68e>
 8005220:	2600      	movs	r6, #0
 8005222:	4637      	mov	r7, r6
 8005224:	e7e1      	b.n	80051ea <_dtoa_r+0x8fa>
 8005226:	46ba      	mov	sl, r7
 8005228:	4637      	mov	r7, r6
 800522a:	e5b1      	b.n	8004d90 <_dtoa_r+0x4a0>
 800522c:	40240000 	.word	0x40240000
 8005230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005232:	f8cd 8010 	str.w	r8, [sp, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80f3 	beq.w	8005422 <_dtoa_r+0xb32>
 800523c:	2d00      	cmp	r5, #0
 800523e:	dd05      	ble.n	800524c <_dtoa_r+0x95c>
 8005240:	4639      	mov	r1, r7
 8005242:	462a      	mov	r2, r5
 8005244:	4620      	mov	r0, r4
 8005246:	f000 fae9 	bl	800581c <__lshift>
 800524a:	4607      	mov	r7, r0
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d04c      	beq.n	80052ec <_dtoa_r+0x9fc>
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4620      	mov	r0, r4
 8005256:	f000 f920 	bl	800549a <_Balloc>
 800525a:	4605      	mov	r5, r0
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	f107 010c 	add.w	r1, r7, #12
 8005262:	3202      	adds	r2, #2
 8005264:	0092      	lsls	r2, r2, #2
 8005266:	300c      	adds	r0, #12
 8005268:	f000 f90c 	bl	8005484 <memcpy>
 800526c:	2201      	movs	r2, #1
 800526e:	4629      	mov	r1, r5
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fad3 	bl	800581c <__lshift>
 8005276:	46b9      	mov	r9, r7
 8005278:	4607      	mov	r7, r0
 800527a:	9b06      	ldr	r3, [sp, #24]
 800527c:	9307      	str	r3, [sp, #28]
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	9308      	str	r3, [sp, #32]
 8005286:	4631      	mov	r1, r6
 8005288:	4658      	mov	r0, fp
 800528a:	f7ff faa3 	bl	80047d4 <quorem>
 800528e:	4649      	mov	r1, r9
 8005290:	4605      	mov	r5, r0
 8005292:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005296:	4658      	mov	r0, fp
 8005298:	f000 fb14 	bl	80058c4 <__mcmp>
 800529c:	463a      	mov	r2, r7
 800529e:	9002      	str	r0, [sp, #8]
 80052a0:	4631      	mov	r1, r6
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fb28 	bl	80058f8 <__mdiff>
 80052a8:	68c3      	ldr	r3, [r0, #12]
 80052aa:	4602      	mov	r2, r0
 80052ac:	bb03      	cbnz	r3, 80052f0 <_dtoa_r+0xa00>
 80052ae:	4601      	mov	r1, r0
 80052b0:	9009      	str	r0, [sp, #36]	; 0x24
 80052b2:	4658      	mov	r0, fp
 80052b4:	f000 fb06 	bl	80058c4 <__mcmp>
 80052b8:	4603      	mov	r3, r0
 80052ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052bc:	4611      	mov	r1, r2
 80052be:	4620      	mov	r0, r4
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	f000 f91e 	bl	8005502 <_Bfree>
 80052c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c8:	b9a3      	cbnz	r3, 80052f4 <_dtoa_r+0xa04>
 80052ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052cc:	b992      	cbnz	r2, 80052f4 <_dtoa_r+0xa04>
 80052ce:	9a08      	ldr	r2, [sp, #32]
 80052d0:	b982      	cbnz	r2, 80052f4 <_dtoa_r+0xa04>
 80052d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80052d6:	d029      	beq.n	800532c <_dtoa_r+0xa3c>
 80052d8:	9b02      	ldr	r3, [sp, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dd01      	ble.n	80052e2 <_dtoa_r+0x9f2>
 80052de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80052e2:	9b07      	ldr	r3, [sp, #28]
 80052e4:	1c5d      	adds	r5, r3, #1
 80052e6:	f883 8000 	strb.w	r8, [r3]
 80052ea:	e784      	b.n	80051f6 <_dtoa_r+0x906>
 80052ec:	4638      	mov	r0, r7
 80052ee:	e7c2      	b.n	8005276 <_dtoa_r+0x986>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7e3      	b.n	80052bc <_dtoa_r+0x9cc>
 80052f4:	9a02      	ldr	r2, [sp, #8]
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	db04      	blt.n	8005304 <_dtoa_r+0xa14>
 80052fa:	d123      	bne.n	8005344 <_dtoa_r+0xa54>
 80052fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052fe:	bb0a      	cbnz	r2, 8005344 <_dtoa_r+0xa54>
 8005300:	9a08      	ldr	r2, [sp, #32]
 8005302:	b9fa      	cbnz	r2, 8005344 <_dtoa_r+0xa54>
 8005304:	2b00      	cmp	r3, #0
 8005306:	ddec      	ble.n	80052e2 <_dtoa_r+0x9f2>
 8005308:	4659      	mov	r1, fp
 800530a:	2201      	movs	r2, #1
 800530c:	4620      	mov	r0, r4
 800530e:	f000 fa85 	bl	800581c <__lshift>
 8005312:	4631      	mov	r1, r6
 8005314:	4683      	mov	fp, r0
 8005316:	f000 fad5 	bl	80058c4 <__mcmp>
 800531a:	2800      	cmp	r0, #0
 800531c:	dc03      	bgt.n	8005326 <_dtoa_r+0xa36>
 800531e:	d1e0      	bne.n	80052e2 <_dtoa_r+0x9f2>
 8005320:	f018 0f01 	tst.w	r8, #1
 8005324:	d0dd      	beq.n	80052e2 <_dtoa_r+0x9f2>
 8005326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800532a:	d1d8      	bne.n	80052de <_dtoa_r+0x9ee>
 800532c:	9b07      	ldr	r3, [sp, #28]
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	1c5d      	adds	r5, r3, #1
 8005332:	2339      	movs	r3, #57	; 0x39
 8005334:	7013      	strb	r3, [r2, #0]
 8005336:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800533a:	1e6a      	subs	r2, r5, #1
 800533c:	2b39      	cmp	r3, #57	; 0x39
 800533e:	d04d      	beq.n	80053dc <_dtoa_r+0xaec>
 8005340:	3301      	adds	r3, #1
 8005342:	e052      	b.n	80053ea <_dtoa_r+0xafa>
 8005344:	9a07      	ldr	r2, [sp, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f102 0501 	add.w	r5, r2, #1
 800534c:	dd06      	ble.n	800535c <_dtoa_r+0xa6c>
 800534e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005352:	d0eb      	beq.n	800532c <_dtoa_r+0xa3c>
 8005354:	f108 0801 	add.w	r8, r8, #1
 8005358:	9b07      	ldr	r3, [sp, #28]
 800535a:	e7c4      	b.n	80052e6 <_dtoa_r+0x9f6>
 800535c:	9b06      	ldr	r3, [sp, #24]
 800535e:	9a04      	ldr	r2, [sp, #16]
 8005360:	1aeb      	subs	r3, r5, r3
 8005362:	4293      	cmp	r3, r2
 8005364:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005368:	d021      	beq.n	80053ae <_dtoa_r+0xabe>
 800536a:	4659      	mov	r1, fp
 800536c:	2300      	movs	r3, #0
 800536e:	220a      	movs	r2, #10
 8005370:	4620      	mov	r0, r4
 8005372:	f000 f8dd 	bl	8005530 <__multadd>
 8005376:	45b9      	cmp	r9, r7
 8005378:	4683      	mov	fp, r0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	f04f 020a 	mov.w	r2, #10
 8005382:	4649      	mov	r1, r9
 8005384:	4620      	mov	r0, r4
 8005386:	d105      	bne.n	8005394 <_dtoa_r+0xaa4>
 8005388:	f000 f8d2 	bl	8005530 <__multadd>
 800538c:	4681      	mov	r9, r0
 800538e:	4607      	mov	r7, r0
 8005390:	9507      	str	r5, [sp, #28]
 8005392:	e778      	b.n	8005286 <_dtoa_r+0x996>
 8005394:	f000 f8cc 	bl	8005530 <__multadd>
 8005398:	4639      	mov	r1, r7
 800539a:	4681      	mov	r9, r0
 800539c:	2300      	movs	r3, #0
 800539e:	220a      	movs	r2, #10
 80053a0:	4620      	mov	r0, r4
 80053a2:	f000 f8c5 	bl	8005530 <__multadd>
 80053a6:	4607      	mov	r7, r0
 80053a8:	e7f2      	b.n	8005390 <_dtoa_r+0xaa0>
 80053aa:	f04f 0900 	mov.w	r9, #0
 80053ae:	4659      	mov	r1, fp
 80053b0:	2201      	movs	r2, #1
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fa32 	bl	800581c <__lshift>
 80053b8:	4631      	mov	r1, r6
 80053ba:	4683      	mov	fp, r0
 80053bc:	f000 fa82 	bl	80058c4 <__mcmp>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	dcb8      	bgt.n	8005336 <_dtoa_r+0xa46>
 80053c4:	d102      	bne.n	80053cc <_dtoa_r+0xadc>
 80053c6:	f018 0f01 	tst.w	r8, #1
 80053ca:	d1b4      	bne.n	8005336 <_dtoa_r+0xa46>
 80053cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053d0:	1e6a      	subs	r2, r5, #1
 80053d2:	2b30      	cmp	r3, #48	; 0x30
 80053d4:	f47f af0f 	bne.w	80051f6 <_dtoa_r+0x906>
 80053d8:	4615      	mov	r5, r2
 80053da:	e7f7      	b.n	80053cc <_dtoa_r+0xadc>
 80053dc:	9b06      	ldr	r3, [sp, #24]
 80053de:	4293      	cmp	r3, r2
 80053e0:	d105      	bne.n	80053ee <_dtoa_r+0xafe>
 80053e2:	2331      	movs	r3, #49	; 0x31
 80053e4:	9a06      	ldr	r2, [sp, #24]
 80053e6:	f10a 0a01 	add.w	sl, sl, #1
 80053ea:	7013      	strb	r3, [r2, #0]
 80053ec:	e703      	b.n	80051f6 <_dtoa_r+0x906>
 80053ee:	4615      	mov	r5, r2
 80053f0:	e7a1      	b.n	8005336 <_dtoa_r+0xa46>
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <_dtoa_r+0xb60>)
 80053f4:	f7ff bae1 	b.w	80049ba <_dtoa_r+0xca>
 80053f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f47f aabb 	bne.w	8004976 <_dtoa_r+0x86>
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <_dtoa_r+0xb64>)
 8005402:	f7ff bada 	b.w	80049ba <_dtoa_r+0xca>
 8005406:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005408:	2b01      	cmp	r3, #1
 800540a:	f77f ae3f 	ble.w	800508c <_dtoa_r+0x79c>
 800540e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005410:	9308      	str	r3, [sp, #32]
 8005412:	e653      	b.n	80050bc <_dtoa_r+0x7cc>
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	dc03      	bgt.n	8005422 <_dtoa_r+0xb32>
 800541a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800541c:	2b02      	cmp	r3, #2
 800541e:	f73f aed5 	bgt.w	80051cc <_dtoa_r+0x8dc>
 8005422:	9d06      	ldr	r5, [sp, #24]
 8005424:	4631      	mov	r1, r6
 8005426:	4658      	mov	r0, fp
 8005428:	f7ff f9d4 	bl	80047d4 <quorem>
 800542c:	9b06      	ldr	r3, [sp, #24]
 800542e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005432:	f805 8b01 	strb.w	r8, [r5], #1
 8005436:	9a04      	ldr	r2, [sp, #16]
 8005438:	1aeb      	subs	r3, r5, r3
 800543a:	429a      	cmp	r2, r3
 800543c:	ddb5      	ble.n	80053aa <_dtoa_r+0xaba>
 800543e:	4659      	mov	r1, fp
 8005440:	2300      	movs	r3, #0
 8005442:	220a      	movs	r2, #10
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f873 	bl	8005530 <__multadd>
 800544a:	4683      	mov	fp, r0
 800544c:	e7ea      	b.n	8005424 <_dtoa_r+0xb34>
 800544e:	bf00      	nop
 8005450:	08005bc4 	.word	0x08005bc4
 8005454:	08005bc6 	.word	0x08005bc6

08005458 <_localeconv_r>:
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <_localeconv_r+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a18      	ldr	r0, [r3, #32]
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <_localeconv_r+0x18>)
 8005460:	2800      	cmp	r0, #0
 8005462:	bf08      	it	eq
 8005464:	4618      	moveq	r0, r3
 8005466:	30f0      	adds	r0, #240	; 0xf0
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000000 	.word	0x20000000
 8005470:	20000064 	.word	0x20000064

08005474 <malloc>:
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <malloc+0xc>)
 8005476:	4601      	mov	r1, r0
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f000 baf9 	b.w	8005a70 <_malloc_r>
 800547e:	bf00      	nop
 8005480:	20000000 	.word	0x20000000

08005484 <memcpy>:
 8005484:	b510      	push	{r4, lr}
 8005486:	1e43      	subs	r3, r0, #1
 8005488:	440a      	add	r2, r1
 800548a:	4291      	cmp	r1, r2
 800548c:	d100      	bne.n	8005490 <memcpy+0xc>
 800548e:	bd10      	pop	{r4, pc}
 8005490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005498:	e7f7      	b.n	800548a <memcpy+0x6>

0800549a <_Balloc>:
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800549e:	4604      	mov	r4, r0
 80054a0:	460e      	mov	r6, r1
 80054a2:	b93d      	cbnz	r5, 80054b4 <_Balloc+0x1a>
 80054a4:	2010      	movs	r0, #16
 80054a6:	f7ff ffe5 	bl	8005474 <malloc>
 80054aa:	6260      	str	r0, [r4, #36]	; 0x24
 80054ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054b0:	6005      	str	r5, [r0, #0]
 80054b2:	60c5      	str	r5, [r0, #12]
 80054b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054b6:	68eb      	ldr	r3, [r5, #12]
 80054b8:	b183      	cbz	r3, 80054dc <_Balloc+0x42>
 80054ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80054c2:	b9b8      	cbnz	r0, 80054f4 <_Balloc+0x5a>
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f506 	lsl.w	r5, r1, r6
 80054ca:	1d6a      	adds	r2, r5, #5
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 fabf 	bl	8005a52 <_calloc_r>
 80054d4:	b160      	cbz	r0, 80054f0 <_Balloc+0x56>
 80054d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80054da:	e00e      	b.n	80054fa <_Balloc+0x60>
 80054dc:	2221      	movs	r2, #33	; 0x21
 80054de:	2104      	movs	r1, #4
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fab6 	bl	8005a52 <_calloc_r>
 80054e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e8:	60e8      	str	r0, [r5, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e4      	bne.n	80054ba <_Balloc+0x20>
 80054f0:	2000      	movs	r0, #0
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	6802      	ldr	r2, [r0, #0]
 80054f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80054fa:	2300      	movs	r3, #0
 80054fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005500:	e7f7      	b.n	80054f2 <_Balloc+0x58>

08005502 <_Bfree>:
 8005502:	b570      	push	{r4, r5, r6, lr}
 8005504:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005506:	4606      	mov	r6, r0
 8005508:	460d      	mov	r5, r1
 800550a:	b93c      	cbnz	r4, 800551c <_Bfree+0x1a>
 800550c:	2010      	movs	r0, #16
 800550e:	f7ff ffb1 	bl	8005474 <malloc>
 8005512:	6270      	str	r0, [r6, #36]	; 0x24
 8005514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005518:	6004      	str	r4, [r0, #0]
 800551a:	60c4      	str	r4, [r0, #12]
 800551c:	b13d      	cbz	r5, 800552e <_Bfree+0x2c>
 800551e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005520:	686a      	ldr	r2, [r5, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005528:	6029      	str	r1, [r5, #0]
 800552a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800552e:	bd70      	pop	{r4, r5, r6, pc}

08005530 <__multadd>:
 8005530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005534:	461f      	mov	r7, r3
 8005536:	4606      	mov	r6, r0
 8005538:	460c      	mov	r4, r1
 800553a:	2300      	movs	r3, #0
 800553c:	690d      	ldr	r5, [r1, #16]
 800553e:	f101 0c14 	add.w	ip, r1, #20
 8005542:	f8dc 0000 	ldr.w	r0, [ip]
 8005546:	3301      	adds	r3, #1
 8005548:	b281      	uxth	r1, r0
 800554a:	fb02 7101 	mla	r1, r2, r1, r7
 800554e:	0c00      	lsrs	r0, r0, #16
 8005550:	0c0f      	lsrs	r7, r1, #16
 8005552:	fb02 7000 	mla	r0, r2, r0, r7
 8005556:	b289      	uxth	r1, r1
 8005558:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800555c:	429d      	cmp	r5, r3
 800555e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005562:	f84c 1b04 	str.w	r1, [ip], #4
 8005566:	dcec      	bgt.n	8005542 <__multadd+0x12>
 8005568:	b1d7      	cbz	r7, 80055a0 <__multadd+0x70>
 800556a:	68a3      	ldr	r3, [r4, #8]
 800556c:	42ab      	cmp	r3, r5
 800556e:	dc12      	bgt.n	8005596 <__multadd+0x66>
 8005570:	6861      	ldr	r1, [r4, #4]
 8005572:	4630      	mov	r0, r6
 8005574:	3101      	adds	r1, #1
 8005576:	f7ff ff90 	bl	800549a <_Balloc>
 800557a:	4680      	mov	r8, r0
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	f104 010c 	add.w	r1, r4, #12
 8005582:	3202      	adds	r2, #2
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	300c      	adds	r0, #12
 8005588:	f7ff ff7c 	bl	8005484 <memcpy>
 800558c:	4621      	mov	r1, r4
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff ffb7 	bl	8005502 <_Bfree>
 8005594:	4644      	mov	r4, r8
 8005596:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800559a:	3501      	adds	r5, #1
 800559c:	615f      	str	r7, [r3, #20]
 800559e:	6125      	str	r5, [r4, #16]
 80055a0:	4620      	mov	r0, r4
 80055a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055a6 <__hi0bits>:
 80055a6:	0c02      	lsrs	r2, r0, #16
 80055a8:	0412      	lsls	r2, r2, #16
 80055aa:	4603      	mov	r3, r0
 80055ac:	b9b2      	cbnz	r2, 80055dc <__hi0bits+0x36>
 80055ae:	0403      	lsls	r3, r0, #16
 80055b0:	2010      	movs	r0, #16
 80055b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055b6:	bf04      	itt	eq
 80055b8:	021b      	lsleq	r3, r3, #8
 80055ba:	3008      	addeq	r0, #8
 80055bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055c0:	bf04      	itt	eq
 80055c2:	011b      	lsleq	r3, r3, #4
 80055c4:	3004      	addeq	r0, #4
 80055c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80055ca:	bf04      	itt	eq
 80055cc:	009b      	lsleq	r3, r3, #2
 80055ce:	3002      	addeq	r0, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db06      	blt.n	80055e2 <__hi0bits+0x3c>
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	d503      	bpl.n	80055e0 <__hi0bits+0x3a>
 80055d8:	3001      	adds	r0, #1
 80055da:	4770      	bx	lr
 80055dc:	2000      	movs	r0, #0
 80055de:	e7e8      	b.n	80055b2 <__hi0bits+0xc>
 80055e0:	2020      	movs	r0, #32
 80055e2:	4770      	bx	lr

080055e4 <__lo0bits>:
 80055e4:	6803      	ldr	r3, [r0, #0]
 80055e6:	4601      	mov	r1, r0
 80055e8:	f013 0207 	ands.w	r2, r3, #7
 80055ec:	d00b      	beq.n	8005606 <__lo0bits+0x22>
 80055ee:	07da      	lsls	r2, r3, #31
 80055f0:	d423      	bmi.n	800563a <__lo0bits+0x56>
 80055f2:	0798      	lsls	r0, r3, #30
 80055f4:	bf49      	itett	mi
 80055f6:	085b      	lsrmi	r3, r3, #1
 80055f8:	089b      	lsrpl	r3, r3, #2
 80055fa:	2001      	movmi	r0, #1
 80055fc:	600b      	strmi	r3, [r1, #0]
 80055fe:	bf5c      	itt	pl
 8005600:	600b      	strpl	r3, [r1, #0]
 8005602:	2002      	movpl	r0, #2
 8005604:	4770      	bx	lr
 8005606:	b298      	uxth	r0, r3
 8005608:	b9a8      	cbnz	r0, 8005636 <__lo0bits+0x52>
 800560a:	2010      	movs	r0, #16
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005612:	bf04      	itt	eq
 8005614:	0a1b      	lsreq	r3, r3, #8
 8005616:	3008      	addeq	r0, #8
 8005618:	071a      	lsls	r2, r3, #28
 800561a:	bf04      	itt	eq
 800561c:	091b      	lsreq	r3, r3, #4
 800561e:	3004      	addeq	r0, #4
 8005620:	079a      	lsls	r2, r3, #30
 8005622:	bf04      	itt	eq
 8005624:	089b      	lsreq	r3, r3, #2
 8005626:	3002      	addeq	r0, #2
 8005628:	07da      	lsls	r2, r3, #31
 800562a:	d402      	bmi.n	8005632 <__lo0bits+0x4e>
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	d006      	beq.n	800563e <__lo0bits+0x5a>
 8005630:	3001      	adds	r0, #1
 8005632:	600b      	str	r3, [r1, #0]
 8005634:	4770      	bx	lr
 8005636:	4610      	mov	r0, r2
 8005638:	e7e9      	b.n	800560e <__lo0bits+0x2a>
 800563a:	2000      	movs	r0, #0
 800563c:	4770      	bx	lr
 800563e:	2020      	movs	r0, #32
 8005640:	4770      	bx	lr

08005642 <__i2b>:
 8005642:	b510      	push	{r4, lr}
 8005644:	460c      	mov	r4, r1
 8005646:	2101      	movs	r1, #1
 8005648:	f7ff ff27 	bl	800549a <_Balloc>
 800564c:	2201      	movs	r2, #1
 800564e:	6144      	str	r4, [r0, #20]
 8005650:	6102      	str	r2, [r0, #16]
 8005652:	bd10      	pop	{r4, pc}

08005654 <__multiply>:
 8005654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	4614      	mov	r4, r2
 800565a:	690a      	ldr	r2, [r1, #16]
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	4688      	mov	r8, r1
 8005660:	429a      	cmp	r2, r3
 8005662:	bfbe      	ittt	lt
 8005664:	460b      	movlt	r3, r1
 8005666:	46a0      	movlt	r8, r4
 8005668:	461c      	movlt	r4, r3
 800566a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800566e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005676:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800567a:	eb07 0609 	add.w	r6, r7, r9
 800567e:	42b3      	cmp	r3, r6
 8005680:	bfb8      	it	lt
 8005682:	3101      	addlt	r1, #1
 8005684:	f7ff ff09 	bl	800549a <_Balloc>
 8005688:	f100 0514 	add.w	r5, r0, #20
 800568c:	462b      	mov	r3, r5
 800568e:	2200      	movs	r2, #0
 8005690:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005694:	4573      	cmp	r3, lr
 8005696:	d316      	bcc.n	80056c6 <__multiply+0x72>
 8005698:	f104 0214 	add.w	r2, r4, #20
 800569c:	f108 0114 	add.w	r1, r8, #20
 80056a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80056a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	9b00      	ldr	r3, [sp, #0]
 80056ac:	9201      	str	r2, [sp, #4]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d80c      	bhi.n	80056cc <__multiply+0x78>
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	dd03      	ble.n	80056be <__multiply+0x6a>
 80056b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d05d      	beq.n	800577a <__multiply+0x126>
 80056be:	6106      	str	r6, [r0, #16]
 80056c0:	b003      	add	sp, #12
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	f843 2b04 	str.w	r2, [r3], #4
 80056ca:	e7e3      	b.n	8005694 <__multiply+0x40>
 80056cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80056d0:	f1bb 0f00 	cmp.w	fp, #0
 80056d4:	d023      	beq.n	800571e <__multiply+0xca>
 80056d6:	4689      	mov	r9, r1
 80056d8:	46ac      	mov	ip, r5
 80056da:	f04f 0800 	mov.w	r8, #0
 80056de:	f859 4b04 	ldr.w	r4, [r9], #4
 80056e2:	f8dc a000 	ldr.w	sl, [ip]
 80056e6:	b2a3      	uxth	r3, r4
 80056e8:	fa1f fa8a 	uxth.w	sl, sl
 80056ec:	fb0b a303 	mla	r3, fp, r3, sl
 80056f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80056f4:	f8dc 4000 	ldr.w	r4, [ip]
 80056f8:	4443      	add	r3, r8
 80056fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80056fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8005702:	46e2      	mov	sl, ip
 8005704:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800570e:	454f      	cmp	r7, r9
 8005710:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005714:	f84a 3b04 	str.w	r3, [sl], #4
 8005718:	d82b      	bhi.n	8005772 <__multiply+0x11e>
 800571a:	f8cc 8004 	str.w	r8, [ip, #4]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	3204      	adds	r2, #4
 8005722:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005726:	f1ba 0f00 	cmp.w	sl, #0
 800572a:	d020      	beq.n	800576e <__multiply+0x11a>
 800572c:	4689      	mov	r9, r1
 800572e:	46a8      	mov	r8, r5
 8005730:	f04f 0b00 	mov.w	fp, #0
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	f8b9 c000 	ldrh.w	ip, [r9]
 800573a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800573e:	b29b      	uxth	r3, r3
 8005740:	fb0a 440c 	mla	r4, sl, ip, r4
 8005744:	46c4      	mov	ip, r8
 8005746:	445c      	add	r4, fp
 8005748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800574c:	f84c 3b04 	str.w	r3, [ip], #4
 8005750:	f859 3b04 	ldr.w	r3, [r9], #4
 8005754:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	fb0a b303 	mla	r3, sl, r3, fp
 800575e:	454f      	cmp	r7, r9
 8005760:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005764:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005768:	d805      	bhi.n	8005776 <__multiply+0x122>
 800576a:	f8c8 3004 	str.w	r3, [r8, #4]
 800576e:	3504      	adds	r5, #4
 8005770:	e79b      	b.n	80056aa <__multiply+0x56>
 8005772:	46d4      	mov	ip, sl
 8005774:	e7b3      	b.n	80056de <__multiply+0x8a>
 8005776:	46e0      	mov	r8, ip
 8005778:	e7dd      	b.n	8005736 <__multiply+0xe2>
 800577a:	3e01      	subs	r6, #1
 800577c:	e799      	b.n	80056b2 <__multiply+0x5e>
	...

08005780 <__pow5mult>:
 8005780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005784:	4615      	mov	r5, r2
 8005786:	f012 0203 	ands.w	r2, r2, #3
 800578a:	4606      	mov	r6, r0
 800578c:	460f      	mov	r7, r1
 800578e:	d007      	beq.n	80057a0 <__pow5mult+0x20>
 8005790:	4c21      	ldr	r4, [pc, #132]	; (8005818 <__pow5mult+0x98>)
 8005792:	3a01      	subs	r2, #1
 8005794:	2300      	movs	r3, #0
 8005796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800579a:	f7ff fec9 	bl	8005530 <__multadd>
 800579e:	4607      	mov	r7, r0
 80057a0:	10ad      	asrs	r5, r5, #2
 80057a2:	d035      	beq.n	8005810 <__pow5mult+0x90>
 80057a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057a6:	b93c      	cbnz	r4, 80057b8 <__pow5mult+0x38>
 80057a8:	2010      	movs	r0, #16
 80057aa:	f7ff fe63 	bl	8005474 <malloc>
 80057ae:	6270      	str	r0, [r6, #36]	; 0x24
 80057b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057b4:	6004      	str	r4, [r0, #0]
 80057b6:	60c4      	str	r4, [r0, #12]
 80057b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057c0:	b94c      	cbnz	r4, 80057d6 <__pow5mult+0x56>
 80057c2:	f240 2171 	movw	r1, #625	; 0x271
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff ff3b 	bl	8005642 <__i2b>
 80057cc:	2300      	movs	r3, #0
 80057ce:	4604      	mov	r4, r0
 80057d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	07eb      	lsls	r3, r5, #31
 80057dc:	d50a      	bpl.n	80057f4 <__pow5mult+0x74>
 80057de:	4639      	mov	r1, r7
 80057e0:	4622      	mov	r2, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff ff36 	bl	8005654 <__multiply>
 80057e8:	4681      	mov	r9, r0
 80057ea:	4639      	mov	r1, r7
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff fe88 	bl	8005502 <_Bfree>
 80057f2:	464f      	mov	r7, r9
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	d00b      	beq.n	8005810 <__pow5mult+0x90>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	b938      	cbnz	r0, 800580c <__pow5mult+0x8c>
 80057fc:	4622      	mov	r2, r4
 80057fe:	4621      	mov	r1, r4
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff ff27 	bl	8005654 <__multiply>
 8005806:	6020      	str	r0, [r4, #0]
 8005808:	f8c0 8000 	str.w	r8, [r0]
 800580c:	4604      	mov	r4, r0
 800580e:	e7e4      	b.n	80057da <__pow5mult+0x5a>
 8005810:	4638      	mov	r0, r7
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	bf00      	nop
 8005818:	08005cc8 	.word	0x08005cc8

0800581c <__lshift>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	460c      	mov	r4, r1
 8005822:	4607      	mov	r7, r0
 8005824:	4616      	mov	r6, r2
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800582c:	eb0a 0903 	add.w	r9, sl, r3
 8005830:	6849      	ldr	r1, [r1, #4]
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	f109 0501 	add.w	r5, r9, #1
 8005838:	42ab      	cmp	r3, r5
 800583a:	db32      	blt.n	80058a2 <__lshift+0x86>
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff fe2c 	bl	800549a <_Balloc>
 8005842:	2300      	movs	r3, #0
 8005844:	4680      	mov	r8, r0
 8005846:	461a      	mov	r2, r3
 8005848:	f100 0114 	add.w	r1, r0, #20
 800584c:	4553      	cmp	r3, sl
 800584e:	db2b      	blt.n	80058a8 <__lshift+0x8c>
 8005850:	6920      	ldr	r0, [r4, #16]
 8005852:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005856:	f104 0314 	add.w	r3, r4, #20
 800585a:	f016 021f 	ands.w	r2, r6, #31
 800585e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005862:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005866:	d025      	beq.n	80058b4 <__lshift+0x98>
 8005868:	2000      	movs	r0, #0
 800586a:	f1c2 0e20 	rsb	lr, r2, #32
 800586e:	468a      	mov	sl, r1
 8005870:	681e      	ldr	r6, [r3, #0]
 8005872:	4096      	lsls	r6, r2
 8005874:	4330      	orrs	r0, r6
 8005876:	f84a 0b04 	str.w	r0, [sl], #4
 800587a:	f853 0b04 	ldr.w	r0, [r3], #4
 800587e:	459c      	cmp	ip, r3
 8005880:	fa20 f00e 	lsr.w	r0, r0, lr
 8005884:	d814      	bhi.n	80058b0 <__lshift+0x94>
 8005886:	6048      	str	r0, [r1, #4]
 8005888:	b108      	cbz	r0, 800588e <__lshift+0x72>
 800588a:	f109 0502 	add.w	r5, r9, #2
 800588e:	3d01      	subs	r5, #1
 8005890:	4638      	mov	r0, r7
 8005892:	f8c8 5010 	str.w	r5, [r8, #16]
 8005896:	4621      	mov	r1, r4
 8005898:	f7ff fe33 	bl	8005502 <_Bfree>
 800589c:	4640      	mov	r0, r8
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	3101      	adds	r1, #1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	e7c7      	b.n	8005838 <__lshift+0x1c>
 80058a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058ac:	3301      	adds	r3, #1
 80058ae:	e7cd      	b.n	800584c <__lshift+0x30>
 80058b0:	4651      	mov	r1, sl
 80058b2:	e7dc      	b.n	800586e <__lshift+0x52>
 80058b4:	3904      	subs	r1, #4
 80058b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ba:	459c      	cmp	ip, r3
 80058bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80058c0:	d8f9      	bhi.n	80058b6 <__lshift+0x9a>
 80058c2:	e7e4      	b.n	800588e <__lshift+0x72>

080058c4 <__mcmp>:
 80058c4:	6903      	ldr	r3, [r0, #16]
 80058c6:	690a      	ldr	r2, [r1, #16]
 80058c8:	b530      	push	{r4, r5, lr}
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	d10c      	bne.n	80058e8 <__mcmp+0x24>
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	3014      	adds	r0, #20
 80058d2:	3114      	adds	r1, #20
 80058d4:	1884      	adds	r4, r0, r2
 80058d6:	4411      	add	r1, r2
 80058d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058e0:	4295      	cmp	r5, r2
 80058e2:	d003      	beq.n	80058ec <__mcmp+0x28>
 80058e4:	d305      	bcc.n	80058f2 <__mcmp+0x2e>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd30      	pop	{r4, r5, pc}
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d3f3      	bcc.n	80058d8 <__mcmp+0x14>
 80058f0:	e7fa      	b.n	80058e8 <__mcmp+0x24>
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
 80058f6:	e7f7      	b.n	80058e8 <__mcmp+0x24>

080058f8 <__mdiff>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	460d      	mov	r5, r1
 80058fe:	4607      	mov	r7, r0
 8005900:	4611      	mov	r1, r2
 8005902:	4628      	mov	r0, r5
 8005904:	4614      	mov	r4, r2
 8005906:	f7ff ffdd 	bl	80058c4 <__mcmp>
 800590a:	1e06      	subs	r6, r0, #0
 800590c:	d108      	bne.n	8005920 <__mdiff+0x28>
 800590e:	4631      	mov	r1, r6
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff fdc2 	bl	800549a <_Balloc>
 8005916:	2301      	movs	r3, #1
 8005918:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	bfa4      	itt	ge
 8005922:	4623      	movge	r3, r4
 8005924:	462c      	movge	r4, r5
 8005926:	4638      	mov	r0, r7
 8005928:	6861      	ldr	r1, [r4, #4]
 800592a:	bfa6      	itte	ge
 800592c:	461d      	movge	r5, r3
 800592e:	2600      	movge	r6, #0
 8005930:	2601      	movlt	r6, #1
 8005932:	f7ff fdb2 	bl	800549a <_Balloc>
 8005936:	f04f 0e00 	mov.w	lr, #0
 800593a:	60c6      	str	r6, [r0, #12]
 800593c:	692b      	ldr	r3, [r5, #16]
 800593e:	6926      	ldr	r6, [r4, #16]
 8005940:	f104 0214 	add.w	r2, r4, #20
 8005944:	f105 0914 	add.w	r9, r5, #20
 8005948:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800594c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005950:	f100 0114 	add.w	r1, r0, #20
 8005954:	f852 ab04 	ldr.w	sl, [r2], #4
 8005958:	f859 5b04 	ldr.w	r5, [r9], #4
 800595c:	fa1f f38a 	uxth.w	r3, sl
 8005960:	4473      	add	r3, lr
 8005962:	b2ac      	uxth	r4, r5
 8005964:	1b1b      	subs	r3, r3, r4
 8005966:	0c2c      	lsrs	r4, r5, #16
 8005968:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800596c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005976:	45c8      	cmp	r8, r9
 8005978:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800597c:	4694      	mov	ip, r2
 800597e:	f841 4b04 	str.w	r4, [r1], #4
 8005982:	d8e7      	bhi.n	8005954 <__mdiff+0x5c>
 8005984:	45bc      	cmp	ip, r7
 8005986:	d304      	bcc.n	8005992 <__mdiff+0x9a>
 8005988:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800598c:	b183      	cbz	r3, 80059b0 <__mdiff+0xb8>
 800598e:	6106      	str	r6, [r0, #16]
 8005990:	e7c4      	b.n	800591c <__mdiff+0x24>
 8005992:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005996:	b2a2      	uxth	r2, r4
 8005998:	4472      	add	r2, lr
 800599a:	1413      	asrs	r3, r2, #16
 800599c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80059a0:	b292      	uxth	r2, r2
 80059a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80059aa:	f841 2b04 	str.w	r2, [r1], #4
 80059ae:	e7e9      	b.n	8005984 <__mdiff+0x8c>
 80059b0:	3e01      	subs	r6, #1
 80059b2:	e7e9      	b.n	8005988 <__mdiff+0x90>

080059b4 <__d2b>:
 80059b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80059b8:	461c      	mov	r4, r3
 80059ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80059be:	2101      	movs	r1, #1
 80059c0:	4690      	mov	r8, r2
 80059c2:	f7ff fd6a 	bl	800549a <_Balloc>
 80059c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80059ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80059ce:	4607      	mov	r7, r0
 80059d0:	bb34      	cbnz	r4, 8005a20 <__d2b+0x6c>
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	f1b8 0200 	subs.w	r2, r8, #0
 80059d8:	d027      	beq.n	8005a2a <__d2b+0x76>
 80059da:	a802      	add	r0, sp, #8
 80059dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80059e0:	f7ff fe00 	bl	80055e4 <__lo0bits>
 80059e4:	9900      	ldr	r1, [sp, #0]
 80059e6:	b1f0      	cbz	r0, 8005a26 <__d2b+0x72>
 80059e8:	9a01      	ldr	r2, [sp, #4]
 80059ea:	f1c0 0320 	rsb	r3, r0, #32
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	430b      	orrs	r3, r1
 80059f4:	40c2      	lsrs	r2, r0
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	9201      	str	r2, [sp, #4]
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf14      	ite	ne
 8005a00:	2102      	movne	r1, #2
 8005a02:	2101      	moveq	r1, #1
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	6139      	str	r1, [r7, #16]
 8005a08:	b1c4      	cbz	r4, 8005a3c <__d2b+0x88>
 8005a0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a0e:	4404      	add	r4, r0
 8005a10:	6034      	str	r4, [r6, #0]
 8005a12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a16:	6028      	str	r0, [r5, #0]
 8005a18:	4638      	mov	r0, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a24:	e7d5      	b.n	80059d2 <__d2b+0x1e>
 8005a26:	6179      	str	r1, [r7, #20]
 8005a28:	e7e7      	b.n	80059fa <__d2b+0x46>
 8005a2a:	a801      	add	r0, sp, #4
 8005a2c:	f7ff fdda 	bl	80055e4 <__lo0bits>
 8005a30:	2101      	movs	r1, #1
 8005a32:	9b01      	ldr	r3, [sp, #4]
 8005a34:	6139      	str	r1, [r7, #16]
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	3020      	adds	r0, #32
 8005a3a:	e7e5      	b.n	8005a08 <__d2b+0x54>
 8005a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a44:	6030      	str	r0, [r6, #0]
 8005a46:	6918      	ldr	r0, [r3, #16]
 8005a48:	f7ff fdad 	bl	80055a6 <__hi0bits>
 8005a4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a50:	e7e1      	b.n	8005a16 <__d2b+0x62>

08005a52 <_calloc_r>:
 8005a52:	b538      	push	{r3, r4, r5, lr}
 8005a54:	fb02 f401 	mul.w	r4, r2, r1
 8005a58:	4621      	mov	r1, r4
 8005a5a:	f000 f809 	bl	8005a70 <_malloc_r>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	b118      	cbz	r0, 8005a6a <_calloc_r+0x18>
 8005a62:	4622      	mov	r2, r4
 8005a64:	2100      	movs	r1, #0
 8005a66:	f7fe fb6f 	bl	8004148 <memset>
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005a70 <_malloc_r>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	1ccd      	adds	r5, r1, #3
 8005a74:	f025 0503 	bic.w	r5, r5, #3
 8005a78:	3508      	adds	r5, #8
 8005a7a:	2d0c      	cmp	r5, #12
 8005a7c:	bf38      	it	cc
 8005a7e:	250c      	movcc	r5, #12
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	4606      	mov	r6, r0
 8005a84:	db01      	blt.n	8005a8a <_malloc_r+0x1a>
 8005a86:	42a9      	cmp	r1, r5
 8005a88:	d903      	bls.n	8005a92 <_malloc_r+0x22>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	6033      	str	r3, [r6, #0]
 8005a8e:	2000      	movs	r0, #0
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	f000 f869 	bl	8005b68 <__malloc_lock>
 8005a96:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <_malloc_r+0xac>)
 8005a98:	6814      	ldr	r4, [r2, #0]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	b991      	cbnz	r1, 8005ac4 <_malloc_r+0x54>
 8005a9e:	4c20      	ldr	r4, [pc, #128]	; (8005b20 <_malloc_r+0xb0>)
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	b91b      	cbnz	r3, 8005aac <_malloc_r+0x3c>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 f83d 	bl	8005b24 <_sbrk_r>
 8005aaa:	6020      	str	r0, [r4, #0]
 8005aac:	4629      	mov	r1, r5
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f000 f838 	bl	8005b24 <_sbrk_r>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d124      	bne.n	8005b02 <_malloc_r+0x92>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	4630      	mov	r0, r6
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	f000 f854 	bl	8005b6a <__malloc_unlock>
 8005ac2:	e7e4      	b.n	8005a8e <_malloc_r+0x1e>
 8005ac4:	680b      	ldr	r3, [r1, #0]
 8005ac6:	1b5b      	subs	r3, r3, r5
 8005ac8:	d418      	bmi.n	8005afc <_malloc_r+0x8c>
 8005aca:	2b0b      	cmp	r3, #11
 8005acc:	d90f      	bls.n	8005aee <_malloc_r+0x7e>
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	18cc      	adds	r4, r1, r3
 8005ad2:	50cd      	str	r5, [r1, r3]
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 f848 	bl	8005b6a <__malloc_unlock>
 8005ada:	f104 000b 	add.w	r0, r4, #11
 8005ade:	1d23      	adds	r3, r4, #4
 8005ae0:	f020 0007 	bic.w	r0, r0, #7
 8005ae4:	1ac3      	subs	r3, r0, r3
 8005ae6:	d0d3      	beq.n	8005a90 <_malloc_r+0x20>
 8005ae8:	425a      	negs	r2, r3
 8005aea:	50e2      	str	r2, [r4, r3]
 8005aec:	e7d0      	b.n	8005a90 <_malloc_r+0x20>
 8005aee:	684b      	ldr	r3, [r1, #4]
 8005af0:	428c      	cmp	r4, r1
 8005af2:	bf16      	itet	ne
 8005af4:	6063      	strne	r3, [r4, #4]
 8005af6:	6013      	streq	r3, [r2, #0]
 8005af8:	460c      	movne	r4, r1
 8005afa:	e7eb      	b.n	8005ad4 <_malloc_r+0x64>
 8005afc:	460c      	mov	r4, r1
 8005afe:	6849      	ldr	r1, [r1, #4]
 8005b00:	e7cc      	b.n	8005a9c <_malloc_r+0x2c>
 8005b02:	1cc4      	adds	r4, r0, #3
 8005b04:	f024 0403 	bic.w	r4, r4, #3
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d005      	beq.n	8005b18 <_malloc_r+0xa8>
 8005b0c:	1a21      	subs	r1, r4, r0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 f808 	bl	8005b24 <_sbrk_r>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d0cf      	beq.n	8005ab8 <_malloc_r+0x48>
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	e7db      	b.n	8005ad4 <_malloc_r+0x64>
 8005b1c:	20000228 	.word	0x20000228
 8005b20:	2000022c 	.word	0x2000022c

08005b24 <_sbrk_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	2300      	movs	r3, #0
 8005b28:	4c05      	ldr	r4, [pc, #20]	; (8005b40 <_sbrk_r+0x1c>)
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	f7fe f824 	bl	8003b7c <_sbrk>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_sbrk_r+0x1a>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_sbrk_r+0x1a>
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20000390 	.word	0x20000390

08005b44 <__ascii_mbtowc>:
 8005b44:	b082      	sub	sp, #8
 8005b46:	b901      	cbnz	r1, 8005b4a <__ascii_mbtowc+0x6>
 8005b48:	a901      	add	r1, sp, #4
 8005b4a:	b142      	cbz	r2, 8005b5e <__ascii_mbtowc+0x1a>
 8005b4c:	b14b      	cbz	r3, 8005b62 <__ascii_mbtowc+0x1e>
 8005b4e:	7813      	ldrb	r3, [r2, #0]
 8005b50:	600b      	str	r3, [r1, #0]
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	1c10      	adds	r0, r2, #0
 8005b56:	bf18      	it	ne
 8005b58:	2001      	movne	r0, #1
 8005b5a:	b002      	add	sp, #8
 8005b5c:	4770      	bx	lr
 8005b5e:	4610      	mov	r0, r2
 8005b60:	e7fb      	b.n	8005b5a <__ascii_mbtowc+0x16>
 8005b62:	f06f 0001 	mvn.w	r0, #1
 8005b66:	e7f8      	b.n	8005b5a <__ascii_mbtowc+0x16>

08005b68 <__malloc_lock>:
 8005b68:	4770      	bx	lr

08005b6a <__malloc_unlock>:
 8005b6a:	4770      	bx	lr

08005b6c <__ascii_wctomb>:
 8005b6c:	b149      	cbz	r1, 8005b82 <__ascii_wctomb+0x16>
 8005b6e:	2aff      	cmp	r2, #255	; 0xff
 8005b70:	bf8b      	itete	hi
 8005b72:	238a      	movhi	r3, #138	; 0x8a
 8005b74:	700a      	strbls	r2, [r1, #0]
 8005b76:	6003      	strhi	r3, [r0, #0]
 8005b78:	2001      	movls	r0, #1
 8005b7a:	bf88      	it	hi
 8005b7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b80:	4770      	bx	lr
 8005b82:	4608      	mov	r0, r1
 8005b84:	4770      	bx	lr
	...

08005b88 <_init>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr

08005b94 <_fini>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr
