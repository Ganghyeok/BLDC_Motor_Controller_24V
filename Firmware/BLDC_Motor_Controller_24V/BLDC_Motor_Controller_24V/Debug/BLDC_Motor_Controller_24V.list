
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b24  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  08007c58  08007c58  00017c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008710  08008710  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008710  08008710  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008718  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001d8  080088f0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  080088f0  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da7  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000200d  00000000  00000000  00031fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  00033fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a31f  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000868c  00000000  00000000  0003edf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002aefe  00000000  00000000  00047483  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002108  00000000  00000000  000723fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	08007c3c 	.word	0x08007c3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	08007c3c 	.word	0x08007c3c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <DMA_Init+0xbc>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d80f      	bhi.n	800101c <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <DMA_Init+0xc0>)
 8001004:	4413      	add	r3, r2
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <DMA_Init+0xc4>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	009a      	lsls	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <DMA_Init+0xc8>)
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
 800101a:	e00e      	b.n	800103a <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <DMA_Init+0xcc>)
 8001024:	4413      	add	r3, r2
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <DMA_Init+0xc4>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	009a      	lsls	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <DMA_Init+0xd0>)
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001050:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001054:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 800105e:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800106a:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001076:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40020407 	.word	0x40020407
 80010a4:	bffdfff8 	.word	0xbffdfff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40020000 	.word	0x40020000
 80010b0:	bffdfbf8 	.word	0xbffdfbf8
 80010b4:	40020400 	.word	0x40020400

080010b8 <DMA_SetConfig>:


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d108      	bne.n	80010f8 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 80010f6:	e007      	b.n	8001108 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ffbe 	bl	80010b8 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0204 	bic.w	r2, r2, #4
 800114a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2104      	movs	r1, #4
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80bf 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80bb 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b99      	ldr	r3, [pc, #612]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d958      	bls.n	800126a <DMA_IRQ_Handling+0xf6>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a97      	ldr	r2, [pc, #604]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d04f      	beq.n	8001262 <DMA_IRQ_Handling+0xee>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d048      	beq.n	800125e <DMA_IRQ_Handling+0xea>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a94      	ldr	r2, [pc, #592]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d040      	beq.n	8001258 <DMA_IRQ_Handling+0xe4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a93      	ldr	r2, [pc, #588]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d038      	beq.n	8001252 <DMA_IRQ_Handling+0xde>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a91      	ldr	r2, [pc, #580]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d030      	beq.n	800124c <DMA_IRQ_Handling+0xd8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a90      	ldr	r2, [pc, #576]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d028      	beq.n	8001246 <DMA_IRQ_Handling+0xd2>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a87      	ldr	r2, [pc, #540]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d020      	beq.n	8001240 <DMA_IRQ_Handling+0xcc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8c      	ldr	r2, [pc, #560]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d019      	beq.n	800123c <DMA_IRQ_Handling+0xc8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d012      	beq.n	8001238 <DMA_IRQ_Handling+0xc4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a89      	ldr	r2, [pc, #548]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00a      	beq.n	8001232 <DMA_IRQ_Handling+0xbe>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a87      	ldr	r2, [pc, #540]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d102      	bne.n	800122c <DMA_IRQ_Handling+0xb8>
 8001226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122a:	e01b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800122c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001230:	e018      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	e015      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	e013      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800123c:	2304      	movs	r3, #4
 800123e:	e011      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001244:	e00e      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	e00b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800124c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001250:	e008      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001256:	e005      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	e002      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800125e:	2340      	movs	r3, #64	; 0x40
 8001260:	e000      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001262:	2304      	movs	r3, #4
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001266:	6053      	str	r3, [r2, #4]
 8001268:	e057      	b.n	800131a <DMA_IRQ_Handling+0x1a6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6b      	ldr	r2, [pc, #428]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d04f      	beq.n	8001314 <DMA_IRQ_Handling+0x1a0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d048      	beq.n	8001310 <DMA_IRQ_Handling+0x19c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a68      	ldr	r2, [pc, #416]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d040      	beq.n	800130a <DMA_IRQ_Handling+0x196>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a66      	ldr	r2, [pc, #408]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d038      	beq.n	8001304 <DMA_IRQ_Handling+0x190>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a65      	ldr	r2, [pc, #404]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d030      	beq.n	80012fe <DMA_IRQ_Handling+0x18a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a63      	ldr	r2, [pc, #396]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d028      	beq.n	80012f8 <DMA_IRQ_Handling+0x184>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5b      	ldr	r2, [pc, #364]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d020      	beq.n	80012f2 <DMA_IRQ_Handling+0x17e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <DMA_IRQ_Handling+0x17a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d012      	beq.n	80012ea <DMA_IRQ_Handling+0x176>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00a      	beq.n	80012e4 <DMA_IRQ_Handling+0x170>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d102      	bne.n	80012de <DMA_IRQ_Handling+0x16a>
 80012d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012dc:	e01b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012e2:	e018      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	e015      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	e013      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e011      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012f6:	e00e      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fc:	e00b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001302:	e008      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001308:	e005      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	e002      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	e000      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001314:	2304      	movs	r3, #4
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <DMA_IRQ_Handling+0x2d4>)
 8001318:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2102      	movs	r1, #2
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80dd 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80d9 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d972      	bls.n	800144c <DMA_IRQ_Handling+0x2d8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d04f      	beq.n	8001410 <DMA_IRQ_Handling+0x29c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d048      	beq.n	800140c <DMA_IRQ_Handling+0x298>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d040      	beq.n	8001406 <DMA_IRQ_Handling+0x292>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d038      	beq.n	8001400 <DMA_IRQ_Handling+0x28c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d030      	beq.n	80013fa <DMA_IRQ_Handling+0x286>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d028      	beq.n	80013f4 <DMA_IRQ_Handling+0x280>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d020      	beq.n	80013ee <DMA_IRQ_Handling+0x27a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <DMA_IRQ_Handling+0x276>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d012      	beq.n	80013e6 <DMA_IRQ_Handling+0x272>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00a      	beq.n	80013e0 <DMA_IRQ_Handling+0x26c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <DMA_IRQ_Handling+0x266>
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	e01b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	e018      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	e015      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e6:	2320      	movs	r3, #32
 80013e8:	e013      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e011      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f2:	e00e      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f8:	e00b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	e008      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	e005      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	e002      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 800140c:	2320      	movs	r3, #32
 800140e:	e000      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001410:	2302      	movs	r3, #2
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001414:	6053      	str	r3, [r2, #4]
 8001416:	e071      	b.n	80014fc <DMA_IRQ_Handling+0x388>
 8001418:	40020080 	.word	0x40020080
 800141c:	40020008 	.word	0x40020008
 8001420:	4002001c 	.word	0x4002001c
 8001424:	40020030 	.word	0x40020030
 8001428:	40020044 	.word	0x40020044
 800142c:	40020058 	.word	0x40020058
 8001430:	4002006c 	.word	0x4002006c
 8001434:	40020408 	.word	0x40020408
 8001438:	4002041c 	.word	0x4002041c
 800143c:	40020430 	.word	0x40020430
 8001440:	40020444 	.word	0x40020444
 8001444:	40020400 	.word	0x40020400
 8001448:	40020000 	.word	0x40020000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a9a      	ldr	r2, [pc, #616]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d04f      	beq.n	80014f6 <DMA_IRQ_Handling+0x382>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a99      	ldr	r2, [pc, #612]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d048      	beq.n	80014f2 <DMA_IRQ_Handling+0x37e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a97      	ldr	r2, [pc, #604]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d040      	beq.n	80014ec <DMA_IRQ_Handling+0x378>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a96      	ldr	r2, [pc, #600]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d038      	beq.n	80014e6 <DMA_IRQ_Handling+0x372>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a94      	ldr	r2, [pc, #592]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d030      	beq.n	80014e0 <DMA_IRQ_Handling+0x36c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d028      	beq.n	80014da <DMA_IRQ_Handling+0x366>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d020      	beq.n	80014d4 <DMA_IRQ_Handling+0x360>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <DMA_IRQ_Handling+0x35c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a8e      	ldr	r2, [pc, #568]	; (80016dc <DMA_IRQ_Handling+0x568>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d012      	beq.n	80014cc <DMA_IRQ_Handling+0x358>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8d      	ldr	r2, [pc, #564]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00a      	beq.n	80014c6 <DMA_IRQ_Handling+0x352>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a8b      	ldr	r2, [pc, #556]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d102      	bne.n	80014c0 <DMA_IRQ_Handling+0x34c>
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	e01b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	e018      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	e015      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014cc:	2320      	movs	r3, #32
 80014ce:	e013      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e011      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d8:	e00e      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014de:	e00b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	e008      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	e005      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	e002      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f2:	2320      	movs	r3, #32
 80014f4:	e000      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f6:	2302      	movs	r3, #2
 80014f8:	4a7b      	ldr	r2, [pc, #492]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80014fa:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2108      	movs	r1, #8
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c3 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80bf 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d958      	bls.n	80015f2 <DMA_IRQ_Handling+0x47e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04f      	beq.n	80015ea <DMA_IRQ_Handling+0x476>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d048      	beq.n	80015e6 <DMA_IRQ_Handling+0x472>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d040      	beq.n	80015e0 <DMA_IRQ_Handling+0x46c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d038      	beq.n	80015da <DMA_IRQ_Handling+0x466>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d030      	beq.n	80015d4 <DMA_IRQ_Handling+0x460>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d028      	beq.n	80015ce <DMA_IRQ_Handling+0x45a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d020      	beq.n	80015c8 <DMA_IRQ_Handling+0x454>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <DMA_IRQ_Handling+0x450>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d012      	beq.n	80015c0 <DMA_IRQ_Handling+0x44c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00a      	beq.n	80015ba <DMA_IRQ_Handling+0x446>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d102      	bne.n	80015b4 <DMA_IRQ_Handling+0x440>
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	e01b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	e018      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e015      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e013      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e011      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015cc:	e00e      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d2:	e00b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	e008      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	e005      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	e002      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e6:	2310      	movs	r3, #16
 80015e8:	e000      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ea:	2301      	movs	r3, #1
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <DMA_IRQ_Handling+0x578>)
 80015ee:	6053      	str	r3, [r2, #4]
 80015f0:	e057      	b.n	80016a2 <DMA_IRQ_Handling+0x52e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <DMA_IRQ_Handling+0x548>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04f      	beq.n	800169c <DMA_IRQ_Handling+0x528>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d048      	beq.n	8001698 <DMA_IRQ_Handling+0x524>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d040      	beq.n	8001692 <DMA_IRQ_Handling+0x51e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d038      	beq.n	800168c <DMA_IRQ_Handling+0x518>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <DMA_IRQ_Handling+0x558>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d030      	beq.n	8001686 <DMA_IRQ_Handling+0x512>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d028      	beq.n	8001680 <DMA_IRQ_Handling+0x50c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d020      	beq.n	800167a <DMA_IRQ_Handling+0x506>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <DMA_IRQ_Handling+0x502>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a25      	ldr	r2, [pc, #148]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d012      	beq.n	8001672 <DMA_IRQ_Handling+0x4fe>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00a      	beq.n	800166c <DMA_IRQ_Handling+0x4f8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <DMA_IRQ_Handling+0x4f2>
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	e01b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	e018      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	e015      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001672:	2310      	movs	r3, #16
 8001674:	e013      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001676:	2301      	movs	r3, #1
 8001678:	e011      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167e:	e00e      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001684:	e00b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168a:	e008      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	e005      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	e002      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001698:	2310      	movs	r3, #16
 800169a:	e000      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800169c:	2301      	movs	r3, #1
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80016a0:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
	}
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020008 	.word	0x40020008
 80016c0:	4002001c 	.word	0x4002001c
 80016c4:	40020030 	.word	0x40020030
 80016c8:	40020044 	.word	0x40020044
 80016cc:	40020058 	.word	0x40020058
 80016d0:	4002006c 	.word	0x4002006c
 80016d4:	40020080 	.word	0x40020080
 80016d8:	40020408 	.word	0x40020408
 80016dc:	4002041c 	.word	0x4002041c
 80016e0:	40020430 	.word	0x40020430
 80016e4:	40020444 	.word	0x40020444
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a96      	ldr	r2, [pc, #600]	; (8001960 <GPIO_Init+0x270>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <GPIO_Init+0x28>
 800170a:	4b96      	ldr	r3, [pc, #600]	; (8001964 <GPIO_Init+0x274>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a95      	ldr	r2, [pc, #596]	; (8001964 <GPIO_Init+0x274>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	e03c      	b.n	8001792 <GPIO_Init+0xa2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a93      	ldr	r2, [pc, #588]	; (8001968 <GPIO_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d106      	bne.n	800172e <GPIO_Init+0x3e>
 8001720:	4b90      	ldr	r3, [pc, #576]	; (8001964 <GPIO_Init+0x274>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <GPIO_Init+0x274>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	e031      	b.n	8001792 <GPIO_Init+0xa2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a8e      	ldr	r2, [pc, #568]	; (800196c <GPIO_Init+0x27c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d106      	bne.n	8001744 <GPIO_Init+0x54>
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <GPIO_Init+0x274>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <GPIO_Init+0x274>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	e026      	b.n	8001792 <GPIO_Init+0xa2>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a8a      	ldr	r2, [pc, #552]	; (8001970 <GPIO_Init+0x280>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <GPIO_Init+0x6a>
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <GPIO_Init+0x274>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a84      	ldr	r2, [pc, #528]	; (8001964 <GPIO_Init+0x274>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	e01b      	b.n	8001792 <GPIO_Init+0xa2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a85      	ldr	r2, [pc, #532]	; (8001974 <GPIO_Init+0x284>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d106      	bne.n	8001770 <GPIO_Init+0x80>
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <GPIO_Init+0x274>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <GPIO_Init+0x274>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	e010      	b.n	8001792 <GPIO_Init+0xa2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a81      	ldr	r2, [pc, #516]	; (8001978 <GPIO_Init+0x288>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <GPIO_Init+0x96>
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <GPIO_Init+0x274>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a79      	ldr	r2, [pc, #484]	; (8001964 <GPIO_Init+0x274>)
 800177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	e005      	b.n	8001792 <GPIO_Init+0xa2>
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <GPIO_Init+0x274>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a76      	ldr	r2, [pc, #472]	; (8001964 <GPIO_Init+0x274>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	76fb      	strb	r3, [r7, #27]
 8001796:	e1d0      	b.n	8001b3a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	7efa      	ldrb	r2, [r7, #27]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 81c0 	beq.w	8001b2c <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d039      	beq.n	8001828 <GPIO_Init+0x138>
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d807      	bhi.n	80017c8 <GPIO_Init+0xd8>
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d016      	beq.n	80017ea <GPIO_Init+0xfa>
 80017bc:	2b01      	cmp	r3, #1
 80017be:	f0c0 8090 	bcc.w	80018e2 <GPIO_Init+0x1f2>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d04f      	beq.n	8001866 <GPIO_Init+0x176>
 80017c6:	e0bd      	b.n	8001944 <GPIO_Init+0x254>
 80017c8:	4a6c      	ldr	r2, [pc, #432]	; (800197c <GPIO_Init+0x28c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	f000 8089 	beq.w	80018e2 <GPIO_Init+0x1f2>
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <GPIO_Init+0x28c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <GPIO_Init+0xec>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d064      	beq.n	80018a4 <GPIO_Init+0x1b4>
 80017da:	e0b3      	b.n	8001944 <GPIO_Init+0x254>
 80017dc:	4a68      	ldr	r2, [pc, #416]	; (8001980 <GPIO_Init+0x290>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d07f      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e2:	4a68      	ldr	r2, [pc, #416]	; (8001984 <GPIO_Init+0x294>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d07c      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e8:	e0ac      	b.n	8001944 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d104      	bne.n	80017fc <GPIO_Init+0x10c>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e010      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d104      	bne.n	800180e <GPIO_Init+0x11e>
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	e007      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d103      	bne.n	800181e <GPIO_Init+0x12e>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f043 0303 	orr.w	r3, r3, #3
 800181c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f023 030c 	bic.w	r3, r3, #12
 8001824:	61fb      	str	r3, [r7, #28]


					break;
 8001826:	e08d      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d104      	bne.n	800183a <GPIO_Init+0x14a>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	e010      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d104      	bne.n	800184c <GPIO_Init+0x15c>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e007      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d103      	bne.n	800185c <GPIO_Init+0x16c>
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f043 0303 	orr.w	r3, r3, #3
 800185a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	61fb      	str	r3, [r7, #28]

					break;
 8001864:	e06e      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d104      	bne.n	8001878 <GPIO_Init+0x188>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e010      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <GPIO_Init+0x19a>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	e007      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d103      	bne.n	800189a <GPIO_Init+0x1aa>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f043 0303 	orr.w	r3, r3, #3
 8001898:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	61fb      	str	r3, [r7, #28]

					break;
 80018a2:	e04f      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d104      	bne.n	80018b6 <GPIO_Init+0x1c6>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e010      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <GPIO_Init+0x1d8>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e007      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d103      	bne.n	80018d8 <GPIO_Init+0x1e8>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f043 0303 	orr.w	r3, r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f043 030c 	orr.w	r3, r3, #12
 80018de:	61fb      	str	r3, [r7, #28]

					break;
 80018e0:	e030      	b.n	8001944 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80018fa:	e022      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10d      	bne.n	8001920 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	7efa      	ldrb	r2, [r7, #27]
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
					break;
 800191e:	e010      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d10c      	bne.n	8001942 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	7efa      	ldrb	r2, [r7, #27]
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	615a      	str	r2, [r3, #20]
					break;
 8001942:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001944:	7efb      	ldrb	r3, [r7, #27]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d801      	bhi.n	800194e <GPIO_Init+0x25e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <GPIO_Init+0x262>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d816      	bhi.n	8001988 <GPIO_Init+0x298>
 800195a:	7efb      	ldrb	r3, [r7, #27]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e016      	b.n	800198e <GPIO_Init+0x29e>
 8001960:	40010800 	.word	0x40010800
 8001964:	40021000 	.word	0x40021000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40011400 	.word	0x40011400
 8001974:	40011800 	.word	0x40011800
 8001978:	40011c00 	.word	0x40011c00
 800197c:	10110000 	.word	0x10110000
 8001980:	10210000 	.word	0x10210000
 8001984:	10310000 	.word	0x10310000
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b8 	beq.w	8001b2c <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <GPIO_Init+0x45c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <GPIO_Init+0x45c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 80019d0:	7efb      	ldrb	r3, [r7, #27]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 80019d8:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <GPIO_Init+0x460>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	210f      	movs	r1, #15
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4958      	ldr	r1, [pc, #352]	; (8001b54 <GPIO_Init+0x464>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d01f      	beq.n	8001a38 <GPIO_Init+0x348>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4957      	ldr	r1, [pc, #348]	; (8001b58 <GPIO_Init+0x468>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d019      	beq.n	8001a34 <GPIO_Init+0x344>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4956      	ldr	r1, [pc, #344]	; (8001b5c <GPIO_Init+0x46c>)
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d013      	beq.n	8001a30 <GPIO_Init+0x340>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4955      	ldr	r1, [pc, #340]	; (8001b60 <GPIO_Init+0x470>)
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d00d      	beq.n	8001a2c <GPIO_Init+0x33c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4954      	ldr	r1, [pc, #336]	; (8001b64 <GPIO_Init+0x474>)
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d007      	beq.n	8001a28 <GPIO_Init+0x338>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4953      	ldr	r1, [pc, #332]	; (8001b68 <GPIO_Init+0x478>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d101      	bne.n	8001a24 <GPIO_Init+0x334>
 8001a20:	2305      	movs	r3, #5
 8001a22:	e00a      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e008      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	0089      	lsls	r1, r1, #2
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	4943      	ldr	r1, [pc, #268]	; (8001b50 <GPIO_Init+0x460>)
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3302      	adds	r3, #2
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001a58:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <GPIO_Init+0x47c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	7efa      	ldrb	r2, [r7, #27]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4611      	mov	r1, r2
 8001a66:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <GPIO_Init+0x47c>)
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00a      	b.n	8001a84 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <GPIO_Init+0x47c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	7efa      	ldrb	r2, [r7, #27]
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	43d2      	mvns	r2, r2
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <GPIO_Init+0x47c>)
 8001a80:	400b      	ands	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <GPIO_Init+0x47c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	7efa      	ldrb	r2, [r7, #27]
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6053      	str	r3, [r2, #4]
 8001aa4:	e00a      	b.n	8001abc <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	7efa      	ldrb	r2, [r7, #27]
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	43d2      	mvns	r2, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <GPIO_Init+0x47c>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <GPIO_Init+0x47c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	7efa      	ldrb	r2, [r7, #27]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <GPIO_Init+0x47c>)
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]
 8001adc:	e00a      	b.n	8001af4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <GPIO_Init+0x47c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	7efa      	ldrb	r2, [r7, #27]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	43d2      	mvns	r2, r2
 8001aec:	4611      	mov	r1, r2
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <GPIO_Init+0x47c>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <GPIO_Init+0x47c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	7efa      	ldrb	r2, [r7, #27]
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <GPIO_Init+0x47c>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60d3      	str	r3, [r2, #12]
 8001b14:	e00a      	b.n	8001b2c <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <GPIO_Init+0x47c>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	7efa      	ldrb	r2, [r7, #27]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	43d2      	mvns	r2, r2
 8001b24:	4611      	mov	r1, r2
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <GPIO_Init+0x47c>)
 8001b28:	400b      	ands	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	3301      	adds	r3, #1
 8001b38:	76fb      	strb	r3, [r7, #27]
 8001b3a:	7efb      	ldrb	r3, [r7, #27]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	f67f ae2b 	bls.w	8001798 <GPIO_Init+0xa8>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40011800 	.word	0x40011800
 8001b68:	40011c00 	.word	0x40011c00
 8001b6c:	40010400 	.word	0x40010400

08001b70 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001b92:	e006      	b.n	8001ba2 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001bc0:	883b      	ldrh	r3, [r7, #0]
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <GPIO_WritePort>:


void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <GPIO_WriteData>:


void GPIO_WriteData(GPIO_TypeDef *GPIOx, uint16_t Data)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Data;
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60da      	str	r2, [r3, #12]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <EXTI_IRQHandling+0x34>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <EXTI_IRQHandling+0x34>)
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	4905      	ldr	r1, [pc, #20]	; (8001c58 <EXTI_IRQHandling+0x34>)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f003 fe5b 	bl	8005904 <EXTI_Callback>
	}
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010400 	.word	0x40010400

08001c5c <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d011      	beq.n	8001c94 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d10c      	bne.n	8001c94 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001c86:	bf00      	nop
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f9      	beq.n	8001c88 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d128      	bne.n	8001cee <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d105      	bne.n	8001cbe <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cbc:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001ce0:	bf00      	nop
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <RCC_OscConfig+0x9c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f9      	beq.n	8001ce2 <RCC_OscConfig+0x86>
	}
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40021000 	.word	0x40021000

08001cfc <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <RCC_ClockConfig+0x7c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	491a      	ldr	r1, [pc, #104]	; (8001d78 <RCC_ClockConfig+0x7c>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4916      	ldr	r1, [pc, #88]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4911      	ldr	r1, [pc, #68]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 0203 	bic.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4908      	ldr	r1, [pc, #32]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001d5e:	bf00      	nop
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <RCC_ClockConfig+0x80>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f9      	beq.n	8001d60 <RCC_ClockConfig+0x64>
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000

08001d80 <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <RCC_GetPLLOutputClock+0x70>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <RCC_GetPLLOutputClock+0x1e>
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <RCC_GetPLLOutputClock+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e020      	b.n	8001de4 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <RCC_GetPLLOutputClock+0x70>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <RCC_GetPLLOutputClock+0x74>)
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e001      	b.n	8001db8 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <RCC_GetPLLOutputClock+0x78>)
 8001db6:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <RCC_GetPLLOutputClock+0x70>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001dc6:	7abb      	ldrb	r3, [r7, #10]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d102      	bne.n	8001dd2 <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	72fb      	strb	r3, [r7, #11]
 8001dd0:	e002      	b.n	8001dd8 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001dd2:	7abb      	ldrb	r3, [r7, #10]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001dd8:	7afa      	ldrb	r2, [r7, #11]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200
 8001df8:	003d0900 	.word	0x003d0900

08001dfc <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b08d      	sub	sp, #52	; 0x34
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001e06:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <RCC_GetPCLKxValue+0x144>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <RCC_GetPCLKxValue+0x148>)
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e22:	e00d      	b.n	8001e40 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <RCC_GetPCLKxValue+0x148>)
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	e006      	b.n	8001e40 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001e32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001e3a:	f7ff ffa1 	bl	8001d80 <RCC_GetPLLOutputClock>
 8001e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <RCC_GetPCLKxValue+0x14c>)
 8001e42:	f107 0410 	add.w	r4, r7, #16
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <RCC_GetPCLKxValue+0x144>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d803      	bhi.n	8001e6c <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e6a:	e00a      	b.n	8001e82 <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e70:	3b08      	subs	r3, #8
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e78:	4413      	add	r3, r2
 8001e7a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <RCC_GetPCLKxValue+0x150>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11a      	bne.n	8001ec4 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <RCC_GetPCLKxValue+0x144>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d803      	bhi.n	8001eae <RCC_GetPCLKxValue+0xb2>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001eac:	e027      	b.n	8001efe <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001eb8:	4413      	add	r3, r2
 8001eba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ec2:	e01c      	b.n	8001efe <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d119      	bne.n	8001efe <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <RCC_GetPCLKxValue+0x144>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d803      	bhi.n	8001eea <RCC_GetPCLKxValue+0xee>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001ee8:	e009      	b.n	8001efe <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001efa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <RCC_GetPCLKxValue+0x11e>
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f18:	e00c      	b.n	8001f34 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d109      	bne.n	8001f34 <RCC_GetPCLKxValue+0x138>
 8001f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3734      	adds	r7, #52	; 0x34
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	08007c58 	.word	0x08007c58
 8001f4c:	08007c68 	.word	0x08007c68

08001f50 <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f002 fa33 	bl	80043c4 <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6c:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	ea42 0103 	orr.w	r1, r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0c1a      	lsrs	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f002 0204 	and.w	r2, r2, #4
 8001fdc:	605a      	str	r2, [r3, #4]
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d120      	bne.n	800203c <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <SPI_PeripheralClockControl+0xa4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d106      	bne.n	8002010 <SPI_PeripheralClockControl+0x28>
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800200c:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 800200e:	e038      	b.n	8002082 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <SPI_PeripheralClockControl+0xac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d106      	bne.n	8002026 <SPI_PeripheralClockControl+0x3e>
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 800201e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002022:	61d3      	str	r3, [r2, #28]
}
 8002024:	e02d      	b.n	8002082 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <SPI_PeripheralClockControl+0xb0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d129      	bne.n	8002082 <SPI_PeripheralClockControl+0x9a>
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002038:	61d3      	str	r3, [r2, #28]
}
 800203a:	e022      	b.n	8002082 <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11f      	bne.n	8002082 <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <SPI_PeripheralClockControl+0xa4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d106      	bne.n	8002058 <SPI_PeripheralClockControl+0x70>
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002054:	6193      	str	r3, [r2, #24]
}
 8002056:	e014      	b.n	8002082 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <SPI_PeripheralClockControl+0xac>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d106      	bne.n	800206e <SPI_PeripheralClockControl+0x86>
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206a:	61d3      	str	r3, [r2, #28]
}
 800206c:	e009      	b.n	8002082 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <SPI_PeripheralClockControl+0xb0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d105      	bne.n	8002082 <SPI_PeripheralClockControl+0x9a>
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SPI_PeripheralClockControl+0xa8>)
 800207c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002080:	61d3      	str	r3, [r2, #28]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40013000 	.word	0x40013000
 8002090:	40021000 	.word	0x40021000
 8002094:	40003800 	.word	0x40003800
 8002098:	40003c00 	.word	0x40003c00

0800209c <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7f1b      	ldrb	r3, [r3, #28]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fece 	bl	8003e54 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f81f 	bl	80020fc <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	771a      	strb	r2, [r3, #28]
 80020c4:	e000      	b.n	80020c8 <TIM_Base_Init+0x2c>
		return;
 80020c6:	bf00      	nop
}
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7f1b      	ldrb	r3, [r3, #28]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f001 fecf 	bl	8003e84 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f808 	bl	80020fc <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	771a      	strb	r2, [r3, #28]
 80020f2:	e000      	b.n	80020f6 <TIM_PWM_Init+0x28>
		return;
 80020f4:	bf00      	nop
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68d2      	ldr	r2, [r2, #12]
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6852      	ldr	r2, [r2, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6952      	ldr	r2, [r2, #20]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	615a      	str	r2, [r3, #20]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	f200 80d3 	bhi.w	8002322 <TIM_PWM_ConfigChannel+0x1ba>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <TIM_PWM_ConfigChannel+0x1c>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	080021b9 	.word	0x080021b9
 8002188:	08002323 	.word	0x08002323
 800218c:	08002323 	.word	0x08002323
 8002190:	08002323 	.word	0x08002323
 8002194:	08002211 	.word	0x08002211
 8002198:	08002323 	.word	0x08002323
 800219c:	08002323 	.word	0x08002323
 80021a0:	08002323 	.word	0x08002323
 80021a4:	0800226d 	.word	0x0800226d
 80021a8:	08002323 	.word	0x08002323
 80021ac:	08002323 	.word	0x08002323
 80021b0:	08002323 	.word	0x08002323
 80021b4:	080022c7 	.word	0x080022c7
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f023 0102 	bic.w	r1, r3, #2
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	6852      	ldr	r2, [r2, #4]
 80021fc:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0208 	orr.w	r2, r2, #8
 800220c:	619a      	str	r2, [r3, #24]

			break;
 800220e:	e089      	b.n	8002324 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0210 	bic.w	r2, r2, #16
 800221e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	021a      	lsls	r2, r3, #8
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f023 0120 	bic.w	r1, r3, #32
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	011a      	lsls	r2, r3, #4
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	6852      	ldr	r2, [r2, #4]
 8002258:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002268:	619a      	str	r2, [r3, #24]

			break;
 800226a:	e05b      	b.n	8002324 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227a:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	021a      	lsls	r2, r3, #8
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	61da      	str	r2, [r3, #28]

			break;
 80022c4:	e02e      	b.n	8002324 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022d4:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021a      	lsls	r2, r3, #8
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	031a      	lsls	r2, r3, #12
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	6852      	ldr	r2, [r2, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231e:	61da      	str	r2, [r3, #28]

			break;
 8002320:	e000      	b.n	8002324 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8002322:	bf00      	nop
	}
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop

08002330 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d157      	bne.n	80023f2 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <TIM_PeripheralClockControl+0x180>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d106      	bne.n	8002358 <TIM_PeripheralClockControl+0x28>
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002354:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002356:	e0a6      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d106      	bne.n	800236e <TIM_PeripheralClockControl+0x3e>
 8002360:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	4a53      	ldr	r2, [pc, #332]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	61d3      	str	r3, [r2, #28]
}
 800236c:	e09b      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <TIM_PeripheralClockControl+0x188>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d106      	bne.n	8002384 <TIM_PeripheralClockControl+0x54>
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	61d3      	str	r3, [r2, #28]
}
 8002382:	e090      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <TIM_PeripheralClockControl+0x18c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d106      	bne.n	800239a <TIM_PeripheralClockControl+0x6a>
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	61d3      	str	r3, [r2, #28]
}
 8002398:	e085      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <TIM_PeripheralClockControl+0x190>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d106      	bne.n	80023b0 <TIM_PeripheralClockControl+0x80>
 80023a2:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	61d3      	str	r3, [r2, #28]
}
 80023ae:	e07a      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a44      	ldr	r2, [pc, #272]	; (80024c4 <TIM_PeripheralClockControl+0x194>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d106      	bne.n	80023c6 <TIM_PeripheralClockControl+0x96>
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	61d3      	str	r3, [r2, #28]
}
 80023c4:	e06f      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <TIM_PeripheralClockControl+0x198>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d106      	bne.n	80023dc <TIM_PeripheralClockControl+0xac>
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023d4:	f043 0320 	orr.w	r3, r3, #32
 80023d8:	61d3      	str	r3, [r2, #28]
}
 80023da:	e064      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <TIM_PeripheralClockControl+0x19c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d160      	bne.n	80024a6 <TIM_PeripheralClockControl+0x176>
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a32      	ldr	r2, [pc, #200]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80023ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ee:	6193      	str	r3, [r2, #24]
}
 80023f0:	e059      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d156      	bne.n	80024a6 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a2d      	ldr	r2, [pc, #180]	; (80024b0 <TIM_PeripheralClockControl+0x180>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d106      	bne.n	800240e <TIM_PeripheralClockControl+0xde>
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800240a:	6193      	str	r3, [r2, #24]
}
 800240c:	e04b      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d106      	bne.n	8002424 <TIM_PeripheralClockControl+0xf4>
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	61d3      	str	r3, [r2, #28]
}
 8002422:	e040      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <TIM_PeripheralClockControl+0x188>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d106      	bne.n	800243a <TIM_PeripheralClockControl+0x10a>
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002432:	f023 0302 	bic.w	r3, r3, #2
 8002436:	61d3      	str	r3, [r2, #28]
}
 8002438:	e035      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <TIM_PeripheralClockControl+0x18c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d106      	bne.n	8002450 <TIM_PeripheralClockControl+0x120>
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	61d3      	str	r3, [r2, #28]
}
 800244e:	e02a      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <TIM_PeripheralClockControl+0x190>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <TIM_PeripheralClockControl+0x136>
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800245e:	f023 0308 	bic.w	r3, r3, #8
 8002462:	61d3      	str	r3, [r2, #28]
}
 8002464:	e01f      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <TIM_PeripheralClockControl+0x194>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d106      	bne.n	800247c <TIM_PeripheralClockControl+0x14c>
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002474:	f023 0310 	bic.w	r3, r3, #16
 8002478:	61d3      	str	r3, [r2, #28]
}
 800247a:	e014      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <TIM_PeripheralClockControl+0x198>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d106      	bne.n	8002492 <TIM_PeripheralClockControl+0x162>
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800248a:	f023 0320 	bic.w	r3, r3, #32
 800248e:	61d3      	str	r3, [r2, #28]
}
 8002490:	e009      	b.n	80024a6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <TIM_PeripheralClockControl+0x19c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d105      	bne.n	80024a6 <TIM_PeripheralClockControl+0x176>
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <TIM_PeripheralClockControl+0x184>)
 80024a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a4:	6193      	str	r3, [r2, #24]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40001000 	.word	0x40001000
 80024c8:	40001400 	.word	0x40001400
 80024cc:	40013400 	.word	0x40013400

080024d0 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <TIM_PWM_Start+0x22>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	621a      	str	r2, [r3, #32]
 80024f0:	e022      	b.n	8002538 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d108      	bne.n	800250a <TIM_PWM_Start+0x3a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0210 	orr.w	r2, r2, #16
 8002506:	621a      	str	r2, [r3, #32]
 8002508:	e016      	b.n	8002538 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d108      	bne.n	8002522 <TIM_PWM_Start+0x52>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251e:	621a      	str	r2, [r3, #32]
 8002520:	e00a      	b.n	8002538 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d107      	bne.n	8002538 <TIM_PWM_Start+0x68>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002536:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
	...

08002564 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <TIM_IRQHandling+0x3e>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <TIM_IRQHandling+0x48>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <TIM_IRQHandling+0x48>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f003 f89b 	bl	80056d8 <TIM_PeriodElapsedCallback>
	}
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40001000 	.word	0x40001000

080025b0 <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f001 fb5f 	bl	8003c80 <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f8db 	bl	8002784 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ee:	f023 030c 	bic.w	r3, r3, #12
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]
	config = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
	config = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	430a      	orrs	r2, r1
 800263e:	615a      	str	r2, [r3, #20]
	config = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 f8b6 	bl	80027c0 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f892 	bl	8002784 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d136      	bne.n	80026f0 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a39      	ldr	r2, [pc, #228]	; (800276c <USART_PeripheralClockControl+0xfc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d106      	bne.n	8002698 <USART_PeripheralClockControl+0x28>
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <USART_PeripheralClockControl+0x100>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a38      	ldr	r2, [pc, #224]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 8002696:	e064      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a36      	ldr	r2, [pc, #216]	; (8002774 <USART_PeripheralClockControl+0x104>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d106      	bne.n	80026ae <USART_PeripheralClockControl+0x3e>
 80026a0:	4b33      	ldr	r3, [pc, #204]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a32      	ldr	r2, [pc, #200]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026aa:	61d3      	str	r3, [r2, #28]
}
 80026ac:	e059      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <USART_PeripheralClockControl+0x108>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d106      	bne.n	80026c4 <USART_PeripheralClockControl+0x54>
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	61d3      	str	r3, [r2, #28]
}
 80026c2:	e04e      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <USART_PeripheralClockControl+0x10c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d106      	bne.n	80026da <USART_PeripheralClockControl+0x6a>
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026d6:	61d3      	str	r3, [r2, #28]
}
 80026d8:	e043      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <USART_PeripheralClockControl+0x110>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d13f      	bne.n	8002762 <USART_PeripheralClockControl+0xf2>
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a22      	ldr	r2, [pc, #136]	; (8002770 <USART_PeripheralClockControl+0x100>)
 80026e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ec:	61d3      	str	r3, [r2, #28]
}
 80026ee:	e038      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d135      	bne.n	8002762 <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <USART_PeripheralClockControl+0xfc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d106      	bne.n	800270c <USART_PeripheralClockControl+0x9c>
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002708:	6193      	str	r3, [r2, #24]
}
 800270a:	e02a      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <USART_PeripheralClockControl+0x104>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d106      	bne.n	8002722 <USART_PeripheralClockControl+0xb2>
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <USART_PeripheralClockControl+0x100>)
 800271a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800271e:	61d3      	str	r3, [r2, #28]
}
 8002720:	e01f      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <USART_PeripheralClockControl+0x108>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d106      	bne.n	8002738 <USART_PeripheralClockControl+0xc8>
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <USART_PeripheralClockControl+0x100>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	61d3      	str	r3, [r2, #28]
}
 8002736:	e014      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <USART_PeripheralClockControl+0x10c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d106      	bne.n	800274e <USART_PeripheralClockControl+0xde>
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002746:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800274a:	61d3      	str	r3, [r2, #28]
}
 800274c:	e009      	b.n	8002762 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <USART_PeripheralClockControl+0x110>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d105      	bne.n	8002762 <USART_PeripheralClockControl+0xf2>
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <USART_PeripheralClockControl+0x100>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <USART_PeripheralClockControl+0x100>)
 800275c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002760:	61d3      	str	r3, [r2, #28]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40013800 	.word	0x40013800
 8002770:	40021000 	.word	0x40021000
 8002774:	40004400 	.word	0x40004400
 8002778:	40004800 	.word	0x40004800
 800277c:	40004c00 	.word	0x40004c00
 8002780:	40005000 	.word	0x40005000

08002784 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d106      	bne.n	80027a4 <USART_PeripheralControl+0x20>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 80027a2:	e008      	b.n	80027b6 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <USART_PeripheralControl+0x32>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2b      	ldr	r2, [pc, #172]	; (800287c <USART_SetBaudRate+0xbc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d104      	bne.n	80027dc <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff fb12 	bl	8001dfc <RCC_GetPCLKxValue>
 80027d8:	61f8      	str	r0, [r7, #28]
 80027da:	e003      	b.n	80027e4 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff fb0d 	bl	8001dfc <RCC_GetPCLKxValue>
 80027e2:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 80027e4:	69f8      	ldr	r0, [r7, #28]
 80027e6:	f7fe fa35 	bl	8000c54 <__aeabi_ui2f>
 80027ea:	4604      	mov	r4, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fa2f 	bl	8000c54 <__aeabi_ui2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4619      	mov	r1, r3
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7fe fb36 	bl	8000e6c <__aeabi_fdiv>
 8002800:	4603      	mov	r3, r0
 8002802:	491f      	ldr	r1, [pc, #124]	; (8002880 <USART_SetBaudRate+0xc0>)
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fa7d 	bl	8000d04 <__aeabi_fmul>
 800280a:	4603      	mov	r3, r0
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fbc9 	bl	8000fa4 <__aeabi_f2uiz>
 8002812:	4603      	mov	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <USART_SetBaudRate+0xc4>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4619      	mov	r1, r3
 800282c:	0089      	lsls	r1, r1, #2
 800282e:	440b      	add	r3, r1
 8002830:	4619      	mov	r1, r3
 8002832:	0088      	lsls	r0, r1, #2
 8002834:	4619      	mov	r1, r3
 8002836:	4603      	mov	r3, r0
 8002838:	440b      	add	r3, r1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <USART_SetBaudRate+0xc4>)
 800284a:	fb82 1203 	smull	r1, r2, r2, r3
 800284e:	1152      	asrs	r2, r2, #5
 8002850:	17db      	asrs	r3, r3, #31
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0119      	lsls	r1, r3, #4
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	430b      	orrs	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	3724      	adds	r7, #36	; 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	40013800 	.word	0x40013800
 8002880:	42c80000 	.word	0x42c80000
 8002884:	51eb851f 	.word	0x51eb851f

08002888 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	88fa      	ldrh	r2, [r7, #6]
 80028a0:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4a17      	ldr	r2, [pc, #92]	; (800290c <UART_Transmit_DMA+0x84>)
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <UART_Transmit_DMA+0x88>)
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <UART_Transmit_DMA+0x8c>)
 80028be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	2200      	movs	r2, #0
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3304      	adds	r3, #4
 80028dc:	461a      	mov	r2, r3
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f7fe fc17 	bl	8001112 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f2:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002902:	615a      	str	r2, [r3, #20]
}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0800294f 	.word	0x0800294f
 8002910:	0800296b 	.word	0x0800296b
 8002914:	08002987 	.word	0x08002987

08002918 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ffdb 	bl	8002918 <UART_TxCpltCallback>
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ffd6 	bl	800292a <UART_TxHalfCpltCallback>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ffd1 	bl	800293c <UART_ErrorCallback>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 fae2 	bl	8003f74 <BLDC_MspInit>

}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c6:	3b01      	subs	r3, #1
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d87b      	bhi.n	8002ac4 <BLDC_Drive+0x10c>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <BLDC_Drive+0x1c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002aa1 	.word	0x08002aa1
 80029d8:	08002a11 	.word	0x08002a11
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	08002a59 	.word	0x08002a59
 80029e4:	08002a7d 	.word	0x08002a7d
 80029e8:	08002a35 	.word	0x08002a35
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <BLDC_Drive+0x46>
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa6c 	bl	8002ed4 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 80029fc:	e064      	b.n	8002ac8 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d15f      	bne.n	8002ac8 <BLDC_Drive+0x110>
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f9bb 	bl	8002d84 <BLDC_Step2>
			break;
 8002a0e:	e05b      	b.n	8002ac8 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <BLDC_Drive+0x6a>
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa22 	bl	8002e64 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002a20:	e054      	b.n	8002acc <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d14f      	bne.n	8002acc <BLDC_Drive+0x114>
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f971 	bl	8002d14 <BLDC_Step1>
			break;
 8002a32:	e04b      	b.n	8002acc <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <BLDC_Drive+0x8e>
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9d8 	bl	8002df4 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8002a44:	e044      	b.n	8002ad0 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d13f      	bne.n	8002ad0 <BLDC_Drive+0x118>
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa77 	bl	8002f44 <BLDC_Step6>
			break;
 8002a56:	e03b      	b.n	8002ad0 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <BLDC_Drive+0xb2>
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f98e 	bl	8002d84 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002a68:	e034      	b.n	8002ad4 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d12f      	bne.n	8002ad4 <BLDC_Drive+0x11c>
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fa2d 	bl	8002ed4 <BLDC_Step5>
			break;
 8002a7a:	e02b      	b.n	8002ad4 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <BLDC_Drive+0xd6>
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f944 	bl	8002d14 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8002a8c:	e024      	b.n	8002ad8 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d11f      	bne.n	8002ad8 <BLDC_Drive+0x120>
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f9e3 	bl	8002e64 <BLDC_Step4>
			break;
 8002a9e:	e01b      	b.n	8002ad8 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <BLDC_Drive+0xfa>
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa4a 	bl	8002f44 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002ab0:	e014      	b.n	8002adc <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10f      	bne.n	8002adc <BLDC_Drive+0x124>
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f999 	bl	8002df4 <BLDC_Step3>
			break;
 8002ac2:	e00b      	b.n	8002adc <BLDC_Drive+0x124>
		}

		default :
			break;
 8002ac4:	bf00      	nop
 8002ac6:	e00a      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002ac8:	bf00      	nop
 8002aca:	e008      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002acc:	bf00      	nop
 8002ace:	e006      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002ad0:	bf00      	nop
 8002ad2:	e004      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002ad4:	bf00      	nop
 8002ad6:	e002      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002ad8:	bf00      	nop
 8002ada:	e000      	b.n	8002ade <BLDC_Drive+0x126>
			break;
 8002adc:	bf00      	nop
	}
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop

08002ae8 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8002b0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fc86 	bl	8000424 <__aeabi_i2d>
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <BLDC_Get_Speed+0x94>)
 8002b1e:	f7fd fceb 	bl	80004f8 <__aeabi_dmul>
 8002b22:	4603      	mov	r3, r0
 8002b24:	460c      	mov	r4, r1
 8002b26:	4625      	mov	r5, r4
 8002b28:	461c      	mov	r4, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b30:	461a      	mov	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b38:	fb03 f302 	mul.w	r3, r3, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fc71 	bl	8000424 <__aeabi_i2d>
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <BLDC_Get_Speed+0x98>)
 8002b48:	f7fd fcd6 	bl	80004f8 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fdfa 	bl	800074c <__aeabi_ddiv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4621      	mov	r1, r4
 8002b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b64:	f7fd fdf2 	bl	800074c <__aeabi_ddiv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	404e0000 	.word	0x404e0000
 8002b80:	40080000 	.word	0x40080000

08002b84 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b92:	3b01      	subs	r3, #1
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	f200 8093 	bhi.w	8002cc0 <BLDC_Get_Position+0x13c>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <BLDC_Get_Position+0x1c>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002c95 	.word	0x08002c95
 8002ba4:	08002be5 	.word	0x08002be5
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002c3d 	.word	0x08002c3d
 8002bb0:	08002c69 	.word	0x08002c69
 8002bb4:	08002c11 	.word	0x08002c11
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d105      	bne.n	8002bce <BLDC_Get_Position+0x4a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002bcc:	e07a      	b.n	8002cc4 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d175      	bne.n	8002cc4 <BLDC_Get_Position+0x140>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002be2:	e06f      	b.n	8002cc4 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d105      	bne.n	8002bfa <BLDC_Get_Position+0x76>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002bf8:	e066      	b.n	8002cc8 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d161      	bne.n	8002cc8 <BLDC_Get_Position+0x144>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c0e:	e05b      	b.n	8002cc8 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d105      	bne.n	8002c26 <BLDC_Get_Position+0xa2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002c24:	e052      	b.n	8002ccc <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d14d      	bne.n	8002ccc <BLDC_Get_Position+0x148>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c3a:	e047      	b.n	8002ccc <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d105      	bne.n	8002c52 <BLDC_Get_Position+0xce>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002c50:	e03e      	b.n	8002cd0 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d139      	bne.n	8002cd0 <BLDC_Get_Position+0x14c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	1e5a      	subs	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c66:	e033      	b.n	8002cd0 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <BLDC_Get_Position+0xfa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002c7c:	e02a      	b.n	8002cd4 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d125      	bne.n	8002cd4 <BLDC_Get_Position+0x150>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c92:	e01f      	b.n	8002cd4 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d105      	bne.n	8002caa <BLDC_Get_Position+0x126>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002ca8:	e016      	b.n	8002cd8 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d111      	bne.n	8002cd8 <BLDC_Get_Position+0x154>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002cbe:	e00b      	b.n	8002cd8 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002cc0:	bf00      	nop
 8002cc2:	e00a      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002cc4:	bf00      	nop
 8002cc6:	e008      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002cc8:	bf00      	nop
 8002cca:	e006      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002ccc:	bf00      	nop
 8002cce:	e004      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002cd0:	bf00      	nop
 8002cd2:	e002      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <BLDC_Get_Position+0x156>
			break;
 8002cd8:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fba0 	bl	8000424 <__aeabi_i2d>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002cea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	f7fd fc01 	bl	80004f8 <__aeabi_dmul>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <BLDC_Step1>:
	Delay_ms(10);
}


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	b299      	uxth	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	4812      	ldr	r0, [pc, #72]	; (8002d80 <BLDC_Step1+0x6c>)
 8002d36:	f7fe ff39 	bl	8001bac <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d60:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0210 	orr.w	r2, r2, #16
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40010c00 	.word	0x40010c00

08002d84 <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b299      	uxth	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	4812      	ldr	r0, [pc, #72]	; (8002df0 <BLDC_Step2+0x6c>)
 8002da6:	f7fe ff01 	bl	8001bac <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0210 	orr.w	r2, r2, #16
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40010c00 	.word	0x40010c00

08002df4 <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b299      	uxth	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	4812      	ldr	r0, [pc, #72]	; (8002e60 <BLDC_Step3+0x6c>)
 8002e16:	f7fe fec9 	bl	8001bac <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0210 	bic.w	r2, r2, #16
 8002e2c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e40:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40010c00 	.word	0x40010c00

08002e64 <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	b299      	uxth	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <BLDC_Step4+0x6c>)
 8002e86:	f7fe fe91 	bl	8001bac <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a1a      	ldr	r2, [r3, #32]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0210 	bic.w	r2, r2, #16
 8002e9c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb0:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40010c00 	.word	0x40010c00

08002ed4 <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4812      	ldr	r0, [pc, #72]	; (8002f40 <BLDC_Step5+0x6c>)
 8002ef6:	f7fe fe59 	bl	8001bac <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0210 	bic.w	r2, r2, #16
 8002f20:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40010c00 	.word	0x40010c00

08002f44 <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	b299      	uxth	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	4812      	ldr	r0, [pc, #72]	; (8002fb0 <BLDC_Step6+0x6c>)
 8002f66:	f7fe fe21 	bl	8001bac <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0210 	bic.w	r2, r2, #16
 8002f90:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40010c00 	.word	0x40010c00

08002fb4 <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 8002fc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fc8:	f7fd f8de 	bl	8000188 <__aeabi_dsub>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002fe2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd fa85 	bl	80004f8 <__aeabi_dmul>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800300a:	f7fd fa75 	bl	80004f8 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800301a:	f7fd fa6d 	bl	80004f8 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd f8b1 	bl	800018c <__adddf3>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8003046:	f7fd f89f 	bl	8000188 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4620      	mov	r0, r4
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd fa51 	bl	80004f8 <__aeabi_dmul>
 8003056:	4603      	mov	r3, r0
 8003058:	460c      	mov	r4, r1
 800305a:	4618      	mov	r0, r3
 800305c:	4621      	mov	r1, r4
 800305e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003062:	f7fd fb73 	bl	800074c <__aeabi_ddiv>
 8003066:	4603      	mov	r3, r0
 8003068:	460c      	mov	r4, r1
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800307c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003080:	461a      	mov	r2, r3
 8003082:	4623      	mov	r3, r4
 8003084:	f7fd f882 	bl	800018c <__adddf3>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	4618      	mov	r0, r3
 800308e:	4621      	mov	r1, r4
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8003096:	e9d4 3400 	ldrd	r3, r4, [r4]
 800309a:	461a      	mov	r2, r3
 800309c:	4623      	mov	r3, r4
 800309e:	f7fd f875 	bl	800018c <__adddf3>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80030b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}
 80030c4:	0000      	movs	r0, r0
	...

080030c8 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	b08b      	sub	sp, #44	; 0x2c
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80030e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80030ec:	e9cd 3400 	strd	r3, r4, [sp]
 80030f0:	462a      	mov	r2, r5
 80030f2:	4633      	mov	r3, r6
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff ff5d 	bl	8002fb4 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f7fd fc7c 	bl	8000a04 <__aeabi_dcmpge>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <BLDC_SpeedPID+0x54>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800311a:	e00f      	b.n	800313c <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f7fd fc57 	bl	80009dc <__aeabi_dcmplt>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <BLDC_SpeedPID+0x74>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003142:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003146:	4618      	mov	r0, r3
 8003148:	4621      	mov	r1, r4
 800314a:	f7fd fc85 	bl	8000a58 <__aeabi_d2iz>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	bfb8      	it	lt
 8003154:	425b      	neglt	r3, r3
 8003156:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > (3600 * 0.95))		PwmPID_ABS = (3600 * 0.95);
 8003158:	8afb      	ldrh	r3, [r7, #22]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f962 	bl	8000424 <__aeabi_i2d>
 8003160:	a309      	add	r3, pc, #36	; (adr r3, 8003188 <BLDC_SpeedPID+0xc0>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fc57 	bl	8000a18 <__aeabi_dcmpgt>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <BLDC_SpeedPID+0xae>
 8003170:	f640 535c 	movw	r3, #3420	; 0xd5c
 8003174:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	4619      	mov	r1, r3
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f002 fca9 	bl	8005ad2 <SetPwmDuty>
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003188:	00000000 	.word	0x00000000
 800318c:	40aab800 	.word	0x40aab800

08003190 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b08f      	sub	sp, #60	; 0x3c
 8003196:	af04      	add	r7, sp, #16
 8003198:	6278      	str	r0, [r7, #36]	; 0x24
 800319a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031a4:	f000 f8b2 	bl	800330c <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	//BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80031b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80031b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80031bc:	e9cd 1200 	strd	r1, r2, [sp]
 80031c0:	462a      	mov	r2, r5
 80031c2:	4633      	mov	r3, r6
 80031c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c6:	f7ff fef5 	bl	8002fb4 <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80031d0:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <BLDC_PositionPID+0x174>)
 80031d2:	cb18      	ldmia	r3, {r3, r4}
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd fc1e 	bl	8000a18 <__aeabi_dcmpgt>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <BLDC_PositionPID+0x5e>
 80031e2:	4b48      	ldr	r3, [pc, #288]	; (8003304 <BLDC_PositionPID+0x174>)
 80031e4:	cb18      	ldmia	r3, {r3, r4}
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 80031ec:	e017      	b.n	800321e <BLDC_PositionPID+0x8e>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <BLDC_PositionPID+0x174>)
 80031f6:	cb18      	ldmia	r3, {r3, r4}
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003204:	f7fd fbea 	bl	80009dc <__aeabi_dcmplt>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <BLDC_PositionPID+0x8e>
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <BLDC_PositionPID+0x174>)
 8003210:	cb18      	ldmia	r3, {r3, r4}
 8003212:	469a      	mov	sl, r3
 8003214:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f7fd fbea 	bl	8000a04 <__aeabi_dcmpge>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d024      	beq.n	8003280 <BLDC_PositionPID+0xf0>
	{
		pBLDCHandle->RotationDir = CW;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <BLDC_PositionPID+0x178>)
 8003246:	cb18      	ldmia	r3, {r3, r4}
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	f7fd fbc6 	bl	80009dc <__aeabi_dcmplt>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <BLDC_PositionPID+0xd0>
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <BLDC_PositionPID+0x178>)
 8003258:	cb18      	ldmia	r3, {r3, r4}
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003266:	e9d4 3400 	ldrd	r3, r4, [r4]
 800326a:	4618      	mov	r0, r3
 800326c:	4621      	mov	r1, r4
 800326e:	f7fd fc1b 	bl	8000aa8 <__aeabi_d2uiz>
 8003272:	4603      	mov	r3, r0
 8003274:	b29b      	uxth	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800327a:	f002 fc2a 	bl	8005ad2 <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 800327e:	e03b      	b.n	80032f8 <BLDC_PositionPID+0x168>
	else if(pBLDCHandle->PwmPID < 0)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f7fd fba5 	bl	80009dc <__aeabi_dcmplt>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d100      	bne.n	800329a <BLDC_PositionPID+0x10a>
}
 8003298:	e02e      	b.n	80032f8 <BLDC_PositionPID+0x168>
		pBLDCHandle->RotationDir = CCW;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <BLDC_PositionPID+0x178>)
 80032aa:	cb18      	ldmia	r3, {r3, r4}
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b8:	f7fd fbae 	bl	8000a18 <__aeabi_dcmpgt>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <BLDC_PositionPID+0x142>
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <BLDC_PositionPID+0x178>)
 80032c4:	cb18      	ldmia	r3, {r3, r4}
 80032c6:	4698      	mov	r8, r3
 80032c8:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80032d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e8:	f7fd fbde 	bl	8000aa8 <__aeabi_d2uiz>
 80032ec:	4603      	mov	r3, r0
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032f4:	f002 fbed 	bl	8005ad2 <SetPwmDuty>
}
 80032f8:	bf00      	nop
 80032fa:	372c      	adds	r7, #44	; 0x2c
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000
 8003308:	200001f8 	.word	0x200001f8

0800330c <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 800330c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003310:	b08f      	sub	sp, #60	; 0x3c
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003326:	e9d4 3400 	ldrd	r3, r4, [r4]
 800332a:	461a      	mov	r2, r3
 800332c:	4623      	mov	r3, r4
 800332e:	f7fc ff2b 	bl	8000188 <__aeabi_dsub>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8003346:	e9d4 3400 	ldrd	r3, r4, [r4]
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fd f8d3 	bl	80004f8 <__aeabi_dmul>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	4618      	mov	r0, r3
 8003358:	4621      	mov	r1, r4
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	4bb4      	ldr	r3, [pc, #720]	; (8003630 <BLDC_CalculateTrajectoryPosition+0x324>)
 8003360:	f7fd f8ca 	bl	80004f8 <__aeabi_dmul>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003372:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003376:	461a      	mov	r2, r3
 8003378:	4623      	mov	r3, r4
 800337a:	f7fd f9e7 	bl	800074c <__aeabi_ddiv>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003392:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003396:	461a      	mov	r2, r3
 8003398:	4623      	mov	r3, r4
 800339a:	f7fc fef5 	bl	8000188 <__aeabi_dsub>
 800339e:	4603      	mov	r3, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b2:	f7fd fb27 	bl	8000a04 <__aeabi_dcmpge>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <BLDC_CalculateTrajectoryPosition+0xb6>
 80033bc:	2300      	movs	r3, #0
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
 80033c0:	e00c      	b.n	80033dc <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ce:	f7fd fb05 	bl	80009dc <__aeabi_dcmplt>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <BLDC_CalculateTrajectoryPosition+0xd0>
 80033d8:	2301      	movs	r3, #1
 80033da:	637b      	str	r3, [r7, #52]	; 0x34


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b93      	ldr	r3, [pc, #588]	; (8003630 <BLDC_CalculateTrajectoryPosition+0x324>)
 80033e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033e6:	f7fd f887 	bl	80004f8 <__aeabi_dmul>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033f6:	f7fd faf1 	bl	80009dc <__aeabi_dcmplt>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d029      	beq.n	8003454 <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800340c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc feb8 	bl	8000188 <__aeabi_dsub>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	461a      	mov	r2, r3
 800341e:	4623      	mov	r3, r4
 8003420:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003424:	f7fd faf8 	bl	8000a18 <__aeabi_dcmpgt>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <BLDC_CalculateTrajectoryPosition+0x128>
 800342e:	2301      	movs	r3, #1
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
 8003432:	e049      	b.n	80034c8 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 8003434:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003438:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800343c:	f7fd faec 	bl	8000a18 <__aeabi_dcmpgt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <BLDC_CalculateTrajectoryPosition+0x140>
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
 800344a:	e03d      	b.n	80034c8 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
 8003452:	e039      	b.n	80034c8 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	4b75      	ldr	r3, [pc, #468]	; (8003630 <BLDC_CalculateTrajectoryPosition+0x324>)
 800345a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800345e:	f7fd f84b 	bl	80004f8 <__aeabi_dmul>
 8003462:	4603      	mov	r3, r0
 8003464:	460c      	mov	r4, r1
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800346e:	f7fd fac9 	bl	8000a04 <__aeabi_dcmpge>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d027      	beq.n	80034c8 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003484:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003488:	461a      	mov	r2, r3
 800348a:	4623      	mov	r3, r4
 800348c:	f7fc fe7c 	bl	8000188 <__aeabi_dsub>
 8003490:	4603      	mov	r3, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4698      	mov	r8, r3
 8003496:	46a1      	mov	r9, r4
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	4b64      	ldr	r3, [pc, #400]	; (8003630 <BLDC_CalculateTrajectoryPosition+0x324>)
 800349e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034a2:	f7fd f829 	bl	80004f8 <__aeabi_dmul>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	461a      	mov	r2, r3
 80034ac:	4623      	mov	r3, r4
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f7fd fa93 	bl	80009dc <__aeabi_dcmplt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <BLDC_CalculateTrajectoryPosition+0x1b6>
 80034bc:	2301      	movs	r3, #1
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
 80034c0:	e002      	b.n	80034c8 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
	}


	switch (accelDir)
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <BLDC_CalculateTrajectoryPosition+0x1e8>
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <BLDC_CalculateTrajectoryPosition+0x1ce>
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d015      	beq.n	8003504 <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 80034d8:	e028      	b.n	800352c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80034e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e4:	f7fd f808 	bl	80004f8 <__aeabi_dmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80034f2:	e01b      	b.n	800352c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	f04f 0400 	mov.w	r4, #0
 80034fe:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003502:	e013      	b.n	800352c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800350a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800350e:	461d      	mov	r5, r3
 8003510:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8003514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003518:	4628      	mov	r0, r5
 800351a:	4631      	mov	r1, r6
 800351c:	f7fc ffec 	bl	80004f8 <__aeabi_dmul>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800352a:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003538:	e9d4 3400 	ldrd	r3, r4, [r4]
 800353c:	461a      	mov	r2, r3
 800353e:	4623      	mov	r3, r4
 8003540:	f7fc fe24 	bl	800018c <__adddf3>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <BLDC_CalculateTrajectoryPosition+0x24e>
 8003554:	2b01      	cmp	r3, #1
 8003556:	d06d      	beq.n	8003634 <BLDC_CalculateTrajectoryPosition+0x328>

			break;
		}

		default :
			break;
 8003558:	e0c2      	b.n	80036e0 <BLDC_CalculateTrajectoryPosition+0x3d4>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003566:	e9d4 3400 	ldrd	r3, r4, [r4]
 800356a:	461a      	mov	r2, r3
 800356c:	4623      	mov	r3, r4
 800356e:	f7fd fa49 	bl	8000a04 <__aeabi_dcmpge>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	f04f 0400 	mov.w	r4, #0
 8003582:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	f04f 0400 	mov.w	r4, #0
 8003590:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800359a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80035a4:	e09c      	b.n	80036e0 <BLDC_CalculateTrajectoryPosition+0x3d4>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <BLDC_CalculateTrajectoryPosition+0x324>)
 80035ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b0:	f7fc ffa2 	bl	80004f8 <__aeabi_dmul>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	461d      	mov	r5, r3
 80035ba:	4626      	mov	r6, r4
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	f7fc fde1 	bl	800018c <__adddf3>
 80035ca:	4603      	mov	r3, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	4618      	mov	r0, r3
 80035d0:	4621      	mov	r1, r4
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80035d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035dc:	461a      	mov	r2, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	f7fc fdd2 	bl	8000188 <__aeabi_dsub>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	461a      	mov	r2, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	4628      	mov	r0, r5
 80035ee:	4631      	mov	r1, r6
 80035f0:	f7fc ff82 	bl	80004f8 <__aeabi_dmul>
 80035f4:	4603      	mov	r3, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
				if(dtTrjPosition >= 0)
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003608:	f7fd f9fc 	bl	8000a04 <__aeabi_dcmpge>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <BLDC_CalculateTrajectoryPosition+0x308>
			break;
 8003612:	e065      	b.n	80036e0 <BLDC_CalculateTrajectoryPosition+0x3d4>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800361a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800361e:	f7fc fdb5 	bl	800018c <__adddf3>
 8003622:	4603      	mov	r3, r0
 8003624:	460c      	mov	r4, r1
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800362c:	e058      	b.n	80036e0 <BLDC_CalculateTrajectoryPosition+0x3d4>
 800362e:	bf00      	nop
 8003630:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003640:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003644:	461a      	mov	r2, r3
 8003646:	4623      	mov	r3, r4
 8003648:	f7fd f9d2 	bl	80009f0 <__aeabi_dcmple>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <BLDC_CalculateTrajectoryPosition+0x374>
				pBLDCHandle->TrjCurSpeed = 0;
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	f04f 0400 	mov.w	r4, #0
 800366a:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003674:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 800367e:	e02e      	b.n	80036de <BLDC_CalculateTrajectoryPosition+0x3d2>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <BLDC_CalculateTrajectoryPosition+0x3e0>)
 800368c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003690:	f7fc ff32 	bl	80004f8 <__aeabi_dmul>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4690      	mov	r8, r2
 800369a:	4699      	mov	r9, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	f7fc fd71 	bl	800018c <__adddf3>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80036b8:	f7fc fd66 	bl	8000188 <__aeabi_dsub>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4640      	mov	r0, r8
 80036c2:	4649      	mov	r1, r9
 80036c4:	f7fc ff18 	bl	80004f8 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4620      	mov	r0, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	f7fc fd5c 	bl	800018c <__adddf3>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 80036de:	bf00      	nop
	}
}
 80036e0:	bf00      	nop
 80036e2:	373c      	adds	r7, #60	; 0x3c
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036ea:	bf00      	nop
 80036ec:	3fe00000 	.word	0x3fe00000

080036f0 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
 80036fa:	460b      	mov	r3, r1
 80036fc:	71bb      	strb	r3, [r7, #6]
 80036fe:	4613      	mov	r3, r2
 8003700:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 8003702:	797b      	ldrb	r3, [r7, #5]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d11d      	bne.n	8003744 <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	2b1f      	cmp	r3, #31
 800370c:	d80a      	bhi.n	8003724 <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <NVIC_IRQConfig+0xcc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	79fa      	ldrb	r2, [r7, #7]
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f202 	lsl.w	r2, r1, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <NVIC_IRQConfig+0xcc>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e033      	b.n	800378c <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	2b3b      	cmp	r3, #59	; 0x3b
 8003728:	d830      	bhi.n	800378c <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <NVIC_IRQConfig+0xcc>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	79fa      	ldrb	r2, [r7, #7]
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	4611      	mov	r1, r2
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <NVIC_IRQConfig+0xcc>)
 800373e:	430b      	orrs	r3, r1
 8003740:	6053      	str	r3, [r2, #4]
 8003742:	e023      	b.n	800378c <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 8003744:	797b      	ldrb	r3, [r7, #5]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d120      	bne.n	800378c <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	2b1f      	cmp	r3, #31
 800374e:	d80c      	bhi.n	800376a <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <NVIC_IRQConfig+0xcc>)
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003756:	79fa      	ldrb	r2, [r7, #7]
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4611      	mov	r1, r2
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <NVIC_IRQConfig+0xcc>)
 8003762:	430b      	orrs	r3, r1
 8003764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003768:	e010      	b.n	800378c <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2b3b      	cmp	r3, #59	; 0x3b
 800376e:	d80d      	bhi.n	800378c <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <NVIC_IRQConfig+0xcc>)
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	f002 021f 	and.w	r2, r2, #31
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	4611      	mov	r1, r2
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <NVIC_IRQConfig+0xcc>)
 8003786:	430b      	orrs	r3, r1
 8003788:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <NVIC_IRQConfig+0xcc>)
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	4413      	add	r3, r2
 8003792:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8003796:	b2db      	uxtb	r3, r3
 8003798:	b25a      	sxtb	r2, r3
 800379a:	79bb      	ldrb	r3, [r7, #6]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	b25b      	sxtb	r3, r3
 80037a0:	4313      	orrs	r3, r2
 80037a2:	b259      	sxtb	r1, r3
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <NVIC_IRQConfig+0xcc>)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	b2c9      	uxtb	r1, r1
 80037aa:	4413      	add	r3, r2
 80037ac:	460a      	mov	r2, r1
 80037ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b092      	sub	sp, #72	; 0x48
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	2228      	movs	r2, #40	; 0x28
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 f9eb 	bl	8005bb4 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	2214      	movs	r2, #20
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 f9e4 	bl	8005bb4 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 80037f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f4:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8003800:	2302      	movs	r3, #2
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	3b10      	subs	r3, #16
 8003808:	2b38      	cmp	r3, #56	; 0x38
 800380a:	f200 8101 	bhi.w	8003a10 <SystemClock_Config+0x250>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <SystemClock_Config+0x54>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	080038f9 	.word	0x080038f9
 8003818:	08003a11 	.word	0x08003a11
 800381c:	08003a11 	.word	0x08003a11
 8003820:	08003a11 	.word	0x08003a11
 8003824:	08003a11 	.word	0x08003a11
 8003828:	08003a11 	.word	0x08003a11
 800382c:	08003a11 	.word	0x08003a11
 8003830:	08003a11 	.word	0x08003a11
 8003834:	08003919 	.word	0x08003919
 8003838:	08003a11 	.word	0x08003a11
 800383c:	08003a11 	.word	0x08003a11
 8003840:	08003a11 	.word	0x08003a11
 8003844:	08003a11 	.word	0x08003a11
 8003848:	08003a11 	.word	0x08003a11
 800384c:	08003a11 	.word	0x08003a11
 8003850:	08003a11 	.word	0x08003a11
 8003854:	0800393b 	.word	0x0800393b
 8003858:	08003a11 	.word	0x08003a11
 800385c:	08003a11 	.word	0x08003a11
 8003860:	08003a11 	.word	0x08003a11
 8003864:	08003a11 	.word	0x08003a11
 8003868:	08003a11 	.word	0x08003a11
 800386c:	08003a11 	.word	0x08003a11
 8003870:	08003a11 	.word	0x08003a11
 8003874:	0800395d 	.word	0x0800395d
 8003878:	08003a11 	.word	0x08003a11
 800387c:	08003a11 	.word	0x08003a11
 8003880:	08003a11 	.word	0x08003a11
 8003884:	08003a11 	.word	0x08003a11
 8003888:	08003a11 	.word	0x08003a11
 800388c:	08003a11 	.word	0x08003a11
 8003890:	08003a11 	.word	0x08003a11
 8003894:	08003981 	.word	0x08003981
 8003898:	08003a11 	.word	0x08003a11
 800389c:	08003a11 	.word	0x08003a11
 80038a0:	08003a11 	.word	0x08003a11
 80038a4:	08003a11 	.word	0x08003a11
 80038a8:	08003a11 	.word	0x08003a11
 80038ac:	08003a11 	.word	0x08003a11
 80038b0:	08003a11 	.word	0x08003a11
 80038b4:	080039a5 	.word	0x080039a5
 80038b8:	08003a11 	.word	0x08003a11
 80038bc:	08003a11 	.word	0x08003a11
 80038c0:	08003a11 	.word	0x08003a11
 80038c4:	08003a11 	.word	0x08003a11
 80038c8:	08003a11 	.word	0x08003a11
 80038cc:	08003a11 	.word	0x08003a11
 80038d0:	08003a11 	.word	0x08003a11
 80038d4:	080039c9 	.word	0x080039c9
 80038d8:	08003a11 	.word	0x08003a11
 80038dc:	08003a11 	.word	0x08003a11
 80038e0:	08003a11 	.word	0x08003a11
 80038e4:	08003a11 	.word	0x08003a11
 80038e8:	08003a11 	.word	0x08003a11
 80038ec:	08003a11 	.word	0x08003a11
 80038f0:	08003a11 	.word	0x08003a11
 80038f4:	080039ed 	.word	0x080039ed
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 80038f8:	2300      	movs	r3, #0
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038fc:	230f      	movs	r3, #15
 80038fe:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003900:	2302      	movs	r3, #2
 8003902:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003916:	e07c      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8003918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800391c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800391e:	230f      	movs	r3, #15
 8003920:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003922:	2302      	movs	r3, #2
 8003924:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003938:	e06b      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 800393a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800393e:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003940:	230f      	movs	r3, #15
 8003942:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003944:	2302      	movs	r3, #2
 8003946:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800395a:	e05a      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 800395c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003960:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003962:	230f      	movs	r3, #15
 8003964:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003966:	2302      	movs	r3, #2
 8003968:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 800396e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003972:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800397e:	e048      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8003980:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003984:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003986:	230f      	movs	r3, #15
 8003988:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800398a:	2302      	movs	r3, #2
 800398c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8003992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003996:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80039a2:	e036      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 80039a4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80039a8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039aa:	230f      	movs	r3, #15
 80039ac:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039ae:	2302      	movs	r3, #2
 80039b0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 80039b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ba:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 80039c0:	2302      	movs	r3, #2
 80039c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80039c6:	e024      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 80039c8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80039cc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ce:	230f      	movs	r3, #15
 80039d0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d2:	2302      	movs	r3, #2
 80039d4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 80039da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039de:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80039ea:	e012      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 80039ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	230f      	movs	r3, #15
 80039f4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f6:	2302      	movs	r3, #2
 80039f8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 80039fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a02:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a0e:	e000      	b.n	8003a12 <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8003a10:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f920 	bl	8001c5c <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8003a1c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe f968 	bl	8001cfc <RCC_ClockConfig>
}
 8003a2c:	bf00      	nop
 8003a2e:	3748      	adds	r7, #72	; 0x48
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8003a34:	b4b0      	push	{r4, r5, r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8003a3c:	2400      	movs	r4, #0
 8003a3e:	e006      	b.n	8003a4e <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8003a40:	2500      	movs	r5, #0
 8003a42:	e001      	b.n	8003a48 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8003a44:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8003a46:	3501      	adds	r5, #1
 8003a48:	2d4c      	cmp	r5, #76	; 0x4c
 8003a4a:	d9fb      	bls.n	8003a44 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <Delay_us+0x34>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	429c      	cmp	r4, r3
 8003a5a:	d3f1      	bcc.n	8003a40 <Delay_us+0xc>
		}
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bcb0      	pop	{r4, r5, r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	cccccccd 	.word	0xcccccccd

08003a6c <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ffd8 	bl	8003a34 <Delay_us>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM6_IRQHandler+0x10>)
 8003a92:	f7fe fd67 	bl	8002564 <TIM_IRQHandling>
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200004bc 	.word	0x200004bc

08003aa0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <EXTI9_5_IRQHandler+0x14>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe f8bb 	bl	8001c24 <EXTI_IRQHandling>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000290 	.word	0x20000290

08003ab8 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART3Handle.hdmatx);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <DMA1_Channel2_IRQHandler+0x14>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd fb57 	bl	8001174 <DMA_IRQ_Handling>
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000388 	.word	0x20000388

08003ad0 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_0);
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7fe f8a5 	bl	8001c24 <EXTI_IRQHandling>
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}

08003ade <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_1);
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f7fe f89e 	bl	8001c24 <EXTI_IRQHandling>
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_2);
 8003af0:	2004      	movs	r0, #4
 8003af2:	f7fe f897 	bl	8001c24 <EXTI_IRQHandling>
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}

08003afa <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_3);
 8003afe:	2008      	movs	r0, #8
 8003b00:	f7fe f890 	bl	8001c24 <EXTI_IRQHandling>
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_4);
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	f7fe f889 	bl	8001c24 <EXTI_IRQHandling>
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <main>:

#include "main.h"


int main(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af02      	add	r7, sp, #8
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003b1e:	2048      	movs	r0, #72	; 0x48
 8003b20:	f7ff fe4e 	bl	80037c0 <SystemClock_Config>

	Delay_ms(1000);
 8003b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b28:	f7ff ffa0 	bl	8003a6c <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8003b2c:	f001 ff54 	bl	80059d8 <MemsetHandleStructure>

	RCC_AFIO_CLK_ENABLE();
 8003b30:	4b48      	ldr	r3, [pc, #288]	; (8003c54 <main+0x13c>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4a47      	ldr	r2, [pc, #284]	; (8003c54 <main+0x13c>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8003b3c:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <main+0x140>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	4a41      	ldr	r2, [pc, #260]	; (8003c58 <main+0x140>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6053      	str	r3, [r2, #4]

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 8003b58:	f001 fd52 	bl	8005600 <DMA1_Init>
	Key_Init();					// Initialize peripherals related to Button
 8003b5c:	f001 fbcc 	bl	80052f8 <Key_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003b60:	f001 fc2c 	bl	80053bc <BLDC1_Init>
	UART3_Init();				// Initialize UART2 to transmit data to PC
 8003b64:	f001 fcf0 	bl	8005548 <UART3_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8003b68:	f001 fd18 	bl	800559c <TIM6_Init>
	TFT1_Init();
 8003b6c:	f001 fd5a 	bl	8005624 <TFT1_Init>
	TS1_Init();
 8003b70:	f001 fd84 	bl	800567c <TS1_Init>
	SPI_ENABLE(&SPI2Handle);
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <main+0x144>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <main+0x144>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b82:	601a      	str	r2, [r3, #0]
	Delay_ms(10);
 8003b84:	200a      	movs	r0, #10
 8003b86:	f7ff ff71 	bl	8003a6c <Delay_ms>


	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003b8a:	4835      	ldr	r0, [pc, #212]	; (8003c60 <main+0x148>)
 8003b8c:	f001 ff60 	bl	8005a50 <StartTimerPwm>
	Delay_ms(10);
 8003b90:	200a      	movs	r0, #10
 8003b92:	f7ff ff6b 	bl	8003a6c <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003b96:	4832      	ldr	r0, [pc, #200]	; (8003c60 <main+0x148>)
 8003b98:	f001 ff74 	bl	8005a84 <DisableTimerPwmChannel>
	Delay_ms(10);
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f7ff ff65 	bl	8003a6c <Delay_ms>
	 * 		Timer PWM CCR value : 0
	 * 		NVIC for EXTI : Disabled
	 * 		Timer PWM channels : Disabled
	 */

	TFT1Handle.foreground = White;
 8003ba2:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <main+0x14c>)
 8003ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba8:	871a      	strh	r2, [r3, #56]	; 0x38
	TFT1Handle.background = Black;
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <main+0x14c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	875a      	strh	r2, [r3, #58]	; 0x3a

	TFT_String(&TFT1Handle, 9, 10, White, Black, (uint8_t*)"BLDC Motor Controller");
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <main+0x150>)
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	2109      	movs	r1, #9
 8003bc0:	4828      	ldr	r0, [pc, #160]	; (8003c64 <main+0x14c>)
 8003bc2:	f000 ff8b 	bl	8004adc <TFT_String>
	TFT_String(&TFT1Handle, 7, 15, White, Black, (uint8_t*)"Designed by Ganghyeok Lim");
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <main+0x154>)
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd2:	220f      	movs	r2, #15
 8003bd4:	2107      	movs	r1, #7
 8003bd6:	4823      	ldr	r0, [pc, #140]	; (8003c64 <main+0x14c>)
 8003bd8:	f000 ff80 	bl	8004adc <TFT_String>
	Delay_ms(1000);
 8003bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be0:	f7ff ff44 	bl	8003a6c <Delay_ms>

//	State = STATE_MENU;
	TFT_Clear_Screen(&TFT1Handle);
 8003be4:	481f      	ldr	r0, [pc, #124]	; (8003c64 <main+0x14c>)
 8003be6:	f000 fe6b 	bl	80048c0 <TFT_Clear_Screen>

	while(1)
	{
		TFT_xy(&TFT1Handle, 10, 10);
 8003bea:	220a      	movs	r2, #10
 8003bec:	210a      	movs	r1, #10
 8003bee:	481d      	ldr	r0, [pc, #116]	; (8003c64 <main+0x14c>)
 8003bf0:	f000 fef6 	bl	80049e0 <TFT_xy>
		TFT_Signed_decimal(&TFT1Handle, Key0_count, 0, 3);
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <main+0x158>)
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4819      	ldr	r0, [pc, #100]	; (8003c64 <main+0x14c>)
 8003bfe:	f001 fb05 	bl	800520c <TFT_Signed_decimal>
		TFT_xy(&TFT1Handle, 10, 12);
 8003c02:	220c      	movs	r2, #12
 8003c04:	210a      	movs	r1, #10
 8003c06:	4817      	ldr	r0, [pc, #92]	; (8003c64 <main+0x14c>)
 8003c08:	f000 feea 	bl	80049e0 <TFT_xy>
		TFT_Signed_decimal(&TFT1Handle, Key1_count, 0, 3);
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <main+0x15c>)
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	2303      	movs	r3, #3
 8003c12:	2200      	movs	r2, #0
 8003c14:	4813      	ldr	r0, [pc, #76]	; (8003c64 <main+0x14c>)
 8003c16:	f001 faf9 	bl	800520c <TFT_Signed_decimal>
		TFT_xy(&TFT1Handle, 10, 14);
 8003c1a:	220e      	movs	r2, #14
 8003c1c:	210a      	movs	r1, #10
 8003c1e:	4811      	ldr	r0, [pc, #68]	; (8003c64 <main+0x14c>)
 8003c20:	f000 fede 	bl	80049e0 <TFT_xy>
		TFT_Signed_decimal(&TFT1Handle, Key2_count, 0, 3);
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <main+0x160>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	2303      	movs	r3, #3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	480d      	ldr	r0, [pc, #52]	; (8003c64 <main+0x14c>)
 8003c2e:	f001 faed 	bl	800520c <TFT_Signed_decimal>
		TFT_xy(&TFT1Handle, 10, 16);
 8003c32:	2210      	movs	r2, #16
 8003c34:	210a      	movs	r1, #10
 8003c36:	480b      	ldr	r0, [pc, #44]	; (8003c64 <main+0x14c>)
 8003c38:	f000 fed2 	bl	80049e0 <TFT_xy>
		TFT_Signed_decimal(&TFT1Handle, Key3_count, 0, 3);
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <main+0x164>)
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	2303      	movs	r3, #3
 8003c42:	2200      	movs	r2, #0
 8003c44:	4807      	ldr	r0, [pc, #28]	; (8003c64 <main+0x14c>)
 8003c46:	f001 fae1 	bl	800520c <TFT_Signed_decimal>


		Delay_ms(100);
 8003c4a:	2064      	movs	r0, #100	; 0x64
 8003c4c:	f7ff ff0e 	bl	8003a6c <Delay_ms>
		TFT_xy(&TFT1Handle, 10, 10);
 8003c50:	e7cb      	b.n	8003bea <main+0xd2>
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	20000468 	.word	0x20000468
 8003c60:	20000290 	.word	0x20000290
 8003c64:	200003c4 	.word	0x200003c4
 8003c68:	08007c6c 	.word	0x08007c6c
 8003c6c:	08007c84 	.word	0x08007c84
 8003c70:	20000208 	.word	0x20000208
 8003c74:	2000020c 	.word	0x2000020c
 8003c78:	20000210 	.word	0x20000210
 8003c7c:	20000214 	.word	0x20000214

08003c80 <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	2214      	movs	r2, #20
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 ff8f 	bl	8005bb4 <memset>

	if(pUARTHandle->Instance == USART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a66      	ldr	r2, [pc, #408]	; (8003e34 <USART_MspInit+0x1b4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <USART_MspInit+0x1b8>)
 8003ca2:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cac:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fd fd15 	bl	80016f0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7fd fd08 	bl	80016f0 <GPIO_Init>
 8003ce0:	e09e      	b.n	8003e20 <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a55      	ldr	r2, [pc, #340]	; (8003e3c <USART_MspInit+0x1bc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d149      	bne.n	8003d80 <USART_MspInit+0x100>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8003cec:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <USART_MspInit+0x1b8>)
 8003cee:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7fd fcf0 	bl	80016f0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8003d14:	2308      	movs	r3, #8
 8003d16:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7fd fce4 	bl	80016f0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	4a44      	ldr	r2, [pc, #272]	; (8003e40 <USART_MspInit+0x1c0>)
 8003d2e:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	2210      	movs	r2, #16
 8003d36:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2200      	movs	r2, #0
 8003d66:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd f939 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a33      	ldr	r2, [pc, #204]	; (8003e44 <USART_MspInit+0x1c4>)
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003d78:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <USART_MspInit+0x1c4>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6253      	str	r3, [r2, #36]	; 0x24
 8003d7e:	e04f      	b.n	8003e20 <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <USART_MspInit+0x1c8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d14a      	bne.n	8003e20 <USART_MspInit+0x1a0>
	{
		/* USART3 GPIO Configuration */

		// USART3 Tx
		GPIOHandle.Instance = GPIOB;
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <USART_MspInit+0x1cc>)
 8003d8c:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d96:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fd fca0 	bl	80016f0 <GPIO_Init>

		// USART3 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_11;
 8003db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db8:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fd fc93 	bl	80016f0 <GPIO_Init>

		/* USART3 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <USART_MspInit+0x1d0>)
 8003dd0:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f8e8 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <USART_MspInit+0x1c4>)
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <USART_MspInit+0x1c4>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fc22 	bl	8002670 <USART_PeripheralClockControl>
}
 8003e2c:	bf00      	nop
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40010800 	.word	0x40010800
 8003e3c:	40004400 	.word	0x40004400
 8003e40:	40020080 	.word	0x40020080
 8003e44:	20000424 	.word	0x20000424
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	40010c00 	.word	0x40010c00
 8003e50:	4002001c 	.word	0x4002001c

08003e54 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <TIM_Base_MspInit+0x2c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003e64:	2101      	movs	r1, #1
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe fa62 	bl	8002330 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	210f      	movs	r1, #15
 8003e70:	2036      	movs	r0, #54	; 0x36
 8003e72:	f7ff fc3d 	bl	80036f0 <NVIC_IRQConfig>
	}
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40001000 	.word	0x40001000

08003e84 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a32      	ldr	r2, [pc, #200]	; (8003f5c <TIM_PWM_MspInit+0xd8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d119      	bne.n	8003eca <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	2214      	movs	r2, #20
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fe88 	bl	8005bb4 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003ea4:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <TIM_PWM_MspInit+0xdc>)
 8003ea6:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003ea8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003eac:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fd fc13 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <TIM_PWM_MspInit+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d119      	bne.n	8003f08 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	2214      	movs	r2, #20
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fe69 	bl	8005bb4 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <TIM_PWM_MspInit+0xe4>)
 8003ee4:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003ee6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003eea:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003eec:	2302      	movs	r3, #2
 8003eee:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7fd fbf4 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <TIM_PWM_MspInit+0xe8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d119      	bne.n	8003f46 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	2214      	movs	r2, #20
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fe4a 	bl	8005bb4 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <TIM_PWM_MspInit+0xec>)
 8003f22:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003f24:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003f28:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fd fbd5 	bl	80016f0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe f9ef 	bl	8002330 <TIM_PeripheralClockControl>
}
 8003f52:	bf00      	nop
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40010800 	.word	0x40010800
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40010c00 	.word	0x40010c00

08003f74 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08e      	sub	sp, #56	; 0x38
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f80:	2210      	movs	r2, #16
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fe15 	bl	8005bb4 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 80f1 	bne.w	8004176 <BLDC_MspInit+0x202>
	{
		/************************************************************************
		 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
		 ***********************************************************************/
		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 8003f94:	4b7a      	ldr	r3, [pc, #488]	; (8004180 <BLDC_MspInit+0x20c>)
 8003f96:	4a7b      	ldr	r2, [pc, #492]	; (8004184 <BLDC_MspInit+0x210>)
 8003f98:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 8003f9a:	4b79      	ldr	r3, [pc, #484]	; (8004180 <BLDC_MspInit+0x20c>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 8003fa0:	4b77      	ldr	r3, [pc, #476]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fa8:	2204      	movs	r2, #4
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 8003fac:	4b74      	ldr	r3, [pc, #464]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	4b73      	ldr	r3, [pc, #460]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	4b72      	ldr	r3, [pc, #456]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	4a70      	ldr	r2, [pc, #448]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fbe:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fc2:	4a70      	ldr	r2, [pc, #448]	; (8004184 <BLDC_MspInit+0x210>)
 8003fc4:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 8003fc6:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fc8:	2240      	movs	r2, #64	; 0x40
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 8003fcc:	4b6c      	ldr	r3, [pc, #432]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 8003fd2:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 8003fda:	4b69      	ldr	r3, [pc, #420]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fde:	4b68      	ldr	r3, [pc, #416]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	4b66      	ldr	r3, [pc, #408]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	4a65      	ldr	r2, [pc, #404]	; (8004180 <BLDC_MspInit+0x20c>)
 8003fec:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOA;
 8003fee:	4b64      	ldr	r3, [pc, #400]	; (8004180 <BLDC_MspInit+0x20c>)
 8003ff0:	4a65      	ldr	r2, [pc, #404]	; (8004188 <BLDC_MspInit+0x214>)
 8003ff2:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_5;
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <BLDC_MspInit+0x20c>)
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_6;
 8003ffa:	4b61      	ldr	r3, [pc, #388]	; (8004180 <BLDC_MspInit+0x20c>)
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_7;
 8004000:	4b5f      	ldr	r3, [pc, #380]	; (8004180 <BLDC_MspInit+0x20c>)
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8004006:	4b5e      	ldr	r3, [pc, #376]	; (8004180 <BLDC_MspInit+0x20c>)
 8004008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <BLDC_MspInit+0x20c>)
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	431a      	orrs	r2, r3
 8004010:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <BLDC_MspInit+0x20c>)
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	4313      	orrs	r3, r2
 8004016:	4a5a      	ldr	r2, [pc, #360]	; (8004180 <BLDC_MspInit+0x20c>)
 8004018:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004020:	2301      	movs	r3, #1
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004028:	2301      	movs	r3, #1
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fb5a 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 800403c:	200a      	movs	r0, #10
 800403e:	f7ff fd15 	bl	8003a6c <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6858      	ldr	r0, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	b29b      	uxth	r3, r3
 800404c:	2200      	movs	r2, #0
 800404e:	4619      	mov	r1, r3
 8004050:	f7fd fd8e 	bl	8001b70 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800405a:	2301      	movs	r3, #1
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004062:	2301      	movs	r3, #1
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd fb3d 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004076:	200a      	movs	r0, #10
 8004078:	f7ff fcf8 	bl	8003a6c <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6898      	ldr	r0, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	b29b      	uxth	r3, r3
 8004086:	2200      	movs	r2, #0
 8004088:	4619      	mov	r1, r3
 800408a:	f7fd fd71 	bl	8001b70 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 800408e:	200a      	movs	r0, #10
 8004090:	f7ff fcec 	bl	8003a6c <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6898      	ldr	r0, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	b29b      	uxth	r3, r3
 800409e:	2201      	movs	r2, #1
 80040a0:	4619      	mov	r1, r3
 80040a2:	f7fd fd65 	bl	8001b70 <GPIO_WritePin>
		Delay_ms(10);
 80040a6:	200a      	movs	r0, #10
 80040a8:	f7ff fce0 	bl	8003a6c <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6898      	ldr	r0, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7fd fd59 	bl	8001b70 <GPIO_WritePin>

		/********************************************************************
		 *			Low level init EXTI for Hall Sensor interrupt			*
		 ********************************************************************/
		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 80040be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040c2:	2210      	movs	r2, #16
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fd74 	bl	8005bb4 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <BLDC_MspInit+0x218>)
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd fb03 	bl	80016f0 <GPIO_Init>


		/********************************************************************
		 *				Low level init TIM to generate PWM signals			*
		 ********************************************************************/
		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a28      	ldr	r2, [pc, #160]	; (8004190 <BLDC_MspInit+0x21c>)
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <BLDC_MspInit+0x220>)
 80040f6:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (1-1);	// 72MHz / 1 = 72MHz
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (3600-1);	// 72MHz / 3600 = 20kHz
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004118:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd ffd5 	bl	80020ce <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	221c      	movs	r2, #28
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fd41 	bl	8005bb4 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 8004132:	2360      	movs	r3, #96	; 0x60
 8004134:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f107 010c 	add.w	r1, r7, #12
 8004146:	2200      	movs	r2, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe f80d 	bl	8002168 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f107 010c 	add.w	r1, r7, #12
 800415a:	2204      	movs	r2, #4
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe f803 	bl	8002168 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f107 010c 	add.w	r1, r7, #12
 800416e:	2208      	movs	r2, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f7fd fff9 	bl	8002168 <TIM_PWM_ConfigChannel>
	}
}
 8004176:	bf00      	nop
 8004178:	3738      	adds	r7, #56	; 0x38
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000290 	.word	0x20000290
 8004184:	40010c00 	.word	0x40010c00
 8004188:	40010800 	.word	0x40010800
 800418c:	10310000 	.word	0x10310000
 8004190:	20000404 	.word	0x20000404
 8004194:	40000800 	.word	0x40000800

08004198 <TFT_MspInit>:


void TFT_MspInit(TFT_HandleTypeDef *pTFTHandle)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	2210      	movs	r2, #16
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fd03 	bl	8005bb4 <memset>

	if(pTFTHandle->Instance == TFT1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d16c      	bne.n	8004290 <TFT_MspInit+0xf8>
		/************************************************************************
		 *		  Low level init GPIO of TFT Control pins and Data pins			*
		 ***********************************************************************/

		// 1. Initialize GPIO for Control Pins (nRST, nCS, RS, nWR) to GPIO Output Push-Pull mode
		pTFTHandle->Init.GPIOx_TFT_Control = GPIOA;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a37      	ldr	r2, [pc, #220]	; (8004298 <TFT_MspInit+0x100>)
 80041ba:	605a      	str	r2, [r3, #4]
		pTFTHandle->Init.GPIO_Pin_TFT_nRST = GPIO_PIN_8;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c2:	615a      	str	r2, [r3, #20]
		pTFTHandle->Init.GPIO_Pin_TFT_nCS = GPIO_PIN_9;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ca:	619a      	str	r2, [r3, #24]
		pTFTHandle->Init.GPIO_Pin_TFT_RS = GPIO_PIN_10;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d2:	61da      	str	r2, [r3, #28]
		pTFTHandle->Init.GPIO_Pin_TFT_nWR = GPIO_PIN_11;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041da:	621a      	str	r2, [r3, #32]
		pTFTHandle->Init.GPIO_Pins_TFT_Control = pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS | pTFTHandle->Init.GPIO_Pin_TFT_nWR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60da      	str	r2, [r3, #12]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Control;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80041fc:	2301      	movs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004204:	2303      	movs	r3, #3
 8004206:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Control, &GPIOInit);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fa6c 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004218:	200a      	movs	r0, #10
 800421a:	f7ff fc27 	bl	8003a6c <Delay_ms>

		GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_nWR, pTFTHandle->Init.GPIO_Pin_TFT_RS);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6858      	ldr	r0, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	b29b      	uxth	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	b29b      	uxth	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b299      	uxth	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	f7fd fcb2 	bl	8001bac <GPIO_ModifyPin>

		// 2. Initialize GPIO for Data Pins (D0 ~ D15) to GPIO Output mode
		pTFTHandle->Init.GPIOx_TFT_Data = GPIOC;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a14      	ldr	r2, [pc, #80]	; (800429c <TFT_MspInit+0x104>)
 800424c:	609a      	str	r2, [r3, #8]
		pTFTHandle->Init.GPIO_Pins_TFT_Data = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004254:	611a      	str	r2, [r3, #16]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Data;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800425c:	2301      	movs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004264:	2303      	movs	r3, #3
 8004266:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Data, &GPIOInit);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f107 0208 	add.w	r2, r7, #8
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7fd fa3c 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004278:	200a      	movs	r0, #10
 800427a:	f7ff fbf7 	bl	8003a6c <Delay_ms>

		GPIO_WritePort(pTFTHandle->Init.GPIOx_TFT_Data, pTFTHandle->Init.GPIO_Pins_TFT_Data, GPIO_PIN_RESET);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6898      	ldr	r0, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	b29b      	uxth	r3, r3
 8004288:	2200      	movs	r2, #0
 800428a:	4619      	mov	r1, r3
 800428c:	f7fd fca8 	bl	8001be0 <GPIO_WritePort>
	}
}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40010800 	.word	0x40010800
 800429c:	40011000 	.word	0x40011000

080042a0 <TS_MspInit>:


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80042a8:	f107 0308 	add.w	r3, r7, #8
 80042ac:	2210      	movs	r2, #16
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fc7f 	bl	8005bb4 <memset>

	if(pTSHandle->Instance == TS1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d178      	bne.n	80043b0 <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a3d      	ldr	r2, [pc, #244]	; (80043b8 <TS_MspInit+0x118>)
 80042c2:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2208      	movs	r2, #8
 80042c8:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2210      	movs	r2, #16
 80042ce:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80042d6:	2301      	movs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 80042da:	2303      	movs	r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f107 0208 	add.w	r2, r7, #8
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fa01 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 80042ee:	200a      	movs	r0, #10
 80042f0:	f7ff fbbc 	bl	8003a6c <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6858      	ldr	r0, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2201      	movs	r2, #1
 8004300:	4619      	mov	r1, r3
 8004302:	f7fd fc35 	bl	8001b70 <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	2210      	movs	r2, #16
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fc50 	bl	8005bb4 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f107 0208 	add.w	r2, r7, #8
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f7fd f9df 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004332:	200a      	movs	r0, #10
 8004334:	f7ff fb9a 	bl	8003a6c <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	b29b      	uxth	r3, r3
 8004342:	2200      	movs	r2, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f7fd fc13 	bl	8001b70 <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <TS_MspInit+0x11c>)
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <TS_MspInit+0x120>)
 8004356:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004360:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004372:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2200      	movs	r2, #0
 8004382:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438c:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	2218      	movs	r2, #24
 8004394:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2200      	movs	r2, #0
 800439c:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fdd0 	bl	8001f50 <SPI_Init>
	}
}
 80043b0:	bf00      	nop
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40010c00 	.word	0x40010c00
 80043bc:	20000468 	.word	0x20000468
 80043c0:	40003800 	.word	0x40003800

080043c4 <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	2214      	movs	r2, #20
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fbed 	bl	8005bb4 <memset>

	if(pSPIHandle->Instance == SPI2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <SPI_MspInit+0x88>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d128      	bne.n	8004436 <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <SPI_MspInit+0x8c>)
 80043e6:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 80043e8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80043ec:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 80043ee:	2302      	movs	r3, #2
 80043f0:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fd f975 	bl	80016f0 <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	2214      	movs	r2, #20
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fbd0 	bl	8005bb4 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <SPI_MspInit+0x8c>)
 8004416:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8004418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800441c:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7fd f95d 	bl	80016f0 <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fdd3 	bl	8001fe8 <SPI_PeripheralClockControl>
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40003800 	.word	0x40003800
 8004450:	40010c00 	.word	0x40010c00

08004454 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <_sbrk+0x50>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <_sbrk+0x16>
		heap_end = &end;
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <_sbrk+0x50>)
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <_sbrk+0x54>)
 8004468:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <_sbrk+0x50>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <_sbrk+0x50>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	466a      	mov	r2, sp
 800447a:	4293      	cmp	r3, r2
 800447c:	d907      	bls.n	800448e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800447e:	f001 fb6f 	bl	8005b60 <__errno>
 8004482:	4602      	mov	r2, r0
 8004484:	230c      	movs	r3, #12
 8004486:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e006      	b.n	800449c <_sbrk+0x48>
	}

	heap_end += incr;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <_sbrk+0x50>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <_sbrk+0x50>)
 8004498:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000200 	.word	0x20000200
 80044a8:	200004e0 	.word	0x200004e0

080044ac <TFT_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TFT_Init(TFT_HandleTypeDef *pTFTHandle)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of TFT LCD : GPIO
	TFT_MspInit(pTFTHandle);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff fe6f 	bl	8004198 <TFT_MspInit>

	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_RESET);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6858      	ldr	r0, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7fd fb52 	bl	8001b70 <GPIO_WritePin>
	Delay_ms(1);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f7ff facd 	bl	8003a6c <Delay_ms>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_SET);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6858      	ldr	r0, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2201      	movs	r2, #1
 80044de:	4619      	mov	r1, r3
 80044e0:	f7fd fb46 	bl	8001b70 <GPIO_WritePin>
	Delay_ms(120);
 80044e4:	2078      	movs	r0, #120	; 0x78
 80044e6:	f7ff fac1 	bl	8003a6c <Delay_ms>

	TFT_Write(pTFTHandle, 0x02, 0x0000);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2102      	movs	r1, #2
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9d0 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2103      	movs	r1, #3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f9cb 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 80044fe:	2201      	movs	r2, #1
 8004500:	2104      	movs	r1, #4
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9c6 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8004508:	223f      	movs	r2, #63	; 0x3f
 800450a:	2105      	movs	r1, #5
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f9c1 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004512:	2200      	movs	r2, #0
 8004514:	2106      	movs	r1, #6
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f9bc 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 800451c:	2200      	movs	r2, #0
 800451e:	2107      	movs	r1, #7
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f9b7 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8004526:	2200      	movs	r2, #0
 8004528:	2108      	movs	r1, #8
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9b2 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 8004530:	22ef      	movs	r2, #239	; 0xef
 8004532:	2109      	movs	r1, #9
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9ad 	bl	8004894 <TFT_Write>

	TFT_Write(pTFTHandle, 0x01, 0x0006);
 800453a:	2206      	movs	r2, #6
 800453c:	2101      	movs	r1, #1
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9a8 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x16, 0x0068);
 8004544:	2268      	movs	r2, #104	; 0x68
 8004546:	2116      	movs	r1, #22
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9a3 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x18, 0x0000);
 800454e:	2200      	movs	r2, #0
 8004550:	2118      	movs	r1, #24
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f99e 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x70, 0x0065);
 8004558:	2265      	movs	r2, #101	; 0x65
 800455a:	2170      	movs	r1, #112	; 0x70
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f999 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x23, 0x0095);
 8004562:	2295      	movs	r2, #149	; 0x95
 8004564:	2123      	movs	r1, #35	; 0x23
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f994 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x24, 0x0095);
 800456c:	2295      	movs	r2, #149	; 0x95
 800456e:	2124      	movs	r1, #36	; 0x24
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f98f 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x25, 0x00FF);
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	2125      	movs	r1, #37	; 0x25
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f98a 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x27, 0x0002);
 8004580:	2202      	movs	r2, #2
 8004582:	2127      	movs	r1, #39	; 0x27
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f985 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x28, 0x0002);
 800458a:	2202      	movs	r2, #2
 800458c:	2128      	movs	r1, #40	; 0x28
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f980 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x29, 0x0002);
 8004594:	2202      	movs	r2, #2
 8004596:	2129      	movs	r1, #41	; 0x29
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f97b 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2A, 0x0002);
 800459e:	2202      	movs	r2, #2
 80045a0:	212a      	movs	r1, #42	; 0x2a
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f976 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2C, 0x0002);
 80045a8:	2202      	movs	r2, #2
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f971 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2D, 0x0002);
 80045b2:	2202      	movs	r2, #2
 80045b4:	212d      	movs	r1, #45	; 0x2d
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f96c 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3A, 0x0001);
 80045bc:	2201      	movs	r2, #1
 80045be:	213a      	movs	r1, #58	; 0x3a
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f967 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3B, 0x0001);
 80045c6:	2201      	movs	r2, #1
 80045c8:	213b      	movs	r1, #59	; 0x3b
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f962 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3C, 0x00F0);
 80045d0:	22f0      	movs	r2, #240	; 0xf0
 80045d2:	213c      	movs	r1, #60	; 0x3c
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f95d 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3D, 0x0000);
 80045da:	2200      	movs	r2, #0
 80045dc:	213d      	movs	r1, #61	; 0x3d
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f958 	bl	8004894 <TFT_Write>
	Delay_ms(20);
 80045e4:	2014      	movs	r0, #20
 80045e6:	f7ff fa41 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x35, 0x0038);
 80045ea:	2238      	movs	r2, #56	; 0x38
 80045ec:	2135      	movs	r1, #53	; 0x35
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f950 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x36, 0x0078);
 80045f4:	2278      	movs	r2, #120	; 0x78
 80045f6:	2136      	movs	r1, #54	; 0x36
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f94b 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3E, 0x0038);
 80045fe:	2238      	movs	r2, #56	; 0x38
 8004600:	213e      	movs	r1, #62	; 0x3e
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f946 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x40, 0x000F);
 8004608:	220f      	movs	r2, #15
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f941 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x41, 0x00F0);
 8004612:	22f0      	movs	r2, #240	; 0xf0
 8004614:	2141      	movs	r1, #65	; 0x41
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f93c 	bl	8004894 <TFT_Write>

	TFT_Write(pTFTHandle, 0x19, 0x0049);
 800461c:	2249      	movs	r2, #73	; 0x49
 800461e:	2119      	movs	r1, #25
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f937 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x93, 0x000F);
 8004626:	220f      	movs	r2, #15
 8004628:	2193      	movs	r1, #147	; 0x93
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f932 	bl	8004894 <TFT_Write>
	Delay_ms(10);
 8004630:	200a      	movs	r0, #10
 8004632:	f7ff fa1b 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x20, 0x0040);
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	2120      	movs	r1, #32
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f92a 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1D, 0x0007);
 8004640:	2207      	movs	r2, #7
 8004642:	211d      	movs	r1, #29
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f925 	bl	8004894 <TFT_Write>
	Delay_ms(10);
 800464a:	200a      	movs	r0, #10
 800464c:	f7ff fa0e 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x1E, 0x0000);
 8004650:	2200      	movs	r2, #0
 8004652:	211e      	movs	r1, #30
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f91d 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1F, 0x0004);
 800465a:	2204      	movs	r2, #4
 800465c:	211f      	movs	r1, #31
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f918 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x44, 0x0040);
 8004664:	2240      	movs	r2, #64	; 0x40
 8004666:	2144      	movs	r1, #68	; 0x44
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f913 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x45, 0x0012);
 800466e:	2212      	movs	r2, #18
 8004670:	2145      	movs	r1, #69	; 0x45
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f90e 	bl	8004894 <TFT_Write>
	Delay_ms(10);
 8004678:	200a      	movs	r0, #10
 800467a:	f7ff f9f7 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x1C, 0x0004);
 800467e:	2204      	movs	r2, #4
 8004680:	211c      	movs	r1, #28
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f906 	bl	8004894 <TFT_Write>
	Delay_ms(20);
 8004688:	2014      	movs	r0, #20
 800468a:	f7ff f9ef 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x43, 0x0080);
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	2143      	movs	r1, #67	; 0x43
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8fe 	bl	8004894 <TFT_Write>
	Delay_ms(5);
 8004698:	2005      	movs	r0, #5
 800469a:	f7ff f9e7 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0018);
 800469e:	2218      	movs	r2, #24
 80046a0:	211b      	movs	r1, #27
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8f6 	bl	8004894 <TFT_Write>
	Delay_ms(40);
 80046a8:	2028      	movs	r0, #40	; 0x28
 80046aa:	f7ff f9df 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0010);
 80046ae:	2210      	movs	r2, #16
 80046b0:	211b      	movs	r1, #27
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8ee 	bl	8004894 <TFT_Write>
	Delay_ms(40);
 80046b8:	2028      	movs	r0, #40	; 0x28
 80046ba:	f7ff f9d7 	bl	8003a6c <Delay_ms>

	TFT_Write(pTFTHandle, 0x46, 0x00A4);
 80046be:	22a4      	movs	r2, #164	; 0xa4
 80046c0:	2146      	movs	r1, #70	; 0x46
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8e6 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x47, 0x0053);
 80046c8:	2253      	movs	r2, #83	; 0x53
 80046ca:	2147      	movs	r1, #71	; 0x47
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8e1 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x48, 0x0010);
 80046d2:	2210      	movs	r2, #16
 80046d4:	2148      	movs	r1, #72	; 0x48
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8dc 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x49, 0x005F);
 80046dc:	225f      	movs	r2, #95	; 0x5f
 80046de:	2149      	movs	r1, #73	; 0x49
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8d7 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4A, 0x0004);
 80046e6:	2204      	movs	r2, #4
 80046e8:	214a      	movs	r1, #74	; 0x4a
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8d2 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4B, 0x003F);
 80046f0:	223f      	movs	r2, #63	; 0x3f
 80046f2:	214b      	movs	r1, #75	; 0x4b
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8cd 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4C, 0x0002);
 80046fa:	2202      	movs	r2, #2
 80046fc:	214c      	movs	r1, #76	; 0x4c
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8c8 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4D, 0x00F6);
 8004704:	22f6      	movs	r2, #246	; 0xf6
 8004706:	214d      	movs	r1, #77	; 0x4d
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8c3 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4E, 0x0012);
 800470e:	2212      	movs	r2, #18
 8004710:	214e      	movs	r1, #78	; 0x4e
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8be 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4F, 0x004C);
 8004718:	224c      	movs	r2, #76	; 0x4c
 800471a:	214f      	movs	r1, #79	; 0x4f
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8b9 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x50, 0x0046);
 8004722:	2246      	movs	r2, #70	; 0x46
 8004724:	2150      	movs	r1, #80	; 0x50
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8b4 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x51, 0x0044);
 800472c:	2244      	movs	r2, #68	; 0x44
 800472e:	2151      	movs	r1, #81	; 0x51
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8af 	bl	8004894 <TFT_Write>

	TFT_Write(pTFTHandle, 0x90, 0x007F);
 8004736:	227f      	movs	r2, #127	; 0x7f
 8004738:	2190      	movs	r1, #144	; 0x90
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8aa 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x0004);
 8004740:	2204      	movs	r2, #4
 8004742:	2126      	movs	r1, #38	; 0x26
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8a5 	bl	8004894 <TFT_Write>
	Delay_ms(40);
 800474a:	2028      	movs	r0, #40	; 0x28
 800474c:	f7ff f98e 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x0024);
 8004750:	2224      	movs	r2, #36	; 0x24
 8004752:	2126      	movs	r1, #38	; 0x26
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f89d 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x002C);
 800475a:	222c      	movs	r2, #44	; 0x2c
 800475c:	2126      	movs	r1, #38	; 0x26
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f898 	bl	8004894 <TFT_Write>
	Delay_ms(40);
 8004764:	2028      	movs	r0, #40	; 0x28
 8004766:	f7ff f981 	bl	8003a6c <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x003C);
 800476a:	223c      	movs	r2, #60	; 0x3c
 800476c:	2126      	movs	r1, #38	; 0x26
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f890 	bl	8004894 <TFT_Write>

	TFT_Write(pTFTHandle, 0x57, 0x0002);
 8004774:	2202      	movs	r2, #2
 8004776:	2157      	movs	r1, #87	; 0x57
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f88b 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x55, 0x0000);
 800477e:	2200      	movs	r2, #0
 8004780:	2155      	movs	r1, #85	; 0x55
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f886 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0xFE, 0x005A);
 8004788:	225a      	movs	r2, #90	; 0x5a
 800478a:	21fe      	movs	r1, #254	; 0xfe
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f881 	bl	8004894 <TFT_Write>
	TFT_Write(pTFTHandle, 0x57, 0x0000);
 8004792:	2200      	movs	r2, #0
 8004794:	2157      	movs	r1, #87	; 0x57
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f87c 	bl	8004894 <TFT_Write>

	TFT_Clear_Screen(pTFTHandle);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f88f 	bl	80048c0 <TFT_Clear_Screen>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <TFT_Command>:
	 */
}


void TFT_Command(TFT_HandleTypeDef *pTFTHandle, uint16_t indexRegister)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	807b      	strh	r3, [r7, #2]
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS, GPIO_PIN_RESET);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6858      	ldr	r0, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2200      	movs	r2, #0
 80047cc:	4619      	mov	r1, r3
 80047ce:	f7fd f9cf 	bl	8001b70 <GPIO_WritePin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, indexRegister);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fa14 	bl	8001c08 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6858      	ldr	r0, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2200      	movs	r2, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7fd f9bf 	bl	8001b70 <GPIO_WritePin>
	asm("NOP");
 80047f2:	bf00      	nop
	asm("NOP");
 80047f4:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6858      	ldr	r0, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2201      	movs	r2, #1
 8004802:	4619      	mov	r1, r3
 8004804:	f7fd f9b4 	bl	8001b70 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6858      	ldr	r0, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	b29b      	uxth	r3, r3
 8004812:	2201      	movs	r2, #1
 8004814:	4619      	mov	r1, r3
 8004816:	f7fd f9ab 	bl	8001b70 <GPIO_WritePin>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <TFT_Data>:


void TFT_Data(TFT_HandleTypeDef *pTFTHandle, uint16_t data)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	807b      	strh	r3, [r7, #2]
	GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_RS, pTFTHandle->Init.GPIO_Pin_TFT_nCS);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6858      	ldr	r0, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	b299      	uxth	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	f7fd f9b4 	bl	8001bac <GPIO_ModifyPin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, data);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	887a      	ldrh	r2, [r7, #2]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd f9db 	bl	8001c08 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6858      	ldr	r0, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	b29b      	uxth	r3, r3
 800485c:	2200      	movs	r2, #0
 800485e:	4619      	mov	r1, r3
 8004860:	f7fd f986 	bl	8001b70 <GPIO_WritePin>
	asm("NOP");
 8004864:	bf00      	nop
	asm("NOP");
 8004866:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6858      	ldr	r0, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	b29b      	uxth	r3, r3
 8004872:	2201      	movs	r2, #1
 8004874:	4619      	mov	r1, r3
 8004876:	f7fd f97b 	bl	8001b70 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6858      	ldr	r0, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	b29b      	uxth	r3, r3
 8004884:	2201      	movs	r2, #1
 8004886:	4619      	mov	r1, r3
 8004888:	f7fd f972 	bl	8001b70 <GPIO_WritePin>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <TFT_Write>:


void TFT_Write(TFT_HandleTypeDef *pTFTHandle, uint16_t reg, uint16_t val)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
 80048a0:	4613      	mov	r3, r2
 80048a2:	803b      	strh	r3, [r7, #0]
	TFT_Command(pTFTHandle, reg);
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff7e 	bl	80047aa <TFT_Command>
	TFT_Data(pTFTHandle, val);
 80048ae:	883b      	ldrh	r3, [r7, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffb5 	bl	8004822 <TFT_Data>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <TFT_Clear_Screen>:




void TFT_Clear_Screen(TFT_HandleTypeDef *pTFTHandle)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	TFT_Color_Screen(pTFTHandle, Black);
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f804 	bl	80048d8 <TFT_Color_Screen>
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <TFT_Color_Screen>:


void TFT_Color_Screen(TFT_HandleTypeDef *pTFTHandle, uint16_t color)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
	uint16_t i, j;

	TFT_GRAM_Address(pTFTHandle, 0, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f81c 	bl	8004926 <TFT_GRAM_Address>

	for(i = 0; i < 320; i++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	81fb      	strh	r3, [r7, #14]
 80048f2:	e010      	b.n	8004916 <TFT_Color_Screen+0x3e>
	{
		for(j = 0; j < 240; j++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	81bb      	strh	r3, [r7, #12]
 80048f8:	e007      	b.n	800490a <TFT_Color_Screen+0x32>
		{
			TFT_Data(pTFTHandle, color);
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ff8f 	bl	8004822 <TFT_Data>
		for(j = 0; j < 240; j++)
 8004904:	89bb      	ldrh	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	81bb      	strh	r3, [r7, #12]
 800490a:	89bb      	ldrh	r3, [r7, #12]
 800490c:	2bef      	cmp	r3, #239	; 0xef
 800490e:	d9f4      	bls.n	80048fa <TFT_Color_Screen+0x22>
	for(i = 0; i < 320; i++)
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	3301      	adds	r3, #1
 8004914:	81fb      	strh	r3, [r7, #14]
 8004916:	89fb      	ldrh	r3, [r7, #14]
 8004918:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800491c:	d3ea      	bcc.n	80048f4 <TFT_Color_Screen+0x1c>
		}
	}
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <TFT_GRAM_Address>:


void TFT_GRAM_Address(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	807b      	strh	r3, [r7, #2]
 8004932:	4613      	mov	r3, r2
 8004934:	803b      	strh	r3, [r7, #0]
	if(pTFTHandle->ScreenMode == 'L')
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800493c:	2b4c      	cmp	r3, #76	; 0x4c
 800493e:	d122      	bne.n	8004986 <TFT_GRAM_Address+0x60>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004946:	d245      	bcs.n	80049d4 <TFT_GRAM_Address+0xae>
 8004948:	883b      	ldrh	r3, [r7, #0]
 800494a:	2bef      	cmp	r3, #239	; 0xef
 800494c:	d842      	bhi.n	80049d4 <TFT_GRAM_Address+0xae>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	2102      	movs	r1, #2
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff9b 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	2103      	movs	r1, #3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff93 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 800496e:	2200      	movs	r2, #0
 8004970:	2106      	movs	r1, #6
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ff8e 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004978:	883b      	ldrh	r3, [r7, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	2107      	movs	r1, #7
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ff88 	bl	8004894 <TFT_Write>
 8004984:	e021      	b.n	80049ca <TFT_GRAM_Address+0xa4>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	2bef      	cmp	r3, #239	; 0xef
 800498a:	d825      	bhi.n	80049d8 <TFT_GRAM_Address+0xb2>
 800498c:	883b      	ldrh	r3, [r7, #0]
 800498e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004992:	d221      	bcs.n	80049d8 <TFT_GRAM_Address+0xb2>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004994:	2200      	movs	r2, #0
 8004996:	2102      	movs	r1, #2
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff7b 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	461a      	mov	r2, r3
 80049a2:	2103      	movs	r1, #3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ff75 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 80049aa:	883b      	ldrh	r3, [r7, #0]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	2106      	movs	r1, #6
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff6d 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 80049ba:	883b      	ldrh	r3, [r7, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	2107      	movs	r1, #7
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff ff65 	bl	8004894 <TFT_Write>
	}

	TFT_Command(pTFTHandle, 0x22);
 80049ca:	2122      	movs	r1, #34	; 0x22
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff feec 	bl	80047aa <TFT_Command>
 80049d2:	e002      	b.n	80049da <TFT_GRAM_Address+0xb4>
		if((xPos > 319) || (yPos > 239))	return;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <TFT_GRAM_Address+0xb4>
		if((xPos > 239) || (yPos > 319))	return;
 80049d8:	bf00      	nop
}
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <TFT_xy>:


void TFT_xy(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
 80049ec:	4613      	mov	r3, r2
 80049ee:	70bb      	strb	r3, [r7, #2]
	pTFTHandle->Xcharacter = xChar;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	78ba      	ldrb	r2, [r7, #2]
 80049fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TFT_Pixel>:
	pTFTHandle->background = colorback;
}


void TFT_Pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos, uint16_t color)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	4608      	mov	r0, r1
 8004a14:	4611      	mov	r1, r2
 8004a16:	461a      	mov	r2, r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	817b      	strh	r3, [r7, #10]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	813b      	strh	r3, [r7, #8]
 8004a20:	4613      	mov	r3, r2
 8004a22:	80fb      	strh	r3, [r7, #6]
	if(pTFTHandle->ScreenMode == 'L')
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a2a:	2b4c      	cmp	r3, #76	; 0x4c
 8004a2c:	d122      	bne.n	8004a74 <TFT_Pixel+0x6a>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a34:	d24c      	bcs.n	8004ad0 <TFT_Pixel+0xc6>
 8004a36:	893b      	ldrh	r3, [r7, #8]
 8004a38:	2bef      	cmp	r3, #239	; 0xef
 8004a3a:	d849      	bhi.n	8004ad0 <TFT_Pixel+0xc6>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004a3c:	897b      	ldrh	r3, [r7, #10]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	2102      	movs	r1, #2
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ff24 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004a4c:	897b      	ldrh	r3, [r7, #10]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	2103      	movs	r1, #3
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff1c 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2106      	movs	r1, #6
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff ff17 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2107      	movs	r1, #7
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff ff11 	bl	8004894 <TFT_Write>
 8004a72:	e021      	b.n	8004ab8 <TFT_Pixel+0xae>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004a74:	897b      	ldrh	r3, [r7, #10]
 8004a76:	2bef      	cmp	r3, #239	; 0xef
 8004a78:	d82c      	bhi.n	8004ad4 <TFT_Pixel+0xca>
 8004a7a:	893b      	ldrh	r3, [r7, #8]
 8004a7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a80:	d228      	bcs.n	8004ad4 <TFT_Pixel+0xca>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004a82:	2200      	movs	r2, #0
 8004a84:	2102      	movs	r1, #2
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff04 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2103      	movs	r1, #3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fefe 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2106      	movs	r1, #6
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fef6 	bl	8004894 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2107      	movs	r1, #7
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff feee 	bl	8004894 <TFT_Write>
	}

	if(color != Transparent)	TFT_Write(pTFTHandle, 0x22, color);
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	f640 0221 	movw	r2, #2081	; 0x821
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <TFT_Pixel+0xcc>
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2122      	movs	r1, #34	; 0x22
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fee3 	bl	8004894 <TFT_Write>
 8004ace:	e002      	b.n	8004ad6 <TFT_Pixel+0xcc>
		if((xPos > 319) || (yPos > 239))	return;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <TFT_Pixel+0xcc>
		if((xPos > 239) || (yPos > 319))	return;
 8004ad4:	bf00      	nop
}
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <TFT_String>:
	}
}


void TFT_String(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar, uint16_t colorfore, uint16_t colorback, uint8_t *str)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	70fb      	strb	r3, [r7, #3]
 8004aee:	460b      	mov	r3, r1
 8004af0:	70bb      	strb	r3, [r7, #2]
 8004af2:	4613      	mov	r3, r2
 8004af4:	803b      	strh	r3, [r7, #0]
	uint8_t ch1;

	pTFTHandle->Xcharacter = xChar;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	78ba      	ldrb	r2, [r7, #2]
 8004b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	pTFTHandle->foreground = colorfore;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	883a      	ldrh	r2, [r7, #0]
 8004b0a:	871a      	strh	r2, [r3, #56]	; 0x38
	pTFTHandle->background = colorback;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8b3a      	ldrh	r2, [r7, #24]
 8004b10:	875a      	strh	r2, [r3, #58]	; 0x3a

	pTFTHandle->nextline_flag = 0;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	while(*str)
 8004b1a:	e00e      	b.n	8004b3a <TFT_String+0x5e>
	{
		ch1 = *str;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	73fb      	strb	r3, [r7, #15]
		str++;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3301      	adds	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]

		if(ch1 < 0x80)
 8004b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	db04      	blt.n	8004b3a <TFT_String+0x5e>
		{
			TFT_English(pTFTHandle, ch1);
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f809 	bl	8004b4c <TFT_English>
	while(*str)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ec      	bne.n	8004b1c <TFT_String+0x40>
		}
	}
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <TFT_English>:


void TFT_English(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 8004b4c:	b5b0      	push	{r4, r5, r7, lr}
 8004b4e:	b0c8      	sub	sp, #288	; 0x120
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	6018      	str	r0, [r3, #0]
 8004b56:	460a      	mov	r2, r1
 8004b58:	1cfb      	adds	r3, r7, #3
 8004b5a:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 8; x++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004b62:	e044      	b.n	8004bee <TFT_English+0xa2>
	{
		data = E_font[code][x];
 8004b64:	1cfb      	adds	r3, r7, #3
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004b6c:	497f      	ldr	r1, [pc, #508]	; (8004d6c <TFT_English+0x220>)
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	440a      	add	r2, r1
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004b80:	e02c      	b.n	8004bdc <TFT_English+0x90>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8004b82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <TFT_English+0x60>
 8004b8e:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004b92:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	0109      	lsls	r1, r1, #4
 8004ba2:	440a      	add	r2, r1
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004baa:	e00d      	b.n	8004bc8 <TFT_English+0x7c>
			else				pixel[x][y] = pTFTHandle->background;
 8004bac:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004bb0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004bba:	f107 030c 	add.w	r3, r7, #12
 8004bbe:	0109      	lsls	r1, r1, #4
 8004bc0:	440a      	add	r2, r1
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004bd2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004bdc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	d9ce      	bls.n	8004b82 <TFT_English+0x36>
	for(x = 0; x < 8; x++)
 8004be4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004be8:	3301      	adds	r3, #1
 8004bea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004bee:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004bf2:	2b07      	cmp	r3, #7
 8004bf4:	d9b6      	bls.n	8004b64 <TFT_English+0x18>
		}
	}

	for(x = 0; x < 8; x++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004bfc:	e049      	b.n	8004c92 <TFT_English+0x146>
	{
		data = E_font[code][x+8];
 8004bfe:	1cfb      	adds	r3, r7, #3
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c06:	3308      	adds	r3, #8
 8004c08:	4958      	ldr	r1, [pc, #352]	; (8004d6c <TFT_English+0x220>)
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	440a      	add	r2, r1
 8004c0e:	4413      	add	r3, r2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004c1c:	e030      	b.n	8004c80 <TFT_English+0x134>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8004c1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <TFT_English+0x100>
 8004c2a:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004c2e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004c32:	f103 0208 	add.w	r2, r3, #8
 8004c36:	1d3b      	adds	r3, r7, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	0109      	lsls	r1, r1, #4
 8004c42:	440a      	add	r2, r1
 8004c44:	4601      	mov	r1, r0
 8004c46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004c4a:	e00f      	b.n	8004c6c <TFT_English+0x120>
			else				pixel[x][y+8] = pTFTHandle->background;
 8004c4c:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004c50:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004c54:	f103 0208 	add.w	r2, r3, #8
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	0109      	lsls	r1, r1, #4
 8004c64:	440a      	add	r2, r1
 8004c66:	4601      	mov	r1, r0
 8004c68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004c76:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004c80:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004c84:	2b07      	cmp	r3, #7
 8004c86:	d9ca      	bls.n	8004c1e <TFT_English+0xd2>
	for(x = 0; x < 8; x++)
 8004c88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004c92:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	d9b1      	bls.n	8004bfe <TFT_English+0xb2>
		}
	}

	if(pTFTHandle->outline_flag == 1)
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f040 80ed 	bne.w	8004e82 <TFT_English+0x336>
	{
		for(x = 0; x < 8; x++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004cae:	e0e3      	b.n	8004e78 <TFT_English+0x32c>
		{
			dot0 = E_font[code][x] + E_font[code][x+8]*256;
 8004cb0:	1cfb      	adds	r3, r7, #3
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cb8:	492c      	ldr	r1, [pc, #176]	; (8004d6c <TFT_English+0x220>)
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	1cfb      	adds	r3, r7, #3
 8004cc6:	7819      	ldrb	r1, [r3, #0]
 8004cc8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ccc:	3308      	adds	r3, #8
 8004cce:	4827      	ldr	r0, [pc, #156]	; (8004d6c <TFT_English+0x220>)
 8004cd0:	0109      	lsls	r1, r1, #4
 8004cd2:	4401      	add	r1, r0
 8004cd4:	440b      	add	r3, r1
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			dot1 = dot0 >> 1;
 8004ce4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			dot2 = dot0;
 8004cee:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004cf2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			dot3 = E_font[code][x+1] + E_font[code][x+9]*256;
 8004cf6:	1cfb      	adds	r3, r7, #3
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cfe:	3301      	adds	r3, #1
 8004d00:	491a      	ldr	r1, [pc, #104]	; (8004d6c <TFT_English+0x220>)
 8004d02:	0112      	lsls	r2, r2, #4
 8004d04:	440a      	add	r2, r1
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	1cfb      	adds	r3, r7, #3
 8004d0e:	7819      	ldrb	r1, [r3, #0]
 8004d10:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d14:	3309      	adds	r3, #9
 8004d16:	4815      	ldr	r0, [pc, #84]	; (8004d6c <TFT_English+0x220>)
 8004d18:	0109      	lsls	r1, r1, #4
 8004d1a:	4401      	add	r1, r0
 8004d1c:	440b      	add	r3, r1
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			dot4 = E_font[code][x-1] + E_font[code][x+7]*256;
 8004d2c:	1cfb      	adds	r3, r7, #3
 8004d2e:	781a      	ldrb	r2, [r3, #0]
 8004d30:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d34:	3b01      	subs	r3, #1
 8004d36:	490d      	ldr	r1, [pc, #52]	; (8004d6c <TFT_English+0x220>)
 8004d38:	0112      	lsls	r2, r2, #4
 8004d3a:	440a      	add	r2, r1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	1cfb      	adds	r3, r7, #3
 8004d44:	7819      	ldrb	r1, [r3, #0]
 8004d46:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d4a:	3307      	adds	r3, #7
 8004d4c:	4807      	ldr	r0, [pc, #28]	; (8004d6c <TFT_English+0x220>)
 8004d4e:	0109      	lsls	r1, r1, #4
 8004d50:	4401      	add	r1, r0
 8004d52:	440b      	add	r3, r1
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for(y = 0; y < 15; y++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004d68:	e07d      	b.n	8004e66 <TFT_English+0x31a>
 8004d6a:	bf00      	nop
 8004d6c:	08007cb0 	.word	0x08007cb0
			{
				if(!(dot0 & 0x0001))
 8004d70:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d157      	bne.n	8004e2c <TFT_English+0x2e0>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004d7c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <TFT_English+0x258>
 8004d88:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004d8c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	0109      	lsls	r1, r1, #4
 8004d9c:	440a      	add	r2, r1
 8004d9e:	4601      	mov	r1, r0
 8004da0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004da4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <TFT_English+0x280>
 8004db0:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004db4:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004dbe:	f107 030c 	add.w	r3, r7, #12
 8004dc2:	0109      	lsls	r1, r1, #4
 8004dc4:	440a      	add	r2, r1
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot3 & 0x0001) && (x < 7))		pixel[x][y] = pTFTHandle->outline;
 8004dcc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d011      	beq.n	8004dfc <TFT_English+0x2b0>
 8004dd8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ddc:	2b06      	cmp	r3, #6
 8004dde:	d80d      	bhi.n	8004dfc <TFT_English+0x2b0>
 8004de0:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004de4:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	0109      	lsls	r1, r1, #4
 8004df4:	440a      	add	r2, r1
 8004df6:	4601      	mov	r1, r0
 8004df8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 8004dfc:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d011      	beq.n	8004e2c <TFT_English+0x2e0>
 8004e08:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <TFT_English+0x2e0>
 8004e10:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004e14:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	0109      	lsls	r1, r1, #4
 8004e24:	440a      	add	r2, r1
 8004e26:	4601      	mov	r1, r0
 8004e28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}

				dot1 >>= 1;
 8004e2c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				dot2 = dot0;
 8004e36:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004e3a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				dot0 >>= 1;
 8004e3e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
				dot3 >>= 1;
 8004e48:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				dot4 >>= 1;
 8004e52:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			for(y = 0; y < 15; y++)
 8004e5c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e60:	3301      	adds	r3, #1
 8004e62:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004e66:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e6a:	2b0e      	cmp	r3, #14
 8004e6c:	d980      	bls.n	8004d70 <TFT_English+0x224>
		for(x = 0; x < 8; x++)
 8004e6e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e72:	3301      	adds	r3, #1
 8004e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004e78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	f67f af17 	bls.w	8004cb0 <TFT_English+0x164>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit)
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d324      	bcc.n	8004ee0 <TFT_English+0x394>
	{
		pTFTHandle->nextline_flag = 1;
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		pTFTHandle->Xcharacter = 0;
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		pTFTHandle->Ycharacter += 2;
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit - 1))		pTFTHandle->Ycharacter = 0;
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	db04      	blt.n	8004ee0 <TFT_English+0x394>
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if(pTFTHandle->underscore_flag == 1)
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d118      	bne.n	8004f1e <TFT_English+0x3d2>
	{
		for(x = 0; x < 8; x++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004ef2:	e010      	b.n	8004f16 <TFT_English+0x3ca>
		{
			pixel[x][15] = pTFTHandle->underscore;
 8004ef4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ef8:	1d3a      	adds	r2, r7, #4
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8004efe:	f107 020c 	add.w	r2, r7, #12
 8004f02:	015b      	lsls	r3, r3, #5
 8004f04:	4413      	add	r3, r2
 8004f06:	331e      	adds	r3, #30
 8004f08:	460a      	mov	r2, r1
 8004f0a:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8004f0c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f10:	3301      	adds	r3, #1
 8004f12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004f16:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f1a:	2b07      	cmp	r3, #7
 8004f1c:	d9ea      	bls.n	8004ef4 <TFT_English+0x3a8>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d138      	bne.n	8004f9c <TFT_English+0x450>
 8004f2a:	1d3b      	adds	r3, r7, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d12e      	bne.n	8004f9c <TFT_English+0x450>
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d124      	bne.n	8004f9c <TFT_English+0x450>
	{
		for(x = 0; x < 8; x++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004f58:	e01c      	b.n	8004f94 <TFT_English+0x448>
		{
			pixel[x][14] = pTFTHandle->cursor;
 8004f5a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f5e:	1d3a      	adds	r2, r7, #4
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8004f64:	f107 020c 	add.w	r2, r7, #12
 8004f68:	015b      	lsls	r3, r3, #5
 8004f6a:	4413      	add	r3, r2
 8004f6c:	331c      	adds	r3, #28
 8004f6e:	460a      	mov	r2, r1
 8004f70:	801a      	strh	r2, [r3, #0]
			pixel[x][15] = pTFTHandle->cursor;
 8004f72:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f76:	1d3a      	adds	r2, r7, #4
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8004f7c:	f107 020c 	add.w	r2, r7, #12
 8004f80:	015b      	lsls	r3, r3, #5
 8004f82:	4413      	add	r3, r2
 8004f84:	331e      	adds	r3, #30
 8004f86:	460a      	mov	r2, r1
 8004f88:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8004f8a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004f94:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f98:	2b07      	cmp	r3, #7
 8004f9a:	d9de      	bls.n	8004f5a <TFT_English+0x40e>
		}
	}

	if((pTFTHandle->nextline_flag == 1) && (pTFTHandle->Xcharacter == 0) && (code == ' '))
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10a      	bne.n	8004fbe <TFT_English+0x472>
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <TFT_English+0x472>
 8004fb4:	1cfb      	adds	r3, r7, #3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	f000 8122 	beq.w	8005202 <TFT_English+0x6b6>
	{
		return;
	}
	else if(pTFTHandle->background != Transparent)
 8004fbe:	1d3b      	adds	r3, r7, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004fc4:	f640 0221 	movw	r2, #2081	; 0x821
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f000 80cd 	beq.w	8005168 <TFT_English+0x61c>
	{
		xPos = pTFTHandle->Xcharacter * 8;
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

		for(y = 0; y < 16; y++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004fe4:	e0ba      	b.n	800515c <TFT_English+0x610>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			if(pTFTHandle->ScreenMode == 'L')
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005008:	2b4c      	cmp	r3, #76	; 0x4c
 800500a:	d11f      	bne.n	800504c <TFT_English+0x500>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 800500c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	b29a      	uxth	r2, r3
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	2102      	movs	r1, #2
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	f7ff fc3b 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 800501e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005022:	b2db      	uxtb	r3, r3
 8005024:	b29a      	uxth	r2, r3
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	2103      	movs	r1, #3
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	f7ff fc32 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	2200      	movs	r2, #0
 8005034:	2106      	movs	r1, #6
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f7ff fc2c 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 800503c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	2107      	movs	r1, #7
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f7ff fc25 	bl	8004894 <TFT_Write>
 800504a:	e01e      	b.n	800508a <TFT_English+0x53e>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	2200      	movs	r2, #0
 8005050:	2102      	movs	r1, #2
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f7ff fc1e 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 8005058:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	2103      	movs	r1, #3
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	f7ff fc17 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8005066:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	b29a      	uxth	r2, r3
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	2106      	movs	r1, #6
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	f7ff fc0e 	bl	8004894 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8005078:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800507c:	b2db      	uxtb	r3, r3
 800507e:	b29a      	uxth	r2, r3
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	2107      	movs	r1, #7
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	f7ff fc05 	bl	8004894 <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	2122      	movs	r1, #34	; 0x22
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	f7ff fb8b 	bl	80047aa <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 8005094:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	4611      	mov	r1, r2
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	f7ff fbbc 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 80050aa:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	3210      	adds	r2, #16
 80050b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	4611      	mov	r1, r2
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f7ff fbb0 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 80050c2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050c6:	f107 030c 	add.w	r3, r7, #12
 80050ca:	3220      	adds	r2, #32
 80050cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	4611      	mov	r1, r2
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f7ff fba4 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 80050da:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	3230      	adds	r2, #48	; 0x30
 80050e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	4611      	mov	r1, r2
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f7ff fb98 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 80050f2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	3240      	adds	r2, #64	; 0x40
 80050fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	4611      	mov	r1, r2
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f7ff fb8c 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 800510a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	3250      	adds	r2, #80	; 0x50
 8005114:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	4611      	mov	r1, r2
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f7ff fb80 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 8005122:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005126:	f107 030c 	add.w	r3, r7, #12
 800512a:	3260      	adds	r2, #96	; 0x60
 800512c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	4611      	mov	r1, r2
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f7ff fb74 	bl	8004822 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 800513a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800513e:	f107 030c 	add.w	r3, r7, #12
 8005142:	3270      	adds	r2, #112	; 0x70
 8005144:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	4611      	mov	r1, r2
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f7ff fb68 	bl	8004822 <TFT_Data>
		for(y = 0; y < 16; y++)
 8005152:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005156:	3301      	adds	r3, #1
 8005158:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800515c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005160:	2b0f      	cmp	r3, #15
 8005162:	f67f af40 	bls.w	8004fe6 <TFT_English+0x49a>
 8005166:	e041      	b.n	80051ec <TFT_English+0x6a0>
		}
	}
	else
	{
		for(y = 0; y < 16; y++)
 8005168:	2300      	movs	r3, #0
 800516a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800516e:	e039      	b.n	80051e4 <TFT_English+0x698>
		{
			for(x = 0; x < 8; x++)
 8005170:	2300      	movs	r3, #0
 8005172:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005176:	e02c      	b.n	80051d2 <TFT_English+0x686>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 8 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005180:	b29b      	uxth	r3, r3
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	b29a      	uxth	r2, r3
 8005186:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800518a:	b29b      	uxth	r3, r3
 800518c:	4413      	add	r3, r2
 800518e:	b29c      	uxth	r4, r3
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005198:	b29b      	uxth	r3, r3
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	b29a      	uxth	r2, r3
 800519e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	b29d      	uxth	r5, r3
 80051a8:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80051ac:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80051b0:	f107 030c 	add.w	r3, r7, #12
 80051b4:	0109      	lsls	r1, r1, #4
 80051b6:	440a      	add	r2, r1
 80051b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80051bc:	1d38      	adds	r0, r7, #4
 80051be:	462a      	mov	r2, r5
 80051c0:	4621      	mov	r1, r4
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	f7ff fc21 	bl	8004a0a <TFT_Pixel>
			for(x = 0; x < 8; x++)
 80051c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051cc:	3301      	adds	r3, #1
 80051ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80051d2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051d6:	2b07      	cmp	r3, #7
 80051d8:	d9ce      	bls.n	8005178 <TFT_English+0x62c>
		for(y = 0; y < 16; y++)
 80051da:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80051de:	3301      	adds	r3, #1
 80051e0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80051e4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d9c1      	bls.n	8005170 <TFT_English+0x624>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8005200:	e000      	b.n	8005204 <TFT_English+0x6b8>
		return;
 8005202:	bf00      	nop
}
 8005204:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005208:	46bd      	mov	sp, r7
 800520a:	bdb0      	pop	{r4, r5, r7, pc}

0800520c <TFT_Signed_decimal>:
	}
}


void TFT_Signed_decimal(TFT_HandleTypeDef *pTFTHandle, int32_t number, uint8_t zerofill, uint8_t digit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	460b      	mov	r3, r1
 800521c:	71fb      	strb	r3, [r7, #7]
 800521e:	4613      	mov	r3, r2
 8005220:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, character;
	uint32_t div;

	if((digit == 0) || (digit > 9))		return;
 8005222:	79bb      	ldrb	r3, [r7, #6]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d055      	beq.n	80052d4 <TFT_Signed_decimal+0xc8>
 8005228:	79bb      	ldrb	r3, [r7, #6]
 800522a:	2b09      	cmp	r3, #9
 800522c:	d852      	bhi.n	80052d4 <TFT_Signed_decimal+0xc8>

	if(number >= 0)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db04      	blt.n	800523e <TFT_Signed_decimal+0x32>
	{
		TFT_English(pTFTHandle, '+');
 8005234:	212b      	movs	r1, #43	; 0x2b
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fc88 	bl	8004b4c <TFT_English>
 800523c:	e006      	b.n	800524c <TFT_Signed_decimal+0x40>
	}
	else
	{
		TFT_English(pTFTHandle, '-');
 800523e:	212d      	movs	r1, #45	; 0x2d
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fc83 	bl	8004b4c <TFT_English>
		number = (-1) * number;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	425b      	negs	r3, r3
 800524a:	60bb      	str	r3, [r7, #8]
	}

	div = 1;
 800524c:	2301      	movs	r3, #1
 800524e:	61bb      	str	r3, [r7, #24]

	while(--digit)		div *= 10;
 8005250:	e005      	b.n	800525e <TFT_Signed_decimal+0x52>
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	79bb      	ldrb	r3, [r7, #6]
 8005260:	3b01      	subs	r3, #1
 8005262:	71bb      	strb	r3, [r7, #6]
 8005264:	79bb      	ldrb	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f3      	bne.n	8005252 <TFT_Signed_decimal+0x46>

	zero_flag = zerofill;
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	77fb      	strb	r3, [r7, #31]

	while(div > 0)
 800526e:	e02d      	b.n	80052cc <TFT_Signed_decimal+0xc0>
	{
		character = number / div;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	75fb      	strb	r3, [r7, #23]

		if((character == 0) && (zero_flag == 0) && (div != 1))
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <TFT_Signed_decimal+0x90>
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <TFT_Signed_decimal+0x90>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d007      	beq.n	800529c <TFT_Signed_decimal+0x90>
		{
			TFT_English(pTFTHandle, character + ' ');
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	3320      	adds	r3, #32
 8005290:	b2db      	uxtb	r3, r3
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fc59 	bl	8004b4c <TFT_English>
 800529a:	e008      	b.n	80052ae <TFT_Signed_decimal+0xa2>
		}
		else
		{
			zero_flag = 1;
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character + '0');
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	3330      	adds	r3, #48	; 0x30
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff fc4f 	bl	8004b4c <TFT_English>
		}

		number %= div;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052b6:	69b9      	ldr	r1, [r7, #24]
 80052b8:	fb01 f202 	mul.w	r2, r1, r2
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	60bb      	str	r3, [r7, #8]
		div /= 10;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	4a06      	ldr	r2, [pc, #24]	; (80052dc <TFT_Signed_decimal+0xd0>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	61bb      	str	r3, [r7, #24]
	while(div > 0)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ce      	bne.n	8005270 <TFT_Signed_decimal+0x64>
 80052d2:	e000      	b.n	80052d6 <TFT_Signed_decimal+0xca>
	if((digit == 0) || (digit > 9))		return;
 80052d4:	bf00      	nop
	}
}
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	cccccccd 	.word	0xcccccccd

080052e0 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fe ffd9 	bl	80042a0 <TS_MspInit>
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <Key_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Key_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80052fe:	463b      	mov	r3, r7
 8005300:	2210      	movs	r2, #16
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fc55 	bl	8005bb4 <memset>

	/* Init GPIO of MODE Button */
	GPIOInit.Pin = GPIO_PIN_0;
 800530a:	2301      	movs	r3, #1
 800530c:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <Key_Init+0xbc>)
 8005310:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005312:	2301      	movs	r3, #1
 8005314:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005316:	463b      	mov	r3, r7
 8005318:	4619      	mov	r1, r3
 800531a:	4827      	ldr	r0, [pc, #156]	; (80053b8 <Key_Init+0xc0>)
 800531c:	f7fc f9e8 	bl	80016f0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI0, NVIC_PRIOR_15, ENABLE);
 8005320:	2201      	movs	r2, #1
 8005322:	210f      	movs	r1, #15
 8005324:	2006      	movs	r0, #6
 8005326:	f7fe f9e3 	bl	80036f0 <NVIC_IRQConfig>

	/* Init GPIO of Up Button */
	GPIOInit.Pin = GPIO_PIN_1;
 800532a:	2302      	movs	r3, #2
 800532c:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <Key_Init+0xbc>)
 8005330:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005332:	2301      	movs	r3, #1
 8005334:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005336:	463b      	mov	r3, r7
 8005338:	4619      	mov	r1, r3
 800533a:	481f      	ldr	r0, [pc, #124]	; (80053b8 <Key_Init+0xc0>)
 800533c:	f7fc f9d8 	bl	80016f0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI1, NVIC_PRIOR_15, ENABLE);
 8005340:	2201      	movs	r2, #1
 8005342:	210f      	movs	r1, #15
 8005344:	2007      	movs	r0, #7
 8005346:	f7fe f9d3 	bl	80036f0 <NVIC_IRQConfig>

	/* Init GPIO of Down Button */
	GPIOInit.Pin = GPIO_PIN_2;
 800534a:	2304      	movs	r3, #4
 800534c:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <Key_Init+0xbc>)
 8005350:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005352:	2301      	movs	r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005356:	463b      	mov	r3, r7
 8005358:	4619      	mov	r1, r3
 800535a:	4817      	ldr	r0, [pc, #92]	; (80053b8 <Key_Init+0xc0>)
 800535c:	f7fc f9c8 	bl	80016f0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI2, NVIC_PRIOR_15, ENABLE);
 8005360:	2201      	movs	r2, #1
 8005362:	210f      	movs	r1, #15
 8005364:	2008      	movs	r0, #8
 8005366:	f7fe f9c3 	bl	80036f0 <NVIC_IRQConfig>

	/* Init GPIO of START/STOP Button */
	GPIOInit.Pin = GPIO_PIN_3;
 800536a:	2308      	movs	r3, #8
 800536c:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <Key_Init+0xbc>)
 8005370:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005372:	2301      	movs	r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005376:	463b      	mov	r3, r7
 8005378:	4619      	mov	r1, r3
 800537a:	480f      	ldr	r0, [pc, #60]	; (80053b8 <Key_Init+0xc0>)
 800537c:	f7fc f9b8 	bl	80016f0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI3, NVIC_PRIOR_15, ENABLE);
 8005380:	2201      	movs	r2, #1
 8005382:	210f      	movs	r1, #15
 8005384:	2009      	movs	r0, #9
 8005386:	f7fe f9b3 	bl	80036f0 <NVIC_IRQConfig>

	/* Init GPIO of EMERGENCY STOP Button */
	GPIOInit.Pin = GPIO_PIN_4;
 800538a:	2310      	movs	r3, #16
 800538c:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <Key_Init+0xbc>)
 8005390:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005392:	2301      	movs	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005396:	463b      	mov	r3, r7
 8005398:	4619      	mov	r1, r3
 800539a:	4807      	ldr	r0, [pc, #28]	; (80053b8 <Key_Init+0xc0>)
 800539c:	f7fc f9a8 	bl	80016f0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI4, NVIC_PRIOR_15, ENABLE);
 80053a0:	2201      	movs	r2, #1
 80053a2:	210f      	movs	r1, #15
 80053a4:	200a      	movs	r0, #10
 80053a6:	f7fe f9a3 	bl	80036f0 <NVIC_IRQConfig>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	10210000 	.word	0x10210000
 80053b8:	40010800 	.word	0x40010800

080053bc <BLDC1_Init>:


void BLDC1_Init(void)
{
 80053bc:	b598      	push	{r3, r4, r7, lr}
 80053be:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <BLDC1_Init+0x180>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 80053c6:	4b5d      	ldr	r3, [pc, #372]	; (800553c <BLDC1_Init+0x180>)
 80053c8:	2208      	movs	r2, #8
 80053ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 80053ce:	4b5b      	ldr	r3, [pc, #364]	; (800553c <BLDC1_Init+0x180>)
 80053d0:	2204      	movs	r2, #4
 80053d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 80053d6:	4b59      	ldr	r3, [pc, #356]	; (800553c <BLDC1_Init+0x180>)
 80053d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb f81f 	bl	8000424 <__aeabi_i2d>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	f04f 0000 	mov.w	r0, #0
 80053f2:	4953      	ldr	r1, [pc, #332]	; (8005540 <BLDC1_Init+0x184>)
 80053f4:	f7fb f9aa 	bl	800074c <__aeabi_ddiv>
 80053f8:	4603      	mov	r3, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	4618      	mov	r0, r3
 80053fe:	4621      	mov	r1, r4
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <BLDC1_Init+0x188>)
 8005406:	f7fb f9a1 	bl	800074c <__aeabi_ddiv>
 800540a:	4603      	mov	r3, r0
 800540c:	460c      	mov	r4, r1
 800540e:	4a4b      	ldr	r2, [pc, #300]	; (800553c <BLDC1_Init+0x180>)
 8005410:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8005414:	4b49      	ldr	r3, [pc, #292]	; (800553c <BLDC1_Init+0x180>)
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 800541c:	4b47      	ldr	r3, [pc, #284]	; (800553c <BLDC1_Init+0x180>)
 800541e:	2200      	movs	r2, #0
 8005420:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8005422:	4b46      	ldr	r3, [pc, #280]	; (800553c <BLDC1_Init+0x180>)
 8005424:	2200      	movs	r2, #0
 8005426:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8005428:	4a44      	ldr	r2, [pc, #272]	; (800553c <BLDC1_Init+0x180>)
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	f04f 0400 	mov.w	r4, #0
 8005432:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 8005436:	4a41      	ldr	r2, [pc, #260]	; (800553c <BLDC1_Init+0x180>)
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	f04f 0400 	mov.w	r4, #0
 8005440:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 8005444:	4a3d      	ldr	r2, [pc, #244]	; (800553c <BLDC1_Init+0x180>)
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 8005452:	4a3a      	ldr	r2, [pc, #232]	; (800553c <BLDC1_Init+0x180>)
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	f04f 0400 	mov.w	r4, #0
 800545c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8005460:	4a36      	ldr	r2, [pc, #216]	; (800553c <BLDC1_Init+0x180>)
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f04f 0400 	mov.w	r4, #0
 800546a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 800546e:	4a33      	ldr	r2, [pc, #204]	; (800553c <BLDC1_Init+0x180>)
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	f04f 0400 	mov.w	r4, #0
 8005478:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 800547c:	4a2f      	ldr	r2, [pc, #188]	; (800553c <BLDC1_Init+0x180>)
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	f04f 0400 	mov.w	r4, #0
 8005486:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <BLDC1_Init+0x180>)
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8005498:	4a28      	ldr	r2, [pc, #160]	; (800553c <BLDC1_Init+0x180>)
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	f04f 0400 	mov.w	r4, #0
 80054a2:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 80054a6:	4a25      	ldr	r2, [pc, #148]	; (800553c <BLDC1_Init+0x180>)
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 80054b4:	4a21      	ldr	r2, [pc, #132]	; (800553c <BLDC1_Init+0x180>)
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	f04f 0400 	mov.w	r4, #0
 80054be:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <BLDC1_Init+0x180>)
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	f04f 0400 	mov.w	r4, #0
 80054cc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 80054d0:	4a1a      	ldr	r2, [pc, #104]	; (800553c <BLDC1_Init+0x180>)
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 80054de:	4a17      	ldr	r2, [pc, #92]	; (800553c <BLDC1_Init+0x180>)
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <BLDC1_Init+0x180>)
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	f04f 0400 	mov.w	r4, #0
 80054f6:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <BLDC1_Init+0x180>)
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 8005508:	4a0c      	ldr	r2, [pc, #48]	; (800553c <BLDC1_Init+0x180>)
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <BLDC1_Init+0x180>)
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 8005524:	4a05      	ldr	r2, [pc, #20]	; (800553c <BLDC1_Init+0x180>)
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 8005532:	4802      	ldr	r0, [pc, #8]	; (800553c <BLDC1_Init+0x180>)
 8005534:	f7fd fa35 	bl	80029a2 <BLDC_Init>
}
 8005538:	bf00      	nop
 800553a:	bd98      	pop	{r3, r4, r7, pc}
 800553c:	20000290 	.word	0x20000290
 8005540:	404e0000 	.word	0x404e0000
 8005544:	40100000 	.word	0x40100000

08005548 <UART3_Init>:


void UART3_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
	UART3Handle.Instance = USART3;
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <UART3_Init+0x48>)
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <UART3_Init+0x4c>)
 8005550:	601a      	str	r2, [r3, #0]
	UART3Handle.Init.Mode = UART_MODE_TX;
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <UART3_Init+0x48>)
 8005554:	2208      	movs	r2, #8
 8005556:	615a      	str	r2, [r3, #20]
	UART3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <UART3_Init+0x48>)
 800555a:	2200      	movs	r2, #0
 800555c:	61da      	str	r2, [r3, #28]
	UART3Handle.Init.BaudRate = USART_STD_BAUD_115200;
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <UART3_Init+0x48>)
 8005560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005564:	605a      	str	r2, [r3, #4]
	UART3Handle.Init.Parity = UART_PARITY_NONE;
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <UART3_Init+0x48>)
 8005568:	2200      	movs	r2, #0
 800556a:	611a      	str	r2, [r3, #16]
	UART3Handle.Init.StopBits = UART_STOPBITS_1;
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <UART3_Init+0x48>)
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
	UART3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <UART3_Init+0x48>)
 8005574:	2200      	movs	r2, #0
 8005576:	619a      	str	r2, [r3, #24]
	UART3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <UART3_Init+0x48>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
	UART3Handle.hdmatx = &DMA1Handle;
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <UART3_Init+0x48>)
 8005580:	4a05      	ldr	r2, [pc, #20]	; (8005598 <UART3_Init+0x50>)
 8005582:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART3Handle);
 8005584:	4802      	ldr	r0, [pc, #8]	; (8005590 <UART3_Init+0x48>)
 8005586:	f7fd f813 	bl	80025b0 <USART_Init>
}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000388 	.word	0x20000388
 8005594:	40004800 	.word	0x40004800
 8005598:	20000424 	.word	0x20000424

0800559c <TIM6_Init>:


void TIM6_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 80055a0:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <TIM6_Init+0x5c>)
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <TIM6_Init+0x60>)
 80055a4:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <TIM6_Init+0x5c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <TIM6_Init+0x5c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <TIM6_Init+0x5c>)
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <TIM6_Init+0x5c>)
 80055ba:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80055be:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 80055c0:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <TIM6_Init+0x5c>)
 80055c2:	2209      	movs	r2, #9
 80055c4:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <TIM6_Init+0x5c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 80055cc:	480a      	ldr	r0, [pc, #40]	; (80055f8 <TIM6_Init+0x5c>)
 80055ce:	f7fc fd65 	bl	800209c <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <TIM6_Init+0x5c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <TIM6_Init+0x5c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <TIM6_Init+0x5c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <TIM6_Init+0x5c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200004bc 	.word	0x200004bc
 80055fc:	40001000 	.word	0x40001000

08005600 <DMA1_Init>:


void DMA1_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <DMA1_Init+0x20>)
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	4a05      	ldr	r2, [pc, #20]	; (8005620 <DMA1_Init+0x20>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL2, NVIC_PRIOR_15, ENABLE);
 8005610:	2201      	movs	r2, #1
 8005612:	210f      	movs	r1, #15
 8005614:	200c      	movs	r0, #12
 8005616:	f7fe f86b 	bl	80036f0 <NVIC_IRQConfig>
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000

08005624 <TFT1_Init>:


void TFT1_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
	TFT1Handle.Instance = TFT1;
 8005628:	4b13      	ldr	r3, [pc, #76]	; (8005678 <TFT1_Init+0x54>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
	TFT1Handle.ScreenMode = 'L';
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <TFT1_Init+0x54>)
 8005630:	224c      	movs	r2, #76	; 0x4c
 8005632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TFT1Handle.XcharacterLimit = 40;
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <TFT1_Init+0x54>)
 8005638:	2228      	movs	r2, #40	; 0x28
 800563a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	TFT1Handle.YcharacterLimit = 30;
 800563e:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <TFT1_Init+0x54>)
 8005640:	221e      	movs	r2, #30
 8005642:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	TFT1Handle.nextline_flag = 0;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <TFT1_Init+0x54>)
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	TFT1Handle.cursor_flag = 0;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <TFT1_Init+0x54>)
 8005650:	2200      	movs	r2, #0
 8005652:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	TFT1Handle.underscore_flag = 0;
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <TFT1_Init+0x54>)
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	TFT1Handle.outline_flag = 0;
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <TFT1_Init+0x54>)
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	TFT1Handle.Kfont_type = 'M';
 8005666:	4b04      	ldr	r3, [pc, #16]	; (8005678 <TFT1_Init+0x54>)
 8005668:	224d      	movs	r2, #77	; 0x4d
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	TFT_Init(&TFT1Handle);
 800566e:	4802      	ldr	r0, [pc, #8]	; (8005678 <TFT1_Init+0x54>)
 8005670:	f7fe ff1c 	bl	80044ac <TFT_Init>
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}
 8005678:	200003c4 	.word	0x200003c4

0800567c <TS1_Init>:


void TS1_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <TS1_Init+0x58>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <TS1_Init+0x58>)
 8005688:	2200      	movs	r2, #0
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <TS1_Init+0x58>)
 800568e:	2200      	movs	r2, #0
 8005690:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <TS1_Init+0x58>)
 8005694:	2200      	movs	r2, #0
 8005696:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <TS1_Init+0x58>)
 800569a:	2200      	movs	r2, #0
 800569c:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <TS1_Init+0x58>)
 80056a0:	22fa      	movs	r2, #250	; 0xfa
 80056a2:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <TS1_Init+0x58>)
 80056a6:	f640 6274 	movw	r2, #3700	; 0xe74
 80056aa:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <TS1_Init+0x58>)
 80056ae:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80056b2:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <TS1_Init+0x58>)
 80056b6:	f640 62a6 	movw	r2, #3750	; 0xea6
 80056ba:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <TS1_Init+0x58>)
 80056be:	22d0      	movs	r2, #208	; 0xd0
 80056c0:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <TS1_Init+0x58>)
 80056c4:	2290      	movs	r2, #144	; 0x90
 80056c6:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <TS1_Init+0x58>)
 80056ca:	f7ff fe09 	bl	80052e0 <TS_Init>
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000260 	.word	0x20000260

080056d8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b087      	sub	sp, #28
 80056dc:	af02      	add	r7, sp, #8
 80056de:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(KeyFlag == FLAG_RESET)
 80056e0:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <TIM_PeriodElapsedCallback+0x1f8>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_4);
 80056e8:	4b7a      	ldr	r3, [pc, #488]	; (80058d4 <TIM_PeriodElapsedCallback+0x1fc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <TIM_PeriodElapsedCallback+0x28>
		{
			KeyFlag = FLAG_SET;
 80056fa:	4b75      	ldr	r3, [pc, #468]	; (80058d0 <TIM_PeriodElapsedCallback+0x1f8>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a74      	ldr	r2, [pc, #464]	; (80058d8 <TIM_PeriodElapsedCallback+0x200>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f040 80d6 	bne.w	80058b8 <TIM_PeriodElapsedCallback+0x1e0>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 800570c:	4b73      	ldr	r3, [pc, #460]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800570e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005712:	2b01      	cmp	r3, #1
 8005714:	f040 8097 	bne.w	8005846 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 8005718:	4b71      	ldr	r3, [pc, #452]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b63      	cmp	r3, #99	; 0x63
 800571e:	f340 80c6 	ble.w	80058ae <TIM_PeriodElapsedCallback+0x1d6>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8005722:	a367      	add	r3, pc, #412	; (adr r3, 80058c0 <TIM_PeriodElapsedCallback+0x1e8>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	486c      	ldr	r0, [pc, #432]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800572a:	f7fd f9dd 	bl	8002ae8 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 800572e:	a364      	add	r3, pc, #400	; (adr r3, 80058c0 <TIM_PeriodElapsedCallback+0x1e8>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	4869      	ldr	r0, [pc, #420]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 8005736:	f7fd fcc7 	bl	80030c8 <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART3 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 800573a:	4b68      	ldr	r3, [pc, #416]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800573c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8005740:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005744:	4618      	mov	r0, r3
 8005746:	4621      	mov	r1, r4
 8005748:	f7fb f986 	bl	8000a58 <__aeabi_d2iz>
 800574c:	4603      	mov	r3, r0
 800574e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8005750:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfb8      	it	lt
 8005758:	425b      	neglt	r3, r3
 800575a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 800575c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	db02      	blt.n	800576a <TIM_PeriodElapsedCallback+0x92>
 8005764:	232b      	movs	r3, #43	; 0x2b
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e005      	b.n	8005776 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 800576a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da01      	bge.n	8005776 <TIM_PeriodElapsedCallback+0x9e>
 8005772:	232d      	movs	r3, #45	; 0x2d
 8005774:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8005776:	4a5b      	ldr	r2, [pc, #364]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 800577c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005780:	4a59      	ldr	r2, [pc, #356]	; (80058e8 <TIM_PeriodElapsedCallback+0x210>)
 8005782:	fb82 1203 	smull	r1, r2, r2, r3
 8005786:	1192      	asrs	r2, r2, #6
 8005788:	17db      	asrs	r3, r3, #31
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	b21b      	sxth	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	3330      	adds	r3, #48	; 0x30
 8005792:	b2da      	uxtb	r2, r3
 8005794:	4b53      	ldr	r3, [pc, #332]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 8005796:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8005798:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800579c:	4a52      	ldr	r2, [pc, #328]	; (80058e8 <TIM_PeriodElapsedCallback+0x210>)
 800579e:	fb82 1203 	smull	r1, r2, r2, r3
 80057a2:	1191      	asrs	r1, r2, #6
 80057a4:	17da      	asrs	r2, r3, #31
 80057a6:	1a8a      	subs	r2, r1, r2
 80057a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057ac:	fb01 f202 	mul.w	r2, r1, r2
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	b21b      	sxth	r3, r3
 80057b4:	4a4d      	ldr	r2, [pc, #308]	; (80058ec <TIM_PeriodElapsedCallback+0x214>)
 80057b6:	fb82 1203 	smull	r1, r2, r2, r3
 80057ba:	1152      	asrs	r2, r2, #5
 80057bc:	17db      	asrs	r3, r3, #31
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b21b      	sxth	r3, r3
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	3330      	adds	r3, #48	; 0x30
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b46      	ldr	r3, [pc, #280]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 80057ca:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 80057cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057d0:	4a46      	ldr	r2, [pc, #280]	; (80058ec <TIM_PeriodElapsedCallback+0x214>)
 80057d2:	fb82 1203 	smull	r1, r2, r2, r3
 80057d6:	1151      	asrs	r1, r2, #5
 80057d8:	17da      	asrs	r2, r3, #31
 80057da:	1a8a      	subs	r2, r1, r2
 80057dc:	2164      	movs	r1, #100	; 0x64
 80057de:	fb01 f202 	mul.w	r2, r1, r2
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	b21b      	sxth	r3, r3
 80057e6:	4a42      	ldr	r2, [pc, #264]	; (80058f0 <TIM_PeriodElapsedCallback+0x218>)
 80057e8:	fb82 1203 	smull	r1, r2, r2, r3
 80057ec:	1092      	asrs	r2, r2, #2
 80057ee:	17db      	asrs	r3, r3, #31
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	3330      	adds	r3, #48	; 0x30
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 80057fc:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 80057fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005802:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <TIM_PeriodElapsedCallback+0x218>)
 8005804:	fb83 1302 	smull	r1, r3, r3, r2
 8005808:	1099      	asrs	r1, r3, #2
 800580a:	17d3      	asrs	r3, r2, #31
 800580c:	1ac9      	subs	r1, r1, r3
 800580e:	460b      	mov	r3, r1
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	b21b      	sxth	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3330      	adds	r3, #48	; 0x30
 800581e:	b2da      	uxtb	r2, r3
 8005820:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 8005822:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 8005824:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 8005826:	220a      	movs	r2, #10
 8005828:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART3Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 800582a:	482e      	ldr	r0, [pc, #184]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 800582c:	f7fa fca0 	bl	8000170 <strlen>
 8005830:	4603      	mov	r3, r0
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	492b      	ldr	r1, [pc, #172]	; (80058e4 <TIM_PeriodElapsedCallback+0x20c>)
 8005838:	482e      	ldr	r0, [pc, #184]	; (80058f4 <TIM_PeriodElapsedCallback+0x21c>)
 800583a:	f7fd f825 	bl	8002888 <UART_Transmit_DMA>

				count = 0;
 800583e:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e033      	b.n	80058ae <TIM_PeriodElapsedCallback+0x1d6>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8005846:	4b25      	ldr	r3, [pc, #148]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 8005848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584c:	2b02      	cmp	r3, #2
 800584e:	d12e      	bne.n	80058ae <TIM_PeriodElapsedCallback+0x1d6>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8005850:	a31d      	add	r3, pc, #116	; (adr r3, 80058c8 <TIM_PeriodElapsedCallback+0x1f0>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	4821      	ldr	r0, [pc, #132]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 8005858:	f7fd fc9a 	bl	8003190 <BLDC_PositionPID>

			startFlag = FLAG_SET;
 800585c:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <TIM_PeriodElapsedCallback+0x220>)
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]

			/* Transmit Motor Position value to PC through UART3 */
			if(count >= 2)		// Every 2ms
 8005862:	4b1f      	ldr	r3, [pc, #124]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	dd21      	ble.n	80058ae <TIM_PeriodElapsedCallback+0x1d6>
			{
				if(BLDC1Handle.RotationDir == CW)			sign = '+';
 800586a:	4b1c      	ldr	r3, [pc, #112]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800586c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <TIM_PeriodElapsedCallback+0x1a2>
 8005874:	232b      	movs	r3, #43	; 0x2b
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	e006      	b.n	8005888 <TIM_PeriodElapsedCallback+0x1b0>
				else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <TIM_PeriodElapsedCallback+0x1b0>
 8005884:	232d      	movs	r3, #45	; 0x2d
 8005886:	73fb      	strb	r3, [r7, #15]

				//sprintf(Msg1, "%.2lf, %.2lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
				sprintf(Msg1, "%.2lf,%.2lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition);	// To see the case of TrjCurPosition
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 800588a:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <TIM_PeriodElapsedCallback+0x204>)
 8005890:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8005894:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005898:	e9cd 3400 	strd	r3, r4, [sp]
 800589c:	4613      	mov	r3, r2
 800589e:	460a      	mov	r2, r1
 80058a0:	4916      	ldr	r1, [pc, #88]	; (80058fc <TIM_PeriodElapsedCallback+0x224>)
 80058a2:	4817      	ldr	r0, [pc, #92]	; (8005900 <TIM_PeriodElapsedCallback+0x228>)
 80058a4:	f000 fdde 	bl	8006464 <siprintf>

				//UART_Transmit_DMA(&UART3Handle, (uint8_t*)Msg1, strlen((char*)Msg1));

				count = 0;
 80058a8:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
			}
		}


		count++;
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <TIM_PeriodElapsedCallback+0x208>)
 80058b6:	6013      	str	r3, [r2, #0]
	}
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd90      	pop	{r4, r7, pc}
 80058c0:	9999999a 	.word	0x9999999a
 80058c4:	3fb99999 	.word	0x3fb99999
 80058c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80058cc:	3f50624d 	.word	0x3f50624d
 80058d0:	20000204 	.word	0x20000204
 80058d4:	40010800 	.word	0x40010800
 80058d8:	40001000 	.word	0x40001000
 80058dc:	20000290 	.word	0x20000290
 80058e0:	20000254 	.word	0x20000254
 80058e4:	20000218 	.word	0x20000218
 80058e8:	10624dd3 	.word	0x10624dd3
 80058ec:	51eb851f 	.word	0x51eb851f
 80058f0:	66666667 	.word	0x66666667
 80058f4:	20000388 	.word	0x20000388
 80058f8:	20000205 	.word	0x20000205
 80058fc:	08007ca0 	.word	0x08007ca0
 8005900:	20000220 	.word	0x20000220

08005904 <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	/* When EXTI is triggered by Hall Sensors */
	if(GPIO_Pin == BLDC1Handle.Init.GPIO_Pins_Hall)
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <EXTI_Callback+0xbc>)
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d110      	bne.n	8005938 <EXTI_Callback+0x34>
	{
		// 1. Detect current HallPhase location
		BLDC1Handle.HallPhase = (READ_BIT(GPIOA->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 5U;
 8005916:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <EXTI_Callback+0xc0>)
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <EXTI_Callback+0xbc>)
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	b29a      	uxth	r2, r3
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <EXTI_Callback+0xbc>)
 8005926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		// 2. Get current position value
		BLDC_Get_Position(&BLDC1Handle);
 800592a:	4825      	ldr	r0, [pc, #148]	; (80059c0 <EXTI_Callback+0xbc>)
 800592c:	f7fd f92a 	bl	8002b84 <BLDC_Get_Position>

		// 3. Drive BLDC motor according to HallPhase location
		BLDC_Drive(&BLDC1Handle);
 8005930:	4823      	ldr	r0, [pc, #140]	; (80059c0 <EXTI_Callback+0xbc>)
 8005932:	f7fd f841 	bl	80029b8 <BLDC_Drive>
			Key3_count++;
		}
	}

	UNUSED(GPIO_Pin);
}
 8005936:	e03f      	b.n	80059b8 <EXTI_Callback+0xb4>
	else if(GPIO_Pin == GPIO_PIN_0)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d111      	bne.n	8005962 <EXTI_Callback+0x5e>
		if( (Key0_count >= 4) || (Key0_count < 0) )
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <EXTI_Callback+0xc4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b03      	cmp	r3, #3
 8005944:	dc03      	bgt.n	800594e <EXTI_Callback+0x4a>
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <EXTI_Callback+0xc4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da03      	bge.n	8005956 <EXTI_Callback+0x52>
			Key0_count = 0;
 800594e:	4b1e      	ldr	r3, [pc, #120]	; (80059c8 <EXTI_Callback+0xc4>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	e030      	b.n	80059b8 <EXTI_Callback+0xb4>
			Key0_count++;
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <EXTI_Callback+0xc4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <EXTI_Callback+0xc4>)
 800595e:	6013      	str	r3, [r2, #0]
}
 8005960:	e02a      	b.n	80059b8 <EXTI_Callback+0xb4>
	else if(GPIO_Pin == GPIO_PIN_1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d105      	bne.n	8005974 <EXTI_Callback+0x70>
		Key1_count++;
 8005968:	4b18      	ldr	r3, [pc, #96]	; (80059cc <EXTI_Callback+0xc8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	4a17      	ldr	r2, [pc, #92]	; (80059cc <EXTI_Callback+0xc8>)
 8005970:	6013      	str	r3, [r2, #0]
}
 8005972:	e021      	b.n	80059b8 <EXTI_Callback+0xb4>
	else if(GPIO_Pin == GPIO_PIN_2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d105      	bne.n	8005986 <EXTI_Callback+0x82>
		Key1_count--;
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <EXTI_Callback+0xc8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a12      	ldr	r2, [pc, #72]	; (80059cc <EXTI_Callback+0xc8>)
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	e018      	b.n	80059b8 <EXTI_Callback+0xb4>
	else if(GPIO_Pin == GPIO_PIN_3)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d105      	bne.n	8005998 <EXTI_Callback+0x94>
		Key2_count++;
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <EXTI_Callback+0xcc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <EXTI_Callback+0xcc>)
 8005994:	6013      	str	r3, [r2, #0]
}
 8005996:	e00f      	b.n	80059b8 <EXTI_Callback+0xb4>
	else if(GPIO_Pin == GPIO_PIN_4)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b10      	cmp	r3, #16
 800599c:	d10c      	bne.n	80059b8 <EXTI_Callback+0xb4>
		if(Key3_count >= 1)
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <EXTI_Callback+0xd0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dd03      	ble.n	80059ae <EXTI_Callback+0xaa>
			Key3_count = 0;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <EXTI_Callback+0xd0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
}
 80059ac:	e004      	b.n	80059b8 <EXTI_Callback+0xb4>
			Key3_count++;
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <EXTI_Callback+0xd0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <EXTI_Callback+0xd0>)
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000290 	.word	0x20000290
 80059c4:	40010800 	.word	0x40010800
 80059c8:	20000208 	.word	0x20000208
 80059cc:	2000020c 	.word	0x2000020c
 80059d0:	20000210 	.word	0x20000210
 80059d4:	20000214 	.word	0x20000214

080059d8 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 80059dc:	2220      	movs	r2, #32
 80059de:	2100      	movs	r1, #0
 80059e0:	4813      	ldr	r0, [pc, #76]	; (8005a30 <MemsetHandleStructure+0x58>)
 80059e2:	f000 f8e7 	bl	8005bb4 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 80059e6:	2220      	movs	r2, #32
 80059e8:	2100      	movs	r1, #0
 80059ea:	4812      	ldr	r0, [pc, #72]	; (8005a34 <MemsetHandleStructure+0x5c>)
 80059ec:	f000 f8e2 	bl	8005bb4 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 80059f0:	22f8      	movs	r2, #248	; 0xf8
 80059f2:	2100      	movs	r1, #0
 80059f4:	4810      	ldr	r0, [pc, #64]	; (8005a38 <MemsetHandleStructure+0x60>)
 80059f6:	f000 f8dd 	bl	8005bb4 <memset>
	memset(&UART3Handle, 0, sizeof(UART3Handle));
 80059fa:	223c      	movs	r2, #60	; 0x3c
 80059fc:	2100      	movs	r1, #0
 80059fe:	480f      	ldr	r0, [pc, #60]	; (8005a3c <MemsetHandleStructure+0x64>)
 8005a00:	f000 f8d8 	bl	8005bb4 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8005a04:	2244      	movs	r2, #68	; 0x44
 8005a06:	2100      	movs	r1, #0
 8005a08:	480d      	ldr	r0, [pc, #52]	; (8005a40 <MemsetHandleStructure+0x68>)
 8005a0a:	f000 f8d3 	bl	8005bb4 <memset>
	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	2100      	movs	r1, #0
 8005a12:	480c      	ldr	r0, [pc, #48]	; (8005a44 <MemsetHandleStructure+0x6c>)
 8005a14:	f000 f8ce 	bl	8005bb4 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8005a18:	2230      	movs	r2, #48	; 0x30
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	480a      	ldr	r0, [pc, #40]	; (8005a48 <MemsetHandleStructure+0x70>)
 8005a1e:	f000 f8c9 	bl	8005bb4 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8005a22:	2254      	movs	r2, #84	; 0x54
 8005a24:	2100      	movs	r1, #0
 8005a26:	4809      	ldr	r0, [pc, #36]	; (8005a4c <MemsetHandleStructure+0x74>)
 8005a28:	f000 f8c4 	bl	8005bb4 <memset>
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200004bc 	.word	0x200004bc
 8005a34:	20000404 	.word	0x20000404
 8005a38:	20000290 	.word	0x20000290
 8005a3c:	20000388 	.word	0x20000388
 8005a40:	20000424 	.word	0x20000424
 8005a44:	200003c4 	.word	0x200003c4
 8005a48:	20000260 	.word	0x20000260
 8005a4c:	20000468 	.word	0x20000468

08005a50 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fc fd36 	bl	80024d0 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc fd30 	bl	80024d0 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2108      	movs	r1, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc fd2a 	bl	80024d0 <TIM_PWM_Start>
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0210 	bic.w	r2, r2, #16
 8005ab2:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
	...

08005b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b10:	480d      	ldr	r0, [pc, #52]	; (8005b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b12:	490e      	ldr	r1, [pc, #56]	; (8005b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b14:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <LoopForever+0xe>)
  movs r3, #0
 8005b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b18:	e002      	b.n	8005b20 <LoopCopyDataInit>

08005b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b1e:	3304      	adds	r3, #4

08005b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b24:	d3f9      	bcc.n	8005b1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b26:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b28:	4c0b      	ldr	r4, [pc, #44]	; (8005b58 <LoopForever+0x16>)
  movs r3, #0
 8005b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b2c:	e001      	b.n	8005b32 <LoopFillZerobss>

08005b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b30:	3204      	adds	r2, #4

08005b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b34:	d3fb      	bcc.n	8005b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005b36:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8005b3a:	f000 f817 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b3e:	f7fd ffeb 	bl	8003b18 <main>

08005b42 <LoopForever>:

LoopForever:
    b LoopForever
 8005b42:	e7fe      	b.n	8005b42 <LoopForever>
  ldr   r0, =_estack
 8005b44:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8005b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b4c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005b50:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 8005b54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005b58:	200004e0 	.word	0x200004e0

08005b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b5c:	e7fe      	b.n	8005b5c <ADC1_2_IRQHandler>
	...

08005b60 <__errno>:
 8005b60:	4b01      	ldr	r3, [pc, #4]	; (8005b68 <__errno+0x8>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000008 	.word	0x20000008

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	2500      	movs	r5, #0
 8005b70:	4e0c      	ldr	r6, [pc, #48]	; (8005ba4 <__libc_init_array+0x38>)
 8005b72:	4c0d      	ldr	r4, [pc, #52]	; (8005ba8 <__libc_init_array+0x3c>)
 8005b74:	1ba4      	subs	r4, r4, r6
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	42a5      	cmp	r5, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	f002 f85e 	bl	8007c3c <_init>
 8005b80:	2500      	movs	r5, #0
 8005b82:	4e0a      	ldr	r6, [pc, #40]	; (8005bac <__libc_init_array+0x40>)
 8005b84:	4c0a      	ldr	r4, [pc, #40]	; (8005bb0 <__libc_init_array+0x44>)
 8005b86:	1ba4      	subs	r4, r4, r6
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	42a5      	cmp	r5, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b94:	4798      	blx	r3
 8005b96:	3501      	adds	r5, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b9e:	4798      	blx	r3
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08008710 	.word	0x08008710
 8005ba8:	08008710 	.word	0x08008710
 8005bac:	08008710 	.word	0x08008710
 8005bb0:	08008714 	.word	0x08008714

08005bb4 <memset>:
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4402      	add	r2, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <__cvt>:
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bca:	461e      	mov	r6, r3
 8005bcc:	bfbb      	ittet	lt
 8005bce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005bd2:	461e      	movlt	r6, r3
 8005bd4:	2300      	movge	r3, #0
 8005bd6:	232d      	movlt	r3, #45	; 0x2d
 8005bd8:	b088      	sub	sp, #32
 8005bda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bdc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005be0:	f027 0720 	bic.w	r7, r7, #32
 8005be4:	2f46      	cmp	r7, #70	; 0x46
 8005be6:	4614      	mov	r4, r2
 8005be8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bea:	700b      	strb	r3, [r1, #0]
 8005bec:	d004      	beq.n	8005bf8 <__cvt+0x34>
 8005bee:	2f45      	cmp	r7, #69	; 0x45
 8005bf0:	d100      	bne.n	8005bf4 <__cvt+0x30>
 8005bf2:	3501      	adds	r5, #1
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e000      	b.n	8005bfa <__cvt+0x36>
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	aa07      	add	r2, sp, #28
 8005bfc:	9204      	str	r2, [sp, #16]
 8005bfe:	aa06      	add	r2, sp, #24
 8005c00:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c04:	e9cd 3500 	strd	r3, r5, [sp]
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4633      	mov	r3, r6
 8005c0c:	f000 fcd8 	bl	80065c0 <_dtoa_r>
 8005c10:	2f47      	cmp	r7, #71	; 0x47
 8005c12:	4680      	mov	r8, r0
 8005c14:	d102      	bne.n	8005c1c <__cvt+0x58>
 8005c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c18:	07db      	lsls	r3, r3, #31
 8005c1a:	d526      	bpl.n	8005c6a <__cvt+0xa6>
 8005c1c:	2f46      	cmp	r7, #70	; 0x46
 8005c1e:	eb08 0905 	add.w	r9, r8, r5
 8005c22:	d111      	bne.n	8005c48 <__cvt+0x84>
 8005c24:	f898 3000 	ldrb.w	r3, [r8]
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	d10a      	bne.n	8005c42 <__cvt+0x7e>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4620      	mov	r0, r4
 8005c32:	4631      	mov	r1, r6
 8005c34:	f7fa fec8 	bl	80009c8 <__aeabi_dcmpeq>
 8005c38:	b918      	cbnz	r0, 8005c42 <__cvt+0x7e>
 8005c3a:	f1c5 0501 	rsb	r5, r5, #1
 8005c3e:	f8ca 5000 	str.w	r5, [sl]
 8005c42:	f8da 3000 	ldr.w	r3, [sl]
 8005c46:	4499      	add	r9, r3
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	4631      	mov	r1, r6
 8005c50:	f7fa feba 	bl	80009c8 <__aeabi_dcmpeq>
 8005c54:	b938      	cbnz	r0, 8005c66 <__cvt+0xa2>
 8005c56:	2230      	movs	r2, #48	; 0x30
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	454b      	cmp	r3, r9
 8005c5c:	d205      	bcs.n	8005c6a <__cvt+0xa6>
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	9107      	str	r1, [sp, #28]
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e7f8      	b.n	8005c58 <__cvt+0x94>
 8005c66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	9b07      	ldr	r3, [sp, #28]
 8005c6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c70:	eba3 0308 	sub.w	r3, r3, r8
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	b008      	add	sp, #32
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c7c <__exponent>:
 8005c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	bfb4      	ite	lt
 8005c82:	232d      	movlt	r3, #45	; 0x2d
 8005c84:	232b      	movge	r3, #43	; 0x2b
 8005c86:	4604      	mov	r4, r0
 8005c88:	bfb8      	it	lt
 8005c8a:	4249      	neglt	r1, r1
 8005c8c:	2909      	cmp	r1, #9
 8005c8e:	f804 2b02 	strb.w	r2, [r4], #2
 8005c92:	7043      	strb	r3, [r0, #1]
 8005c94:	dd21      	ble.n	8005cda <__exponent+0x5e>
 8005c96:	f10d 0307 	add.w	r3, sp, #7
 8005c9a:	461f      	mov	r7, r3
 8005c9c:	260a      	movs	r6, #10
 8005c9e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ca2:	fb06 1115 	mls	r1, r6, r5, r1
 8005ca6:	2d09      	cmp	r5, #9
 8005ca8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005cac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cb0:	f103 32ff 	add.w	r2, r3, #4294967295
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	dc09      	bgt.n	8005ccc <__exponent+0x50>
 8005cb8:	3130      	adds	r1, #48	; 0x30
 8005cba:	3b02      	subs	r3, #2
 8005cbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cc0:	42bb      	cmp	r3, r7
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	d304      	bcc.n	8005cd0 <__exponent+0x54>
 8005cc6:	1a10      	subs	r0, r2, r0
 8005cc8:	b003      	add	sp, #12
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ccc:	4613      	mov	r3, r2
 8005cce:	e7e6      	b.n	8005c9e <__exponent+0x22>
 8005cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd4:	f804 2b01 	strb.w	r2, [r4], #1
 8005cd8:	e7f2      	b.n	8005cc0 <__exponent+0x44>
 8005cda:	2330      	movs	r3, #48	; 0x30
 8005cdc:	4419      	add	r1, r3
 8005cde:	7083      	strb	r3, [r0, #2]
 8005ce0:	1d02      	adds	r2, r0, #4
 8005ce2:	70c1      	strb	r1, [r0, #3]
 8005ce4:	e7ef      	b.n	8005cc6 <__exponent+0x4a>
	...

08005ce8 <_printf_float>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	b091      	sub	sp, #68	; 0x44
 8005cee:	460c      	mov	r4, r1
 8005cf0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005cf2:	4693      	mov	fp, r2
 8005cf4:	461e      	mov	r6, r3
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	f001 fa16 	bl	8007128 <_localeconv_r>
 8005cfc:	6803      	ldr	r3, [r0, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	f7fa fa35 	bl	8000170 <strlen>
 8005d06:	2300      	movs	r3, #0
 8005d08:	930e      	str	r3, [sp, #56]	; 0x38
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	900a      	str	r0, [sp, #40]	; 0x28
 8005d0e:	3307      	adds	r3, #7
 8005d10:	f023 0307 	bic.w	r3, r3, #7
 8005d14:	f103 0208 	add.w	r2, r3, #8
 8005d18:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005d1c:	f8d4 a000 	ldr.w	sl, [r4]
 8005d20:	603a      	str	r2, [r7, #0]
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d2a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	4ba6      	ldr	r3, [pc, #664]	; (8005fd4 <_printf_float+0x2ec>)
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d3e:	f7fa fe75 	bl	8000a2c <__aeabi_dcmpun>
 8005d42:	bb68      	cbnz	r0, 8005da0 <_printf_float+0xb8>
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	4ba2      	ldr	r3, [pc, #648]	; (8005fd4 <_printf_float+0x2ec>)
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d4e:	f7fa fe4f 	bl	80009f0 <__aeabi_dcmple>
 8005d52:	bb28      	cbnz	r0, 8005da0 <_printf_float+0xb8>
 8005d54:	2200      	movs	r2, #0
 8005d56:	2300      	movs	r3, #0
 8005d58:	4638      	mov	r0, r7
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7fa fe3e 	bl	80009dc <__aeabi_dcmplt>
 8005d60:	b110      	cbz	r0, 8005d68 <_printf_float+0x80>
 8005d62:	232d      	movs	r3, #45	; 0x2d
 8005d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d68:	4f9b      	ldr	r7, [pc, #620]	; (8005fd8 <_printf_float+0x2f0>)
 8005d6a:	4b9c      	ldr	r3, [pc, #624]	; (8005fdc <_printf_float+0x2f4>)
 8005d6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d70:	bf98      	it	ls
 8005d72:	461f      	movls	r7, r3
 8005d74:	2303      	movs	r3, #3
 8005d76:	f04f 0900 	mov.w	r9, #0
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	f02a 0304 	bic.w	r3, sl, #4
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	9600      	str	r6, [sp, #0]
 8005d84:	465b      	mov	r3, fp
 8005d86:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f9e2 	bl	8006154 <_printf_common>
 8005d90:	3001      	adds	r0, #1
 8005d92:	f040 8090 	bne.w	8005eb6 <_printf_float+0x1ce>
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	b011      	add	sp, #68	; 0x44
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	463a      	mov	r2, r7
 8005da2:	464b      	mov	r3, r9
 8005da4:	4638      	mov	r0, r7
 8005da6:	4649      	mov	r1, r9
 8005da8:	f7fa fe40 	bl	8000a2c <__aeabi_dcmpun>
 8005dac:	b110      	cbz	r0, 8005db4 <_printf_float+0xcc>
 8005dae:	4f8c      	ldr	r7, [pc, #560]	; (8005fe0 <_printf_float+0x2f8>)
 8005db0:	4b8c      	ldr	r3, [pc, #560]	; (8005fe4 <_printf_float+0x2fc>)
 8005db2:	e7db      	b.n	8005d6c <_printf_float+0x84>
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	a80d      	add	r0, sp, #52	; 0x34
 8005dbe:	a90e      	add	r1, sp, #56	; 0x38
 8005dc0:	d140      	bne.n	8005e44 <_printf_float+0x15c>
 8005dc2:	2306      	movs	r3, #6
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	f04f 0c00 	mov.w	ip, #0
 8005dca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005dce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	463a      	mov	r2, r7
 8005dde:	464b      	mov	r3, r9
 8005de0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005de4:	4628      	mov	r0, r5
 8005de6:	f7ff feed 	bl	8005bc4 <__cvt>
 8005dea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005dee:	2b47      	cmp	r3, #71	; 0x47
 8005df0:	4607      	mov	r7, r0
 8005df2:	d109      	bne.n	8005e08 <_printf_float+0x120>
 8005df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df6:	1cd8      	adds	r0, r3, #3
 8005df8:	db02      	blt.n	8005e00 <_printf_float+0x118>
 8005dfa:	6862      	ldr	r2, [r4, #4]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	dd47      	ble.n	8005e90 <_printf_float+0x1a8>
 8005e00:	f1a8 0802 	sub.w	r8, r8, #2
 8005e04:	fa5f f888 	uxtb.w	r8, r8
 8005e08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005e0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e0e:	d824      	bhi.n	8005e5a <_printf_float+0x172>
 8005e10:	3901      	subs	r1, #1
 8005e12:	4642      	mov	r2, r8
 8005e14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e18:	910d      	str	r1, [sp, #52]	; 0x34
 8005e1a:	f7ff ff2f 	bl	8005c7c <__exponent>
 8005e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e20:	4681      	mov	r9, r0
 8005e22:	1813      	adds	r3, r2, r0
 8005e24:	2a01      	cmp	r2, #1
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	dc02      	bgt.n	8005e30 <_printf_float+0x148>
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	07d1      	lsls	r1, r2, #31
 8005e2e:	d501      	bpl.n	8005e34 <_printf_float+0x14c>
 8005e30:	3301      	adds	r3, #1
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0a2      	beq.n	8005d82 <_printf_float+0x9a>
 8005e3c:	232d      	movs	r3, #45	; 0x2d
 8005e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e42:	e79e      	b.n	8005d82 <_printf_float+0x9a>
 8005e44:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005e48:	f000 816e 	beq.w	8006128 <_printf_float+0x440>
 8005e4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e50:	d1b9      	bne.n	8005dc6 <_printf_float+0xde>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1b7      	bne.n	8005dc6 <_printf_float+0xde>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e7b4      	b.n	8005dc4 <_printf_float+0xdc>
 8005e5a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005e5e:	d119      	bne.n	8005e94 <_printf_float+0x1ac>
 8005e60:	2900      	cmp	r1, #0
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	dd0c      	ble.n	8005e80 <_printf_float+0x198>
 8005e66:	6121      	str	r1, [r4, #16]
 8005e68:	b913      	cbnz	r3, 8005e70 <_printf_float+0x188>
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	07d2      	lsls	r2, r2, #31
 8005e6e:	d502      	bpl.n	8005e76 <_printf_float+0x18e>
 8005e70:	3301      	adds	r3, #1
 8005e72:	440b      	add	r3, r1
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e78:	f04f 0900 	mov.w	r9, #0
 8005e7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e7e:	e7d9      	b.n	8005e34 <_printf_float+0x14c>
 8005e80:	b913      	cbnz	r3, 8005e88 <_printf_float+0x1a0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	d501      	bpl.n	8005e8c <_printf_float+0x1a4>
 8005e88:	3302      	adds	r3, #2
 8005e8a:	e7f3      	b.n	8005e74 <_printf_float+0x18c>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e7f1      	b.n	8005e74 <_printf_float+0x18c>
 8005e90:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005e94:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	db05      	blt.n	8005ea8 <_printf_float+0x1c0>
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	07d1      	lsls	r1, r2, #31
 8005ea2:	d5e8      	bpl.n	8005e76 <_printf_float+0x18e>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	e7e5      	b.n	8005e74 <_printf_float+0x18c>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfcc      	ite	gt
 8005eac:	2301      	movgt	r3, #1
 8005eae:	f1c3 0302 	rsble	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	e7de      	b.n	8005e74 <_printf_float+0x18c>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	055a      	lsls	r2, r3, #21
 8005eba:	d407      	bmi.n	8005ecc <_printf_float+0x1e4>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b0      	blx	r6
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d129      	bne.n	8005f1e <_printf_float+0x236>
 8005eca:	e764      	b.n	8005d96 <_printf_float+0xae>
 8005ecc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005ed0:	f240 80d7 	bls.w	8006082 <_printf_float+0x39a>
 8005ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2300      	movs	r3, #0
 8005edc:	f7fa fd74 	bl	80009c8 <__aeabi_dcmpeq>
 8005ee0:	b388      	cbz	r0, 8005f46 <_printf_float+0x25e>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4a40      	ldr	r2, [pc, #256]	; (8005fe8 <_printf_float+0x300>)
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b0      	blx	r6
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f af52 	beq.w	8005d96 <_printf_float+0xae>
 8005ef2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	db02      	blt.n	8005f00 <_printf_float+0x218>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	07d8      	lsls	r0, r3, #31
 8005efe:	d50e      	bpl.n	8005f1e <_printf_float+0x236>
 8005f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f04:	4659      	mov	r1, fp
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b0      	blx	r6
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	f43f af43 	beq.w	8005d96 <_printf_float+0xae>
 8005f10:	2700      	movs	r7, #0
 8005f12:	f104 081a 	add.w	r8, r4, #26
 8005f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	dc09      	bgt.n	8005f32 <_printf_float+0x24a>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	079f      	lsls	r7, r3, #30
 8005f22:	f100 80fd 	bmi.w	8006120 <_printf_float+0x438>
 8005f26:	68e0      	ldr	r0, [r4, #12]
 8005f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f2a:	4298      	cmp	r0, r3
 8005f2c:	bfb8      	it	lt
 8005f2e:	4618      	movlt	r0, r3
 8005f30:	e733      	b.n	8005d9a <_printf_float+0xb2>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4642      	mov	r2, r8
 8005f36:	4659      	mov	r1, fp
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b0      	blx	r6
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f af2a 	beq.w	8005d96 <_printf_float+0xae>
 8005f42:	3701      	adds	r7, #1
 8005f44:	e7e7      	b.n	8005f16 <_printf_float+0x22e>
 8005f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dc2b      	bgt.n	8005fa4 <_printf_float+0x2bc>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4a26      	ldr	r2, [pc, #152]	; (8005fe8 <_printf_float+0x300>)
 8005f50:	4659      	mov	r1, fp
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b0      	blx	r6
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af1d 	beq.w	8005d96 <_printf_float+0xae>
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5e:	b923      	cbnz	r3, 8005f6a <_printf_float+0x282>
 8005f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f62:	b913      	cbnz	r3, 8005f6a <_printf_float+0x282>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	d5d9      	bpl.n	8005f1e <_printf_float+0x236>
 8005f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f6e:	4659      	mov	r1, fp
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b0      	blx	r6
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f af0e 	beq.w	8005d96 <_printf_float+0xae>
 8005f7a:	f04f 0800 	mov.w	r8, #0
 8005f7e:	f104 091a 	add.w	r9, r4, #26
 8005f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f84:	425b      	negs	r3, r3
 8005f86:	4543      	cmp	r3, r8
 8005f88:	dc01      	bgt.n	8005f8e <_printf_float+0x2a6>
 8005f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f8c:	e797      	b.n	8005ebe <_printf_float+0x1d6>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	464a      	mov	r2, r9
 8005f92:	4659      	mov	r1, fp
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b0      	blx	r6
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f aefc 	beq.w	8005d96 <_printf_float+0xae>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	e7ee      	b.n	8005f82 <_printf_float+0x29a>
 8005fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	bfa8      	it	ge
 8005fac:	461a      	movge	r2, r3
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	4690      	mov	r8, r2
 8005fb2:	dd07      	ble.n	8005fc4 <_printf_float+0x2dc>
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b0      	blx	r6
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f aee9 	beq.w	8005d96 <_printf_float+0xae>
 8005fc4:	f104 031a 	add.w	r3, r4, #26
 8005fc8:	f04f 0a00 	mov.w	sl, #0
 8005fcc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd2:	e015      	b.n	8006000 <_printf_float+0x318>
 8005fd4:	7fefffff 	.word	0x7fefffff
 8005fd8:	080084b4 	.word	0x080084b4
 8005fdc:	080084b0 	.word	0x080084b0
 8005fe0:	080084bc 	.word	0x080084bc
 8005fe4:	080084b8 	.word	0x080084b8
 8005fe8:	080084c0 	.word	0x080084c0
 8005fec:	2301      	movs	r3, #1
 8005fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b0      	blx	r6
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f aecd 	beq.w	8005d96 <_printf_float+0xae>
 8005ffc:	f10a 0a01 	add.w	sl, sl, #1
 8006000:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006004:	eba9 0308 	sub.w	r3, r9, r8
 8006008:	4553      	cmp	r3, sl
 800600a:	dcef      	bgt.n	8005fec <_printf_float+0x304>
 800600c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006010:	429a      	cmp	r2, r3
 8006012:	444f      	add	r7, r9
 8006014:	db14      	blt.n	8006040 <_printf_float+0x358>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	07da      	lsls	r2, r3, #31
 800601a:	d411      	bmi.n	8006040 <_printf_float+0x358>
 800601c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006020:	eba3 0209 	sub.w	r2, r3, r9
 8006024:	eba3 0901 	sub.w	r9, r3, r1
 8006028:	4591      	cmp	r9, r2
 800602a:	bfa8      	it	ge
 800602c:	4691      	movge	r9, r2
 800602e:	f1b9 0f00 	cmp.w	r9, #0
 8006032:	dc0d      	bgt.n	8006050 <_printf_float+0x368>
 8006034:	2700      	movs	r7, #0
 8006036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800603a:	f104 081a 	add.w	r8, r4, #26
 800603e:	e018      	b.n	8006072 <_printf_float+0x38a>
 8006040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006044:	4659      	mov	r1, fp
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	3001      	adds	r0, #1
 800604c:	d1e6      	bne.n	800601c <_printf_float+0x334>
 800604e:	e6a2      	b.n	8005d96 <_printf_float+0xae>
 8006050:	464b      	mov	r3, r9
 8006052:	463a      	mov	r2, r7
 8006054:	4659      	mov	r1, fp
 8006056:	4628      	mov	r0, r5
 8006058:	47b0      	blx	r6
 800605a:	3001      	adds	r0, #1
 800605c:	d1ea      	bne.n	8006034 <_printf_float+0x34c>
 800605e:	e69a      	b.n	8005d96 <_printf_float+0xae>
 8006060:	2301      	movs	r3, #1
 8006062:	4642      	mov	r2, r8
 8006064:	4659      	mov	r1, fp
 8006066:	4628      	mov	r0, r5
 8006068:	47b0      	blx	r6
 800606a:	3001      	adds	r0, #1
 800606c:	f43f ae93 	beq.w	8005d96 <_printf_float+0xae>
 8006070:	3701      	adds	r7, #1
 8006072:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	eba3 0309 	sub.w	r3, r3, r9
 800607c:	42bb      	cmp	r3, r7
 800607e:	dcef      	bgt.n	8006060 <_printf_float+0x378>
 8006080:	e74d      	b.n	8005f1e <_printf_float+0x236>
 8006082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006084:	2a01      	cmp	r2, #1
 8006086:	dc01      	bgt.n	800608c <_printf_float+0x3a4>
 8006088:	07db      	lsls	r3, r3, #31
 800608a:	d538      	bpl.n	80060fe <_printf_float+0x416>
 800608c:	2301      	movs	r3, #1
 800608e:	463a      	mov	r2, r7
 8006090:	4659      	mov	r1, fp
 8006092:	4628      	mov	r0, r5
 8006094:	47b0      	blx	r6
 8006096:	3001      	adds	r0, #1
 8006098:	f43f ae7d 	beq.w	8005d96 <_printf_float+0xae>
 800609c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a0:	4659      	mov	r1, fp
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b0      	blx	r6
 80060a6:	3001      	adds	r0, #1
 80060a8:	f107 0701 	add.w	r7, r7, #1
 80060ac:	f43f ae73 	beq.w	8005d96 <_printf_float+0xae>
 80060b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060b6:	2200      	movs	r2, #0
 80060b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80060bc:	2300      	movs	r3, #0
 80060be:	f7fa fc83 	bl	80009c8 <__aeabi_dcmpeq>
 80060c2:	b9c0      	cbnz	r0, 80060f6 <_printf_float+0x40e>
 80060c4:	4643      	mov	r3, r8
 80060c6:	463a      	mov	r2, r7
 80060c8:	4659      	mov	r1, fp
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b0      	blx	r6
 80060ce:	3001      	adds	r0, #1
 80060d0:	d10d      	bne.n	80060ee <_printf_float+0x406>
 80060d2:	e660      	b.n	8005d96 <_printf_float+0xae>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4642      	mov	r2, r8
 80060d8:	4659      	mov	r1, fp
 80060da:	4628      	mov	r0, r5
 80060dc:	47b0      	blx	r6
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f ae59 	beq.w	8005d96 <_printf_float+0xae>
 80060e4:	3701      	adds	r7, #1
 80060e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e8:	3b01      	subs	r3, #1
 80060ea:	42bb      	cmp	r3, r7
 80060ec:	dcf2      	bgt.n	80060d4 <_printf_float+0x3ec>
 80060ee:	464b      	mov	r3, r9
 80060f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060f4:	e6e4      	b.n	8005ec0 <_printf_float+0x1d8>
 80060f6:	2700      	movs	r7, #0
 80060f8:	f104 081a 	add.w	r8, r4, #26
 80060fc:	e7f3      	b.n	80060e6 <_printf_float+0x3fe>
 80060fe:	2301      	movs	r3, #1
 8006100:	e7e1      	b.n	80060c6 <_printf_float+0x3de>
 8006102:	2301      	movs	r3, #1
 8006104:	4642      	mov	r2, r8
 8006106:	4659      	mov	r1, fp
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	3001      	adds	r0, #1
 800610e:	f43f ae42 	beq.w	8005d96 <_printf_float+0xae>
 8006112:	3701      	adds	r7, #1
 8006114:	68e3      	ldr	r3, [r4, #12]
 8006116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	42bb      	cmp	r3, r7
 800611c:	dcf1      	bgt.n	8006102 <_printf_float+0x41a>
 800611e:	e702      	b.n	8005f26 <_printf_float+0x23e>
 8006120:	2700      	movs	r7, #0
 8006122:	f104 0819 	add.w	r8, r4, #25
 8006126:	e7f5      	b.n	8006114 <_printf_float+0x42c>
 8006128:	2b00      	cmp	r3, #0
 800612a:	f43f ae94 	beq.w	8005e56 <_printf_float+0x16e>
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006136:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006140:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	463a      	mov	r2, r7
 8006148:	464b      	mov	r3, r9
 800614a:	4628      	mov	r0, r5
 800614c:	f7ff fd3a 	bl	8005bc4 <__cvt>
 8006150:	4607      	mov	r7, r0
 8006152:	e64f      	b.n	8005df4 <_printf_float+0x10c>

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4691      	mov	r9, r2
 800615a:	461f      	mov	r7, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	4606      	mov	r6, r0
 8006162:	4293      	cmp	r3, r2
 8006164:	bfb8      	it	lt
 8006166:	4613      	movlt	r3, r2
 8006168:	f8c9 3000 	str.w	r3, [r9]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006170:	460c      	mov	r4, r1
 8006172:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006176:	b112      	cbz	r2, 800617e <_printf_common+0x2a>
 8006178:	3301      	adds	r3, #1
 800617a:	f8c9 3000 	str.w	r3, [r9]
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	0699      	lsls	r1, r3, #26
 8006182:	bf42      	ittt	mi
 8006184:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006188:	3302      	addmi	r3, #2
 800618a:	f8c9 3000 	strmi.w	r3, [r9]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	f015 0506 	ands.w	r5, r5, #6
 8006194:	d107      	bne.n	80061a6 <_printf_common+0x52>
 8006196:	f104 0a19 	add.w	sl, r4, #25
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	f8d9 2000 	ldr.w	r2, [r9]
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	42ab      	cmp	r3, r5
 80061a4:	dc29      	bgt.n	80061fa <_printf_common+0xa6>
 80061a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	3300      	adds	r3, #0
 80061ae:	bf18      	it	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	0692      	lsls	r2, r2, #26
 80061b4:	d42e      	bmi.n	8006214 <_printf_common+0xc0>
 80061b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ba:	4639      	mov	r1, r7
 80061bc:	4630      	mov	r0, r6
 80061be:	47c0      	blx	r8
 80061c0:	3001      	adds	r0, #1
 80061c2:	d021      	beq.n	8006208 <_printf_common+0xb4>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	68e5      	ldr	r5, [r4, #12]
 80061c8:	f003 0306 	and.w	r3, r3, #6
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	bf18      	it	ne
 80061d0:	2500      	movne	r5, #0
 80061d2:	f8d9 2000 	ldr.w	r2, [r9]
 80061d6:	f04f 0900 	mov.w	r9, #0
 80061da:	bf08      	it	eq
 80061dc:	1aad      	subeq	r5, r5, r2
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	bf08      	it	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfc4      	itt	gt
 80061ec:	1a9b      	subgt	r3, r3, r2
 80061ee:	18ed      	addgt	r5, r5, r3
 80061f0:	341a      	adds	r4, #26
 80061f2:	454d      	cmp	r5, r9
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xd8>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xb8>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4639      	mov	r1, r7
 8006200:	4630      	mov	r0, r6
 8006202:	47c0      	blx	r8
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xbc>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c2      	b.n	800619a <_printf_common+0x46>
 8006214:	2030      	movs	r0, #48	; 0x30
 8006216:	18e1      	adds	r1, r4, r3
 8006218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006222:	4422      	add	r2, r4
 8006224:	3302      	adds	r3, #2
 8006226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622a:	e7c4      	b.n	80061b6 <_printf_common+0x62>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4639      	mov	r1, r7
 8006232:	4630      	mov	r0, r6
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xb4>
 800623a:	f109 0901 	add.w	r9, r9, #1
 800623e:	e7d8      	b.n	80061f2 <_printf_common+0x9e>

08006240 <_printf_i>:
 8006240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006244:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006248:	460c      	mov	r4, r1
 800624a:	7e09      	ldrb	r1, [r1, #24]
 800624c:	b085      	sub	sp, #20
 800624e:	296e      	cmp	r1, #110	; 0x6e
 8006250:	4617      	mov	r7, r2
 8006252:	4606      	mov	r6, r0
 8006254:	4698      	mov	r8, r3
 8006256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006258:	f000 80b3 	beq.w	80063c2 <_printf_i+0x182>
 800625c:	d822      	bhi.n	80062a4 <_printf_i+0x64>
 800625e:	2963      	cmp	r1, #99	; 0x63
 8006260:	d036      	beq.n	80062d0 <_printf_i+0x90>
 8006262:	d80a      	bhi.n	800627a <_printf_i+0x3a>
 8006264:	2900      	cmp	r1, #0
 8006266:	f000 80b9 	beq.w	80063dc <_printf_i+0x19c>
 800626a:	2958      	cmp	r1, #88	; 0x58
 800626c:	f000 8083 	beq.w	8006376 <_printf_i+0x136>
 8006270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006274:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006278:	e032      	b.n	80062e0 <_printf_i+0xa0>
 800627a:	2964      	cmp	r1, #100	; 0x64
 800627c:	d001      	beq.n	8006282 <_printf_i+0x42>
 800627e:	2969      	cmp	r1, #105	; 0x69
 8006280:	d1f6      	bne.n	8006270 <_printf_i+0x30>
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	6813      	ldr	r3, [r2, #0]
 8006286:	0605      	lsls	r5, r0, #24
 8006288:	f103 0104 	add.w	r1, r3, #4
 800628c:	d52a      	bpl.n	80062e4 <_printf_i+0xa4>
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da03      	bge.n	800629e <_printf_i+0x5e>
 8006296:	222d      	movs	r2, #45	; 0x2d
 8006298:	425b      	negs	r3, r3
 800629a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800629e:	486f      	ldr	r0, [pc, #444]	; (800645c <_printf_i+0x21c>)
 80062a0:	220a      	movs	r2, #10
 80062a2:	e039      	b.n	8006318 <_printf_i+0xd8>
 80062a4:	2973      	cmp	r1, #115	; 0x73
 80062a6:	f000 809d 	beq.w	80063e4 <_printf_i+0x1a4>
 80062aa:	d808      	bhi.n	80062be <_printf_i+0x7e>
 80062ac:	296f      	cmp	r1, #111	; 0x6f
 80062ae:	d020      	beq.n	80062f2 <_printf_i+0xb2>
 80062b0:	2970      	cmp	r1, #112	; 0x70
 80062b2:	d1dd      	bne.n	8006270 <_printf_i+0x30>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	f043 0320 	orr.w	r3, r3, #32
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	e003      	b.n	80062c6 <_printf_i+0x86>
 80062be:	2975      	cmp	r1, #117	; 0x75
 80062c0:	d017      	beq.n	80062f2 <_printf_i+0xb2>
 80062c2:	2978      	cmp	r1, #120	; 0x78
 80062c4:	d1d4      	bne.n	8006270 <_printf_i+0x30>
 80062c6:	2378      	movs	r3, #120	; 0x78
 80062c8:	4865      	ldr	r0, [pc, #404]	; (8006460 <_printf_i+0x220>)
 80062ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ce:	e055      	b.n	800637c <_printf_i+0x13c>
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d6:	1d19      	adds	r1, r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6011      	str	r1, [r2, #0]
 80062dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e0:	2301      	movs	r3, #1
 80062e2:	e08c      	b.n	80063fe <_printf_i+0x1be>
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ea:	6011      	str	r1, [r2, #0]
 80062ec:	bf18      	it	ne
 80062ee:	b21b      	sxthne	r3, r3
 80062f0:	e7cf      	b.n	8006292 <_printf_i+0x52>
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	1d18      	adds	r0, r3, #4
 80062f8:	6010      	str	r0, [r2, #0]
 80062fa:	0628      	lsls	r0, r5, #24
 80062fc:	d501      	bpl.n	8006302 <_printf_i+0xc2>
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	e002      	b.n	8006308 <_printf_i+0xc8>
 8006302:	0668      	lsls	r0, r5, #25
 8006304:	d5fb      	bpl.n	80062fe <_printf_i+0xbe>
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	296f      	cmp	r1, #111	; 0x6f
 800630a:	bf14      	ite	ne
 800630c:	220a      	movne	r2, #10
 800630e:	2208      	moveq	r2, #8
 8006310:	4852      	ldr	r0, [pc, #328]	; (800645c <_printf_i+0x21c>)
 8006312:	2100      	movs	r1, #0
 8006314:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006318:	6865      	ldr	r5, [r4, #4]
 800631a:	2d00      	cmp	r5, #0
 800631c:	60a5      	str	r5, [r4, #8]
 800631e:	f2c0 8095 	blt.w	800644c <_printf_i+0x20c>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	f021 0104 	bic.w	r1, r1, #4
 8006328:	6021      	str	r1, [r4, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d13d      	bne.n	80063aa <_printf_i+0x16a>
 800632e:	2d00      	cmp	r5, #0
 8006330:	f040 808e 	bne.w	8006450 <_printf_i+0x210>
 8006334:	4665      	mov	r5, ip
 8006336:	2a08      	cmp	r2, #8
 8006338:	d10b      	bne.n	8006352 <_printf_i+0x112>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	07db      	lsls	r3, r3, #31
 800633e:	d508      	bpl.n	8006352 <_printf_i+0x112>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	bfde      	ittt	le
 8006348:	2330      	movle	r3, #48	; 0x30
 800634a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800634e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006352:	ebac 0305 	sub.w	r3, ip, r5
 8006356:	6123      	str	r3, [r4, #16]
 8006358:	f8cd 8000 	str.w	r8, [sp]
 800635c:	463b      	mov	r3, r7
 800635e:	aa03      	add	r2, sp, #12
 8006360:	4621      	mov	r1, r4
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff fef6 	bl	8006154 <_printf_common>
 8006368:	3001      	adds	r0, #1
 800636a:	d14d      	bne.n	8006408 <_printf_i+0x1c8>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b005      	add	sp, #20
 8006372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006376:	4839      	ldr	r0, [pc, #228]	; (800645c <_printf_i+0x21c>)
 8006378:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800637c:	6813      	ldr	r3, [r2, #0]
 800637e:	6821      	ldr	r1, [r4, #0]
 8006380:	1d1d      	adds	r5, r3, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6015      	str	r5, [r2, #0]
 8006386:	060a      	lsls	r2, r1, #24
 8006388:	d50b      	bpl.n	80063a2 <_printf_i+0x162>
 800638a:	07ca      	lsls	r2, r1, #31
 800638c:	bf44      	itt	mi
 800638e:	f041 0120 	orrmi.w	r1, r1, #32
 8006392:	6021      	strmi	r1, [r4, #0]
 8006394:	b91b      	cbnz	r3, 800639e <_printf_i+0x15e>
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	f022 0220 	bic.w	r2, r2, #32
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	2210      	movs	r2, #16
 80063a0:	e7b7      	b.n	8006312 <_printf_i+0xd2>
 80063a2:	064d      	lsls	r5, r1, #25
 80063a4:	bf48      	it	mi
 80063a6:	b29b      	uxthmi	r3, r3
 80063a8:	e7ef      	b.n	800638a <_printf_i+0x14a>
 80063aa:	4665      	mov	r5, ip
 80063ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b0:	fb02 3311 	mls	r3, r2, r1, r3
 80063b4:	5cc3      	ldrb	r3, [r0, r3]
 80063b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063ba:	460b      	mov	r3, r1
 80063bc:	2900      	cmp	r1, #0
 80063be:	d1f5      	bne.n	80063ac <_printf_i+0x16c>
 80063c0:	e7b9      	b.n	8006336 <_printf_i+0xf6>
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	6825      	ldr	r5, [r4, #0]
 80063c6:	1d18      	adds	r0, r3, #4
 80063c8:	6961      	ldr	r1, [r4, #20]
 80063ca:	6010      	str	r0, [r2, #0]
 80063cc:	0628      	lsls	r0, r5, #24
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	d501      	bpl.n	80063d6 <_printf_i+0x196>
 80063d2:	6019      	str	r1, [r3, #0]
 80063d4:	e002      	b.n	80063dc <_printf_i+0x19c>
 80063d6:	066a      	lsls	r2, r5, #25
 80063d8:	d5fb      	bpl.n	80063d2 <_printf_i+0x192>
 80063da:	8019      	strh	r1, [r3, #0]
 80063dc:	2300      	movs	r3, #0
 80063de:	4665      	mov	r5, ip
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	e7b9      	b.n	8006358 <_printf_i+0x118>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	1d19      	adds	r1, r3, #4
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	681d      	ldr	r5, [r3, #0]
 80063ec:	6862      	ldr	r2, [r4, #4]
 80063ee:	2100      	movs	r1, #0
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 feaf 	bl	8007154 <memchr>
 80063f6:	b108      	cbz	r0, 80063fc <_printf_i+0x1bc>
 80063f8:	1b40      	subs	r0, r0, r5
 80063fa:	6060      	str	r0, [r4, #4]
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	2300      	movs	r3, #0
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006406:	e7a7      	b.n	8006358 <_printf_i+0x118>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	462a      	mov	r2, r5
 800640c:	4639      	mov	r1, r7
 800640e:	4630      	mov	r0, r6
 8006410:	47c0      	blx	r8
 8006412:	3001      	adds	r0, #1
 8006414:	d0aa      	beq.n	800636c <_printf_i+0x12c>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	d413      	bmi.n	8006444 <_printf_i+0x204>
 800641c:	68e0      	ldr	r0, [r4, #12]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	4298      	cmp	r0, r3
 8006422:	bfb8      	it	lt
 8006424:	4618      	movlt	r0, r3
 8006426:	e7a3      	b.n	8006370 <_printf_i+0x130>
 8006428:	2301      	movs	r3, #1
 800642a:	464a      	mov	r2, r9
 800642c:	4639      	mov	r1, r7
 800642e:	4630      	mov	r0, r6
 8006430:	47c0      	blx	r8
 8006432:	3001      	adds	r0, #1
 8006434:	d09a      	beq.n	800636c <_printf_i+0x12c>
 8006436:	3501      	adds	r5, #1
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	9a03      	ldr	r2, [sp, #12]
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	42ab      	cmp	r3, r5
 8006440:	dcf2      	bgt.n	8006428 <_printf_i+0x1e8>
 8006442:	e7eb      	b.n	800641c <_printf_i+0x1dc>
 8006444:	2500      	movs	r5, #0
 8006446:	f104 0919 	add.w	r9, r4, #25
 800644a:	e7f5      	b.n	8006438 <_printf_i+0x1f8>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ac      	bne.n	80063aa <_printf_i+0x16a>
 8006450:	7803      	ldrb	r3, [r0, #0]
 8006452:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645a:	e76c      	b.n	8006336 <_printf_i+0xf6>
 800645c:	080084c2 	.word	0x080084c2
 8006460:	080084d3 	.word	0x080084d3

08006464 <siprintf>:
 8006464:	b40e      	push	{r1, r2, r3}
 8006466:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	; 0x70
 800646e:	ab1d      	add	r3, sp, #116	; 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	9107      	str	r1, [sp, #28]
 8006476:	9104      	str	r1, [sp, #16]
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <siprintf+0x38>)
 800647a:	4909      	ldr	r1, [pc, #36]	; (80064a0 <siprintf+0x3c>)
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	9105      	str	r1, [sp, #20]
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	a902      	add	r1, sp, #8
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f001 fa68 	bl	800795c <_svfiprintf_r>
 800648c:	2200      	movs	r2, #0
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	b01c      	add	sp, #112	; 0x70
 8006494:	f85d eb04 	ldr.w	lr, [sp], #4
 8006498:	b003      	add	sp, #12
 800649a:	4770      	bx	lr
 800649c:	20000008 	.word	0x20000008
 80064a0:	ffff0208 	.word	0xffff0208

080064a4 <quorem>:
 80064a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	6903      	ldr	r3, [r0, #16]
 80064aa:	690c      	ldr	r4, [r1, #16]
 80064ac:	4680      	mov	r8, r0
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	f2c0 8084 	blt.w	80065bc <quorem+0x118>
 80064b4:	3c01      	subs	r4, #1
 80064b6:	f101 0714 	add.w	r7, r1, #20
 80064ba:	f100 0614 	add.w	r6, r0, #20
 80064be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80064c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80064c6:	3501      	adds	r5, #1
 80064c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80064cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80064d0:	eb06 030c 	add.w	r3, r6, ip
 80064d4:	eb07 090c 	add.w	r9, r7, ip
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	b39d      	cbz	r5, 8006544 <quorem+0xa0>
 80064dc:	f04f 0a00 	mov.w	sl, #0
 80064e0:	4638      	mov	r0, r7
 80064e2:	46b6      	mov	lr, r6
 80064e4:	46d3      	mov	fp, sl
 80064e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80064ea:	b293      	uxth	r3, r2
 80064ec:	fb05 a303 	mla	r3, r5, r3, sl
 80064f0:	0c12      	lsrs	r2, r2, #16
 80064f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064f6:	fb05 a202 	mla	r2, r5, r2, sl
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ebab 0303 	sub.w	r3, fp, r3
 8006500:	f8de b000 	ldr.w	fp, [lr]
 8006504:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006508:	fa1f fb8b 	uxth.w	fp, fp
 800650c:	445b      	add	r3, fp
 800650e:	fa1f fb82 	uxth.w	fp, r2
 8006512:	f8de 2000 	ldr.w	r2, [lr]
 8006516:	4581      	cmp	r9, r0
 8006518:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800651c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006526:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800652a:	f84e 3b04 	str.w	r3, [lr], #4
 800652e:	d2da      	bcs.n	80064e6 <quorem+0x42>
 8006530:	f856 300c 	ldr.w	r3, [r6, ip]
 8006534:	b933      	cbnz	r3, 8006544 <quorem+0xa0>
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	3b04      	subs	r3, #4
 800653a:	429e      	cmp	r6, r3
 800653c:	461a      	mov	r2, r3
 800653e:	d331      	bcc.n	80065a4 <quorem+0x100>
 8006540:	f8c8 4010 	str.w	r4, [r8, #16]
 8006544:	4640      	mov	r0, r8
 8006546:	f001 f833 	bl	80075b0 <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	db26      	blt.n	800659c <quorem+0xf8>
 800654e:	4630      	mov	r0, r6
 8006550:	f04f 0c00 	mov.w	ip, #0
 8006554:	3501      	adds	r5, #1
 8006556:	f857 1b04 	ldr.w	r1, [r7], #4
 800655a:	f8d0 e000 	ldr.w	lr, [r0]
 800655e:	b28b      	uxth	r3, r1
 8006560:	ebac 0303 	sub.w	r3, ip, r3
 8006564:	fa1f f28e 	uxth.w	r2, lr
 8006568:	4413      	add	r3, r2
 800656a:	0c0a      	lsrs	r2, r1, #16
 800656c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657a:	45b9      	cmp	r9, r7
 800657c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006580:	f840 3b04 	str.w	r3, [r0], #4
 8006584:	d2e7      	bcs.n	8006556 <quorem+0xb2>
 8006586:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800658a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800658e:	b92a      	cbnz	r2, 800659c <quorem+0xf8>
 8006590:	3b04      	subs	r3, #4
 8006592:	429e      	cmp	r6, r3
 8006594:	461a      	mov	r2, r3
 8006596:	d30b      	bcc.n	80065b0 <quorem+0x10c>
 8006598:	f8c8 4010 	str.w	r4, [r8, #16]
 800659c:	4628      	mov	r0, r5
 800659e:	b003      	add	sp, #12
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	3b04      	subs	r3, #4
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d1c9      	bne.n	8006540 <quorem+0x9c>
 80065ac:	3c01      	subs	r4, #1
 80065ae:	e7c4      	b.n	800653a <quorem+0x96>
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1ef      	bne.n	8006598 <quorem+0xf4>
 80065b8:	3c01      	subs	r4, #1
 80065ba:	e7ea      	b.n	8006592 <quorem+0xee>
 80065bc:	2000      	movs	r0, #0
 80065be:	e7ee      	b.n	800659e <quorem+0xfa>

080065c0 <_dtoa_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4616      	mov	r6, r2
 80065c6:	461f      	mov	r7, r3
 80065c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065ca:	b095      	sub	sp, #84	; 0x54
 80065cc:	4604      	mov	r4, r0
 80065ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80065d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065d6:	b93d      	cbnz	r5, 80065e8 <_dtoa_r+0x28>
 80065d8:	2010      	movs	r0, #16
 80065da:	f000 fdb3 	bl	8007144 <malloc>
 80065de:	6260      	str	r0, [r4, #36]	; 0x24
 80065e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065e4:	6005      	str	r5, [r0, #0]
 80065e6:	60c5      	str	r5, [r0, #12]
 80065e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	b151      	cbz	r1, 8006604 <_dtoa_r+0x44>
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	2301      	movs	r3, #1
 80065f2:	4093      	lsls	r3, r2
 80065f4:	604a      	str	r2, [r1, #4]
 80065f6:	608b      	str	r3, [r1, #8]
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fdf8 	bl	80071ee <_Bfree>
 80065fe:	2200      	movs	r2, #0
 8006600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	1e3b      	subs	r3, r7, #0
 8006606:	bfaf      	iteee	ge
 8006608:	2300      	movge	r3, #0
 800660a:	2201      	movlt	r2, #1
 800660c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006610:	9303      	strlt	r3, [sp, #12]
 8006612:	bfac      	ite	ge
 8006614:	f8c8 3000 	strge.w	r3, [r8]
 8006618:	f8c8 2000 	strlt.w	r2, [r8]
 800661c:	4bae      	ldr	r3, [pc, #696]	; (80068d8 <_dtoa_r+0x318>)
 800661e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006622:	ea33 0308 	bics.w	r3, r3, r8
 8006626:	d11b      	bne.n	8006660 <_dtoa_r+0xa0>
 8006628:	f242 730f 	movw	r3, #9999	; 0x270f
 800662c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	b923      	cbnz	r3, 800663e <_dtoa_r+0x7e>
 8006634:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006638:	2800      	cmp	r0, #0
 800663a:	f000 8545 	beq.w	80070c8 <_dtoa_r+0xb08>
 800663e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006640:	b953      	cbnz	r3, 8006658 <_dtoa_r+0x98>
 8006642:	4ba6      	ldr	r3, [pc, #664]	; (80068dc <_dtoa_r+0x31c>)
 8006644:	e021      	b.n	800668a <_dtoa_r+0xca>
 8006646:	4ba6      	ldr	r3, [pc, #664]	; (80068e0 <_dtoa_r+0x320>)
 8006648:	9306      	str	r3, [sp, #24]
 800664a:	3308      	adds	r3, #8
 800664c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	9806      	ldr	r0, [sp, #24]
 8006652:	b015      	add	sp, #84	; 0x54
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4ba0      	ldr	r3, [pc, #640]	; (80068dc <_dtoa_r+0x31c>)
 800665a:	9306      	str	r3, [sp, #24]
 800665c:	3303      	adds	r3, #3
 800665e:	e7f5      	b.n	800664c <_dtoa_r+0x8c>
 8006660:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7fa f9ac 	bl	80009c8 <__aeabi_dcmpeq>
 8006670:	4682      	mov	sl, r0
 8006672:	b160      	cbz	r0, 800668e <_dtoa_r+0xce>
 8006674:	2301      	movs	r3, #1
 8006676:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8520 	beq.w	80070c2 <_dtoa_r+0xb02>
 8006682:	4b98      	ldr	r3, [pc, #608]	; (80068e4 <_dtoa_r+0x324>)
 8006684:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	e7e0      	b.n	8006650 <_dtoa_r+0x90>
 800668e:	ab12      	add	r3, sp, #72	; 0x48
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	ab13      	add	r3, sp, #76	; 0x4c
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	4620      	mov	r0, r4
 800669c:	f001 f800 	bl	80076a0 <__d2b>
 80066a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066a4:	4683      	mov	fp, r0
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	d07d      	beq.n	80067a6 <_dtoa_r+0x1e6>
 80066aa:	46b0      	mov	r8, r6
 80066ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80066b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80066b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80066c0:	2200      	movs	r2, #0
 80066c2:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <_dtoa_r+0x328>)
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7f9 fd5e 	bl	8000188 <__aeabi_dsub>
 80066cc:	a37c      	add	r3, pc, #496	; (adr r3, 80068c0 <_dtoa_r+0x300>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 ff11 	bl	80004f8 <__aeabi_dmul>
 80066d6:	a37c      	add	r3, pc, #496	; (adr r3, 80068c8 <_dtoa_r+0x308>)
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f7f9 fd56 	bl	800018c <__adddf3>
 80066e0:	4606      	mov	r6, r0
 80066e2:	4628      	mov	r0, r5
 80066e4:	460f      	mov	r7, r1
 80066e6:	f7f9 fe9d 	bl	8000424 <__aeabi_i2d>
 80066ea:	a379      	add	r3, pc, #484	; (adr r3, 80068d0 <_dtoa_r+0x310>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff02 	bl	80004f8 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7f9 fd46 	bl	800018c <__adddf3>
 8006700:	4606      	mov	r6, r0
 8006702:	460f      	mov	r7, r1
 8006704:	f7fa f9a8 	bl	8000a58 <__aeabi_d2iz>
 8006708:	2200      	movs	r2, #0
 800670a:	4682      	mov	sl, r0
 800670c:	2300      	movs	r3, #0
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f963 	bl	80009dc <__aeabi_dcmplt>
 8006716:	b148      	cbz	r0, 800672c <_dtoa_r+0x16c>
 8006718:	4650      	mov	r0, sl
 800671a:	f7f9 fe83 	bl	8000424 <__aeabi_i2d>
 800671e:	4632      	mov	r2, r6
 8006720:	463b      	mov	r3, r7
 8006722:	f7fa f951 	bl	80009c8 <__aeabi_dcmpeq>
 8006726:	b908      	cbnz	r0, 800672c <_dtoa_r+0x16c>
 8006728:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672c:	f1ba 0f16 	cmp.w	sl, #22
 8006730:	d85a      	bhi.n	80067e8 <_dtoa_r+0x228>
 8006732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006736:	496d      	ldr	r1, [pc, #436]	; (80068ec <_dtoa_r+0x32c>)
 8006738:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800673c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006740:	f7fa f96a 	bl	8000a18 <__aeabi_dcmpgt>
 8006744:	2800      	cmp	r0, #0
 8006746:	d051      	beq.n	80067ec <_dtoa_r+0x22c>
 8006748:	2300      	movs	r3, #0
 800674a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800674e:	930d      	str	r3, [sp, #52]	; 0x34
 8006750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006752:	1b5d      	subs	r5, r3, r5
 8006754:	1e6b      	subs	r3, r5, #1
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	bf43      	ittte	mi
 800675a:	2300      	movmi	r3, #0
 800675c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006760:	9307      	strmi	r3, [sp, #28]
 8006762:	f04f 0900 	movpl.w	r9, #0
 8006766:	f1ba 0f00 	cmp.w	sl, #0
 800676a:	db41      	blt.n	80067f0 <_dtoa_r+0x230>
 800676c:	9b07      	ldr	r3, [sp, #28]
 800676e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006772:	4453      	add	r3, sl
 8006774:	9307      	str	r3, [sp, #28]
 8006776:	2300      	movs	r3, #0
 8006778:	9308      	str	r3, [sp, #32]
 800677a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800677c:	2b09      	cmp	r3, #9
 800677e:	f200 808f 	bhi.w	80068a0 <_dtoa_r+0x2e0>
 8006782:	2b05      	cmp	r3, #5
 8006784:	bfc4      	itt	gt
 8006786:	3b04      	subgt	r3, #4
 8006788:	931e      	strgt	r3, [sp, #120]	; 0x78
 800678a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800678c:	bfc8      	it	gt
 800678e:	2500      	movgt	r5, #0
 8006790:	f1a3 0302 	sub.w	r3, r3, #2
 8006794:	bfd8      	it	le
 8006796:	2501      	movle	r5, #1
 8006798:	2b03      	cmp	r3, #3
 800679a:	f200 808d 	bhi.w	80068b8 <_dtoa_r+0x2f8>
 800679e:	e8df f003 	tbb	[pc, r3]
 80067a2:	7d7b      	.short	0x7d7b
 80067a4:	6f2f      	.short	0x6f2f
 80067a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067aa:	441d      	add	r5, r3
 80067ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80067b0:	2820      	cmp	r0, #32
 80067b2:	dd13      	ble.n	80067dc <_dtoa_r+0x21c>
 80067b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	fa08 f800 	lsl.w	r8, r8, r0
 80067be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80067c2:	fa23 f000 	lsr.w	r0, r3, r0
 80067c6:	ea48 0000 	orr.w	r0, r8, r0
 80067ca:	f7f9 fe1b 	bl	8000404 <__aeabi_ui2d>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4680      	mov	r8, r0
 80067d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80067d6:	3d01      	subs	r5, #1
 80067d8:	9310      	str	r3, [sp, #64]	; 0x40
 80067da:	e771      	b.n	80066c0 <_dtoa_r+0x100>
 80067dc:	9b02      	ldr	r3, [sp, #8]
 80067de:	f1c0 0020 	rsb	r0, r0, #32
 80067e2:	fa03 f000 	lsl.w	r0, r3, r0
 80067e6:	e7f0      	b.n	80067ca <_dtoa_r+0x20a>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7b0      	b.n	800674e <_dtoa_r+0x18e>
 80067ec:	900d      	str	r0, [sp, #52]	; 0x34
 80067ee:	e7af      	b.n	8006750 <_dtoa_r+0x190>
 80067f0:	f1ca 0300 	rsb	r3, sl, #0
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	2300      	movs	r3, #0
 80067f8:	eba9 090a 	sub.w	r9, r9, sl
 80067fc:	930c      	str	r3, [sp, #48]	; 0x30
 80067fe:	e7bc      	b.n	800677a <_dtoa_r+0x1ba>
 8006800:	2301      	movs	r3, #1
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006806:	2b00      	cmp	r3, #0
 8006808:	dd74      	ble.n	80068f4 <_dtoa_r+0x334>
 800680a:	4698      	mov	r8, r3
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	2200      	movs	r2, #0
 8006810:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006812:	6072      	str	r2, [r6, #4]
 8006814:	2204      	movs	r2, #4
 8006816:	f102 0014 	add.w	r0, r2, #20
 800681a:	4298      	cmp	r0, r3
 800681c:	6871      	ldr	r1, [r6, #4]
 800681e:	d96e      	bls.n	80068fe <_dtoa_r+0x33e>
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fcb0 	bl	8007186 <_Balloc>
 8006826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006828:	6030      	str	r0, [r6, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b8 0f0e 	cmp.w	r8, #14
 8006830:	9306      	str	r3, [sp, #24]
 8006832:	f200 80ed 	bhi.w	8006a10 <_dtoa_r+0x450>
 8006836:	2d00      	cmp	r5, #0
 8006838:	f000 80ea 	beq.w	8006a10 <_dtoa_r+0x450>
 800683c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006840:	f1ba 0f00 	cmp.w	sl, #0
 8006844:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006848:	dd77      	ble.n	800693a <_dtoa_r+0x37a>
 800684a:	4a28      	ldr	r2, [pc, #160]	; (80068ec <_dtoa_r+0x32c>)
 800684c:	f00a 030f 	and.w	r3, sl, #15
 8006850:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006854:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006858:	06f0      	lsls	r0, r6, #27
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006862:	d568      	bpl.n	8006936 <_dtoa_r+0x376>
 8006864:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <_dtoa_r+0x330>)
 800686a:	2503      	movs	r5, #3
 800686c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006870:	f7f9 ff6c 	bl	800074c <__aeabi_ddiv>
 8006874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006878:	f006 060f 	and.w	r6, r6, #15
 800687c:	4f1c      	ldr	r7, [pc, #112]	; (80068f0 <_dtoa_r+0x330>)
 800687e:	e04f      	b.n	8006920 <_dtoa_r+0x360>
 8006880:	2301      	movs	r3, #1
 8006882:	9309      	str	r3, [sp, #36]	; 0x24
 8006884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006886:	4453      	add	r3, sl
 8006888:	f103 0801 	add.w	r8, r3, #1
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	4643      	mov	r3, r8
 8006890:	2b01      	cmp	r3, #1
 8006892:	bfb8      	it	lt
 8006894:	2301      	movlt	r3, #1
 8006896:	e7ba      	b.n	800680e <_dtoa_r+0x24e>
 8006898:	2300      	movs	r3, #0
 800689a:	e7b2      	b.n	8006802 <_dtoa_r+0x242>
 800689c:	2300      	movs	r3, #0
 800689e:	e7f0      	b.n	8006882 <_dtoa_r+0x2c2>
 80068a0:	2501      	movs	r5, #1
 80068a2:	2300      	movs	r3, #0
 80068a4:	9509      	str	r5, [sp, #36]	; 0x24
 80068a6:	931e      	str	r3, [sp, #120]	; 0x78
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	2200      	movs	r2, #0
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	4698      	mov	r8, r3
 80068b2:	2312      	movs	r3, #18
 80068b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80068b6:	e7aa      	b.n	800680e <_dtoa_r+0x24e>
 80068b8:	2301      	movs	r3, #1
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	e7f4      	b.n	80068a8 <_dtoa_r+0x2e8>
 80068be:	bf00      	nop
 80068c0:	636f4361 	.word	0x636f4361
 80068c4:	3fd287a7 	.word	0x3fd287a7
 80068c8:	8b60c8b3 	.word	0x8b60c8b3
 80068cc:	3fc68a28 	.word	0x3fc68a28
 80068d0:	509f79fb 	.word	0x509f79fb
 80068d4:	3fd34413 	.word	0x3fd34413
 80068d8:	7ff00000 	.word	0x7ff00000
 80068dc:	080084ed 	.word	0x080084ed
 80068e0:	080084e4 	.word	0x080084e4
 80068e4:	080084c1 	.word	0x080084c1
 80068e8:	3ff80000 	.word	0x3ff80000
 80068ec:	08008520 	.word	0x08008520
 80068f0:	080084f8 	.word	0x080084f8
 80068f4:	2301      	movs	r3, #1
 80068f6:	9304      	str	r3, [sp, #16]
 80068f8:	4698      	mov	r8, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	e7da      	b.n	80068b4 <_dtoa_r+0x2f4>
 80068fe:	3101      	adds	r1, #1
 8006900:	6071      	str	r1, [r6, #4]
 8006902:	0052      	lsls	r2, r2, #1
 8006904:	e787      	b.n	8006816 <_dtoa_r+0x256>
 8006906:	07f1      	lsls	r1, r6, #31
 8006908:	d508      	bpl.n	800691c <_dtoa_r+0x35c>
 800690a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800690e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006912:	f7f9 fdf1 	bl	80004f8 <__aeabi_dmul>
 8006916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800691a:	3501      	adds	r5, #1
 800691c:	1076      	asrs	r6, r6, #1
 800691e:	3708      	adds	r7, #8
 8006920:	2e00      	cmp	r6, #0
 8006922:	d1f0      	bne.n	8006906 <_dtoa_r+0x346>
 8006924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692c:	f7f9 ff0e 	bl	800074c <__aeabi_ddiv>
 8006930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006934:	e01b      	b.n	800696e <_dtoa_r+0x3ae>
 8006936:	2502      	movs	r5, #2
 8006938:	e7a0      	b.n	800687c <_dtoa_r+0x2bc>
 800693a:	f000 80a4 	beq.w	8006a86 <_dtoa_r+0x4c6>
 800693e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006942:	f1ca 0600 	rsb	r6, sl, #0
 8006946:	4ba0      	ldr	r3, [pc, #640]	; (8006bc8 <_dtoa_r+0x608>)
 8006948:	f006 020f 	and.w	r2, r6, #15
 800694c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fdd0 	bl	80004f8 <__aeabi_dmul>
 8006958:	2502      	movs	r5, #2
 800695a:	2300      	movs	r3, #0
 800695c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006960:	4f9a      	ldr	r7, [pc, #616]	; (8006bcc <_dtoa_r+0x60c>)
 8006962:	1136      	asrs	r6, r6, #4
 8006964:	2e00      	cmp	r6, #0
 8006966:	f040 8083 	bne.w	8006a70 <_dtoa_r+0x4b0>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e0      	bne.n	8006930 <_dtoa_r+0x370>
 800696e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 808a 	beq.w	8006a8a <_dtoa_r+0x4ca>
 8006976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800697a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800697e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006982:	2200      	movs	r2, #0
 8006984:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <_dtoa_r+0x610>)
 8006986:	f7fa f829 	bl	80009dc <__aeabi_dcmplt>
 800698a:	2800      	cmp	r0, #0
 800698c:	d07d      	beq.n	8006a8a <_dtoa_r+0x4ca>
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	d07a      	beq.n	8006a8a <_dtoa_r+0x4ca>
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	dd36      	ble.n	8006a08 <_dtoa_r+0x448>
 800699a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800699e:	2200      	movs	r2, #0
 80069a0:	4b8c      	ldr	r3, [pc, #560]	; (8006bd4 <_dtoa_r+0x614>)
 80069a2:	f7f9 fda9 	bl	80004f8 <__aeabi_dmul>
 80069a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069aa:	9e04      	ldr	r6, [sp, #16]
 80069ac:	f10a 37ff 	add.w	r7, sl, #4294967295
 80069b0:	3501      	adds	r5, #1
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7f9 fd36 	bl	8000424 <__aeabi_i2d>
 80069b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069bc:	f7f9 fd9c 	bl	80004f8 <__aeabi_dmul>
 80069c0:	2200      	movs	r2, #0
 80069c2:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <_dtoa_r+0x618>)
 80069c4:	f7f9 fbe2 	bl	800018c <__adddf3>
 80069c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80069cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d15c      	bne.n	8006a90 <_dtoa_r+0x4d0>
 80069d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	4b7f      	ldr	r3, [pc, #508]	; (8006bdc <_dtoa_r+0x61c>)
 80069de:	f7f9 fbd3 	bl	8000188 <__aeabi_dsub>
 80069e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e4:	462b      	mov	r3, r5
 80069e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ea:	f7fa f815 	bl	8000a18 <__aeabi_dcmpgt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 8281 	bne.w	8006ef6 <_dtoa_r+0x936>
 80069f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069fe:	f7f9 ffed 	bl	80009dc <__aeabi_dcmplt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f040 8275 	bne.w	8006ef2 <_dtoa_r+0x932>
 8006a08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f2c0 814b 	blt.w	8006cae <_dtoa_r+0x6ee>
 8006a18:	f1ba 0f0e 	cmp.w	sl, #14
 8006a1c:	f300 8147 	bgt.w	8006cae <_dtoa_r+0x6ee>
 8006a20:	4b69      	ldr	r3, [pc, #420]	; (8006bc8 <_dtoa_r+0x608>)
 8006a22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f280 80d7 	bge.w	8006be4 <_dtoa_r+0x624>
 8006a36:	f1b8 0f00 	cmp.w	r8, #0
 8006a3a:	f300 80d3 	bgt.w	8006be4 <_dtoa_r+0x624>
 8006a3e:	f040 8257 	bne.w	8006ef0 <_dtoa_r+0x930>
 8006a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b64      	ldr	r3, [pc, #400]	; (8006bdc <_dtoa_r+0x61c>)
 8006a4a:	f7f9 fd55 	bl	80004f8 <__aeabi_dmul>
 8006a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a52:	f7f9 ffd7 	bl	8000a04 <__aeabi_dcmpge>
 8006a56:	4646      	mov	r6, r8
 8006a58:	4647      	mov	r7, r8
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f040 822d 	bne.w	8006eba <_dtoa_r+0x8fa>
 8006a60:	9b06      	ldr	r3, [sp, #24]
 8006a62:	9a06      	ldr	r2, [sp, #24]
 8006a64:	1c5d      	adds	r5, r3, #1
 8006a66:	2331      	movs	r3, #49	; 0x31
 8006a68:	f10a 0a01 	add.w	sl, sl, #1
 8006a6c:	7013      	strb	r3, [r2, #0]
 8006a6e:	e228      	b.n	8006ec2 <_dtoa_r+0x902>
 8006a70:	07f2      	lsls	r2, r6, #31
 8006a72:	d505      	bpl.n	8006a80 <_dtoa_r+0x4c0>
 8006a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a78:	f7f9 fd3e 	bl	80004f8 <__aeabi_dmul>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	3501      	adds	r5, #1
 8006a80:	1076      	asrs	r6, r6, #1
 8006a82:	3708      	adds	r7, #8
 8006a84:	e76e      	b.n	8006964 <_dtoa_r+0x3a4>
 8006a86:	2502      	movs	r5, #2
 8006a88:	e771      	b.n	800696e <_dtoa_r+0x3ae>
 8006a8a:	4657      	mov	r7, sl
 8006a8c:	4646      	mov	r6, r8
 8006a8e:	e790      	b.n	80069b2 <_dtoa_r+0x3f2>
 8006a90:	4b4d      	ldr	r3, [pc, #308]	; (8006bc8 <_dtoa_r+0x608>)
 8006a92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d048      	beq.n	8006b32 <_dtoa_r+0x572>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	494e      	ldr	r1, [pc, #312]	; (8006be0 <_dtoa_r+0x620>)
 8006aa8:	f7f9 fe50 	bl	800074c <__aeabi_ddiv>
 8006aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ab0:	f7f9 fb6a 	bl	8000188 <__aeabi_dsub>
 8006ab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ab8:	9d06      	ldr	r5, [sp, #24]
 8006aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006abe:	f7f9 ffcb 	bl	8000a58 <__aeabi_d2iz>
 8006ac2:	9011      	str	r0, [sp, #68]	; 0x44
 8006ac4:	f7f9 fcae 	bl	8000424 <__aeabi_i2d>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad0:	f7f9 fb5a 	bl	8000188 <__aeabi_dsub>
 8006ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ada:	3330      	adds	r3, #48	; 0x30
 8006adc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ae0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ae4:	f7f9 ff7a 	bl	80009dc <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d163      	bne.n	8006bb4 <_dtoa_r+0x5f4>
 8006aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006af0:	2000      	movs	r0, #0
 8006af2:	4937      	ldr	r1, [pc, #220]	; (8006bd0 <_dtoa_r+0x610>)
 8006af4:	f7f9 fb48 	bl	8000188 <__aeabi_dsub>
 8006af8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006afc:	f7f9 ff6e 	bl	80009dc <__aeabi_dcmplt>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f040 80b5 	bne.w	8006c70 <_dtoa_r+0x6b0>
 8006b06:	9b06      	ldr	r3, [sp, #24]
 8006b08:	1aeb      	subs	r3, r5, r3
 8006b0a:	429e      	cmp	r6, r3
 8006b0c:	f77f af7c 	ble.w	8006a08 <_dtoa_r+0x448>
 8006b10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b2f      	ldr	r3, [pc, #188]	; (8006bd4 <_dtoa_r+0x614>)
 8006b18:	f7f9 fcee 	bl	80004f8 <__aeabi_dmul>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b26:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <_dtoa_r+0x614>)
 8006b28:	f7f9 fce6 	bl	80004f8 <__aeabi_dmul>
 8006b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b30:	e7c3      	b.n	8006aba <_dtoa_r+0x4fa>
 8006b32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b36:	f7f9 fcdf 	bl	80004f8 <__aeabi_dmul>
 8006b3a:	9b06      	ldr	r3, [sp, #24]
 8006b3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b40:	199d      	adds	r5, r3, r6
 8006b42:	461e      	mov	r6, r3
 8006b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b48:	f7f9 ff86 	bl	8000a58 <__aeabi_d2iz>
 8006b4c:	9011      	str	r0, [sp, #68]	; 0x44
 8006b4e:	f7f9 fc69 	bl	8000424 <__aeabi_i2d>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5a:	f7f9 fb15 	bl	8000188 <__aeabi_dsub>
 8006b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b64:	3330      	adds	r3, #48	; 0x30
 8006b66:	f806 3b01 	strb.w	r3, [r6], #1
 8006b6a:	42ae      	cmp	r6, r5
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	d124      	bne.n	8006bbc <_dtoa_r+0x5fc>
 8006b72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <_dtoa_r+0x620>)
 8006b78:	f7f9 fb08 	bl	800018c <__adddf3>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b84:	f7f9 ff48 	bl	8000a18 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d171      	bne.n	8006c70 <_dtoa_r+0x6b0>
 8006b8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b90:	2000      	movs	r0, #0
 8006b92:	4913      	ldr	r1, [pc, #76]	; (8006be0 <_dtoa_r+0x620>)
 8006b94:	f7f9 faf8 	bl	8000188 <__aeabi_dsub>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba0:	f7f9 ff1c 	bl	80009dc <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f43f af2f 	beq.w	8006a08 <_dtoa_r+0x448>
 8006baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bae:	1e6a      	subs	r2, r5, #1
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d001      	beq.n	8006bb8 <_dtoa_r+0x5f8>
 8006bb4:	46ba      	mov	sl, r7
 8006bb6:	e04a      	b.n	8006c4e <_dtoa_r+0x68e>
 8006bb8:	4615      	mov	r5, r2
 8006bba:	e7f6      	b.n	8006baa <_dtoa_r+0x5ea>
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_dtoa_r+0x614>)
 8006bbe:	f7f9 fc9b 	bl	80004f8 <__aeabi_dmul>
 8006bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bc6:	e7bd      	b.n	8006b44 <_dtoa_r+0x584>
 8006bc8:	08008520 	.word	0x08008520
 8006bcc:	080084f8 	.word	0x080084f8
 8006bd0:	3ff00000 	.word	0x3ff00000
 8006bd4:	40240000 	.word	0x40240000
 8006bd8:	401c0000 	.word	0x401c0000
 8006bdc:	40140000 	.word	0x40140000
 8006be0:	3fe00000 	.word	0x3fe00000
 8006be4:	9d06      	ldr	r5, [sp, #24]
 8006be6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fdab 	bl	800074c <__aeabi_ddiv>
 8006bf6:	f7f9 ff2f 	bl	8000a58 <__aeabi_d2iz>
 8006bfa:	4681      	mov	r9, r0
 8006bfc:	f7f9 fc12 	bl	8000424 <__aeabi_i2d>
 8006c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c04:	f7f9 fc78 	bl	80004f8 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4639      	mov	r1, r7
 8006c10:	f7f9 faba 	bl	8000188 <__aeabi_dsub>
 8006c14:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006c18:	f805 6b01 	strb.w	r6, [r5], #1
 8006c1c:	9e06      	ldr	r6, [sp, #24]
 8006c1e:	4602      	mov	r2, r0
 8006c20:	1bae      	subs	r6, r5, r6
 8006c22:	45b0      	cmp	r8, r6
 8006c24:	460b      	mov	r3, r1
 8006c26:	d135      	bne.n	8006c94 <_dtoa_r+0x6d4>
 8006c28:	f7f9 fab0 	bl	800018c <__adddf3>
 8006c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	f7f9 fef0 	bl	8000a18 <__aeabi_dcmpgt>
 8006c38:	b9c8      	cbnz	r0, 8006c6e <_dtoa_r+0x6ae>
 8006c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3e:	4630      	mov	r0, r6
 8006c40:	4639      	mov	r1, r7
 8006c42:	f7f9 fec1 	bl	80009c8 <__aeabi_dcmpeq>
 8006c46:	b110      	cbz	r0, 8006c4e <_dtoa_r+0x68e>
 8006c48:	f019 0f01 	tst.w	r9, #1
 8006c4c:	d10f      	bne.n	8006c6e <_dtoa_r+0x6ae>
 8006c4e:	4659      	mov	r1, fp
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 facc 	bl	80071ee <_Bfree>
 8006c56:	2300      	movs	r3, #0
 8006c58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c5a:	702b      	strb	r3, [r5, #0]
 8006c5c:	f10a 0301 	add.w	r3, sl, #1
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f43f acf3 	beq.w	8006650 <_dtoa_r+0x90>
 8006c6a:	601d      	str	r5, [r3, #0]
 8006c6c:	e4f0      	b.n	8006650 <_dtoa_r+0x90>
 8006c6e:	4657      	mov	r7, sl
 8006c70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c74:	1e6b      	subs	r3, r5, #1
 8006c76:	2a39      	cmp	r2, #57	; 0x39
 8006c78:	d106      	bne.n	8006c88 <_dtoa_r+0x6c8>
 8006c7a:	9a06      	ldr	r2, [sp, #24]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d107      	bne.n	8006c90 <_dtoa_r+0x6d0>
 8006c80:	2330      	movs	r3, #48	; 0x30
 8006c82:	7013      	strb	r3, [r2, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	3701      	adds	r7, #1
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e791      	b.n	8006bb4 <_dtoa_r+0x5f4>
 8006c90:	461d      	mov	r5, r3
 8006c92:	e7ed      	b.n	8006c70 <_dtoa_r+0x6b0>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b99      	ldr	r3, [pc, #612]	; (8006efc <_dtoa_r+0x93c>)
 8006c98:	f7f9 fc2e 	bl	80004f8 <__aeabi_dmul>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	f7f9 fe90 	bl	80009c8 <__aeabi_dcmpeq>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d09e      	beq.n	8006bea <_dtoa_r+0x62a>
 8006cac:	e7cf      	b.n	8006c4e <_dtoa_r+0x68e>
 8006cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	f000 8088 	beq.w	8006dc6 <_dtoa_r+0x806>
 8006cb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006cb8:	2a01      	cmp	r2, #1
 8006cba:	dc6d      	bgt.n	8006d98 <_dtoa_r+0x7d8>
 8006cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d066      	beq.n	8006d90 <_dtoa_r+0x7d0>
 8006cc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cc6:	464d      	mov	r5, r9
 8006cc8:	9e08      	ldr	r6, [sp, #32]
 8006cca:	9a07      	ldr	r2, [sp, #28]
 8006ccc:	2101      	movs	r1, #1
 8006cce:	441a      	add	r2, r3
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4499      	add	r9, r3
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	f000 fb2a 	bl	800732e <__i2b>
 8006cda:	4607      	mov	r7, r0
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	dd0b      	ble.n	8006cf8 <_dtoa_r+0x738>
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd08      	ble.n	8006cf8 <_dtoa_r+0x738>
 8006ce6:	42ab      	cmp	r3, r5
 8006ce8:	bfa8      	it	ge
 8006cea:	462b      	movge	r3, r5
 8006cec:	9a07      	ldr	r2, [sp, #28]
 8006cee:	eba9 0903 	sub.w	r9, r9, r3
 8006cf2:	1aed      	subs	r5, r5, r3
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	9307      	str	r3, [sp, #28]
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	b1eb      	cbz	r3, 8006d38 <_dtoa_r+0x778>
 8006cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d065      	beq.n	8006dce <_dtoa_r+0x80e>
 8006d02:	b18e      	cbz	r6, 8006d28 <_dtoa_r+0x768>
 8006d04:	4639      	mov	r1, r7
 8006d06:	4632      	mov	r2, r6
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fbaf 	bl	800746c <__pow5mult>
 8006d0e:	465a      	mov	r2, fp
 8006d10:	4601      	mov	r1, r0
 8006d12:	4607      	mov	r7, r0
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fb13 	bl	8007340 <__multiply>
 8006d1a:	4659      	mov	r1, fp
 8006d1c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fa65 	bl	80071ee <_Bfree>
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	469b      	mov	fp, r3
 8006d28:	9b08      	ldr	r3, [sp, #32]
 8006d2a:	1b9a      	subs	r2, r3, r6
 8006d2c:	d004      	beq.n	8006d38 <_dtoa_r+0x778>
 8006d2e:	4659      	mov	r1, fp
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fb9b 	bl	800746c <__pow5mult>
 8006d36:	4683      	mov	fp, r0
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 faf7 	bl	800732e <__i2b>
 8006d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d42:	4606      	mov	r6, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 81c6 	beq.w	80070d6 <_dtoa_r+0xb16>
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 fb8c 	bl	800746c <__pow5mult>
 8006d54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d56:	4606      	mov	r6, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	dc3e      	bgt.n	8006dda <_dtoa_r+0x81a>
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d137      	bne.n	8006dd2 <_dtoa_r+0x812>
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d134      	bne.n	8006dd6 <_dtoa_r+0x816>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	0d1b      	lsrs	r3, r3, #20
 8006d74:	051b      	lsls	r3, r3, #20
 8006d76:	b12b      	cbz	r3, 8006d84 <_dtoa_r+0x7c4>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	f109 0901 	add.w	r9, r9, #1
 8006d7e:	3301      	adds	r3, #1
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	2301      	movs	r3, #1
 8006d84:	9308      	str	r3, [sp, #32]
 8006d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d128      	bne.n	8006dde <_dtoa_r+0x81e>
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	e02e      	b.n	8006dee <_dtoa_r+0x82e>
 8006d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d96:	e796      	b.n	8006cc6 <_dtoa_r+0x706>
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006d9e:	42b3      	cmp	r3, r6
 8006da0:	bfb7      	itett	lt
 8006da2:	9b08      	ldrlt	r3, [sp, #32]
 8006da4:	1b9e      	subge	r6, r3, r6
 8006da6:	1af2      	sublt	r2, r6, r3
 8006da8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006daa:	bfbf      	itttt	lt
 8006dac:	9608      	strlt	r6, [sp, #32]
 8006dae:	189b      	addlt	r3, r3, r2
 8006db0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006db2:	2600      	movlt	r6, #0
 8006db4:	f1b8 0f00 	cmp.w	r8, #0
 8006db8:	bfb9      	ittee	lt
 8006dba:	eba9 0508 	sublt.w	r5, r9, r8
 8006dbe:	2300      	movlt	r3, #0
 8006dc0:	464d      	movge	r5, r9
 8006dc2:	4643      	movge	r3, r8
 8006dc4:	e781      	b.n	8006cca <_dtoa_r+0x70a>
 8006dc6:	9e08      	ldr	r6, [sp, #32]
 8006dc8:	464d      	mov	r5, r9
 8006dca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dcc:	e786      	b.n	8006cdc <_dtoa_r+0x71c>
 8006dce:	9a08      	ldr	r2, [sp, #32]
 8006dd0:	e7ad      	b.n	8006d2e <_dtoa_r+0x76e>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e7d6      	b.n	8006d84 <_dtoa_r+0x7c4>
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	e7d4      	b.n	8006d84 <_dtoa_r+0x7c4>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	6933      	ldr	r3, [r6, #16]
 8006de0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006de4:	6918      	ldr	r0, [r3, #16]
 8006de6:	f000 fa54 	bl	8007292 <__hi0bits>
 8006dea:	f1c0 0020 	rsb	r0, r0, #32
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	4418      	add	r0, r3
 8006df2:	f010 001f 	ands.w	r0, r0, #31
 8006df6:	d047      	beq.n	8006e88 <_dtoa_r+0x8c8>
 8006df8:	f1c0 0320 	rsb	r3, r0, #32
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	dd3b      	ble.n	8006e78 <_dtoa_r+0x8b8>
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	f1c0 001c 	rsb	r0, r0, #28
 8006e06:	4481      	add	r9, r0
 8006e08:	4405      	add	r5, r0
 8006e0a:	4403      	add	r3, r0
 8006e0c:	9307      	str	r3, [sp, #28]
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	dd05      	ble.n	8006e20 <_dtoa_r+0x860>
 8006e14:	4659      	mov	r1, fp
 8006e16:	464a      	mov	r2, r9
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fb75 	bl	8007508 <__lshift>
 8006e1e:	4683      	mov	fp, r0
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dd05      	ble.n	8006e32 <_dtoa_r+0x872>
 8006e26:	4631      	mov	r1, r6
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fb6c 	bl	8007508 <__lshift>
 8006e30:	4606      	mov	r6, r0
 8006e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e34:	b353      	cbz	r3, 8006e8c <_dtoa_r+0x8cc>
 8006e36:	4631      	mov	r1, r6
 8006e38:	4658      	mov	r0, fp
 8006e3a:	f000 fbb9 	bl	80075b0 <__mcmp>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	da24      	bge.n	8006e8c <_dtoa_r+0x8cc>
 8006e42:	2300      	movs	r3, #0
 8006e44:	4659      	mov	r1, fp
 8006e46:	220a      	movs	r2, #10
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 f9e7 	bl	800721c <__multadd>
 8006e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e54:	4683      	mov	fp, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8144 	beq.w	80070e4 <_dtoa_r+0xb24>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4639      	mov	r1, r7
 8006e60:	220a      	movs	r2, #10
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f9da 	bl	800721c <__multadd>
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc4d      	bgt.n	8006f0c <_dtoa_r+0x94c>
 8006e70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	dd4a      	ble.n	8006f0c <_dtoa_r+0x94c>
 8006e76:	e011      	b.n	8006e9c <_dtoa_r+0x8dc>
 8006e78:	d0c9      	beq.n	8006e0e <_dtoa_r+0x84e>
 8006e7a:	9a07      	ldr	r2, [sp, #28]
 8006e7c:	331c      	adds	r3, #28
 8006e7e:	441a      	add	r2, r3
 8006e80:	4499      	add	r9, r3
 8006e82:	441d      	add	r5, r3
 8006e84:	4613      	mov	r3, r2
 8006e86:	e7c1      	b.n	8006e0c <_dtoa_r+0x84c>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	e7f6      	b.n	8006e7a <_dtoa_r+0x8ba>
 8006e8c:	f1b8 0f00 	cmp.w	r8, #0
 8006e90:	dc36      	bgt.n	8006f00 <_dtoa_r+0x940>
 8006e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	dd33      	ble.n	8006f00 <_dtoa_r+0x940>
 8006e98:	f8cd 8010 	str.w	r8, [sp, #16]
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	b963      	cbnz	r3, 8006eba <_dtoa_r+0x8fa>
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 f9b9 	bl	800721c <__multadd>
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4606      	mov	r6, r0
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f000 fb7e 	bl	80075b0 <__mcmp>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f73f add3 	bgt.w	8006a60 <_dtoa_r+0x4a0>
 8006eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ebc:	9d06      	ldr	r5, [sp, #24]
 8006ebe:	ea6f 0a03 	mvn.w	sl, r3
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 f990 	bl	80071ee <_Bfree>
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	f43f aebd 	beq.w	8006c4e <_dtoa_r+0x68e>
 8006ed4:	f1b9 0f00 	cmp.w	r9, #0
 8006ed8:	d005      	beq.n	8006ee6 <_dtoa_r+0x926>
 8006eda:	45b9      	cmp	r9, r7
 8006edc:	d003      	beq.n	8006ee6 <_dtoa_r+0x926>
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 f984 	bl	80071ee <_Bfree>
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f980 	bl	80071ee <_Bfree>
 8006eee:	e6ae      	b.n	8006c4e <_dtoa_r+0x68e>
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	4637      	mov	r7, r6
 8006ef4:	e7e1      	b.n	8006eba <_dtoa_r+0x8fa>
 8006ef6:	46ba      	mov	sl, r7
 8006ef8:	4637      	mov	r7, r6
 8006efa:	e5b1      	b.n	8006a60 <_dtoa_r+0x4a0>
 8006efc:	40240000 	.word	0x40240000
 8006f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f02:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80f3 	beq.w	80070f2 <_dtoa_r+0xb32>
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	dd05      	ble.n	8006f1c <_dtoa_r+0x95c>
 8006f10:	4639      	mov	r1, r7
 8006f12:	462a      	mov	r2, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 faf7 	bl	8007508 <__lshift>
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d04c      	beq.n	8006fbc <_dtoa_r+0x9fc>
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 f92e 	bl	8007186 <_Balloc>
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	f107 010c 	add.w	r1, r7, #12
 8006f32:	3202      	adds	r2, #2
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	300c      	adds	r0, #12
 8006f38:	f000 f91a 	bl	8007170 <memcpy>
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fae1 	bl	8007508 <__lshift>
 8006f46:	46b9      	mov	r9, r7
 8006f48:	4607      	mov	r7, r0
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	9307      	str	r3, [sp, #28]
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	4631      	mov	r1, r6
 8006f58:	4658      	mov	r0, fp
 8006f5a:	f7ff faa3 	bl	80064a4 <quorem>
 8006f5e:	4649      	mov	r1, r9
 8006f60:	4605      	mov	r5, r0
 8006f62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f66:	4658      	mov	r0, fp
 8006f68:	f000 fb22 	bl	80075b0 <__mcmp>
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	9002      	str	r0, [sp, #8]
 8006f70:	4631      	mov	r1, r6
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fb36 	bl	80075e4 <__mdiff>
 8006f78:	68c3      	ldr	r3, [r0, #12]
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	bb03      	cbnz	r3, 8006fc0 <_dtoa_r+0xa00>
 8006f7e:	4601      	mov	r1, r0
 8006f80:	9009      	str	r0, [sp, #36]	; 0x24
 8006f82:	4658      	mov	r0, fp
 8006f84:	f000 fb14 	bl	80075b0 <__mcmp>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4620      	mov	r0, r4
 8006f90:	9309      	str	r3, [sp, #36]	; 0x24
 8006f92:	f000 f92c 	bl	80071ee <_Bfree>
 8006f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f98:	b9a3      	cbnz	r3, 8006fc4 <_dtoa_r+0xa04>
 8006f9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f9c:	b992      	cbnz	r2, 8006fc4 <_dtoa_r+0xa04>
 8006f9e:	9a08      	ldr	r2, [sp, #32]
 8006fa0:	b982      	cbnz	r2, 8006fc4 <_dtoa_r+0xa04>
 8006fa2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006fa6:	d029      	beq.n	8006ffc <_dtoa_r+0xa3c>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dd01      	ble.n	8006fb2 <_dtoa_r+0x9f2>
 8006fae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006fb2:	9b07      	ldr	r3, [sp, #28]
 8006fb4:	1c5d      	adds	r5, r3, #1
 8006fb6:	f883 8000 	strb.w	r8, [r3]
 8006fba:	e784      	b.n	8006ec6 <_dtoa_r+0x906>
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	e7c2      	b.n	8006f46 <_dtoa_r+0x986>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7e3      	b.n	8006f8c <_dtoa_r+0x9cc>
 8006fc4:	9a02      	ldr	r2, [sp, #8]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	db04      	blt.n	8006fd4 <_dtoa_r+0xa14>
 8006fca:	d123      	bne.n	8007014 <_dtoa_r+0xa54>
 8006fcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fce:	bb0a      	cbnz	r2, 8007014 <_dtoa_r+0xa54>
 8006fd0:	9a08      	ldr	r2, [sp, #32]
 8006fd2:	b9fa      	cbnz	r2, 8007014 <_dtoa_r+0xa54>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	ddec      	ble.n	8006fb2 <_dtoa_r+0x9f2>
 8006fd8:	4659      	mov	r1, fp
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fa93 	bl	8007508 <__lshift>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4683      	mov	fp, r0
 8006fe6:	f000 fae3 	bl	80075b0 <__mcmp>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dc03      	bgt.n	8006ff6 <_dtoa_r+0xa36>
 8006fee:	d1e0      	bne.n	8006fb2 <_dtoa_r+0x9f2>
 8006ff0:	f018 0f01 	tst.w	r8, #1
 8006ff4:	d0dd      	beq.n	8006fb2 <_dtoa_r+0x9f2>
 8006ff6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ffa:	d1d8      	bne.n	8006fae <_dtoa_r+0x9ee>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	9a07      	ldr	r2, [sp, #28]
 8007000:	1c5d      	adds	r5, r3, #1
 8007002:	2339      	movs	r3, #57	; 0x39
 8007004:	7013      	strb	r3, [r2, #0]
 8007006:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800700a:	1e6a      	subs	r2, r5, #1
 800700c:	2b39      	cmp	r3, #57	; 0x39
 800700e:	d04d      	beq.n	80070ac <_dtoa_r+0xaec>
 8007010:	3301      	adds	r3, #1
 8007012:	e052      	b.n	80070ba <_dtoa_r+0xafa>
 8007014:	9a07      	ldr	r2, [sp, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f102 0501 	add.w	r5, r2, #1
 800701c:	dd06      	ble.n	800702c <_dtoa_r+0xa6c>
 800701e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007022:	d0eb      	beq.n	8006ffc <_dtoa_r+0xa3c>
 8007024:	f108 0801 	add.w	r8, r8, #1
 8007028:	9b07      	ldr	r3, [sp, #28]
 800702a:	e7c4      	b.n	8006fb6 <_dtoa_r+0x9f6>
 800702c:	9b06      	ldr	r3, [sp, #24]
 800702e:	9a04      	ldr	r2, [sp, #16]
 8007030:	1aeb      	subs	r3, r5, r3
 8007032:	4293      	cmp	r3, r2
 8007034:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007038:	d021      	beq.n	800707e <_dtoa_r+0xabe>
 800703a:	4659      	mov	r1, fp
 800703c:	2300      	movs	r3, #0
 800703e:	220a      	movs	r2, #10
 8007040:	4620      	mov	r0, r4
 8007042:	f000 f8eb 	bl	800721c <__multadd>
 8007046:	45b9      	cmp	r9, r7
 8007048:	4683      	mov	fp, r0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	f04f 020a 	mov.w	r2, #10
 8007052:	4649      	mov	r1, r9
 8007054:	4620      	mov	r0, r4
 8007056:	d105      	bne.n	8007064 <_dtoa_r+0xaa4>
 8007058:	f000 f8e0 	bl	800721c <__multadd>
 800705c:	4681      	mov	r9, r0
 800705e:	4607      	mov	r7, r0
 8007060:	9507      	str	r5, [sp, #28]
 8007062:	e778      	b.n	8006f56 <_dtoa_r+0x996>
 8007064:	f000 f8da 	bl	800721c <__multadd>
 8007068:	4639      	mov	r1, r7
 800706a:	4681      	mov	r9, r0
 800706c:	2300      	movs	r3, #0
 800706e:	220a      	movs	r2, #10
 8007070:	4620      	mov	r0, r4
 8007072:	f000 f8d3 	bl	800721c <__multadd>
 8007076:	4607      	mov	r7, r0
 8007078:	e7f2      	b.n	8007060 <_dtoa_r+0xaa0>
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	4659      	mov	r1, fp
 8007080:	2201      	movs	r2, #1
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fa40 	bl	8007508 <__lshift>
 8007088:	4631      	mov	r1, r6
 800708a:	4683      	mov	fp, r0
 800708c:	f000 fa90 	bl	80075b0 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	dcb8      	bgt.n	8007006 <_dtoa_r+0xa46>
 8007094:	d102      	bne.n	800709c <_dtoa_r+0xadc>
 8007096:	f018 0f01 	tst.w	r8, #1
 800709a:	d1b4      	bne.n	8007006 <_dtoa_r+0xa46>
 800709c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070a0:	1e6a      	subs	r2, r5, #1
 80070a2:	2b30      	cmp	r3, #48	; 0x30
 80070a4:	f47f af0f 	bne.w	8006ec6 <_dtoa_r+0x906>
 80070a8:	4615      	mov	r5, r2
 80070aa:	e7f7      	b.n	800709c <_dtoa_r+0xadc>
 80070ac:	9b06      	ldr	r3, [sp, #24]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d105      	bne.n	80070be <_dtoa_r+0xafe>
 80070b2:	2331      	movs	r3, #49	; 0x31
 80070b4:	9a06      	ldr	r2, [sp, #24]
 80070b6:	f10a 0a01 	add.w	sl, sl, #1
 80070ba:	7013      	strb	r3, [r2, #0]
 80070bc:	e703      	b.n	8006ec6 <_dtoa_r+0x906>
 80070be:	4615      	mov	r5, r2
 80070c0:	e7a1      	b.n	8007006 <_dtoa_r+0xa46>
 80070c2:	4b17      	ldr	r3, [pc, #92]	; (8007120 <_dtoa_r+0xb60>)
 80070c4:	f7ff bae1 	b.w	800668a <_dtoa_r+0xca>
 80070c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f aabb 	bne.w	8006646 <_dtoa_r+0x86>
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <_dtoa_r+0xb64>)
 80070d2:	f7ff bada 	b.w	800668a <_dtoa_r+0xca>
 80070d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070d8:	2b01      	cmp	r3, #1
 80070da:	f77f ae3f 	ble.w	8006d5c <_dtoa_r+0x79c>
 80070de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e0:	9308      	str	r3, [sp, #32]
 80070e2:	e653      	b.n	8006d8c <_dtoa_r+0x7cc>
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dc03      	bgt.n	80070f2 <_dtoa_r+0xb32>
 80070ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f73f aed5 	bgt.w	8006e9c <_dtoa_r+0x8dc>
 80070f2:	9d06      	ldr	r5, [sp, #24]
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	f7ff f9d4 	bl	80064a4 <quorem>
 80070fc:	9b06      	ldr	r3, [sp, #24]
 80070fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007102:	f805 8b01 	strb.w	r8, [r5], #1
 8007106:	9a04      	ldr	r2, [sp, #16]
 8007108:	1aeb      	subs	r3, r5, r3
 800710a:	429a      	cmp	r2, r3
 800710c:	ddb5      	ble.n	800707a <_dtoa_r+0xaba>
 800710e:	4659      	mov	r1, fp
 8007110:	2300      	movs	r3, #0
 8007112:	220a      	movs	r2, #10
 8007114:	4620      	mov	r0, r4
 8007116:	f000 f881 	bl	800721c <__multadd>
 800711a:	4683      	mov	fp, r0
 800711c:	e7ea      	b.n	80070f4 <_dtoa_r+0xb34>
 800711e:	bf00      	nop
 8007120:	080084c0 	.word	0x080084c0
 8007124:	080084e4 	.word	0x080084e4

08007128 <_localeconv_r>:
 8007128:	4b04      	ldr	r3, [pc, #16]	; (800713c <_localeconv_r+0x14>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6a18      	ldr	r0, [r3, #32]
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <_localeconv_r+0x18>)
 8007130:	2800      	cmp	r0, #0
 8007132:	bf08      	it	eq
 8007134:	4618      	moveq	r0, r3
 8007136:	30f0      	adds	r0, #240	; 0xf0
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000008 	.word	0x20000008
 8007140:	2000006c 	.word	0x2000006c

08007144 <malloc>:
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <malloc+0xc>)
 8007146:	4601      	mov	r1, r0
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f000 bb53 	b.w	80077f4 <_malloc_r>
 800714e:	bf00      	nop
 8007150:	20000008 	.word	0x20000008

08007154 <memchr>:
 8007154:	b510      	push	{r4, lr}
 8007156:	b2c9      	uxtb	r1, r1
 8007158:	4402      	add	r2, r0
 800715a:	4290      	cmp	r0, r2
 800715c:	4603      	mov	r3, r0
 800715e:	d101      	bne.n	8007164 <memchr+0x10>
 8007160:	2300      	movs	r3, #0
 8007162:	e003      	b.n	800716c <memchr+0x18>
 8007164:	781c      	ldrb	r4, [r3, #0]
 8007166:	3001      	adds	r0, #1
 8007168:	428c      	cmp	r4, r1
 800716a:	d1f6      	bne.n	800715a <memchr+0x6>
 800716c:	4618      	mov	r0, r3
 800716e:	bd10      	pop	{r4, pc}

08007170 <memcpy>:
 8007170:	b510      	push	{r4, lr}
 8007172:	1e43      	subs	r3, r0, #1
 8007174:	440a      	add	r2, r1
 8007176:	4291      	cmp	r1, r2
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	bd10      	pop	{r4, pc}
 800717c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007184:	e7f7      	b.n	8007176 <memcpy+0x6>

08007186 <_Balloc>:
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800718a:	4604      	mov	r4, r0
 800718c:	460e      	mov	r6, r1
 800718e:	b93d      	cbnz	r5, 80071a0 <_Balloc+0x1a>
 8007190:	2010      	movs	r0, #16
 8007192:	f7ff ffd7 	bl	8007144 <malloc>
 8007196:	6260      	str	r0, [r4, #36]	; 0x24
 8007198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800719c:	6005      	str	r5, [r0, #0]
 800719e:	60c5      	str	r5, [r0, #12]
 80071a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071a2:	68eb      	ldr	r3, [r5, #12]
 80071a4:	b183      	cbz	r3, 80071c8 <_Balloc+0x42>
 80071a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071ae:	b9b8      	cbnz	r0, 80071e0 <_Balloc+0x5a>
 80071b0:	2101      	movs	r1, #1
 80071b2:	fa01 f506 	lsl.w	r5, r1, r6
 80071b6:	1d6a      	adds	r2, r5, #5
 80071b8:	0092      	lsls	r2, r2, #2
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fabf 	bl	800773e <_calloc_r>
 80071c0:	b160      	cbz	r0, 80071dc <_Balloc+0x56>
 80071c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071c6:	e00e      	b.n	80071e6 <_Balloc+0x60>
 80071c8:	2221      	movs	r2, #33	; 0x21
 80071ca:	2104      	movs	r1, #4
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fab6 	bl	800773e <_calloc_r>
 80071d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d4:	60e8      	str	r0, [r5, #12]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <_Balloc+0x20>
 80071dc:	2000      	movs	r0, #0
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	6802      	ldr	r2, [r0, #0]
 80071e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80071e6:	2300      	movs	r3, #0
 80071e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071ec:	e7f7      	b.n	80071de <_Balloc+0x58>

080071ee <_Bfree>:
 80071ee:	b570      	push	{r4, r5, r6, lr}
 80071f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071f2:	4606      	mov	r6, r0
 80071f4:	460d      	mov	r5, r1
 80071f6:	b93c      	cbnz	r4, 8007208 <_Bfree+0x1a>
 80071f8:	2010      	movs	r0, #16
 80071fa:	f7ff ffa3 	bl	8007144 <malloc>
 80071fe:	6270      	str	r0, [r6, #36]	; 0x24
 8007200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007204:	6004      	str	r4, [r0, #0]
 8007206:	60c4      	str	r4, [r0, #12]
 8007208:	b13d      	cbz	r5, 800721a <_Bfree+0x2c>
 800720a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800720c:	686a      	ldr	r2, [r5, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007214:	6029      	str	r1, [r5, #0]
 8007216:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800721a:	bd70      	pop	{r4, r5, r6, pc}

0800721c <__multadd>:
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	461f      	mov	r7, r3
 8007222:	4606      	mov	r6, r0
 8007224:	460c      	mov	r4, r1
 8007226:	2300      	movs	r3, #0
 8007228:	690d      	ldr	r5, [r1, #16]
 800722a:	f101 0c14 	add.w	ip, r1, #20
 800722e:	f8dc 0000 	ldr.w	r0, [ip]
 8007232:	3301      	adds	r3, #1
 8007234:	b281      	uxth	r1, r0
 8007236:	fb02 7101 	mla	r1, r2, r1, r7
 800723a:	0c00      	lsrs	r0, r0, #16
 800723c:	0c0f      	lsrs	r7, r1, #16
 800723e:	fb02 7000 	mla	r0, r2, r0, r7
 8007242:	b289      	uxth	r1, r1
 8007244:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007248:	429d      	cmp	r5, r3
 800724a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800724e:	f84c 1b04 	str.w	r1, [ip], #4
 8007252:	dcec      	bgt.n	800722e <__multadd+0x12>
 8007254:	b1d7      	cbz	r7, 800728c <__multadd+0x70>
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	42ab      	cmp	r3, r5
 800725a:	dc12      	bgt.n	8007282 <__multadd+0x66>
 800725c:	6861      	ldr	r1, [r4, #4]
 800725e:	4630      	mov	r0, r6
 8007260:	3101      	adds	r1, #1
 8007262:	f7ff ff90 	bl	8007186 <_Balloc>
 8007266:	4680      	mov	r8, r0
 8007268:	6922      	ldr	r2, [r4, #16]
 800726a:	f104 010c 	add.w	r1, r4, #12
 800726e:	3202      	adds	r2, #2
 8007270:	0092      	lsls	r2, r2, #2
 8007272:	300c      	adds	r0, #12
 8007274:	f7ff ff7c 	bl	8007170 <memcpy>
 8007278:	4621      	mov	r1, r4
 800727a:	4630      	mov	r0, r6
 800727c:	f7ff ffb7 	bl	80071ee <_Bfree>
 8007280:	4644      	mov	r4, r8
 8007282:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007286:	3501      	adds	r5, #1
 8007288:	615f      	str	r7, [r3, #20]
 800728a:	6125      	str	r5, [r4, #16]
 800728c:	4620      	mov	r0, r4
 800728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007292 <__hi0bits>:
 8007292:	0c02      	lsrs	r2, r0, #16
 8007294:	0412      	lsls	r2, r2, #16
 8007296:	4603      	mov	r3, r0
 8007298:	b9b2      	cbnz	r2, 80072c8 <__hi0bits+0x36>
 800729a:	0403      	lsls	r3, r0, #16
 800729c:	2010      	movs	r0, #16
 800729e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072a2:	bf04      	itt	eq
 80072a4:	021b      	lsleq	r3, r3, #8
 80072a6:	3008      	addeq	r0, #8
 80072a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072ac:	bf04      	itt	eq
 80072ae:	011b      	lsleq	r3, r3, #4
 80072b0:	3004      	addeq	r0, #4
 80072b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072b6:	bf04      	itt	eq
 80072b8:	009b      	lsleq	r3, r3, #2
 80072ba:	3002      	addeq	r0, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	db06      	blt.n	80072ce <__hi0bits+0x3c>
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	d503      	bpl.n	80072cc <__hi0bits+0x3a>
 80072c4:	3001      	adds	r0, #1
 80072c6:	4770      	bx	lr
 80072c8:	2000      	movs	r0, #0
 80072ca:	e7e8      	b.n	800729e <__hi0bits+0xc>
 80072cc:	2020      	movs	r0, #32
 80072ce:	4770      	bx	lr

080072d0 <__lo0bits>:
 80072d0:	6803      	ldr	r3, [r0, #0]
 80072d2:	4601      	mov	r1, r0
 80072d4:	f013 0207 	ands.w	r2, r3, #7
 80072d8:	d00b      	beq.n	80072f2 <__lo0bits+0x22>
 80072da:	07da      	lsls	r2, r3, #31
 80072dc:	d423      	bmi.n	8007326 <__lo0bits+0x56>
 80072de:	0798      	lsls	r0, r3, #30
 80072e0:	bf49      	itett	mi
 80072e2:	085b      	lsrmi	r3, r3, #1
 80072e4:	089b      	lsrpl	r3, r3, #2
 80072e6:	2001      	movmi	r0, #1
 80072e8:	600b      	strmi	r3, [r1, #0]
 80072ea:	bf5c      	itt	pl
 80072ec:	600b      	strpl	r3, [r1, #0]
 80072ee:	2002      	movpl	r0, #2
 80072f0:	4770      	bx	lr
 80072f2:	b298      	uxth	r0, r3
 80072f4:	b9a8      	cbnz	r0, 8007322 <__lo0bits+0x52>
 80072f6:	2010      	movs	r0, #16
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072fe:	bf04      	itt	eq
 8007300:	0a1b      	lsreq	r3, r3, #8
 8007302:	3008      	addeq	r0, #8
 8007304:	071a      	lsls	r2, r3, #28
 8007306:	bf04      	itt	eq
 8007308:	091b      	lsreq	r3, r3, #4
 800730a:	3004      	addeq	r0, #4
 800730c:	079a      	lsls	r2, r3, #30
 800730e:	bf04      	itt	eq
 8007310:	089b      	lsreq	r3, r3, #2
 8007312:	3002      	addeq	r0, #2
 8007314:	07da      	lsls	r2, r3, #31
 8007316:	d402      	bmi.n	800731e <__lo0bits+0x4e>
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	d006      	beq.n	800732a <__lo0bits+0x5a>
 800731c:	3001      	adds	r0, #1
 800731e:	600b      	str	r3, [r1, #0]
 8007320:	4770      	bx	lr
 8007322:	4610      	mov	r0, r2
 8007324:	e7e9      	b.n	80072fa <__lo0bits+0x2a>
 8007326:	2000      	movs	r0, #0
 8007328:	4770      	bx	lr
 800732a:	2020      	movs	r0, #32
 800732c:	4770      	bx	lr

0800732e <__i2b>:
 800732e:	b510      	push	{r4, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	2101      	movs	r1, #1
 8007334:	f7ff ff27 	bl	8007186 <_Balloc>
 8007338:	2201      	movs	r2, #1
 800733a:	6144      	str	r4, [r0, #20]
 800733c:	6102      	str	r2, [r0, #16]
 800733e:	bd10      	pop	{r4, pc}

08007340 <__multiply>:
 8007340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	4614      	mov	r4, r2
 8007346:	690a      	ldr	r2, [r1, #16]
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	4688      	mov	r8, r1
 800734c:	429a      	cmp	r2, r3
 800734e:	bfbe      	ittt	lt
 8007350:	460b      	movlt	r3, r1
 8007352:	46a0      	movlt	r8, r4
 8007354:	461c      	movlt	r4, r3
 8007356:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800735a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800735e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007362:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007366:	eb07 0609 	add.w	r6, r7, r9
 800736a:	42b3      	cmp	r3, r6
 800736c:	bfb8      	it	lt
 800736e:	3101      	addlt	r1, #1
 8007370:	f7ff ff09 	bl	8007186 <_Balloc>
 8007374:	f100 0514 	add.w	r5, r0, #20
 8007378:	462b      	mov	r3, r5
 800737a:	2200      	movs	r2, #0
 800737c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007380:	4573      	cmp	r3, lr
 8007382:	d316      	bcc.n	80073b2 <__multiply+0x72>
 8007384:	f104 0214 	add.w	r2, r4, #20
 8007388:	f108 0114 	add.w	r1, r8, #20
 800738c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007390:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	9201      	str	r2, [sp, #4]
 800739a:	4293      	cmp	r3, r2
 800739c:	d80c      	bhi.n	80073b8 <__multiply+0x78>
 800739e:	2e00      	cmp	r6, #0
 80073a0:	dd03      	ble.n	80073aa <__multiply+0x6a>
 80073a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d05d      	beq.n	8007466 <__multiply+0x126>
 80073aa:	6106      	str	r6, [r0, #16]
 80073ac:	b003      	add	sp, #12
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	f843 2b04 	str.w	r2, [r3], #4
 80073b6:	e7e3      	b.n	8007380 <__multiply+0x40>
 80073b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80073bc:	f1bb 0f00 	cmp.w	fp, #0
 80073c0:	d023      	beq.n	800740a <__multiply+0xca>
 80073c2:	4689      	mov	r9, r1
 80073c4:	46ac      	mov	ip, r5
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80073ce:	f8dc a000 	ldr.w	sl, [ip]
 80073d2:	b2a3      	uxth	r3, r4
 80073d4:	fa1f fa8a 	uxth.w	sl, sl
 80073d8:	fb0b a303 	mla	r3, fp, r3, sl
 80073dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073e0:	f8dc 4000 	ldr.w	r4, [ip]
 80073e4:	4443      	add	r3, r8
 80073e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80073ee:	46e2      	mov	sl, ip
 80073f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073fa:	454f      	cmp	r7, r9
 80073fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007400:	f84a 3b04 	str.w	r3, [sl], #4
 8007404:	d82b      	bhi.n	800745e <__multiply+0x11e>
 8007406:	f8cc 8004 	str.w	r8, [ip, #4]
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	3204      	adds	r2, #4
 800740e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007412:	f1ba 0f00 	cmp.w	sl, #0
 8007416:	d020      	beq.n	800745a <__multiply+0x11a>
 8007418:	4689      	mov	r9, r1
 800741a:	46a8      	mov	r8, r5
 800741c:	f04f 0b00 	mov.w	fp, #0
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	f8b9 c000 	ldrh.w	ip, [r9]
 8007426:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800742a:	b29b      	uxth	r3, r3
 800742c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007430:	46c4      	mov	ip, r8
 8007432:	445c      	add	r4, fp
 8007434:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007438:	f84c 3b04 	str.w	r3, [ip], #4
 800743c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007440:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	fb0a b303 	mla	r3, sl, r3, fp
 800744a:	454f      	cmp	r7, r9
 800744c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007450:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007454:	d805      	bhi.n	8007462 <__multiply+0x122>
 8007456:	f8c8 3004 	str.w	r3, [r8, #4]
 800745a:	3504      	adds	r5, #4
 800745c:	e79b      	b.n	8007396 <__multiply+0x56>
 800745e:	46d4      	mov	ip, sl
 8007460:	e7b3      	b.n	80073ca <__multiply+0x8a>
 8007462:	46e0      	mov	r8, ip
 8007464:	e7dd      	b.n	8007422 <__multiply+0xe2>
 8007466:	3e01      	subs	r6, #1
 8007468:	e799      	b.n	800739e <__multiply+0x5e>
	...

0800746c <__pow5mult>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4615      	mov	r5, r2
 8007472:	f012 0203 	ands.w	r2, r2, #3
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	d007      	beq.n	800748c <__pow5mult+0x20>
 800747c:	4c21      	ldr	r4, [pc, #132]	; (8007504 <__pow5mult+0x98>)
 800747e:	3a01      	subs	r2, #1
 8007480:	2300      	movs	r3, #0
 8007482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007486:	f7ff fec9 	bl	800721c <__multadd>
 800748a:	4607      	mov	r7, r0
 800748c:	10ad      	asrs	r5, r5, #2
 800748e:	d035      	beq.n	80074fc <__pow5mult+0x90>
 8007490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007492:	b93c      	cbnz	r4, 80074a4 <__pow5mult+0x38>
 8007494:	2010      	movs	r0, #16
 8007496:	f7ff fe55 	bl	8007144 <malloc>
 800749a:	6270      	str	r0, [r6, #36]	; 0x24
 800749c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074a0:	6004      	str	r4, [r0, #0]
 80074a2:	60c4      	str	r4, [r0, #12]
 80074a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074ac:	b94c      	cbnz	r4, 80074c2 <__pow5mult+0x56>
 80074ae:	f240 2171 	movw	r1, #625	; 0x271
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ff3b 	bl	800732e <__i2b>
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	f04f 0800 	mov.w	r8, #0
 80074c6:	07eb      	lsls	r3, r5, #31
 80074c8:	d50a      	bpl.n	80074e0 <__pow5mult+0x74>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4622      	mov	r2, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ff36 	bl	8007340 <__multiply>
 80074d4:	4681      	mov	r9, r0
 80074d6:	4639      	mov	r1, r7
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff fe88 	bl	80071ee <_Bfree>
 80074de:	464f      	mov	r7, r9
 80074e0:	106d      	asrs	r5, r5, #1
 80074e2:	d00b      	beq.n	80074fc <__pow5mult+0x90>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	b938      	cbnz	r0, 80074f8 <__pow5mult+0x8c>
 80074e8:	4622      	mov	r2, r4
 80074ea:	4621      	mov	r1, r4
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ff27 	bl	8007340 <__multiply>
 80074f2:	6020      	str	r0, [r4, #0]
 80074f4:	f8c0 8000 	str.w	r8, [r0]
 80074f8:	4604      	mov	r4, r0
 80074fa:	e7e4      	b.n	80074c6 <__pow5mult+0x5a>
 80074fc:	4638      	mov	r0, r7
 80074fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007502:	bf00      	nop
 8007504:	080085e8 	.word	0x080085e8

08007508 <__lshift>:
 8007508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	460c      	mov	r4, r1
 800750e:	4607      	mov	r7, r0
 8007510:	4616      	mov	r6, r2
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007518:	eb0a 0903 	add.w	r9, sl, r3
 800751c:	6849      	ldr	r1, [r1, #4]
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	f109 0501 	add.w	r5, r9, #1
 8007524:	42ab      	cmp	r3, r5
 8007526:	db32      	blt.n	800758e <__lshift+0x86>
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff fe2c 	bl	8007186 <_Balloc>
 800752e:	2300      	movs	r3, #0
 8007530:	4680      	mov	r8, r0
 8007532:	461a      	mov	r2, r3
 8007534:	f100 0114 	add.w	r1, r0, #20
 8007538:	4553      	cmp	r3, sl
 800753a:	db2b      	blt.n	8007594 <__lshift+0x8c>
 800753c:	6920      	ldr	r0, [r4, #16]
 800753e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007542:	f104 0314 	add.w	r3, r4, #20
 8007546:	f016 021f 	ands.w	r2, r6, #31
 800754a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800754e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007552:	d025      	beq.n	80075a0 <__lshift+0x98>
 8007554:	2000      	movs	r0, #0
 8007556:	f1c2 0e20 	rsb	lr, r2, #32
 800755a:	468a      	mov	sl, r1
 800755c:	681e      	ldr	r6, [r3, #0]
 800755e:	4096      	lsls	r6, r2
 8007560:	4330      	orrs	r0, r6
 8007562:	f84a 0b04 	str.w	r0, [sl], #4
 8007566:	f853 0b04 	ldr.w	r0, [r3], #4
 800756a:	459c      	cmp	ip, r3
 800756c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007570:	d814      	bhi.n	800759c <__lshift+0x94>
 8007572:	6048      	str	r0, [r1, #4]
 8007574:	b108      	cbz	r0, 800757a <__lshift+0x72>
 8007576:	f109 0502 	add.w	r5, r9, #2
 800757a:	3d01      	subs	r5, #1
 800757c:	4638      	mov	r0, r7
 800757e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007582:	4621      	mov	r1, r4
 8007584:	f7ff fe33 	bl	80071ee <_Bfree>
 8007588:	4640      	mov	r0, r8
 800758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758e:	3101      	adds	r1, #1
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	e7c7      	b.n	8007524 <__lshift+0x1c>
 8007594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007598:	3301      	adds	r3, #1
 800759a:	e7cd      	b.n	8007538 <__lshift+0x30>
 800759c:	4651      	mov	r1, sl
 800759e:	e7dc      	b.n	800755a <__lshift+0x52>
 80075a0:	3904      	subs	r1, #4
 80075a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a6:	459c      	cmp	ip, r3
 80075a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ac:	d8f9      	bhi.n	80075a2 <__lshift+0x9a>
 80075ae:	e7e4      	b.n	800757a <__lshift+0x72>

080075b0 <__mcmp>:
 80075b0:	6903      	ldr	r3, [r0, #16]
 80075b2:	690a      	ldr	r2, [r1, #16]
 80075b4:	b530      	push	{r4, r5, lr}
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	d10c      	bne.n	80075d4 <__mcmp+0x24>
 80075ba:	0092      	lsls	r2, r2, #2
 80075bc:	3014      	adds	r0, #20
 80075be:	3114      	adds	r1, #20
 80075c0:	1884      	adds	r4, r0, r2
 80075c2:	4411      	add	r1, r2
 80075c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075cc:	4295      	cmp	r5, r2
 80075ce:	d003      	beq.n	80075d8 <__mcmp+0x28>
 80075d0:	d305      	bcc.n	80075de <__mcmp+0x2e>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4618      	mov	r0, r3
 80075d6:	bd30      	pop	{r4, r5, pc}
 80075d8:	42a0      	cmp	r0, r4
 80075da:	d3f3      	bcc.n	80075c4 <__mcmp+0x14>
 80075dc:	e7fa      	b.n	80075d4 <__mcmp+0x24>
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	e7f7      	b.n	80075d4 <__mcmp+0x24>

080075e4 <__mdiff>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	460d      	mov	r5, r1
 80075ea:	4607      	mov	r7, r0
 80075ec:	4611      	mov	r1, r2
 80075ee:	4628      	mov	r0, r5
 80075f0:	4614      	mov	r4, r2
 80075f2:	f7ff ffdd 	bl	80075b0 <__mcmp>
 80075f6:	1e06      	subs	r6, r0, #0
 80075f8:	d108      	bne.n	800760c <__mdiff+0x28>
 80075fa:	4631      	mov	r1, r6
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7ff fdc2 	bl	8007186 <_Balloc>
 8007602:	2301      	movs	r3, #1
 8007604:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760c:	bfa4      	itt	ge
 800760e:	4623      	movge	r3, r4
 8007610:	462c      	movge	r4, r5
 8007612:	4638      	mov	r0, r7
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	bfa6      	itte	ge
 8007618:	461d      	movge	r5, r3
 800761a:	2600      	movge	r6, #0
 800761c:	2601      	movlt	r6, #1
 800761e:	f7ff fdb2 	bl	8007186 <_Balloc>
 8007622:	f04f 0e00 	mov.w	lr, #0
 8007626:	60c6      	str	r6, [r0, #12]
 8007628:	692b      	ldr	r3, [r5, #16]
 800762a:	6926      	ldr	r6, [r4, #16]
 800762c:	f104 0214 	add.w	r2, r4, #20
 8007630:	f105 0914 	add.w	r9, r5, #20
 8007634:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007638:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800763c:	f100 0114 	add.w	r1, r0, #20
 8007640:	f852 ab04 	ldr.w	sl, [r2], #4
 8007644:	f859 5b04 	ldr.w	r5, [r9], #4
 8007648:	fa1f f38a 	uxth.w	r3, sl
 800764c:	4473      	add	r3, lr
 800764e:	b2ac      	uxth	r4, r5
 8007650:	1b1b      	subs	r3, r3, r4
 8007652:	0c2c      	lsrs	r4, r5, #16
 8007654:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007658:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007662:	45c8      	cmp	r8, r9
 8007664:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007668:	4694      	mov	ip, r2
 800766a:	f841 4b04 	str.w	r4, [r1], #4
 800766e:	d8e7      	bhi.n	8007640 <__mdiff+0x5c>
 8007670:	45bc      	cmp	ip, r7
 8007672:	d304      	bcc.n	800767e <__mdiff+0x9a>
 8007674:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007678:	b183      	cbz	r3, 800769c <__mdiff+0xb8>
 800767a:	6106      	str	r6, [r0, #16]
 800767c:	e7c4      	b.n	8007608 <__mdiff+0x24>
 800767e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007682:	b2a2      	uxth	r2, r4
 8007684:	4472      	add	r2, lr
 8007686:	1413      	asrs	r3, r2, #16
 8007688:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800768c:	b292      	uxth	r2, r2
 800768e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007692:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007696:	f841 2b04 	str.w	r2, [r1], #4
 800769a:	e7e9      	b.n	8007670 <__mdiff+0x8c>
 800769c:	3e01      	subs	r6, #1
 800769e:	e7e9      	b.n	8007674 <__mdiff+0x90>

080076a0 <__d2b>:
 80076a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076a4:	461c      	mov	r4, r3
 80076a6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80076aa:	2101      	movs	r1, #1
 80076ac:	4690      	mov	r8, r2
 80076ae:	f7ff fd6a 	bl	8007186 <_Balloc>
 80076b2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80076b6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80076ba:	4607      	mov	r7, r0
 80076bc:	bb34      	cbnz	r4, 800770c <__d2b+0x6c>
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	f1b8 0200 	subs.w	r2, r8, #0
 80076c4:	d027      	beq.n	8007716 <__d2b+0x76>
 80076c6:	a802      	add	r0, sp, #8
 80076c8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80076cc:	f7ff fe00 	bl	80072d0 <__lo0bits>
 80076d0:	9900      	ldr	r1, [sp, #0]
 80076d2:	b1f0      	cbz	r0, 8007712 <__d2b+0x72>
 80076d4:	9a01      	ldr	r2, [sp, #4]
 80076d6:	f1c0 0320 	rsb	r3, r0, #32
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	430b      	orrs	r3, r1
 80076e0:	40c2      	lsrs	r2, r0
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf14      	ite	ne
 80076ec:	2102      	movne	r1, #2
 80076ee:	2101      	moveq	r1, #1
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	6139      	str	r1, [r7, #16]
 80076f4:	b1c4      	cbz	r4, 8007728 <__d2b+0x88>
 80076f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80076fa:	4404      	add	r4, r0
 80076fc:	6034      	str	r4, [r6, #0]
 80076fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	4638      	mov	r0, r7
 8007706:	b002      	add	sp, #8
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007710:	e7d5      	b.n	80076be <__d2b+0x1e>
 8007712:	6179      	str	r1, [r7, #20]
 8007714:	e7e7      	b.n	80076e6 <__d2b+0x46>
 8007716:	a801      	add	r0, sp, #4
 8007718:	f7ff fdda 	bl	80072d0 <__lo0bits>
 800771c:	2101      	movs	r1, #1
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	6139      	str	r1, [r7, #16]
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	3020      	adds	r0, #32
 8007726:	e7e5      	b.n	80076f4 <__d2b+0x54>
 8007728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800772c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	6918      	ldr	r0, [r3, #16]
 8007734:	f7ff fdad 	bl	8007292 <__hi0bits>
 8007738:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800773c:	e7e1      	b.n	8007702 <__d2b+0x62>

0800773e <_calloc_r>:
 800773e:	b538      	push	{r3, r4, r5, lr}
 8007740:	fb02 f401 	mul.w	r4, r2, r1
 8007744:	4621      	mov	r1, r4
 8007746:	f000 f855 	bl	80077f4 <_malloc_r>
 800774a:	4605      	mov	r5, r0
 800774c:	b118      	cbz	r0, 8007756 <_calloc_r+0x18>
 800774e:	4622      	mov	r2, r4
 8007750:	2100      	movs	r1, #0
 8007752:	f7fe fa2f 	bl	8005bb4 <memset>
 8007756:	4628      	mov	r0, r5
 8007758:	bd38      	pop	{r3, r4, r5, pc}
	...

0800775c <_free_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4605      	mov	r5, r0
 8007760:	2900      	cmp	r1, #0
 8007762:	d043      	beq.n	80077ec <_free_r+0x90>
 8007764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007768:	1f0c      	subs	r4, r1, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfb8      	it	lt
 800776e:	18e4      	addlt	r4, r4, r3
 8007770:	f000 fa27 	bl	8007bc2 <__malloc_lock>
 8007774:	4a1e      	ldr	r2, [pc, #120]	; (80077f0 <_free_r+0x94>)
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	4610      	mov	r0, r2
 800777a:	b933      	cbnz	r3, 800778a <_free_r+0x2e>
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6014      	str	r4, [r2, #0]
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007786:	f000 ba1d 	b.w	8007bc4 <__malloc_unlock>
 800778a:	42a3      	cmp	r3, r4
 800778c:	d90b      	bls.n	80077a6 <_free_r+0x4a>
 800778e:	6821      	ldr	r1, [r4, #0]
 8007790:	1862      	adds	r2, r4, r1
 8007792:	4293      	cmp	r3, r2
 8007794:	bf01      	itttt	eq
 8007796:	681a      	ldreq	r2, [r3, #0]
 8007798:	685b      	ldreq	r3, [r3, #4]
 800779a:	1852      	addeq	r2, r2, r1
 800779c:	6022      	streq	r2, [r4, #0]
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	6004      	str	r4, [r0, #0]
 80077a2:	e7ed      	b.n	8007780 <_free_r+0x24>
 80077a4:	4613      	mov	r3, r2
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	b10a      	cbz	r2, 80077ae <_free_r+0x52>
 80077aa:	42a2      	cmp	r2, r4
 80077ac:	d9fa      	bls.n	80077a4 <_free_r+0x48>
 80077ae:	6819      	ldr	r1, [r3, #0]
 80077b0:	1858      	adds	r0, r3, r1
 80077b2:	42a0      	cmp	r0, r4
 80077b4:	d10b      	bne.n	80077ce <_free_r+0x72>
 80077b6:	6820      	ldr	r0, [r4, #0]
 80077b8:	4401      	add	r1, r0
 80077ba:	1858      	adds	r0, r3, r1
 80077bc:	4282      	cmp	r2, r0
 80077be:	6019      	str	r1, [r3, #0]
 80077c0:	d1de      	bne.n	8007780 <_free_r+0x24>
 80077c2:	6810      	ldr	r0, [r2, #0]
 80077c4:	6852      	ldr	r2, [r2, #4]
 80077c6:	4401      	add	r1, r0
 80077c8:	6019      	str	r1, [r3, #0]
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	e7d8      	b.n	8007780 <_free_r+0x24>
 80077ce:	d902      	bls.n	80077d6 <_free_r+0x7a>
 80077d0:	230c      	movs	r3, #12
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	e7d4      	b.n	8007780 <_free_r+0x24>
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	1821      	adds	r1, r4, r0
 80077da:	428a      	cmp	r2, r1
 80077dc:	bf01      	itttt	eq
 80077de:	6811      	ldreq	r1, [r2, #0]
 80077e0:	6852      	ldreq	r2, [r2, #4]
 80077e2:	1809      	addeq	r1, r1, r0
 80077e4:	6021      	streq	r1, [r4, #0]
 80077e6:	6062      	str	r2, [r4, #4]
 80077e8:	605c      	str	r4, [r3, #4]
 80077ea:	e7c9      	b.n	8007780 <_free_r+0x24>
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000258 	.word	0x20000258

080077f4 <_malloc_r>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	1ccd      	adds	r5, r1, #3
 80077f8:	f025 0503 	bic.w	r5, r5, #3
 80077fc:	3508      	adds	r5, #8
 80077fe:	2d0c      	cmp	r5, #12
 8007800:	bf38      	it	cc
 8007802:	250c      	movcc	r5, #12
 8007804:	2d00      	cmp	r5, #0
 8007806:	4606      	mov	r6, r0
 8007808:	db01      	blt.n	800780e <_malloc_r+0x1a>
 800780a:	42a9      	cmp	r1, r5
 800780c:	d903      	bls.n	8007816 <_malloc_r+0x22>
 800780e:	230c      	movs	r3, #12
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	2000      	movs	r0, #0
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	f000 f9d4 	bl	8007bc2 <__malloc_lock>
 800781a:	4a21      	ldr	r2, [pc, #132]	; (80078a0 <_malloc_r+0xac>)
 800781c:	6814      	ldr	r4, [r2, #0]
 800781e:	4621      	mov	r1, r4
 8007820:	b991      	cbnz	r1, 8007848 <_malloc_r+0x54>
 8007822:	4c20      	ldr	r4, [pc, #128]	; (80078a4 <_malloc_r+0xb0>)
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	b91b      	cbnz	r3, 8007830 <_malloc_r+0x3c>
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f98f 	bl	8007b4c <_sbrk_r>
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	4629      	mov	r1, r5
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f98a 	bl	8007b4c <_sbrk_r>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d124      	bne.n	8007886 <_malloc_r+0x92>
 800783c:	230c      	movs	r3, #12
 800783e:	4630      	mov	r0, r6
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	f000 f9bf 	bl	8007bc4 <__malloc_unlock>
 8007846:	e7e4      	b.n	8007812 <_malloc_r+0x1e>
 8007848:	680b      	ldr	r3, [r1, #0]
 800784a:	1b5b      	subs	r3, r3, r5
 800784c:	d418      	bmi.n	8007880 <_malloc_r+0x8c>
 800784e:	2b0b      	cmp	r3, #11
 8007850:	d90f      	bls.n	8007872 <_malloc_r+0x7e>
 8007852:	600b      	str	r3, [r1, #0]
 8007854:	18cc      	adds	r4, r1, r3
 8007856:	50cd      	str	r5, [r1, r3]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 f9b3 	bl	8007bc4 <__malloc_unlock>
 800785e:	f104 000b 	add.w	r0, r4, #11
 8007862:	1d23      	adds	r3, r4, #4
 8007864:	f020 0007 	bic.w	r0, r0, #7
 8007868:	1ac3      	subs	r3, r0, r3
 800786a:	d0d3      	beq.n	8007814 <_malloc_r+0x20>
 800786c:	425a      	negs	r2, r3
 800786e:	50e2      	str	r2, [r4, r3]
 8007870:	e7d0      	b.n	8007814 <_malloc_r+0x20>
 8007872:	684b      	ldr	r3, [r1, #4]
 8007874:	428c      	cmp	r4, r1
 8007876:	bf16      	itet	ne
 8007878:	6063      	strne	r3, [r4, #4]
 800787a:	6013      	streq	r3, [r2, #0]
 800787c:	460c      	movne	r4, r1
 800787e:	e7eb      	b.n	8007858 <_malloc_r+0x64>
 8007880:	460c      	mov	r4, r1
 8007882:	6849      	ldr	r1, [r1, #4]
 8007884:	e7cc      	b.n	8007820 <_malloc_r+0x2c>
 8007886:	1cc4      	adds	r4, r0, #3
 8007888:	f024 0403 	bic.w	r4, r4, #3
 800788c:	42a0      	cmp	r0, r4
 800788e:	d005      	beq.n	800789c <_malloc_r+0xa8>
 8007890:	1a21      	subs	r1, r4, r0
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f95a 	bl	8007b4c <_sbrk_r>
 8007898:	3001      	adds	r0, #1
 800789a:	d0cf      	beq.n	800783c <_malloc_r+0x48>
 800789c:	6025      	str	r5, [r4, #0]
 800789e:	e7db      	b.n	8007858 <_malloc_r+0x64>
 80078a0:	20000258 	.word	0x20000258
 80078a4:	2000025c 	.word	0x2000025c

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	4682      	mov	sl, r0
 80078b0:	429e      	cmp	r6, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	d837      	bhi.n	800792a <__ssputs_r+0x82>
 80078ba:	898a      	ldrh	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c0:	d031      	beq.n	8007926 <__ssputs_r+0x7e>
 80078c2:	2302      	movs	r3, #2
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	6909      	ldr	r1, [r1, #16]
 80078c8:	1a6f      	subs	r7, r5, r1
 80078ca:	6965      	ldr	r5, [r4, #20]
 80078cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80078d4:	f109 0301 	add.w	r3, r9, #1
 80078d8:	443b      	add	r3, r7
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d530      	bpl.n	8007946 <__ssputs_r+0x9e>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7ff ff85 	bl	80077f4 <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b950      	cbnz	r0, 8007904 <__ssputs_r+0x5c>
 80078ee:	230c      	movs	r3, #12
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	f8ca 3000 	str.w	r3, [sl]
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	463a      	mov	r2, r7
 8007906:	6921      	ldr	r1, [r4, #16]
 8007908:	f7ff fc32 	bl	8007170 <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	443e      	add	r6, r7
 800791c:	6026      	str	r6, [r4, #0]
 800791e:	464e      	mov	r6, r9
 8007920:	6165      	str	r5, [r4, #20]
 8007922:	1bed      	subs	r5, r5, r7
 8007924:	60a5      	str	r5, [r4, #8]
 8007926:	454e      	cmp	r6, r9
 8007928:	d900      	bls.n	800792c <__ssputs_r+0x84>
 800792a:	464e      	mov	r6, r9
 800792c:	4632      	mov	r2, r6
 800792e:	4641      	mov	r1, r8
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	f000 f92d 	bl	8007b90 <memmove>
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	2000      	movs	r0, #0
 800793a:	1b9b      	subs	r3, r3, r6
 800793c:	60a3      	str	r3, [r4, #8]
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	441e      	add	r6, r3
 8007942:	6026      	str	r6, [r4, #0]
 8007944:	e7dc      	b.n	8007900 <__ssputs_r+0x58>
 8007946:	462a      	mov	r2, r5
 8007948:	f000 f93d 	bl	8007bc6 <_realloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d1e2      	bne.n	8007918 <__ssputs_r+0x70>
 8007952:	6921      	ldr	r1, [r4, #16]
 8007954:	4650      	mov	r0, sl
 8007956:	f7ff ff01 	bl	800775c <_free_r>
 800795a:	e7c8      	b.n	80078ee <__ssputs_r+0x46>

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	461d      	mov	r5, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	b09d      	sub	sp, #116	; 0x74
 8007966:	061f      	lsls	r7, r3, #24
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4616      	mov	r6, r2
 800796e:	d50f      	bpl.n	8007990 <_svfiprintf_r+0x34>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b96b      	cbnz	r3, 8007990 <_svfiprintf_r+0x34>
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	f7ff ff3d 	bl	80077f4 <_malloc_r>
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b928      	cbnz	r0, 800798c <_svfiprintf_r+0x30>
 8007980:	230c      	movs	r3, #12
 8007982:	f8c8 3000 	str.w	r3, [r8]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	e0c8      	b.n	8007b1e <_svfiprintf_r+0x1c2>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	2300      	movs	r3, #0
 8007992:	9309      	str	r3, [sp, #36]	; 0x24
 8007994:	2320      	movs	r3, #32
 8007996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f04f 0b01 	mov.w	fp, #1
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	9503      	str	r5, [sp, #12]
 80079a6:	4637      	mov	r7, r6
 80079a8:	463d      	mov	r5, r7
 80079aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079ae:	b10b      	cbz	r3, 80079b4 <_svfiprintf_r+0x58>
 80079b0:	2b25      	cmp	r3, #37	; 0x25
 80079b2:	d13e      	bne.n	8007a32 <_svfiprintf_r+0xd6>
 80079b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x76>
 80079ba:	4653      	mov	r3, sl
 80079bc:	4632      	mov	r2, r6
 80079be:	4621      	mov	r1, r4
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7ff ff71 	bl	80078a8 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a4 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	4453      	add	r3, sl
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
 80079d2:	783b      	ldrb	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809d 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ec:	931a      	str	r3, [sp, #104]	; 0x68
 80079ee:	462f      	mov	r7, r5
 80079f0:	2205      	movs	r2, #5
 80079f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079f6:	4850      	ldr	r0, [pc, #320]	; (8007b38 <_svfiprintf_r+0x1dc>)
 80079f8:	f7ff fbac 	bl	8007154 <memchr>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	b9d0      	cbnz	r0, 8007a36 <_svfiprintf_r+0xda>
 8007a00:	06d9      	lsls	r1, r3, #27
 8007a02:	bf44      	itt	mi
 8007a04:	2220      	movmi	r2, #32
 8007a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a0a:	071a      	lsls	r2, r3, #28
 8007a0c:	bf44      	itt	mi
 8007a0e:	222b      	movmi	r2, #43	; 0x2b
 8007a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a14:	782a      	ldrb	r2, [r5, #0]
 8007a16:	2a2a      	cmp	r2, #42	; 0x2a
 8007a18:	d015      	beq.n	8007a46 <_svfiprintf_r+0xea>
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	250a      	movs	r5, #10
 8007a20:	9a07      	ldr	r2, [sp, #28]
 8007a22:	4639      	mov	r1, r7
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d94d      	bls.n	8007aca <_svfiprintf_r+0x16e>
 8007a2e:	b1b8      	cbz	r0, 8007a60 <_svfiprintf_r+0x104>
 8007a30:	e00f      	b.n	8007a52 <_svfiprintf_r+0xf6>
 8007a32:	462f      	mov	r7, r5
 8007a34:	e7b8      	b.n	80079a8 <_svfiprintf_r+0x4c>
 8007a36:	4a40      	ldr	r2, [pc, #256]	; (8007b38 <_svfiprintf_r+0x1dc>)
 8007a38:	463d      	mov	r5, r7
 8007a3a:	1a80      	subs	r0, r0, r2
 8007a3c:	fa0b f000 	lsl.w	r0, fp, r0
 8007a40:	4318      	orrs	r0, r3
 8007a42:	9004      	str	r0, [sp, #16]
 8007a44:	e7d3      	b.n	80079ee <_svfiprintf_r+0x92>
 8007a46:	9a03      	ldr	r2, [sp, #12]
 8007a48:	1d11      	adds	r1, r2, #4
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	db01      	blt.n	8007a56 <_svfiprintf_r+0xfa>
 8007a52:	9207      	str	r2, [sp, #28]
 8007a54:	e004      	b.n	8007a60 <_svfiprintf_r+0x104>
 8007a56:	4252      	negs	r2, r2
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	9207      	str	r2, [sp, #28]
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	783b      	ldrb	r3, [r7, #0]
 8007a62:	2b2e      	cmp	r3, #46	; 0x2e
 8007a64:	d10c      	bne.n	8007a80 <_svfiprintf_r+0x124>
 8007a66:	787b      	ldrb	r3, [r7, #1]
 8007a68:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6a:	d133      	bne.n	8007ad4 <_svfiprintf_r+0x178>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	3702      	adds	r7, #2
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	9203      	str	r2, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bfb8      	it	lt
 8007a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a7e:	9305      	str	r3, [sp, #20]
 8007a80:	4d2e      	ldr	r5, [pc, #184]	; (8007b3c <_svfiprintf_r+0x1e0>)
 8007a82:	2203      	movs	r2, #3
 8007a84:	7839      	ldrb	r1, [r7, #0]
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7ff fb64 	bl	8007154 <memchr>
 8007a8c:	b138      	cbz	r0, 8007a9e <_svfiprintf_r+0x142>
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	1b40      	subs	r0, r0, r5
 8007a92:	fa03 f000 	lsl.w	r0, r3, r0
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	3701      	adds	r7, #1
 8007a9a:	4303      	orrs	r3, r0
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	7839      	ldrb	r1, [r7, #0]
 8007aa0:	2206      	movs	r2, #6
 8007aa2:	4827      	ldr	r0, [pc, #156]	; (8007b40 <_svfiprintf_r+0x1e4>)
 8007aa4:	1c7e      	adds	r6, r7, #1
 8007aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aaa:	f7ff fb53 	bl	8007154 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d038      	beq.n	8007b24 <_svfiprintf_r+0x1c8>
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <_svfiprintf_r+0x1e8>)
 8007ab4:	bb13      	cbnz	r3, 8007afc <_svfiprintf_r+0x1a0>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	444b      	add	r3, r9
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	e76d      	b.n	80079a6 <_svfiprintf_r+0x4a>
 8007aca:	fb05 3202 	mla	r2, r5, r2, r3
 8007ace:	2001      	movs	r0, #1
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	e7a6      	b.n	8007a22 <_svfiprintf_r+0xc6>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	250a      	movs	r5, #10
 8007ad8:	4619      	mov	r1, r3
 8007ada:	3701      	adds	r7, #1
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae4:	3a30      	subs	r2, #48	; 0x30
 8007ae6:	2a09      	cmp	r2, #9
 8007ae8:	d903      	bls.n	8007af2 <_svfiprintf_r+0x196>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0c8      	beq.n	8007a80 <_svfiprintf_r+0x124>
 8007aee:	9105      	str	r1, [sp, #20]
 8007af0:	e7c6      	b.n	8007a80 <_svfiprintf_r+0x124>
 8007af2:	fb05 2101 	mla	r1, r5, r1, r2
 8007af6:	2301      	movs	r3, #1
 8007af8:	4607      	mov	r7, r0
 8007afa:	e7f0      	b.n	8007ade <_svfiprintf_r+0x182>
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4622      	mov	r2, r4
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7fe f8ee 	bl	8005ce8 <_printf_float>
 8007b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b10:	4681      	mov	r9, r0
 8007b12:	d1d6      	bne.n	8007ac2 <_svfiprintf_r+0x166>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	065b      	lsls	r3, r3, #25
 8007b18:	f53f af35 	bmi.w	8007986 <_svfiprintf_r+0x2a>
 8007b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1e:	b01d      	add	sp, #116	; 0x74
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7fe fb86 	bl	8006240 <_printf_i>
 8007b34:	e7ea      	b.n	8007b0c <_svfiprintf_r+0x1b0>
 8007b36:	bf00      	nop
 8007b38:	080085f4 	.word	0x080085f4
 8007b3c:	080085fa 	.word	0x080085fa
 8007b40:	080085fe 	.word	0x080085fe
 8007b44:	08005ce9 	.word	0x08005ce9
 8007b48:	080078a9 	.word	0x080078a9

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4c05      	ldr	r4, [pc, #20]	; (8007b68 <_sbrk_r+0x1c>)
 8007b52:	4605      	mov	r5, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	f7fc fc7c 	bl	8004454 <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	200004dc 	.word	0x200004dc

08007b6c <__ascii_mbtowc>:
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	b901      	cbnz	r1, 8007b72 <__ascii_mbtowc+0x6>
 8007b70:	a901      	add	r1, sp, #4
 8007b72:	b142      	cbz	r2, 8007b86 <__ascii_mbtowc+0x1a>
 8007b74:	b14b      	cbz	r3, 8007b8a <__ascii_mbtowc+0x1e>
 8007b76:	7813      	ldrb	r3, [r2, #0]
 8007b78:	600b      	str	r3, [r1, #0]
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	1c10      	adds	r0, r2, #0
 8007b7e:	bf18      	it	ne
 8007b80:	2001      	movne	r0, #1
 8007b82:	b002      	add	sp, #8
 8007b84:	4770      	bx	lr
 8007b86:	4610      	mov	r0, r2
 8007b88:	e7fb      	b.n	8007b82 <__ascii_mbtowc+0x16>
 8007b8a:	f06f 0001 	mvn.w	r0, #1
 8007b8e:	e7f8      	b.n	8007b82 <__ascii_mbtowc+0x16>

08007b90 <memmove>:
 8007b90:	4288      	cmp	r0, r1
 8007b92:	b510      	push	{r4, lr}
 8007b94:	eb01 0302 	add.w	r3, r1, r2
 8007b98:	d807      	bhi.n	8007baa <memmove+0x1a>
 8007b9a:	1e42      	subs	r2, r0, #1
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d00a      	beq.n	8007bb6 <memmove+0x26>
 8007ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ba8:	e7f8      	b.n	8007b9c <memmove+0xc>
 8007baa:	4283      	cmp	r3, r0
 8007bac:	d9f5      	bls.n	8007b9a <memmove+0xa>
 8007bae:	1881      	adds	r1, r0, r2
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	42d3      	cmn	r3, r2
 8007bb4:	d100      	bne.n	8007bb8 <memmove+0x28>
 8007bb6:	bd10      	pop	{r4, pc}
 8007bb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bc0:	e7f7      	b.n	8007bb2 <memmove+0x22>

08007bc2 <__malloc_lock>:
 8007bc2:	4770      	bx	lr

08007bc4 <__malloc_unlock>:
 8007bc4:	4770      	bx	lr

08007bc6 <_realloc_r>:
 8007bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc8:	4607      	mov	r7, r0
 8007bca:	4614      	mov	r4, r2
 8007bcc:	460e      	mov	r6, r1
 8007bce:	b921      	cbnz	r1, 8007bda <_realloc_r+0x14>
 8007bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	f7ff be0d 	b.w	80077f4 <_malloc_r>
 8007bda:	b922      	cbnz	r2, 8007be6 <_realloc_r+0x20>
 8007bdc:	f7ff fdbe 	bl	800775c <_free_r>
 8007be0:	4625      	mov	r5, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be6:	f000 f821 	bl	8007c2c <_malloc_usable_size_r>
 8007bea:	42a0      	cmp	r0, r4
 8007bec:	d20f      	bcs.n	8007c0e <_realloc_r+0x48>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff fdff 	bl	80077f4 <_malloc_r>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d0f2      	beq.n	8007be2 <_realloc_r+0x1c>
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4622      	mov	r2, r4
 8007c00:	f7ff fab6 	bl	8007170 <memcpy>
 8007c04:	4631      	mov	r1, r6
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff fda8 	bl	800775c <_free_r>
 8007c0c:	e7e9      	b.n	8007be2 <_realloc_r+0x1c>
 8007c0e:	4635      	mov	r5, r6
 8007c10:	e7e7      	b.n	8007be2 <_realloc_r+0x1c>

08007c12 <__ascii_wctomb>:
 8007c12:	b149      	cbz	r1, 8007c28 <__ascii_wctomb+0x16>
 8007c14:	2aff      	cmp	r2, #255	; 0xff
 8007c16:	bf8b      	itete	hi
 8007c18:	238a      	movhi	r3, #138	; 0x8a
 8007c1a:	700a      	strbls	r2, [r1, #0]
 8007c1c:	6003      	strhi	r3, [r0, #0]
 8007c1e:	2001      	movls	r0, #1
 8007c20:	bf88      	it	hi
 8007c22:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c26:	4770      	bx	lr
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4770      	bx	lr

08007c2c <_malloc_usable_size_r>:
 8007c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c30:	1f18      	subs	r0, r3, #4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfbc      	itt	lt
 8007c36:	580b      	ldrlt	r3, [r1, r0]
 8007c38:	18c0      	addlt	r0, r0, r3
 8007c3a:	4770      	bx	lr

08007c3c <_init>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr

08007c48 <_fini>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	bf00      	nop
 8007c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4e:	bc08      	pop	{r3}
 8007c50:	469e      	mov	lr, r3
 8007c52:	4770      	bx	lr
