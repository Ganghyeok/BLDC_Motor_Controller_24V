
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  080065b8  080065b8  000165b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007028  08007028  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007028  08007028  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007028  08007028  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007030  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d8  08007208  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007208  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cdc  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002038  00000000  00000000  00031edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f0  00000000  00000000  00034500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a341  00000000  00000000  000349f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085be  00000000  00000000  0003ed31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002ae79  00000000  00000000  000472ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  000721e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	0800659c 	.word	0x0800659c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	0800659c 	.word	0x0800659c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <DMA_SetConfig>:
	pDMAHandle->State = DMA_STATE_READY;
}


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d108      	bne.n	8000d44 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 8000d42:	e007      	b.n	8000d54 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	60da      	str	r2, [r3, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff ffbe 	bl	8000d04 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0204 	bic.w	r2, r2, #4
 8000d96:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0202 	orr.w	r2, r2, #2
 8000da6:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80bf 	beq.w	8000f6e <DMA_IRQ_Handling+0x1ae>
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 80bb 	beq.w	8000f6e <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b99      	ldr	r3, [pc, #612]	; (8001064 <DMA_IRQ_Handling+0x2a4>)
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d958      	bls.n	8000eb6 <DMA_IRQ_Handling+0xf6>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a97      	ldr	r2, [pc, #604]	; (8001068 <DMA_IRQ_Handling+0x2a8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d04f      	beq.n	8000eae <DMA_IRQ_Handling+0xee>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a96      	ldr	r2, [pc, #600]	; (800106c <DMA_IRQ_Handling+0x2ac>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d048      	beq.n	8000eaa <DMA_IRQ_Handling+0xea>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a94      	ldr	r2, [pc, #592]	; (8001070 <DMA_IRQ_Handling+0x2b0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d040      	beq.n	8000ea4 <DMA_IRQ_Handling+0xe4>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a93      	ldr	r2, [pc, #588]	; (8001074 <DMA_IRQ_Handling+0x2b4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d038      	beq.n	8000e9e <DMA_IRQ_Handling+0xde>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a91      	ldr	r2, [pc, #580]	; (8001078 <DMA_IRQ_Handling+0x2b8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d030      	beq.n	8000e98 <DMA_IRQ_Handling+0xd8>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a90      	ldr	r2, [pc, #576]	; (800107c <DMA_IRQ_Handling+0x2bc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d028      	beq.n	8000e92 <DMA_IRQ_Handling+0xd2>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a87      	ldr	r2, [pc, #540]	; (8001064 <DMA_IRQ_Handling+0x2a4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d020      	beq.n	8000e8c <DMA_IRQ_Handling+0xcc>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a8c      	ldr	r2, [pc, #560]	; (8001080 <DMA_IRQ_Handling+0x2c0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d019      	beq.n	8000e88 <DMA_IRQ_Handling+0xc8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a8a      	ldr	r2, [pc, #552]	; (8001084 <DMA_IRQ_Handling+0x2c4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d012      	beq.n	8000e84 <DMA_IRQ_Handling+0xc4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a89      	ldr	r2, [pc, #548]	; (8001088 <DMA_IRQ_Handling+0x2c8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00a      	beq.n	8000e7e <DMA_IRQ_Handling+0xbe>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a87      	ldr	r2, [pc, #540]	; (800108c <DMA_IRQ_Handling+0x2cc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <DMA_IRQ_Handling+0xb8>
 8000e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e76:	e01b      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e7c:	e018      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	e015      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	e013      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e011      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e90:	e00e      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e96:	e00b      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e9c:	e008      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea2:	e005      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea8:	e002      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	e000      	b.n	8000eb0 <DMA_IRQ_Handling+0xf0>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	4a77      	ldr	r2, [pc, #476]	; (8001090 <DMA_IRQ_Handling+0x2d0>)
 8000eb2:	6053      	str	r3, [r2, #4]
 8000eb4:	e057      	b.n	8000f66 <DMA_IRQ_Handling+0x1a6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6b      	ldr	r2, [pc, #428]	; (8001068 <DMA_IRQ_Handling+0x2a8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d04f      	beq.n	8000f60 <DMA_IRQ_Handling+0x1a0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a69      	ldr	r2, [pc, #420]	; (800106c <DMA_IRQ_Handling+0x2ac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d048      	beq.n	8000f5c <DMA_IRQ_Handling+0x19c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a68      	ldr	r2, [pc, #416]	; (8001070 <DMA_IRQ_Handling+0x2b0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d040      	beq.n	8000f56 <DMA_IRQ_Handling+0x196>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a66      	ldr	r2, [pc, #408]	; (8001074 <DMA_IRQ_Handling+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d038      	beq.n	8000f50 <DMA_IRQ_Handling+0x190>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a65      	ldr	r2, [pc, #404]	; (8001078 <DMA_IRQ_Handling+0x2b8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d030      	beq.n	8000f4a <DMA_IRQ_Handling+0x18a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a63      	ldr	r2, [pc, #396]	; (800107c <DMA_IRQ_Handling+0x2bc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d028      	beq.n	8000f44 <DMA_IRQ_Handling+0x184>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <DMA_IRQ_Handling+0x2a4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d020      	beq.n	8000f3e <DMA_IRQ_Handling+0x17e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <DMA_IRQ_Handling+0x2c0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <DMA_IRQ_Handling+0x17a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <DMA_IRQ_Handling+0x2c4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d012      	beq.n	8000f36 <DMA_IRQ_Handling+0x176>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <DMA_IRQ_Handling+0x2c8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00a      	beq.n	8000f30 <DMA_IRQ_Handling+0x170>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <DMA_IRQ_Handling+0x2cc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d102      	bne.n	8000f2a <DMA_IRQ_Handling+0x16a>
 8000f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f28:	e01b      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f2e:	e018      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f34:	e015      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	e013      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e011      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f42:	e00e      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f48:	e00b      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f4e:	e008      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f54:	e005      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5a:	e002      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	e000      	b.n	8000f62 <DMA_IRQ_Handling+0x1a2>
 8000f60:	2304      	movs	r3, #4
 8000f62:	4a4c      	ldr	r2, [pc, #304]	; (8001094 <DMA_IRQ_Handling+0x2d4>)
 8000f64:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	2102      	movs	r1, #2
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80dd 	beq.w	8001150 <DMA_IRQ_Handling+0x390>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80d9 	beq.w	8001150 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <DMA_IRQ_Handling+0x2a4>)
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d972      	bls.n	8001098 <DMA_IRQ_Handling+0x2d8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <DMA_IRQ_Handling+0x2a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d04f      	beq.n	800105c <DMA_IRQ_Handling+0x29c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	; (800106c <DMA_IRQ_Handling+0x2ac>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d048      	beq.n	8001058 <DMA_IRQ_Handling+0x298>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <DMA_IRQ_Handling+0x2b0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d040      	beq.n	8001052 <DMA_IRQ_Handling+0x292>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <DMA_IRQ_Handling+0x2b4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d038      	beq.n	800104c <DMA_IRQ_Handling+0x28c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a26      	ldr	r2, [pc, #152]	; (8001078 <DMA_IRQ_Handling+0x2b8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d030      	beq.n	8001046 <DMA_IRQ_Handling+0x286>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <DMA_IRQ_Handling+0x2bc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d028      	beq.n	8001040 <DMA_IRQ_Handling+0x280>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <DMA_IRQ_Handling+0x2a4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d020      	beq.n	800103a <DMA_IRQ_Handling+0x27a>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a20      	ldr	r2, [pc, #128]	; (8001080 <DMA_IRQ_Handling+0x2c0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <DMA_IRQ_Handling+0x276>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <DMA_IRQ_Handling+0x2c4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d012      	beq.n	8001032 <DMA_IRQ_Handling+0x272>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <DMA_IRQ_Handling+0x2c8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00a      	beq.n	800102c <DMA_IRQ_Handling+0x26c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <DMA_IRQ_Handling+0x2cc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <DMA_IRQ_Handling+0x266>
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	e01b      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102a:	e018      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	e015      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001032:	2320      	movs	r3, #32
 8001034:	e013      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001036:	2302      	movs	r3, #2
 8001038:	e011      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 800103a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800103e:	e00e      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001044:	e00b      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104a:	e008      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	e005      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	e002      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 8001058:	2320      	movs	r3, #32
 800105a:	e000      	b.n	800105e <DMA_IRQ_Handling+0x29e>
 800105c:	2302      	movs	r3, #2
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <DMA_IRQ_Handling+0x2d0>)
 8001060:	6053      	str	r3, [r2, #4]
 8001062:	e071      	b.n	8001148 <DMA_IRQ_Handling+0x388>
 8001064:	40020080 	.word	0x40020080
 8001068:	40020008 	.word	0x40020008
 800106c:	4002001c 	.word	0x4002001c
 8001070:	40020030 	.word	0x40020030
 8001074:	40020044 	.word	0x40020044
 8001078:	40020058 	.word	0x40020058
 800107c:	4002006c 	.word	0x4002006c
 8001080:	40020408 	.word	0x40020408
 8001084:	4002041c 	.word	0x4002041c
 8001088:	40020430 	.word	0x40020430
 800108c:	40020444 	.word	0x40020444
 8001090:	40020400 	.word	0x40020400
 8001094:	40020000 	.word	0x40020000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a9a      	ldr	r2, [pc, #616]	; (8001308 <DMA_IRQ_Handling+0x548>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d04f      	beq.n	8001142 <DMA_IRQ_Handling+0x382>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a99      	ldr	r2, [pc, #612]	; (800130c <DMA_IRQ_Handling+0x54c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d048      	beq.n	800113e <DMA_IRQ_Handling+0x37e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a97      	ldr	r2, [pc, #604]	; (8001310 <DMA_IRQ_Handling+0x550>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d040      	beq.n	8001138 <DMA_IRQ_Handling+0x378>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a96      	ldr	r2, [pc, #600]	; (8001314 <DMA_IRQ_Handling+0x554>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d038      	beq.n	8001132 <DMA_IRQ_Handling+0x372>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a94      	ldr	r2, [pc, #592]	; (8001318 <DMA_IRQ_Handling+0x558>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d030      	beq.n	800112c <DMA_IRQ_Handling+0x36c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a93      	ldr	r2, [pc, #588]	; (800131c <DMA_IRQ_Handling+0x55c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d028      	beq.n	8001126 <DMA_IRQ_Handling+0x366>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a91      	ldr	r2, [pc, #580]	; (8001320 <DMA_IRQ_Handling+0x560>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d020      	beq.n	8001120 <DMA_IRQ_Handling+0x360>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a90      	ldr	r2, [pc, #576]	; (8001324 <DMA_IRQ_Handling+0x564>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d019      	beq.n	800111c <DMA_IRQ_Handling+0x35c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a8e      	ldr	r2, [pc, #568]	; (8001328 <DMA_IRQ_Handling+0x568>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d012      	beq.n	8001118 <DMA_IRQ_Handling+0x358>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a8d      	ldr	r2, [pc, #564]	; (800132c <DMA_IRQ_Handling+0x56c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00a      	beq.n	8001112 <DMA_IRQ_Handling+0x352>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a8b      	ldr	r2, [pc, #556]	; (8001330 <DMA_IRQ_Handling+0x570>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <DMA_IRQ_Handling+0x34c>
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	e01b      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 800110c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001110:	e018      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	e015      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001118:	2320      	movs	r3, #32
 800111a:	e013      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 800111c:	2302      	movs	r3, #2
 800111e:	e011      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001124:	e00e      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001126:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800112a:	e00b      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 800112c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001130:	e008      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	e005      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	e002      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 800113e:	2320      	movs	r3, #32
 8001140:	e000      	b.n	8001144 <DMA_IRQ_Handling+0x384>
 8001142:	2302      	movs	r3, #2
 8001144:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <DMA_IRQ_Handling+0x574>)
 8001146:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2108      	movs	r1, #8
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80c3 	beq.w	80012fe <DMA_IRQ_Handling+0x53e>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80bf 	beq.w	80012fe <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b66      	ldr	r3, [pc, #408]	; (8001320 <DMA_IRQ_Handling+0x560>)
 8001188:	429a      	cmp	r2, r3
 800118a:	d958      	bls.n	800123e <DMA_IRQ_Handling+0x47e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a5d      	ldr	r2, [pc, #372]	; (8001308 <DMA_IRQ_Handling+0x548>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d04f      	beq.n	8001236 <DMA_IRQ_Handling+0x476>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5c      	ldr	r2, [pc, #368]	; (800130c <DMA_IRQ_Handling+0x54c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d048      	beq.n	8001232 <DMA_IRQ_Handling+0x472>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <DMA_IRQ_Handling+0x550>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d040      	beq.n	800122c <DMA_IRQ_Handling+0x46c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a59      	ldr	r2, [pc, #356]	; (8001314 <DMA_IRQ_Handling+0x554>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d038      	beq.n	8001226 <DMA_IRQ_Handling+0x466>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a57      	ldr	r2, [pc, #348]	; (8001318 <DMA_IRQ_Handling+0x558>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d030      	beq.n	8001220 <DMA_IRQ_Handling+0x460>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a56      	ldr	r2, [pc, #344]	; (800131c <DMA_IRQ_Handling+0x55c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d028      	beq.n	800121a <DMA_IRQ_Handling+0x45a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <DMA_IRQ_Handling+0x560>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d020      	beq.n	8001214 <DMA_IRQ_Handling+0x454>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a53      	ldr	r2, [pc, #332]	; (8001324 <DMA_IRQ_Handling+0x564>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d019      	beq.n	8001210 <DMA_IRQ_Handling+0x450>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a51      	ldr	r2, [pc, #324]	; (8001328 <DMA_IRQ_Handling+0x568>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d012      	beq.n	800120c <DMA_IRQ_Handling+0x44c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a50      	ldr	r2, [pc, #320]	; (800132c <DMA_IRQ_Handling+0x56c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00a      	beq.n	8001206 <DMA_IRQ_Handling+0x446>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <DMA_IRQ_Handling+0x570>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d102      	bne.n	8001200 <DMA_IRQ_Handling+0x440>
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	e01b      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	e018      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	e015      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 800120c:	2310      	movs	r3, #16
 800120e:	e013      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001210:	2301      	movs	r3, #1
 8001212:	e011      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001218:	e00e      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 800121a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121e:	e00b      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	e008      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	e005      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	e002      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001232:	2310      	movs	r3, #16
 8001234:	e000      	b.n	8001238 <DMA_IRQ_Handling+0x478>
 8001236:	2301      	movs	r3, #1
 8001238:	4a3f      	ldr	r2, [pc, #252]	; (8001338 <DMA_IRQ_Handling+0x578>)
 800123a:	6053      	str	r3, [r2, #4]
 800123c:	e057      	b.n	80012ee <DMA_IRQ_Handling+0x52e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <DMA_IRQ_Handling+0x548>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d04f      	beq.n	80012e8 <DMA_IRQ_Handling+0x528>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a2f      	ldr	r2, [pc, #188]	; (800130c <DMA_IRQ_Handling+0x54c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d048      	beq.n	80012e4 <DMA_IRQ_Handling+0x524>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <DMA_IRQ_Handling+0x550>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d040      	beq.n	80012de <DMA_IRQ_Handling+0x51e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <DMA_IRQ_Handling+0x554>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d038      	beq.n	80012d8 <DMA_IRQ_Handling+0x518>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <DMA_IRQ_Handling+0x558>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d030      	beq.n	80012d2 <DMA_IRQ_Handling+0x512>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <DMA_IRQ_Handling+0x55c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d028      	beq.n	80012cc <DMA_IRQ_Handling+0x50c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <DMA_IRQ_Handling+0x560>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d020      	beq.n	80012c6 <DMA_IRQ_Handling+0x506>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <DMA_IRQ_Handling+0x564>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <DMA_IRQ_Handling+0x502>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <DMA_IRQ_Handling+0x568>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d012      	beq.n	80012be <DMA_IRQ_Handling+0x4fe>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a23      	ldr	r2, [pc, #140]	; (800132c <DMA_IRQ_Handling+0x56c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00a      	beq.n	80012b8 <DMA_IRQ_Handling+0x4f8>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <DMA_IRQ_Handling+0x570>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d102      	bne.n	80012b2 <DMA_IRQ_Handling+0x4f2>
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	e01b      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	e018      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	e015      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012be:	2310      	movs	r3, #16
 80012c0:	e013      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e011      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ca:	e00e      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d0:	e00b      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	e008      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	e005      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	e002      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012e4:	2310      	movs	r3, #16
 80012e6:	e000      	b.n	80012ea <DMA_IRQ_Handling+0x52a>
 80012e8:	2301      	movs	r3, #1
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <DMA_IRQ_Handling+0x574>)
 80012ec:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
	}
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020008 	.word	0x40020008
 800130c:	4002001c 	.word	0x4002001c
 8001310:	40020030 	.word	0x40020030
 8001314:	40020044 	.word	0x40020044
 8001318:	40020058 	.word	0x40020058
 800131c:	4002006c 	.word	0x4002006c
 8001320:	40020080 	.word	0x40020080
 8001324:	40020408 	.word	0x40020408
 8001328:	4002041c 	.word	0x4002041c
 800132c:	40020430 	.word	0x40020430
 8001330:	40020444 	.word	0x40020444
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a96      	ldr	r2, [pc, #600]	; (80015ac <GPIO_Init+0x270>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d106      	bne.n	8001364 <GPIO_Init+0x28>
 8001356:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <GPIO_Init+0x274>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a95      	ldr	r2, [pc, #596]	; (80015b0 <GPIO_Init+0x274>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	e03c      	b.n	80013de <GPIO_Init+0xa2>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a93      	ldr	r2, [pc, #588]	; (80015b4 <GPIO_Init+0x278>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d106      	bne.n	800137a <GPIO_Init+0x3e>
 800136c:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <GPIO_Init+0x274>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a8f      	ldr	r2, [pc, #572]	; (80015b0 <GPIO_Init+0x274>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	e031      	b.n	80013de <GPIO_Init+0xa2>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a8e      	ldr	r2, [pc, #568]	; (80015b8 <GPIO_Init+0x27c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d106      	bne.n	8001390 <GPIO_Init+0x54>
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <GPIO_Init+0x274>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a8a      	ldr	r2, [pc, #552]	; (80015b0 <GPIO_Init+0x274>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	e026      	b.n	80013de <GPIO_Init+0xa2>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a8a      	ldr	r2, [pc, #552]	; (80015bc <GPIO_Init+0x280>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d106      	bne.n	80013a6 <GPIO_Init+0x6a>
 8001398:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <GPIO_Init+0x274>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a84      	ldr	r2, [pc, #528]	; (80015b0 <GPIO_Init+0x274>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	e01b      	b.n	80013de <GPIO_Init+0xa2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a85      	ldr	r2, [pc, #532]	; (80015c0 <GPIO_Init+0x284>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d106      	bne.n	80013bc <GPIO_Init+0x80>
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <GPIO_Init+0x274>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <GPIO_Init+0x274>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	e010      	b.n	80013de <GPIO_Init+0xa2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <GPIO_Init+0x288>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d106      	bne.n	80013d2 <GPIO_Init+0x96>
 80013c4:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <GPIO_Init+0x274>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a79      	ldr	r2, [pc, #484]	; (80015b0 <GPIO_Init+0x274>)
 80013ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	e005      	b.n	80013de <GPIO_Init+0xa2>
 80013d2:	4b77      	ldr	r3, [pc, #476]	; (80015b0 <GPIO_Init+0x274>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <GPIO_Init+0x274>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	76fb      	strb	r3, [r7, #27]
 80013e2:	e1d0      	b.n	8001786 <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7efa      	ldrb	r2, [r7, #27]
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 81c0 	beq.w	8001778 <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d039      	beq.n	8001474 <GPIO_Init+0x138>
 8001400:	2b11      	cmp	r3, #17
 8001402:	d807      	bhi.n	8001414 <GPIO_Init+0xd8>
 8001404:	2b01      	cmp	r3, #1
 8001406:	d016      	beq.n	8001436 <GPIO_Init+0xfa>
 8001408:	2b01      	cmp	r3, #1
 800140a:	f0c0 8090 	bcc.w	800152e <GPIO_Init+0x1f2>
 800140e:	2b02      	cmp	r3, #2
 8001410:	d04f      	beq.n	80014b2 <GPIO_Init+0x176>
 8001412:	e0bd      	b.n	8001590 <GPIO_Init+0x254>
 8001414:	4a6c      	ldr	r2, [pc, #432]	; (80015c8 <GPIO_Init+0x28c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	f000 8089 	beq.w	800152e <GPIO_Init+0x1f2>
 800141c:	4a6a      	ldr	r2, [pc, #424]	; (80015c8 <GPIO_Init+0x28c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d802      	bhi.n	8001428 <GPIO_Init+0xec>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d064      	beq.n	80014f0 <GPIO_Init+0x1b4>
 8001426:	e0b3      	b.n	8001590 <GPIO_Init+0x254>
 8001428:	4a68      	ldr	r2, [pc, #416]	; (80015cc <GPIO_Init+0x290>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d07f      	beq.n	800152e <GPIO_Init+0x1f2>
 800142e:	4a68      	ldr	r2, [pc, #416]	; (80015d0 <GPIO_Init+0x294>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d07c      	beq.n	800152e <GPIO_Init+0x1f2>
 8001434:	e0ac      	b.n	8001590 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d104      	bne.n	8001448 <GPIO_Init+0x10c>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e010      	b.n	800146a <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d104      	bne.n	800145a <GPIO_Init+0x11e>
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	e007      	b.n	800146a <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d103      	bne.n	800146a <GPIO_Init+0x12e>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f043 0303 	orr.w	r3, r3, #3
 8001468:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f023 030c 	bic.w	r3, r3, #12
 8001470:	61fb      	str	r3, [r7, #28]


					break;
 8001472:	e08d      	b.n	8001590 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d104      	bne.n	8001486 <GPIO_Init+0x14a>
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	e010      	b.n	80014a8 <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <GPIO_Init+0x15c>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e007      	b.n	80014a8 <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d103      	bne.n	80014a8 <GPIO_Init+0x16c>
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f043 0303 	orr.w	r3, r3, #3
 80014a6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	61fb      	str	r3, [r7, #28]

					break;
 80014b0:	e06e      	b.n	8001590 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d104      	bne.n	80014c4 <GPIO_Init+0x188>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e010      	b.n	80014e6 <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d104      	bne.n	80014d6 <GPIO_Init+0x19a>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	e007      	b.n	80014e6 <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d103      	bne.n	80014e6 <GPIO_Init+0x1aa>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f043 0303 	orr.w	r3, r3, #3
 80014e4:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	61fb      	str	r3, [r7, #28]

					break;
 80014ee:	e04f      	b.n	8001590 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d104      	bne.n	8001502 <GPIO_Init+0x1c6>
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e010      	b.n	8001524 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d104      	bne.n	8001514 <GPIO_Init+0x1d8>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e007      	b.n	8001524 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d103      	bne.n	8001524 <GPIO_Init+0x1e8>
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f043 0303 	orr.w	r3, r3, #3
 8001522:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f043 030c 	orr.w	r3, r3, #12
 800152a:	61fb      	str	r3, [r7, #28]

					break;
 800152c:	e030      	b.n	8001590 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f023 0303 	bic.w	r3, r3, #3
 8001534:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d104      	bne.n	8001548 <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 8001546:	e022      	b.n	800158e <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10d      	bne.n	800156c <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	7efa      	ldrb	r2, [r7, #27]
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
					break;
 800156a:	e010      	b.n	800158e <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10c      	bne.n	800158e <GPIO_Init+0x252>
						config |= (0x1 << 3);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	7efa      	ldrb	r2, [r7, #27]
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	615a      	str	r2, [r3, #20]
					break;
 800158e:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001590:	7efb      	ldrb	r3, [r7, #27]
 8001592:	2b07      	cmp	r3, #7
 8001594:	d801      	bhi.n	800159a <GPIO_Init+0x25e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	e001      	b.n	800159e <GPIO_Init+0x262>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3304      	adds	r3, #4
 800159e:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 80015a0:	7efb      	ldrb	r3, [r7, #27]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d816      	bhi.n	80015d4 <GPIO_Init+0x298>
 80015a6:	7efb      	ldrb	r3, [r7, #27]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	e016      	b.n	80015da <GPIO_Init+0x29e>
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40011400 	.word	0x40011400
 80015c0:	40011800 	.word	0x40011800
 80015c4:	40011c00 	.word	0x40011c00
 80015c8:	10110000 	.word	0x10110000
 80015cc:	10210000 	.word	0x10210000
 80015d0:	10310000 	.word	0x10310000
 80015d4:	7efb      	ldrb	r3, [r7, #27]
 80015d6:	3b08      	subs	r3, #8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	210f      	movs	r1, #15
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	43d2      	mvns	r2, r2
 80015ea:	401a      	ands	r2, r3
 80015ec:	69f9      	ldr	r1, [r7, #28]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80b8 	beq.w	8001778 <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <GPIO_Init+0x45c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a62      	ldr	r2, [pc, #392]	; (8001798 <GPIO_Init+0x45c>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8001614:	7efb      	ldrb	r3, [r7, #27]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 800161c:	7efb      	ldrb	r3, [r7, #27]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001624:	4a5d      	ldr	r2, [pc, #372]	; (800179c <GPIO_Init+0x460>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	210f      	movs	r1, #15
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	43d2      	mvns	r2, r2
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4958      	ldr	r1, [pc, #352]	; (80017a0 <GPIO_Init+0x464>)
 8001640:	428b      	cmp	r3, r1
 8001642:	d01f      	beq.n	8001684 <GPIO_Init+0x348>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4957      	ldr	r1, [pc, #348]	; (80017a4 <GPIO_Init+0x468>)
 8001648:	428b      	cmp	r3, r1
 800164a:	d019      	beq.n	8001680 <GPIO_Init+0x344>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4956      	ldr	r1, [pc, #344]	; (80017a8 <GPIO_Init+0x46c>)
 8001650:	428b      	cmp	r3, r1
 8001652:	d013      	beq.n	800167c <GPIO_Init+0x340>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4955      	ldr	r1, [pc, #340]	; (80017ac <GPIO_Init+0x470>)
 8001658:	428b      	cmp	r3, r1
 800165a:	d00d      	beq.n	8001678 <GPIO_Init+0x33c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4954      	ldr	r1, [pc, #336]	; (80017b0 <GPIO_Init+0x474>)
 8001660:	428b      	cmp	r3, r1
 8001662:	d007      	beq.n	8001674 <GPIO_Init+0x338>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4953      	ldr	r1, [pc, #332]	; (80017b4 <GPIO_Init+0x478>)
 8001668:	428b      	cmp	r3, r1
 800166a:	d101      	bne.n	8001670 <GPIO_Init+0x334>
 800166c:	2305      	movs	r3, #5
 800166e:	e00a      	b.n	8001686 <GPIO_Init+0x34a>
 8001670:	2306      	movs	r3, #6
 8001672:	e008      	b.n	8001686 <GPIO_Init+0x34a>
 8001674:	2304      	movs	r3, #4
 8001676:	e006      	b.n	8001686 <GPIO_Init+0x34a>
 8001678:	2303      	movs	r3, #3
 800167a:	e004      	b.n	8001686 <GPIO_Init+0x34a>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <GPIO_Init+0x34a>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <GPIO_Init+0x34a>
 8001684:	2300      	movs	r3, #0
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	0089      	lsls	r1, r1, #2
 800168a:	408b      	lsls	r3, r1
 800168c:	4943      	ldr	r1, [pc, #268]	; (800179c <GPIO_Init+0x460>)
 800168e:	431a      	orrs	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3302      	adds	r3, #2
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 80016a4:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <GPIO_Init+0x47c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	7efa      	ldrb	r2, [r7, #27]
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4611      	mov	r1, r2
 80016b2:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <GPIO_Init+0x47c>)
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e00a      	b.n	80016d0 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <GPIO_Init+0x47c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	7efa      	ldrb	r2, [r7, #27]
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	43d2      	mvns	r2, r2
 80016c8:	4611      	mov	r1, r2
 80016ca:	4a3b      	ldr	r2, [pc, #236]	; (80017b8 <GPIO_Init+0x47c>)
 80016cc:	400b      	ands	r3, r1
 80016ce:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00a      	beq.n	80016f2 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <GPIO_Init+0x47c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	7efa      	ldrb	r2, [r7, #27]
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <GPIO_Init+0x47c>)
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6053      	str	r3, [r2, #4]
 80016f0:	e00a      	b.n	8001708 <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 80016f2:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <GPIO_Init+0x47c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	7efa      	ldrb	r2, [r7, #27]
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	43d2      	mvns	r2, r2
 8001700:	4611      	mov	r1, r2
 8001702:	4a2d      	ldr	r2, [pc, #180]	; (80017b8 <GPIO_Init+0x47c>)
 8001704:	400b      	ands	r3, r1
 8001706:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00a      	beq.n	800172a <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <GPIO_Init+0x47c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	7efa      	ldrb	r2, [r7, #27]
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4611      	mov	r1, r2
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <GPIO_Init+0x47c>)
 8001724:	430b      	orrs	r3, r1
 8001726:	6093      	str	r3, [r2, #8]
 8001728:	e00a      	b.n	8001740 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <GPIO_Init+0x47c>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	7efa      	ldrb	r2, [r7, #27]
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	43d2      	mvns	r2, r2
 8001738:	4611      	mov	r1, r2
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <GPIO_Init+0x47c>)
 800173c:	400b      	ands	r3, r1
 800173e:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00a      	beq.n	8001762 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <GPIO_Init+0x47c>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	7efa      	ldrb	r2, [r7, #27]
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4611      	mov	r1, r2
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <GPIO_Init+0x47c>)
 800175c:	430b      	orrs	r3, r1
 800175e:	60d3      	str	r3, [r2, #12]
 8001760:	e00a      	b.n	8001778 <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <GPIO_Init+0x47c>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	7efa      	ldrb	r2, [r7, #27]
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	43d2      	mvns	r2, r2
 8001770:	4611      	mov	r1, r2
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <GPIO_Init+0x47c>)
 8001774:	400b      	ands	r3, r1
 8001776:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001780:	7efb      	ldrb	r3, [r7, #27]
 8001782:	3301      	adds	r3, #1
 8001784:	76fb      	strb	r3, [r7, #27]
 8001786:	7efb      	ldrb	r3, [r7, #27]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	f67f ae2b 	bls.w	80013e4 <GPIO_Init+0xa8>
	}
}
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40011800 	.word	0x40011800
 80017b4:	40011c00 	.word	0x40011c00
 80017b8:	40010400 	.word	0x40010400

080017bc <GPIO_ReadPin>:



/* IO operation functions *****************************************************/
uint8_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
	if((uint16_t)GPIOx->IDR & GPIO_Pin)		return GPIO_PIN_SET;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	4013      	ands	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <GPIO_ReadPin+0x20>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <GPIO_ReadPin+0x22>
	else									return GPIO_PIN_RESET;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <GPIO_WritePin>:


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d106      	bne.n	800180c <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 800180a:	e006      	b.n	800181a <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001838:	883b      	ldrh	r3, [r7, #0]
 800183a:	041a      	lsls	r2, r3, #16
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <GPIO_WritePort>:


void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	43db      	mvns	r3, r3
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <GPIO_WriteData>:


void GPIO_WriteData(GPIO_TypeDef *GPIOx, uint16_t Data)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Data;
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60da      	str	r2, [r3, #12]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <EXTI_IRQHandling+0x34>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <EXTI_IRQHandling+0x34>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	4905      	ldr	r1, [pc, #20]	; (80018d0 <EXTI_IRQHandling+0x34>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f002 fd9b 	bl	80043fc <EXTI_Callback>
	}
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010400 	.word	0x40010400

080018d4 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d011      	beq.n	800190c <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d10c      	bne.n	800190c <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <RCC_OscConfig+0x9c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <RCC_OscConfig+0x9c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 80018fe:	bf00      	nop
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <RCC_OscConfig+0x9c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f9      	beq.n	8001900 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d128      	bne.n	8001966 <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <RCC_OscConfig+0x9c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <RCC_OscConfig+0x9c>)
 800191a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d105      	bne.n	8001936 <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <RCC_OscConfig+0x9c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <RCC_OscConfig+0x9c>)
 8001930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001934:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <RCC_OscConfig+0x9c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	4313      	orrs	r3, r2
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <RCC_OscConfig+0x9c>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <RCC_OscConfig+0x9c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <RCC_OscConfig+0x9c>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001958:	bf00      	nop
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <RCC_OscConfig+0x9c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f9      	beq.n	800195a <RCC_OscConfig+0x86>
	}
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000

08001974 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <RCC_ClockConfig+0x7c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	491a      	ldr	r1, [pc, #104]	; (80019f0 <RCC_ClockConfig+0x7c>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <RCC_ClockConfig+0x80>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4916      	ldr	r1, [pc, #88]	; (80019f4 <RCC_ClockConfig+0x80>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4911      	ldr	r1, [pc, #68]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 0203 	bic.w	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4908      	ldr	r1, [pc, #32]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 80019d6:	bf00      	nop
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <RCC_ClockConfig+0x80>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f9      	beq.n	80019d8 <RCC_ClockConfig+0x64>
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021000 	.word	0x40021000

080019f8 <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f001 fadb 	bl	8002fbc <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a14:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	ea42 0103 	orr.w	r1, r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0c1a      	lsrs	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f002 0204 	and.w	r2, r2, #4
 8001a84:	605a      	str	r2, [r3, #4]
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d120      	bne.n	8001ae4 <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <SPI_PeripheralClockControl+0xa4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d106      	bne.n	8001ab8 <SPI_PeripheralClockControl+0x28>
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 8001ab6:	e038      	b.n	8001b2a <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <SPI_PeripheralClockControl+0xac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d106      	bne.n	8001ace <SPI_PeripheralClockControl+0x3e>
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	61d3      	str	r3, [r2, #28]
}
 8001acc:	e02d      	b.n	8001b2a <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <SPI_PeripheralClockControl+0xb0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d129      	bne.n	8001b2a <SPI_PeripheralClockControl+0x9a>
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae0:	61d3      	str	r3, [r2, #28]
}
 8001ae2:	e022      	b.n	8001b2a <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <SPI_PeripheralClockControl+0xa4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d106      	bne.n	8001b00 <SPI_PeripheralClockControl+0x70>
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afc:	6193      	str	r3, [r2, #24]
}
 8001afe:	e014      	b.n	8001b2a <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <SPI_PeripheralClockControl+0xac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d106      	bne.n	8001b16 <SPI_PeripheralClockControl+0x86>
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b12:	61d3      	str	r3, [r2, #28]
}
 8001b14:	e009      	b.n	8001b2a <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <SPI_PeripheralClockControl+0xb0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d105      	bne.n	8001b2a <SPI_PeripheralClockControl+0x9a>
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SPI_PeripheralClockControl+0xa8>)
 8001b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b28:	61d3      	str	r3, [r2, #28]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40013000 	.word	0x40013000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40003800 	.word	0x40003800
 8001b40:	40003c00 	.word	0x40003c00

08001b44 <TIM_IRQHandling>:
}



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <TIM_IRQHandling+0x3e>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <TIM_IRQHandling+0x48>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <TIM_IRQHandling+0x48>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f002 fb1b 	bl	80041b8 <TIM_PeriodElapsedCallback>
	}
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40001000 	.word	0x40001000

08001b90 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <UART_Transmit_DMA+0x84>)
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <UART_Transmit_DMA+0x88>)
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <UART_Transmit_DMA+0x8c>)
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3304      	adds	r3, #4
 8001be4:	461a      	mov	r2, r3
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f7ff f8b9 	bl	8000d5e <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c0a:	615a      	str	r2, [r3, #20]
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	08001c57 	.word	0x08001c57
 8001c18:	08001c73 	.word	0x08001c73
 8001c1c:	08001c8f 	.word	0x08001c8f

08001c20 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff ffdb 	bl	8001c20 <UART_TxCpltCallback>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff ffd6 	bl	8001c32 <UART_TxHalfCpltCallback>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff ffd1 	bl	8001c44 <UART_ErrorCallback>
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d87b      	bhi.n	8001db8 <BLDC_Drive+0x10c>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <BLDC_Drive+0x1c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001d95 	.word	0x08001d95
 8001ccc:	08001d05 	.word	0x08001d05
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001d4d 	.word	0x08001d4d
 8001cd8:	08001d71 	.word	0x08001d71
 8001cdc:	08001d29 	.word	0x08001d29
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <BLDC_Drive+0x46>
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fa6c 	bl	80021c8 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 8001cf0:	e064      	b.n	8001dbc <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d15f      	bne.n	8001dbc <BLDC_Drive+0x110>
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f9bb 	bl	8002078 <BLDC_Step2>
			break;
 8001d02:	e05b      	b.n	8001dbc <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <BLDC_Drive+0x6a>
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa22 	bl	8002158 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8001d14:	e054      	b.n	8001dc0 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d14f      	bne.n	8001dc0 <BLDC_Drive+0x114>
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f971 	bl	8002008 <BLDC_Step1>
			break;
 8001d26:	e04b      	b.n	8001dc0 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <BLDC_Drive+0x8e>
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f9d8 	bl	80020e8 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8001d38:	e044      	b.n	8001dc4 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d13f      	bne.n	8001dc4 <BLDC_Drive+0x118>
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa77 	bl	8002238 <BLDC_Step6>
			break;
 8001d4a:	e03b      	b.n	8001dc4 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <BLDC_Drive+0xb2>
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f98e 	bl	8002078 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8001d5c:	e034      	b.n	8001dc8 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d12f      	bne.n	8001dc8 <BLDC_Drive+0x11c>
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fa2d 	bl	80021c8 <BLDC_Step5>
			break;
 8001d6e:	e02b      	b.n	8001dc8 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <BLDC_Drive+0xd6>
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f944 	bl	8002008 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8001d80:	e024      	b.n	8001dcc <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d11f      	bne.n	8001dcc <BLDC_Drive+0x120>
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f9e3 	bl	8002158 <BLDC_Step4>
			break;
 8001d92:	e01b      	b.n	8001dcc <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <BLDC_Drive+0xfa>
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa4a 	bl	8002238 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8001da4:	e014      	b.n	8001dd0 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10f      	bne.n	8001dd0 <BLDC_Drive+0x124>
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f999 	bl	80020e8 <BLDC_Step3>
			break;
 8001db6:	e00b      	b.n	8001dd0 <BLDC_Drive+0x124>
		}

		default :
			break;
 8001db8:	bf00      	nop
 8001dba:	e00a      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dbc:	bf00      	nop
 8001dbe:	e008      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dc0:	bf00      	nop
 8001dc2:	e006      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dc4:	bf00      	nop
 8001dc6:	e004      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dc8:	bf00      	nop
 8001dca:	e002      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <BLDC_Drive+0x126>
			break;
 8001dd0:	bf00      	nop
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8001e02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb0c 	bl	8000424 <__aeabi_i2d>
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <BLDC_Get_Speed+0x94>)
 8001e12:	f7fe fb71 	bl	80004f8 <__aeabi_dmul>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	4625      	mov	r5, r4
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e2c:	fb03 f302 	mul.w	r3, r3, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe faf7 	bl	8000424 <__aeabi_i2d>
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <BLDC_Get_Speed+0x98>)
 8001e3c:	f7fe fb5c 	bl	80004f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fc80 	bl	800074c <__aeabi_ddiv>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e58:	f7fe fc78 	bl	800074c <__aeabi_ddiv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	404e0000 	.word	0x404e0000
 8001e74:	40080000 	.word	0x40080000

08001e78 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001e86:	3b01      	subs	r3, #1
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	f200 8093 	bhi.w	8001fb4 <BLDC_Get_Position+0x13c>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <BLDC_Get_Position+0x1c>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f89 	.word	0x08001f89
 8001e98:	08001ed9 	.word	0x08001ed9
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001f31 	.word	0x08001f31
 8001ea4:	08001f5d 	.word	0x08001f5d
 8001ea8:	08001f05 	.word	0x08001f05
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d105      	bne.n	8001ec2 <BLDC_Get_Position+0x4a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8001ec0:	e07a      	b.n	8001fb8 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d175      	bne.n	8001fb8 <BLDC_Get_Position+0x140>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001ed6:	e06f      	b.n	8001fb8 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d105      	bne.n	8001eee <BLDC_Get_Position+0x76>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8001eec:	e066      	b.n	8001fbc <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d161      	bne.n	8001fbc <BLDC_Get_Position+0x144>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001f02:	e05b      	b.n	8001fbc <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d105      	bne.n	8001f1a <BLDC_Get_Position+0xa2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8001f18:	e052      	b.n	8001fc0 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d14d      	bne.n	8001fc0 <BLDC_Get_Position+0x148>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001f2e:	e047      	b.n	8001fc0 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d105      	bne.n	8001f46 <BLDC_Get_Position+0xce>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8001f44:	e03e      	b.n	8001fc4 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d139      	bne.n	8001fc4 <BLDC_Get_Position+0x14c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001f5a:	e033      	b.n	8001fc4 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <BLDC_Get_Position+0xfa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8001f70:	e02a      	b.n	8001fc8 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d125      	bne.n	8001fc8 <BLDC_Get_Position+0x150>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001f86:	e01f      	b.n	8001fc8 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d105      	bne.n	8001f9e <BLDC_Get_Position+0x126>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8001f9c:	e016      	b.n	8001fcc <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d111      	bne.n	8001fcc <BLDC_Get_Position+0x154>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001fb2:	e00b      	b.n	8001fcc <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8001fb4:	bf00      	nop
 8001fb6:	e00a      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fb8:	bf00      	nop
 8001fba:	e008      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fbc:	bf00      	nop
 8001fbe:	e006      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fc0:	bf00      	nop
 8001fc2:	e004      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fc4:	bf00      	nop
 8001fc6:	e002      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fc8:	bf00      	nop
 8001fca:	e000      	b.n	8001fce <BLDC_Get_Position+0x156>
			break;
 8001fcc:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa26 	bl	8000424 <__aeabi_i2d>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001fde:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	f7fe fa87 	bl	80004f8 <__aeabi_dmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <BLDC_Step1>:
	Delay_ms(10);
}


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	b299      	uxth	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	b29b      	uxth	r3, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4812      	ldr	r0, [pc, #72]	; (8002074 <BLDC_Step1+0x6c>)
 800202a:	f7ff fbfb 	bl	8001824 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a1a      	ldr	r2, [r3, #32]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0210 	orr.w	r2, r2, #16
 8002068:	621a      	str	r2, [r3, #32]
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010c00 	.word	0x40010c00

08002078 <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	b299      	uxth	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4812      	ldr	r0, [pc, #72]	; (80020e4 <BLDC_Step2+0x6c>)
 800209a:	f7ff fbc3 	bl	8001824 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0210 	orr.w	r2, r2, #16
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40010c00 	.word	0x40010c00

080020e8 <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	b299      	uxth	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	4812      	ldr	r0, [pc, #72]	; (8002154 <BLDC_Step3+0x6c>)
 800210a:	f7ff fb8b 	bl	8001824 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0210 	bic.w	r2, r2, #16
 8002120:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	621a      	str	r2, [r3, #32]
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40010c00 	.word	0x40010c00

08002158 <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	b299      	uxth	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b29b      	uxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	4812      	ldr	r0, [pc, #72]	; (80021c4 <BLDC_Step4+0x6c>)
 800217a:	f7ff fb53 	bl	8001824 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0210 	bic.w	r2, r2, #16
 8002190:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40010c00 	.word	0x40010c00

080021c8 <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	b299      	uxth	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4812      	ldr	r0, [pc, #72]	; (8002234 <BLDC_Step5+0x6c>)
 80021ea:	f7ff fb1b 	bl	8001824 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0210 	bic.w	r2, r2, #16
 8002214:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002228:	621a      	str	r2, [r3, #32]
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40010c00 	.word	0x40010c00

08002238 <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	b299      	uxth	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	b29a      	uxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	b29b      	uxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	4812      	ldr	r0, [pc, #72]	; (80022a4 <BLDC_Step6+0x6c>)
 800225a:	f7ff fae3 	bl	8001824 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0210 	bic.w	r2, r2, #16
 8002284:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002298:	621a      	str	r2, [r3, #32]
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 80022b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022bc:	f7fd ff64 	bl	8000188 <__aeabi_dsub>
 80022c0:	4603      	mov	r3, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80022d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	f7fe f90b 	bl	80004f8 <__aeabi_dmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80022fe:	f7fe f8fb 	bl	80004f8 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230e:	f7fe f8f3 	bl	80004f8 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fd ff37 	bl	800018c <__adddf3>
 800231e:	4603      	mov	r3, r0
 8002320:	460c      	mov	r4, r1
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800233a:	f7fd ff25 	bl	8000188 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f7fe f8d7 	bl	80004f8 <__aeabi_dmul>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	4618      	mov	r0, r3
 8002350:	4621      	mov	r1, r4
 8002352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002356:	f7fe f9f9 	bl	800074c <__aeabi_ddiv>
 800235a:	4603      	mov	r3, r0
 800235c:	460c      	mov	r4, r1
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8002370:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002374:	461a      	mov	r2, r3
 8002376:	4623      	mov	r3, r4
 8002378:	f7fd ff08 	bl	800018c <__adddf3>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4618      	mov	r0, r3
 8002382:	4621      	mov	r1, r4
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800238a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800238e:	461a      	mov	r2, r3
 8002390:	4623      	mov	r3, r4
 8002392:	f7fd fefb 	bl	800018c <__adddf3>
 8002396:	4603      	mov	r3, r0
 8002398:	460c      	mov	r4, r1
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80023a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}

080023b8 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	b08b      	sub	sp, #44	; 0x2c
 80023bc:	af04      	add	r7, sp, #16
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80023d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80023dc:	e9cd 3400 	strd	r3, r4, [sp]
 80023e0:	462a      	mov	r2, r5
 80023e2:	4633      	mov	r3, r6
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff ff5f 	bl	80022a8 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f7fe fb04 	bl	8000a04 <__aeabi_dcmpge>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <BLDC_SpeedPID+0x54>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800240a:	e00f      	b.n	800242c <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f7fe fadf 	bl	80009dc <__aeabi_dcmplt>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <BLDC_SpeedPID+0x74>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8002432:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002436:	4618      	mov	r0, r3
 8002438:	4621      	mov	r1, r4
 800243a:	f7fe fb0d 	bl	8000a58 <__aeabi_d2iz>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	bfb8      	it	lt
 8002444:	425b      	neglt	r3, r3
 8002446:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	2b5f      	cmp	r3, #95	; 0x5f
 800244c:	d901      	bls.n	8002452 <BLDC_SpeedPID+0x9a>
 800244e:	235f      	movs	r3, #95	; 0x5f
 8002450:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 8002452:	8afb      	ldrh	r3, [r7, #22]
 8002454:	4619      	mov	r1, r3
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f001 ffec 	bl	8004434 <SetPwmDuty>
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002464 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8002464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002468:	b08f      	sub	sp, #60	; 0x3c
 800246a:	af04      	add	r7, sp, #16
 800246c:	6278      	str	r0, [r7, #36]	; 0x24
 800246e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 8002472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002478:	f000 f8b2 	bl	80025e0 <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	//BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 8002488:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800248c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002490:	e9cd 1200 	strd	r1, r2, [sp]
 8002494:	462a      	mov	r2, r5
 8002496:	4633      	mov	r3, r6
 8002498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800249a:	f7ff ff05 	bl	80022a8 <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80024a4:	4b4c      	ldr	r3, [pc, #304]	; (80025d8 <BLDC_PositionPID+0x174>)
 80024a6:	cb18      	ldmia	r3, {r3, r4}
 80024a8:	461a      	mov	r2, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	f7fe fab4 	bl	8000a18 <__aeabi_dcmpgt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <BLDC_PositionPID+0x5e>
 80024b6:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <BLDC_PositionPID+0x174>)
 80024b8:	cb18      	ldmia	r3, {r3, r4}
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 80024c0:	e017      	b.n	80024f2 <BLDC_PositionPID+0x8e>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <BLDC_PositionPID+0x174>)
 80024ca:	cb18      	ldmia	r3, {r3, r4}
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024d8:	f7fe fa80 	bl	80009dc <__aeabi_dcmplt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <BLDC_PositionPID+0x8e>
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <BLDC_PositionPID+0x174>)
 80024e4:	cb18      	ldmia	r3, {r3, r4}
 80024e6:	469a      	mov	sl, r3
 80024e8:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f7fe fa80 	bl	8000a04 <__aeabi_dcmpge>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d024      	beq.n	8002554 <BLDC_PositionPID+0xf0>
	{
		pBLDCHandle->RotationDir = CW;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <BLDC_PositionPID+0x178>)
 800251a:	cb18      	ldmia	r3, {r3, r4}
 800251c:	461a      	mov	r2, r3
 800251e:	4623      	mov	r3, r4
 8002520:	f7fe fa5c 	bl	80009dc <__aeabi_dcmplt>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <BLDC_PositionPID+0xd0>
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <BLDC_PositionPID+0x178>)
 800252c:	cb18      	ldmia	r3, {r3, r4}
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800253a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800253e:	4618      	mov	r0, r3
 8002540:	4621      	mov	r1, r4
 8002542:	f7fe fab1 	bl	8000aa8 <__aeabi_d2uiz>
 8002546:	4603      	mov	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254e:	f001 ff71 	bl	8004434 <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 8002552:	e03b      	b.n	80025cc <BLDC_PositionPID+0x168>
	else if(pBLDCHandle->PwmPID < 0)
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	f7fe fa3b 	bl	80009dc <__aeabi_dcmplt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <BLDC_PositionPID+0x10a>
}
 800256c:	e02e      	b.n	80025cc <BLDC_PositionPID+0x168>
		pBLDCHandle->RotationDir = CCW;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <BLDC_PositionPID+0x178>)
 800257e:	cb18      	ldmia	r3, {r3, r4}
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800258c:	f7fe fa44 	bl	8000a18 <__aeabi_dcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <BLDC_PositionPID+0x142>
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <BLDC_PositionPID+0x178>)
 8002598:	cb18      	ldmia	r3, {r3, r4}
 800259a:	4698      	mov	r8, r3
 800259c:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80025ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025bc:	f7fe fa74 	bl	8000aa8 <__aeabi_d2uiz>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4619      	mov	r1, r3
 80025c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c8:	f001 ff34 	bl	8004434 <SetPwmDuty>
}
 80025cc:	bf00      	nop
 80025ce:	372c      	adds	r7, #44	; 0x2c
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000
 80025dc:	200001f8 	.word	0x200001f8

080025e0 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80025e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025e4:	b08d      	sub	sp, #52	; 0x34
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80025fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025fe:	461a      	mov	r2, r3
 8002600:	4623      	mov	r3, r4
 8002602:	f7fd fdc1 	bl	8000188 <__aeabi_dsub>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800261a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800261e:	461a      	mov	r2, r3
 8002620:	4623      	mov	r3, r4
 8002622:	f7fd ff69 	bl	80004f8 <__aeabi_dmul>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4baa      	ldr	r3, [pc, #680]	; (80028dc <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8002634:	f7fd ff60 	bl	80004f8 <__aeabi_dmul>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	4618      	mov	r0, r3
 800263e:	4621      	mov	r1, r4
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002646:	e9d4 3400 	ldrd	r3, r4, [r4]
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	f7fe f87d 	bl	800074c <__aeabi_ddiv>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002666:	e9d4 3400 	ldrd	r3, r4, [r4]
 800266a:	461a      	mov	r2, r3
 800266c:	4623      	mov	r3, r4
 800266e:	f7fd fd8b 	bl	8000188 <__aeabi_dsub>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	e9c7 3404 	strd	r3, r4, [r7, #16]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002686:	f7fe f9bd 	bl	8000a04 <__aeabi_dcmpge>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <BLDC_CalculateTrajectoryPosition+0xb6>
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	e00c      	b.n	80026b0 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a2:	f7fe f99b 	bl	80009dc <__aeabi_dcmplt>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <BLDC_CalculateTrajectoryPosition+0xd0>
 80026ac:	2301      	movs	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4b89      	ldr	r3, [pc, #548]	; (80028dc <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80026b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026ba:	f7fd ff1d 	bl	80004f8 <__aeabi_dmul>
 80026be:	4603      	mov	r3, r0
 80026c0:	460c      	mov	r4, r1
 80026c2:	461a      	mov	r2, r3
 80026c4:	4623      	mov	r3, r4
 80026c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ca:	f7fe f987 	bl	80009dc <__aeabi_dcmplt>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d029      	beq.n	8002728 <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80026e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	f7fd fd4e 	bl	8000188 <__aeabi_dsub>
 80026ec:	4603      	mov	r3, r0
 80026ee:	460c      	mov	r4, r1
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f8:	f7fe f98e 	bl	8000a18 <__aeabi_dcmpgt>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <BLDC_CalculateTrajectoryPosition+0x128>
 8002702:	2301      	movs	r3, #1
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	e049      	b.n	800279c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 8002708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800270c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002710:	f7fe f982 	bl	8000a18 <__aeabi_dcmpgt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <BLDC_CalculateTrajectoryPosition+0x140>
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
 800271e:	e03d      	b.n	800279c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
 8002726:	e039      	b.n	800279c <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <BLDC_CalculateTrajectoryPosition+0x2fc>)
 800272e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002732:	f7fd fee1 	bl	80004f8 <__aeabi_dmul>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	461a      	mov	r2, r3
 800273c:	4623      	mov	r3, r4
 800273e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002742:	f7fe f95f 	bl	8000a04 <__aeabi_dcmpge>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d027      	beq.n	800279c <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002758:	e9d4 3400 	ldrd	r3, r4, [r4]
 800275c:	461a      	mov	r2, r3
 800275e:	4623      	mov	r3, r4
 8002760:	f7fd fd12 	bl	8000188 <__aeabi_dsub>
 8002764:	4603      	mov	r3, r0
 8002766:	460c      	mov	r4, r1
 8002768:	4698      	mov	r8, r3
 800276a:	46a1      	mov	r9, r4
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8002772:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002776:	f7fd febf 	bl	80004f8 <__aeabi_dmul>
 800277a:	4603      	mov	r3, r0
 800277c:	460c      	mov	r4, r1
 800277e:	461a      	mov	r2, r3
 8002780:	4623      	mov	r3, r4
 8002782:	4640      	mov	r0, r8
 8002784:	4649      	mov	r1, r9
 8002786:	f7fe f929 	bl	80009dc <__aeabi_dcmplt>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <BLDC_CalculateTrajectoryPosition+0x1b6>
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
 8002794:	e002      	b.n	800279c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	switch (accelDir)
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <BLDC_CalculateTrajectoryPosition+0x1e8>
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d003      	beq.n	80027ae <BLDC_CalculateTrajectoryPosition+0x1ce>
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d015      	beq.n	80027d8 <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 80027ac:	e028      	b.n	8002800 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80027b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027b8:	f7fd fe9e 	bl	80004f8 <__aeabi_dmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80027c6:	e01b      	b.n	8002800 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	f04f 0400 	mov.w	r4, #0
 80027d2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80027d6:	e013      	b.n	8002800 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80027de:	e9d4 3400 	ldrd	r3, r4, [r4]
 80027e2:	461d      	mov	r5, r3
 80027e4:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80027e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ec:	4628      	mov	r0, r5
 80027ee:	4631      	mov	r1, r6
 80027f0:	f7fd fe82 	bl	80004f8 <__aeabi_dmul>
 80027f4:	4603      	mov	r3, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80027fe:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800280c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	f7fd fcba 	bl	800018c <__adddf3>
 8002818:	4603      	mov	r3, r0
 800281a:	460c      	mov	r4, r1
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <BLDC_CalculateTrajectoryPosition+0x24e>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d059      	beq.n	80028e0 <BLDC_CalculateTrajectoryPosition+0x300>

			break;
		}

		default :
			break;
 800282c:	e0ae      	b.n	800298c <BLDC_CalculateTrajectoryPosition+0x3ac>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800283a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800283e:	461a      	mov	r2, r3
 8002840:	4623      	mov	r3, r4
 8002842:	f7fe f8df 	bl	8000a04 <__aeabi_dcmpge>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d016      	beq.n	800287a <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	f04f 0400 	mov.w	r4, #0
 8002856:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800286e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 8002878:	e088      	b.n	800298c <BLDC_CalculateTrajectoryPosition+0x3ac>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8002886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800288a:	f7fd fe35 	bl	80004f8 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4690      	mov	r8, r2
 8002894:	4699      	mov	r9, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	f7fd fc74 	bl	800018c <__adddf3>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80028b2:	f7fd fc69 	bl	8000188 <__aeabi_dsub>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4640      	mov	r0, r8
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fd fe1b 	bl	80004f8 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4620      	mov	r0, r4
 80028c8:	4629      	mov	r1, r5
 80028ca:	f7fd fc5f 	bl	800018c <__adddf3>
 80028ce:	4603      	mov	r3, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 80028d8:	e058      	b.n	800298c <BLDC_CalculateTrajectoryPosition+0x3ac>
 80028da:	bf00      	nop
 80028dc:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80028ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	f7fe f87c 	bl	80009f0 <__aeabi_dcmple>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <BLDC_CalculateTrajectoryPosition+0x34c>
				pBLDCHandle->TrjCurSpeed = 0;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002920:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 800292a:	e02e      	b.n	800298a <BLDC_CalculateTrajectoryPosition+0x3aa>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <BLDC_CalculateTrajectoryPosition+0x3b8>)
 8002938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800293c:	f7fd fddc 	bl	80004f8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4690      	mov	r8, r2
 8002946:	4699      	mov	r9, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	f7fd fc1b 	bl	800018c <__adddf3>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8002964:	f7fd fc10 	bl	8000188 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	f7fd fdc2 	bl	80004f8 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fc06 	bl	800018c <__adddf3>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800298a:	bf00      	nop
	}
}
 800298c:	bf00      	nop
 800298e:	3734      	adds	r7, #52	; 0x34
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002996:	bf00      	nop
 8002998:	3fe00000 	.word	0x3fe00000

0800299c <SystemClock_Config>:
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
}


void SystemClock_Config(uint8_t clockFreq)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b092      	sub	sp, #72	; 0x48
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2228      	movs	r2, #40	; 0x28
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fdad 	bl	8004514 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	2214      	movs	r2, #20
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fda6 	bl	8004514 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 80029cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d0:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 80029dc:	2302      	movs	r3, #2
 80029de:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	3b10      	subs	r3, #16
 80029e4:	2b38      	cmp	r3, #56	; 0x38
 80029e6:	f200 8101 	bhi.w	8002bec <SystemClock_Config+0x250>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <SystemClock_Config+0x54>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002ad5 	.word	0x08002ad5
 80029f4:	08002bed 	.word	0x08002bed
 80029f8:	08002bed 	.word	0x08002bed
 80029fc:	08002bed 	.word	0x08002bed
 8002a00:	08002bed 	.word	0x08002bed
 8002a04:	08002bed 	.word	0x08002bed
 8002a08:	08002bed 	.word	0x08002bed
 8002a0c:	08002bed 	.word	0x08002bed
 8002a10:	08002af5 	.word	0x08002af5
 8002a14:	08002bed 	.word	0x08002bed
 8002a18:	08002bed 	.word	0x08002bed
 8002a1c:	08002bed 	.word	0x08002bed
 8002a20:	08002bed 	.word	0x08002bed
 8002a24:	08002bed 	.word	0x08002bed
 8002a28:	08002bed 	.word	0x08002bed
 8002a2c:	08002bed 	.word	0x08002bed
 8002a30:	08002b17 	.word	0x08002b17
 8002a34:	08002bed 	.word	0x08002bed
 8002a38:	08002bed 	.word	0x08002bed
 8002a3c:	08002bed 	.word	0x08002bed
 8002a40:	08002bed 	.word	0x08002bed
 8002a44:	08002bed 	.word	0x08002bed
 8002a48:	08002bed 	.word	0x08002bed
 8002a4c:	08002bed 	.word	0x08002bed
 8002a50:	08002b39 	.word	0x08002b39
 8002a54:	08002bed 	.word	0x08002bed
 8002a58:	08002bed 	.word	0x08002bed
 8002a5c:	08002bed 	.word	0x08002bed
 8002a60:	08002bed 	.word	0x08002bed
 8002a64:	08002bed 	.word	0x08002bed
 8002a68:	08002bed 	.word	0x08002bed
 8002a6c:	08002bed 	.word	0x08002bed
 8002a70:	08002b5d 	.word	0x08002b5d
 8002a74:	08002bed 	.word	0x08002bed
 8002a78:	08002bed 	.word	0x08002bed
 8002a7c:	08002bed 	.word	0x08002bed
 8002a80:	08002bed 	.word	0x08002bed
 8002a84:	08002bed 	.word	0x08002bed
 8002a88:	08002bed 	.word	0x08002bed
 8002a8c:	08002bed 	.word	0x08002bed
 8002a90:	08002b81 	.word	0x08002b81
 8002a94:	08002bed 	.word	0x08002bed
 8002a98:	08002bed 	.word	0x08002bed
 8002a9c:	08002bed 	.word	0x08002bed
 8002aa0:	08002bed 	.word	0x08002bed
 8002aa4:	08002bed 	.word	0x08002bed
 8002aa8:	08002bed 	.word	0x08002bed
 8002aac:	08002bed 	.word	0x08002bed
 8002ab0:	08002ba5 	.word	0x08002ba5
 8002ab4:	08002bed 	.word	0x08002bed
 8002ab8:	08002bed 	.word	0x08002bed
 8002abc:	08002bed 	.word	0x08002bed
 8002ac0:	08002bed 	.word	0x08002bed
 8002ac4:	08002bed 	.word	0x08002bed
 8002ac8:	08002bed 	.word	0x08002bed
 8002acc:	08002bed 	.word	0x08002bed
 8002ad0:	08002bc9 	.word	0x08002bc9
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad8:	230f      	movs	r3, #15
 8002ada:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002adc:	2302      	movs	r3, #2
 8002ade:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002af2:	e07c      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8002af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002afa:	230f      	movs	r3, #15
 8002afc:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afe:	2302      	movs	r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002b14:	e06b      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8002b16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b20:	2302      	movs	r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002b36:	e05a      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8002b38:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b3e:	230f      	movs	r3, #15
 8002b40:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b42:	2302      	movs	r3, #2
 8002b44:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8002b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002b5a:	e048      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b62:	230f      	movs	r3, #15
 8002b64:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b66:	2302      	movs	r3, #2
 8002b68:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002b7e:	e036      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8002b80:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b86:	230f      	movs	r3, #15
 8002b88:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8002b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b96:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002ba2:	e024      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8002ba4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002baa:	230f      	movs	r3, #15
 8002bac:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002bc6:	e012      	b.n	8002bee <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bc8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8002bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bde:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002bea:	e000      	b.n	8002bee <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8002bec:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fe6e 	bl	80018d4 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8002bf8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe feb6 	bl	8001974 <RCC_ClockConfig>
}
 8002c08:	bf00      	nop
 8002c0a:	3748      	adds	r7, #72	; 0x48
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <Delay_us>:
//}



void Delay_us(uint32_t time_us)
{
 8002c10:	b4b0      	push	{r4, r5, r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8002c18:	2400      	movs	r4, #0
 8002c1a:	e006      	b.n	8002c2a <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8002c1c:	2500      	movs	r5, #0
 8002c1e:	e001      	b.n	8002c24 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8002c20:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8002c22:	3501      	adds	r5, #1
 8002c24:	2d4c      	cmp	r5, #76	; 0x4c
 8002c26:	d9fb      	bls.n	8002c20 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8002c28:	3401      	adds	r4, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <Delay_us+0x34>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	429c      	cmp	r4, r3
 8002c36:	d3f1      	bcc.n	8002c1c <Delay_us+0xc>
		}
	}
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bcb0      	pop	{r4, r5, r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	cccccccd 	.word	0xcccccccd

08002c48 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ffd8 	bl	8002c10 <Delay_us>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <TIM6_IRQHandler+0x10>)
 8002c6e:	f7fe ff69 	bl	8001b44 <TIM_IRQHandling>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200004a8 	.word	0x200004a8

08002c7c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <EXTI9_5_IRQHandler+0x14>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fe09 	bl	800189c <EXTI_IRQHandling>
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000280 	.word	0x20000280

08002c94 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <DMA1_Channel7_IRQHandler>:


void DMA1_Channel7_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART2Handle.hdmatx);
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <DMA1_Channel7_IRQHandler+0x14>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f889 	bl	8000dc0 <DMA_IRQ_Handling>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200003d4 	.word	0x200003d4

08002cb8 <main>:
 */

#include "main.h"

int main(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8002cbe:	2048      	movs	r0, #72	; 0x48
 8002cc0:	f7ff fe6c 	bl	800299c <SystemClock_Config>
	Delay_ms(100);
 8002cc4:	2064      	movs	r0, #100	; 0x64
 8002cc6:	f7ff ffbf 	bl	8002c48 <Delay_ms>

	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8002cca:	223c      	movs	r2, #60	; 0x3c
 8002ccc:	2100      	movs	r1, #0
 8002cce:	482d      	ldr	r0, [pc, #180]	; (8002d84 <main+0xcc>)
 8002cd0:	f001 fc20 	bl	8004514 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8002cd4:	2230      	movs	r2, #48	; 0x30
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	482b      	ldr	r0, [pc, #172]	; (8002d88 <main+0xd0>)
 8002cda:	f001 fc1b 	bl	8004514 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8002cde:	2254      	movs	r2, #84	; 0x54
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	482a      	ldr	r0, [pc, #168]	; (8002d8c <main+0xd4>)
 8002ce4:	f001 fc16 	bl	8004514 <memset>
	Delay_ms(100);
 8002ce8:	2064      	movs	r0, #100	; 0x64
 8002cea:	f7ff ffad 	bl	8002c48 <Delay_ms>

	RCC_AFIO_CLK_ENABLE();
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <main+0xd8>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <main+0xd8>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <main+0xdc>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <main+0xdc>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6053      	str	r3, [r2, #4]

	TFT1_Init();
 8002d16:	f001 f9f7 	bl	8004108 <TFT1_Init>
	TS1_Init();
 8002d1a:	f001 fa1d 	bl	8004158 <TS1_Init>
	SPI_ENABLE(&SPI2Handle);
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <main+0xd4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <main+0xd4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	601a      	str	r2, [r3, #0]
	Delay_ms(100);
 8002d2e:	2064      	movs	r0, #100	; 0x64
 8002d30:	f7ff ff8a 	bl	8002c48 <Delay_ms>


	/* User Code Start */
	TFT1Handle.foreground = White;
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <main+0xcc>)
 8002d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d3a:	86da      	strh	r2, [r3, #54]	; 0x36
	TFT1Handle.background = Black;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <main+0xcc>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	871a      	strh	r2, [r3, #56]	; 0x38

	while(1)
	{
		TS_Input(&TS1Handle);
 8002d42:	4811      	ldr	r0, [pc, #68]	; (8002d88 <main+0xd0>)
 8002d44:	f001 f8b4 	bl	8003eb0 <TS_Input>

		TFT_xy(&TFT1Handle, 10, 10);
 8002d48:	220a      	movs	r2, #10
 8002d4a:	210a      	movs	r1, #10
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <main+0xcc>)
 8002d4e:	f000 fc43 	bl	80035d8 <TFT_xy>
		TFT_Unsigned_decimal(&TFT1Handle, TS1Handle.x_touch, 0, 5);
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <main+0xd0>)
 8002d54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d56:	4619      	mov	r1, r3
 8002d58:	2305      	movs	r3, #5
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4809      	ldr	r0, [pc, #36]	; (8002d84 <main+0xcc>)
 8002d5e:	f001 f803 	bl	8003d68 <TFT_Unsigned_decimal>
		TFT_xy(&TFT1Handle, 18, 10);
 8002d62:	220a      	movs	r2, #10
 8002d64:	2112      	movs	r1, #18
 8002d66:	4807      	ldr	r0, [pc, #28]	; (8002d84 <main+0xcc>)
 8002d68:	f000 fc36 	bl	80035d8 <TFT_xy>
		TFT_Unsigned_decimal(&TFT1Handle, TS1Handle.y_touch, 0, 5);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <main+0xd0>)
 8002d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d70:	4619      	mov	r1, r3
 8002d72:	2305      	movs	r3, #5
 8002d74:	2200      	movs	r2, #0
 8002d76:	4803      	ldr	r0, [pc, #12]	; (8002d84 <main+0xcc>)
 8002d78:	f000 fff6 	bl	8003d68 <TFT_Unsigned_decimal>

		Delay_ms(100);
 8002d7c:	2064      	movs	r0, #100	; 0x64
 8002d7e:	f7ff ff63 	bl	8002c48 <Delay_ms>
		TS_Input(&TS1Handle);
 8002d82:	e7de      	b.n	8002d42 <main+0x8a>
 8002d84:	20000378 	.word	0x20000378
 8002d88:	20000250 	.word	0x20000250
 8002d8c:	20000454 	.word	0x20000454
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000

08002d98 <TFT_MspInit>:
	}
}


void TFT_MspInit(TFT_HandleTypeDef *pTFTHandle)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	2210      	movs	r2, #16
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fbb3 	bl	8004514 <memset>

	if(pTFTHandle->Instance == TFT1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d168      	bne.n	8002e88 <TFT_MspInit+0xf0>
		/************************************************************************
		 *		  Low level init GPIO of TFT Control pins and Data pins			*
		 ***********************************************************************/

		// 1. Initialize GPIO for Control Pins (nRST, nCS, RS, nWR) to GPIO Output Push-Pull mode
		pTFTHandle->Init.GPIOx_TFT_Control = GPIOA;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <TFT_MspInit+0xf8>)
 8002dba:	605a      	str	r2, [r3, #4]
		pTFTHandle->Init.GPIO_Pin_TFT_nRST = GPIO_PIN_0;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
		pTFTHandle->Init.GPIO_Pin_TFT_nCS = GPIO_PIN_1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	619a      	str	r2, [r3, #24]
		pTFTHandle->Init.GPIO_Pin_TFT_RS = GPIO_PIN_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	61da      	str	r2, [r3, #28]
		pTFTHandle->Init.GPIO_Pin_TFT_nWR = GPIO_PIN_3;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	621a      	str	r2, [r3, #32]
		pTFTHandle->Init.GPIO_Pins_TFT_Control = pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS | pTFTHandle->Init.GPIO_Pin_TFT_nWR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60da      	str	r2, [r3, #12]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Control;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Control, &GPIOInit);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f107 0208 	add.w	r2, r7, #8
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fa96 	bl	800133c <GPIO_Init>
		Delay_ms(10);
 8002e10:	200a      	movs	r0, #10
 8002e12:	f7ff ff19 	bl	8002c48 <Delay_ms>

		GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_nWR, pTFTHandle->Init.GPIO_Pin_TFT_RS);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6858      	ldr	r0, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b299      	uxth	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7fe fcf2 	bl	8001824 <GPIO_ModifyPin>

		// 2. Initialize GPIO for Data Pins (D0 ~ D15) to GPIO Output mode
		pTFTHandle->Init.GPIOx_TFT_Data = GPIOC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <TFT_MspInit+0xfc>)
 8002e44:	609a      	str	r2, [r3, #8]
		pTFTHandle->Init.GPIO_Pins_TFT_Data = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4c:	611a      	str	r2, [r3, #16]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Data;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002e54:	2301      	movs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Data, &GPIOInit);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f107 0208 	add.w	r2, r7, #8
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fa66 	bl	800133c <GPIO_Init>
		Delay_ms(10);
 8002e70:	200a      	movs	r0, #10
 8002e72:	f7ff fee9 	bl	8002c48 <Delay_ms>

		GPIO_WritePort(pTFTHandle->Init.GPIOx_TFT_Data, pTFTHandle->Init.GPIO_Pins_TFT_Data, GPIO_PIN_RESET);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6898      	ldr	r0, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fe fce8 	bl	8001858 <GPIO_WritePort>
	}
}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40010800 	.word	0x40010800
 8002e94:	40011000 	.word	0x40011000

08002e98 <TS_MspInit>:


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fb33 	bl	8004514 <memset>

	if(pTSHandle->Instance == TS1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d178      	bne.n	8002fa8 <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <TS_MspInit+0x118>)
 8002eba:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f107 0208 	add.w	r2, r7, #8
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fa2b 	bl	800133c <GPIO_Init>
		Delay_ms(10);
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f7ff feae 	bl	8002c48 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6858      	ldr	r0, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7fe fc75 	bl	80017e8 <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	2210      	movs	r2, #16
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 fb04 	bl	8004514 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f107 0208 	add.w	r2, r7, #8
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe fa09 	bl	800133c <GPIO_Init>
		Delay_ms(10);
 8002f2a:	200a      	movs	r0, #10
 8002f2c:	f7ff fe8c 	bl	8002c48 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6858      	ldr	r0, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7fe fc53 	bl	80017e8 <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <TS_MspInit+0x11c>)
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <TS_MspInit+0x120>)
 8002f4e:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f58:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6a:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f84:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2218      	movs	r2, #24
 8002f8c:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fd28 	bl	80019f8 <SPI_Init>
	}
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010c00 	.word	0x40010c00
 8002fb4:	20000454 	.word	0x20000454
 8002fb8:	40003800 	.word	0x40003800

08002fbc <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	2214      	movs	r2, #20
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 faa1 	bl	8004514 <memset>

	if(pSPIHandle->Instance == SPI2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <SPI_MspInit+0x88>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d128      	bne.n	800302e <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <SPI_MspInit+0x8c>)
 8002fde:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 8002fe0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002fe4:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe f99f 	bl	800133c <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	2214      	movs	r2, #20
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f001 fa84 	bl	8004514 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <SPI_MspInit+0x8c>)
 800300e:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8003010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003014:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7fe f987 	bl	800133c <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd2b 	bl	8001a90 <SPI_PeripheralClockControl>
}
 800303a:	bf00      	nop
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40003800 	.word	0x40003800
 8003048:	40010c00 	.word	0x40010c00

0800304c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <_sbrk+0x50>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <_sbrk+0x16>
		heap_end = &end;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <_sbrk+0x50>)
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <_sbrk+0x54>)
 8003060:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <_sbrk+0x50>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <_sbrk+0x50>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	466a      	mov	r2, sp
 8003072:	4293      	cmp	r3, r2
 8003074:	d907      	bls.n	8003086 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003076:	f001 fa23 	bl	80044c0 <__errno>
 800307a:	4602      	mov	r2, r0
 800307c:	230c      	movs	r3, #12
 800307e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e006      	b.n	8003094 <_sbrk+0x48>
	}

	heap_end += incr;
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <_sbrk+0x50>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <_sbrk+0x50>)
 8003090:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000200 	.word	0x20000200
 80030a0:	200004d0 	.word	0x200004d0

080030a4 <TFT_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TFT_Init(TFT_HandleTypeDef *pTFTHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of TFT LCD : GPIO
	TFT_MspInit(pTFTHandle);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fe73 	bl	8002d98 <TFT_MspInit>

	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_RESET);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6858      	ldr	r0, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fe fb92 	bl	80017e8 <GPIO_WritePin>
	Delay_ms(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7ff fdbf 	bl	8002c48 <Delay_ms>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_SET);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6858      	ldr	r0, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2201      	movs	r2, #1
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fe fb86 	bl	80017e8 <GPIO_WritePin>
	Delay_ms(120);
 80030dc:	2078      	movs	r0, #120	; 0x78
 80030de:	f7ff fdb3 	bl	8002c48 <Delay_ms>

	TFT_Write(pTFTHandle, 0x02, 0x0000);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2102      	movs	r1, #2
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f9d0 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2103      	movs	r1, #3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f9cb 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2104      	movs	r1, #4
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9c6 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8003100:	223f      	movs	r2, #63	; 0x3f
 8003102:	2105      	movs	r1, #5
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9c1 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 800310a:	2200      	movs	r2, #0
 800310c:	2106      	movs	r1, #6
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9bc 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 8003114:	2200      	movs	r2, #0
 8003116:	2107      	movs	r1, #7
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f9b7 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 800311e:	2200      	movs	r2, #0
 8003120:	2108      	movs	r1, #8
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9b2 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 8003128:	22ef      	movs	r2, #239	; 0xef
 800312a:	2109      	movs	r1, #9
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9ad 	bl	800348c <TFT_Write>

	TFT_Write(pTFTHandle, 0x01, 0x0006);
 8003132:	2206      	movs	r2, #6
 8003134:	2101      	movs	r1, #1
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9a8 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x16, 0x0068);
 800313c:	2268      	movs	r2, #104	; 0x68
 800313e:	2116      	movs	r1, #22
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f9a3 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x18, 0x0000);
 8003146:	2200      	movs	r2, #0
 8003148:	2118      	movs	r1, #24
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f99e 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x70, 0x0065);
 8003150:	2265      	movs	r2, #101	; 0x65
 8003152:	2170      	movs	r1, #112	; 0x70
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f999 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x23, 0x0095);
 800315a:	2295      	movs	r2, #149	; 0x95
 800315c:	2123      	movs	r1, #35	; 0x23
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f994 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x24, 0x0095);
 8003164:	2295      	movs	r2, #149	; 0x95
 8003166:	2124      	movs	r1, #36	; 0x24
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f98f 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x25, 0x00FF);
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	2125      	movs	r1, #37	; 0x25
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f98a 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x27, 0x0002);
 8003178:	2202      	movs	r2, #2
 800317a:	2127      	movs	r1, #39	; 0x27
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f985 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x28, 0x0002);
 8003182:	2202      	movs	r2, #2
 8003184:	2128      	movs	r1, #40	; 0x28
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f980 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x29, 0x0002);
 800318c:	2202      	movs	r2, #2
 800318e:	2129      	movs	r1, #41	; 0x29
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f97b 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x2A, 0x0002);
 8003196:	2202      	movs	r2, #2
 8003198:	212a      	movs	r1, #42	; 0x2a
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f976 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x2C, 0x0002);
 80031a0:	2202      	movs	r2, #2
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f971 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x2D, 0x0002);
 80031aa:	2202      	movs	r2, #2
 80031ac:	212d      	movs	r1, #45	; 0x2d
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f96c 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x3A, 0x0001);
 80031b4:	2201      	movs	r2, #1
 80031b6:	213a      	movs	r1, #58	; 0x3a
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f967 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x3B, 0x0001);
 80031be:	2201      	movs	r2, #1
 80031c0:	213b      	movs	r1, #59	; 0x3b
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f962 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x3C, 0x00F0);
 80031c8:	22f0      	movs	r2, #240	; 0xf0
 80031ca:	213c      	movs	r1, #60	; 0x3c
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f95d 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x3D, 0x0000);
 80031d2:	2200      	movs	r2, #0
 80031d4:	213d      	movs	r1, #61	; 0x3d
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f958 	bl	800348c <TFT_Write>
	Delay_ms(20);
 80031dc:	2014      	movs	r0, #20
 80031de:	f7ff fd33 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x35, 0x0038);
 80031e2:	2238      	movs	r2, #56	; 0x38
 80031e4:	2135      	movs	r1, #53	; 0x35
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f950 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x36, 0x0078);
 80031ec:	2278      	movs	r2, #120	; 0x78
 80031ee:	2136      	movs	r1, #54	; 0x36
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f94b 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x3E, 0x0038);
 80031f6:	2238      	movs	r2, #56	; 0x38
 80031f8:	213e      	movs	r1, #62	; 0x3e
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f946 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x40, 0x000F);
 8003200:	220f      	movs	r2, #15
 8003202:	2140      	movs	r1, #64	; 0x40
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f941 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x41, 0x00F0);
 800320a:	22f0      	movs	r2, #240	; 0xf0
 800320c:	2141      	movs	r1, #65	; 0x41
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f93c 	bl	800348c <TFT_Write>

	TFT_Write(pTFTHandle, 0x19, 0x0049);
 8003214:	2249      	movs	r2, #73	; 0x49
 8003216:	2119      	movs	r1, #25
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f937 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x93, 0x000F);
 800321e:	220f      	movs	r2, #15
 8003220:	2193      	movs	r1, #147	; 0x93
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f932 	bl	800348c <TFT_Write>
	Delay_ms(10);
 8003228:	200a      	movs	r0, #10
 800322a:	f7ff fd0d 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x20, 0x0040);
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	2120      	movs	r1, #32
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f92a 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x1D, 0x0007);
 8003238:	2207      	movs	r2, #7
 800323a:	211d      	movs	r1, #29
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f925 	bl	800348c <TFT_Write>
	Delay_ms(10);
 8003242:	200a      	movs	r0, #10
 8003244:	f7ff fd00 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1E, 0x0000);
 8003248:	2200      	movs	r2, #0
 800324a:	211e      	movs	r1, #30
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f91d 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x1F, 0x0004);
 8003252:	2204      	movs	r2, #4
 8003254:	211f      	movs	r1, #31
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f918 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x44, 0x0040);
 800325c:	2240      	movs	r2, #64	; 0x40
 800325e:	2144      	movs	r1, #68	; 0x44
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f913 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x45, 0x0012);
 8003266:	2212      	movs	r2, #18
 8003268:	2145      	movs	r1, #69	; 0x45
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f90e 	bl	800348c <TFT_Write>
	Delay_ms(10);
 8003270:	200a      	movs	r0, #10
 8003272:	f7ff fce9 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1C, 0x0004);
 8003276:	2204      	movs	r2, #4
 8003278:	211c      	movs	r1, #28
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f906 	bl	800348c <TFT_Write>
	Delay_ms(20);
 8003280:	2014      	movs	r0, #20
 8003282:	f7ff fce1 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x43, 0x0080);
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	2143      	movs	r1, #67	; 0x43
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8fe 	bl	800348c <TFT_Write>
	Delay_ms(5);
 8003290:	2005      	movs	r0, #5
 8003292:	f7ff fcd9 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0018);
 8003296:	2218      	movs	r2, #24
 8003298:	211b      	movs	r1, #27
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8f6 	bl	800348c <TFT_Write>
	Delay_ms(40);
 80032a0:	2028      	movs	r0, #40	; 0x28
 80032a2:	f7ff fcd1 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0010);
 80032a6:	2210      	movs	r2, #16
 80032a8:	211b      	movs	r1, #27
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8ee 	bl	800348c <TFT_Write>
	Delay_ms(40);
 80032b0:	2028      	movs	r0, #40	; 0x28
 80032b2:	f7ff fcc9 	bl	8002c48 <Delay_ms>

	TFT_Write(pTFTHandle, 0x46, 0x00A4);
 80032b6:	22a4      	movs	r2, #164	; 0xa4
 80032b8:	2146      	movs	r1, #70	; 0x46
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8e6 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x47, 0x0053);
 80032c0:	2253      	movs	r2, #83	; 0x53
 80032c2:	2147      	movs	r1, #71	; 0x47
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8e1 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x48, 0x0010);
 80032ca:	2210      	movs	r2, #16
 80032cc:	2148      	movs	r1, #72	; 0x48
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8dc 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x49, 0x005F);
 80032d4:	225f      	movs	r2, #95	; 0x5f
 80032d6:	2149      	movs	r1, #73	; 0x49
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8d7 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4A, 0x0004);
 80032de:	2204      	movs	r2, #4
 80032e0:	214a      	movs	r1, #74	; 0x4a
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8d2 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4B, 0x003F);
 80032e8:	223f      	movs	r2, #63	; 0x3f
 80032ea:	214b      	movs	r1, #75	; 0x4b
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8cd 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4C, 0x0002);
 80032f2:	2202      	movs	r2, #2
 80032f4:	214c      	movs	r1, #76	; 0x4c
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8c8 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4D, 0x00F6);
 80032fc:	22f6      	movs	r2, #246	; 0xf6
 80032fe:	214d      	movs	r1, #77	; 0x4d
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8c3 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4E, 0x0012);
 8003306:	2212      	movs	r2, #18
 8003308:	214e      	movs	r1, #78	; 0x4e
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8be 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x4F, 0x004C);
 8003310:	224c      	movs	r2, #76	; 0x4c
 8003312:	214f      	movs	r1, #79	; 0x4f
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8b9 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x50, 0x0046);
 800331a:	2246      	movs	r2, #70	; 0x46
 800331c:	2150      	movs	r1, #80	; 0x50
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8b4 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x51, 0x0044);
 8003324:	2244      	movs	r2, #68	; 0x44
 8003326:	2151      	movs	r1, #81	; 0x51
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8af 	bl	800348c <TFT_Write>

	TFT_Write(pTFTHandle, 0x90, 0x007F);
 800332e:	227f      	movs	r2, #127	; 0x7f
 8003330:	2190      	movs	r1, #144	; 0x90
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8aa 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x0004);
 8003338:	2204      	movs	r2, #4
 800333a:	2126      	movs	r1, #38	; 0x26
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f8a5 	bl	800348c <TFT_Write>
	Delay_ms(40);
 8003342:	2028      	movs	r0, #40	; 0x28
 8003344:	f7ff fc80 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x0024);
 8003348:	2224      	movs	r2, #36	; 0x24
 800334a:	2126      	movs	r1, #38	; 0x26
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f89d 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x002C);
 8003352:	222c      	movs	r2, #44	; 0x2c
 8003354:	2126      	movs	r1, #38	; 0x26
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f898 	bl	800348c <TFT_Write>
	Delay_ms(40);
 800335c:	2028      	movs	r0, #40	; 0x28
 800335e:	f7ff fc73 	bl	8002c48 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x003C);
 8003362:	223c      	movs	r2, #60	; 0x3c
 8003364:	2126      	movs	r1, #38	; 0x26
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f890 	bl	800348c <TFT_Write>

	TFT_Write(pTFTHandle, 0x57, 0x0002);
 800336c:	2202      	movs	r2, #2
 800336e:	2157      	movs	r1, #87	; 0x57
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f88b 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x55, 0x0000);
 8003376:	2200      	movs	r2, #0
 8003378:	2155      	movs	r1, #85	; 0x55
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f886 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0xFE, 0x005A);
 8003380:	225a      	movs	r2, #90	; 0x5a
 8003382:	21fe      	movs	r1, #254	; 0xfe
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f881 	bl	800348c <TFT_Write>
	TFT_Write(pTFTHandle, 0x57, 0x0000);
 800338a:	2200      	movs	r2, #0
 800338c:	2157      	movs	r1, #87	; 0x57
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f87c 	bl	800348c <TFT_Write>

	TFT_Clear_Screen(pTFTHandle);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f88f 	bl	80034b8 <TFT_Clear_Screen>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <TFT_Command>:
	 */
}


void TFT_Command(TFT_HandleTypeDef *pTFTHandle, uint16_t indexRegister)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS, GPIO_PIN_RESET);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6858      	ldr	r0, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4313      	orrs	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2200      	movs	r2, #0
 80033c4:	4619      	mov	r1, r3
 80033c6:	f7fe fa0f 	bl	80017e8 <GPIO_WritePin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, indexRegister);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fa54 	bl	8001880 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6858      	ldr	r0, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2200      	movs	r2, #0
 80033e4:	4619      	mov	r1, r3
 80033e6:	f7fe f9ff 	bl	80017e8 <GPIO_WritePin>
	asm("NOP");
 80033ea:	bf00      	nop
	asm("NOP");
 80033ec:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6858      	ldr	r0, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2201      	movs	r2, #1
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fe f9f4 	bl	80017e8 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6858      	ldr	r0, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	b29b      	uxth	r3, r3
 800340a:	2201      	movs	r2, #1
 800340c:	4619      	mov	r1, r3
 800340e:	f7fe f9eb 	bl	80017e8 <GPIO_WritePin>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <TFT_Data>:


void TFT_Data(TFT_HandleTypeDef *pTFTHandle, uint16_t data)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]
	GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_RS, pTFTHandle->Init.GPIO_Pin_TFT_nCS);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6858      	ldr	r0, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	b299      	uxth	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	f7fe f9f4 	bl	8001824 <GPIO_ModifyPin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, data);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fa1b 	bl	8001880 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6858      	ldr	r0, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	b29b      	uxth	r3, r3
 8003454:	2200      	movs	r2, #0
 8003456:	4619      	mov	r1, r3
 8003458:	f7fe f9c6 	bl	80017e8 <GPIO_WritePin>
	asm("NOP");
 800345c:	bf00      	nop
	asm("NOP");
 800345e:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6858      	ldr	r0, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	b29b      	uxth	r3, r3
 800346a:	2201      	movs	r2, #1
 800346c:	4619      	mov	r1, r3
 800346e:	f7fe f9bb 	bl	80017e8 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6858      	ldr	r0, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	b29b      	uxth	r3, r3
 800347c:	2201      	movs	r2, #1
 800347e:	4619      	mov	r1, r3
 8003480:	f7fe f9b2 	bl	80017e8 <GPIO_WritePin>
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <TFT_Write>:


void TFT_Write(TFT_HandleTypeDef *pTFTHandle, uint16_t reg, uint16_t val)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
 8003498:	4613      	mov	r3, r2
 800349a:	803b      	strh	r3, [r7, #0]
	TFT_Command(pTFTHandle, reg);
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff7e 	bl	80033a2 <TFT_Command>
	TFT_Data(pTFTHandle, val);
 80034a6:	883b      	ldrh	r3, [r7, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ffb5 	bl	800341a <TFT_Data>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <TFT_Clear_Screen>:




void TFT_Clear_Screen(TFT_HandleTypeDef *pTFTHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	TFT_Color_Screen(pTFTHandle, Black);
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f804 	bl	80034d0 <TFT_Color_Screen>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <TFT_Color_Screen>:


void TFT_Color_Screen(TFT_HandleTypeDef *pTFTHandle, uint16_t color)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
	uint16_t i, j;

	TFT_GRAM_Address(pTFTHandle, 0, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2100      	movs	r1, #0
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f81c 	bl	800351e <TFT_GRAM_Address>

	for(i = 0; i < 320; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	81fb      	strh	r3, [r7, #14]
 80034ea:	e010      	b.n	800350e <TFT_Color_Screen+0x3e>
	{
		for(j = 0; j < 240; j++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	81bb      	strh	r3, [r7, #12]
 80034f0:	e007      	b.n	8003502 <TFT_Color_Screen+0x32>
		{
			TFT_Data(pTFTHandle, color);
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff8f 	bl	800341a <TFT_Data>
		for(j = 0; j < 240; j++)
 80034fc:	89bb      	ldrh	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	81bb      	strh	r3, [r7, #12]
 8003502:	89bb      	ldrh	r3, [r7, #12]
 8003504:	2bef      	cmp	r3, #239	; 0xef
 8003506:	d9f4      	bls.n	80034f2 <TFT_Color_Screen+0x22>
	for(i = 0; i < 320; i++)
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	3301      	adds	r3, #1
 800350c:	81fb      	strh	r3, [r7, #14]
 800350e:	89fb      	ldrh	r3, [r7, #14]
 8003510:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003514:	d3ea      	bcc.n	80034ec <TFT_Color_Screen+0x1c>
		}
	}
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <TFT_GRAM_Address>:


void TFT_GRAM_Address(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]
 800352a:	4613      	mov	r3, r2
 800352c:	803b      	strh	r3, [r7, #0]
	if(pTFTHandle->ScreenMode == 'L')
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003534:	2b4c      	cmp	r3, #76	; 0x4c
 8003536:	d122      	bne.n	800357e <TFT_GRAM_Address+0x60>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8003538:	887b      	ldrh	r3, [r7, #2]
 800353a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800353e:	d245      	bcs.n	80035cc <TFT_GRAM_Address+0xae>
 8003540:	883b      	ldrh	r3, [r7, #0]
 8003542:	2bef      	cmp	r3, #239	; 0xef
 8003544:	d842      	bhi.n	80035cc <TFT_GRAM_Address+0xae>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	2102      	movs	r1, #2
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff9b 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	2103      	movs	r1, #3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff93 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8003566:	2200      	movs	r2, #0
 8003568:	2106      	movs	r1, #6
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff8e 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8003570:	883b      	ldrh	r3, [r7, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	2107      	movs	r1, #7
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff88 	bl	800348c <TFT_Write>
 800357c:	e021      	b.n	80035c2 <TFT_GRAM_Address+0xa4>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	2bef      	cmp	r3, #239	; 0xef
 8003582:	d825      	bhi.n	80035d0 <TFT_GRAM_Address+0xb2>
 8003584:	883b      	ldrh	r3, [r7, #0]
 8003586:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800358a:	d221      	bcs.n	80035d0 <TFT_GRAM_Address+0xb2>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 800358c:	2200      	movs	r2, #0
 800358e:	2102      	movs	r1, #2
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff7b 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	461a      	mov	r2, r3
 800359a:	2103      	movs	r1, #3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff75 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 80035a2:	883b      	ldrh	r3, [r7, #0]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	2106      	movs	r1, #6
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff6d 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 80035b2:	883b      	ldrh	r3, [r7, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	2107      	movs	r1, #7
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff65 	bl	800348c <TFT_Write>
	}

	TFT_Command(pTFTHandle, 0x22);
 80035c2:	2122      	movs	r1, #34	; 0x22
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff feec 	bl	80033a2 <TFT_Command>
 80035ca:	e002      	b.n	80035d2 <TFT_GRAM_Address+0xb4>
		if((xPos > 319) || (yPos > 239))	return;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <TFT_GRAM_Address+0xb4>
		if((xPos > 239) || (yPos > 319))	return;
 80035d0:	bf00      	nop
}
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <TFT_xy>:


void TFT_xy(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
 80035e4:	4613      	mov	r3, r2
 80035e6:	70bb      	strb	r3, [r7, #2]
	pTFTHandle->Xcharacter = xChar;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	78ba      	ldrb	r2, [r7, #2]
 80035f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TFT_Pixel>:
	pTFTHandle->background = colorback;
}


void TFT_Pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos, uint16_t color)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	4608      	mov	r0, r1
 800360c:	4611      	mov	r1, r2
 800360e:	461a      	mov	r2, r3
 8003610:	4603      	mov	r3, r0
 8003612:	817b      	strh	r3, [r7, #10]
 8003614:	460b      	mov	r3, r1
 8003616:	813b      	strh	r3, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
	if(pTFTHandle->ScreenMode == 'L')
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003622:	2b4c      	cmp	r3, #76	; 0x4c
 8003624:	d122      	bne.n	800366c <TFT_Pixel+0x6a>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800362c:	d24c      	bcs.n	80036c8 <TFT_Pixel+0xc6>
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	2bef      	cmp	r3, #239	; 0xef
 8003632:	d849      	bhi.n	80036c8 <TFT_Pixel+0xc6>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8003634:	897b      	ldrh	r3, [r7, #10]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	2102      	movs	r1, #2
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ff24 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8003644:	897b      	ldrh	r3, [r7, #10]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	2103      	movs	r1, #3
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff ff1c 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8003654:	2200      	movs	r2, #0
 8003656:	2106      	movs	r1, #6
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff17 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 800365e:	893b      	ldrh	r3, [r7, #8]
 8003660:	461a      	mov	r2, r3
 8003662:	2107      	movs	r1, #7
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff ff11 	bl	800348c <TFT_Write>
 800366a:	e021      	b.n	80036b0 <TFT_Pixel+0xae>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	2bef      	cmp	r3, #239	; 0xef
 8003670:	d82c      	bhi.n	80036cc <TFT_Pixel+0xca>
 8003672:	893b      	ldrh	r3, [r7, #8]
 8003674:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003678:	d228      	bcs.n	80036cc <TFT_Pixel+0xca>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 800367a:	2200      	movs	r2, #0
 800367c:	2102      	movs	r1, #2
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff ff04 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	461a      	mov	r2, r3
 8003688:	2103      	movs	r1, #3
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff fefe 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	2106      	movs	r1, #6
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fef6 	bl	800348c <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	2107      	movs	r1, #7
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff feee 	bl	800348c <TFT_Write>
	}

	if(color != Transparent)	TFT_Write(pTFTHandle, 0x22, color);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f640 0221 	movw	r2, #2081	; 0x821
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <TFT_Pixel+0xcc>
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	461a      	mov	r2, r3
 80036be:	2122      	movs	r1, #34	; 0x22
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fee3 	bl	800348c <TFT_Write>
 80036c6:	e002      	b.n	80036ce <TFT_Pixel+0xcc>
		if((xPos > 319) || (yPos > 239))	return;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <TFT_Pixel+0xcc>
		if((xPos > 239) || (yPos > 319))	return;
 80036cc:	bf00      	nop
}
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <TFT_English>:

}


void TFT_English(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b0c8      	sub	sp, #288	; 0x120
 80036d8:	af00      	add	r7, sp, #0
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	6018      	str	r0, [r3, #0]
 80036de:	460a      	mov	r2, r1
 80036e0:	1cfb      	adds	r3, r7, #3
 80036e2:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 8; x++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80036ea:	e044      	b.n	8003776 <TFT_English+0xa2>
	{
		data = E_font[code][x];
 80036ec:	1cfb      	adds	r3, r7, #3
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80036f4:	497f      	ldr	r1, [pc, #508]	; (80038f4 <TFT_English+0x220>)
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	440a      	add	r2, r1
 80036fa:	4413      	add	r3, r2
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8003702:	2300      	movs	r3, #0
 8003704:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003708:	e02c      	b.n	8003764 <TFT_English+0x90>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 800370a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <TFT_English+0x60>
 8003716:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800371a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	0109      	lsls	r1, r1, #4
 800372a:	440a      	add	r2, r1
 800372c:	4601      	mov	r1, r0
 800372e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003732:	e00d      	b.n	8003750 <TFT_English+0x7c>
			else				pixel[x][y] = pTFTHandle->background;
 8003734:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8003738:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	0109      	lsls	r1, r1, #4
 8003748:	440a      	add	r2, r1
 800374a:	4601      	mov	r1, r0
 800374c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8003750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 800375a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800375e:	3301      	adds	r3, #1
 8003760:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003764:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003768:	2b07      	cmp	r3, #7
 800376a:	d9ce      	bls.n	800370a <TFT_English+0x36>
	for(x = 0; x < 8; x++)
 800376c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003770:	3301      	adds	r3, #1
 8003772:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003776:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800377a:	2b07      	cmp	r3, #7
 800377c:	d9b6      	bls.n	80036ec <TFT_English+0x18>
		}
	}

	for(x = 0; x < 8; x++)
 800377e:	2300      	movs	r3, #0
 8003780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003784:	e049      	b.n	800381a <TFT_English+0x146>
	{
		data = E_font[code][x+8];
 8003786:	1cfb      	adds	r3, r7, #3
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800378e:	3308      	adds	r3, #8
 8003790:	4958      	ldr	r1, [pc, #352]	; (80038f4 <TFT_English+0x220>)
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	440a      	add	r2, r1
 8003796:	4413      	add	r3, r2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80037a4:	e030      	b.n	8003808 <TFT_English+0x134>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 80037a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <TFT_English+0x100>
 80037b2:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80037b6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80037ba:	f103 0208 	add.w	r2, r3, #8
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	0109      	lsls	r1, r1, #4
 80037ca:	440a      	add	r2, r1
 80037cc:	4601      	mov	r1, r0
 80037ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80037d2:	e00f      	b.n	80037f4 <TFT_English+0x120>
			else				pixel[x][y+8] = pTFTHandle->background;
 80037d4:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80037d8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80037dc:	f103 0208 	add.w	r2, r3, #8
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	0109      	lsls	r1, r1, #4
 80037ec:	440a      	add	r2, r1
 80037ee:	4601      	mov	r1, r0
 80037f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 80037f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 80037fe:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003802:	3301      	adds	r3, #1
 8003804:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003808:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800380c:	2b07      	cmp	r3, #7
 800380e:	d9ca      	bls.n	80037a6 <TFT_English+0xd2>
	for(x = 0; x < 8; x++)
 8003810:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003814:	3301      	adds	r3, #1
 8003816:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800381a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800381e:	2b07      	cmp	r3, #7
 8003820:	d9b1      	bls.n	8003786 <TFT_English+0xb2>
		}
	}

	if(pTFTHandle->outline_flag == 1)
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 80ed 	bne.w	8003a0a <TFT_English+0x336>
	{
		for(x = 0; x < 8; x++)
 8003830:	2300      	movs	r3, #0
 8003832:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003836:	e0e3      	b.n	8003a00 <TFT_English+0x32c>
		{
			dot0 = E_font[code][x] + E_font[code][x+8]*256;
 8003838:	1cfb      	adds	r3, r7, #3
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003840:	492c      	ldr	r1, [pc, #176]	; (80038f4 <TFT_English+0x220>)
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	440a      	add	r2, r1
 8003846:	4413      	add	r3, r2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b29a      	uxth	r2, r3
 800384c:	1cfb      	adds	r3, r7, #3
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003854:	3308      	adds	r3, #8
 8003856:	4827      	ldr	r0, [pc, #156]	; (80038f4 <TFT_English+0x220>)
 8003858:	0109      	lsls	r1, r1, #4
 800385a:	4401      	add	r1, r0
 800385c:	440b      	add	r3, r1
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	b29b      	uxth	r3, r3
 8003866:	4413      	add	r3, r2
 8003868:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			dot1 = dot0 >> 1;
 800386c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			dot2 = dot0;
 8003876:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800387a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			dot3 = E_font[code][x+1] + E_font[code][x+9]*256;
 800387e:	1cfb      	adds	r3, r7, #3
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003886:	3301      	adds	r3, #1
 8003888:	491a      	ldr	r1, [pc, #104]	; (80038f4 <TFT_English+0x220>)
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	440a      	add	r2, r1
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b29a      	uxth	r2, r3
 8003894:	1cfb      	adds	r3, r7, #3
 8003896:	7819      	ldrb	r1, [r3, #0]
 8003898:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800389c:	3309      	adds	r3, #9
 800389e:	4815      	ldr	r0, [pc, #84]	; (80038f4 <TFT_English+0x220>)
 80038a0:	0109      	lsls	r1, r1, #4
 80038a2:	4401      	add	r1, r0
 80038a4:	440b      	add	r3, r1
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			dot4 = E_font[code][x-1] + E_font[code][x+7]*256;
 80038b4:	1cfb      	adds	r3, r7, #3
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80038bc:	3b01      	subs	r3, #1
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <TFT_English+0x220>)
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	440a      	add	r2, r1
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	1cfb      	adds	r3, r7, #3
 80038cc:	7819      	ldrb	r1, [r3, #0]
 80038ce:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80038d2:	3307      	adds	r3, #7
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <TFT_English+0x220>)
 80038d6:	0109      	lsls	r1, r1, #4
 80038d8:	4401      	add	r1, r0
 80038da:	440b      	add	r3, r1
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for(y = 0; y < 15; y++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80038f0:	e07d      	b.n	80039ee <TFT_English+0x31a>
 80038f2:	bf00      	nop
 80038f4:	080065c8 	.word	0x080065c8
			{
				if(!(dot0 & 0x0001))
 80038f8:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <TFT_English+0x2e0>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8003904:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <TFT_English+0x258>
 8003910:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8003914:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 800391e:	f107 030c 	add.w	r3, r7, #12
 8003922:	0109      	lsls	r1, r1, #4
 8003924:	440a      	add	r2, r1
 8003926:	4601      	mov	r1, r0
 8003928:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 800392c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <TFT_English+0x280>
 8003938:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800393c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	0109      	lsls	r1, r1, #4
 800394c:	440a      	add	r2, r1
 800394e:	4601      	mov	r1, r0
 8003950:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot3 & 0x0001) && (x < 7))		pixel[x][y] = pTFTHandle->outline;
 8003954:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d011      	beq.n	8003984 <TFT_English+0x2b0>
 8003960:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003964:	2b06      	cmp	r3, #6
 8003966:	d80d      	bhi.n	8003984 <TFT_English+0x2b0>
 8003968:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800396c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	0109      	lsls	r1, r1, #4
 800397c:	440a      	add	r2, r1
 800397e:	4601      	mov	r1, r0
 8003980:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 8003984:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d011      	beq.n	80039b4 <TFT_English+0x2e0>
 8003990:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <TFT_English+0x2e0>
 8003998:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800399c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80039a6:	f107 030c 	add.w	r3, r7, #12
 80039aa:	0109      	lsls	r1, r1, #4
 80039ac:	440a      	add	r2, r1
 80039ae:	4601      	mov	r1, r0
 80039b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}

				dot1 >>= 1;
 80039b4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				dot2 = dot0;
 80039be:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80039c2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				dot0 >>= 1;
 80039c6:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
				dot3 >>= 1;
 80039d0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				dot4 >>= 1;
 80039da:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			for(y = 0; y < 15; y++)
 80039e4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80039e8:	3301      	adds	r3, #1
 80039ea:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80039ee:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80039f2:	2b0e      	cmp	r3, #14
 80039f4:	d980      	bls.n	80038f8 <TFT_English+0x224>
		for(x = 0; x < 8; x++)
 80039f6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80039fa:	3301      	adds	r3, #1
 80039fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003a00:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	f67f af17 	bls.w	8003838 <TFT_English+0x164>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit)
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d31f      	bcc.n	8003a5e <TFT_English+0x38a>
	{
		pTFTHandle->Xcharacter = 0;
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		pTFTHandle->Ycharacter += 2;
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a30:	3302      	adds	r3, #2
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit - 1))		pTFTHandle->Ycharacter = 0;
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a44:	461a      	mov	r2, r3
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	db04      	blt.n	8003a5e <TFT_English+0x38a>
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if(pTFTHandle->underscore_flag == 1)
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d118      	bne.n	8003a9c <TFT_English+0x3c8>
	{
		for(x = 0; x < 8; x++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003a70:	e010      	b.n	8003a94 <TFT_English+0x3c0>
		{
			pixel[x][15] = pTFTHandle->underscore;
 8003a72:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 8003a7c:	f107 020c 	add.w	r2, r7, #12
 8003a80:	015b      	lsls	r3, r3, #5
 8003a82:	4413      	add	r3, r2
 8003a84:	331e      	adds	r3, #30
 8003a86:	460a      	mov	r2, r1
 8003a88:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8003a8a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003a94:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003a98:	2b07      	cmp	r3, #7
 8003a9a:	d9ea      	bls.n	8003a72 <TFT_English+0x39e>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d138      	bne.n	8003b1a <TFT_English+0x446>
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d12e      	bne.n	8003b1a <TFT_English+0x446>
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d124      	bne.n	8003b1a <TFT_English+0x446>
	{
		for(x = 0; x < 8; x++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003ad6:	e01c      	b.n	8003b12 <TFT_English+0x43e>
		{
			pixel[x][14] = pTFTHandle->cursor;
 8003ad8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003adc:	1d3a      	adds	r2, r7, #4
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003ae2:	f107 020c 	add.w	r2, r7, #12
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	4413      	add	r3, r2
 8003aea:	331c      	adds	r3, #28
 8003aec:	460a      	mov	r2, r1
 8003aee:	801a      	strh	r2, [r3, #0]
			pixel[x][15] = pTFTHandle->cursor;
 8003af0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003af4:	1d3a      	adds	r2, r7, #4
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8003afa:	f107 020c 	add.w	r2, r7, #12
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	4413      	add	r3, r2
 8003b02:	331e      	adds	r3, #30
 8003b04:	460a      	mov	r2, r1
 8003b06:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8003b08:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003b12:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	d9de      	bls.n	8003ad8 <TFT_English+0x404>
		}
	}

	if(pTFTHandle->background != Transparent)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003b20:	f640 0221 	movw	r2, #2081	; 0x821
 8003b24:	4293      	cmp	r3, r2
 8003b26:	f000 80cd 	beq.w	8003cc4 <TFT_English+0x5f0>
	{
		xPos = pTFTHandle->Xcharacter * 8;
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

		for(y = 0; y < 16; y++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003b40:	e0ba      	b.n	8003cb8 <TFT_English+0x5e4>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			if(pTFTHandle->ScreenMode == 'L')
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b64:	2b4c      	cmp	r3, #76	; 0x4c
 8003b66:	d11f      	bne.n	8003ba8 <TFT_English+0x4d4>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8003b68:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2102      	movs	r1, #2
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f7ff fc89 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8003b7a:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	2103      	movs	r1, #3
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	f7ff fc80 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2106      	movs	r1, #6
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	f7ff fc7a 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 8003b98:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2107      	movs	r1, #7
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f7ff fc73 	bl	800348c <TFT_Write>
 8003ba6:	e01e      	b.n	8003be6 <TFT_English+0x512>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	2200      	movs	r2, #0
 8003bac:	2102      	movs	r1, #2
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	f7ff fc6c 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 8003bb4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	2103      	movs	r1, #3
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	f7ff fc65 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8003bc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2106      	movs	r1, #6
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	f7ff fc5c 	bl	800348c <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8003bd4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	2107      	movs	r1, #7
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	f7ff fc53 	bl	800348c <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	2122      	movs	r1, #34	; 0x22
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	f7ff fbd9 	bl	80033a2 <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 8003bf0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	4611      	mov	r1, r2
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f7ff fc0a 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 8003c06:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	3210      	adds	r2, #16
 8003c10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	4611      	mov	r1, r2
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f7ff fbfe 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 8003c1e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	3220      	adds	r2, #32
 8003c28:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	4611      	mov	r1, r2
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	f7ff fbf2 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 8003c36:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	3230      	adds	r2, #48	; 0x30
 8003c40:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	4611      	mov	r1, r2
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f7ff fbe6 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 8003c4e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	3240      	adds	r2, #64	; 0x40
 8003c58:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	4611      	mov	r1, r2
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f7ff fbda 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 8003c66:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	3250      	adds	r2, #80	; 0x50
 8003c70:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	4611      	mov	r1, r2
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f7ff fbce 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 8003c7e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	3260      	adds	r2, #96	; 0x60
 8003c88:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	4611      	mov	r1, r2
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f7ff fbc2 	bl	800341a <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 8003c96:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	3270      	adds	r2, #112	; 0x70
 8003ca0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f7ff fbb6 	bl	800341a <TFT_Data>
		for(y = 0; y < 16; y++)
 8003cae:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003cb8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	f67f af40 	bls.w	8003b42 <TFT_English+0x46e>
 8003cc2:	e041      	b.n	8003d48 <TFT_English+0x674>
		}
	}
	else
	{
		for(y = 0; y < 16; y++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003cca:	e039      	b.n	8003d40 <TFT_English+0x66c>
		{
			for(x = 0; x < 8; x++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003cd2:	e02c      	b.n	8003d2e <TFT_English+0x65a>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 8 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	b29c      	uxth	r4, r3
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	b29d      	uxth	r5, r3
 8003d04:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8003d08:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	0109      	lsls	r1, r1, #4
 8003d12:	440a      	add	r2, r1
 8003d14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d18:	1d38      	adds	r0, r7, #4
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	6800      	ldr	r0, [r0, #0]
 8003d20:	f7ff fc6f 	bl	8003602 <TFT_Pixel>
			for(x = 0; x < 8; x++)
 8003d24:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003d2e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003d32:	2b07      	cmp	r3, #7
 8003d34:	d9ce      	bls.n	8003cd4 <TFT_English+0x600>
		for(y = 0; y < 16; y++)
 8003d36:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8003d40:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d9c1      	bls.n	8003ccc <TFT_English+0x5f8>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003d5c:	bf00      	nop
 8003d5e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bdb0      	pop	{r4, r5, r7, pc}
 8003d66:	bf00      	nop

08003d68 <TFT_Unsigned_decimal>:
	}
}


void TFT_Unsigned_decimal(TFT_HandleTypeDef *pTFTHandle, uint32_t number, uint8_t zerofill, uint8_t digit)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	460b      	mov	r3, r1
 8003d78:	71fb      	strb	r3, [r7, #7]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, character;
	uint32_t div;

	if((digit == 0) || (digit > 9))		return ;
 8003d7e:	79bb      	ldrb	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d046      	beq.n	8003e12 <TFT_Unsigned_decimal+0xaa>
 8003d84:	79bb      	ldrb	r3, [r7, #6]
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	d843      	bhi.n	8003e12 <TFT_Unsigned_decimal+0xaa>

	div = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
	while(--digit)		div *= 10;
 8003d8e:	e005      	b.n	8003d9c <TFT_Unsigned_decimal+0x34>
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	79bb      	ldrb	r3, [r7, #6]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	71bb      	strb	r3, [r7, #6]
 8003da2:	79bb      	ldrb	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f3      	bne.n	8003d90 <TFT_Unsigned_decimal+0x28>

	zero_flag = zerofill;
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	77fb      	strb	r3, [r7, #31]

	while(div > 0)
 8003dac:	e02d      	b.n	8003e0a <TFT_Unsigned_decimal+0xa2>
	{
		character = number / div;
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	75fb      	strb	r3, [r7, #23]

		if((character == 0) && (zero_flag == 0) && (div != 1))
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <TFT_Unsigned_decimal+0x72>
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <TFT_Unsigned_decimal+0x72>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d007      	beq.n	8003dda <TFT_Unsigned_decimal+0x72>
		{
			TFT_English(pTFTHandle, character + '0');
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	3330      	adds	r3, #48	; 0x30
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fc7e 	bl	80036d4 <TFT_English>
 8003dd8:	e008      	b.n	8003dec <TFT_Unsigned_decimal+0x84>
		}
		else
		{
			zero_flag = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character+ '0');
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff fc74 	bl	80036d4 <TFT_English>
		}

		number %= div;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	fb01 f202 	mul.w	r2, r1, r2
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	60bb      	str	r3, [r7, #8]
		div /= 10;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <TFT_Unsigned_decimal+0xb4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	61bb      	str	r3, [r7, #24]
	while(div > 0)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ce      	bne.n	8003dae <TFT_Unsigned_decimal+0x46>
 8003e10:	e000      	b.n	8003e14 <TFT_Unsigned_decimal+0xac>
	if((digit == 0) || (digit > 9))		return ;
 8003e12:	bf00      	nop
	}
}
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	cccccccd 	.word	0xcccccccd

08003e20 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff f835 	bl	8002e98 <TS_MspInit>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <TS_Read_ADS7846>:


uint16_t TS_Read_ADS7846(uint16_t command)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80fb      	strh	r3, [r7, #6]
	uint16_t axis;

	axis = SPI2->DR;
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4817      	ldr	r0, [pc, #92]	; (8003eac <TS_Read_ADS7846+0x74>)
 8003e4e:	f7fd fccb 	bl	80017e8 <GPIO_WritePin>
	SPI2->DR = command;
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	60d3      	str	r3, [r2, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 8003e58:	bf00      	nop
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d1f9      	bne.n	8003e5a <TS_Read_ADS7846+0x22>
	axis = SPI2->DR;
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	81fb      	strh	r3, [r7, #14]
	Delay_us(1);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7fe fecf 	bl	8002c10 <Delay_us>
	SPI2->DR = 0x0000;
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	60da      	str	r2, [r3, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 8003e78:	bf00      	nop
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d1f9      	bne.n	8003e7a <TS_Read_ADS7846+0x42>
	axis = SPI2->DR;
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <TS_Read_ADS7846+0x70>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	2108      	movs	r1, #8
 8003e90:	4806      	ldr	r0, [pc, #24]	; (8003eac <TS_Read_ADS7846+0x74>)
 8003e92:	f7fd fca9 	bl	80017e8 <GPIO_WritePin>

	axis >>= 3;
 8003e96:	89fb      	ldrh	r3, [r7, #14]
 8003e98:	08db      	lsrs	r3, r3, #3
 8003e9a:	81fb      	strh	r3, [r7, #14]

	return axis;
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40003800 	.word	0x40003800
 8003eac:	40010c00 	.word	0x40010c00

08003eb0 <TS_Input>:


void TS_Input(TS_HandleTypeDef *pTSHandle)
{
 8003eb0:	b5b0      	push	{r4, r5, r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint16_t temp;

	pTSHandle->x_12bit = 0;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit = 0;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

	for(i = 0; i < 16; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e040      	b.n	8003f4c <TS_Input+0x9c>
	{
		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8003eca:	2110      	movs	r1, #16
 8003ecc:	488c      	ldr	r0, [pc, #560]	; (8004100 <TS_Input+0x250>)
 8003ece:	f7fd fc75 	bl	80017bc <GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d117      	bne.n	8003f08 <TS_Input+0x58>
		{
			pTSHandle->x_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_X);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8c1b      	ldrh	r3, [r3, #32]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ffab 	bl	8003e38 <TS_Read_ADS7846>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	4413      	add	r3, r2
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->x_12bit = 0;
			pTSHandle->y_12bit = 0;
			break;
		}

		Delay_us(10);
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	f7fe fe8c 	bl	8002c10 <Delay_us>

		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8003ef8:	2110      	movs	r1, #16
 8003efa:	4881      	ldr	r0, [pc, #516]	; (8004100 <TS_Input+0x250>)
 8003efc:	f7fd fc5e 	bl	80017bc <GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d115      	bne.n	8003f32 <TS_Input+0x82>
 8003f06:	e006      	b.n	8003f16 <TS_Input+0x66>
			pTSHandle->x_12bit = 0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8003f14:	e01d      	b.n	8003f52 <TS_Input+0xa2>
		{
			pTSHandle->y_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_Y);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff8c 	bl	8003e38 <TS_Read_ADS7846>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	4413      	add	r3, r2
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f30:	e006      	b.n	8003f40 <TS_Input+0x90>
		}
		else
		{
			pTSHandle->x_12bit = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8003f3e:	e008      	b.n	8003f52 <TS_Input+0xa2>
		}

		Delay_us(10);
 8003f40:	200a      	movs	r0, #10
 8003f42:	f7fe fe65 	bl	8002c10 <Delay_us>
	for(i = 0; i < 16; i++)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b0f      	cmp	r3, #15
 8003f50:	d9bb      	bls.n	8003eca <TS_Input+0x1a>
	}

	pTSHandle->x_12bit >>= 4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit >>= 4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a

	if((pTSHandle->x_12bit == 0) && (pTSHandle->y_12bit == 0))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <TS_Input+0xd8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <TS_Input+0xd8>
	{
		pTSHandle->x_touch = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	85da      	strh	r2, [r3, #46]	; 0x2e
		return;
 8003f86:	e0b0      	b.n	80040ea <TS_Input+0x23a>
	}

	if(pTSHandle->x_12bit <= pTSHandle->Init.x_touch_min)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d803      	bhi.n	8003f9e <TS_Input+0xee>
	{
		pTSHandle->x_touch = 0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003f9c:	e03c      	b.n	8004018 <TS_Input+0x168>
	}
	else if(pTSHandle->x_12bit >= pTSHandle->Init.x_touch_max)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d303      	bcc.n	8003fb4 <TS_Input+0x104>
	{
		pTSHandle->x_touch = 239;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	22ef      	movs	r2, #239	; 0xef
 8003fb0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003fb2:	e031      	b.n	8004018 <TS_Input+0x168>
	}
	else
	{
		pTSHandle->x_touch = (uint32_t)((float)(pTSHandle->x_12bit - pTSHandle->Init.x_touch_min) * 239./(float)(pTSHandle->Init.x_touch_max - pTSHandle->Init.x_touch_min));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fe47 	bl	8000c54 <__aeabi_ui2f>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fa3d 	bl	8000448 <__aeabi_f2d>
 8003fce:	a348      	add	r3, pc, #288	; (adr r3, 80040f0 <TS_Input+0x240>)
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f7fc fa90 	bl	80004f8 <__aeabi_dmul>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	4625      	mov	r5, r4
 8003fde:	461c      	mov	r4, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fe32 	bl	8000c54 <__aeabi_ui2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc fa28 	bl	8000448 <__aeabi_f2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	4629      	mov	r1, r5
 8004000:	f7fc fba4 	bl	800074c <__aeabi_ddiv>
 8004004:	4603      	mov	r3, r0
 8004006:	460c      	mov	r4, r1
 8004008:	4618      	mov	r0, r3
 800400a:	4621      	mov	r1, r4
 800400c:	f7fc fd4c 	bl	8000aa8 <__aeabi_d2uiz>
 8004010:	4603      	mov	r3, r0
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	859a      	strh	r2, [r3, #44]	; 0x2c
	}

	if(pTSHandle->y_12bit <= pTSHandle->Init.y_touch_min)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	d804      	bhi.n	8004030 <TS_Input+0x180>
	{
		pTSHandle->y_touch = 319;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f240 123f 	movw	r2, #319	; 0x13f
 800402c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800402e:	e040      	b.n	80040b2 <TS_Input+0x202>
	}
	else if(pTSHandle->y_12bit >= pTSHandle->Init.y_touch_max)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	d303      	bcc.n	8004046 <TS_Input+0x196>
	{
		pTSHandle->y_touch = 0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004044:	e035      	b.n	80040b2 <TS_Input+0x202>
	}
	else
	{
		pTSHandle->y_touch = 319 - (uint32_t)((float)(pTSHandle->y_12bit - pTSHandle->Init.y_touch_min) * 319./(float)(pTSHandle->Init.y_touch_max - pTSHandle->Init.y_touch_min));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fdfe 	bl	8000c54 <__aeabi_ui2f>
 8004058:	4603      	mov	r3, r0
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc f9f4 	bl	8000448 <__aeabi_f2d>
 8004060:	a325      	add	r3, pc, #148	; (adr r3, 80040f8 <TS_Input+0x248>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc fa47 	bl	80004f8 <__aeabi_dmul>
 800406a:	4603      	mov	r3, r0
 800406c:	460c      	mov	r4, r1
 800406e:	4625      	mov	r5, r4
 8004070:	461c      	mov	r4, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fde9 	bl	8000c54 <__aeabi_ui2f>
 8004082:	4603      	mov	r3, r0
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc f9df 	bl	8000448 <__aeabi_f2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f7fc fb5b 	bl	800074c <__aeabi_ddiv>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	4618      	mov	r0, r3
 800409c:	4621      	mov	r1, r4
 800409e:	f7fc fd03 	bl	8000aa8 <__aeabi_d2uiz>
 80040a2:	4603      	mov	r3, r0
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80040aa:	3301      	adds	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if(TFT1Handle.ScreenMode == 'L')
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <TS_Input+0x254>)
 80040b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b8:	2b4c      	cmp	r3, #76	; 0x4c
 80040ba:	d116      	bne.n	80040ea <TS_Input+0x23a>
	{
		temp = pTSHandle->x_12bit;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_12bit = pTSHandle->y_12bit;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
		pTSHandle->y_12bit = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	89ba      	ldrh	r2, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
		temp = pTSHandle->x_touch;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d4:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_touch = pTSHandle->y_touch;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 239 - temp;
 80040de:	89bb      	ldrh	r3, [r7, #12]
 80040e0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	}
}
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdb0      	pop	{r4, r5, r7, pc}
 80040f0:	00000000 	.word	0x00000000
 80040f4:	406de000 	.word	0x406de000
 80040f8:	00000000 	.word	0x00000000
 80040fc:	4073f000 	.word	0x4073f000
 8004100:	40010c00 	.word	0x40010c00
 8004104:	20000378 	.word	0x20000378

08004108 <TFT1_Init>:
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL7, NVIC_PRIOR_15, ENABLE);
}


void TFT1_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	TFT1Handle.Instance = TFT1;
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <TFT1_Init+0x4c>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
	TFT1Handle.ScreenMode = 'L';
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <TFT1_Init+0x4c>)
 8004114:	224c      	movs	r2, #76	; 0x4c
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TFT1Handle.XcharacterLimit = 40;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <TFT1_Init+0x4c>)
 800411c:	2228      	movs	r2, #40	; 0x28
 800411e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	TFT1Handle.YcharacterLimit = 30;
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <TFT1_Init+0x4c>)
 8004124:	221e      	movs	r2, #30
 8004126:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	TFT1Handle.cursor_flag = 0;
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <TFT1_Init+0x4c>)
 800412c:	2200      	movs	r2, #0
 800412e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	TFT1Handle.underscore_flag = 0;
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <TFT1_Init+0x4c>)
 8004134:	2200      	movs	r2, #0
 8004136:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	TFT1Handle.outline_flag = 0;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <TFT1_Init+0x4c>)
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	TFT1Handle.Kfont_type = 'M';
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <TFT1_Init+0x4c>)
 8004144:	224d      	movs	r2, #77	; 0x4d
 8004146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	TFT_Init(&TFT1Handle);
 800414a:	4802      	ldr	r0, [pc, #8]	; (8004154 <TFT1_Init+0x4c>)
 800414c:	f7fe ffaa 	bl	80030a4 <TFT_Init>
}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000378 	.word	0x20000378

08004158 <TS1_Init>:


void TS1_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <TS1_Init+0x58>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8004162:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <TS1_Init+0x58>)
 8004164:	2200      	movs	r2, #0
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <TS1_Init+0x58>)
 800416a:	2200      	movs	r2, #0
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <TS1_Init+0x58>)
 8004170:	2200      	movs	r2, #0
 8004172:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <TS1_Init+0x58>)
 8004176:	2200      	movs	r2, #0
 8004178:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <TS1_Init+0x58>)
 800417c:	22fa      	movs	r2, #250	; 0xfa
 800417e:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <TS1_Init+0x58>)
 8004182:	f640 6274 	movw	r2, #3700	; 0xe74
 8004186:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <TS1_Init+0x58>)
 800418a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800418e:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <TS1_Init+0x58>)
 8004192:	f640 62a6 	movw	r2, #3750	; 0xea6
 8004196:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <TS1_Init+0x58>)
 800419a:	22d0      	movs	r2, #208	; 0xd0
 800419c:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <TS1_Init+0x58>)
 80041a0:	2290      	movs	r2, #144	; 0x90
 80041a2:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <TS1_Init+0x58>)
 80041a6:	f7ff fe3b 	bl	8003e20 <TS_Init>
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000250 	.word	0x20000250
 80041b4:	00000000 	.word	0x00000000

080041b8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(ButtonFlag == FLAG_RESET)
 80041c0:	4b81      	ldr	r3, [pc, #516]	; (80043c8 <TIM_PeriodElapsedCallback+0x210>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_7);
 80041c8:	4b80      	ldr	r3, [pc, #512]	; (80043cc <TIM_PeriodElapsedCallback+0x214>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041d2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <TIM_PeriodElapsedCallback+0x28>
		{
			ButtonFlag = FLAG_SET;
 80041da:	4b7b      	ldr	r3, [pc, #492]	; (80043c8 <TIM_PeriodElapsedCallback+0x210>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7a      	ldr	r2, [pc, #488]	; (80043d0 <TIM_PeriodElapsedCallback+0x218>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	f040 80e0 	bne.w	80043ac <TIM_PeriodElapsedCallback+0x1f4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 80041ec:	4b79      	ldr	r3, [pc, #484]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 80041ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 8097 	bne.w	8004326 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 80041f8:	4b77      	ldr	r3, [pc, #476]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b63      	cmp	r3, #99	; 0x63
 80041fe:	f340 80a0 	ble.w	8004342 <TIM_PeriodElapsedCallback+0x18a>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8004202:	a36d      	add	r3, pc, #436	; (adr r3, 80043b8 <TIM_PeriodElapsedCallback+0x200>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	4872      	ldr	r0, [pc, #456]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 800420a:	f7fd fde7 	bl	8001ddc <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 800420e:	a36a      	add	r3, pc, #424	; (adr r3, 80043b8 <TIM_PeriodElapsedCallback+0x200>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	486f      	ldr	r0, [pc, #444]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 8004216:	f7fe f8cf 	bl	80023b8 <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART2 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 800421c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8004220:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004224:	4618      	mov	r0, r3
 8004226:	4621      	mov	r1, r4
 8004228:	f7fc fc16 	bl	8000a58 <__aeabi_d2iz>
 800422c:	4603      	mov	r3, r0
 800422e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8004230:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	bfb8      	it	lt
 8004238:	425b      	neglt	r3, r3
 800423a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 800423c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db02      	blt.n	800424a <TIM_PeriodElapsedCallback+0x92>
 8004244:	232b      	movs	r3, #43	; 0x2b
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e005      	b.n	8004256 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 800424a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	da01      	bge.n	8004256 <TIM_PeriodElapsedCallback+0x9e>
 8004252:	232d      	movs	r3, #45	; 0x2d
 8004254:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8004256:	4a61      	ldr	r2, [pc, #388]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 800425c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004260:	4a5f      	ldr	r2, [pc, #380]	; (80043e0 <TIM_PeriodElapsedCallback+0x228>)
 8004262:	fb82 1203 	smull	r1, r2, r2, r3
 8004266:	1192      	asrs	r2, r2, #6
 8004268:	17db      	asrs	r3, r3, #31
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b21b      	sxth	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3330      	adds	r3, #48	; 0x30
 8004272:	b2da      	uxtb	r2, r3
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 8004276:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8004278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800427c:	4a58      	ldr	r2, [pc, #352]	; (80043e0 <TIM_PeriodElapsedCallback+0x228>)
 800427e:	fb82 1203 	smull	r1, r2, r2, r3
 8004282:	1191      	asrs	r1, r2, #6
 8004284:	17da      	asrs	r2, r3, #31
 8004286:	1a8a      	subs	r2, r1, r2
 8004288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800428c:	fb01 f202 	mul.w	r2, r1, r2
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	b21b      	sxth	r3, r3
 8004294:	4a53      	ldr	r2, [pc, #332]	; (80043e4 <TIM_PeriodElapsedCallback+0x22c>)
 8004296:	fb82 1203 	smull	r1, r2, r2, r3
 800429a:	1152      	asrs	r2, r2, #5
 800429c:	17db      	asrs	r3, r3, #31
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	b21b      	sxth	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3330      	adds	r3, #48	; 0x30
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 80042aa:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 80042ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	; (80043e4 <TIM_PeriodElapsedCallback+0x22c>)
 80042b2:	fb82 1203 	smull	r1, r2, r2, r3
 80042b6:	1151      	asrs	r1, r2, #5
 80042b8:	17da      	asrs	r2, r3, #31
 80042ba:	1a8a      	subs	r2, r1, r2
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f202 	mul.w	r2, r1, r2
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	4a48      	ldr	r2, [pc, #288]	; (80043e8 <TIM_PeriodElapsedCallback+0x230>)
 80042c8:	fb82 1203 	smull	r1, r2, r2, r3
 80042cc:	1092      	asrs	r2, r2, #2
 80042ce:	17db      	asrs	r3, r3, #31
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	3330      	adds	r3, #48	; 0x30
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 80042dc:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 80042de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <TIM_PeriodElapsedCallback+0x230>)
 80042e4:	fb83 1302 	smull	r1, r3, r3, r2
 80042e8:	1099      	asrs	r1, r3, #2
 80042ea:	17d3      	asrs	r3, r2, #31
 80042ec:	1ac9      	subs	r1, r1, r3
 80042ee:	460b      	mov	r3, r1
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3330      	adds	r3, #48	; 0x30
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 8004302:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 8004306:	220a      	movs	r2, #10
 8004308:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART2Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 800430a:	4834      	ldr	r0, [pc, #208]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 800430c:	f7fb ff30 	bl	8000170 <strlen>
 8004310:	4603      	mov	r3, r0
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4931      	ldr	r1, [pc, #196]	; (80043dc <TIM_PeriodElapsedCallback+0x224>)
 8004318:	4834      	ldr	r0, [pc, #208]	; (80043ec <TIM_PeriodElapsedCallback+0x234>)
 800431a:	f7fd fc39 	bl	8001b90 <UART_Transmit_DMA>

				count = 0;
 800431e:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e00d      	b.n	8004342 <TIM_PeriodElapsedCallback+0x18a>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 8004328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800432c:	2b02      	cmp	r3, #2
 800432e:	d108      	bne.n	8004342 <TIM_PeriodElapsedCallback+0x18a>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8004330:	a323      	add	r3, pc, #140	; (adr r3, 80043c0 <TIM_PeriodElapsedCallback+0x208>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	4827      	ldr	r0, [pc, #156]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 8004338:	f7fe f894 	bl	8002464 <BLDC_PositionPID>

			startFlag = FLAG_SET;
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <TIM_PeriodElapsedCallback+0x238>)
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
		}



		/* Transmit Motor Position value to PC through UART2 */
		if(count >= 2)		// Every 2ms
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	dd2b      	ble.n	80043a2 <TIM_PeriodElapsedCallback+0x1ea>
		{
			if(BLDC1Handle.RotationDir == CW)			sign = '+';
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <TIM_PeriodElapsedCallback+0x1a2>
 8004354:	232b      	movs	r3, #43	; 0x2b
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e006      	b.n	8004368 <TIM_PeriodElapsedCallback+0x1b0>
			else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 800435c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <TIM_PeriodElapsedCallback+0x1b0>
 8004364:	232d      	movs	r3, #45	; 0x2d
 8004366:	73fb      	strb	r3, [r7, #15]

			//sprintf(Msg1, "%.2lf, %.2lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
			sprintf(Msg1, "%.2lf,%.2lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition);	// To see the case of TrjCurPosition
 8004368:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 800436a:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 800436e:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <TIM_PeriodElapsedCallback+0x21c>)
 8004370:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8004374:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004378:	e9cd 3400 	strd	r3, r4, [sp]
 800437c:	4613      	mov	r3, r2
 800437e:	460a      	mov	r2, r1
 8004380:	491c      	ldr	r1, [pc, #112]	; (80043f4 <TIM_PeriodElapsedCallback+0x23c>)
 8004382:	481d      	ldr	r0, [pc, #116]	; (80043f8 <TIM_PeriodElapsedCallback+0x240>)
 8004384:	f000 fd1e 	bl	8004dc4 <siprintf>

			UART_Transmit_DMA(&UART2Handle, (uint8_t*)Msg1, strlen((char*)Msg1));
 8004388:	481b      	ldr	r0, [pc, #108]	; (80043f8 <TIM_PeriodElapsedCallback+0x240>)
 800438a:	f7fb fef1 	bl	8000170 <strlen>
 800438e:	4603      	mov	r3, r0
 8004390:	b29b      	uxth	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	4918      	ldr	r1, [pc, #96]	; (80043f8 <TIM_PeriodElapsedCallback+0x240>)
 8004396:	4815      	ldr	r0, [pc, #84]	; (80043ec <TIM_PeriodElapsedCallback+0x234>)
 8004398:	f7fd fbfa 	bl	8001b90 <UART_Transmit_DMA>

			count = 0;
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
		}

		count++;
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <TIM_PeriodElapsedCallback+0x220>)
 80043aa:	6013      	str	r3, [r2, #0]
	}
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd90      	pop	{r4, r7, pc}
 80043b4:	f3af 8000 	nop.w
 80043b8:	9999999a 	.word	0x9999999a
 80043bc:	3fb99999 	.word	0x3fb99999
 80043c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80043c4:	3f50624d 	.word	0x3f50624d
 80043c8:	20000204 	.word	0x20000204
 80043cc:	40010800 	.word	0x40010800
 80043d0:	40001000 	.word	0x40001000
 80043d4:	20000280 	.word	0x20000280
 80043d8:	20000244 	.word	0x20000244
 80043dc:	20000208 	.word	0x20000208
 80043e0:	10624dd3 	.word	0x10624dd3
 80043e4:	51eb851f 	.word	0x51eb851f
 80043e8:	66666667 	.word	0x66666667
 80043ec:	200003d4 	.word	0x200003d4
 80043f0:	20000242 	.word	0x20000242
 80043f4:	080065b8 	.word	0x080065b8
 80043f8:	20000210 	.word	0x20000210

080043fc <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 6U;
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <EXTI_Callback+0x30>)
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <EXTI_Callback+0x34>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	b29a      	uxth	r2, r3
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <EXTI_Callback+0x34>)
 8004414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 8004418:	4805      	ldr	r0, [pc, #20]	; (8004430 <EXTI_Callback+0x34>)
 800441a:	f7fd fd2d 	bl	8001e78 <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 800441e:	4804      	ldr	r0, [pc, #16]	; (8004430 <EXTI_Callback+0x34>)
 8004420:	f7fd fc44 	bl	8001cac <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40011000 	.word	0x40011000
 8004430:	20000280 	.word	0x20000280

08004434 <SetPwmDuty>:
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800446e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004470:	480d      	ldr	r0, [pc, #52]	; (80044a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004472:	490e      	ldr	r1, [pc, #56]	; (80044ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004474:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <LoopForever+0xe>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004478:	e002      	b.n	8004480 <LoopCopyDataInit>

0800447a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800447a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800447c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800447e:	3304      	adds	r3, #4

08004480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004484:	d3f9      	bcc.n	800447a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004486:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004488:	4c0b      	ldr	r4, [pc, #44]	; (80044b8 <LoopForever+0x16>)
  movs r3, #0
 800448a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800448c:	e001      	b.n	8004492 <LoopFillZerobss>

0800448e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800448e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004490:	3204      	adds	r2, #4

08004492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004494:	d3fb      	bcc.n	800448e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004496:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800449a:	f000 f817 	bl	80044cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800449e:	f7fe fc0b 	bl	8002cb8 <main>

080044a2 <LoopForever>:

LoopForever:
    b LoopForever
 80044a2:	e7fe      	b.n	80044a2 <LoopForever>
  ldr   r0, =_estack
 80044a4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80044a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044ac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80044b0:	08007030 	.word	0x08007030
  ldr r2, =_sbss
 80044b4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80044b8:	200004cc 	.word	0x200004cc

080044bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044bc:	e7fe      	b.n	80044bc <ADC1_2_IRQHandler>
	...

080044c0 <__errno>:
 80044c0:	4b01      	ldr	r3, [pc, #4]	; (80044c8 <__errno+0x8>)
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000008 	.word	0x20000008

080044cc <__libc_init_array>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	2500      	movs	r5, #0
 80044d0:	4e0c      	ldr	r6, [pc, #48]	; (8004504 <__libc_init_array+0x38>)
 80044d2:	4c0d      	ldr	r4, [pc, #52]	; (8004508 <__libc_init_array+0x3c>)
 80044d4:	1ba4      	subs	r4, r4, r6
 80044d6:	10a4      	asrs	r4, r4, #2
 80044d8:	42a5      	cmp	r5, r4
 80044da:	d109      	bne.n	80044f0 <__libc_init_array+0x24>
 80044dc:	f002 f85e 	bl	800659c <_init>
 80044e0:	2500      	movs	r5, #0
 80044e2:	4e0a      	ldr	r6, [pc, #40]	; (800450c <__libc_init_array+0x40>)
 80044e4:	4c0a      	ldr	r4, [pc, #40]	; (8004510 <__libc_init_array+0x44>)
 80044e6:	1ba4      	subs	r4, r4, r6
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	42a5      	cmp	r5, r4
 80044ec:	d105      	bne.n	80044fa <__libc_init_array+0x2e>
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f4:	4798      	blx	r3
 80044f6:	3501      	adds	r5, #1
 80044f8:	e7ee      	b.n	80044d8 <__libc_init_array+0xc>
 80044fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fe:	4798      	blx	r3
 8004500:	3501      	adds	r5, #1
 8004502:	e7f2      	b.n	80044ea <__libc_init_array+0x1e>
 8004504:	08007028 	.word	0x08007028
 8004508:	08007028 	.word	0x08007028
 800450c:	08007028 	.word	0x08007028
 8004510:	0800702c 	.word	0x0800702c

08004514 <memset>:
 8004514:	4603      	mov	r3, r0
 8004516:	4402      	add	r2, r0
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	f803 1b01 	strb.w	r1, [r3], #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <__cvt>:
 8004524:	2b00      	cmp	r3, #0
 8004526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452a:	461e      	mov	r6, r3
 800452c:	bfbb      	ittet	lt
 800452e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004532:	461e      	movlt	r6, r3
 8004534:	2300      	movge	r3, #0
 8004536:	232d      	movlt	r3, #45	; 0x2d
 8004538:	b088      	sub	sp, #32
 800453a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800453c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004540:	f027 0720 	bic.w	r7, r7, #32
 8004544:	2f46      	cmp	r7, #70	; 0x46
 8004546:	4614      	mov	r4, r2
 8004548:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800454a:	700b      	strb	r3, [r1, #0]
 800454c:	d004      	beq.n	8004558 <__cvt+0x34>
 800454e:	2f45      	cmp	r7, #69	; 0x45
 8004550:	d100      	bne.n	8004554 <__cvt+0x30>
 8004552:	3501      	adds	r5, #1
 8004554:	2302      	movs	r3, #2
 8004556:	e000      	b.n	800455a <__cvt+0x36>
 8004558:	2303      	movs	r3, #3
 800455a:	aa07      	add	r2, sp, #28
 800455c:	9204      	str	r2, [sp, #16]
 800455e:	aa06      	add	r2, sp, #24
 8004560:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004564:	e9cd 3500 	strd	r3, r5, [sp]
 8004568:	4622      	mov	r2, r4
 800456a:	4633      	mov	r3, r6
 800456c:	f000 fcd8 	bl	8004f20 <_dtoa_r>
 8004570:	2f47      	cmp	r7, #71	; 0x47
 8004572:	4680      	mov	r8, r0
 8004574:	d102      	bne.n	800457c <__cvt+0x58>
 8004576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004578:	07db      	lsls	r3, r3, #31
 800457a:	d526      	bpl.n	80045ca <__cvt+0xa6>
 800457c:	2f46      	cmp	r7, #70	; 0x46
 800457e:	eb08 0905 	add.w	r9, r8, r5
 8004582:	d111      	bne.n	80045a8 <__cvt+0x84>
 8004584:	f898 3000 	ldrb.w	r3, [r8]
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d10a      	bne.n	80045a2 <__cvt+0x7e>
 800458c:	2200      	movs	r2, #0
 800458e:	2300      	movs	r3, #0
 8004590:	4620      	mov	r0, r4
 8004592:	4631      	mov	r1, r6
 8004594:	f7fc fa18 	bl	80009c8 <__aeabi_dcmpeq>
 8004598:	b918      	cbnz	r0, 80045a2 <__cvt+0x7e>
 800459a:	f1c5 0501 	rsb	r5, r5, #1
 800459e:	f8ca 5000 	str.w	r5, [sl]
 80045a2:	f8da 3000 	ldr.w	r3, [sl]
 80045a6:	4499      	add	r9, r3
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	4620      	mov	r0, r4
 80045ae:	4631      	mov	r1, r6
 80045b0:	f7fc fa0a 	bl	80009c8 <__aeabi_dcmpeq>
 80045b4:	b938      	cbnz	r0, 80045c6 <__cvt+0xa2>
 80045b6:	2230      	movs	r2, #48	; 0x30
 80045b8:	9b07      	ldr	r3, [sp, #28]
 80045ba:	454b      	cmp	r3, r9
 80045bc:	d205      	bcs.n	80045ca <__cvt+0xa6>
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	9107      	str	r1, [sp, #28]
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	e7f8      	b.n	80045b8 <__cvt+0x94>
 80045c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80045ca:	4640      	mov	r0, r8
 80045cc:	9b07      	ldr	r3, [sp, #28]
 80045ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045d0:	eba3 0308 	sub.w	r3, r3, r8
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	b008      	add	sp, #32
 80045d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080045dc <__exponent>:
 80045dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045de:	2900      	cmp	r1, #0
 80045e0:	bfb4      	ite	lt
 80045e2:	232d      	movlt	r3, #45	; 0x2d
 80045e4:	232b      	movge	r3, #43	; 0x2b
 80045e6:	4604      	mov	r4, r0
 80045e8:	bfb8      	it	lt
 80045ea:	4249      	neglt	r1, r1
 80045ec:	2909      	cmp	r1, #9
 80045ee:	f804 2b02 	strb.w	r2, [r4], #2
 80045f2:	7043      	strb	r3, [r0, #1]
 80045f4:	dd21      	ble.n	800463a <__exponent+0x5e>
 80045f6:	f10d 0307 	add.w	r3, sp, #7
 80045fa:	461f      	mov	r7, r3
 80045fc:	260a      	movs	r6, #10
 80045fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8004602:	fb06 1115 	mls	r1, r6, r5, r1
 8004606:	2d09      	cmp	r5, #9
 8004608:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800460c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004610:	f103 32ff 	add.w	r2, r3, #4294967295
 8004614:	4629      	mov	r1, r5
 8004616:	dc09      	bgt.n	800462c <__exponent+0x50>
 8004618:	3130      	adds	r1, #48	; 0x30
 800461a:	3b02      	subs	r3, #2
 800461c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004620:	42bb      	cmp	r3, r7
 8004622:	4622      	mov	r2, r4
 8004624:	d304      	bcc.n	8004630 <__exponent+0x54>
 8004626:	1a10      	subs	r0, r2, r0
 8004628:	b003      	add	sp, #12
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462c:	4613      	mov	r3, r2
 800462e:	e7e6      	b.n	80045fe <__exponent+0x22>
 8004630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004634:	f804 2b01 	strb.w	r2, [r4], #1
 8004638:	e7f2      	b.n	8004620 <__exponent+0x44>
 800463a:	2330      	movs	r3, #48	; 0x30
 800463c:	4419      	add	r1, r3
 800463e:	7083      	strb	r3, [r0, #2]
 8004640:	1d02      	adds	r2, r0, #4
 8004642:	70c1      	strb	r1, [r0, #3]
 8004644:	e7ef      	b.n	8004626 <__exponent+0x4a>
	...

08004648 <_printf_float>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	b091      	sub	sp, #68	; 0x44
 800464e:	460c      	mov	r4, r1
 8004650:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004652:	4693      	mov	fp, r2
 8004654:	461e      	mov	r6, r3
 8004656:	4605      	mov	r5, r0
 8004658:	f001 fa16 	bl	8005a88 <_localeconv_r>
 800465c:	6803      	ldr	r3, [r0, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	9309      	str	r3, [sp, #36]	; 0x24
 8004662:	f7fb fd85 	bl	8000170 <strlen>
 8004666:	2300      	movs	r3, #0
 8004668:	930e      	str	r3, [sp, #56]	; 0x38
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	900a      	str	r0, [sp, #40]	; 0x28
 800466e:	3307      	adds	r3, #7
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	f894 8018 	ldrb.w	r8, [r4, #24]
 800467c:	f8d4 a000 	ldr.w	sl, [r4]
 8004680:	603a      	str	r2, [r7, #0]
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800468a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800468e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004692:	930b      	str	r3, [sp, #44]	; 0x2c
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	4ba6      	ldr	r3, [pc, #664]	; (8004934 <_printf_float+0x2ec>)
 800469a:	4638      	mov	r0, r7
 800469c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800469e:	f7fc f9c5 	bl	8000a2c <__aeabi_dcmpun>
 80046a2:	bb68      	cbnz	r0, 8004700 <_printf_float+0xb8>
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295
 80046a8:	4ba2      	ldr	r3, [pc, #648]	; (8004934 <_printf_float+0x2ec>)
 80046aa:	4638      	mov	r0, r7
 80046ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ae:	f7fc f99f 	bl	80009f0 <__aeabi_dcmple>
 80046b2:	bb28      	cbnz	r0, 8004700 <_printf_float+0xb8>
 80046b4:	2200      	movs	r2, #0
 80046b6:	2300      	movs	r3, #0
 80046b8:	4638      	mov	r0, r7
 80046ba:	4649      	mov	r1, r9
 80046bc:	f7fc f98e 	bl	80009dc <__aeabi_dcmplt>
 80046c0:	b110      	cbz	r0, 80046c8 <_printf_float+0x80>
 80046c2:	232d      	movs	r3, #45	; 0x2d
 80046c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c8:	4f9b      	ldr	r7, [pc, #620]	; (8004938 <_printf_float+0x2f0>)
 80046ca:	4b9c      	ldr	r3, [pc, #624]	; (800493c <_printf_float+0x2f4>)
 80046cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046d0:	bf98      	it	ls
 80046d2:	461f      	movls	r7, r3
 80046d4:	2303      	movs	r3, #3
 80046d6:	f04f 0900 	mov.w	r9, #0
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	f02a 0304 	bic.w	r3, sl, #4
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	9600      	str	r6, [sp, #0]
 80046e4:	465b      	mov	r3, fp
 80046e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80046e8:	4621      	mov	r1, r4
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 f9e2 	bl	8004ab4 <_printf_common>
 80046f0:	3001      	adds	r0, #1
 80046f2:	f040 8090 	bne.w	8004816 <_printf_float+0x1ce>
 80046f6:	f04f 30ff 	mov.w	r0, #4294967295
 80046fa:	b011      	add	sp, #68	; 0x44
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004700:	463a      	mov	r2, r7
 8004702:	464b      	mov	r3, r9
 8004704:	4638      	mov	r0, r7
 8004706:	4649      	mov	r1, r9
 8004708:	f7fc f990 	bl	8000a2c <__aeabi_dcmpun>
 800470c:	b110      	cbz	r0, 8004714 <_printf_float+0xcc>
 800470e:	4f8c      	ldr	r7, [pc, #560]	; (8004940 <_printf_float+0x2f8>)
 8004710:	4b8c      	ldr	r3, [pc, #560]	; (8004944 <_printf_float+0x2fc>)
 8004712:	e7db      	b.n	80046cc <_printf_float+0x84>
 8004714:	6863      	ldr	r3, [r4, #4]
 8004716:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	a80d      	add	r0, sp, #52	; 0x34
 800471e:	a90e      	add	r1, sp, #56	; 0x38
 8004720:	d140      	bne.n	80047a4 <_printf_float+0x15c>
 8004722:	2306      	movs	r3, #6
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	f04f 0c00 	mov.w	ip, #0
 800472a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800472e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	463a      	mov	r2, r7
 800473e:	464b      	mov	r3, r9
 8004740:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004744:	4628      	mov	r0, r5
 8004746:	f7ff feed 	bl	8004524 <__cvt>
 800474a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800474e:	2b47      	cmp	r3, #71	; 0x47
 8004750:	4607      	mov	r7, r0
 8004752:	d109      	bne.n	8004768 <_printf_float+0x120>
 8004754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004756:	1cd8      	adds	r0, r3, #3
 8004758:	db02      	blt.n	8004760 <_printf_float+0x118>
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	4293      	cmp	r3, r2
 800475e:	dd47      	ble.n	80047f0 <_printf_float+0x1a8>
 8004760:	f1a8 0802 	sub.w	r8, r8, #2
 8004764:	fa5f f888 	uxtb.w	r8, r8
 8004768:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800476c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800476e:	d824      	bhi.n	80047ba <_printf_float+0x172>
 8004770:	3901      	subs	r1, #1
 8004772:	4642      	mov	r2, r8
 8004774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004778:	910d      	str	r1, [sp, #52]	; 0x34
 800477a:	f7ff ff2f 	bl	80045dc <__exponent>
 800477e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004780:	4681      	mov	r9, r0
 8004782:	1813      	adds	r3, r2, r0
 8004784:	2a01      	cmp	r2, #1
 8004786:	6123      	str	r3, [r4, #16]
 8004788:	dc02      	bgt.n	8004790 <_printf_float+0x148>
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	07d1      	lsls	r1, r2, #31
 800478e:	d501      	bpl.n	8004794 <_printf_float+0x14c>
 8004790:	3301      	adds	r3, #1
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0a2      	beq.n	80046e2 <_printf_float+0x9a>
 800479c:	232d      	movs	r3, #45	; 0x2d
 800479e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a2:	e79e      	b.n	80046e2 <_printf_float+0x9a>
 80047a4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80047a8:	f000 816e 	beq.w	8004a88 <_printf_float+0x440>
 80047ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047b0:	d1b9      	bne.n	8004726 <_printf_float+0xde>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1b7      	bne.n	8004726 <_printf_float+0xde>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7b4      	b.n	8004724 <_printf_float+0xdc>
 80047ba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80047be:	d119      	bne.n	80047f4 <_printf_float+0x1ac>
 80047c0:	2900      	cmp	r1, #0
 80047c2:	6863      	ldr	r3, [r4, #4]
 80047c4:	dd0c      	ble.n	80047e0 <_printf_float+0x198>
 80047c6:	6121      	str	r1, [r4, #16]
 80047c8:	b913      	cbnz	r3, 80047d0 <_printf_float+0x188>
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	07d2      	lsls	r2, r2, #31
 80047ce:	d502      	bpl.n	80047d6 <_printf_float+0x18e>
 80047d0:	3301      	adds	r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047d8:	f04f 0900 	mov.w	r9, #0
 80047dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80047de:	e7d9      	b.n	8004794 <_printf_float+0x14c>
 80047e0:	b913      	cbnz	r3, 80047e8 <_printf_float+0x1a0>
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	07d0      	lsls	r0, r2, #31
 80047e6:	d501      	bpl.n	80047ec <_printf_float+0x1a4>
 80047e8:	3302      	adds	r3, #2
 80047ea:	e7f3      	b.n	80047d4 <_printf_float+0x18c>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e7f1      	b.n	80047d4 <_printf_float+0x18c>
 80047f0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80047f4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047f8:	4293      	cmp	r3, r2
 80047fa:	db05      	blt.n	8004808 <_printf_float+0x1c0>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	07d1      	lsls	r1, r2, #31
 8004802:	d5e8      	bpl.n	80047d6 <_printf_float+0x18e>
 8004804:	3301      	adds	r3, #1
 8004806:	e7e5      	b.n	80047d4 <_printf_float+0x18c>
 8004808:	2b00      	cmp	r3, #0
 800480a:	bfcc      	ite	gt
 800480c:	2301      	movgt	r3, #1
 800480e:	f1c3 0302 	rsble	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	e7de      	b.n	80047d4 <_printf_float+0x18c>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	055a      	lsls	r2, r3, #21
 800481a:	d407      	bmi.n	800482c <_printf_float+0x1e4>
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	463a      	mov	r2, r7
 8004820:	4659      	mov	r1, fp
 8004822:	4628      	mov	r0, r5
 8004824:	47b0      	blx	r6
 8004826:	3001      	adds	r0, #1
 8004828:	d129      	bne.n	800487e <_printf_float+0x236>
 800482a:	e764      	b.n	80046f6 <_printf_float+0xae>
 800482c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004830:	f240 80d7 	bls.w	80049e2 <_printf_float+0x39a>
 8004834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004838:	2200      	movs	r2, #0
 800483a:	2300      	movs	r3, #0
 800483c:	f7fc f8c4 	bl	80009c8 <__aeabi_dcmpeq>
 8004840:	b388      	cbz	r0, 80048a6 <_printf_float+0x25e>
 8004842:	2301      	movs	r3, #1
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <_printf_float+0x300>)
 8004846:	4659      	mov	r1, fp
 8004848:	4628      	mov	r0, r5
 800484a:	47b0      	blx	r6
 800484c:	3001      	adds	r0, #1
 800484e:	f43f af52 	beq.w	80046f6 <_printf_float+0xae>
 8004852:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004856:	429a      	cmp	r2, r3
 8004858:	db02      	blt.n	8004860 <_printf_float+0x218>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	07d8      	lsls	r0, r3, #31
 800485e:	d50e      	bpl.n	800487e <_printf_float+0x236>
 8004860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004864:	4659      	mov	r1, fp
 8004866:	4628      	mov	r0, r5
 8004868:	47b0      	blx	r6
 800486a:	3001      	adds	r0, #1
 800486c:	f43f af43 	beq.w	80046f6 <_printf_float+0xae>
 8004870:	2700      	movs	r7, #0
 8004872:	f104 081a 	add.w	r8, r4, #26
 8004876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004878:	3b01      	subs	r3, #1
 800487a:	42bb      	cmp	r3, r7
 800487c:	dc09      	bgt.n	8004892 <_printf_float+0x24a>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	079f      	lsls	r7, r3, #30
 8004882:	f100 80fd 	bmi.w	8004a80 <_printf_float+0x438>
 8004886:	68e0      	ldr	r0, [r4, #12]
 8004888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800488a:	4298      	cmp	r0, r3
 800488c:	bfb8      	it	lt
 800488e:	4618      	movlt	r0, r3
 8004890:	e733      	b.n	80046fa <_printf_float+0xb2>
 8004892:	2301      	movs	r3, #1
 8004894:	4642      	mov	r2, r8
 8004896:	4659      	mov	r1, fp
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	3001      	adds	r0, #1
 800489e:	f43f af2a 	beq.w	80046f6 <_printf_float+0xae>
 80048a2:	3701      	adds	r7, #1
 80048a4:	e7e7      	b.n	8004876 <_printf_float+0x22e>
 80048a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc2b      	bgt.n	8004904 <_printf_float+0x2bc>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4a26      	ldr	r2, [pc, #152]	; (8004948 <_printf_float+0x300>)
 80048b0:	4659      	mov	r1, fp
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b0      	blx	r6
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af1d 	beq.w	80046f6 <_printf_float+0xae>
 80048bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048be:	b923      	cbnz	r3, 80048ca <_printf_float+0x282>
 80048c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c2:	b913      	cbnz	r3, 80048ca <_printf_float+0x282>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d5d9      	bpl.n	800487e <_printf_float+0x236>
 80048ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ce:	4659      	mov	r1, fp
 80048d0:	4628      	mov	r0, r5
 80048d2:	47b0      	blx	r6
 80048d4:	3001      	adds	r0, #1
 80048d6:	f43f af0e 	beq.w	80046f6 <_printf_float+0xae>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f104 091a 	add.w	r9, r4, #26
 80048e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048e4:	425b      	negs	r3, r3
 80048e6:	4543      	cmp	r3, r8
 80048e8:	dc01      	bgt.n	80048ee <_printf_float+0x2a6>
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	e797      	b.n	800481e <_printf_float+0x1d6>
 80048ee:	2301      	movs	r3, #1
 80048f0:	464a      	mov	r2, r9
 80048f2:	4659      	mov	r1, fp
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b0      	blx	r6
 80048f8:	3001      	adds	r0, #1
 80048fa:	f43f aefc 	beq.w	80046f6 <_printf_float+0xae>
 80048fe:	f108 0801 	add.w	r8, r8, #1
 8004902:	e7ee      	b.n	80048e2 <_printf_float+0x29a>
 8004904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004908:	429a      	cmp	r2, r3
 800490a:	bfa8      	it	ge
 800490c:	461a      	movge	r2, r3
 800490e:	2a00      	cmp	r2, #0
 8004910:	4690      	mov	r8, r2
 8004912:	dd07      	ble.n	8004924 <_printf_float+0x2dc>
 8004914:	4613      	mov	r3, r2
 8004916:	4659      	mov	r1, fp
 8004918:	463a      	mov	r2, r7
 800491a:	4628      	mov	r0, r5
 800491c:	47b0      	blx	r6
 800491e:	3001      	adds	r0, #1
 8004920:	f43f aee9 	beq.w	80046f6 <_printf_float+0xae>
 8004924:	f104 031a 	add.w	r3, r4, #26
 8004928:	f04f 0a00 	mov.w	sl, #0
 800492c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004930:	930b      	str	r3, [sp, #44]	; 0x2c
 8004932:	e015      	b.n	8004960 <_printf_float+0x318>
 8004934:	7fefffff 	.word	0x7fefffff
 8004938:	08006dcc 	.word	0x08006dcc
 800493c:	08006dc8 	.word	0x08006dc8
 8004940:	08006dd4 	.word	0x08006dd4
 8004944:	08006dd0 	.word	0x08006dd0
 8004948:	08006dd8 	.word	0x08006dd8
 800494c:	2301      	movs	r3, #1
 800494e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004950:	4659      	mov	r1, fp
 8004952:	4628      	mov	r0, r5
 8004954:	47b0      	blx	r6
 8004956:	3001      	adds	r0, #1
 8004958:	f43f aecd 	beq.w	80046f6 <_printf_float+0xae>
 800495c:	f10a 0a01 	add.w	sl, sl, #1
 8004960:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004964:	eba9 0308 	sub.w	r3, r9, r8
 8004968:	4553      	cmp	r3, sl
 800496a:	dcef      	bgt.n	800494c <_printf_float+0x304>
 800496c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004970:	429a      	cmp	r2, r3
 8004972:	444f      	add	r7, r9
 8004974:	db14      	blt.n	80049a0 <_printf_float+0x358>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	07da      	lsls	r2, r3, #31
 800497a:	d411      	bmi.n	80049a0 <_printf_float+0x358>
 800497c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800497e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004980:	eba3 0209 	sub.w	r2, r3, r9
 8004984:	eba3 0901 	sub.w	r9, r3, r1
 8004988:	4591      	cmp	r9, r2
 800498a:	bfa8      	it	ge
 800498c:	4691      	movge	r9, r2
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	dc0d      	bgt.n	80049b0 <_printf_float+0x368>
 8004994:	2700      	movs	r7, #0
 8004996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800499a:	f104 081a 	add.w	r8, r4, #26
 800499e:	e018      	b.n	80049d2 <_printf_float+0x38a>
 80049a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a4:	4659      	mov	r1, fp
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b0      	blx	r6
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1e6      	bne.n	800497c <_printf_float+0x334>
 80049ae:	e6a2      	b.n	80046f6 <_printf_float+0xae>
 80049b0:	464b      	mov	r3, r9
 80049b2:	463a      	mov	r2, r7
 80049b4:	4659      	mov	r1, fp
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b0      	blx	r6
 80049ba:	3001      	adds	r0, #1
 80049bc:	d1ea      	bne.n	8004994 <_printf_float+0x34c>
 80049be:	e69a      	b.n	80046f6 <_printf_float+0xae>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4642      	mov	r2, r8
 80049c4:	4659      	mov	r1, fp
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b0      	blx	r6
 80049ca:	3001      	adds	r0, #1
 80049cc:	f43f ae93 	beq.w	80046f6 <_printf_float+0xae>
 80049d0:	3701      	adds	r7, #1
 80049d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	eba3 0309 	sub.w	r3, r3, r9
 80049dc:	42bb      	cmp	r3, r7
 80049de:	dcef      	bgt.n	80049c0 <_printf_float+0x378>
 80049e0:	e74d      	b.n	800487e <_printf_float+0x236>
 80049e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049e4:	2a01      	cmp	r2, #1
 80049e6:	dc01      	bgt.n	80049ec <_printf_float+0x3a4>
 80049e8:	07db      	lsls	r3, r3, #31
 80049ea:	d538      	bpl.n	8004a5e <_printf_float+0x416>
 80049ec:	2301      	movs	r3, #1
 80049ee:	463a      	mov	r2, r7
 80049f0:	4659      	mov	r1, fp
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b0      	blx	r6
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f ae7d 	beq.w	80046f6 <_printf_float+0xae>
 80049fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a00:	4659      	mov	r1, fp
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b0      	blx	r6
 8004a06:	3001      	adds	r0, #1
 8004a08:	f107 0701 	add.w	r7, r7, #1
 8004a0c:	f43f ae73 	beq.w	80046f6 <_printf_float+0xae>
 8004a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a16:	2200      	movs	r2, #0
 8004a18:	f103 38ff 	add.w	r8, r3, #4294967295
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f7fb ffd3 	bl	80009c8 <__aeabi_dcmpeq>
 8004a22:	b9c0      	cbnz	r0, 8004a56 <_printf_float+0x40e>
 8004a24:	4643      	mov	r3, r8
 8004a26:	463a      	mov	r2, r7
 8004a28:	4659      	mov	r1, fp
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d10d      	bne.n	8004a4e <_printf_float+0x406>
 8004a32:	e660      	b.n	80046f6 <_printf_float+0xae>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4642      	mov	r2, r8
 8004a38:	4659      	mov	r1, fp
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b0      	blx	r6
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f ae59 	beq.w	80046f6 <_printf_float+0xae>
 8004a44:	3701      	adds	r7, #1
 8004a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	42bb      	cmp	r3, r7
 8004a4c:	dcf2      	bgt.n	8004a34 <_printf_float+0x3ec>
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a54:	e6e4      	b.n	8004820 <_printf_float+0x1d8>
 8004a56:	2700      	movs	r7, #0
 8004a58:	f104 081a 	add.w	r8, r4, #26
 8004a5c:	e7f3      	b.n	8004a46 <_printf_float+0x3fe>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7e1      	b.n	8004a26 <_printf_float+0x3de>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4642      	mov	r2, r8
 8004a66:	4659      	mov	r1, fp
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b0      	blx	r6
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f43f ae42 	beq.w	80046f6 <_printf_float+0xae>
 8004a72:	3701      	adds	r7, #1
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	42bb      	cmp	r3, r7
 8004a7c:	dcf1      	bgt.n	8004a62 <_printf_float+0x41a>
 8004a7e:	e702      	b.n	8004886 <_printf_float+0x23e>
 8004a80:	2700      	movs	r7, #0
 8004a82:	f104 0819 	add.w	r8, r4, #25
 8004a86:	e7f5      	b.n	8004a74 <_printf_float+0x42c>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f43f ae94 	beq.w	80047b6 <_printf_float+0x16e>
 8004a8e:	f04f 0c00 	mov.w	ip, #0
 8004a92:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a96:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004a9a:	6022      	str	r2, [r4, #0]
 8004a9c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004aa0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	463a      	mov	r2, r7
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f7ff fd3a 	bl	8004524 <__cvt>
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	e64f      	b.n	8004754 <_printf_float+0x10c>

08004ab4 <_printf_common>:
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	4691      	mov	r9, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	688a      	ldr	r2, [r1, #8]
 8004abe:	690b      	ldr	r3, [r1, #16]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bfb8      	it	lt
 8004ac6:	4613      	movlt	r3, r2
 8004ac8:	f8c9 3000 	str.w	r3, [r9]
 8004acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad6:	b112      	cbz	r2, 8004ade <_printf_common+0x2a>
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8c9 3000 	str.w	r3, [r9]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	0699      	lsls	r1, r3, #26
 8004ae2:	bf42      	ittt	mi
 8004ae4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ae8:	3302      	addmi	r3, #2
 8004aea:	f8c9 3000 	strmi.w	r3, [r9]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d107      	bne.n	8004b06 <_printf_common+0x52>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	f8d9 2000 	ldr.w	r2, [r9]
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	42ab      	cmp	r3, r5
 8004b04:	dc29      	bgt.n	8004b5a <_printf_common+0xa6>
 8004b06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	3300      	adds	r3, #0
 8004b0e:	bf18      	it	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	0692      	lsls	r2, r2, #26
 8004b14:	d42e      	bmi.n	8004b74 <_printf_common+0xc0>
 8004b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d021      	beq.n	8004b68 <_printf_common+0xb4>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	68e5      	ldr	r5, [r4, #12]
 8004b28:	f003 0306 	and.w	r3, r3, #6
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	bf18      	it	ne
 8004b30:	2500      	movne	r5, #0
 8004b32:	f8d9 2000 	ldr.w	r2, [r9]
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	bf08      	it	eq
 8004b3c:	1aad      	subeq	r5, r5, r2
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	6922      	ldr	r2, [r4, #16]
 8004b42:	bf08      	it	eq
 8004b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bfc4      	itt	gt
 8004b4c:	1a9b      	subgt	r3, r3, r2
 8004b4e:	18ed      	addgt	r5, r5, r3
 8004b50:	341a      	adds	r4, #26
 8004b52:	454d      	cmp	r5, r9
 8004b54:	d11a      	bne.n	8004b8c <_printf_common+0xd8>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e008      	b.n	8004b6c <_printf_common+0xb8>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4630      	mov	r0, r6
 8004b62:	47c0      	blx	r8
 8004b64:	3001      	adds	r0, #1
 8004b66:	d103      	bne.n	8004b70 <_printf_common+0xbc>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	3501      	adds	r5, #1
 8004b72:	e7c2      	b.n	8004afa <_printf_common+0x46>
 8004b74:	2030      	movs	r0, #48	; 0x30
 8004b76:	18e1      	adds	r1, r4, r3
 8004b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b82:	4422      	add	r2, r4
 8004b84:	3302      	adds	r3, #2
 8004b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b8a:	e7c4      	b.n	8004b16 <_printf_common+0x62>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4639      	mov	r1, r7
 8004b92:	4630      	mov	r0, r6
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0e6      	beq.n	8004b68 <_printf_common+0xb4>
 8004b9a:	f109 0901 	add.w	r9, r9, #1
 8004b9e:	e7d8      	b.n	8004b52 <_printf_common+0x9e>

08004ba0 <_printf_i>:
 8004ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ba8:	460c      	mov	r4, r1
 8004baa:	7e09      	ldrb	r1, [r1, #24]
 8004bac:	b085      	sub	sp, #20
 8004bae:	296e      	cmp	r1, #110	; 0x6e
 8004bb0:	4617      	mov	r7, r2
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	4698      	mov	r8, r3
 8004bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bb8:	f000 80b3 	beq.w	8004d22 <_printf_i+0x182>
 8004bbc:	d822      	bhi.n	8004c04 <_printf_i+0x64>
 8004bbe:	2963      	cmp	r1, #99	; 0x63
 8004bc0:	d036      	beq.n	8004c30 <_printf_i+0x90>
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x3a>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	f000 80b9 	beq.w	8004d3c <_printf_i+0x19c>
 8004bca:	2958      	cmp	r1, #88	; 0x58
 8004bcc:	f000 8083 	beq.w	8004cd6 <_printf_i+0x136>
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bd8:	e032      	b.n	8004c40 <_printf_i+0xa0>
 8004bda:	2964      	cmp	r1, #100	; 0x64
 8004bdc:	d001      	beq.n	8004be2 <_printf_i+0x42>
 8004bde:	2969      	cmp	r1, #105	; 0x69
 8004be0:	d1f6      	bne.n	8004bd0 <_printf_i+0x30>
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	6813      	ldr	r3, [r2, #0]
 8004be6:	0605      	lsls	r5, r0, #24
 8004be8:	f103 0104 	add.w	r1, r3, #4
 8004bec:	d52a      	bpl.n	8004c44 <_printf_i+0xa4>
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da03      	bge.n	8004bfe <_printf_i+0x5e>
 8004bf6:	222d      	movs	r2, #45	; 0x2d
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bfe:	486f      	ldr	r0, [pc, #444]	; (8004dbc <_printf_i+0x21c>)
 8004c00:	220a      	movs	r2, #10
 8004c02:	e039      	b.n	8004c78 <_printf_i+0xd8>
 8004c04:	2973      	cmp	r1, #115	; 0x73
 8004c06:	f000 809d 	beq.w	8004d44 <_printf_i+0x1a4>
 8004c0a:	d808      	bhi.n	8004c1e <_printf_i+0x7e>
 8004c0c:	296f      	cmp	r1, #111	; 0x6f
 8004c0e:	d020      	beq.n	8004c52 <_printf_i+0xb2>
 8004c10:	2970      	cmp	r1, #112	; 0x70
 8004c12:	d1dd      	bne.n	8004bd0 <_printf_i+0x30>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f043 0320 	orr.w	r3, r3, #32
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e003      	b.n	8004c26 <_printf_i+0x86>
 8004c1e:	2975      	cmp	r1, #117	; 0x75
 8004c20:	d017      	beq.n	8004c52 <_printf_i+0xb2>
 8004c22:	2978      	cmp	r1, #120	; 0x78
 8004c24:	d1d4      	bne.n	8004bd0 <_printf_i+0x30>
 8004c26:	2378      	movs	r3, #120	; 0x78
 8004c28:	4865      	ldr	r0, [pc, #404]	; (8004dc0 <_printf_i+0x220>)
 8004c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c2e:	e055      	b.n	8004cdc <_printf_i+0x13c>
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c36:	1d19      	adds	r1, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6011      	str	r1, [r2, #0]
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c40:	2301      	movs	r3, #1
 8004c42:	e08c      	b.n	8004d5e <_printf_i+0x1be>
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	bf18      	it	ne
 8004c4e:	b21b      	sxthne	r3, r3
 8004c50:	e7cf      	b.n	8004bf2 <_printf_i+0x52>
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	6010      	str	r0, [r2, #0]
 8004c5a:	0628      	lsls	r0, r5, #24
 8004c5c:	d501      	bpl.n	8004c62 <_printf_i+0xc2>
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	e002      	b.n	8004c68 <_printf_i+0xc8>
 8004c62:	0668      	lsls	r0, r5, #25
 8004c64:	d5fb      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	296f      	cmp	r1, #111	; 0x6f
 8004c6a:	bf14      	ite	ne
 8004c6c:	220a      	movne	r2, #10
 8004c6e:	2208      	moveq	r2, #8
 8004c70:	4852      	ldr	r0, [pc, #328]	; (8004dbc <_printf_i+0x21c>)
 8004c72:	2100      	movs	r1, #0
 8004c74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c78:	6865      	ldr	r5, [r4, #4]
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	60a5      	str	r5, [r4, #8]
 8004c7e:	f2c0 8095 	blt.w	8004dac <_printf_i+0x20c>
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	f021 0104 	bic.w	r1, r1, #4
 8004c88:	6021      	str	r1, [r4, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d13d      	bne.n	8004d0a <_printf_i+0x16a>
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	f040 808e 	bne.w	8004db0 <_printf_i+0x210>
 8004c94:	4665      	mov	r5, ip
 8004c96:	2a08      	cmp	r2, #8
 8004c98:	d10b      	bne.n	8004cb2 <_printf_i+0x112>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	07db      	lsls	r3, r3, #31
 8004c9e:	d508      	bpl.n	8004cb2 <_printf_i+0x112>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	6862      	ldr	r2, [r4, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bfde      	ittt	le
 8004ca8:	2330      	movle	r3, #48	; 0x30
 8004caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cb2:	ebac 0305 	sub.w	r3, ip, r5
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	f8cd 8000 	str.w	r8, [sp]
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	aa03      	add	r2, sp, #12
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff fef6 	bl	8004ab4 <_printf_common>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d14d      	bne.n	8004d68 <_printf_i+0x1c8>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	b005      	add	sp, #20
 8004cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cd6:	4839      	ldr	r0, [pc, #228]	; (8004dbc <_printf_i+0x21c>)
 8004cd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	1d1d      	adds	r5, r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6015      	str	r5, [r2, #0]
 8004ce6:	060a      	lsls	r2, r1, #24
 8004ce8:	d50b      	bpl.n	8004d02 <_printf_i+0x162>
 8004cea:	07ca      	lsls	r2, r1, #31
 8004cec:	bf44      	itt	mi
 8004cee:	f041 0120 	orrmi.w	r1, r1, #32
 8004cf2:	6021      	strmi	r1, [r4, #0]
 8004cf4:	b91b      	cbnz	r3, 8004cfe <_printf_i+0x15e>
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	f022 0220 	bic.w	r2, r2, #32
 8004cfc:	6022      	str	r2, [r4, #0]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	e7b7      	b.n	8004c72 <_printf_i+0xd2>
 8004d02:	064d      	lsls	r5, r1, #25
 8004d04:	bf48      	it	mi
 8004d06:	b29b      	uxthmi	r3, r3
 8004d08:	e7ef      	b.n	8004cea <_printf_i+0x14a>
 8004d0a:	4665      	mov	r5, ip
 8004d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d10:	fb02 3311 	mls	r3, r2, r1, r3
 8004d14:	5cc3      	ldrb	r3, [r0, r3]
 8004d16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d1f5      	bne.n	8004d0c <_printf_i+0x16c>
 8004d20:	e7b9      	b.n	8004c96 <_printf_i+0xf6>
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	6961      	ldr	r1, [r4, #20]
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	0628      	lsls	r0, r5, #24
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	d501      	bpl.n	8004d36 <_printf_i+0x196>
 8004d32:	6019      	str	r1, [r3, #0]
 8004d34:	e002      	b.n	8004d3c <_printf_i+0x19c>
 8004d36:	066a      	lsls	r2, r5, #25
 8004d38:	d5fb      	bpl.n	8004d32 <_printf_i+0x192>
 8004d3a:	8019      	strh	r1, [r3, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4665      	mov	r5, ip
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	e7b9      	b.n	8004cb8 <_printf_i+0x118>
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	1d19      	adds	r1, r3, #4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	681d      	ldr	r5, [r3, #0]
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 feaf 	bl	8005ab4 <memchr>
 8004d56:	b108      	cbz	r0, 8004d5c <_printf_i+0x1bc>
 8004d58:	1b40      	subs	r0, r0, r5
 8004d5a:	6060      	str	r0, [r4, #4]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	2300      	movs	r3, #0
 8004d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d66:	e7a7      	b.n	8004cb8 <_printf_i+0x118>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d0aa      	beq.n	8004ccc <_printf_i+0x12c>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	079b      	lsls	r3, r3, #30
 8004d7a:	d413      	bmi.n	8004da4 <_printf_i+0x204>
 8004d7c:	68e0      	ldr	r0, [r4, #12]
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	4298      	cmp	r0, r3
 8004d82:	bfb8      	it	lt
 8004d84:	4618      	movlt	r0, r3
 8004d86:	e7a3      	b.n	8004cd0 <_printf_i+0x130>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	47c0      	blx	r8
 8004d92:	3001      	adds	r0, #1
 8004d94:	d09a      	beq.n	8004ccc <_printf_i+0x12c>
 8004d96:	3501      	adds	r5, #1
 8004d98:	68e3      	ldr	r3, [r4, #12]
 8004d9a:	9a03      	ldr	r2, [sp, #12]
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	42ab      	cmp	r3, r5
 8004da0:	dcf2      	bgt.n	8004d88 <_printf_i+0x1e8>
 8004da2:	e7eb      	b.n	8004d7c <_printf_i+0x1dc>
 8004da4:	2500      	movs	r5, #0
 8004da6:	f104 0919 	add.w	r9, r4, #25
 8004daa:	e7f5      	b.n	8004d98 <_printf_i+0x1f8>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ac      	bne.n	8004d0a <_printf_i+0x16a>
 8004db0:	7803      	ldrb	r3, [r0, #0]
 8004db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dba:	e76c      	b.n	8004c96 <_printf_i+0xf6>
 8004dbc:	08006dda 	.word	0x08006dda
 8004dc0:	08006deb 	.word	0x08006deb

08004dc4 <siprintf>:
 8004dc4:	b40e      	push	{r1, r2, r3}
 8004dc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dca:	b500      	push	{lr}
 8004dcc:	b09c      	sub	sp, #112	; 0x70
 8004dce:	ab1d      	add	r3, sp, #116	; 0x74
 8004dd0:	9002      	str	r0, [sp, #8]
 8004dd2:	9006      	str	r0, [sp, #24]
 8004dd4:	9107      	str	r1, [sp, #28]
 8004dd6:	9104      	str	r1, [sp, #16]
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <siprintf+0x38>)
 8004dda:	4909      	ldr	r1, [pc, #36]	; (8004e00 <siprintf+0x3c>)
 8004ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de0:	9105      	str	r1, [sp, #20]
 8004de2:	6800      	ldr	r0, [r0, #0]
 8004de4:	a902      	add	r1, sp, #8
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	f001 fa68 	bl	80062bc <_svfiprintf_r>
 8004dec:	2200      	movs	r2, #0
 8004dee:	9b02      	ldr	r3, [sp, #8]
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	b01c      	add	sp, #112	; 0x70
 8004df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df8:	b003      	add	sp, #12
 8004dfa:	4770      	bx	lr
 8004dfc:	20000008 	.word	0x20000008
 8004e00:	ffff0208 	.word	0xffff0208

08004e04 <quorem>:
 8004e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	6903      	ldr	r3, [r0, #16]
 8004e0a:	690c      	ldr	r4, [r1, #16]
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	f2c0 8084 	blt.w	8004f1c <quorem+0x118>
 8004e14:	3c01      	subs	r4, #1
 8004e16:	f101 0714 	add.w	r7, r1, #20
 8004e1a:	f100 0614 	add.w	r6, r0, #20
 8004e1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e26:	3501      	adds	r5, #1
 8004e28:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e2c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e30:	eb06 030c 	add.w	r3, r6, ip
 8004e34:	eb07 090c 	add.w	r9, r7, ip
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	b39d      	cbz	r5, 8004ea4 <quorem+0xa0>
 8004e3c:	f04f 0a00 	mov.w	sl, #0
 8004e40:	4638      	mov	r0, r7
 8004e42:	46b6      	mov	lr, r6
 8004e44:	46d3      	mov	fp, sl
 8004e46:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e4a:	b293      	uxth	r3, r2
 8004e4c:	fb05 a303 	mla	r3, r5, r3, sl
 8004e50:	0c12      	lsrs	r2, r2, #16
 8004e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e56:	fb05 a202 	mla	r2, r5, r2, sl
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ebab 0303 	sub.w	r3, fp, r3
 8004e60:	f8de b000 	ldr.w	fp, [lr]
 8004e64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e68:	fa1f fb8b 	uxth.w	fp, fp
 8004e6c:	445b      	add	r3, fp
 8004e6e:	fa1f fb82 	uxth.w	fp, r2
 8004e72:	f8de 2000 	ldr.w	r2, [lr]
 8004e76:	4581      	cmp	r9, r0
 8004e78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e86:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e8a:	f84e 3b04 	str.w	r3, [lr], #4
 8004e8e:	d2da      	bcs.n	8004e46 <quorem+0x42>
 8004e90:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e94:	b933      	cbnz	r3, 8004ea4 <quorem+0xa0>
 8004e96:	9b01      	ldr	r3, [sp, #4]
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	d331      	bcc.n	8004f04 <quorem+0x100>
 8004ea0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f001 f833 	bl	8005f10 <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	db26      	blt.n	8004efc <quorem+0xf8>
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f04f 0c00 	mov.w	ip, #0
 8004eb4:	3501      	adds	r5, #1
 8004eb6:	f857 1b04 	ldr.w	r1, [r7], #4
 8004eba:	f8d0 e000 	ldr.w	lr, [r0]
 8004ebe:	b28b      	uxth	r3, r1
 8004ec0:	ebac 0303 	sub.w	r3, ip, r3
 8004ec4:	fa1f f28e 	uxth.w	r2, lr
 8004ec8:	4413      	add	r3, r2
 8004eca:	0c0a      	lsrs	r2, r1, #16
 8004ecc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eda:	45b9      	cmp	r9, r7
 8004edc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ee0:	f840 3b04 	str.w	r3, [r0], #4
 8004ee4:	d2e7      	bcs.n	8004eb6 <quorem+0xb2>
 8004ee6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004eea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004eee:	b92a      	cbnz	r2, 8004efc <quorem+0xf8>
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	d30b      	bcc.n	8004f10 <quorem+0x10c>
 8004ef8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004efc:	4628      	mov	r0, r5
 8004efe:	b003      	add	sp, #12
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	3b04      	subs	r3, #4
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d1c9      	bne.n	8004ea0 <quorem+0x9c>
 8004f0c:	3c01      	subs	r4, #1
 8004f0e:	e7c4      	b.n	8004e9a <quorem+0x96>
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	3b04      	subs	r3, #4
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d1ef      	bne.n	8004ef8 <quorem+0xf4>
 8004f18:	3c01      	subs	r4, #1
 8004f1a:	e7ea      	b.n	8004ef2 <quorem+0xee>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e7ee      	b.n	8004efe <quorem+0xfa>

08004f20 <_dtoa_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	4616      	mov	r6, r2
 8004f26:	461f      	mov	r7, r3
 8004f28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f2a:	b095      	sub	sp, #84	; 0x54
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004f32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f36:	b93d      	cbnz	r5, 8004f48 <_dtoa_r+0x28>
 8004f38:	2010      	movs	r0, #16
 8004f3a:	f000 fdb3 	bl	8005aa4 <malloc>
 8004f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f44:	6005      	str	r5, [r0, #0]
 8004f46:	60c5      	str	r5, [r0, #12]
 8004f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	b151      	cbz	r1, 8004f64 <_dtoa_r+0x44>
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	2301      	movs	r3, #1
 8004f52:	4093      	lsls	r3, r2
 8004f54:	604a      	str	r2, [r1, #4]
 8004f56:	608b      	str	r3, [r1, #8]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 fdf8 	bl	8005b4e <_Bfree>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	1e3b      	subs	r3, r7, #0
 8004f66:	bfaf      	iteee	ge
 8004f68:	2300      	movge	r3, #0
 8004f6a:	2201      	movlt	r2, #1
 8004f6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	9303      	strlt	r3, [sp, #12]
 8004f72:	bfac      	ite	ge
 8004f74:	f8c8 3000 	strge.w	r3, [r8]
 8004f78:	f8c8 2000 	strlt.w	r2, [r8]
 8004f7c:	4bae      	ldr	r3, [pc, #696]	; (8005238 <_dtoa_r+0x318>)
 8004f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f82:	ea33 0308 	bics.w	r3, r3, r8
 8004f86:	d11b      	bne.n	8004fc0 <_dtoa_r+0xa0>
 8004f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	9b02      	ldr	r3, [sp, #8]
 8004f92:	b923      	cbnz	r3, 8004f9e <_dtoa_r+0x7e>
 8004f94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f000 8545 	beq.w	8005a28 <_dtoa_r+0xb08>
 8004f9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fa0:	b953      	cbnz	r3, 8004fb8 <_dtoa_r+0x98>
 8004fa2:	4ba6      	ldr	r3, [pc, #664]	; (800523c <_dtoa_r+0x31c>)
 8004fa4:	e021      	b.n	8004fea <_dtoa_r+0xca>
 8004fa6:	4ba6      	ldr	r3, [pc, #664]	; (8005240 <_dtoa_r+0x320>)
 8004fa8:	9306      	str	r3, [sp, #24]
 8004faa:	3308      	adds	r3, #8
 8004fac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	9806      	ldr	r0, [sp, #24]
 8004fb2:	b015      	add	sp, #84	; 0x54
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb8:	4ba0      	ldr	r3, [pc, #640]	; (800523c <_dtoa_r+0x31c>)
 8004fba:	9306      	str	r3, [sp, #24]
 8004fbc:	3303      	adds	r3, #3
 8004fbe:	e7f5      	b.n	8004fac <_dtoa_r+0x8c>
 8004fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb fcfc 	bl	80009c8 <__aeabi_dcmpeq>
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	b160      	cbz	r0, 8004fee <_dtoa_r+0xce>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8520 	beq.w	8005a22 <_dtoa_r+0xb02>
 8004fe2:	4b98      	ldr	r3, [pc, #608]	; (8005244 <_dtoa_r+0x324>)
 8004fe4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	9306      	str	r3, [sp, #24]
 8004fec:	e7e0      	b.n	8004fb0 <_dtoa_r+0x90>
 8004fee:	ab12      	add	r3, sp, #72	; 0x48
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	ab13      	add	r3, sp, #76	; 0x4c
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f001 f800 	bl	8006000 <__d2b>
 8005000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005004:	4683      	mov	fp, r0
 8005006:	2d00      	cmp	r5, #0
 8005008:	d07d      	beq.n	8005106 <_dtoa_r+0x1e6>
 800500a:	46b0      	mov	r8, r6
 800500c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005010:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005014:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005018:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800501c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005020:	2200      	movs	r2, #0
 8005022:	4b89      	ldr	r3, [pc, #548]	; (8005248 <_dtoa_r+0x328>)
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb f8ae 	bl	8000188 <__aeabi_dsub>
 800502c:	a37c      	add	r3, pc, #496	; (adr r3, 8005220 <_dtoa_r+0x300>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb fa61 	bl	80004f8 <__aeabi_dmul>
 8005036:	a37c      	add	r3, pc, #496	; (adr r3, 8005228 <_dtoa_r+0x308>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb f8a6 	bl	800018c <__adddf3>
 8005040:	4606      	mov	r6, r0
 8005042:	4628      	mov	r0, r5
 8005044:	460f      	mov	r7, r1
 8005046:	f7fb f9ed 	bl	8000424 <__aeabi_i2d>
 800504a:	a379      	add	r3, pc, #484	; (adr r3, 8005230 <_dtoa_r+0x310>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb fa52 	bl	80004f8 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb f896 	bl	800018c <__adddf3>
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	f7fb fcf8 	bl	8000a58 <__aeabi_d2iz>
 8005068:	2200      	movs	r2, #0
 800506a:	4682      	mov	sl, r0
 800506c:	2300      	movs	r3, #0
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fcb3 	bl	80009dc <__aeabi_dcmplt>
 8005076:	b148      	cbz	r0, 800508c <_dtoa_r+0x16c>
 8005078:	4650      	mov	r0, sl
 800507a:	f7fb f9d3 	bl	8000424 <__aeabi_i2d>
 800507e:	4632      	mov	r2, r6
 8005080:	463b      	mov	r3, r7
 8005082:	f7fb fca1 	bl	80009c8 <__aeabi_dcmpeq>
 8005086:	b908      	cbnz	r0, 800508c <_dtoa_r+0x16c>
 8005088:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508c:	f1ba 0f16 	cmp.w	sl, #22
 8005090:	d85a      	bhi.n	8005148 <_dtoa_r+0x228>
 8005092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005096:	496d      	ldr	r1, [pc, #436]	; (800524c <_dtoa_r+0x32c>)
 8005098:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a0:	f7fb fcba 	bl	8000a18 <__aeabi_dcmpgt>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d051      	beq.n	800514c <_dtoa_r+0x22c>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ae:	930d      	str	r3, [sp, #52]	; 0x34
 80050b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050b2:	1b5d      	subs	r5, r3, r5
 80050b4:	1e6b      	subs	r3, r5, #1
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	bf43      	ittte	mi
 80050ba:	2300      	movmi	r3, #0
 80050bc:	f1c5 0901 	rsbmi	r9, r5, #1
 80050c0:	9307      	strmi	r3, [sp, #28]
 80050c2:	f04f 0900 	movpl.w	r9, #0
 80050c6:	f1ba 0f00 	cmp.w	sl, #0
 80050ca:	db41      	blt.n	8005150 <_dtoa_r+0x230>
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80050d2:	4453      	add	r3, sl
 80050d4:	9307      	str	r3, [sp, #28]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9308      	str	r3, [sp, #32]
 80050da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050dc:	2b09      	cmp	r3, #9
 80050de:	f200 808f 	bhi.w	8005200 <_dtoa_r+0x2e0>
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	bfc4      	itt	gt
 80050e6:	3b04      	subgt	r3, #4
 80050e8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80050ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050ec:	bfc8      	it	gt
 80050ee:	2500      	movgt	r5, #0
 80050f0:	f1a3 0302 	sub.w	r3, r3, #2
 80050f4:	bfd8      	it	le
 80050f6:	2501      	movle	r5, #1
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	f200 808d 	bhi.w	8005218 <_dtoa_r+0x2f8>
 80050fe:	e8df f003 	tbb	[pc, r3]
 8005102:	7d7b      	.short	0x7d7b
 8005104:	6f2f      	.short	0x6f2f
 8005106:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800510a:	441d      	add	r5, r3
 800510c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005110:	2820      	cmp	r0, #32
 8005112:	dd13      	ble.n	800513c <_dtoa_r+0x21c>
 8005114:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	fa08 f800 	lsl.w	r8, r8, r0
 800511e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005122:	fa23 f000 	lsr.w	r0, r3, r0
 8005126:	ea48 0000 	orr.w	r0, r8, r0
 800512a:	f7fb f96b 	bl	8000404 <__aeabi_ui2d>
 800512e:	2301      	movs	r3, #1
 8005130:	4680      	mov	r8, r0
 8005132:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005136:	3d01      	subs	r5, #1
 8005138:	9310      	str	r3, [sp, #64]	; 0x40
 800513a:	e771      	b.n	8005020 <_dtoa_r+0x100>
 800513c:	9b02      	ldr	r3, [sp, #8]
 800513e:	f1c0 0020 	rsb	r0, r0, #32
 8005142:	fa03 f000 	lsl.w	r0, r3, r0
 8005146:	e7f0      	b.n	800512a <_dtoa_r+0x20a>
 8005148:	2301      	movs	r3, #1
 800514a:	e7b0      	b.n	80050ae <_dtoa_r+0x18e>
 800514c:	900d      	str	r0, [sp, #52]	; 0x34
 800514e:	e7af      	b.n	80050b0 <_dtoa_r+0x190>
 8005150:	f1ca 0300 	rsb	r3, sl, #0
 8005154:	9308      	str	r3, [sp, #32]
 8005156:	2300      	movs	r3, #0
 8005158:	eba9 090a 	sub.w	r9, r9, sl
 800515c:	930c      	str	r3, [sp, #48]	; 0x30
 800515e:	e7bc      	b.n	80050da <_dtoa_r+0x1ba>
 8005160:	2301      	movs	r3, #1
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005166:	2b00      	cmp	r3, #0
 8005168:	dd74      	ble.n	8005254 <_dtoa_r+0x334>
 800516a:	4698      	mov	r8, r3
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	2200      	movs	r2, #0
 8005170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005172:	6072      	str	r2, [r6, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	f102 0014 	add.w	r0, r2, #20
 800517a:	4298      	cmp	r0, r3
 800517c:	6871      	ldr	r1, [r6, #4]
 800517e:	d96e      	bls.n	800525e <_dtoa_r+0x33e>
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fcb0 	bl	8005ae6 <_Balloc>
 8005186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005188:	6030      	str	r0, [r6, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f1b8 0f0e 	cmp.w	r8, #14
 8005190:	9306      	str	r3, [sp, #24]
 8005192:	f200 80ed 	bhi.w	8005370 <_dtoa_r+0x450>
 8005196:	2d00      	cmp	r5, #0
 8005198:	f000 80ea 	beq.w	8005370 <_dtoa_r+0x450>
 800519c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051a0:	f1ba 0f00 	cmp.w	sl, #0
 80051a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80051a8:	dd77      	ble.n	800529a <_dtoa_r+0x37a>
 80051aa:	4a28      	ldr	r2, [pc, #160]	; (800524c <_dtoa_r+0x32c>)
 80051ac:	f00a 030f 	and.w	r3, sl, #15
 80051b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b8:	06f0      	lsls	r0, r6, #27
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051c2:	d568      	bpl.n	8005296 <_dtoa_r+0x376>
 80051c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <_dtoa_r+0x330>)
 80051ca:	2503      	movs	r5, #3
 80051cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d0:	f7fb fabc 	bl	800074c <__aeabi_ddiv>
 80051d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051d8:	f006 060f 	and.w	r6, r6, #15
 80051dc:	4f1c      	ldr	r7, [pc, #112]	; (8005250 <_dtoa_r+0x330>)
 80051de:	e04f      	b.n	8005280 <_dtoa_r+0x360>
 80051e0:	2301      	movs	r3, #1
 80051e2:	9309      	str	r3, [sp, #36]	; 0x24
 80051e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051e6:	4453      	add	r3, sl
 80051e8:	f103 0801 	add.w	r8, r3, #1
 80051ec:	9304      	str	r3, [sp, #16]
 80051ee:	4643      	mov	r3, r8
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bfb8      	it	lt
 80051f4:	2301      	movlt	r3, #1
 80051f6:	e7ba      	b.n	800516e <_dtoa_r+0x24e>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e7b2      	b.n	8005162 <_dtoa_r+0x242>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e7f0      	b.n	80051e2 <_dtoa_r+0x2c2>
 8005200:	2501      	movs	r5, #1
 8005202:	2300      	movs	r3, #0
 8005204:	9509      	str	r5, [sp, #36]	; 0x24
 8005206:	931e      	str	r3, [sp, #120]	; 0x78
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	2200      	movs	r2, #0
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	4698      	mov	r8, r3
 8005212:	2312      	movs	r3, #18
 8005214:	921f      	str	r2, [sp, #124]	; 0x7c
 8005216:	e7aa      	b.n	800516e <_dtoa_r+0x24e>
 8005218:	2301      	movs	r3, #1
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	e7f4      	b.n	8005208 <_dtoa_r+0x2e8>
 800521e:	bf00      	nop
 8005220:	636f4361 	.word	0x636f4361
 8005224:	3fd287a7 	.word	0x3fd287a7
 8005228:	8b60c8b3 	.word	0x8b60c8b3
 800522c:	3fc68a28 	.word	0x3fc68a28
 8005230:	509f79fb 	.word	0x509f79fb
 8005234:	3fd34413 	.word	0x3fd34413
 8005238:	7ff00000 	.word	0x7ff00000
 800523c:	08006e05 	.word	0x08006e05
 8005240:	08006dfc 	.word	0x08006dfc
 8005244:	08006dd9 	.word	0x08006dd9
 8005248:	3ff80000 	.word	0x3ff80000
 800524c:	08006e38 	.word	0x08006e38
 8005250:	08006e10 	.word	0x08006e10
 8005254:	2301      	movs	r3, #1
 8005256:	9304      	str	r3, [sp, #16]
 8005258:	4698      	mov	r8, r3
 800525a:	461a      	mov	r2, r3
 800525c:	e7da      	b.n	8005214 <_dtoa_r+0x2f4>
 800525e:	3101      	adds	r1, #1
 8005260:	6071      	str	r1, [r6, #4]
 8005262:	0052      	lsls	r2, r2, #1
 8005264:	e787      	b.n	8005176 <_dtoa_r+0x256>
 8005266:	07f1      	lsls	r1, r6, #31
 8005268:	d508      	bpl.n	800527c <_dtoa_r+0x35c>
 800526a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800526e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005272:	f7fb f941 	bl	80004f8 <__aeabi_dmul>
 8005276:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800527a:	3501      	adds	r5, #1
 800527c:	1076      	asrs	r6, r6, #1
 800527e:	3708      	adds	r7, #8
 8005280:	2e00      	cmp	r6, #0
 8005282:	d1f0      	bne.n	8005266 <_dtoa_r+0x346>
 8005284:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800528c:	f7fb fa5e 	bl	800074c <__aeabi_ddiv>
 8005290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005294:	e01b      	b.n	80052ce <_dtoa_r+0x3ae>
 8005296:	2502      	movs	r5, #2
 8005298:	e7a0      	b.n	80051dc <_dtoa_r+0x2bc>
 800529a:	f000 80a4 	beq.w	80053e6 <_dtoa_r+0x4c6>
 800529e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80052a2:	f1ca 0600 	rsb	r6, sl, #0
 80052a6:	4ba0      	ldr	r3, [pc, #640]	; (8005528 <_dtoa_r+0x608>)
 80052a8:	f006 020f 	and.w	r2, r6, #15
 80052ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fb f920 	bl	80004f8 <__aeabi_dmul>
 80052b8:	2502      	movs	r5, #2
 80052ba:	2300      	movs	r3, #0
 80052bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052c0:	4f9a      	ldr	r7, [pc, #616]	; (800552c <_dtoa_r+0x60c>)
 80052c2:	1136      	asrs	r6, r6, #4
 80052c4:	2e00      	cmp	r6, #0
 80052c6:	f040 8083 	bne.w	80053d0 <_dtoa_r+0x4b0>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e0      	bne.n	8005290 <_dtoa_r+0x370>
 80052ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 808a 	beq.w	80053ea <_dtoa_r+0x4ca>
 80052d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052e2:	2200      	movs	r2, #0
 80052e4:	4b92      	ldr	r3, [pc, #584]	; (8005530 <_dtoa_r+0x610>)
 80052e6:	f7fb fb79 	bl	80009dc <__aeabi_dcmplt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d07d      	beq.n	80053ea <_dtoa_r+0x4ca>
 80052ee:	f1b8 0f00 	cmp.w	r8, #0
 80052f2:	d07a      	beq.n	80053ea <_dtoa_r+0x4ca>
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dd36      	ble.n	8005368 <_dtoa_r+0x448>
 80052fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052fe:	2200      	movs	r2, #0
 8005300:	4b8c      	ldr	r3, [pc, #560]	; (8005534 <_dtoa_r+0x614>)
 8005302:	f7fb f8f9 	bl	80004f8 <__aeabi_dmul>
 8005306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530a:	9e04      	ldr	r6, [sp, #16]
 800530c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005310:	3501      	adds	r5, #1
 8005312:	4628      	mov	r0, r5
 8005314:	f7fb f886 	bl	8000424 <__aeabi_i2d>
 8005318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800531c:	f7fb f8ec 	bl	80004f8 <__aeabi_dmul>
 8005320:	2200      	movs	r2, #0
 8005322:	4b85      	ldr	r3, [pc, #532]	; (8005538 <_dtoa_r+0x618>)
 8005324:	f7fa ff32 	bl	800018c <__adddf3>
 8005328:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800532c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005330:	950b      	str	r5, [sp, #44]	; 0x2c
 8005332:	2e00      	cmp	r6, #0
 8005334:	d15c      	bne.n	80053f0 <_dtoa_r+0x4d0>
 8005336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	4b7f      	ldr	r3, [pc, #508]	; (800553c <_dtoa_r+0x61c>)
 800533e:	f7fa ff23 	bl	8000188 <__aeabi_dsub>
 8005342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005344:	462b      	mov	r3, r5
 8005346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800534a:	f7fb fb65 	bl	8000a18 <__aeabi_dcmpgt>
 800534e:	2800      	cmp	r0, #0
 8005350:	f040 8281 	bne.w	8005856 <_dtoa_r+0x936>
 8005354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800535a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800535e:	f7fb fb3d 	bl	80009dc <__aeabi_dcmplt>
 8005362:	2800      	cmp	r0, #0
 8005364:	f040 8275 	bne.w	8005852 <_dtoa_r+0x932>
 8005368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800536c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005372:	2b00      	cmp	r3, #0
 8005374:	f2c0 814b 	blt.w	800560e <_dtoa_r+0x6ee>
 8005378:	f1ba 0f0e 	cmp.w	sl, #14
 800537c:	f300 8147 	bgt.w	800560e <_dtoa_r+0x6ee>
 8005380:	4b69      	ldr	r3, [pc, #420]	; (8005528 <_dtoa_r+0x608>)
 8005382:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800538e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f280 80d7 	bge.w	8005544 <_dtoa_r+0x624>
 8005396:	f1b8 0f00 	cmp.w	r8, #0
 800539a:	f300 80d3 	bgt.w	8005544 <_dtoa_r+0x624>
 800539e:	f040 8257 	bne.w	8005850 <_dtoa_r+0x930>
 80053a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a6:	2200      	movs	r2, #0
 80053a8:	4b64      	ldr	r3, [pc, #400]	; (800553c <_dtoa_r+0x61c>)
 80053aa:	f7fb f8a5 	bl	80004f8 <__aeabi_dmul>
 80053ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b2:	f7fb fb27 	bl	8000a04 <__aeabi_dcmpge>
 80053b6:	4646      	mov	r6, r8
 80053b8:	4647      	mov	r7, r8
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f040 822d 	bne.w	800581a <_dtoa_r+0x8fa>
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	9a06      	ldr	r2, [sp, #24]
 80053c4:	1c5d      	adds	r5, r3, #1
 80053c6:	2331      	movs	r3, #49	; 0x31
 80053c8:	f10a 0a01 	add.w	sl, sl, #1
 80053cc:	7013      	strb	r3, [r2, #0]
 80053ce:	e228      	b.n	8005822 <_dtoa_r+0x902>
 80053d0:	07f2      	lsls	r2, r6, #31
 80053d2:	d505      	bpl.n	80053e0 <_dtoa_r+0x4c0>
 80053d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d8:	f7fb f88e 	bl	80004f8 <__aeabi_dmul>
 80053dc:	2301      	movs	r3, #1
 80053de:	3501      	adds	r5, #1
 80053e0:	1076      	asrs	r6, r6, #1
 80053e2:	3708      	adds	r7, #8
 80053e4:	e76e      	b.n	80052c4 <_dtoa_r+0x3a4>
 80053e6:	2502      	movs	r5, #2
 80053e8:	e771      	b.n	80052ce <_dtoa_r+0x3ae>
 80053ea:	4657      	mov	r7, sl
 80053ec:	4646      	mov	r6, r8
 80053ee:	e790      	b.n	8005312 <_dtoa_r+0x3f2>
 80053f0:	4b4d      	ldr	r3, [pc, #308]	; (8005528 <_dtoa_r+0x608>)
 80053f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80053fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d048      	beq.n	8005492 <_dtoa_r+0x572>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	2000      	movs	r0, #0
 8005406:	494e      	ldr	r1, [pc, #312]	; (8005540 <_dtoa_r+0x620>)
 8005408:	f7fb f9a0 	bl	800074c <__aeabi_ddiv>
 800540c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005410:	f7fa feba 	bl	8000188 <__aeabi_dsub>
 8005414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005418:	9d06      	ldr	r5, [sp, #24]
 800541a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541e:	f7fb fb1b 	bl	8000a58 <__aeabi_d2iz>
 8005422:	9011      	str	r0, [sp, #68]	; 0x44
 8005424:	f7fa fffe 	bl	8000424 <__aeabi_i2d>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005430:	f7fa feaa 	bl	8000188 <__aeabi_dsub>
 8005434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800543a:	3330      	adds	r3, #48	; 0x30
 800543c:	f805 3b01 	strb.w	r3, [r5], #1
 8005440:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005444:	f7fb faca 	bl	80009dc <__aeabi_dcmplt>
 8005448:	2800      	cmp	r0, #0
 800544a:	d163      	bne.n	8005514 <_dtoa_r+0x5f4>
 800544c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005450:	2000      	movs	r0, #0
 8005452:	4937      	ldr	r1, [pc, #220]	; (8005530 <_dtoa_r+0x610>)
 8005454:	f7fa fe98 	bl	8000188 <__aeabi_dsub>
 8005458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800545c:	f7fb fabe 	bl	80009dc <__aeabi_dcmplt>
 8005460:	2800      	cmp	r0, #0
 8005462:	f040 80b5 	bne.w	80055d0 <_dtoa_r+0x6b0>
 8005466:	9b06      	ldr	r3, [sp, #24]
 8005468:	1aeb      	subs	r3, r5, r3
 800546a:	429e      	cmp	r6, r3
 800546c:	f77f af7c 	ble.w	8005368 <_dtoa_r+0x448>
 8005470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005474:	2200      	movs	r2, #0
 8005476:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <_dtoa_r+0x614>)
 8005478:	f7fb f83e 	bl	80004f8 <__aeabi_dmul>
 800547c:	2200      	movs	r2, #0
 800547e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <_dtoa_r+0x614>)
 8005488:	f7fb f836 	bl	80004f8 <__aeabi_dmul>
 800548c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005490:	e7c3      	b.n	800541a <_dtoa_r+0x4fa>
 8005492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005496:	f7fb f82f 	bl	80004f8 <__aeabi_dmul>
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054a0:	199d      	adds	r5, r3, r6
 80054a2:	461e      	mov	r6, r3
 80054a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a8:	f7fb fad6 	bl	8000a58 <__aeabi_d2iz>
 80054ac:	9011      	str	r0, [sp, #68]	; 0x44
 80054ae:	f7fa ffb9 	bl	8000424 <__aeabi_i2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ba:	f7fa fe65 	bl	8000188 <__aeabi_dsub>
 80054be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c4:	3330      	adds	r3, #48	; 0x30
 80054c6:	f806 3b01 	strb.w	r3, [r6], #1
 80054ca:	42ae      	cmp	r6, r5
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	d124      	bne.n	800551c <_dtoa_r+0x5fc>
 80054d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <_dtoa_r+0x620>)
 80054d8:	f7fa fe58 	bl	800018c <__adddf3>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e4:	f7fb fa98 	bl	8000a18 <__aeabi_dcmpgt>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d171      	bne.n	80055d0 <_dtoa_r+0x6b0>
 80054ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054f0:	2000      	movs	r0, #0
 80054f2:	4913      	ldr	r1, [pc, #76]	; (8005540 <_dtoa_r+0x620>)
 80054f4:	f7fa fe48 	bl	8000188 <__aeabi_dsub>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005500:	f7fb fa6c 	bl	80009dc <__aeabi_dcmplt>
 8005504:	2800      	cmp	r0, #0
 8005506:	f43f af2f 	beq.w	8005368 <_dtoa_r+0x448>
 800550a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800550e:	1e6a      	subs	r2, r5, #1
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d001      	beq.n	8005518 <_dtoa_r+0x5f8>
 8005514:	46ba      	mov	sl, r7
 8005516:	e04a      	b.n	80055ae <_dtoa_r+0x68e>
 8005518:	4615      	mov	r5, r2
 800551a:	e7f6      	b.n	800550a <_dtoa_r+0x5ea>
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <_dtoa_r+0x614>)
 800551e:	f7fa ffeb 	bl	80004f8 <__aeabi_dmul>
 8005522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005526:	e7bd      	b.n	80054a4 <_dtoa_r+0x584>
 8005528:	08006e38 	.word	0x08006e38
 800552c:	08006e10 	.word	0x08006e10
 8005530:	3ff00000 	.word	0x3ff00000
 8005534:	40240000 	.word	0x40240000
 8005538:	401c0000 	.word	0x401c0000
 800553c:	40140000 	.word	0x40140000
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	9d06      	ldr	r5, [sp, #24]
 8005546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800554a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fb f8fb 	bl	800074c <__aeabi_ddiv>
 8005556:	f7fb fa7f 	bl	8000a58 <__aeabi_d2iz>
 800555a:	4681      	mov	r9, r0
 800555c:	f7fa ff62 	bl	8000424 <__aeabi_i2d>
 8005560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005564:	f7fa ffc8 	bl	80004f8 <__aeabi_dmul>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f7fa fe0a 	bl	8000188 <__aeabi_dsub>
 8005574:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005578:	f805 6b01 	strb.w	r6, [r5], #1
 800557c:	9e06      	ldr	r6, [sp, #24]
 800557e:	4602      	mov	r2, r0
 8005580:	1bae      	subs	r6, r5, r6
 8005582:	45b0      	cmp	r8, r6
 8005584:	460b      	mov	r3, r1
 8005586:	d135      	bne.n	80055f4 <_dtoa_r+0x6d4>
 8005588:	f7fa fe00 	bl	800018c <__adddf3>
 800558c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005590:	4606      	mov	r6, r0
 8005592:	460f      	mov	r7, r1
 8005594:	f7fb fa40 	bl	8000a18 <__aeabi_dcmpgt>
 8005598:	b9c8      	cbnz	r0, 80055ce <_dtoa_r+0x6ae>
 800559a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb fa11 	bl	80009c8 <__aeabi_dcmpeq>
 80055a6:	b110      	cbz	r0, 80055ae <_dtoa_r+0x68e>
 80055a8:	f019 0f01 	tst.w	r9, #1
 80055ac:	d10f      	bne.n	80055ce <_dtoa_r+0x6ae>
 80055ae:	4659      	mov	r1, fp
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 facc 	bl	8005b4e <_Bfree>
 80055b6:	2300      	movs	r3, #0
 80055b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055ba:	702b      	strb	r3, [r5, #0]
 80055bc:	f10a 0301 	add.w	r3, sl, #1
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f43f acf3 	beq.w	8004fb0 <_dtoa_r+0x90>
 80055ca:	601d      	str	r5, [r3, #0]
 80055cc:	e4f0      	b.n	8004fb0 <_dtoa_r+0x90>
 80055ce:	4657      	mov	r7, sl
 80055d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055d4:	1e6b      	subs	r3, r5, #1
 80055d6:	2a39      	cmp	r2, #57	; 0x39
 80055d8:	d106      	bne.n	80055e8 <_dtoa_r+0x6c8>
 80055da:	9a06      	ldr	r2, [sp, #24]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <_dtoa_r+0x6d0>
 80055e0:	2330      	movs	r3, #48	; 0x30
 80055e2:	7013      	strb	r3, [r2, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	3701      	adds	r7, #1
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	3201      	adds	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e791      	b.n	8005514 <_dtoa_r+0x5f4>
 80055f0:	461d      	mov	r5, r3
 80055f2:	e7ed      	b.n	80055d0 <_dtoa_r+0x6b0>
 80055f4:	2200      	movs	r2, #0
 80055f6:	4b99      	ldr	r3, [pc, #612]	; (800585c <_dtoa_r+0x93c>)
 80055f8:	f7fa ff7e 	bl	80004f8 <__aeabi_dmul>
 80055fc:	2200      	movs	r2, #0
 80055fe:	2300      	movs	r3, #0
 8005600:	4606      	mov	r6, r0
 8005602:	460f      	mov	r7, r1
 8005604:	f7fb f9e0 	bl	80009c8 <__aeabi_dcmpeq>
 8005608:	2800      	cmp	r0, #0
 800560a:	d09e      	beq.n	800554a <_dtoa_r+0x62a>
 800560c:	e7cf      	b.n	80055ae <_dtoa_r+0x68e>
 800560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005610:	2a00      	cmp	r2, #0
 8005612:	f000 8088 	beq.w	8005726 <_dtoa_r+0x806>
 8005616:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005618:	2a01      	cmp	r2, #1
 800561a:	dc6d      	bgt.n	80056f8 <_dtoa_r+0x7d8>
 800561c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800561e:	2a00      	cmp	r2, #0
 8005620:	d066      	beq.n	80056f0 <_dtoa_r+0x7d0>
 8005622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005626:	464d      	mov	r5, r9
 8005628:	9e08      	ldr	r6, [sp, #32]
 800562a:	9a07      	ldr	r2, [sp, #28]
 800562c:	2101      	movs	r1, #1
 800562e:	441a      	add	r2, r3
 8005630:	4620      	mov	r0, r4
 8005632:	4499      	add	r9, r3
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	f000 fb2a 	bl	8005c8e <__i2b>
 800563a:	4607      	mov	r7, r0
 800563c:	2d00      	cmp	r5, #0
 800563e:	dd0b      	ble.n	8005658 <_dtoa_r+0x738>
 8005640:	9b07      	ldr	r3, [sp, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	dd08      	ble.n	8005658 <_dtoa_r+0x738>
 8005646:	42ab      	cmp	r3, r5
 8005648:	bfa8      	it	ge
 800564a:	462b      	movge	r3, r5
 800564c:	9a07      	ldr	r2, [sp, #28]
 800564e:	eba9 0903 	sub.w	r9, r9, r3
 8005652:	1aed      	subs	r5, r5, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	9b08      	ldr	r3, [sp, #32]
 800565a:	b1eb      	cbz	r3, 8005698 <_dtoa_r+0x778>
 800565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d065      	beq.n	800572e <_dtoa_r+0x80e>
 8005662:	b18e      	cbz	r6, 8005688 <_dtoa_r+0x768>
 8005664:	4639      	mov	r1, r7
 8005666:	4632      	mov	r2, r6
 8005668:	4620      	mov	r0, r4
 800566a:	f000 fbaf 	bl	8005dcc <__pow5mult>
 800566e:	465a      	mov	r2, fp
 8005670:	4601      	mov	r1, r0
 8005672:	4607      	mov	r7, r0
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fb13 	bl	8005ca0 <__multiply>
 800567a:	4659      	mov	r1, fp
 800567c:	900a      	str	r0, [sp, #40]	; 0x28
 800567e:	4620      	mov	r0, r4
 8005680:	f000 fa65 	bl	8005b4e <_Bfree>
 8005684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005686:	469b      	mov	fp, r3
 8005688:	9b08      	ldr	r3, [sp, #32]
 800568a:	1b9a      	subs	r2, r3, r6
 800568c:	d004      	beq.n	8005698 <_dtoa_r+0x778>
 800568e:	4659      	mov	r1, fp
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fb9b 	bl	8005dcc <__pow5mult>
 8005696:	4683      	mov	fp, r0
 8005698:	2101      	movs	r1, #1
 800569a:	4620      	mov	r0, r4
 800569c:	f000 faf7 	bl	8005c8e <__i2b>
 80056a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a2:	4606      	mov	r6, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 81c6 	beq.w	8005a36 <_dtoa_r+0xb16>
 80056aa:	461a      	mov	r2, r3
 80056ac:	4601      	mov	r1, r0
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 fb8c 	bl	8005dcc <__pow5mult>
 80056b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056b6:	4606      	mov	r6, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	dc3e      	bgt.n	800573a <_dtoa_r+0x81a>
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d137      	bne.n	8005732 <_dtoa_r+0x812>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d134      	bne.n	8005736 <_dtoa_r+0x816>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056d2:	0d1b      	lsrs	r3, r3, #20
 80056d4:	051b      	lsls	r3, r3, #20
 80056d6:	b12b      	cbz	r3, 80056e4 <_dtoa_r+0x7c4>
 80056d8:	9b07      	ldr	r3, [sp, #28]
 80056da:	f109 0901 	add.w	r9, r9, #1
 80056de:	3301      	adds	r3, #1
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	2301      	movs	r3, #1
 80056e4:	9308      	str	r3, [sp, #32]
 80056e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d128      	bne.n	800573e <_dtoa_r+0x81e>
 80056ec:	2001      	movs	r0, #1
 80056ee:	e02e      	b.n	800574e <_dtoa_r+0x82e>
 80056f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056f6:	e796      	b.n	8005626 <_dtoa_r+0x706>
 80056f8:	9b08      	ldr	r3, [sp, #32]
 80056fa:	f108 36ff 	add.w	r6, r8, #4294967295
 80056fe:	42b3      	cmp	r3, r6
 8005700:	bfb7      	itett	lt
 8005702:	9b08      	ldrlt	r3, [sp, #32]
 8005704:	1b9e      	subge	r6, r3, r6
 8005706:	1af2      	sublt	r2, r6, r3
 8005708:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800570a:	bfbf      	itttt	lt
 800570c:	9608      	strlt	r6, [sp, #32]
 800570e:	189b      	addlt	r3, r3, r2
 8005710:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005712:	2600      	movlt	r6, #0
 8005714:	f1b8 0f00 	cmp.w	r8, #0
 8005718:	bfb9      	ittee	lt
 800571a:	eba9 0508 	sublt.w	r5, r9, r8
 800571e:	2300      	movlt	r3, #0
 8005720:	464d      	movge	r5, r9
 8005722:	4643      	movge	r3, r8
 8005724:	e781      	b.n	800562a <_dtoa_r+0x70a>
 8005726:	9e08      	ldr	r6, [sp, #32]
 8005728:	464d      	mov	r5, r9
 800572a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800572c:	e786      	b.n	800563c <_dtoa_r+0x71c>
 800572e:	9a08      	ldr	r2, [sp, #32]
 8005730:	e7ad      	b.n	800568e <_dtoa_r+0x76e>
 8005732:	2300      	movs	r3, #0
 8005734:	e7d6      	b.n	80056e4 <_dtoa_r+0x7c4>
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	e7d4      	b.n	80056e4 <_dtoa_r+0x7c4>
 800573a:	2300      	movs	r3, #0
 800573c:	9308      	str	r3, [sp, #32]
 800573e:	6933      	ldr	r3, [r6, #16]
 8005740:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005744:	6918      	ldr	r0, [r3, #16]
 8005746:	f000 fa54 	bl	8005bf2 <__hi0bits>
 800574a:	f1c0 0020 	rsb	r0, r0, #32
 800574e:	9b07      	ldr	r3, [sp, #28]
 8005750:	4418      	add	r0, r3
 8005752:	f010 001f 	ands.w	r0, r0, #31
 8005756:	d047      	beq.n	80057e8 <_dtoa_r+0x8c8>
 8005758:	f1c0 0320 	rsb	r3, r0, #32
 800575c:	2b04      	cmp	r3, #4
 800575e:	dd3b      	ble.n	80057d8 <_dtoa_r+0x8b8>
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	f1c0 001c 	rsb	r0, r0, #28
 8005766:	4481      	add	r9, r0
 8005768:	4405      	add	r5, r0
 800576a:	4403      	add	r3, r0
 800576c:	9307      	str	r3, [sp, #28]
 800576e:	f1b9 0f00 	cmp.w	r9, #0
 8005772:	dd05      	ble.n	8005780 <_dtoa_r+0x860>
 8005774:	4659      	mov	r1, fp
 8005776:	464a      	mov	r2, r9
 8005778:	4620      	mov	r0, r4
 800577a:	f000 fb75 	bl	8005e68 <__lshift>
 800577e:	4683      	mov	fp, r0
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	dd05      	ble.n	8005792 <_dtoa_r+0x872>
 8005786:	4631      	mov	r1, r6
 8005788:	461a      	mov	r2, r3
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fb6c 	bl	8005e68 <__lshift>
 8005790:	4606      	mov	r6, r0
 8005792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005794:	b353      	cbz	r3, 80057ec <_dtoa_r+0x8cc>
 8005796:	4631      	mov	r1, r6
 8005798:	4658      	mov	r0, fp
 800579a:	f000 fbb9 	bl	8005f10 <__mcmp>
 800579e:	2800      	cmp	r0, #0
 80057a0:	da24      	bge.n	80057ec <_dtoa_r+0x8cc>
 80057a2:	2300      	movs	r3, #0
 80057a4:	4659      	mov	r1, fp
 80057a6:	220a      	movs	r2, #10
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 f9e7 	bl	8005b7c <__multadd>
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b4:	4683      	mov	fp, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8144 	beq.w	8005a44 <_dtoa_r+0xb24>
 80057bc:	2300      	movs	r3, #0
 80057be:	4639      	mov	r1, r7
 80057c0:	220a      	movs	r2, #10
 80057c2:	4620      	mov	r0, r4
 80057c4:	f000 f9da 	bl	8005b7c <__multadd>
 80057c8:	9b04      	ldr	r3, [sp, #16]
 80057ca:	4607      	mov	r7, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc4d      	bgt.n	800586c <_dtoa_r+0x94c>
 80057d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	dd4a      	ble.n	800586c <_dtoa_r+0x94c>
 80057d6:	e011      	b.n	80057fc <_dtoa_r+0x8dc>
 80057d8:	d0c9      	beq.n	800576e <_dtoa_r+0x84e>
 80057da:	9a07      	ldr	r2, [sp, #28]
 80057dc:	331c      	adds	r3, #28
 80057de:	441a      	add	r2, r3
 80057e0:	4499      	add	r9, r3
 80057e2:	441d      	add	r5, r3
 80057e4:	4613      	mov	r3, r2
 80057e6:	e7c1      	b.n	800576c <_dtoa_r+0x84c>
 80057e8:	4603      	mov	r3, r0
 80057ea:	e7f6      	b.n	80057da <_dtoa_r+0x8ba>
 80057ec:	f1b8 0f00 	cmp.w	r8, #0
 80057f0:	dc36      	bgt.n	8005860 <_dtoa_r+0x940>
 80057f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	dd33      	ble.n	8005860 <_dtoa_r+0x940>
 80057f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	b963      	cbnz	r3, 800581a <_dtoa_r+0x8fa>
 8005800:	4631      	mov	r1, r6
 8005802:	2205      	movs	r2, #5
 8005804:	4620      	mov	r0, r4
 8005806:	f000 f9b9 	bl	8005b7c <__multadd>
 800580a:	4601      	mov	r1, r0
 800580c:	4606      	mov	r6, r0
 800580e:	4658      	mov	r0, fp
 8005810:	f000 fb7e 	bl	8005f10 <__mcmp>
 8005814:	2800      	cmp	r0, #0
 8005816:	f73f add3 	bgt.w	80053c0 <_dtoa_r+0x4a0>
 800581a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800581c:	9d06      	ldr	r5, [sp, #24]
 800581e:	ea6f 0a03 	mvn.w	sl, r3
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	4631      	mov	r1, r6
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f990 	bl	8005b4e <_Bfree>
 800582e:	2f00      	cmp	r7, #0
 8005830:	f43f aebd 	beq.w	80055ae <_dtoa_r+0x68e>
 8005834:	f1b9 0f00 	cmp.w	r9, #0
 8005838:	d005      	beq.n	8005846 <_dtoa_r+0x926>
 800583a:	45b9      	cmp	r9, r7
 800583c:	d003      	beq.n	8005846 <_dtoa_r+0x926>
 800583e:	4649      	mov	r1, r9
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f984 	bl	8005b4e <_Bfree>
 8005846:	4639      	mov	r1, r7
 8005848:	4620      	mov	r0, r4
 800584a:	f000 f980 	bl	8005b4e <_Bfree>
 800584e:	e6ae      	b.n	80055ae <_dtoa_r+0x68e>
 8005850:	2600      	movs	r6, #0
 8005852:	4637      	mov	r7, r6
 8005854:	e7e1      	b.n	800581a <_dtoa_r+0x8fa>
 8005856:	46ba      	mov	sl, r7
 8005858:	4637      	mov	r7, r6
 800585a:	e5b1      	b.n	80053c0 <_dtoa_r+0x4a0>
 800585c:	40240000 	.word	0x40240000
 8005860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005862:	f8cd 8010 	str.w	r8, [sp, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80f3 	beq.w	8005a52 <_dtoa_r+0xb32>
 800586c:	2d00      	cmp	r5, #0
 800586e:	dd05      	ble.n	800587c <_dtoa_r+0x95c>
 8005870:	4639      	mov	r1, r7
 8005872:	462a      	mov	r2, r5
 8005874:	4620      	mov	r0, r4
 8005876:	f000 faf7 	bl	8005e68 <__lshift>
 800587a:	4607      	mov	r7, r0
 800587c:	9b08      	ldr	r3, [sp, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04c      	beq.n	800591c <_dtoa_r+0x9fc>
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4620      	mov	r0, r4
 8005886:	f000 f92e 	bl	8005ae6 <_Balloc>
 800588a:	4605      	mov	r5, r0
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	f107 010c 	add.w	r1, r7, #12
 8005892:	3202      	adds	r2, #2
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	300c      	adds	r0, #12
 8005898:	f000 f91a 	bl	8005ad0 <memcpy>
 800589c:	2201      	movs	r2, #1
 800589e:	4629      	mov	r1, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fae1 	bl	8005e68 <__lshift>
 80058a6:	46b9      	mov	r9, r7
 80058a8:	4607      	mov	r7, r0
 80058aa:	9b06      	ldr	r3, [sp, #24]
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	9308      	str	r3, [sp, #32]
 80058b6:	4631      	mov	r1, r6
 80058b8:	4658      	mov	r0, fp
 80058ba:	f7ff faa3 	bl	8004e04 <quorem>
 80058be:	4649      	mov	r1, r9
 80058c0:	4605      	mov	r5, r0
 80058c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058c6:	4658      	mov	r0, fp
 80058c8:	f000 fb22 	bl	8005f10 <__mcmp>
 80058cc:	463a      	mov	r2, r7
 80058ce:	9002      	str	r0, [sp, #8]
 80058d0:	4631      	mov	r1, r6
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fb36 	bl	8005f44 <__mdiff>
 80058d8:	68c3      	ldr	r3, [r0, #12]
 80058da:	4602      	mov	r2, r0
 80058dc:	bb03      	cbnz	r3, 8005920 <_dtoa_r+0xa00>
 80058de:	4601      	mov	r1, r0
 80058e0:	9009      	str	r0, [sp, #36]	; 0x24
 80058e2:	4658      	mov	r0, fp
 80058e4:	f000 fb14 	bl	8005f10 <__mcmp>
 80058e8:	4603      	mov	r3, r0
 80058ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ec:	4611      	mov	r1, r2
 80058ee:	4620      	mov	r0, r4
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	f000 f92c 	bl	8005b4e <_Bfree>
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	b9a3      	cbnz	r3, 8005924 <_dtoa_r+0xa04>
 80058fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058fc:	b992      	cbnz	r2, 8005924 <_dtoa_r+0xa04>
 80058fe:	9a08      	ldr	r2, [sp, #32]
 8005900:	b982      	cbnz	r2, 8005924 <_dtoa_r+0xa04>
 8005902:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005906:	d029      	beq.n	800595c <_dtoa_r+0xa3c>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	dd01      	ble.n	8005912 <_dtoa_r+0x9f2>
 800590e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005912:	9b07      	ldr	r3, [sp, #28]
 8005914:	1c5d      	adds	r5, r3, #1
 8005916:	f883 8000 	strb.w	r8, [r3]
 800591a:	e784      	b.n	8005826 <_dtoa_r+0x906>
 800591c:	4638      	mov	r0, r7
 800591e:	e7c2      	b.n	80058a6 <_dtoa_r+0x986>
 8005920:	2301      	movs	r3, #1
 8005922:	e7e3      	b.n	80058ec <_dtoa_r+0x9cc>
 8005924:	9a02      	ldr	r2, [sp, #8]
 8005926:	2a00      	cmp	r2, #0
 8005928:	db04      	blt.n	8005934 <_dtoa_r+0xa14>
 800592a:	d123      	bne.n	8005974 <_dtoa_r+0xa54>
 800592c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800592e:	bb0a      	cbnz	r2, 8005974 <_dtoa_r+0xa54>
 8005930:	9a08      	ldr	r2, [sp, #32]
 8005932:	b9fa      	cbnz	r2, 8005974 <_dtoa_r+0xa54>
 8005934:	2b00      	cmp	r3, #0
 8005936:	ddec      	ble.n	8005912 <_dtoa_r+0x9f2>
 8005938:	4659      	mov	r1, fp
 800593a:	2201      	movs	r2, #1
 800593c:	4620      	mov	r0, r4
 800593e:	f000 fa93 	bl	8005e68 <__lshift>
 8005942:	4631      	mov	r1, r6
 8005944:	4683      	mov	fp, r0
 8005946:	f000 fae3 	bl	8005f10 <__mcmp>
 800594a:	2800      	cmp	r0, #0
 800594c:	dc03      	bgt.n	8005956 <_dtoa_r+0xa36>
 800594e:	d1e0      	bne.n	8005912 <_dtoa_r+0x9f2>
 8005950:	f018 0f01 	tst.w	r8, #1
 8005954:	d0dd      	beq.n	8005912 <_dtoa_r+0x9f2>
 8005956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800595a:	d1d8      	bne.n	800590e <_dtoa_r+0x9ee>
 800595c:	9b07      	ldr	r3, [sp, #28]
 800595e:	9a07      	ldr	r2, [sp, #28]
 8005960:	1c5d      	adds	r5, r3, #1
 8005962:	2339      	movs	r3, #57	; 0x39
 8005964:	7013      	strb	r3, [r2, #0]
 8005966:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800596a:	1e6a      	subs	r2, r5, #1
 800596c:	2b39      	cmp	r3, #57	; 0x39
 800596e:	d04d      	beq.n	8005a0c <_dtoa_r+0xaec>
 8005970:	3301      	adds	r3, #1
 8005972:	e052      	b.n	8005a1a <_dtoa_r+0xafa>
 8005974:	9a07      	ldr	r2, [sp, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f102 0501 	add.w	r5, r2, #1
 800597c:	dd06      	ble.n	800598c <_dtoa_r+0xa6c>
 800597e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005982:	d0eb      	beq.n	800595c <_dtoa_r+0xa3c>
 8005984:	f108 0801 	add.w	r8, r8, #1
 8005988:	9b07      	ldr	r3, [sp, #28]
 800598a:	e7c4      	b.n	8005916 <_dtoa_r+0x9f6>
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	9a04      	ldr	r2, [sp, #16]
 8005990:	1aeb      	subs	r3, r5, r3
 8005992:	4293      	cmp	r3, r2
 8005994:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005998:	d021      	beq.n	80059de <_dtoa_r+0xabe>
 800599a:	4659      	mov	r1, fp
 800599c:	2300      	movs	r3, #0
 800599e:	220a      	movs	r2, #10
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f8eb 	bl	8005b7c <__multadd>
 80059a6:	45b9      	cmp	r9, r7
 80059a8:	4683      	mov	fp, r0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 020a 	mov.w	r2, #10
 80059b2:	4649      	mov	r1, r9
 80059b4:	4620      	mov	r0, r4
 80059b6:	d105      	bne.n	80059c4 <_dtoa_r+0xaa4>
 80059b8:	f000 f8e0 	bl	8005b7c <__multadd>
 80059bc:	4681      	mov	r9, r0
 80059be:	4607      	mov	r7, r0
 80059c0:	9507      	str	r5, [sp, #28]
 80059c2:	e778      	b.n	80058b6 <_dtoa_r+0x996>
 80059c4:	f000 f8da 	bl	8005b7c <__multadd>
 80059c8:	4639      	mov	r1, r7
 80059ca:	4681      	mov	r9, r0
 80059cc:	2300      	movs	r3, #0
 80059ce:	220a      	movs	r2, #10
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 f8d3 	bl	8005b7c <__multadd>
 80059d6:	4607      	mov	r7, r0
 80059d8:	e7f2      	b.n	80059c0 <_dtoa_r+0xaa0>
 80059da:	f04f 0900 	mov.w	r9, #0
 80059de:	4659      	mov	r1, fp
 80059e0:	2201      	movs	r2, #1
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fa40 	bl	8005e68 <__lshift>
 80059e8:	4631      	mov	r1, r6
 80059ea:	4683      	mov	fp, r0
 80059ec:	f000 fa90 	bl	8005f10 <__mcmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	dcb8      	bgt.n	8005966 <_dtoa_r+0xa46>
 80059f4:	d102      	bne.n	80059fc <_dtoa_r+0xadc>
 80059f6:	f018 0f01 	tst.w	r8, #1
 80059fa:	d1b4      	bne.n	8005966 <_dtoa_r+0xa46>
 80059fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a00:	1e6a      	subs	r2, r5, #1
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	f47f af0f 	bne.w	8005826 <_dtoa_r+0x906>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	e7f7      	b.n	80059fc <_dtoa_r+0xadc>
 8005a0c:	9b06      	ldr	r3, [sp, #24]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d105      	bne.n	8005a1e <_dtoa_r+0xafe>
 8005a12:	2331      	movs	r3, #49	; 0x31
 8005a14:	9a06      	ldr	r2, [sp, #24]
 8005a16:	f10a 0a01 	add.w	sl, sl, #1
 8005a1a:	7013      	strb	r3, [r2, #0]
 8005a1c:	e703      	b.n	8005826 <_dtoa_r+0x906>
 8005a1e:	4615      	mov	r5, r2
 8005a20:	e7a1      	b.n	8005966 <_dtoa_r+0xa46>
 8005a22:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <_dtoa_r+0xb60>)
 8005a24:	f7ff bae1 	b.w	8004fea <_dtoa_r+0xca>
 8005a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f aabb 	bne.w	8004fa6 <_dtoa_r+0x86>
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <_dtoa_r+0xb64>)
 8005a32:	f7ff bada 	b.w	8004fea <_dtoa_r+0xca>
 8005a36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f77f ae3f 	ble.w	80056bc <_dtoa_r+0x79c>
 8005a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a40:	9308      	str	r3, [sp, #32]
 8005a42:	e653      	b.n	80056ec <_dtoa_r+0x7cc>
 8005a44:	9b04      	ldr	r3, [sp, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dc03      	bgt.n	8005a52 <_dtoa_r+0xb32>
 8005a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	f73f aed5 	bgt.w	80057fc <_dtoa_r+0x8dc>
 8005a52:	9d06      	ldr	r5, [sp, #24]
 8005a54:	4631      	mov	r1, r6
 8005a56:	4658      	mov	r0, fp
 8005a58:	f7ff f9d4 	bl	8004e04 <quorem>
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a62:	f805 8b01 	strb.w	r8, [r5], #1
 8005a66:	9a04      	ldr	r2, [sp, #16]
 8005a68:	1aeb      	subs	r3, r5, r3
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	ddb5      	ble.n	80059da <_dtoa_r+0xaba>
 8005a6e:	4659      	mov	r1, fp
 8005a70:	2300      	movs	r3, #0
 8005a72:	220a      	movs	r2, #10
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 f881 	bl	8005b7c <__multadd>
 8005a7a:	4683      	mov	fp, r0
 8005a7c:	e7ea      	b.n	8005a54 <_dtoa_r+0xb34>
 8005a7e:	bf00      	nop
 8005a80:	08006dd8 	.word	0x08006dd8
 8005a84:	08006dfc 	.word	0x08006dfc

08005a88 <_localeconv_r>:
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <_localeconv_r+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a18      	ldr	r0, [r3, #32]
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <_localeconv_r+0x18>)
 8005a90:	2800      	cmp	r0, #0
 8005a92:	bf08      	it	eq
 8005a94:	4618      	moveq	r0, r3
 8005a96:	30f0      	adds	r0, #240	; 0xf0
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000008 	.word	0x20000008
 8005aa0:	2000006c 	.word	0x2000006c

08005aa4 <malloc>:
 8005aa4:	4b02      	ldr	r3, [pc, #8]	; (8005ab0 <malloc+0xc>)
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	f000 bb53 	b.w	8006154 <_malloc_r>
 8005aae:	bf00      	nop
 8005ab0:	20000008 	.word	0x20000008

08005ab4 <memchr>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	b2c9      	uxtb	r1, r1
 8005ab8:	4402      	add	r2, r0
 8005aba:	4290      	cmp	r0, r2
 8005abc:	4603      	mov	r3, r0
 8005abe:	d101      	bne.n	8005ac4 <memchr+0x10>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e003      	b.n	8005acc <memchr+0x18>
 8005ac4:	781c      	ldrb	r4, [r3, #0]
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	428c      	cmp	r4, r1
 8005aca:	d1f6      	bne.n	8005aba <memchr+0x6>
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <memcpy>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	1e43      	subs	r3, r0, #1
 8005ad4:	440a      	add	r2, r1
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	d100      	bne.n	8005adc <memcpy+0xc>
 8005ada:	bd10      	pop	{r4, pc}
 8005adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae4:	e7f7      	b.n	8005ad6 <memcpy+0x6>

08005ae6 <_Balloc>:
 8005ae6:	b570      	push	{r4, r5, r6, lr}
 8005ae8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005aea:	4604      	mov	r4, r0
 8005aec:	460e      	mov	r6, r1
 8005aee:	b93d      	cbnz	r5, 8005b00 <_Balloc+0x1a>
 8005af0:	2010      	movs	r0, #16
 8005af2:	f7ff ffd7 	bl	8005aa4 <malloc>
 8005af6:	6260      	str	r0, [r4, #36]	; 0x24
 8005af8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005afc:	6005      	str	r5, [r0, #0]
 8005afe:	60c5      	str	r5, [r0, #12]
 8005b00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b02:	68eb      	ldr	r3, [r5, #12]
 8005b04:	b183      	cbz	r3, 8005b28 <_Balloc+0x42>
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b0e:	b9b8      	cbnz	r0, 8005b40 <_Balloc+0x5a>
 8005b10:	2101      	movs	r1, #1
 8005b12:	fa01 f506 	lsl.w	r5, r1, r6
 8005b16:	1d6a      	adds	r2, r5, #5
 8005b18:	0092      	lsls	r2, r2, #2
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fabf 	bl	800609e <_calloc_r>
 8005b20:	b160      	cbz	r0, 8005b3c <_Balloc+0x56>
 8005b22:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b26:	e00e      	b.n	8005b46 <_Balloc+0x60>
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fab6 	bl	800609e <_calloc_r>
 8005b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b34:	60e8      	str	r0, [r5, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e4      	bne.n	8005b06 <_Balloc+0x20>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	6802      	ldr	r2, [r0, #0]
 8005b42:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b46:	2300      	movs	r3, #0
 8005b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b4c:	e7f7      	b.n	8005b3e <_Balloc+0x58>

08005b4e <_Bfree>:
 8005b4e:	b570      	push	{r4, r5, r6, lr}
 8005b50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b52:	4606      	mov	r6, r0
 8005b54:	460d      	mov	r5, r1
 8005b56:	b93c      	cbnz	r4, 8005b68 <_Bfree+0x1a>
 8005b58:	2010      	movs	r0, #16
 8005b5a:	f7ff ffa3 	bl	8005aa4 <malloc>
 8005b5e:	6270      	str	r0, [r6, #36]	; 0x24
 8005b60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b64:	6004      	str	r4, [r0, #0]
 8005b66:	60c4      	str	r4, [r0, #12]
 8005b68:	b13d      	cbz	r5, 8005b7a <_Bfree+0x2c>
 8005b6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b6c:	686a      	ldr	r2, [r5, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b74:	6029      	str	r1, [r5, #0]
 8005b76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}

08005b7c <__multadd>:
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	461f      	mov	r7, r3
 8005b82:	4606      	mov	r6, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	2300      	movs	r3, #0
 8005b88:	690d      	ldr	r5, [r1, #16]
 8005b8a:	f101 0c14 	add.w	ip, r1, #20
 8005b8e:	f8dc 0000 	ldr.w	r0, [ip]
 8005b92:	3301      	adds	r3, #1
 8005b94:	b281      	uxth	r1, r0
 8005b96:	fb02 7101 	mla	r1, r2, r1, r7
 8005b9a:	0c00      	lsrs	r0, r0, #16
 8005b9c:	0c0f      	lsrs	r7, r1, #16
 8005b9e:	fb02 7000 	mla	r0, r2, r0, r7
 8005ba2:	b289      	uxth	r1, r1
 8005ba4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005bae:	f84c 1b04 	str.w	r1, [ip], #4
 8005bb2:	dcec      	bgt.n	8005b8e <__multadd+0x12>
 8005bb4:	b1d7      	cbz	r7, 8005bec <__multadd+0x70>
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc12      	bgt.n	8005be2 <__multadd+0x66>
 8005bbc:	6861      	ldr	r1, [r4, #4]
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	f7ff ff90 	bl	8005ae6 <_Balloc>
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	f104 010c 	add.w	r1, r4, #12
 8005bce:	3202      	adds	r2, #2
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	300c      	adds	r0, #12
 8005bd4:	f7ff ff7c 	bl	8005ad0 <memcpy>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffb7 	bl	8005b4e <_Bfree>
 8005be0:	4644      	mov	r4, r8
 8005be2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005be6:	3501      	adds	r5, #1
 8005be8:	615f      	str	r7, [r3, #20]
 8005bea:	6125      	str	r5, [r4, #16]
 8005bec:	4620      	mov	r0, r4
 8005bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bf2 <__hi0bits>:
 8005bf2:	0c02      	lsrs	r2, r0, #16
 8005bf4:	0412      	lsls	r2, r2, #16
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	b9b2      	cbnz	r2, 8005c28 <__hi0bits+0x36>
 8005bfa:	0403      	lsls	r3, r0, #16
 8005bfc:	2010      	movs	r0, #16
 8005bfe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c02:	bf04      	itt	eq
 8005c04:	021b      	lsleq	r3, r3, #8
 8005c06:	3008      	addeq	r0, #8
 8005c08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c0c:	bf04      	itt	eq
 8005c0e:	011b      	lsleq	r3, r3, #4
 8005c10:	3004      	addeq	r0, #4
 8005c12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c16:	bf04      	itt	eq
 8005c18:	009b      	lsleq	r3, r3, #2
 8005c1a:	3002      	addeq	r0, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db06      	blt.n	8005c2e <__hi0bits+0x3c>
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	d503      	bpl.n	8005c2c <__hi0bits+0x3a>
 8005c24:	3001      	adds	r0, #1
 8005c26:	4770      	bx	lr
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7e8      	b.n	8005bfe <__hi0bits+0xc>
 8005c2c:	2020      	movs	r0, #32
 8005c2e:	4770      	bx	lr

08005c30 <__lo0bits>:
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	4601      	mov	r1, r0
 8005c34:	f013 0207 	ands.w	r2, r3, #7
 8005c38:	d00b      	beq.n	8005c52 <__lo0bits+0x22>
 8005c3a:	07da      	lsls	r2, r3, #31
 8005c3c:	d423      	bmi.n	8005c86 <__lo0bits+0x56>
 8005c3e:	0798      	lsls	r0, r3, #30
 8005c40:	bf49      	itett	mi
 8005c42:	085b      	lsrmi	r3, r3, #1
 8005c44:	089b      	lsrpl	r3, r3, #2
 8005c46:	2001      	movmi	r0, #1
 8005c48:	600b      	strmi	r3, [r1, #0]
 8005c4a:	bf5c      	itt	pl
 8005c4c:	600b      	strpl	r3, [r1, #0]
 8005c4e:	2002      	movpl	r0, #2
 8005c50:	4770      	bx	lr
 8005c52:	b298      	uxth	r0, r3
 8005c54:	b9a8      	cbnz	r0, 8005c82 <__lo0bits+0x52>
 8005c56:	2010      	movs	r0, #16
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c5e:	bf04      	itt	eq
 8005c60:	0a1b      	lsreq	r3, r3, #8
 8005c62:	3008      	addeq	r0, #8
 8005c64:	071a      	lsls	r2, r3, #28
 8005c66:	bf04      	itt	eq
 8005c68:	091b      	lsreq	r3, r3, #4
 8005c6a:	3004      	addeq	r0, #4
 8005c6c:	079a      	lsls	r2, r3, #30
 8005c6e:	bf04      	itt	eq
 8005c70:	089b      	lsreq	r3, r3, #2
 8005c72:	3002      	addeq	r0, #2
 8005c74:	07da      	lsls	r2, r3, #31
 8005c76:	d402      	bmi.n	8005c7e <__lo0bits+0x4e>
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	d006      	beq.n	8005c8a <__lo0bits+0x5a>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	600b      	str	r3, [r1, #0]
 8005c80:	4770      	bx	lr
 8005c82:	4610      	mov	r0, r2
 8005c84:	e7e9      	b.n	8005c5a <__lo0bits+0x2a>
 8005c86:	2000      	movs	r0, #0
 8005c88:	4770      	bx	lr
 8005c8a:	2020      	movs	r0, #32
 8005c8c:	4770      	bx	lr

08005c8e <__i2b>:
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	2101      	movs	r1, #1
 8005c94:	f7ff ff27 	bl	8005ae6 <_Balloc>
 8005c98:	2201      	movs	r2, #1
 8005c9a:	6144      	str	r4, [r0, #20]
 8005c9c:	6102      	str	r2, [r0, #16]
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <__multiply>:
 8005ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	690a      	ldr	r2, [r1, #16]
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	4688      	mov	r8, r1
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bfbe      	ittt	lt
 8005cb0:	460b      	movlt	r3, r1
 8005cb2:	46a0      	movlt	r8, r4
 8005cb4:	461c      	movlt	r4, r3
 8005cb6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cc2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cc6:	eb07 0609 	add.w	r6, r7, r9
 8005cca:	42b3      	cmp	r3, r6
 8005ccc:	bfb8      	it	lt
 8005cce:	3101      	addlt	r1, #1
 8005cd0:	f7ff ff09 	bl	8005ae6 <_Balloc>
 8005cd4:	f100 0514 	add.w	r5, r0, #20
 8005cd8:	462b      	mov	r3, r5
 8005cda:	2200      	movs	r2, #0
 8005cdc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005ce0:	4573      	cmp	r3, lr
 8005ce2:	d316      	bcc.n	8005d12 <__multiply+0x72>
 8005ce4:	f104 0214 	add.w	r2, r4, #20
 8005ce8:	f108 0114 	add.w	r1, r8, #20
 8005cec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005cf0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d80c      	bhi.n	8005d18 <__multiply+0x78>
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	dd03      	ble.n	8005d0a <__multiply+0x6a>
 8005d02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d05d      	beq.n	8005dc6 <__multiply+0x126>
 8005d0a:	6106      	str	r6, [r0, #16]
 8005d0c:	b003      	add	sp, #12
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	f843 2b04 	str.w	r2, [r3], #4
 8005d16:	e7e3      	b.n	8005ce0 <__multiply+0x40>
 8005d18:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	d023      	beq.n	8005d6a <__multiply+0xca>
 8005d22:	4689      	mov	r9, r1
 8005d24:	46ac      	mov	ip, r5
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d2e:	f8dc a000 	ldr.w	sl, [ip]
 8005d32:	b2a3      	uxth	r3, r4
 8005d34:	fa1f fa8a 	uxth.w	sl, sl
 8005d38:	fb0b a303 	mla	r3, fp, r3, sl
 8005d3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d40:	f8dc 4000 	ldr.w	r4, [ip]
 8005d44:	4443      	add	r3, r8
 8005d46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d4a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d4e:	46e2      	mov	sl, ip
 8005d50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d5a:	454f      	cmp	r7, r9
 8005d5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d60:	f84a 3b04 	str.w	r3, [sl], #4
 8005d64:	d82b      	bhi.n	8005dbe <__multiply+0x11e>
 8005d66:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d6a:	9b01      	ldr	r3, [sp, #4]
 8005d6c:	3204      	adds	r2, #4
 8005d6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d72:	f1ba 0f00 	cmp.w	sl, #0
 8005d76:	d020      	beq.n	8005dba <__multiply+0x11a>
 8005d78:	4689      	mov	r9, r1
 8005d7a:	46a8      	mov	r8, r5
 8005d7c:	f04f 0b00 	mov.w	fp, #0
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d90:	46c4      	mov	ip, r8
 8005d92:	445c      	add	r4, fp
 8005d94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d98:	f84c 3b04 	str.w	r3, [ip], #4
 8005d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005da0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	fb0a b303 	mla	r3, sl, r3, fp
 8005daa:	454f      	cmp	r7, r9
 8005dac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005db0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005db4:	d805      	bhi.n	8005dc2 <__multiply+0x122>
 8005db6:	f8c8 3004 	str.w	r3, [r8, #4]
 8005dba:	3504      	adds	r5, #4
 8005dbc:	e79b      	b.n	8005cf6 <__multiply+0x56>
 8005dbe:	46d4      	mov	ip, sl
 8005dc0:	e7b3      	b.n	8005d2a <__multiply+0x8a>
 8005dc2:	46e0      	mov	r8, ip
 8005dc4:	e7dd      	b.n	8005d82 <__multiply+0xe2>
 8005dc6:	3e01      	subs	r6, #1
 8005dc8:	e799      	b.n	8005cfe <__multiply+0x5e>
	...

08005dcc <__pow5mult>:
 8005dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	f012 0203 	ands.w	r2, r2, #3
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	d007      	beq.n	8005dec <__pow5mult+0x20>
 8005ddc:	4c21      	ldr	r4, [pc, #132]	; (8005e64 <__pow5mult+0x98>)
 8005dde:	3a01      	subs	r2, #1
 8005de0:	2300      	movs	r3, #0
 8005de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005de6:	f7ff fec9 	bl	8005b7c <__multadd>
 8005dea:	4607      	mov	r7, r0
 8005dec:	10ad      	asrs	r5, r5, #2
 8005dee:	d035      	beq.n	8005e5c <__pow5mult+0x90>
 8005df0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005df2:	b93c      	cbnz	r4, 8005e04 <__pow5mult+0x38>
 8005df4:	2010      	movs	r0, #16
 8005df6:	f7ff fe55 	bl	8005aa4 <malloc>
 8005dfa:	6270      	str	r0, [r6, #36]	; 0x24
 8005dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e00:	6004      	str	r4, [r0, #0]
 8005e02:	60c4      	str	r4, [r0, #12]
 8005e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e0c:	b94c      	cbnz	r4, 8005e22 <__pow5mult+0x56>
 8005e0e:	f240 2171 	movw	r1, #625	; 0x271
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff ff3b 	bl	8005c8e <__i2b>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	07eb      	lsls	r3, r5, #31
 8005e28:	d50a      	bpl.n	8005e40 <__pow5mult+0x74>
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff36 	bl	8005ca0 <__multiply>
 8005e34:	4681      	mov	r9, r0
 8005e36:	4639      	mov	r1, r7
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff fe88 	bl	8005b4e <_Bfree>
 8005e3e:	464f      	mov	r7, r9
 8005e40:	106d      	asrs	r5, r5, #1
 8005e42:	d00b      	beq.n	8005e5c <__pow5mult+0x90>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	b938      	cbnz	r0, 8005e58 <__pow5mult+0x8c>
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff ff27 	bl	8005ca0 <__multiply>
 8005e52:	6020      	str	r0, [r4, #0]
 8005e54:	f8c0 8000 	str.w	r8, [r0]
 8005e58:	4604      	mov	r4, r0
 8005e5a:	e7e4      	b.n	8005e26 <__pow5mult+0x5a>
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e62:	bf00      	nop
 8005e64:	08006f00 	.word	0x08006f00

08005e68 <__lshift>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4607      	mov	r7, r0
 8005e70:	4616      	mov	r6, r2
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e78:	eb0a 0903 	add.w	r9, sl, r3
 8005e7c:	6849      	ldr	r1, [r1, #4]
 8005e7e:	68a3      	ldr	r3, [r4, #8]
 8005e80:	f109 0501 	add.w	r5, r9, #1
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	db32      	blt.n	8005eee <__lshift+0x86>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff fe2c 	bl	8005ae6 <_Balloc>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4680      	mov	r8, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	f100 0114 	add.w	r1, r0, #20
 8005e98:	4553      	cmp	r3, sl
 8005e9a:	db2b      	blt.n	8005ef4 <__lshift+0x8c>
 8005e9c:	6920      	ldr	r0, [r4, #16]
 8005e9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ea2:	f104 0314 	add.w	r3, r4, #20
 8005ea6:	f016 021f 	ands.w	r2, r6, #31
 8005eaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005eb2:	d025      	beq.n	8005f00 <__lshift+0x98>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f1c2 0e20 	rsb	lr, r2, #32
 8005eba:	468a      	mov	sl, r1
 8005ebc:	681e      	ldr	r6, [r3, #0]
 8005ebe:	4096      	lsls	r6, r2
 8005ec0:	4330      	orrs	r0, r6
 8005ec2:	f84a 0b04 	str.w	r0, [sl], #4
 8005ec6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005eca:	459c      	cmp	ip, r3
 8005ecc:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ed0:	d814      	bhi.n	8005efc <__lshift+0x94>
 8005ed2:	6048      	str	r0, [r1, #4]
 8005ed4:	b108      	cbz	r0, 8005eda <__lshift+0x72>
 8005ed6:	f109 0502 	add.w	r5, r9, #2
 8005eda:	3d01      	subs	r5, #1
 8005edc:	4638      	mov	r0, r7
 8005ede:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	f7ff fe33 	bl	8005b4e <_Bfree>
 8005ee8:	4640      	mov	r0, r8
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eee:	3101      	adds	r1, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	e7c7      	b.n	8005e84 <__lshift+0x1c>
 8005ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	e7cd      	b.n	8005e98 <__lshift+0x30>
 8005efc:	4651      	mov	r1, sl
 8005efe:	e7dc      	b.n	8005eba <__lshift+0x52>
 8005f00:	3904      	subs	r1, #4
 8005f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f06:	459c      	cmp	ip, r3
 8005f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f0c:	d8f9      	bhi.n	8005f02 <__lshift+0x9a>
 8005f0e:	e7e4      	b.n	8005eda <__lshift+0x72>

08005f10 <__mcmp>:
 8005f10:	6903      	ldr	r3, [r0, #16]
 8005f12:	690a      	ldr	r2, [r1, #16]
 8005f14:	b530      	push	{r4, r5, lr}
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	d10c      	bne.n	8005f34 <__mcmp+0x24>
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	3014      	adds	r0, #20
 8005f1e:	3114      	adds	r1, #20
 8005f20:	1884      	adds	r4, r0, r2
 8005f22:	4411      	add	r1, r2
 8005f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f2c:	4295      	cmp	r5, r2
 8005f2e:	d003      	beq.n	8005f38 <__mcmp+0x28>
 8005f30:	d305      	bcc.n	8005f3e <__mcmp+0x2e>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd30      	pop	{r4, r5, pc}
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d3f3      	bcc.n	8005f24 <__mcmp+0x14>
 8005f3c:	e7fa      	b.n	8005f34 <__mcmp+0x24>
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f42:	e7f7      	b.n	8005f34 <__mcmp+0x24>

08005f44 <__mdiff>:
 8005f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4628      	mov	r0, r5
 8005f50:	4614      	mov	r4, r2
 8005f52:	f7ff ffdd 	bl	8005f10 <__mcmp>
 8005f56:	1e06      	subs	r6, r0, #0
 8005f58:	d108      	bne.n	8005f6c <__mdiff+0x28>
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff fdc2 	bl	8005ae6 <_Balloc>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	bfa4      	itt	ge
 8005f6e:	4623      	movge	r3, r4
 8005f70:	462c      	movge	r4, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	bfa6      	itte	ge
 8005f78:	461d      	movge	r5, r3
 8005f7a:	2600      	movge	r6, #0
 8005f7c:	2601      	movlt	r6, #1
 8005f7e:	f7ff fdb2 	bl	8005ae6 <_Balloc>
 8005f82:	f04f 0e00 	mov.w	lr, #0
 8005f86:	60c6      	str	r6, [r0, #12]
 8005f88:	692b      	ldr	r3, [r5, #16]
 8005f8a:	6926      	ldr	r6, [r4, #16]
 8005f8c:	f104 0214 	add.w	r2, r4, #20
 8005f90:	f105 0914 	add.w	r9, r5, #20
 8005f94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f9c:	f100 0114 	add.w	r1, r0, #20
 8005fa0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005fa4:	f859 5b04 	ldr.w	r5, [r9], #4
 8005fa8:	fa1f f38a 	uxth.w	r3, sl
 8005fac:	4473      	add	r3, lr
 8005fae:	b2ac      	uxth	r4, r5
 8005fb0:	1b1b      	subs	r3, r3, r4
 8005fb2:	0c2c      	lsrs	r4, r5, #16
 8005fb4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005fb8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005fc2:	45c8      	cmp	r8, r9
 8005fc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005fc8:	4694      	mov	ip, r2
 8005fca:	f841 4b04 	str.w	r4, [r1], #4
 8005fce:	d8e7      	bhi.n	8005fa0 <__mdiff+0x5c>
 8005fd0:	45bc      	cmp	ip, r7
 8005fd2:	d304      	bcc.n	8005fde <__mdiff+0x9a>
 8005fd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fd8:	b183      	cbz	r3, 8005ffc <__mdiff+0xb8>
 8005fda:	6106      	str	r6, [r0, #16]
 8005fdc:	e7c4      	b.n	8005f68 <__mdiff+0x24>
 8005fde:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005fe2:	b2a2      	uxth	r2, r4
 8005fe4:	4472      	add	r2, lr
 8005fe6:	1413      	asrs	r3, r2, #16
 8005fe8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005fec:	b292      	uxth	r2, r2
 8005fee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ff2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ff6:	f841 2b04 	str.w	r2, [r1], #4
 8005ffa:	e7e9      	b.n	8005fd0 <__mdiff+0x8c>
 8005ffc:	3e01      	subs	r6, #1
 8005ffe:	e7e9      	b.n	8005fd4 <__mdiff+0x90>

08006000 <__d2b>:
 8006000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006004:	461c      	mov	r4, r3
 8006006:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800600a:	2101      	movs	r1, #1
 800600c:	4690      	mov	r8, r2
 800600e:	f7ff fd6a 	bl	8005ae6 <_Balloc>
 8006012:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006016:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800601a:	4607      	mov	r7, r0
 800601c:	bb34      	cbnz	r4, 800606c <__d2b+0x6c>
 800601e:	9201      	str	r2, [sp, #4]
 8006020:	f1b8 0200 	subs.w	r2, r8, #0
 8006024:	d027      	beq.n	8006076 <__d2b+0x76>
 8006026:	a802      	add	r0, sp, #8
 8006028:	f840 2d08 	str.w	r2, [r0, #-8]!
 800602c:	f7ff fe00 	bl	8005c30 <__lo0bits>
 8006030:	9900      	ldr	r1, [sp, #0]
 8006032:	b1f0      	cbz	r0, 8006072 <__d2b+0x72>
 8006034:	9a01      	ldr	r2, [sp, #4]
 8006036:	f1c0 0320 	rsb	r3, r0, #32
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	430b      	orrs	r3, r1
 8006040:	40c2      	lsrs	r2, r0
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	9201      	str	r2, [sp, #4]
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf14      	ite	ne
 800604c:	2102      	movne	r1, #2
 800604e:	2101      	moveq	r1, #1
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	6139      	str	r1, [r7, #16]
 8006054:	b1c4      	cbz	r4, 8006088 <__d2b+0x88>
 8006056:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800605a:	4404      	add	r4, r0
 800605c:	6034      	str	r4, [r6, #0]
 800605e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006062:	6028      	str	r0, [r5, #0]
 8006064:	4638      	mov	r0, r7
 8006066:	b002      	add	sp, #8
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006070:	e7d5      	b.n	800601e <__d2b+0x1e>
 8006072:	6179      	str	r1, [r7, #20]
 8006074:	e7e7      	b.n	8006046 <__d2b+0x46>
 8006076:	a801      	add	r0, sp, #4
 8006078:	f7ff fdda 	bl	8005c30 <__lo0bits>
 800607c:	2101      	movs	r1, #1
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	6139      	str	r1, [r7, #16]
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	3020      	adds	r0, #32
 8006086:	e7e5      	b.n	8006054 <__d2b+0x54>
 8006088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800608c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006090:	6030      	str	r0, [r6, #0]
 8006092:	6918      	ldr	r0, [r3, #16]
 8006094:	f7ff fdad 	bl	8005bf2 <__hi0bits>
 8006098:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800609c:	e7e1      	b.n	8006062 <__d2b+0x62>

0800609e <_calloc_r>:
 800609e:	b538      	push	{r3, r4, r5, lr}
 80060a0:	fb02 f401 	mul.w	r4, r2, r1
 80060a4:	4621      	mov	r1, r4
 80060a6:	f000 f855 	bl	8006154 <_malloc_r>
 80060aa:	4605      	mov	r5, r0
 80060ac:	b118      	cbz	r0, 80060b6 <_calloc_r+0x18>
 80060ae:	4622      	mov	r2, r4
 80060b0:	2100      	movs	r1, #0
 80060b2:	f7fe fa2f 	bl	8004514 <memset>
 80060b6:	4628      	mov	r0, r5
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080060bc <_free_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4605      	mov	r5, r0
 80060c0:	2900      	cmp	r1, #0
 80060c2:	d043      	beq.n	800614c <_free_r+0x90>
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f0c      	subs	r4, r1, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfb8      	it	lt
 80060ce:	18e4      	addlt	r4, r4, r3
 80060d0:	f000 fa27 	bl	8006522 <__malloc_lock>
 80060d4:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <_free_r+0x94>)
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	4610      	mov	r0, r2
 80060da:	b933      	cbnz	r3, 80060ea <_free_r+0x2e>
 80060dc:	6063      	str	r3, [r4, #4]
 80060de:	6014      	str	r4, [r2, #0]
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e6:	f000 ba1d 	b.w	8006524 <__malloc_unlock>
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	d90b      	bls.n	8006106 <_free_r+0x4a>
 80060ee:	6821      	ldr	r1, [r4, #0]
 80060f0:	1862      	adds	r2, r4, r1
 80060f2:	4293      	cmp	r3, r2
 80060f4:	bf01      	itttt	eq
 80060f6:	681a      	ldreq	r2, [r3, #0]
 80060f8:	685b      	ldreq	r3, [r3, #4]
 80060fa:	1852      	addeq	r2, r2, r1
 80060fc:	6022      	streq	r2, [r4, #0]
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6004      	str	r4, [r0, #0]
 8006102:	e7ed      	b.n	80060e0 <_free_r+0x24>
 8006104:	4613      	mov	r3, r2
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	b10a      	cbz	r2, 800610e <_free_r+0x52>
 800610a:	42a2      	cmp	r2, r4
 800610c:	d9fa      	bls.n	8006104 <_free_r+0x48>
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	1858      	adds	r0, r3, r1
 8006112:	42a0      	cmp	r0, r4
 8006114:	d10b      	bne.n	800612e <_free_r+0x72>
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	4401      	add	r1, r0
 800611a:	1858      	adds	r0, r3, r1
 800611c:	4282      	cmp	r2, r0
 800611e:	6019      	str	r1, [r3, #0]
 8006120:	d1de      	bne.n	80060e0 <_free_r+0x24>
 8006122:	6810      	ldr	r0, [r2, #0]
 8006124:	6852      	ldr	r2, [r2, #4]
 8006126:	4401      	add	r1, r0
 8006128:	6019      	str	r1, [r3, #0]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	e7d8      	b.n	80060e0 <_free_r+0x24>
 800612e:	d902      	bls.n	8006136 <_free_r+0x7a>
 8006130:	230c      	movs	r3, #12
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	e7d4      	b.n	80060e0 <_free_r+0x24>
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1821      	adds	r1, r4, r0
 800613a:	428a      	cmp	r2, r1
 800613c:	bf01      	itttt	eq
 800613e:	6811      	ldreq	r1, [r2, #0]
 8006140:	6852      	ldreq	r2, [r2, #4]
 8006142:	1809      	addeq	r1, r1, r0
 8006144:	6021      	streq	r1, [r4, #0]
 8006146:	6062      	str	r2, [r4, #4]
 8006148:	605c      	str	r4, [r3, #4]
 800614a:	e7c9      	b.n	80060e0 <_free_r+0x24>
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	20000248 	.word	0x20000248

08006154 <_malloc_r>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	1ccd      	adds	r5, r1, #3
 8006158:	f025 0503 	bic.w	r5, r5, #3
 800615c:	3508      	adds	r5, #8
 800615e:	2d0c      	cmp	r5, #12
 8006160:	bf38      	it	cc
 8006162:	250c      	movcc	r5, #12
 8006164:	2d00      	cmp	r5, #0
 8006166:	4606      	mov	r6, r0
 8006168:	db01      	blt.n	800616e <_malloc_r+0x1a>
 800616a:	42a9      	cmp	r1, r5
 800616c:	d903      	bls.n	8006176 <_malloc_r+0x22>
 800616e:	230c      	movs	r3, #12
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	2000      	movs	r0, #0
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	f000 f9d4 	bl	8006522 <__malloc_lock>
 800617a:	4a21      	ldr	r2, [pc, #132]	; (8006200 <_malloc_r+0xac>)
 800617c:	6814      	ldr	r4, [r2, #0]
 800617e:	4621      	mov	r1, r4
 8006180:	b991      	cbnz	r1, 80061a8 <_malloc_r+0x54>
 8006182:	4c20      	ldr	r4, [pc, #128]	; (8006204 <_malloc_r+0xb0>)
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	b91b      	cbnz	r3, 8006190 <_malloc_r+0x3c>
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f98f 	bl	80064ac <_sbrk_r>
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	4629      	mov	r1, r5
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f98a 	bl	80064ac <_sbrk_r>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d124      	bne.n	80061e6 <_malloc_r+0x92>
 800619c:	230c      	movs	r3, #12
 800619e:	4630      	mov	r0, r6
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	f000 f9bf 	bl	8006524 <__malloc_unlock>
 80061a6:	e7e4      	b.n	8006172 <_malloc_r+0x1e>
 80061a8:	680b      	ldr	r3, [r1, #0]
 80061aa:	1b5b      	subs	r3, r3, r5
 80061ac:	d418      	bmi.n	80061e0 <_malloc_r+0x8c>
 80061ae:	2b0b      	cmp	r3, #11
 80061b0:	d90f      	bls.n	80061d2 <_malloc_r+0x7e>
 80061b2:	600b      	str	r3, [r1, #0]
 80061b4:	18cc      	adds	r4, r1, r3
 80061b6:	50cd      	str	r5, [r1, r3]
 80061b8:	4630      	mov	r0, r6
 80061ba:	f000 f9b3 	bl	8006524 <__malloc_unlock>
 80061be:	f104 000b 	add.w	r0, r4, #11
 80061c2:	1d23      	adds	r3, r4, #4
 80061c4:	f020 0007 	bic.w	r0, r0, #7
 80061c8:	1ac3      	subs	r3, r0, r3
 80061ca:	d0d3      	beq.n	8006174 <_malloc_r+0x20>
 80061cc:	425a      	negs	r2, r3
 80061ce:	50e2      	str	r2, [r4, r3]
 80061d0:	e7d0      	b.n	8006174 <_malloc_r+0x20>
 80061d2:	684b      	ldr	r3, [r1, #4]
 80061d4:	428c      	cmp	r4, r1
 80061d6:	bf16      	itet	ne
 80061d8:	6063      	strne	r3, [r4, #4]
 80061da:	6013      	streq	r3, [r2, #0]
 80061dc:	460c      	movne	r4, r1
 80061de:	e7eb      	b.n	80061b8 <_malloc_r+0x64>
 80061e0:	460c      	mov	r4, r1
 80061e2:	6849      	ldr	r1, [r1, #4]
 80061e4:	e7cc      	b.n	8006180 <_malloc_r+0x2c>
 80061e6:	1cc4      	adds	r4, r0, #3
 80061e8:	f024 0403 	bic.w	r4, r4, #3
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d005      	beq.n	80061fc <_malloc_r+0xa8>
 80061f0:	1a21      	subs	r1, r4, r0
 80061f2:	4630      	mov	r0, r6
 80061f4:	f000 f95a 	bl	80064ac <_sbrk_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d0cf      	beq.n	800619c <_malloc_r+0x48>
 80061fc:	6025      	str	r5, [r4, #0]
 80061fe:	e7db      	b.n	80061b8 <_malloc_r+0x64>
 8006200:	20000248 	.word	0x20000248
 8006204:	2000024c 	.word	0x2000024c

08006208 <__ssputs_r>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	688e      	ldr	r6, [r1, #8]
 800620e:	4682      	mov	sl, r0
 8006210:	429e      	cmp	r6, r3
 8006212:	460c      	mov	r4, r1
 8006214:	4690      	mov	r8, r2
 8006216:	4699      	mov	r9, r3
 8006218:	d837      	bhi.n	800628a <__ssputs_r+0x82>
 800621a:	898a      	ldrh	r2, [r1, #12]
 800621c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006220:	d031      	beq.n	8006286 <__ssputs_r+0x7e>
 8006222:	2302      	movs	r3, #2
 8006224:	6825      	ldr	r5, [r4, #0]
 8006226:	6909      	ldr	r1, [r1, #16]
 8006228:	1a6f      	subs	r7, r5, r1
 800622a:	6965      	ldr	r5, [r4, #20]
 800622c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006230:	fb95 f5f3 	sdiv	r5, r5, r3
 8006234:	f109 0301 	add.w	r3, r9, #1
 8006238:	443b      	add	r3, r7
 800623a:	429d      	cmp	r5, r3
 800623c:	bf38      	it	cc
 800623e:	461d      	movcc	r5, r3
 8006240:	0553      	lsls	r3, r2, #21
 8006242:	d530      	bpl.n	80062a6 <__ssputs_r+0x9e>
 8006244:	4629      	mov	r1, r5
 8006246:	f7ff ff85 	bl	8006154 <_malloc_r>
 800624a:	4606      	mov	r6, r0
 800624c:	b950      	cbnz	r0, 8006264 <__ssputs_r+0x5c>
 800624e:	230c      	movs	r3, #12
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	f8ca 3000 	str.w	r3, [sl]
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	463a      	mov	r2, r7
 8006266:	6921      	ldr	r1, [r4, #16]
 8006268:	f7ff fc32 	bl	8005ad0 <memcpy>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	6126      	str	r6, [r4, #16]
 800627a:	443e      	add	r6, r7
 800627c:	6026      	str	r6, [r4, #0]
 800627e:	464e      	mov	r6, r9
 8006280:	6165      	str	r5, [r4, #20]
 8006282:	1bed      	subs	r5, r5, r7
 8006284:	60a5      	str	r5, [r4, #8]
 8006286:	454e      	cmp	r6, r9
 8006288:	d900      	bls.n	800628c <__ssputs_r+0x84>
 800628a:	464e      	mov	r6, r9
 800628c:	4632      	mov	r2, r6
 800628e:	4641      	mov	r1, r8
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	f000 f92d 	bl	80064f0 <memmove>
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	2000      	movs	r0, #0
 800629a:	1b9b      	subs	r3, r3, r6
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	441e      	add	r6, r3
 80062a2:	6026      	str	r6, [r4, #0]
 80062a4:	e7dc      	b.n	8006260 <__ssputs_r+0x58>
 80062a6:	462a      	mov	r2, r5
 80062a8:	f000 f93d 	bl	8006526 <_realloc_r>
 80062ac:	4606      	mov	r6, r0
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1e2      	bne.n	8006278 <__ssputs_r+0x70>
 80062b2:	6921      	ldr	r1, [r4, #16]
 80062b4:	4650      	mov	r0, sl
 80062b6:	f7ff ff01 	bl	80060bc <_free_r>
 80062ba:	e7c8      	b.n	800624e <__ssputs_r+0x46>

080062bc <_svfiprintf_r>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	461d      	mov	r5, r3
 80062c2:	898b      	ldrh	r3, [r1, #12]
 80062c4:	b09d      	sub	sp, #116	; 0x74
 80062c6:	061f      	lsls	r7, r3, #24
 80062c8:	4680      	mov	r8, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	4616      	mov	r6, r2
 80062ce:	d50f      	bpl.n	80062f0 <_svfiprintf_r+0x34>
 80062d0:	690b      	ldr	r3, [r1, #16]
 80062d2:	b96b      	cbnz	r3, 80062f0 <_svfiprintf_r+0x34>
 80062d4:	2140      	movs	r1, #64	; 0x40
 80062d6:	f7ff ff3d 	bl	8006154 <_malloc_r>
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	6120      	str	r0, [r4, #16]
 80062de:	b928      	cbnz	r0, 80062ec <_svfiprintf_r+0x30>
 80062e0:	230c      	movs	r3, #12
 80062e2:	f8c8 3000 	str.w	r3, [r8]
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	e0c8      	b.n	800647e <_svfiprintf_r+0x1c2>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	6163      	str	r3, [r4, #20]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	2320      	movs	r3, #32
 80062f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fa:	2330      	movs	r3, #48	; 0x30
 80062fc:	f04f 0b01 	mov.w	fp, #1
 8006300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006304:	9503      	str	r5, [sp, #12]
 8006306:	4637      	mov	r7, r6
 8006308:	463d      	mov	r5, r7
 800630a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800630e:	b10b      	cbz	r3, 8006314 <_svfiprintf_r+0x58>
 8006310:	2b25      	cmp	r3, #37	; 0x25
 8006312:	d13e      	bne.n	8006392 <_svfiprintf_r+0xd6>
 8006314:	ebb7 0a06 	subs.w	sl, r7, r6
 8006318:	d00b      	beq.n	8006332 <_svfiprintf_r+0x76>
 800631a:	4653      	mov	r3, sl
 800631c:	4632      	mov	r2, r6
 800631e:	4621      	mov	r1, r4
 8006320:	4640      	mov	r0, r8
 8006322:	f7ff ff71 	bl	8006208 <__ssputs_r>
 8006326:	3001      	adds	r0, #1
 8006328:	f000 80a4 	beq.w	8006474 <_svfiprintf_r+0x1b8>
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	4453      	add	r3, sl
 8006330:	9309      	str	r3, [sp, #36]	; 0x24
 8006332:	783b      	ldrb	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 809d 	beq.w	8006474 <_svfiprintf_r+0x1b8>
 800633a:	2300      	movs	r3, #0
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800634c:	931a      	str	r3, [sp, #104]	; 0x68
 800634e:	462f      	mov	r7, r5
 8006350:	2205      	movs	r2, #5
 8006352:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006356:	4850      	ldr	r0, [pc, #320]	; (8006498 <_svfiprintf_r+0x1dc>)
 8006358:	f7ff fbac 	bl	8005ab4 <memchr>
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	b9d0      	cbnz	r0, 8006396 <_svfiprintf_r+0xda>
 8006360:	06d9      	lsls	r1, r3, #27
 8006362:	bf44      	itt	mi
 8006364:	2220      	movmi	r2, #32
 8006366:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800636a:	071a      	lsls	r2, r3, #28
 800636c:	bf44      	itt	mi
 800636e:	222b      	movmi	r2, #43	; 0x2b
 8006370:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006374:	782a      	ldrb	r2, [r5, #0]
 8006376:	2a2a      	cmp	r2, #42	; 0x2a
 8006378:	d015      	beq.n	80063a6 <_svfiprintf_r+0xea>
 800637a:	462f      	mov	r7, r5
 800637c:	2000      	movs	r0, #0
 800637e:	250a      	movs	r5, #10
 8006380:	9a07      	ldr	r2, [sp, #28]
 8006382:	4639      	mov	r1, r7
 8006384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006388:	3b30      	subs	r3, #48	; 0x30
 800638a:	2b09      	cmp	r3, #9
 800638c:	d94d      	bls.n	800642a <_svfiprintf_r+0x16e>
 800638e:	b1b8      	cbz	r0, 80063c0 <_svfiprintf_r+0x104>
 8006390:	e00f      	b.n	80063b2 <_svfiprintf_r+0xf6>
 8006392:	462f      	mov	r7, r5
 8006394:	e7b8      	b.n	8006308 <_svfiprintf_r+0x4c>
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <_svfiprintf_r+0x1dc>)
 8006398:	463d      	mov	r5, r7
 800639a:	1a80      	subs	r0, r0, r2
 800639c:	fa0b f000 	lsl.w	r0, fp, r0
 80063a0:	4318      	orrs	r0, r3
 80063a2:	9004      	str	r0, [sp, #16]
 80063a4:	e7d3      	b.n	800634e <_svfiprintf_r+0x92>
 80063a6:	9a03      	ldr	r2, [sp, #12]
 80063a8:	1d11      	adds	r1, r2, #4
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	9103      	str	r1, [sp, #12]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	db01      	blt.n	80063b6 <_svfiprintf_r+0xfa>
 80063b2:	9207      	str	r2, [sp, #28]
 80063b4:	e004      	b.n	80063c0 <_svfiprintf_r+0x104>
 80063b6:	4252      	negs	r2, r2
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	9207      	str	r2, [sp, #28]
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	783b      	ldrb	r3, [r7, #0]
 80063c2:	2b2e      	cmp	r3, #46	; 0x2e
 80063c4:	d10c      	bne.n	80063e0 <_svfiprintf_r+0x124>
 80063c6:	787b      	ldrb	r3, [r7, #1]
 80063c8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ca:	d133      	bne.n	8006434 <_svfiprintf_r+0x178>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	3702      	adds	r7, #2
 80063d0:	1d1a      	adds	r2, r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	9203      	str	r2, [sp, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfb8      	it	lt
 80063da:	f04f 33ff 	movlt.w	r3, #4294967295
 80063de:	9305      	str	r3, [sp, #20]
 80063e0:	4d2e      	ldr	r5, [pc, #184]	; (800649c <_svfiprintf_r+0x1e0>)
 80063e2:	2203      	movs	r2, #3
 80063e4:	7839      	ldrb	r1, [r7, #0]
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7ff fb64 	bl	8005ab4 <memchr>
 80063ec:	b138      	cbz	r0, 80063fe <_svfiprintf_r+0x142>
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	1b40      	subs	r0, r0, r5
 80063f2:	fa03 f000 	lsl.w	r0, r3, r0
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	3701      	adds	r7, #1
 80063fa:	4303      	orrs	r3, r0
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	7839      	ldrb	r1, [r7, #0]
 8006400:	2206      	movs	r2, #6
 8006402:	4827      	ldr	r0, [pc, #156]	; (80064a0 <_svfiprintf_r+0x1e4>)
 8006404:	1c7e      	adds	r6, r7, #1
 8006406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800640a:	f7ff fb53 	bl	8005ab4 <memchr>
 800640e:	2800      	cmp	r0, #0
 8006410:	d038      	beq.n	8006484 <_svfiprintf_r+0x1c8>
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <_svfiprintf_r+0x1e8>)
 8006414:	bb13      	cbnz	r3, 800645c <_svfiprintf_r+0x1a0>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	3307      	adds	r3, #7
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	3308      	adds	r3, #8
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	444b      	add	r3, r9
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	e76d      	b.n	8006306 <_svfiprintf_r+0x4a>
 800642a:	fb05 3202 	mla	r2, r5, r2, r3
 800642e:	2001      	movs	r0, #1
 8006430:	460f      	mov	r7, r1
 8006432:	e7a6      	b.n	8006382 <_svfiprintf_r+0xc6>
 8006434:	2300      	movs	r3, #0
 8006436:	250a      	movs	r5, #10
 8006438:	4619      	mov	r1, r3
 800643a:	3701      	adds	r7, #1
 800643c:	9305      	str	r3, [sp, #20]
 800643e:	4638      	mov	r0, r7
 8006440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006444:	3a30      	subs	r2, #48	; 0x30
 8006446:	2a09      	cmp	r2, #9
 8006448:	d903      	bls.n	8006452 <_svfiprintf_r+0x196>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0c8      	beq.n	80063e0 <_svfiprintf_r+0x124>
 800644e:	9105      	str	r1, [sp, #20]
 8006450:	e7c6      	b.n	80063e0 <_svfiprintf_r+0x124>
 8006452:	fb05 2101 	mla	r1, r5, r1, r2
 8006456:	2301      	movs	r3, #1
 8006458:	4607      	mov	r7, r0
 800645a:	e7f0      	b.n	800643e <_svfiprintf_r+0x182>
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4622      	mov	r2, r4
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <_svfiprintf_r+0x1ec>)
 8006464:	a904      	add	r1, sp, #16
 8006466:	4640      	mov	r0, r8
 8006468:	f7fe f8ee 	bl	8004648 <_printf_float>
 800646c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006470:	4681      	mov	r9, r0
 8006472:	d1d6      	bne.n	8006422 <_svfiprintf_r+0x166>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	f53f af35 	bmi.w	80062e6 <_svfiprintf_r+0x2a>
 800647c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800647e:	b01d      	add	sp, #116	; 0x74
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4622      	mov	r2, r4
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <_svfiprintf_r+0x1ec>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4640      	mov	r0, r8
 8006490:	f7fe fb86 	bl	8004ba0 <_printf_i>
 8006494:	e7ea      	b.n	800646c <_svfiprintf_r+0x1b0>
 8006496:	bf00      	nop
 8006498:	08006f0c 	.word	0x08006f0c
 800649c:	08006f12 	.word	0x08006f12
 80064a0:	08006f16 	.word	0x08006f16
 80064a4:	08004649 	.word	0x08004649
 80064a8:	08006209 	.word	0x08006209

080064ac <_sbrk_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	2300      	movs	r3, #0
 80064b0:	4c05      	ldr	r4, [pc, #20]	; (80064c8 <_sbrk_r+0x1c>)
 80064b2:	4605      	mov	r5, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	f7fc fdc8 	bl	800304c <_sbrk>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_sbrk_r+0x1a>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_sbrk_r+0x1a>
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	200004c8 	.word	0x200004c8

080064cc <__ascii_mbtowc>:
 80064cc:	b082      	sub	sp, #8
 80064ce:	b901      	cbnz	r1, 80064d2 <__ascii_mbtowc+0x6>
 80064d0:	a901      	add	r1, sp, #4
 80064d2:	b142      	cbz	r2, 80064e6 <__ascii_mbtowc+0x1a>
 80064d4:	b14b      	cbz	r3, 80064ea <__ascii_mbtowc+0x1e>
 80064d6:	7813      	ldrb	r3, [r2, #0]
 80064d8:	600b      	str	r3, [r1, #0]
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	1c10      	adds	r0, r2, #0
 80064de:	bf18      	it	ne
 80064e0:	2001      	movne	r0, #1
 80064e2:	b002      	add	sp, #8
 80064e4:	4770      	bx	lr
 80064e6:	4610      	mov	r0, r2
 80064e8:	e7fb      	b.n	80064e2 <__ascii_mbtowc+0x16>
 80064ea:	f06f 0001 	mvn.w	r0, #1
 80064ee:	e7f8      	b.n	80064e2 <__ascii_mbtowc+0x16>

080064f0 <memmove>:
 80064f0:	4288      	cmp	r0, r1
 80064f2:	b510      	push	{r4, lr}
 80064f4:	eb01 0302 	add.w	r3, r1, r2
 80064f8:	d807      	bhi.n	800650a <memmove+0x1a>
 80064fa:	1e42      	subs	r2, r0, #1
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d00a      	beq.n	8006516 <memmove+0x26>
 8006500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006504:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006508:	e7f8      	b.n	80064fc <memmove+0xc>
 800650a:	4283      	cmp	r3, r0
 800650c:	d9f5      	bls.n	80064fa <memmove+0xa>
 800650e:	1881      	adds	r1, r0, r2
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	42d3      	cmn	r3, r2
 8006514:	d100      	bne.n	8006518 <memmove+0x28>
 8006516:	bd10      	pop	{r4, pc}
 8006518:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800651c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006520:	e7f7      	b.n	8006512 <memmove+0x22>

08006522 <__malloc_lock>:
 8006522:	4770      	bx	lr

08006524 <__malloc_unlock>:
 8006524:	4770      	bx	lr

08006526 <_realloc_r>:
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	4607      	mov	r7, r0
 800652a:	4614      	mov	r4, r2
 800652c:	460e      	mov	r6, r1
 800652e:	b921      	cbnz	r1, 800653a <_realloc_r+0x14>
 8006530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006534:	4611      	mov	r1, r2
 8006536:	f7ff be0d 	b.w	8006154 <_malloc_r>
 800653a:	b922      	cbnz	r2, 8006546 <_realloc_r+0x20>
 800653c:	f7ff fdbe 	bl	80060bc <_free_r>
 8006540:	4625      	mov	r5, r4
 8006542:	4628      	mov	r0, r5
 8006544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006546:	f000 f821 	bl	800658c <_malloc_usable_size_r>
 800654a:	42a0      	cmp	r0, r4
 800654c:	d20f      	bcs.n	800656e <_realloc_r+0x48>
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff fdff 	bl	8006154 <_malloc_r>
 8006556:	4605      	mov	r5, r0
 8006558:	2800      	cmp	r0, #0
 800655a:	d0f2      	beq.n	8006542 <_realloc_r+0x1c>
 800655c:	4631      	mov	r1, r6
 800655e:	4622      	mov	r2, r4
 8006560:	f7ff fab6 	bl	8005ad0 <memcpy>
 8006564:	4631      	mov	r1, r6
 8006566:	4638      	mov	r0, r7
 8006568:	f7ff fda8 	bl	80060bc <_free_r>
 800656c:	e7e9      	b.n	8006542 <_realloc_r+0x1c>
 800656e:	4635      	mov	r5, r6
 8006570:	e7e7      	b.n	8006542 <_realloc_r+0x1c>

08006572 <__ascii_wctomb>:
 8006572:	b149      	cbz	r1, 8006588 <__ascii_wctomb+0x16>
 8006574:	2aff      	cmp	r2, #255	; 0xff
 8006576:	bf8b      	itete	hi
 8006578:	238a      	movhi	r3, #138	; 0x8a
 800657a:	700a      	strbls	r2, [r1, #0]
 800657c:	6003      	strhi	r3, [r0, #0]
 800657e:	2001      	movls	r0, #1
 8006580:	bf88      	it	hi
 8006582:	f04f 30ff 	movhi.w	r0, #4294967295
 8006586:	4770      	bx	lr
 8006588:	4608      	mov	r0, r1
 800658a:	4770      	bx	lr

0800658c <_malloc_usable_size_r>:
 800658c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006590:	1f18      	subs	r0, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfbc      	itt	lt
 8006596:	580b      	ldrlt	r3, [r1, r0]
 8006598:	18c0      	addlt	r0, r0, r3
 800659a:	4770      	bx	lr

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
