
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ef4  08000efc  00010efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ef4  08000ef4  00010efc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef4  08000ef4  00010efc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef4  08000efc  00010efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef8  08000ef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08000efc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000efc  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010efc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058f0  00000000  00000000  00010f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c94  00000000  00000000  00016815  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  000174b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00017660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006c62  00000000  00000000  00017798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002fae  00000000  00000000  0001e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000218df  00000000  00000000  000213a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00042c87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004dc  00000000  00000000  00042d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000edc 	.word	0x08000edc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000edc 	.word	0x08000edc

08000170 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000170:	b480      	push	{r7}
 8000172:	b089      	sub	sp, #36	; 0x24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 800017a:	2300      	movs	r3, #0
 800017c:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a96      	ldr	r2, [pc, #600]	; (80003e0 <GPIO_Init+0x270>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIO_Init+0x28>
 800018a:	4b96      	ldr	r3, [pc, #600]	; (80003e4 <GPIO_Init+0x274>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a95      	ldr	r2, [pc, #596]	; (80003e4 <GPIO_Init+0x274>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
 8000196:	e03c      	b.n	8000212 <GPIO_Init+0xa2>
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a93      	ldr	r2, [pc, #588]	; (80003e8 <GPIO_Init+0x278>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIO_Init+0x3e>
 80001a0:	4b90      	ldr	r3, [pc, #576]	; (80003e4 <GPIO_Init+0x274>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a8f      	ldr	r2, [pc, #572]	; (80003e4 <GPIO_Init+0x274>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	e031      	b.n	8000212 <GPIO_Init+0xa2>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a8e      	ldr	r2, [pc, #568]	; (80003ec <GPIO_Init+0x27c>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d106      	bne.n	80001c4 <GPIO_Init+0x54>
 80001b6:	4b8b      	ldr	r3, [pc, #556]	; (80003e4 <GPIO_Init+0x274>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a8a      	ldr	r2, [pc, #552]	; (80003e4 <GPIO_Init+0x274>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
 80001c2:	e026      	b.n	8000212 <GPIO_Init+0xa2>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a8a      	ldr	r2, [pc, #552]	; (80003f0 <GPIO_Init+0x280>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d106      	bne.n	80001da <GPIO_Init+0x6a>
 80001cc:	4b85      	ldr	r3, [pc, #532]	; (80003e4 <GPIO_Init+0x274>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a84      	ldr	r2, [pc, #528]	; (80003e4 <GPIO_Init+0x274>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	e01b      	b.n	8000212 <GPIO_Init+0xa2>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a85      	ldr	r2, [pc, #532]	; (80003f4 <GPIO_Init+0x284>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_Init+0x80>
 80001e2:	4b80      	ldr	r3, [pc, #512]	; (80003e4 <GPIO_Init+0x274>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a7f      	ldr	r2, [pc, #508]	; (80003e4 <GPIO_Init+0x274>)
 80001e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ec:	6193      	str	r3, [r2, #24]
 80001ee:	e010      	b.n	8000212 <GPIO_Init+0xa2>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a81      	ldr	r2, [pc, #516]	; (80003f8 <GPIO_Init+0x288>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_Init+0x96>
 80001f8:	4b7a      	ldr	r3, [pc, #488]	; (80003e4 <GPIO_Init+0x274>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a79      	ldr	r2, [pc, #484]	; (80003e4 <GPIO_Init+0x274>)
 80001fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	e005      	b.n	8000212 <GPIO_Init+0xa2>
 8000206:	4b77      	ldr	r3, [pc, #476]	; (80003e4 <GPIO_Init+0x274>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a76      	ldr	r2, [pc, #472]	; (80003e4 <GPIO_Init+0x274>)
 800020c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000210:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8000212:	2300      	movs	r3, #0
 8000214:	76fb      	strb	r3, [r7, #27]
 8000216:	e1ce      	b.n	80005b6 <GPIO_Init+0x446>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	7efa      	ldrb	r2, [r7, #27]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	4013      	ands	r3, r2
 8000226:	2b00      	cmp	r3, #0
 8000228:	f000 81be 	beq.w	80005a8 <GPIO_Init+0x438>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	2b11      	cmp	r3, #17
 8000232:	d039      	beq.n	80002a8 <GPIO_Init+0x138>
 8000234:	2b11      	cmp	r3, #17
 8000236:	d807      	bhi.n	8000248 <GPIO_Init+0xd8>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d016      	beq.n	800026a <GPIO_Init+0xfa>
 800023c:	2b01      	cmp	r3, #1
 800023e:	f0c0 8090 	bcc.w	8000362 <GPIO_Init+0x1f2>
 8000242:	2b02      	cmp	r3, #2
 8000244:	d04f      	beq.n	80002e6 <GPIO_Init+0x176>
 8000246:	e0bd      	b.n	80003c4 <GPIO_Init+0x254>
 8000248:	4a6c      	ldr	r2, [pc, #432]	; (80003fc <GPIO_Init+0x28c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	f000 8089 	beq.w	8000362 <GPIO_Init+0x1f2>
 8000250:	4a6a      	ldr	r2, [pc, #424]	; (80003fc <GPIO_Init+0x28c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d802      	bhi.n	800025c <GPIO_Init+0xec>
 8000256:	2b12      	cmp	r3, #18
 8000258:	d064      	beq.n	8000324 <GPIO_Init+0x1b4>
 800025a:	e0b3      	b.n	80003c4 <GPIO_Init+0x254>
 800025c:	4a68      	ldr	r2, [pc, #416]	; (8000400 <GPIO_Init+0x290>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d07f      	beq.n	8000362 <GPIO_Init+0x1f2>
 8000262:	4a68      	ldr	r2, [pc, #416]	; (8000404 <GPIO_Init+0x294>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d07c      	beq.n	8000362 <GPIO_Init+0x1f2>
 8000268:	e0ac      	b.n	80003c4 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	2b02      	cmp	r3, #2
 8000270:	d104      	bne.n	800027c <GPIO_Init+0x10c>
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	61fb      	str	r3, [r7, #28]
 800027a:	e010      	b.n	800029e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d104      	bne.n	800028e <GPIO_Init+0x11e>
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	e007      	b.n	800029e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d103      	bne.n	800029e <GPIO_Init+0x12e>
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	f043 0303 	orr.w	r3, r3, #3
 800029c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	f023 030c 	bic.w	r3, r3, #12
 80002a4:	61fb      	str	r3, [r7, #28]


					break;
 80002a6:	e08d      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d104      	bne.n	80002ba <GPIO_Init+0x14a>
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	61fb      	str	r3, [r7, #28]
 80002b8:	e010      	b.n	80002dc <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d104      	bne.n	80002cc <GPIO_Init+0x15c>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	61fb      	str	r3, [r7, #28]
 80002ca:	e007      	b.n	80002dc <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d103      	bne.n	80002dc <GPIO_Init+0x16c>
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	f043 0303 	orr.w	r3, r3, #3
 80002da:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	61fb      	str	r3, [r7, #28]

					break;
 80002e4:	e06e      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d104      	bne.n	80002f8 <GPIO_Init+0x188>
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
 80002f6:	e010      	b.n	800031a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d104      	bne.n	800030a <GPIO_Init+0x19a>
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
 8000308:	e007      	b.n	800031a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	2b03      	cmp	r3, #3
 8000310:	d103      	bne.n	800031a <GPIO_Init+0x1aa>
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	f043 0303 	orr.w	r3, r3, #3
 8000318:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	f043 0308 	orr.w	r3, r3, #8
 8000320:	61fb      	str	r3, [r7, #28]

					break;
 8000322:	e04f      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d104      	bne.n	8000336 <GPIO_Init+0x1c6>
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
 8000334:	e010      	b.n	8000358 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d104      	bne.n	8000348 <GPIO_Init+0x1d8>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	61fb      	str	r3, [r7, #28]
 8000346:	e007      	b.n	8000358 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	2b03      	cmp	r3, #3
 800034e:	d103      	bne.n	8000358 <GPIO_Init+0x1e8>
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f043 0303 	orr.w	r3, r3, #3
 8000356:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f043 030c 	orr.w	r3, r3, #12
 800035e:	61fb      	str	r3, [r7, #28]

					break;
 8000360:	e030      	b.n	80003c4 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	f023 0303 	bic.w	r3, r3, #3
 8000368:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d104      	bne.n	800037c <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 800037a:	e022      	b.n	80003c2 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10d      	bne.n	80003a0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	7efa      	ldrb	r2, [r7, #27]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	431a      	orrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	611a      	str	r2, [r3, #16]
					break;
 800039e:	e010      	b.n	80003c2 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d10c      	bne.n	80003c2 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	7efa      	ldrb	r2, [r7, #27]
 80003b6:	2101      	movs	r1, #1
 80003b8:	fa01 f202 	lsl.w	r2, r1, r2
 80003bc:	431a      	orrs	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	615a      	str	r2, [r3, #20]
					break;
 80003c2:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 80003c4:	7efb      	ldrb	r3, [r7, #27]
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d801      	bhi.n	80003ce <GPIO_Init+0x25e>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	e001      	b.n	80003d2 <GPIO_Init+0x262>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3304      	adds	r3, #4
 80003d2:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 80003d4:	7efb      	ldrb	r3, [r7, #27]
 80003d6:	2b07      	cmp	r3, #7
 80003d8:	d816      	bhi.n	8000408 <GPIO_Init+0x298>
 80003da:	7efb      	ldrb	r3, [r7, #27]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	e016      	b.n	800040e <GPIO_Init+0x29e>
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40011400 	.word	0x40011400
 80003f4:	40011800 	.word	0x40011800
 80003f8:	40011c00 	.word	0x40011c00
 80003fc:	10110000 	.word	0x10110000
 8000400:	10210000 	.word	0x10210000
 8000404:	10310000 	.word	0x10310000
 8000408:	7efb      	ldrb	r3, [r7, #27]
 800040a:	3b08      	subs	r3, #8
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	210f      	movs	r1, #15
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	69f9      	ldr	r1, [r7, #28]
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	431a      	orrs	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	2b00      	cmp	r3, #0
 8000438:	f000 80b6 	beq.w	80005a8 <GPIO_Init+0x438>
			{
				RCC_AFIO_CLK_ENABLE();
 800043c:	4b62      	ldr	r3, [pc, #392]	; (80005c8 <GPIO_Init+0x458>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a61      	ldr	r2, [pc, #388]	; (80005c8 <GPIO_Init+0x458>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8000448:	7efb      	ldrb	r3, [r7, #27]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8000450:	7efb      	ldrb	r3, [r7, #27]
 8000452:	f003 0303 	and.w	r3, r3, #3
 8000456:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << exti_pos), (GET_GPIOCODE(GPIOx) << exti_pos));
 8000458:	4a5c      	ldr	r2, [pc, #368]	; (80005cc <GPIO_Init+0x45c>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3302      	adds	r3, #2
 800045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000462:	210f      	movs	r1, #15
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	43d2      	mvns	r2, r2
 800046c:	401a      	ands	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4957      	ldr	r1, [pc, #348]	; (80005d0 <GPIO_Init+0x460>)
 8000472:	428b      	cmp	r3, r1
 8000474:	d01f      	beq.n	80004b6 <GPIO_Init+0x346>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4956      	ldr	r1, [pc, #344]	; (80005d4 <GPIO_Init+0x464>)
 800047a:	428b      	cmp	r3, r1
 800047c:	d019      	beq.n	80004b2 <GPIO_Init+0x342>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4955      	ldr	r1, [pc, #340]	; (80005d8 <GPIO_Init+0x468>)
 8000482:	428b      	cmp	r3, r1
 8000484:	d013      	beq.n	80004ae <GPIO_Init+0x33e>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4954      	ldr	r1, [pc, #336]	; (80005dc <GPIO_Init+0x46c>)
 800048a:	428b      	cmp	r3, r1
 800048c:	d00d      	beq.n	80004aa <GPIO_Init+0x33a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4953      	ldr	r1, [pc, #332]	; (80005e0 <GPIO_Init+0x470>)
 8000492:	428b      	cmp	r3, r1
 8000494:	d007      	beq.n	80004a6 <GPIO_Init+0x336>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4952      	ldr	r1, [pc, #328]	; (80005e4 <GPIO_Init+0x474>)
 800049a:	428b      	cmp	r3, r1
 800049c:	d101      	bne.n	80004a2 <GPIO_Init+0x332>
 800049e:	2305      	movs	r3, #5
 80004a0:	e00a      	b.n	80004b8 <GPIO_Init+0x348>
 80004a2:	2306      	movs	r3, #6
 80004a4:	e008      	b.n	80004b8 <GPIO_Init+0x348>
 80004a6:	2304      	movs	r3, #4
 80004a8:	e006      	b.n	80004b8 <GPIO_Init+0x348>
 80004aa:	2303      	movs	r3, #3
 80004ac:	e004      	b.n	80004b8 <GPIO_Init+0x348>
 80004ae:	2302      	movs	r3, #2
 80004b0:	e002      	b.n	80004b8 <GPIO_Init+0x348>
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <GPIO_Init+0x348>
 80004b6:	2300      	movs	r3, #0
 80004b8:	68b9      	ldr	r1, [r7, #8]
 80004ba:	408b      	lsls	r3, r1
 80004bc:	4943      	ldr	r1, [pc, #268]	; (80005cc <GPIO_Init+0x45c>)
 80004be:	431a      	orrs	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	3302      	adds	r3, #2
 80004c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d00a      	beq.n	80004ea <GPIO_Init+0x37a>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 80004d4:	4b44      	ldr	r3, [pc, #272]	; (80005e8 <GPIO_Init+0x478>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	7efa      	ldrb	r2, [r7, #27]
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a41      	ldr	r2, [pc, #260]	; (80005e8 <GPIO_Init+0x478>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	6013      	str	r3, [r2, #0]
 80004e8:	e00a      	b.n	8000500 <GPIO_Init+0x390>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 80004ea:	4b3f      	ldr	r3, [pc, #252]	; (80005e8 <GPIO_Init+0x478>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	7efa      	ldrb	r2, [r7, #27]
 80004f0:	2101      	movs	r1, #1
 80004f2:	fa01 f202 	lsl.w	r2, r1, r2
 80004f6:	43d2      	mvns	r2, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a3b      	ldr	r2, [pc, #236]	; (80005e8 <GPIO_Init+0x478>)
 80004fc:	400b      	ands	r3, r1
 80004fe:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <GPIO_Init+0x3b2>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 800050c:	4b36      	ldr	r3, [pc, #216]	; (80005e8 <GPIO_Init+0x478>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	7efa      	ldrb	r2, [r7, #27]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <GPIO_Init+0x478>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6053      	str	r3, [r2, #4]
 8000520:	e00a      	b.n	8000538 <GPIO_Init+0x3c8>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <GPIO_Init+0x478>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	7efa      	ldrb	r2, [r7, #27]
 8000528:	2101      	movs	r1, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <GPIO_Init+0x478>)
 8000534:	400b      	ands	r3, r1
 8000536:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d00a      	beq.n	800055a <GPIO_Init+0x3ea>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <GPIO_Init+0x478>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	7efa      	ldrb	r2, [r7, #27]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a25      	ldr	r2, [pc, #148]	; (80005e8 <GPIO_Init+0x478>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
 8000558:	e00a      	b.n	8000570 <GPIO_Init+0x400>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <GPIO_Init+0x478>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	7efa      	ldrb	r2, [r7, #27]
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <GPIO_Init+0x478>)
 800056c:	400b      	ands	r3, r1
 800056e:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00a      	beq.n	8000592 <GPIO_Init+0x422>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <GPIO_Init+0x478>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	7efa      	ldrb	r2, [r7, #27]
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <GPIO_Init+0x478>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	e00a      	b.n	80005a8 <GPIO_Init+0x438>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <GPIO_Init+0x478>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	7efa      	ldrb	r2, [r7, #27]
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <GPIO_Init+0x478>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 80005b0:	7efb      	ldrb	r3, [r7, #27]
 80005b2:	3301      	adds	r3, #1
 80005b4:	76fb      	strb	r3, [r7, #27]
 80005b6:	7efb      	ldrb	r3, [r7, #27]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	f67f ae2d 	bls.w	8000218 <GPIO_Init+0xa8>
	}
}
 80005be:	bf00      	nop
 80005c0:	3724      	adds	r7, #36	; 0x24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000
 80005d0:	40010800 	.word	0x40010800
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40011400 	.word	0x40011400
 80005e0:	40011800 	.word	0x40011800
 80005e4:	40011c00 	.word	0x40011c00
 80005e8:	40010400 	.word	0x40010400

080005ec <GPIO_TogglePin>:
}



void GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	if( (GPIOx->ODR & GPIO_Pin) )
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68da      	ldr	r2, [r3, #12]
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	4013      	ands	r3, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d007      	beq.n	8000614 <GPIO_TogglePin+0x28>
	{
		// State of pin was LOW
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	691a      	ldr	r2, [r3, #16]
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	611a      	str	r2, [r3, #16]
	else
	{
		// State of pin was HIGH
		GPIOx->BSRR |= GPIO_Pin;
	}
}
 8000612:	e005      	b.n	8000620 <GPIO_TogglePin+0x34>
		GPIOx->BSRR |= GPIO_Pin;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691a      	ldr	r2, [r3, #16]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	431a      	orrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	611a      	str	r2, [r3, #16]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
	...

0800062c <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d011      	beq.n	8000664 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000648:	d10c      	bne.n	8000664 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <RCC_OscConfig+0x9c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <RCC_OscConfig+0x9c>)
 8000650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000654:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8000656:	bf00      	nop
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <RCC_OscConfig+0x9c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d128      	bne.n	80006be <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <RCC_OscConfig+0x9c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <RCC_OscConfig+0x9c>)
 8000672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000676:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000680:	d105      	bne.n	800068e <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <RCC_OscConfig+0x9c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <RCC_OscConfig+0x9c>)
 8000688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800068c:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <RCC_OscConfig+0x9c>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	4313      	orrs	r3, r2
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <RCC_OscConfig+0x9c>)
 800069e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a2:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <RCC_OscConfig+0x9c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <RCC_OscConfig+0x9c>)
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ae:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 80006b0:	bf00      	nop
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <RCC_OscConfig+0x9c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <RCC_OscConfig+0x86>
	}
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <RCC_ClockConfig+0x7c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 0207 	bic.w	r2, r3, #7
 80006de:	491a      	ldr	r1, [pc, #104]	; (8000748 <RCC_ClockConfig+0x7c>)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <RCC_ClockConfig+0x80>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4916      	ldr	r1, [pc, #88]	; (800074c <RCC_ClockConfig+0x80>)
 80006f4:	4313      	orrs	r3, r2
 80006f6:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <RCC_ClockConfig+0x80>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	4911      	ldr	r1, [pc, #68]	; (800074c <RCC_ClockConfig+0x80>)
 8000706:	4313      	orrs	r3, r2
 8000708:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <RCC_ClockConfig+0x80>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <RCC_ClockConfig+0x80>)
 8000718:	4313      	orrs	r3, r2
 800071a:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <RCC_ClockConfig+0x80>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f023 0203 	bic.w	r2, r3, #3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <RCC_ClockConfig+0x80>)
 800072a:	4313      	orrs	r3, r2
 800072c:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 800072e:	bf00      	nop
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <RCC_ClockConfig+0x80>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f9      	beq.n	8000730 <RCC_ClockConfig+0x64>
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000
 800074c:	40021000 	.word	0x40021000

08000750 <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]

	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7f1b      	ldrb	r3, [r3, #28]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d130      	bne.n	80007c8 <TIM_Base_Init+0x78>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f960 	bl	8000a30 <TIM_Base_MspInit>

	// 3. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4313      	orrs	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]

	// 4. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]

	// 5. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68d2      	ldr	r2, [r2, #12]
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c

	// 6. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6852      	ldr	r2, [r2, #4]
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28

	// 7. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	6952      	ldr	r2, [r2, #20]
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30

	// 8. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0201 	orr.w	r2, r2, #1
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	e000      	b.n	80007ca <TIM_Base_Init+0x7a>
		return;
 80007c8:	bf00      	nop
}
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <TIM_PeripheralClockControl>:
}



void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d157      	bne.n	8000892 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a5a      	ldr	r2, [pc, #360]	; (8000950 <TIM_PeripheralClockControl+0x180>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <TIM_PeripheralClockControl+0x28>
 80007ea:	4b5a      	ldr	r3, [pc, #360]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a59      	ldr	r2, [pc, #356]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80007f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f4:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 80007f6:	e0a6      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007fe:	d106      	bne.n	800080e <TIM_PeripheralClockControl+0x3e>
 8000800:	4b54      	ldr	r3, [pc, #336]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a53      	ldr	r2, [pc, #332]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	61d3      	str	r3, [r2, #28]
}
 800080c:	e09b      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a51      	ldr	r2, [pc, #324]	; (8000958 <TIM_PeripheralClockControl+0x188>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <TIM_PeripheralClockControl+0x54>
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a4e      	ldr	r2, [pc, #312]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	61d3      	str	r3, [r2, #28]
}
 8000822:	e090      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a4d      	ldr	r2, [pc, #308]	; (800095c <TIM_PeripheralClockControl+0x18c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <TIM_PeripheralClockControl+0x6a>
 800082c:	4b49      	ldr	r3, [pc, #292]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a48      	ldr	r2, [pc, #288]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	61d3      	str	r3, [r2, #28]
}
 8000838:	e085      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a48      	ldr	r2, [pc, #288]	; (8000960 <TIM_PeripheralClockControl+0x190>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <TIM_PeripheralClockControl+0x80>
 8000842:	4b44      	ldr	r3, [pc, #272]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	61d3      	str	r3, [r2, #28]
}
 800084e:	e07a      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a44      	ldr	r2, [pc, #272]	; (8000964 <TIM_PeripheralClockControl+0x194>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <TIM_PeripheralClockControl+0x96>
 8000858:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a3d      	ldr	r2, [pc, #244]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	61d3      	str	r3, [r2, #28]
}
 8000864:	e06f      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <TIM_PeripheralClockControl+0x198>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <TIM_PeripheralClockControl+0xac>
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	61d3      	str	r3, [r2, #28]
}
 800087a:	e064      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a3b      	ldr	r2, [pc, #236]	; (800096c <TIM_PeripheralClockControl+0x19c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d160      	bne.n	8000946 <TIM_PeripheralClockControl+0x176>
 8000884:	4b33      	ldr	r3, [pc, #204]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a32      	ldr	r2, [pc, #200]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800088a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800088e:	6193      	str	r3, [r2, #24]
}
 8000890:	e059      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d156      	bne.n	8000946 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <TIM_PeripheralClockControl+0x180>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <TIM_PeripheralClockControl+0xde>
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008aa:	6193      	str	r3, [r2, #24]
}
 80008ac:	e04b      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b4:	d106      	bne.n	80008c4 <TIM_PeripheralClockControl+0xf4>
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	61d3      	str	r3, [r2, #28]
}
 80008c2:	e040      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a24      	ldr	r2, [pc, #144]	; (8000958 <TIM_PeripheralClockControl+0x188>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <TIM_PeripheralClockControl+0x10a>
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008d2:	f023 0302 	bic.w	r3, r3, #2
 80008d6:	61d3      	str	r3, [r2, #28]
}
 80008d8:	e035      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <TIM_PeripheralClockControl+0x18c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <TIM_PeripheralClockControl+0x120>
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008e8:	f023 0304 	bic.w	r3, r3, #4
 80008ec:	61d3      	str	r3, [r2, #28]
}
 80008ee:	e02a      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <TIM_PeripheralClockControl+0x190>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <TIM_PeripheralClockControl+0x136>
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 80008fe:	f023 0308 	bic.w	r3, r3, #8
 8000902:	61d3      	str	r3, [r2, #28]
}
 8000904:	e01f      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <TIM_PeripheralClockControl+0x194>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <TIM_PeripheralClockControl+0x14c>
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000914:	f023 0310 	bic.w	r3, r3, #16
 8000918:	61d3      	str	r3, [r2, #28]
}
 800091a:	e014      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <TIM_PeripheralClockControl+0x198>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <TIM_PeripheralClockControl+0x162>
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800092a:	f023 0320 	bic.w	r3, r3, #32
 800092e:	61d3      	str	r3, [r2, #28]
}
 8000930:	e009      	b.n	8000946 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <TIM_PeripheralClockControl+0x19c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d105      	bne.n	8000946 <TIM_PeripheralClockControl+0x176>
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <TIM_PeripheralClockControl+0x184>)
 8000940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000944:	6193      	str	r3, [r2, #24]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40012c00 	.word	0x40012c00
 8000954:	40021000 	.word	0x40021000
 8000958:	40000400 	.word	0x40000400
 800095c:	40000800 	.word	0x40000800
 8000960:	40000c00 	.word	0x40000c00
 8000964:	40001000 	.word	0x40001000
 8000968:	40001400 	.word	0x40001400
 800096c:	40013400 	.word	0x40013400

08000970 <TIM_IRQHandling>:
}



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00c      	beq.n	80009b0 <TIM_IRQHandling+0x40>
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d009      	beq.n	80009b0 <TIM_IRQHandling+0x40>
	{
		// This interrupt is generated by Update Event

		GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800099c:	2102      	movs	r1, #2
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <TIM_IRQHandling+0x48>)
 80009a0:	f7ff fe24 	bl	80005ec <GPIO_TogglePin>

		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <TIM_IRQHandling+0x4c>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <TIM_IRQHandling+0x4c>)
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	6113      	str	r3, [r2, #16]
	}

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40001000 	.word	0x40001000

080009c0 <USART1_IRQHandler>:

#include "main.h"


void USART1_IRQHandler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <TIM6_IRQHandler>:


void TIM6_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM6_IRQHandler+0x10>)
 80009d2:	f7ff ffcd 	bl	8000970 <TIM_IRQHandling>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000001c 	.word	0x2000001c

080009e0 <main>:

TIM_HandleTypeDef TIM6Handle;


int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 80009e4:	2048      	movs	r0, #72	; 0x48
 80009e6:	f000 f897 	bl	8000b18 <SystemClock_Config>

	GPIOTest_Init();
 80009ea:	f000 f9cf 	bl	8000d8c <GPIOTest_Init>

	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 80009ee:	2220      	movs	r2, #32
 80009f0:	2100      	movs	r1, #0
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <main+0x4c>)
 80009f4:	f000 fa6a 	bl	8000ecc <memset>

	TIM6_Init(&TIM6Handle);
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <main+0x4c>)
 80009fa:	f000 f9f5 	bl	8000de8 <TIM6_Init>

	NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 80009fe:	2201      	movs	r2, #1
 8000a00:	210f      	movs	r1, #15
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f000 f820 	bl	8000a48 <NVIC_IRQConfig>
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <main+0x4c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <main+0x4c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f042 0201 	orr.w	r2, r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <main+0x4c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <main+0x4c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	601a      	str	r2, [r3, #0]


	while(1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x48>
 8000a2a:	bf00      	nop
 8000a2c:	2000001c 	.word	0x2000001c

08000a30 <TIM_Base_MspInit>:
}



void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
//		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
//		GPIO_Init(GPIOA, &TIMx_GPIOHandle.Init);
//	}
//
//	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(TIMx, ENABLE);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fec8 	bl	80007d0 <TIM_PeripheralClockControl>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <NVIC_IRQConfig>:

#include "main.h"


void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d11d      	bne.n	8000a9c <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	d80a      	bhi.n	8000a7c <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	4611      	mov	r1, r2
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e033      	b.n	8000ae4 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000a80:	d830      	bhi.n	8000ae4 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	f002 021f 	and.w	r2, r2, #31
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6053      	str	r3, [r2, #4]
 8000a9a:	e023      	b.n	8000ae4 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 8000a9c:	797b      	ldrb	r3, [r7, #5]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d120      	bne.n	8000ae4 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b1f      	cmp	r3, #31
 8000aa6:	d80c      	bhi.n	8000ac2 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ac0:	e010      	b.n	8000ae4 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ac6:	d80d      	bhi.n	8000ae4 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	f002 021f 	and.w	r2, r2, #31
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4413      	add	r3, r2
 8000aea:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b259      	sxtb	r1, r3
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <NVIC_IRQConfig+0xcc>)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	b2c9      	uxtb	r1, r1
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b092      	sub	sp, #72	; 0x48
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2228      	movs	r2, #40	; 0x28
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f9cb 	bl	8000ecc <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	2214      	movs	r2, #20
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f9c4 	bl	8000ecc <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8000b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4c:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	3b10      	subs	r3, #16
 8000b60:	2b38      	cmp	r3, #56	; 0x38
 8000b62:	f200 8101 	bhi.w	8000d68 <SystemClock_Config+0x250>
 8000b66:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <SystemClock_Config+0x54>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	08000c51 	.word	0x08000c51
 8000b70:	08000d69 	.word	0x08000d69
 8000b74:	08000d69 	.word	0x08000d69
 8000b78:	08000d69 	.word	0x08000d69
 8000b7c:	08000d69 	.word	0x08000d69
 8000b80:	08000d69 	.word	0x08000d69
 8000b84:	08000d69 	.word	0x08000d69
 8000b88:	08000d69 	.word	0x08000d69
 8000b8c:	08000c71 	.word	0x08000c71
 8000b90:	08000d69 	.word	0x08000d69
 8000b94:	08000d69 	.word	0x08000d69
 8000b98:	08000d69 	.word	0x08000d69
 8000b9c:	08000d69 	.word	0x08000d69
 8000ba0:	08000d69 	.word	0x08000d69
 8000ba4:	08000d69 	.word	0x08000d69
 8000ba8:	08000d69 	.word	0x08000d69
 8000bac:	08000c93 	.word	0x08000c93
 8000bb0:	08000d69 	.word	0x08000d69
 8000bb4:	08000d69 	.word	0x08000d69
 8000bb8:	08000d69 	.word	0x08000d69
 8000bbc:	08000d69 	.word	0x08000d69
 8000bc0:	08000d69 	.word	0x08000d69
 8000bc4:	08000d69 	.word	0x08000d69
 8000bc8:	08000d69 	.word	0x08000d69
 8000bcc:	08000cb5 	.word	0x08000cb5
 8000bd0:	08000d69 	.word	0x08000d69
 8000bd4:	08000d69 	.word	0x08000d69
 8000bd8:	08000d69 	.word	0x08000d69
 8000bdc:	08000d69 	.word	0x08000d69
 8000be0:	08000d69 	.word	0x08000d69
 8000be4:	08000d69 	.word	0x08000d69
 8000be8:	08000d69 	.word	0x08000d69
 8000bec:	08000cd9 	.word	0x08000cd9
 8000bf0:	08000d69 	.word	0x08000d69
 8000bf4:	08000d69 	.word	0x08000d69
 8000bf8:	08000d69 	.word	0x08000d69
 8000bfc:	08000d69 	.word	0x08000d69
 8000c00:	08000d69 	.word	0x08000d69
 8000c04:	08000d69 	.word	0x08000d69
 8000c08:	08000d69 	.word	0x08000d69
 8000c0c:	08000cfd 	.word	0x08000cfd
 8000c10:	08000d69 	.word	0x08000d69
 8000c14:	08000d69 	.word	0x08000d69
 8000c18:	08000d69 	.word	0x08000d69
 8000c1c:	08000d69 	.word	0x08000d69
 8000c20:	08000d69 	.word	0x08000d69
 8000c24:	08000d69 	.word	0x08000d69
 8000c28:	08000d69 	.word	0x08000d69
 8000c2c:	08000d21 	.word	0x08000d21
 8000c30:	08000d69 	.word	0x08000d69
 8000c34:	08000d69 	.word	0x08000d69
 8000c38:	08000d69 	.word	0x08000d69
 8000c3c:	08000d69 	.word	0x08000d69
 8000c40:	08000d69 	.word	0x08000d69
 8000c44:	08000d69 	.word	0x08000d69
 8000c48:	08000d69 	.word	0x08000d69
 8000c4c:	08000d45 	.word	0x08000d45
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c54:	230f      	movs	r3, #15
 8000c56:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000c6e:	e07c      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8000c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c74:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c76:	230f      	movs	r3, #15
 8000c78:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000c90:	e06b      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c96:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000cb2:	e05a      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8000cb4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000cd6:	e048      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000cfa:	e036      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8000cfc:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d02:	230f      	movs	r3, #15
 8000d04:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000d1e:	e024      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d20:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d24:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d26:	230f      	movs	r3, #15
 8000d28:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000d42:	e012      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d48:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8000d66:	e000      	b.n	8000d6a <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8000d68:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fc5c 	bl	800062c <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8000d74:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fca4 	bl	80006cc <RCC_ClockConfig>
}
 8000d84:	bf00      	nop
 8000d86:	3748      	adds	r7, #72	; 0x48
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <GPIOTest_Init>:
	Delay_us(time_ms * 1000);
}


void GPIOTest_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Test;

	memset(&GPIO_Test, 0, sizeof(GPIO_Test));
 8000d92:	463b      	mov	r3, r7
 8000d94:	2210      	movs	r2, #16
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f897 	bl	8000ecc <memset>
	GPIO_Test.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
	GPIO_Test.Pin = GPIO_PIN_0;
 8000da2:	2301      	movs	r3, #1
 8000da4:	603b      	str	r3, [r7, #0]
	GPIO_Test.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIO_Test);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <GPIOTest_Init+0x58>)
 8000db0:	f7ff f9de 	bl	8000170 <GPIO_Init>

	memset(&GPIO_Test, 0, sizeof(GPIO_Test));
 8000db4:	463b      	mov	r3, r7
 8000db6:	2210      	movs	r2, #16
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f886 	bl	8000ecc <memset>
	GPIO_Test.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
	GPIO_Test.Pin = GPIO_PIN_1;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
	GPIO_Test.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
	GPIO_Test.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIO_Test);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <GPIOTest_Init+0x58>)
 8000dd6:	f7ff f9cb 	bl	8000170 <GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40010800 	.word	0x40010800

08000de8 <TIM6_Init>:
	USART_Init(pUARTHandle);
}


void TIM6_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	pTIMHandle->Instance = TIM6;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <TIM6_Init+0x44>)
 8000df4:	601a      	str	r2, [r3, #0]
	pTIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
	pTIMHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
	pTIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	619a      	str	r2, [r3, #24]
	pTIMHandle->Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e0e:	605a      	str	r2, [r3, #4]
	pTIMHandle->Init.Period = (2000-1);	// 10kHz / 2000 = 5Hz
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e16:	60da      	str	r2, [r3, #12]
	pTIMHandle->Init.RepetitionCounter = 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(pTIMHandle);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fc96 	bl	8000750 <TIM_Base_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40001000 	.word	0x40001000

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e5a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f000 f811 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fdbd 	bl	80009e0 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e74:	08000efc 	.word	0x08000efc
  ldr r2, =_sbss
 8000e78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e7c:	2000003c 	.word	0x2000003c

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	2500      	movs	r5, #0
 8000e88:	4e0c      	ldr	r6, [pc, #48]	; (8000ebc <__libc_init_array+0x38>)
 8000e8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ec0 <__libc_init_array+0x3c>)
 8000e8c:	1ba4      	subs	r4, r4, r6
 8000e8e:	10a4      	asrs	r4, r4, #2
 8000e90:	42a5      	cmp	r5, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	f000 f822 	bl	8000edc <_init>
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4e0a      	ldr	r6, [pc, #40]	; (8000ec4 <__libc_init_array+0x40>)
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <__libc_init_array+0x44>)
 8000e9e:	1ba4      	subs	r4, r4, r6
 8000ea0:	10a4      	asrs	r4, r4, #2
 8000ea2:	42a5      	cmp	r5, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eac:	4798      	blx	r3
 8000eae:	3501      	adds	r5, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb6:	4798      	blx	r3
 8000eb8:	3501      	adds	r5, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000ef4 	.word	0x08000ef4
 8000ec0:	08000ef4 	.word	0x08000ef4
 8000ec4:	08000ef4 	.word	0x08000ef4
 8000ec8:	08000ef8 	.word	0x08000ef8

08000ecc <memset>:
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4402      	add	r2, r0
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d100      	bne.n	8000ed6 <memset+0xa>
 8000ed4:	4770      	bx	lr
 8000ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8000eda:	e7f9      	b.n	8000ed0 <memset+0x4>

08000edc <_init>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	bf00      	nop
 8000ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee2:	bc08      	pop	{r3}
 8000ee4:	469e      	mov	lr, r3
 8000ee6:	4770      	bx	lr

08000ee8 <_fini>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr
