
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  080080c8  080080c8  000180c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008b48  08008b48  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b48  08008b48  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008b50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d8  08008d28  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08008d28  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b9d  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ffe  00000000  00000000  00031d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f8  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a301  00000000  00000000  00034870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000864b  00000000  00000000  0003eb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002ae42  00000000  00000000  000471bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00071ffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000207c  00000000  00000000  0007207c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	080080ac 	.word	0x080080ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	080080ac 	.word	0x080080ac

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	d1ed      	bne.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <DMA_Init+0xbc>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d80f      	bhi.n	800101c <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <DMA_Init+0xc0>)
 8001004:	4413      	add	r3, r2
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <DMA_Init+0xc4>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	009a      	lsls	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <DMA_Init+0xc8>)
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
 800101a:	e00e      	b.n	800103a <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <DMA_Init+0xcc>)
 8001024:	4413      	add	r3, r2
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <DMA_Init+0xc4>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	009a      	lsls	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <DMA_Init+0xd0>)
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001050:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001054:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 800105e:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800106a:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001076:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40020407 	.word	0x40020407
 80010a4:	bffdfff8 	.word	0xbffdfff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40020000 	.word	0x40020000
 80010b0:	bffdfbf8 	.word	0xbffdfbf8
 80010b4:	40020400 	.word	0x40020400

080010b8 <DMA_SetConfig>:


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d108      	bne.n	80010f8 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 80010f6:	e007      	b.n	8001108 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ffbe 	bl	80010b8 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0204 	bic.w	r2, r2, #4
 800114a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2104      	movs	r1, #4
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80bf 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80bb 	beq.w	8001322 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b99      	ldr	r3, [pc, #612]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d958      	bls.n	800126a <DMA_IRQ_Handling+0xf6>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a97      	ldr	r2, [pc, #604]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d04f      	beq.n	8001262 <DMA_IRQ_Handling+0xee>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a96      	ldr	r2, [pc, #600]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d048      	beq.n	800125e <DMA_IRQ_Handling+0xea>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a94      	ldr	r2, [pc, #592]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d040      	beq.n	8001258 <DMA_IRQ_Handling+0xe4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a93      	ldr	r2, [pc, #588]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d038      	beq.n	8001252 <DMA_IRQ_Handling+0xde>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a91      	ldr	r2, [pc, #580]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d030      	beq.n	800124c <DMA_IRQ_Handling+0xd8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a90      	ldr	r2, [pc, #576]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d028      	beq.n	8001246 <DMA_IRQ_Handling+0xd2>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a87      	ldr	r2, [pc, #540]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d020      	beq.n	8001240 <DMA_IRQ_Handling+0xcc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8c      	ldr	r2, [pc, #560]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d019      	beq.n	800123c <DMA_IRQ_Handling+0xc8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a8a      	ldr	r2, [pc, #552]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d012      	beq.n	8001238 <DMA_IRQ_Handling+0xc4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a89      	ldr	r2, [pc, #548]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00a      	beq.n	8001232 <DMA_IRQ_Handling+0xbe>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a87      	ldr	r2, [pc, #540]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d102      	bne.n	800122c <DMA_IRQ_Handling+0xb8>
 8001226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122a:	e01b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800122c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001230:	e018      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	e015      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	e013      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800123c:	2304      	movs	r3, #4
 800123e:	e011      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001244:	e00e      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	e00b      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800124c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001250:	e008      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001256:	e005      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	e002      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 800125e:	2340      	movs	r3, #64	; 0x40
 8001260:	e000      	b.n	8001264 <DMA_IRQ_Handling+0xf0>
 8001262:	2304      	movs	r3, #4
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001266:	6053      	str	r3, [r2, #4]
 8001268:	e057      	b.n	800131a <DMA_IRQ_Handling+0x1a6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6b      	ldr	r2, [pc, #428]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d04f      	beq.n	8001314 <DMA_IRQ_Handling+0x1a0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d048      	beq.n	8001310 <DMA_IRQ_Handling+0x19c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a68      	ldr	r2, [pc, #416]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d040      	beq.n	800130a <DMA_IRQ_Handling+0x196>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a66      	ldr	r2, [pc, #408]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d038      	beq.n	8001304 <DMA_IRQ_Handling+0x190>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a65      	ldr	r2, [pc, #404]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d030      	beq.n	80012fe <DMA_IRQ_Handling+0x18a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a63      	ldr	r2, [pc, #396]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d028      	beq.n	80012f8 <DMA_IRQ_Handling+0x184>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5b      	ldr	r2, [pc, #364]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d020      	beq.n	80012f2 <DMA_IRQ_Handling+0x17e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <DMA_IRQ_Handling+0x17a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d012      	beq.n	80012ea <DMA_IRQ_Handling+0x176>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00a      	beq.n	80012e4 <DMA_IRQ_Handling+0x170>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d102      	bne.n	80012de <DMA_IRQ_Handling+0x16a>
 80012d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012dc:	e01b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012e2:	e018      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	e015      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	e013      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e011      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012f6:	e00e      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fc:	e00b      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 80012fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001302:	e008      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001308:	e005      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	e002      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	e000      	b.n	8001316 <DMA_IRQ_Handling+0x1a2>
 8001314:	2304      	movs	r3, #4
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <DMA_IRQ_Handling+0x2d4>)
 8001318:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2102      	movs	r1, #2
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80dd 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80d9 	beq.w	8001504 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d972      	bls.n	800144c <DMA_IRQ_Handling+0x2d8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <DMA_IRQ_Handling+0x2a8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d04f      	beq.n	8001410 <DMA_IRQ_Handling+0x29c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <DMA_IRQ_Handling+0x2ac>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d048      	beq.n	800140c <DMA_IRQ_Handling+0x298>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <DMA_IRQ_Handling+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d040      	beq.n	8001406 <DMA_IRQ_Handling+0x292>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <DMA_IRQ_Handling+0x2b4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d038      	beq.n	8001400 <DMA_IRQ_Handling+0x28c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <DMA_IRQ_Handling+0x2b8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d030      	beq.n	80013fa <DMA_IRQ_Handling+0x286>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <DMA_IRQ_Handling+0x2bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d028      	beq.n	80013f4 <DMA_IRQ_Handling+0x280>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <DMA_IRQ_Handling+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d020      	beq.n	80013ee <DMA_IRQ_Handling+0x27a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <DMA_IRQ_Handling+0x2c0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <DMA_IRQ_Handling+0x276>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <DMA_IRQ_Handling+0x2c4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d012      	beq.n	80013e6 <DMA_IRQ_Handling+0x272>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <DMA_IRQ_Handling+0x2c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00a      	beq.n	80013e0 <DMA_IRQ_Handling+0x26c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <DMA_IRQ_Handling+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <DMA_IRQ_Handling+0x266>
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	e01b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013de:	e018      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	e015      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013e6:	2320      	movs	r3, #32
 80013e8:	e013      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e011      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f2:	e00e      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f8:	e00b      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	e008      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	e005      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	e002      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 800140c:	2320      	movs	r3, #32
 800140e:	e000      	b.n	8001412 <DMA_IRQ_Handling+0x29e>
 8001410:	2302      	movs	r3, #2
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <DMA_IRQ_Handling+0x2d0>)
 8001414:	6053      	str	r3, [r2, #4]
 8001416:	e071      	b.n	80014fc <DMA_IRQ_Handling+0x388>
 8001418:	40020080 	.word	0x40020080
 800141c:	40020008 	.word	0x40020008
 8001420:	4002001c 	.word	0x4002001c
 8001424:	40020030 	.word	0x40020030
 8001428:	40020044 	.word	0x40020044
 800142c:	40020058 	.word	0x40020058
 8001430:	4002006c 	.word	0x4002006c
 8001434:	40020408 	.word	0x40020408
 8001438:	4002041c 	.word	0x4002041c
 800143c:	40020430 	.word	0x40020430
 8001440:	40020444 	.word	0x40020444
 8001444:	40020400 	.word	0x40020400
 8001448:	40020000 	.word	0x40020000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a9a      	ldr	r2, [pc, #616]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d04f      	beq.n	80014f6 <DMA_IRQ_Handling+0x382>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a99      	ldr	r2, [pc, #612]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d048      	beq.n	80014f2 <DMA_IRQ_Handling+0x37e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a97      	ldr	r2, [pc, #604]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d040      	beq.n	80014ec <DMA_IRQ_Handling+0x378>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a96      	ldr	r2, [pc, #600]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d038      	beq.n	80014e6 <DMA_IRQ_Handling+0x372>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a94      	ldr	r2, [pc, #592]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d030      	beq.n	80014e0 <DMA_IRQ_Handling+0x36c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d028      	beq.n	80014da <DMA_IRQ_Handling+0x366>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d020      	beq.n	80014d4 <DMA_IRQ_Handling+0x360>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <DMA_IRQ_Handling+0x35c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a8e      	ldr	r2, [pc, #568]	; (80016dc <DMA_IRQ_Handling+0x568>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d012      	beq.n	80014cc <DMA_IRQ_Handling+0x358>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8d      	ldr	r2, [pc, #564]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00a      	beq.n	80014c6 <DMA_IRQ_Handling+0x352>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a8b      	ldr	r2, [pc, #556]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d102      	bne.n	80014c0 <DMA_IRQ_Handling+0x34c>
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	e01b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	e018      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	e015      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014cc:	2320      	movs	r3, #32
 80014ce:	e013      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e011      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d8:	e00e      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014de:	e00b      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	e008      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	e005      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f0:	e002      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f2:	2320      	movs	r3, #32
 80014f4:	e000      	b.n	80014f8 <DMA_IRQ_Handling+0x384>
 80014f6:	2302      	movs	r3, #2
 80014f8:	4a7b      	ldr	r2, [pc, #492]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80014fa:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2108      	movs	r1, #8
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c3 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80bf 	beq.w	80016b2 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d958      	bls.n	80015f2 <DMA_IRQ_Handling+0x47e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <DMA_IRQ_Handling+0x548>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04f      	beq.n	80015ea <DMA_IRQ_Handling+0x476>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d048      	beq.n	80015e6 <DMA_IRQ_Handling+0x472>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d040      	beq.n	80015e0 <DMA_IRQ_Handling+0x46c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d038      	beq.n	80015da <DMA_IRQ_Handling+0x466>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <DMA_IRQ_Handling+0x558>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d030      	beq.n	80015d4 <DMA_IRQ_Handling+0x460>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d028      	beq.n	80015ce <DMA_IRQ_Handling+0x45a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d020      	beq.n	80015c8 <DMA_IRQ_Handling+0x454>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <DMA_IRQ_Handling+0x450>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d012      	beq.n	80015c0 <DMA_IRQ_Handling+0x44c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00a      	beq.n	80015ba <DMA_IRQ_Handling+0x446>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d102      	bne.n	80015b4 <DMA_IRQ_Handling+0x440>
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	e01b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	e018      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e015      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e013      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e011      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015cc:	e00e      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d2:	e00b      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	e008      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	e005      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	e002      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015e6:	2310      	movs	r3, #16
 80015e8:	e000      	b.n	80015ec <DMA_IRQ_Handling+0x478>
 80015ea:	2301      	movs	r3, #1
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <DMA_IRQ_Handling+0x578>)
 80015ee:	6053      	str	r3, [r2, #4]
 80015f0:	e057      	b.n	80016a2 <DMA_IRQ_Handling+0x52e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <DMA_IRQ_Handling+0x548>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04f      	beq.n	800169c <DMA_IRQ_Handling+0x528>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <DMA_IRQ_Handling+0x54c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d048      	beq.n	8001698 <DMA_IRQ_Handling+0x524>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2e      	ldr	r2, [pc, #184]	; (80016c4 <DMA_IRQ_Handling+0x550>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d040      	beq.n	8001692 <DMA_IRQ_Handling+0x51e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <DMA_IRQ_Handling+0x554>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d038      	beq.n	800168c <DMA_IRQ_Handling+0x518>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <DMA_IRQ_Handling+0x558>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d030      	beq.n	8001686 <DMA_IRQ_Handling+0x512>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <DMA_IRQ_Handling+0x55c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d028      	beq.n	8001680 <DMA_IRQ_Handling+0x50c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <DMA_IRQ_Handling+0x560>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d020      	beq.n	800167a <DMA_IRQ_Handling+0x506>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <DMA_IRQ_Handling+0x564>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <DMA_IRQ_Handling+0x502>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a25      	ldr	r2, [pc, #148]	; (80016dc <DMA_IRQ_Handling+0x568>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d012      	beq.n	8001672 <DMA_IRQ_Handling+0x4fe>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <DMA_IRQ_Handling+0x56c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00a      	beq.n	800166c <DMA_IRQ_Handling+0x4f8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <DMA_IRQ_Handling+0x570>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <DMA_IRQ_Handling+0x4f2>
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	e01b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	e018      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	e015      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001672:	2310      	movs	r3, #16
 8001674:	e013      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001676:	2301      	movs	r3, #1
 8001678:	e011      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167e:	e00e      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001684:	e00b      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168a:	e008      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	e005      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	e002      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 8001698:	2310      	movs	r3, #16
 800169a:	e000      	b.n	800169e <DMA_IRQ_Handling+0x52a>
 800169c:	2301      	movs	r3, #1
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <DMA_IRQ_Handling+0x574>)
 80016a0:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
	}
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020008 	.word	0x40020008
 80016c0:	4002001c 	.word	0x4002001c
 80016c4:	40020030 	.word	0x40020030
 80016c8:	40020044 	.word	0x40020044
 80016cc:	40020058 	.word	0x40020058
 80016d0:	4002006c 	.word	0x4002006c
 80016d4:	40020080 	.word	0x40020080
 80016d8:	40020408 	.word	0x40020408
 80016dc:	4002041c 	.word	0x4002041c
 80016e0:	40020430 	.word	0x40020430
 80016e4:	40020444 	.word	0x40020444
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a96      	ldr	r2, [pc, #600]	; (8001960 <GPIO_Init+0x270>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <GPIO_Init+0x28>
 800170a:	4b96      	ldr	r3, [pc, #600]	; (8001964 <GPIO_Init+0x274>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a95      	ldr	r2, [pc, #596]	; (8001964 <GPIO_Init+0x274>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	e03c      	b.n	8001792 <GPIO_Init+0xa2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a93      	ldr	r2, [pc, #588]	; (8001968 <GPIO_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d106      	bne.n	800172e <GPIO_Init+0x3e>
 8001720:	4b90      	ldr	r3, [pc, #576]	; (8001964 <GPIO_Init+0x274>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <GPIO_Init+0x274>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	e031      	b.n	8001792 <GPIO_Init+0xa2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a8e      	ldr	r2, [pc, #568]	; (800196c <GPIO_Init+0x27c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d106      	bne.n	8001744 <GPIO_Init+0x54>
 8001736:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <GPIO_Init+0x274>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <GPIO_Init+0x274>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	e026      	b.n	8001792 <GPIO_Init+0xa2>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a8a      	ldr	r2, [pc, #552]	; (8001970 <GPIO_Init+0x280>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d106      	bne.n	800175a <GPIO_Init+0x6a>
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <GPIO_Init+0x274>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a84      	ldr	r2, [pc, #528]	; (8001964 <GPIO_Init+0x274>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	e01b      	b.n	8001792 <GPIO_Init+0xa2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a85      	ldr	r2, [pc, #532]	; (8001974 <GPIO_Init+0x284>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d106      	bne.n	8001770 <GPIO_Init+0x80>
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <GPIO_Init+0x274>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <GPIO_Init+0x274>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	e010      	b.n	8001792 <GPIO_Init+0xa2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a81      	ldr	r2, [pc, #516]	; (8001978 <GPIO_Init+0x288>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <GPIO_Init+0x96>
 8001778:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <GPIO_Init+0x274>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a79      	ldr	r2, [pc, #484]	; (8001964 <GPIO_Init+0x274>)
 800177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	e005      	b.n	8001792 <GPIO_Init+0xa2>
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <GPIO_Init+0x274>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a76      	ldr	r2, [pc, #472]	; (8001964 <GPIO_Init+0x274>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	76fb      	strb	r3, [r7, #27]
 8001796:	e1d0      	b.n	8001b3a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	7efa      	ldrb	r2, [r7, #27]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 81c0 	beq.w	8001b2c <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d039      	beq.n	8001828 <GPIO_Init+0x138>
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d807      	bhi.n	80017c8 <GPIO_Init+0xd8>
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d016      	beq.n	80017ea <GPIO_Init+0xfa>
 80017bc:	2b01      	cmp	r3, #1
 80017be:	f0c0 8090 	bcc.w	80018e2 <GPIO_Init+0x1f2>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d04f      	beq.n	8001866 <GPIO_Init+0x176>
 80017c6:	e0bd      	b.n	8001944 <GPIO_Init+0x254>
 80017c8:	4a6c      	ldr	r2, [pc, #432]	; (800197c <GPIO_Init+0x28c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	f000 8089 	beq.w	80018e2 <GPIO_Init+0x1f2>
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <GPIO_Init+0x28c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <GPIO_Init+0xec>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d064      	beq.n	80018a4 <GPIO_Init+0x1b4>
 80017da:	e0b3      	b.n	8001944 <GPIO_Init+0x254>
 80017dc:	4a68      	ldr	r2, [pc, #416]	; (8001980 <GPIO_Init+0x290>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d07f      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e2:	4a68      	ldr	r2, [pc, #416]	; (8001984 <GPIO_Init+0x294>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d07c      	beq.n	80018e2 <GPIO_Init+0x1f2>
 80017e8:	e0ac      	b.n	8001944 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d104      	bne.n	80017fc <GPIO_Init+0x10c>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e010      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d104      	bne.n	800180e <GPIO_Init+0x11e>
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	e007      	b.n	800181e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d103      	bne.n	800181e <GPIO_Init+0x12e>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f043 0303 	orr.w	r3, r3, #3
 800181c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f023 030c 	bic.w	r3, r3, #12
 8001824:	61fb      	str	r3, [r7, #28]


					break;
 8001826:	e08d      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d104      	bne.n	800183a <GPIO_Init+0x14a>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	e010      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d104      	bne.n	800184c <GPIO_Init+0x15c>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e007      	b.n	800185c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d103      	bne.n	800185c <GPIO_Init+0x16c>
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f043 0303 	orr.w	r3, r3, #3
 800185a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	61fb      	str	r3, [r7, #28]

					break;
 8001864:	e06e      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d104      	bne.n	8001878 <GPIO_Init+0x188>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e010      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <GPIO_Init+0x19a>
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	e007      	b.n	800189a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d103      	bne.n	800189a <GPIO_Init+0x1aa>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f043 0303 	orr.w	r3, r3, #3
 8001898:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	61fb      	str	r3, [r7, #28]

					break;
 80018a2:	e04f      	b.n	8001944 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d104      	bne.n	80018b6 <GPIO_Init+0x1c6>
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e010      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <GPIO_Init+0x1d8>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e007      	b.n	80018d8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d103      	bne.n	80018d8 <GPIO_Init+0x1e8>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f043 0303 	orr.w	r3, r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f043 030c 	orr.w	r3, r3, #12
 80018de:	61fb      	str	r3, [r7, #28]

					break;
 80018e0:	e030      	b.n	8001944 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80018fa:	e022      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10d      	bne.n	8001920 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	7efa      	ldrb	r2, [r7, #27]
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
					break;
 800191e:	e010      	b.n	8001942 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d10c      	bne.n	8001942 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	7efa      	ldrb	r2, [r7, #27]
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	615a      	str	r2, [r3, #20]
					break;
 8001942:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001944:	7efb      	ldrb	r3, [r7, #27]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d801      	bhi.n	800194e <GPIO_Init+0x25e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <GPIO_Init+0x262>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	2b07      	cmp	r3, #7
 8001958:	d816      	bhi.n	8001988 <GPIO_Init+0x298>
 800195a:	7efb      	ldrb	r3, [r7, #27]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e016      	b.n	800198e <GPIO_Init+0x29e>
 8001960:	40010800 	.word	0x40010800
 8001964:	40021000 	.word	0x40021000
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40011400 	.word	0x40011400
 8001974:	40011800 	.word	0x40011800
 8001978:	40011c00 	.word	0x40011c00
 800197c:	10110000 	.word	0x10110000
 8001980:	10210000 	.word	0x10210000
 8001984:	10310000 	.word	0x10310000
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b8 	beq.w	8001b2c <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <GPIO_Init+0x45c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <GPIO_Init+0x45c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 80019d0:	7efb      	ldrb	r3, [r7, #27]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 80019d8:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <GPIO_Init+0x460>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	210f      	movs	r1, #15
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4958      	ldr	r1, [pc, #352]	; (8001b54 <GPIO_Init+0x464>)
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d01f      	beq.n	8001a38 <GPIO_Init+0x348>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4957      	ldr	r1, [pc, #348]	; (8001b58 <GPIO_Init+0x468>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d019      	beq.n	8001a34 <GPIO_Init+0x344>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4956      	ldr	r1, [pc, #344]	; (8001b5c <GPIO_Init+0x46c>)
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d013      	beq.n	8001a30 <GPIO_Init+0x340>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4955      	ldr	r1, [pc, #340]	; (8001b60 <GPIO_Init+0x470>)
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d00d      	beq.n	8001a2c <GPIO_Init+0x33c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4954      	ldr	r1, [pc, #336]	; (8001b64 <GPIO_Init+0x474>)
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d007      	beq.n	8001a28 <GPIO_Init+0x338>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4953      	ldr	r1, [pc, #332]	; (8001b68 <GPIO_Init+0x478>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d101      	bne.n	8001a24 <GPIO_Init+0x334>
 8001a20:	2305      	movs	r3, #5
 8001a22:	e00a      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e008      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <GPIO_Init+0x34a>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	0089      	lsls	r1, r1, #2
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	4943      	ldr	r1, [pc, #268]	; (8001b50 <GPIO_Init+0x460>)
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3302      	adds	r3, #2
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001a58:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <GPIO_Init+0x47c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	7efa      	ldrb	r2, [r7, #27]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4611      	mov	r1, r2
 8001a66:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <GPIO_Init+0x47c>)
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00a      	b.n	8001a84 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <GPIO_Init+0x47c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	7efa      	ldrb	r2, [r7, #27]
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	43d2      	mvns	r2, r2
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <GPIO_Init+0x47c>)
 8001a80:	400b      	ands	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <GPIO_Init+0x47c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	7efa      	ldrb	r2, [r7, #27]
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6053      	str	r3, [r2, #4]
 8001aa4:	e00a      	b.n	8001abc <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <GPIO_Init+0x47c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	7efa      	ldrb	r2, [r7, #27]
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	43d2      	mvns	r2, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <GPIO_Init+0x47c>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <GPIO_Init+0x47c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	7efa      	ldrb	r2, [r7, #27]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <GPIO_Init+0x47c>)
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]
 8001adc:	e00a      	b.n	8001af4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <GPIO_Init+0x47c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	7efa      	ldrb	r2, [r7, #27]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	43d2      	mvns	r2, r2
 8001aec:	4611      	mov	r1, r2
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <GPIO_Init+0x47c>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <GPIO_Init+0x47c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	7efa      	ldrb	r2, [r7, #27]
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <GPIO_Init+0x47c>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60d3      	str	r3, [r2, #12]
 8001b14:	e00a      	b.n	8001b2c <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <GPIO_Init+0x47c>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	7efa      	ldrb	r2, [r7, #27]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	43d2      	mvns	r2, r2
 8001b24:	4611      	mov	r1, r2
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <GPIO_Init+0x47c>)
 8001b28:	400b      	ands	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	3301      	adds	r3, #1
 8001b38:	76fb      	strb	r3, [r7, #27]
 8001b3a:	7efb      	ldrb	r3, [r7, #27]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	f67f ae2b 	bls.w	8001798 <GPIO_Init+0xa8>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40011800 	.word	0x40011800
 8001b68:	40011c00 	.word	0x40011c00
 8001b6c:	40010400 	.word	0x40010400

08001b70 <GPIO_ReadPin>:



/* IO operation functions *****************************************************/
uint8_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
	if((uint16_t)GPIOx->IDR & GPIO_Pin)		return GPIO_PIN_SET;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <GPIO_ReadPin+0x20>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <GPIO_ReadPin+0x22>
	else									return GPIO_PIN_RESET;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <GPIO_WritePin>:


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001bbe:	e006      	b.n	8001bce <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001bec:	883b      	ldrh	r3, [r7, #0]
 8001bee:	041a      	lsls	r2, r3, #16
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <GPIO_WritePort>:


void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <GPIO_WriteData>:


void GPIO_WriteData(GPIO_TypeDef *GPIOx, uint16_t Data)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Data;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <EXTI_IRQHandling+0x34>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <EXTI_IRQHandling+0x34>)
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	4905      	ldr	r1, [pc, #20]	; (8001c84 <EXTI_IRQHandling+0x34>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f004 f8c9 	bl	8005e0c <EXTI_Callback>
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010400 	.word	0x40010400

08001c88 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d011      	beq.n	8001cc0 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d10c      	bne.n	8001cc0 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001cb2:	bf00      	nop
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f9      	beq.n	8001cb4 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d128      	bne.n	8001d1a <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d105      	bne.n	8001cea <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ce8:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001d0c:	bf00      	nop
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <RCC_OscConfig+0x9c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f9      	beq.n	8001d0e <RCC_OscConfig+0x86>
	}
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40021000 	.word	0x40021000

08001d28 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <RCC_ClockConfig+0x7c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	491a      	ldr	r1, [pc, #104]	; (8001da4 <RCC_ClockConfig+0x7c>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4916      	ldr	r1, [pc, #88]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4911      	ldr	r1, [pc, #68]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 0203 	bic.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4908      	ldr	r1, [pc, #32]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001d8a:	bf00      	nop
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <RCC_ClockConfig+0x80>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f9      	beq.n	8001d8c <RCC_ClockConfig+0x64>
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000

08001dac <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <RCC_GetPLLOutputClock+0x70>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <RCC_GetPLLOutputClock+0x1e>
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <RCC_GetPLLOutputClock+0x70>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e020      	b.n	8001e10 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <RCC_GetPLLOutputClock+0x70>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <RCC_GetPLLOutputClock+0x74>)
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e001      	b.n	8001de4 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <RCC_GetPLLOutputClock+0x78>)
 8001de2:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <RCC_GetPLLOutputClock+0x70>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001df2:	7abb      	ldrb	r3, [r7, #10]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d102      	bne.n	8001dfe <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001df8:	2310      	movs	r3, #16
 8001dfa:	72fb      	strb	r3, [r7, #11]
 8001dfc:	e002      	b.n	8001e04 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001dfe:	7abb      	ldrb	r3, [r7, #10]
 8001e00:	3302      	adds	r3, #2
 8001e02:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001e04:	7afa      	ldrb	r2, [r7, #11]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	003d0900 	.word	0x003d0900

08001e28 <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b08d      	sub	sp, #52	; 0x34
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <RCC_GetPCLKxValue+0x144>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <RCC_GetPCLKxValue+0x148>)
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4e:	e00d      	b.n	8001e6c <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d102      	bne.n	8001e5e <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <RCC_GetPCLKxValue+0x148>)
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5c:	e006      	b.n	8001e6c <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001e5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d102      	bne.n	8001e6c <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001e66:	f7ff ffa1 	bl	8001dac <RCC_GetPLLOutputClock>
 8001e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001e6c:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <RCC_GetPCLKxValue+0x14c>)
 8001e6e:	f107 0410 	add.w	r4, r7, #16
 8001e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <RCC_GetPCLKxValue+0x144>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	d803      	bhi.n	8001e98 <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e96:	e00a      	b.n	8001eae <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e9c:	3b08      	subs	r3, #8
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <RCC_GetPCLKxValue+0x150>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11a      	bne.n	8001ef0 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <RCC_GetPCLKxValue+0x144>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d803      	bhi.n	8001eda <RCC_GetPCLKxValue+0xb2>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ed8:	e027      	b.n	8001f2a <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001eee:	e01c      	b.n	8001f2a <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d119      	bne.n	8001f2a <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <RCC_GetPCLKxValue+0x144>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d803      	bhi.n	8001f16 <RCC_GetPCLKxValue+0xee>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001f14:	e009      	b.n	8001f2a <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f20:	4413      	add	r3, r2
 8001f22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <RCC_GetPCLKxValue+0x11e>
 8001f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f44:	e00c      	b.n	8001f60 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d109      	bne.n	8001f60 <RCC_GetPCLKxValue+0x138>
 8001f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3734      	adds	r7, #52	; 0x34
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	080080c8 	.word	0x080080c8
 8001f78:	080080d8 	.word	0x080080d8

08001f7c <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f002 fbd3 	bl	8004730 <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f98:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	ea42 0103 	orr.w	r1, r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	0c1a      	lsrs	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 0204 	and.w	r2, r2, #4
 8002008:	605a      	str	r2, [r3, #4]
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d120      	bne.n	8002068 <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <SPI_PeripheralClockControl+0xa4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d106      	bne.n	800203c <SPI_PeripheralClockControl+0x28>
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002038:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 800203a:	e038      	b.n	80020ae <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <SPI_PeripheralClockControl+0xac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d106      	bne.n	8002052 <SPI_PeripheralClockControl+0x3e>
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204e:	61d3      	str	r3, [r2, #28]
}
 8002050:	e02d      	b.n	80020ae <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <SPI_PeripheralClockControl+0xb0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d129      	bne.n	80020ae <SPI_PeripheralClockControl+0x9a>
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	61d3      	str	r3, [r2, #28]
}
 8002066:	e022      	b.n	80020ae <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11f      	bne.n	80020ae <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <SPI_PeripheralClockControl+0xa4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d106      	bne.n	8002084 <SPI_PeripheralClockControl+0x70>
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 800207c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002080:	6193      	str	r3, [r2, #24]
}
 8002082:	e014      	b.n	80020ae <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <SPI_PeripheralClockControl+0xac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d106      	bne.n	800209a <SPI_PeripheralClockControl+0x86>
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 8002092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002096:	61d3      	str	r3, [r2, #28]
}
 8002098:	e009      	b.n	80020ae <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <SPI_PeripheralClockControl+0xb0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d105      	bne.n	80020ae <SPI_PeripheralClockControl+0x9a>
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SPI_PeripheralClockControl+0xa8>)
 80020a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020ac:	61d3      	str	r3, [r2, #28]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40013000 	.word	0x40013000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40003800 	.word	0x40003800
 80020c4:	40003c00 	.word	0x40003c00

080020c8 <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7f1b      	ldrb	r3, [r3, #28]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 f86e 	bl	80041c0 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f81f 	bl	8002128 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	771a      	strb	r2, [r3, #28]
 80020f0:	e000      	b.n	80020f4 <TIM_Base_Init+0x2c>
		return;
 80020f2:	bf00      	nop
}
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f002 f86f 	bl	80041f0 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f808 	bl	8002128 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	771a      	strb	r2, [r3, #28]
 800211e:	e000      	b.n	8002122 <TIM_PWM_Init+0x28>
		return;
 8002120:	bf00      	nop
}
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68d2      	ldr	r2, [r2, #12]
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6852      	ldr	r2, [r2, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6952      	ldr	r2, [r2, #20]
 8002178:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	615a      	str	r2, [r3, #20]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	switch (Channel)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	f200 80d3 	bhi.w	800234e <TIM_PWM_ConfigChannel+0x1ba>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <TIM_PWM_ConfigChannel+0x1c>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	0800234f 	.word	0x0800234f
 80021b8:	0800234f 	.word	0x0800234f
 80021bc:	0800234f 	.word	0x0800234f
 80021c0:	0800223d 	.word	0x0800223d
 80021c4:	0800234f 	.word	0x0800234f
 80021c8:	0800234f 	.word	0x0800234f
 80021cc:	0800234f 	.word	0x0800234f
 80021d0:	08002299 	.word	0x08002299
 80021d4:	0800234f 	.word	0x0800234f
 80021d8:	0800234f 	.word	0x0800234f
 80021dc:	0800234f 	.word	0x0800234f
 80021e0:	080022f3 	.word	0x080022f3
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f023 0102 	bic.w	r1, r3, #2
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	6852      	ldr	r2, [r2, #4]
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0208 	orr.w	r2, r2, #8
 8002238:	619a      	str	r2, [r3, #24]

			break;
 800223a:	e089      	b.n	8002350 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f023 0120 	bic.w	r1, r3, #32
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	011a      	lsls	r2, r3, #4
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	6852      	ldr	r2, [r2, #4]
 8002284:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002294:	619a      	str	r2, [r3, #24]

			break;
 8002296:	e05b      	b.n	8002350 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a6:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	6852      	ldr	r2, [r2, #4]
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	61da      	str	r2, [r3, #28]

			break;
 80022f0:	e02e      	b.n	8002350 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002300:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	031a      	lsls	r2, r3, #12
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	6852      	ldr	r2, [r2, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234a:	61da      	str	r2, [r3, #28]

			break;
 800234c:	e000      	b.n	8002350 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 800234e:	bf00      	nop
	}
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d157      	bne.n	800241e <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <TIM_PeripheralClockControl+0x180>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d106      	bne.n	8002384 <TIM_PeripheralClockControl+0x28>
 8002376:	4b5a      	ldr	r3, [pc, #360]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800237c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002380:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002382:	e0a6      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d106      	bne.n	800239a <TIM_PeripheralClockControl+0x3e>
 800238c:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a53      	ldr	r2, [pc, #332]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	61d3      	str	r3, [r2, #28]
}
 8002398:	e09b      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a51      	ldr	r2, [pc, #324]	; (80024e4 <TIM_PeripheralClockControl+0x188>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d106      	bne.n	80023b0 <TIM_PeripheralClockControl+0x54>
 80023a2:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	61d3      	str	r3, [r2, #28]
}
 80023ae:	e090      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <TIM_PeripheralClockControl+0x18c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d106      	bne.n	80023c6 <TIM_PeripheralClockControl+0x6a>
 80023b8:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a48      	ldr	r2, [pc, #288]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	61d3      	str	r3, [r2, #28]
}
 80023c4:	e085      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a48      	ldr	r2, [pc, #288]	; (80024ec <TIM_PeripheralClockControl+0x190>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d106      	bne.n	80023dc <TIM_PeripheralClockControl+0x80>
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	61d3      	str	r3, [r2, #28]
}
 80023da:	e07a      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <TIM_PeripheralClockControl+0x194>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d106      	bne.n	80023f2 <TIM_PeripheralClockControl+0x96>
 80023e4:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023ea:	f043 0310 	orr.w	r3, r3, #16
 80023ee:	61d3      	str	r3, [r2, #28]
}
 80023f0:	e06f      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a3f      	ldr	r2, [pc, #252]	; (80024f4 <TIM_PeripheralClockControl+0x198>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d106      	bne.n	8002408 <TIM_PeripheralClockControl+0xac>
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	61d3      	str	r3, [r2, #28]
}
 8002406:	e064      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <TIM_PeripheralClockControl+0x19c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d160      	bne.n	80024d2 <TIM_PeripheralClockControl+0x176>
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800241a:	6193      	str	r3, [r2, #24]
}
 800241c:	e059      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d156      	bne.n	80024d2 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a2d      	ldr	r2, [pc, #180]	; (80024dc <TIM_PeripheralClockControl+0x180>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d106      	bne.n	800243a <TIM_PeripheralClockControl+0xde>
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002436:	6193      	str	r3, [r2, #24]
}
 8002438:	e04b      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d106      	bne.n	8002450 <TIM_PeripheralClockControl+0xf4>
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	61d3      	str	r3, [r2, #28]
}
 800244e:	e040      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <TIM_PeripheralClockControl+0x188>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <TIM_PeripheralClockControl+0x10a>
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	61d3      	str	r3, [r2, #28]
}
 8002464:	e035      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <TIM_PeripheralClockControl+0x18c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d106      	bne.n	800247c <TIM_PeripheralClockControl+0x120>
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	61d3      	str	r3, [r2, #28]
}
 800247a:	e02a      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <TIM_PeripheralClockControl+0x190>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d106      	bne.n	8002492 <TIM_PeripheralClockControl+0x136>
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800248a:	f023 0308 	bic.w	r3, r3, #8
 800248e:	61d3      	str	r3, [r2, #28]
}
 8002490:	e01f      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <TIM_PeripheralClockControl+0x194>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d106      	bne.n	80024a8 <TIM_PeripheralClockControl+0x14c>
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80024a0:	f023 0310 	bic.w	r3, r3, #16
 80024a4:	61d3      	str	r3, [r2, #28]
}
 80024a6:	e014      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <TIM_PeripheralClockControl+0x198>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d106      	bne.n	80024be <TIM_PeripheralClockControl+0x162>
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80024b6:	f023 0320 	bic.w	r3, r3, #32
 80024ba:	61d3      	str	r3, [r2, #28]
}
 80024bc:	e009      	b.n	80024d2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <TIM_PeripheralClockControl+0x19c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d105      	bne.n	80024d2 <TIM_PeripheralClockControl+0x176>
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <TIM_PeripheralClockControl+0x184>)
 80024cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024d0:	6193      	str	r3, [r2, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	40001000 	.word	0x40001000
 80024f4:	40001400 	.word	0x40001400
 80024f8:	40013400 	.word	0x40013400

080024fc <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <TIM_PWM_Start+0x22>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	621a      	str	r2, [r3, #32]
 800251c:	e022      	b.n	8002564 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d108      	bne.n	8002536 <TIM_PWM_Start+0x3a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	621a      	str	r2, [r3, #32]
 8002534:	e016      	b.n	8002564 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d108      	bne.n	800254e <TIM_PWM_Start+0x52>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	e00a      	b.n	8002564 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d107      	bne.n	8002564 <TIM_PWM_Start+0x68>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002562:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <TIM_IRQHandling+0x3e>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <TIM_IRQHandling+0x48>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <TIM_IRQHandling+0x48>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f003 fafd 	bl	8005bc8 <TIM_PeriodElapsedCallback>
	}
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40001000 	.word	0x40001000

080025dc <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f001 fcff 	bl	8003fec <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f8db 	bl	80027b0 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800261a:	f023 030c 	bic.w	r3, r3, #12
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]
	config = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
	config = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	430a      	orrs	r2, r1
 800266a:	615a      	str	r2, [r3, #20]
	config = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 f8b6 	bl	80027ec <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f892 	bl	80027b0 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d136      	bne.n	800271c <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a39      	ldr	r2, [pc, #228]	; (8002798 <USART_PeripheralClockControl+0xfc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d106      	bne.n	80026c4 <USART_PeripheralClockControl+0x28>
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4a38      	ldr	r2, [pc, #224]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 80026c2:	e064      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <USART_PeripheralClockControl+0x104>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d106      	bne.n	80026da <USART_PeripheralClockControl+0x3e>
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a32      	ldr	r2, [pc, #200]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d6:	61d3      	str	r3, [r2, #28]
}
 80026d8:	e059      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <USART_PeripheralClockControl+0x108>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d106      	bne.n	80026f0 <USART_PeripheralClockControl+0x54>
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	61d3      	str	r3, [r2, #28]
}
 80026ee:	e04e      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <USART_PeripheralClockControl+0x10c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d106      	bne.n	8002706 <USART_PeripheralClockControl+0x6a>
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <USART_PeripheralClockControl+0x100>)
 80026fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002702:	61d3      	str	r3, [r2, #28]
}
 8002704:	e043      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <USART_PeripheralClockControl+0x110>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d13f      	bne.n	800278e <USART_PeripheralClockControl+0xf2>
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002718:	61d3      	str	r3, [r2, #28]
}
 800271a:	e038      	b.n	800278e <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d135      	bne.n	800278e <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <USART_PeripheralClockControl+0xfc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d106      	bne.n	8002738 <USART_PeripheralClockControl+0x9c>
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <USART_PeripheralClockControl+0x100>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002734:	6193      	str	r3, [r2, #24]
}
 8002736:	e02a      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <USART_PeripheralClockControl+0x104>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d106      	bne.n	800274e <USART_PeripheralClockControl+0xb2>
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002746:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800274a:	61d3      	str	r3, [r2, #28]
}
 800274c:	e01f      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <USART_PeripheralClockControl+0x108>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d106      	bne.n	8002764 <USART_PeripheralClockControl+0xc8>
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <USART_PeripheralClockControl+0x100>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	61d3      	str	r3, [r2, #28]
}
 8002762:	e014      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <USART_PeripheralClockControl+0x10c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d106      	bne.n	800277a <USART_PeripheralClockControl+0xde>
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <USART_PeripheralClockControl+0x100>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002772:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002776:	61d3      	str	r3, [r2, #28]
}
 8002778:	e009      	b.n	800278e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <USART_PeripheralClockControl+0x110>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d105      	bne.n	800278e <USART_PeripheralClockControl+0xf2>
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <USART_PeripheralClockControl+0x100>)
 8002788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800278c:	61d3      	str	r3, [r2, #28]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40013800 	.word	0x40013800
 800279c:	40021000 	.word	0x40021000
 80027a0:	40004400 	.word	0x40004400
 80027a4:	40004800 	.word	0x40004800
 80027a8:	40004c00 	.word	0x40004c00
 80027ac:	40005000 	.word	0x40005000

080027b0 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <USART_PeripheralControl+0x20>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 80027ce:	e008      	b.n	80027e2 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <USART_PeripheralControl+0x32>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60da      	str	r2, [r3, #12]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <USART_SetBaudRate+0xbc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d104      	bne.n	8002808 <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff fb12 	bl	8001e28 <RCC_GetPCLKxValue>
 8002804:	61f8      	str	r0, [r7, #28]
 8002806:	e003      	b.n	8002810 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 8002808:	2000      	movs	r0, #0
 800280a:	f7ff fb0d 	bl	8001e28 <RCC_GetPCLKxValue>
 800280e:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 8002810:	69f8      	ldr	r0, [r7, #28]
 8002812:	f7fe fa1f 	bl	8000c54 <__aeabi_ui2f>
 8002816:	4604      	mov	r4, r0
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa19 	bl	8000c54 <__aeabi_ui2f>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe fb20 	bl	8000e6c <__aeabi_fdiv>
 800282c:	4603      	mov	r3, r0
 800282e:	491f      	ldr	r1, [pc, #124]	; (80028ac <USART_SetBaudRate+0xc0>)
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fa67 	bl	8000d04 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fbb3 	bl	8000fa4 <__aeabi_f2uiz>
 800283e:	4603      	mov	r3, r0
 8002840:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <USART_SetBaudRate+0xc4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	0089      	lsls	r1, r1, #2
 800285a:	440b      	add	r3, r1
 800285c:	4619      	mov	r1, r3
 800285e:	0088      	lsls	r0, r1, #2
 8002860:	4619      	mov	r1, r3
 8002862:	4603      	mov	r3, r0
 8002864:	440b      	add	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <USART_SetBaudRate+0xc4>)
 8002876:	fb82 1203 	smull	r1, r2, r2, r3
 800287a:	1152      	asrs	r2, r2, #5
 800287c:	17db      	asrs	r3, r3, #31
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0119      	lsls	r1, r3, #4
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	430b      	orrs	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	3724      	adds	r7, #36	; 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	40013800 	.word	0x40013800
 80028ac:	42c80000 	.word	0x42c80000
 80028b0:	51eb851f 	.word	0x51eb851f

080028b4 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <UART_Transmit_DMA+0x84>)
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <UART_Transmit_DMA+0x88>)
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <UART_Transmit_DMA+0x8c>)
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3304      	adds	r3, #4
 8002908:	461a      	mov	r2, r3
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f7fe fc01 	bl	8001112 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800292e:	615a      	str	r2, [r3, #20]
}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	0800297b 	.word	0x0800297b
 800293c:	08002997 	.word	0x08002997
 8002940:	080029b3 	.word	0x080029b3

08002944 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ffdb 	bl	8002944 <UART_TxCpltCallback>
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff ffd6 	bl	8002956 <UART_TxHalfCpltCallback>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ffd1 	bl	8002968 <UART_ErrorCallback>
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 fc82 	bl	80042e0 <BLDC_MspInit>

}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029f2:	3b01      	subs	r3, #1
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d87b      	bhi.n	8002af0 <BLDC_Drive+0x10c>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <BLDC_Drive+0x1c>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002acd 	.word	0x08002acd
 8002a04:	08002a3d 	.word	0x08002a3d
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a85 	.word	0x08002a85
 8002a10:	08002aa9 	.word	0x08002aa9
 8002a14:	08002a61 	.word	0x08002a61
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <BLDC_Drive+0x46>
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fb0a 	bl	800303c <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 8002a28:	e064      	b.n	8002af4 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d15f      	bne.n	8002af4 <BLDC_Drive+0x110>
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa59 	bl	8002eec <BLDC_Step2>
			break;
 8002a3a:	e05b      	b.n	8002af4 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <BLDC_Drive+0x6a>
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fac0 	bl	8002fcc <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002a4c:	e054      	b.n	8002af8 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d14f      	bne.n	8002af8 <BLDC_Drive+0x114>
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa0f 	bl	8002e7c <BLDC_Step1>
			break;
 8002a5e:	e04b      	b.n	8002af8 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <BLDC_Drive+0x8e>
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa76 	bl	8002f5c <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8002a70:	e044      	b.n	8002afc <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d13f      	bne.n	8002afc <BLDC_Drive+0x118>
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fb15 	bl	80030ac <BLDC_Step6>
			break;
 8002a82:	e03b      	b.n	8002afc <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <BLDC_Drive+0xb2>
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa2c 	bl	8002eec <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002a94:	e034      	b.n	8002b00 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d12f      	bne.n	8002b00 <BLDC_Drive+0x11c>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 facb 	bl	800303c <BLDC_Step5>
			break;
 8002aa6:	e02b      	b.n	8002b00 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <BLDC_Drive+0xd6>
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f9e2 	bl	8002e7c <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8002ab8:	e024      	b.n	8002b04 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d11f      	bne.n	8002b04 <BLDC_Drive+0x120>
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa81 	bl	8002fcc <BLDC_Step4>
			break;
 8002aca:	e01b      	b.n	8002b04 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <BLDC_Drive+0xfa>
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fae8 	bl	80030ac <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002adc:	e014      	b.n	8002b08 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10f      	bne.n	8002b08 <BLDC_Drive+0x124>
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fa37 	bl	8002f5c <BLDC_Step3>
			break;
 8002aee:	e00b      	b.n	8002b08 <BLDC_Drive+0x124>
		}

		default :
			break;
 8002af0:	bf00      	nop
 8002af2:	e00a      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002af4:	bf00      	nop
 8002af6:	e008      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002af8:	bf00      	nop
 8002afa:	e006      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002afc:	bf00      	nop
 8002afe:	e004      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <BLDC_Drive+0x126>
			break;
 8002b08:	bf00      	nop
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8002b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fc70 	bl	8000424 <__aeabi_i2d>
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <BLDC_Get_Speed+0x94>)
 8002b4a:	f7fd fcd5 	bl	80004f8 <__aeabi_dmul>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	4625      	mov	r5, r4
 8002b54:	461c      	mov	r4, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b64:	fb03 f302 	mul.w	r3, r3, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fc5b 	bl	8000424 <__aeabi_i2d>
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <BLDC_Get_Speed+0x98>)
 8002b74:	f7fd fcc0 	bl	80004f8 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd fde4 	bl	800074c <__aeabi_ddiv>
 8002b84:	4603      	mov	r3, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b90:	f7fd fddc 	bl	800074c <__aeabi_ddiv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	404e0000 	.word	0x404e0000
 8002bac:	40080000 	.word	0x40080000

08002bb0 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	f200 8093 	bhi.w	8002cec <BLDC_Get_Position+0x13c>
 8002bc6:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <BLDC_Get_Position+0x1c>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002cc1 	.word	0x08002cc1
 8002bd0:	08002c11 	.word	0x08002c11
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002c69 	.word	0x08002c69
 8002bdc:	08002c95 	.word	0x08002c95
 8002be0:	08002c3d 	.word	0x08002c3d
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d105      	bne.n	8002bfa <BLDC_Get_Position+0x4a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002bf8:	e07a      	b.n	8002cf0 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d175      	bne.n	8002cf0 <BLDC_Get_Position+0x140>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c0e:	e06f      	b.n	8002cf0 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d105      	bne.n	8002c26 <BLDC_Get_Position+0x76>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002c24:	e066      	b.n	8002cf4 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d161      	bne.n	8002cf4 <BLDC_Get_Position+0x144>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c3a:	e05b      	b.n	8002cf4 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d105      	bne.n	8002c52 <BLDC_Get_Position+0xa2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002c50:	e052      	b.n	8002cf8 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d14d      	bne.n	8002cf8 <BLDC_Get_Position+0x148>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	1e5a      	subs	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c66:	e047      	b.n	8002cf8 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d105      	bne.n	8002c7e <BLDC_Get_Position+0xce>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002c7c:	e03e      	b.n	8002cfc <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d139      	bne.n	8002cfc <BLDC_Get_Position+0x14c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c92:	e033      	b.n	8002cfc <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <BLDC_Get_Position+0xfa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002ca8:	e02a      	b.n	8002d00 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d125      	bne.n	8002d00 <BLDC_Get_Position+0x150>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002cbe:	e01f      	b.n	8002d00 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d105      	bne.n	8002cd6 <BLDC_Get_Position+0x126>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002cd4:	e016      	b.n	8002d04 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d111      	bne.n	8002d04 <BLDC_Get_Position+0x154>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002cea:	e00b      	b.n	8002d04 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002cec:	bf00      	nop
 8002cee:	e00a      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002cf0:	bf00      	nop
 8002cf2:	e008      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002cf4:	bf00      	nop
 8002cf6:	e006      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002cf8:	bf00      	nop
 8002cfa:	e004      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <BLDC_Get_Position+0x156>
			break;
 8002d04:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fb8a 	bl	8000424 <__aeabi_i2d>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002d16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	f7fd fbeb 	bl	80004f8 <__aeabi_dmul>
 8002d22:	4603      	mov	r3, r0
 8002d24:	460c      	mov	r4, r1
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}

08002d40 <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6858      	ldr	r0, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fe ff21 	bl	8001b9c <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0210 	bic.w	r2, r2, #16
 8002d80:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d94:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002d96:	200a      	movs	r0, #10
 8002d98:	f000 ff0c 	bl	8003bb4 <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	2210      	movs	r2, #16
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 f93b 	bl	8006020 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002db8:	2301      	movs	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fc92 	bl	80016f0 <GPIO_Init>
	Delay_ms(10);
 8002dcc:	200a      	movs	r0, #10
 8002dce:	f000 fef1 	bl	8003bb4 <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6898      	ldr	r0, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fe fedc 	bl	8001b9c <GPIO_WritePin>
	Delay_ms(10);
 8002de4:	200a      	movs	r0, #10
 8002de6:	f000 fee5 	bl	8003bb4 <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6898      	ldr	r0, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7fe fed0 	bl	8001b9c <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	2210      	movs	r2, #16
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f90b 	bl	8006020 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f107 0208 	add.w	r2, r7, #8
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fc62 	bl	80016f0 <GPIO_Init>
	Delay_ms(10);
 8002e2c:	200a      	movs	r0, #10
 8002e2e:	f000 fec1 	bl	8003bb4 <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0210 	orr.w	r2, r2, #16
 8002e58:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6c:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002e6e:	200a      	movs	r0, #10
 8002e70:	f000 fea0 	bl	8003bb4 <Delay_ms>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4812      	ldr	r0, [pc, #72]	; (8002ee8 <BLDC_Step1+0x6c>)
 8002e9e:	f7fe fe9b 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0210 	orr.w	r2, r2, #16
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40010c00 	.word	0x40010c00

08002eec <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b299      	uxth	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4812      	ldr	r0, [pc, #72]	; (8002f58 <BLDC_Step2+0x6c>)
 8002f0e:	f7fe fe63 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40010c00 	.word	0x40010c00

08002f5c <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	b299      	uxth	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4812      	ldr	r0, [pc, #72]	; (8002fc8 <BLDC_Step3+0x6c>)
 8002f7e:	f7fe fe2b 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0210 	bic.w	r2, r2, #16
 8002f94:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40010c00 	.word	0x40010c00

08002fcc <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	b299      	uxth	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	4812      	ldr	r0, [pc, #72]	; (8003038 <BLDC_Step4+0x6c>)
 8002fee:	f7fe fdf3 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a1a      	ldr	r2, [r3, #32]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0210 	bic.w	r2, r2, #16
 8003004:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003018:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40010c00 	.word	0x40010c00

0800303c <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	b299      	uxth	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b29b      	uxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	4812      	ldr	r0, [pc, #72]	; (80030a8 <BLDC_Step5+0x6c>)
 800305e:	f7fe fdbb 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0210 	bic.w	r2, r2, #16
 8003088:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40010c00 	.word	0x40010c00

080030ac <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	b299      	uxth	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4812      	ldr	r0, [pc, #72]	; (8003118 <BLDC_Step6+0x6c>)
 80030ce:	f7fe fd83 	bl	8001bd8 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40010c00 	.word	0x40010c00

0800311c <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 800311c:	b5b0      	push	{r4, r5, r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 8003128:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800312c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003130:	f7fd f82a 	bl	8000188 <__aeabi_dsub>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800314a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800314e:	461a      	mov	r2, r3
 8003150:	4623      	mov	r3, r4
 8003152:	f7fd f9d1 	bl	80004f8 <__aeabi_dmul>
 8003156:	4603      	mov	r3, r0
 8003158:	460c      	mov	r4, r1
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8003172:	f7fd f9c1 	bl	80004f8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003182:	f7fd f9b9 	bl	80004f8 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4620      	mov	r0, r4
 800318c:	4629      	mov	r1, r5
 800318e:	f7fc fffd 	bl	800018c <__adddf3>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80031ae:	f7fc ffeb 	bl	8000188 <__aeabi_dsub>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4620      	mov	r0, r4
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7fd f99d 	bl	80004f8 <__aeabi_dmul>
 80031be:	4603      	mov	r3, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	4618      	mov	r0, r3
 80031c4:	4621      	mov	r1, r4
 80031c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ca:	f7fd fabf 	bl	800074c <__aeabi_ddiv>
 80031ce:	4603      	mov	r3, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80031e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	f7fc ffce 	bl	800018c <__adddf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	4618      	mov	r0, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80031fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003202:	461a      	mov	r2, r3
 8003204:	4623      	mov	r3, r4
 8003206:	f7fc ffc1 	bl	800018c <__adddf3>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800321a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bdb0      	pop	{r4, r5, r7, pc}

0800322c <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	b08b      	sub	sp, #44	; 0x2c
 8003230:	af04      	add	r7, sp, #16
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003244:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003248:	e9d7 1200 	ldrd	r1, r2, [r7]
 800324c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003250:	e9cd 3400 	strd	r3, r4, [sp]
 8003254:	462a      	mov	r2, r5
 8003256:	4633      	mov	r3, r6
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff ff5f 	bl	800311c <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	f7fd fbca 	bl	8000a04 <__aeabi_dcmpge>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <BLDC_SpeedPID+0x54>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800327e:	e00f      	b.n	80032a0 <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f7fd fba5 	bl	80009dc <__aeabi_dcmplt>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <BLDC_SpeedPID+0x74>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80032a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	4621      	mov	r1, r4
 80032ae:	f7fd fbd3 	bl	8000a58 <__aeabi_d2iz>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bfb8      	it	lt
 80032b8:	425b      	neglt	r3, r3
 80032ba:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 80032bc:	8afb      	ldrh	r3, [r7, #22]
 80032be:	2b5f      	cmp	r3, #95	; 0x5f
 80032c0:	d901      	bls.n	80032c6 <BLDC_SpeedPID+0x9a>
 80032c2:	235f      	movs	r3, #95	; 0x5f
 80032c4:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	4619      	mov	r1, r3
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f002 fe37 	bl	8005f3e <SetPwmDuty>
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032d8 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032dc:	b08f      	sub	sp, #60	; 0x3c
 80032de:	af04      	add	r7, sp, #16
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24
 80032e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 80032e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ec:	f000 f8b2 	bl	8003454 <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	//BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80032fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003300:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003304:	e9cd 1200 	strd	r1, r2, [sp]
 8003308:	462a      	mov	r2, r5
 800330a:	4633      	mov	r3, r6
 800330c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800330e:	f7ff ff05 	bl	800311c <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003318:	4b4c      	ldr	r3, [pc, #304]	; (800344c <BLDC_PositionPID+0x174>)
 800331a:	cb18      	ldmia	r3, {r3, r4}
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fd fb7a 	bl	8000a18 <__aeabi_dcmpgt>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <BLDC_PositionPID+0x5e>
 800332a:	4b48      	ldr	r3, [pc, #288]	; (800344c <BLDC_PositionPID+0x174>)
 800332c:	cb18      	ldmia	r3, {r3, r4}
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 8003334:	e017      	b.n	8003366 <BLDC_PositionPID+0x8e>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <BLDC_PositionPID+0x174>)
 800333e:	cb18      	ldmia	r3, {r3, r4}
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800334c:	f7fd fb46 	bl	80009dc <__aeabi_dcmplt>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <BLDC_PositionPID+0x8e>
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <BLDC_PositionPID+0x174>)
 8003358:	cb18      	ldmia	r3, {r3, r4}
 800335a:	469a      	mov	sl, r3
 800335c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fd fb46 	bl	8000a04 <__aeabi_dcmpge>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <BLDC_PositionPID+0xf0>
	{
		pBLDCHandle->RotationDir = CW;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800338c:	4b30      	ldr	r3, [pc, #192]	; (8003450 <BLDC_PositionPID+0x178>)
 800338e:	cb18      	ldmia	r3, {r3, r4}
 8003390:	461a      	mov	r2, r3
 8003392:	4623      	mov	r3, r4
 8003394:	f7fd fb22 	bl	80009dc <__aeabi_dcmplt>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <BLDC_PositionPID+0xd0>
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <BLDC_PositionPID+0x178>)
 80033a0:	cb18      	ldmia	r3, {r3, r4}
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80033ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	4621      	mov	r1, r4
 80033b6:	f7fd fb77 	bl	8000aa8 <__aeabi_d2uiz>
 80033ba:	4603      	mov	r3, r0
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c2:	f002 fdbc 	bl	8005f3e <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 80033c6:	e03b      	b.n	8003440 <BLDC_PositionPID+0x168>
	else if(pBLDCHandle->PwmPID < 0)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f7fd fb01 	bl	80009dc <__aeabi_dcmplt>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d100      	bne.n	80033e2 <BLDC_PositionPID+0x10a>
}
 80033e0:	e02e      	b.n	8003440 <BLDC_PositionPID+0x168>
		pBLDCHandle->RotationDir = CCW;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <BLDC_PositionPID+0x178>)
 80033f2:	cb18      	ldmia	r3, {r3, r4}
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003400:	f7fd fb0a 	bl	8000a18 <__aeabi_dcmpgt>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <BLDC_PositionPID+0x142>
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <BLDC_PositionPID+0x178>)
 800340c:	cb18      	ldmia	r3, {r3, r4}
 800340e:	4698      	mov	r8, r3
 8003410:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003420:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003430:	f7fd fb3a 	bl	8000aa8 <__aeabi_d2uiz>
 8003434:	4603      	mov	r3, r0
 8003436:	b29b      	uxth	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800343c:	f002 fd7f 	bl	8005f3e <SetPwmDuty>
}
 8003440:	bf00      	nop
 8003442:	372c      	adds	r7, #44	; 0x2c
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	bf00      	nop
 800344c:	20000000 	.word	0x20000000
 8003450:	200001f8 	.word	0x200001f8

08003454 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003458:	b08f      	sub	sp, #60	; 0x3c
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800346e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	f7fc fe87 	bl	8000188 <__aeabi_dsub>
 800347a:	4603      	mov	r3, r0
 800347c:	460c      	mov	r4, r1
 800347e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800348e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003492:	461a      	mov	r2, r3
 8003494:	4623      	mov	r3, r4
 8003496:	f7fd f82f 	bl	80004f8 <__aeabi_dmul>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	4618      	mov	r0, r3
 80034a0:	4621      	mov	r1, r4
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4bb4      	ldr	r3, [pc, #720]	; (8003778 <BLDC_CalculateTrajectoryPosition+0x324>)
 80034a8:	f7fd f826 	bl	80004f8 <__aeabi_dmul>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	4618      	mov	r0, r3
 80034b2:	4621      	mov	r1, r4
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80034ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034be:	461a      	mov	r2, r3
 80034c0:	4623      	mov	r3, r4
 80034c2:	f7fd f943 	bl	800074c <__aeabi_ddiv>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80034da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034de:	461a      	mov	r2, r3
 80034e0:	4623      	mov	r3, r4
 80034e2:	f7fc fe51 	bl	8000188 <__aeabi_dsub>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034fa:	f7fd fa83 	bl	8000a04 <__aeabi_dcmpge>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <BLDC_CalculateTrajectoryPosition+0xb6>
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
 8003508:	e00c      	b.n	8003524 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003516:	f7fd fa61 	bl	80009dc <__aeabi_dcmplt>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <BLDC_CalculateTrajectoryPosition+0xd0>
 8003520:	2301      	movs	r3, #1
 8003522:	637b      	str	r3, [r7, #52]	; 0x34


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b93      	ldr	r3, [pc, #588]	; (8003778 <BLDC_CalculateTrajectoryPosition+0x324>)
 800352a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800352e:	f7fc ffe3 	bl	80004f8 <__aeabi_dmul>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	461a      	mov	r2, r3
 8003538:	4623      	mov	r3, r4
 800353a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800353e:	f7fd fa4d 	bl	80009dc <__aeabi_dcmplt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d029      	beq.n	800359c <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003554:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003558:	461a      	mov	r2, r3
 800355a:	4623      	mov	r3, r4
 800355c:	f7fc fe14 	bl	8000188 <__aeabi_dsub>
 8003560:	4603      	mov	r3, r0
 8003562:	460c      	mov	r4, r1
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800356c:	f7fd fa54 	bl	8000a18 <__aeabi_dcmpgt>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <BLDC_CalculateTrajectoryPosition+0x128>
 8003576:	2301      	movs	r3, #1
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	e049      	b.n	8003610 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 800357c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003580:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003584:	f7fd fa48 	bl	8000a18 <__aeabi_dcmpgt>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <BLDC_CalculateTrajectoryPosition+0x140>
 800358e:	2300      	movs	r3, #0
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 8003592:	e03d      	b.n	8003610 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
 800359a:	e039      	b.n	8003610 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <BLDC_CalculateTrajectoryPosition+0x324>)
 80035a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035a6:	f7fc ffa7 	bl	80004f8 <__aeabi_dmul>
 80035aa:	4603      	mov	r3, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	461a      	mov	r2, r3
 80035b0:	4623      	mov	r3, r4
 80035b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035b6:	f7fd fa25 	bl	8000a04 <__aeabi_dcmpge>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d027      	beq.n	8003610 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80035cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	f7fc fdd8 	bl	8000188 <__aeabi_dsub>
 80035d8:	4603      	mov	r3, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4698      	mov	r8, r3
 80035de:	46a1      	mov	r9, r4
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <BLDC_CalculateTrajectoryPosition+0x324>)
 80035e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ea:	f7fc ff85 	bl	80004f8 <__aeabi_dmul>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	461a      	mov	r2, r3
 80035f4:	4623      	mov	r3, r4
 80035f6:	4640      	mov	r0, r8
 80035f8:	4649      	mov	r1, r9
 80035fa:	f7fd f9ef 	bl	80009dc <__aeabi_dcmplt>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <BLDC_CalculateTrajectoryPosition+0x1b6>
 8003604:	2301      	movs	r3, #1
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
 8003608:	e002      	b.n	8003610 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
	}


	switch (accelDir)
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <BLDC_CalculateTrajectoryPosition+0x1e8>
 8003616:	2b01      	cmp	r3, #1
 8003618:	d003      	beq.n	8003622 <BLDC_CalculateTrajectoryPosition+0x1ce>
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d015      	beq.n	800364c <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 8003620:	e028      	b.n	8003674 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800362c:	f7fc ff64 	bl	80004f8 <__aeabi_dmul>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800363a:	e01b      	b.n	8003674 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800364a:	e013      	b.n	8003674 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003652:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003656:	461d      	mov	r5, r3
 8003658:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800365c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003660:	4628      	mov	r0, r5
 8003662:	4631      	mov	r1, r6
 8003664:	f7fc ff48 	bl	80004f8 <__aeabi_dmul>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003672:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003680:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003684:	461a      	mov	r2, r3
 8003686:	4623      	mov	r3, r4
 8003688:	f7fc fd80 	bl	800018c <__adddf3>
 800368c:	4603      	mov	r3, r0
 800368e:	460c      	mov	r4, r1
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <BLDC_CalculateTrajectoryPosition+0x24e>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d06d      	beq.n	800377c <BLDC_CalculateTrajectoryPosition+0x328>

			break;
		}

		default :
			break;
 80036a0:	e0c2      	b.n	8003828 <BLDC_CalculateTrajectoryPosition+0x3d4>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80036ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7fd f9a5 	bl	8000a04 <__aeabi_dcmpge>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80036e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80036ec:	e09c      	b.n	8003828 <BLDC_CalculateTrajectoryPosition+0x3d4>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <BLDC_CalculateTrajectoryPosition+0x324>)
 80036f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f8:	f7fc fefe 	bl	80004f8 <__aeabi_dmul>
 80036fc:	4603      	mov	r3, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	461d      	mov	r5, r3
 8003702:	4626      	mov	r6, r4
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	f7fc fd3d 	bl	800018c <__adddf3>
 8003712:	4603      	mov	r3, r0
 8003714:	460c      	mov	r4, r1
 8003716:	4618      	mov	r0, r3
 8003718:	4621      	mov	r1, r4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003720:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003724:	461a      	mov	r2, r3
 8003726:	4623      	mov	r3, r4
 8003728:	f7fc fd2e 	bl	8000188 <__aeabi_dsub>
 800372c:	4603      	mov	r3, r0
 800372e:	460c      	mov	r4, r1
 8003730:	461a      	mov	r2, r3
 8003732:	4623      	mov	r3, r4
 8003734:	4628      	mov	r0, r5
 8003736:	4631      	mov	r1, r6
 8003738:	f7fc fede 	bl	80004f8 <__aeabi_dmul>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	e9c7 3404 	strd	r3, r4, [r7, #16]
				if(dtTrjPosition >= 0)
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003750:	f7fd f958 	bl	8000a04 <__aeabi_dcmpge>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d100      	bne.n	800375c <BLDC_CalculateTrajectoryPosition+0x308>
			break;
 800375a:	e065      	b.n	8003828 <BLDC_CalculateTrajectoryPosition+0x3d4>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003762:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003766:	f7fc fd11 	bl	800018c <__adddf3>
 800376a:	4603      	mov	r3, r0
 800376c:	460c      	mov	r4, r1
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003774:	e058      	b.n	8003828 <BLDC_CalculateTrajectoryPosition+0x3d4>
 8003776:	bf00      	nop
 8003778:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003788:	e9d4 3400 	ldrd	r3, r4, [r4]
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	f7fd f92e 	bl	80009f0 <__aeabi_dcmple>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <BLDC_CalculateTrajectoryPosition+0x374>
				pBLDCHandle->TrjCurSpeed = 0;
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	f04f 0400 	mov.w	r4, #0
 80037b2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80037bc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80037c6:	e02e      	b.n	8003826 <BLDC_CalculateTrajectoryPosition+0x3d2>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <BLDC_CalculateTrajectoryPosition+0x3e0>)
 80037d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037d8:	f7fc fe8e 	bl	80004f8 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	4699      	mov	r9, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	f7fc fccd 	bl	800018c <__adddf3>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003800:	f7fc fcc2 	bl	8000188 <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4640      	mov	r0, r8
 800380a:	4649      	mov	r1, r9
 800380c:	f7fc fe74 	bl	80004f8 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4620      	mov	r0, r4
 8003816:	4629      	mov	r1, r5
 8003818:	f7fc fcb8 	bl	800018c <__adddf3>
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003826:	bf00      	nop
	}
}
 8003828:	bf00      	nop
 800382a:	373c      	adds	r7, #60	; 0x3c
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003832:	bf00      	nop
 8003834:	3fe00000 	.word	0x3fe00000

08003838 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	460b      	mov	r3, r1
 8003844:	71bb      	strb	r3, [r7, #6]
 8003846:	4613      	mov	r3, r2
 8003848:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800384a:	797b      	ldrb	r3, [r7, #5]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d11d      	bne.n	800388c <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	2b1f      	cmp	r3, #31
 8003854:	d80a      	bhi.n	800386c <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <NVIC_IRQConfig+0xcc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	79fa      	ldrb	r2, [r7, #7]
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <NVIC_IRQConfig+0xcc>)
 8003866:	430b      	orrs	r3, r1
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e033      	b.n	80038d4 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b3b      	cmp	r3, #59	; 0x3b
 8003870:	d830      	bhi.n	80038d4 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <NVIC_IRQConfig+0xcc>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	79fa      	ldrb	r2, [r7, #7]
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4611      	mov	r1, r2
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <NVIC_IRQConfig+0xcc>)
 8003886:	430b      	orrs	r3, r1
 8003888:	6053      	str	r3, [r2, #4]
 800388a:	e023      	b.n	80038d4 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 800388c:	797b      	ldrb	r3, [r7, #5]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d120      	bne.n	80038d4 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2b1f      	cmp	r3, #31
 8003896:	d80c      	bhi.n	80038b2 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <NVIC_IRQConfig+0xcc>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389e:	79fa      	ldrb	r2, [r7, #7]
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	4611      	mov	r1, r2
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <NVIC_IRQConfig+0xcc>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038b0:	e010      	b.n	80038d4 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b3b      	cmp	r3, #59	; 0x3b
 80038b6:	d80d      	bhi.n	80038d4 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <NVIC_IRQConfig+0xcc>)
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038be:	79fa      	ldrb	r2, [r7, #7]
 80038c0:	f002 021f 	and.w	r2, r2, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	4611      	mov	r1, r2
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <NVIC_IRQConfig+0xcc>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 80038d4:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <NVIC_IRQConfig+0xcc>)
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	4413      	add	r3, r2
 80038da:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b259      	sxtb	r1, r3
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <NVIC_IRQConfig+0xcc>)
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	b2c9      	uxtb	r1, r1
 80038f2:	4413      	add	r3, r2
 80038f4:	460a      	mov	r2, r1
 80038f6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100

08003908 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b092      	sub	sp, #72	; 0x48
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	2228      	movs	r2, #40	; 0x28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f002 fb7d 	bl	8006020 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	2214      	movs	r2, #20
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fb76 	bl	8006020 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003934:	2301      	movs	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8003938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800393c:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8003948:	2302      	movs	r3, #2
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	3b10      	subs	r3, #16
 8003950:	2b38      	cmp	r3, #56	; 0x38
 8003952:	f200 8101 	bhi.w	8003b58 <SystemClock_Config+0x250>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <SystemClock_Config+0x54>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003a41 	.word	0x08003a41
 8003960:	08003b59 	.word	0x08003b59
 8003964:	08003b59 	.word	0x08003b59
 8003968:	08003b59 	.word	0x08003b59
 800396c:	08003b59 	.word	0x08003b59
 8003970:	08003b59 	.word	0x08003b59
 8003974:	08003b59 	.word	0x08003b59
 8003978:	08003b59 	.word	0x08003b59
 800397c:	08003a61 	.word	0x08003a61
 8003980:	08003b59 	.word	0x08003b59
 8003984:	08003b59 	.word	0x08003b59
 8003988:	08003b59 	.word	0x08003b59
 800398c:	08003b59 	.word	0x08003b59
 8003990:	08003b59 	.word	0x08003b59
 8003994:	08003b59 	.word	0x08003b59
 8003998:	08003b59 	.word	0x08003b59
 800399c:	08003a83 	.word	0x08003a83
 80039a0:	08003b59 	.word	0x08003b59
 80039a4:	08003b59 	.word	0x08003b59
 80039a8:	08003b59 	.word	0x08003b59
 80039ac:	08003b59 	.word	0x08003b59
 80039b0:	08003b59 	.word	0x08003b59
 80039b4:	08003b59 	.word	0x08003b59
 80039b8:	08003b59 	.word	0x08003b59
 80039bc:	08003aa5 	.word	0x08003aa5
 80039c0:	08003b59 	.word	0x08003b59
 80039c4:	08003b59 	.word	0x08003b59
 80039c8:	08003b59 	.word	0x08003b59
 80039cc:	08003b59 	.word	0x08003b59
 80039d0:	08003b59 	.word	0x08003b59
 80039d4:	08003b59 	.word	0x08003b59
 80039d8:	08003b59 	.word	0x08003b59
 80039dc:	08003ac9 	.word	0x08003ac9
 80039e0:	08003b59 	.word	0x08003b59
 80039e4:	08003b59 	.word	0x08003b59
 80039e8:	08003b59 	.word	0x08003b59
 80039ec:	08003b59 	.word	0x08003b59
 80039f0:	08003b59 	.word	0x08003b59
 80039f4:	08003b59 	.word	0x08003b59
 80039f8:	08003b59 	.word	0x08003b59
 80039fc:	08003aed 	.word	0x08003aed
 8003a00:	08003b59 	.word	0x08003b59
 8003a04:	08003b59 	.word	0x08003b59
 8003a08:	08003b59 	.word	0x08003b59
 8003a0c:	08003b59 	.word	0x08003b59
 8003a10:	08003b59 	.word	0x08003b59
 8003a14:	08003b59 	.word	0x08003b59
 8003a18:	08003b59 	.word	0x08003b59
 8003a1c:	08003b11 	.word	0x08003b11
 8003a20:	08003b59 	.word	0x08003b59
 8003a24:	08003b59 	.word	0x08003b59
 8003a28:	08003b59 	.word	0x08003b59
 8003a2c:	08003b59 	.word	0x08003b59
 8003a30:	08003b59 	.word	0x08003b59
 8003a34:	08003b59 	.word	0x08003b59
 8003a38:	08003b59 	.word	0x08003b59
 8003a3c:	08003b35 	.word	0x08003b35
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8003a40:	2300      	movs	r3, #0
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a44:	230f      	movs	r3, #15
 8003a46:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a5e:	e07c      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8003a60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a64:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a66:	230f      	movs	r3, #15
 8003a68:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a80:	e06b      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8003a82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a88:	230f      	movs	r3, #15
 8003a8a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003aa2:	e05a      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8003aa4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003aa8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aaa:	230f      	movs	r3, #15
 8003aac:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8003ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aba:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003ac6:	e048      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8003ac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003acc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ace:	230f      	movs	r3, #15
 8003ad0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8003ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ade:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003aea:	e036      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003aec:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003af2:	230f      	movs	r3, #15
 8003af4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af6:	2302      	movs	r3, #2
 8003af8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b02:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b0e:	e024      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003b10:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b16:	230f      	movs	r3, #15
 8003b18:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003b1e:	2300      	movs	r3, #0
 8003b20:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8003b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b26:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b32:	e012      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b3a:	230f      	movs	r3, #15
 8003b3c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8003b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b56:	e000      	b.n	8003b5a <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8003b58:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8003b5a:	f107 031c 	add.w	r3, r7, #28
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe f892 	bl	8001c88 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8003b64:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe f8da 	bl	8001d28 <RCC_ClockConfig>
}
 8003b74:	bf00      	nop
 8003b76:	3748      	adds	r7, #72	; 0x48
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8003b7c:	b4b0      	push	{r4, r5, r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8003b84:	2400      	movs	r4, #0
 8003b86:	e006      	b.n	8003b96 <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8003b88:	2500      	movs	r5, #0
 8003b8a:	e001      	b.n	8003b90 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8003b8c:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8003b8e:	3501      	adds	r5, #1
 8003b90:	2d4c      	cmp	r5, #76	; 0x4c
 8003b92:	d9fb      	bls.n	8003b8c <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8003b94:	3401      	adds	r4, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <Delay_us+0x34>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	08db      	lsrs	r3, r3, #3
 8003ba0:	429c      	cmp	r4, r3
 8003ba2:	d3f1      	bcc.n	8003b88 <Delay_us+0xc>
		}
	}
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bcb0      	pop	{r4, r5, r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	cccccccd 	.word	0xcccccccd

08003bb4 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ffd8 	bl	8003b7c <Delay_us>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <TIM6_IRQHandler+0x10>)
 8003bda:	f7fe fcd9 	bl	8002590 <TIM_IRQHandling>
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200004a8 	.word	0x200004a8

08003be8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <EXTI9_5_IRQHandler+0x14>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe f82d 	bl	8001c50 <EXTI_IRQHandling>
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000280 	.word	0x20000280

08003c00 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART3Handle.hdmatx);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <DMA1_Channel2_IRQHandler+0x14>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd fab3 	bl	8001174 <DMA_IRQ_Handling>
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000378 	.word	0x20000378

08003c18 <main>:

#include "main.h"


int main(void)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003c1e:	2048      	movs	r0, #72	; 0x48
 8003c20:	f7ff fe72 	bl	8003908 <SystemClock_Config>

	Delay_ms(3000);
 8003c24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003c28:	f7ff ffc4 	bl	8003bb4 <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8003c2c:	f002 f90a 	bl	8005e44 <MemsetHandleStructure>

	RCC_AFIO_CLK_ENABLE();
 8003c30:	4ba7      	ldr	r3, [pc, #668]	; (8003ed0 <main+0x2b8>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	4aa6      	ldr	r2, [pc, #664]	; (8003ed0 <main+0x2b8>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8003c3c:	4ba5      	ldr	r3, [pc, #660]	; (8003ed4 <main+0x2bc>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	4aa0      	ldr	r2, [pc, #640]	; (8003ed4 <main+0x2bc>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6053      	str	r3, [r2, #4]

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 8003c58:	f001 ff4e 	bl	8005af8 <DMA1_Init>
	Button_Init();				// Initialize peripherals related to Button
 8003c5c:	f001 fe10 	bl	8005880 <Button_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003c60:	f001 fe28 	bl	80058b4 <BLDC1_Init>
	UART3_Init();				// Initialize UART2 to transmit data to PC
 8003c64:	f001 feec 	bl	8005a40 <UART3_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8003c68:	f001 ff14 	bl	8005a94 <TIM6_Init>
	TFT1_Init();
 8003c6c:	f001 ff56 	bl	8005b1c <TFT1_Init>
	TS1_Init();
 8003c70:	f001 ff7c 	bl	8005b6c <TS1_Init>
	SPI_ENABLE(&SPI2Handle);
 8003c74:	4b98      	ldr	r3, [pc, #608]	; (8003ed8 <main+0x2c0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b97      	ldr	r3, [pc, #604]	; (8003ed8 <main+0x2c0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
	Delay_ms(10);
 8003c84:	200a      	movs	r0, #10
 8003c86:	f7ff ff95 	bl	8003bb4 <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003c8a:	4894      	ldr	r0, [pc, #592]	; (8003edc <main+0x2c4>)
 8003c8c:	f002 f916 	bl	8005ebc <StartTimerPwm>
	Delay_ms(10);
 8003c90:	200a      	movs	r0, #10
 8003c92:	f7ff ff8f 	bl	8003bb4 <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003c96:	4891      	ldr	r0, [pc, #580]	; (8003edc <main+0x2c4>)
 8003c98:	f002 f92a 	bl	8005ef0 <DisableTimerPwmChannel>
	Delay_ms(10);
 8003c9c:	200a      	movs	r0, #10
 8003c9e:	f7ff ff89 	bl	8003bb4 <Delay_ms>
	 * 		Timer PWM CCR value : 0
	 * 		NVIC for EXTI : Disabled
	 * 		Timer PWM channels : Disabled
	 */

	TFT1Handle.foreground = White;
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	; (8003ee0 <main+0x2c8>)
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	86da      	strh	r2, [r3, #54]	; 0x36
	TFT1Handle.background = Black;
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <main+0x2c8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	871a      	strh	r2, [r3, #56]	; 0x38


	while(1)
	{
		TS_Input(&TS1Handle);
 8003cb0:	488c      	ldr	r0, [pc, #560]	; (8003ee4 <main+0x2cc>)
 8003cb2:	f001 fcb9 	bl	8005628 <TS_Input>

		TFT_xy(&TFT1Handle, 10, 10);
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	210a      	movs	r1, #10
 8003cba:	4889      	ldr	r0, [pc, #548]	; (8003ee0 <main+0x2c8>)
 8003cbc:	f001 f846 	bl	8004d4c <TFT_xy>
		TFT_Unsigned_decimal(&TFT1Handle, TS1Handle.x_touch, 0, 5);
 8003cc0:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <main+0x2cc>)
 8003cc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4885      	ldr	r0, [pc, #532]	; (8003ee0 <main+0x2c8>)
 8003ccc:	f001 fc06 	bl	80054dc <TFT_Unsigned_decimal>
		TFT_xy(&TFT1Handle, 18, 10);
 8003cd0:	220a      	movs	r2, #10
 8003cd2:	2112      	movs	r1, #18
 8003cd4:	4882      	ldr	r0, [pc, #520]	; (8003ee0 <main+0x2c8>)
 8003cd6:	f001 f839 	bl	8004d4c <TFT_xy>
		TFT_Unsigned_decimal(&TFT1Handle, TS1Handle.y_touch, 0, 5);
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <main+0x2cc>)
 8003cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cde:	4619      	mov	r1, r3
 8003ce0:	2305      	movs	r3, #5
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	487e      	ldr	r0, [pc, #504]	; (8003ee0 <main+0x2c8>)
 8003ce6:	f001 fbf9 	bl	80054dc <TFT_Unsigned_decimal>

		Delay_ms(10);
 8003cea:	200a      	movs	r0, #10
 8003cec:	f7ff ff62 	bl	8003bb4 <Delay_ms>

		if(ButtonFlag == FLAG_SET)
 8003cf0:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <main+0x2d0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d1db      	bne.n	8003cb0 <main+0x98>
		{
			/* Button is pressed */

			Delay_ms(2000);		// Wait a while to avoid Button chattering
 8003cf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cfc:	f7ff ff5a 	bl	8003bb4 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <main+0x2c4>)
 8003d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 80fa 	bne.w	8003f00 <main+0x2e8>
			{
				/* Previous Motor state was MOTOR_STATE_STOP */

				// 1. To Make 'BLDC_Get_Position' function Operate perfectly, Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8003d0c:	4b77      	ldr	r3, [pc, #476]	; (8003eec <main+0x2d4>)
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	4b72      	ldr	r3, [pc, #456]	; (8003edc <main+0x2c4>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <main+0x2c4>)
 8003d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8003d20:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <main+0x2c4>)
 8003d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d26:	3b01      	subs	r3, #1
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	f200 8086 	bhi.w	8003e3a <main+0x222>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <main+0x11c>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003e15 	.word	0x08003e15
 8003d38:	08003d75 	.word	0x08003d75
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003dc5 	.word	0x08003dc5
 8003d44:	08003ded 	.word	0x08003ded
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	4b63      	ldr	r3, [pc, #396]	; (8003edc <main+0x2c4>)
 8003d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <main+0x148>
 8003d56:	4b61      	ldr	r3, [pc, #388]	; (8003edc <main+0x2c4>)
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003d5e:	e06c      	b.n	8003e3a <main+0x222>
 8003d60:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <main+0x2c4>)
 8003d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d167      	bne.n	8003e3a <main+0x222>
 8003d6a:	4b5c      	ldr	r3, [pc, #368]	; (8003edc <main+0x2c4>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003d72:	e062      	b.n	8003e3a <main+0x222>
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <main+0x2c4>)
 8003d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <main+0x170>
 8003d7e:	4b57      	ldr	r3, [pc, #348]	; (8003edc <main+0x2c4>)
 8003d80:	2206      	movs	r2, #6
 8003d82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003d86:	e058      	b.n	8003e3a <main+0x222>
 8003d88:	4b54      	ldr	r3, [pc, #336]	; (8003edc <main+0x2c4>)
 8003d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d153      	bne.n	8003e3a <main+0x222>
 8003d92:	4b52      	ldr	r3, [pc, #328]	; (8003edc <main+0x2c4>)
 8003d94:	2203      	movs	r2, #3
 8003d96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003d9a:	e04e      	b.n	8003e3a <main+0x222>
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	; (8003edc <main+0x2c4>)
 8003d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <main+0x198>
 8003da6:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <main+0x2c4>)
 8003da8:	2204      	movs	r2, #4
 8003daa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dae:	e044      	b.n	8003e3a <main+0x222>
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <main+0x2c4>)
 8003db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d13f      	bne.n	8003e3a <main+0x222>
 8003dba:	4b48      	ldr	r3, [pc, #288]	; (8003edc <main+0x2c4>)
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dc2:	e03a      	b.n	8003e3a <main+0x222>
 8003dc4:	4b45      	ldr	r3, [pc, #276]	; (8003edc <main+0x2c4>)
 8003dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <main+0x1c0>
 8003dce:	4b43      	ldr	r3, [pc, #268]	; (8003edc <main+0x2c4>)
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dd6:	e030      	b.n	8003e3a <main+0x222>
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <main+0x2c4>)
 8003dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d12b      	bne.n	8003e3a <main+0x222>
 8003de2:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <main+0x2c4>)
 8003de4:	2206      	movs	r2, #6
 8003de6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dea:	e026      	b.n	8003e3a <main+0x222>
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <main+0x2c4>)
 8003dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <main+0x1e8>
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <main+0x2c4>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dfe:	e01c      	b.n	8003e3a <main+0x222>
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <main+0x2c4>)
 8003e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d117      	bne.n	8003e3a <main+0x222>
 8003e0a:	4b34      	ldr	r3, [pc, #208]	; (8003edc <main+0x2c4>)
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003e12:	e012      	b.n	8003e3a <main+0x222>
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <main+0x2c4>)
 8003e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <main+0x210>
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <main+0x2c4>)
 8003e20:	2203      	movs	r2, #3
 8003e22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003e26:	e008      	b.n	8003e3a <main+0x222>
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <main+0x2c4>)
 8003e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d103      	bne.n	8003e3a <main+0x222>
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <main+0x2c4>)
 8003e34:	2205      	movs	r2, #5
 8003e36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003e3a:	bf00      	nop

				// 2. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	2108      	movs	r1, #8
 8003e40:	2017      	movs	r0, #23
 8003e42:	f7ff fcf9 	bl	8003838 <NVIC_IRQConfig>

				// 3. Charge Bootstrap Capacitor for 10ms before Drive BLDC motor
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8003e46:	4825      	ldr	r0, [pc, #148]	; (8003edc <main+0x2c4>)
 8003e48:	f7fe ff7a 	bl	8002d40 <BLDC_BootstrapCap_Charge>

				// 4. Set Reference Position, PID gain, etc
				BLDC1Handle.RefPosition = 36000;
 8003e4c:	4a23      	ldr	r2, [pc, #140]	; (8003edc <main+0x2c4>)
 8003e4e:	a41a      	add	r4, pc, #104	; (adr r4, 8003eb8 <main+0x2a0>)
 8003e50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003e54:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
				BLDC1Handle.TrjRefMaxSpeed = 7500;
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <main+0x2c4>)
 8003e5a:	a419      	add	r4, pc, #100	; (adr r4, 8003ec0 <main+0x2a8>)
 8003e5c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003e60:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
				BLDC1Handle.TrjRefAcceleration = 2500;
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <main+0x2c4>)
 8003e66:	a418      	add	r4, pc, #96	; (adr r4, 8003ec8 <main+0x2b0>)
 8003e68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003e6c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

				BLDC_PID_GAIN_SET(&BLDC1Handle, 33, 4, 0); // Kp : 33, Ki : 4, Kd : 0
 8003e70:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <main+0x2c4>)
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	4c1e      	ldr	r4, [pc, #120]	; (8003ef0 <main+0x2d8>)
 8003e78:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8003e7c:	4a17      	ldr	r2, [pc, #92]	; (8003edc <main+0x2c4>)
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	4c1c      	ldr	r4, [pc, #112]	; (8003ef4 <main+0x2dc>)
 8003e84:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <main+0x2c4>)
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f04f 0400 	mov.w	r4, #0
 8003e92:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION;
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <main+0x2c4>)
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 6. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. Then, Motor rotates with given PWM duty cycle
				while(startFlag != FLAG_SET);
 8003e9e:	bf00      	nop
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <main+0x2e0>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d1fb      	bne.n	8003ea0 <main+0x288>
				EXTI->SWIER |= (0x1 << 5);
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <main+0x2e4>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <main+0x2e4>)
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	6113      	str	r3, [r2, #16]
 8003eb4:	e090      	b.n	8003fd8 <main+0x3c0>
 8003eb6:	bf00      	nop
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	40e19400 	.word	0x40e19400
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	40bd4c00 	.word	0x40bd4c00
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	40a38800 	.word	0x40a38800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	20000454 	.word	0x20000454
 8003edc:	20000280 	.word	0x20000280
 8003ee0:	200003b4 	.word	0x200003b4
 8003ee4:	20000250 	.word	0x20000250
 8003ee8:	20000204 	.word	0x20000204
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40408000 	.word	0x40408000
 8003ef4:	40100000 	.word	0x40100000
 8003ef8:	20000205 	.word	0x20000205
 8003efc:	40010400 	.word	0x40010400
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8003f00:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <main+0x3c8>)
 8003f02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d166      	bne.n	8003fd8 <main+0x3c0>
			{
				/* Previous Motor state was MOTOR_STATE_POSITION */

				Delay_ms(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f7ff fe52 	bl	8003bb4 <Delay_ms>

				// 3. Change MotorState from MOTOR_STATE_POSITION to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8003f10:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <main+0x3c8>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 4. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	2017      	movs	r0, #23
 8003f1e:	f7ff fc8b 	bl	8003838 <NVIC_IRQConfig>

				// 5. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8003f22:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <main+0x3c8>)
 8003f24:	6858      	ldr	r0, [r3, #4]
 8003f26:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <main+0x3c8>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7fd fe34 	bl	8001b9c <GPIO_WritePin>

				// 6. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8003f34:	482a      	ldr	r0, [pc, #168]	; (8003fe0 <main+0x3c8>)
 8003f36:	f001 ffdb 	bl	8005ef0 <DisableTimerPwmChannel>

				startFlag = FLAG_RESET;
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <main+0x3cc>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]

				BLDC1Handle.HallCount = 0;
 8003f40:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <main+0x3c8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58
				BLDC1Handle.OldHallCount = 0;
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <main+0x3c8>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c
				BLDC1Handle.CurPosition = 0;
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <main+0x3c8>)
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
				BLDC1Handle.Kp = 0;
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <main+0x3c8>)
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
				BLDC1Handle.Ki = 0;
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <main+0x3c8>)
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	f04f 0400 	mov.w	r4, #0
 8003f72:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
				BLDC1Handle.Kd = 0;
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <main+0x3c8>)
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f04f 0400 	mov.w	r4, #0
 8003f80:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
				BLDC1Handle.Error = 0;
 8003f84:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <main+0x3c8>)
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 0400 	mov.w	r4, #0
 8003f8e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
				BLDC1Handle.PrvError = 0;
 8003f92:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <main+0x3c8>)
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
				BLDC1Handle.P_term = 0;
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <main+0x3c8>)
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
				BLDC1Handle.I_term = 0;
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <main+0x3c8>)
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
				BLDC1Handle.D_term = 0;
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <main+0x3c8>)
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	f04f 0400 	mov.w	r4, #0
 8003fc6:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
				BLDC1Handle.PwmPID = 0;
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <main+0x3c8>)
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
			}

			ButtonFlag = FLAG_RESET;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <main+0x3d0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
		TS_Input(&TS1Handle);
 8003fde:	e667      	b.n	8003cb0 <main+0x98>
 8003fe0:	20000280 	.word	0x20000280
 8003fe4:	20000205 	.word	0x20000205
 8003fe8:	20000204 	.word	0x20000204

08003fec <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	2214      	movs	r2, #20
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f002 f80f 	bl	8006020 <memset>

	if(pUARTHandle->Instance == USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a66      	ldr	r2, [pc, #408]	; (80041a0 <USART_MspInit+0x1b4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d120      	bne.n	800404e <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 800400c:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <USART_MspInit+0x1b8>)
 800400e:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8004014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004018:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800401e:	2303      	movs	r3, #3
 8004020:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7fd fb5f 	bl	80016f0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8004036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403a:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f107 030c 	add.w	r3, r7, #12
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fd fb52 	bl	80016f0 <GPIO_Init>
 800404c:	e09e      	b.n	800418c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a55      	ldr	r2, [pc, #340]	; (80041a8 <USART_MspInit+0x1bc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d149      	bne.n	80040ec <USART_MspInit+0x100>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8004058:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <USART_MspInit+0x1b8>)
 800405a:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8004060:	2304      	movs	r3, #4
 8004062:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8004064:	2301      	movs	r3, #1
 8004066:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8004068:	2303      	movs	r3, #3
 800406a:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	f107 030c 	add.w	r3, r7, #12
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fd fb3a 	bl	80016f0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8004080:	2308      	movs	r3, #8
 8004082:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f7fd fb2e 	bl	80016f0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a44      	ldr	r2, [pc, #272]	; (80041ac <USART_MspInit+0x1c0>)
 800409a:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	2210      	movs	r2, #16
 80040a2:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc ff83 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <USART_MspInit+0x1c4>)
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 80040e4:	4a32      	ldr	r2, [pc, #200]	; (80041b0 <USART_MspInit+0x1c4>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6253      	str	r3, [r2, #36]	; 0x24
 80040ea:	e04f      	b.n	800418c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <USART_MspInit+0x1c8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d14a      	bne.n	800418c <USART_MspInit+0x1a0>
	{
		/* USART3 GPIO Configuration */

		// USART3 Tx
		GPIOHandle.Instance = GPIOB;
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <USART_MspInit+0x1cc>)
 80040f8:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 80040fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004102:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8004104:	2301      	movs	r3, #1
 8004106:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8004108:	2303      	movs	r3, #3
 800410a:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fd faea 	bl	80016f0 <GPIO_Init>

		// USART3 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_11;
 8004120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004124:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f7fd fadd 	bl	80016f0 <GPIO_Init>

		/* USART3 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a20      	ldr	r2, [pc, #128]	; (80041bc <USART_MspInit+0x1d0>)
 800413c:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	2210      	movs	r2, #16
 8004144:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	2200      	movs	r2, #0
 8004164:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ff32 	bl	8000fe4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <USART_MspInit+0x1c4>)
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <USART_MspInit+0x1c4>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fa82 	bl	800269c <USART_PeripheralClockControl>
}
 8004198:	bf00      	nop
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40010800 	.word	0x40010800
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40020080 	.word	0x40020080
 80041b0:	20000410 	.word	0x20000410
 80041b4:	40004800 	.word	0x40004800
 80041b8:	40010c00 	.word	0x40010c00
 80041bc:	4002001c 	.word	0x4002001c

080041c0 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <TIM_Base_MspInit+0x2c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 80041d0:	2101      	movs	r1, #1
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fe f8c2 	bl	800235c <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 80041d8:	2201      	movs	r2, #1
 80041da:	210f      	movs	r1, #15
 80041dc:	2036      	movs	r0, #54	; 0x36
 80041de:	f7ff fb2b 	bl	8003838 <NVIC_IRQConfig>
	}
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40001000 	.word	0x40001000

080041f0 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <TIM_PWM_MspInit+0xd8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d119      	bne.n	8004236 <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	2214      	movs	r2, #20
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f001 ff08 	bl	8006020 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8004210:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <TIM_PWM_MspInit+0xdc>)
 8004212:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004214:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004218:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fd fa5d 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <TIM_PWM_MspInit+0xe0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d119      	bne.n	8004274 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	2214      	movs	r2, #20
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fee9 	bl	8006020 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 800424e:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <TIM_PWM_MspInit+0xe4>)
 8004250:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004252:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004256:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004258:	2302      	movs	r3, #2
 800425a:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004260:	2301      	movs	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fd fa3e 	bl	80016f0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <TIM_PWM_MspInit+0xe8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d119      	bne.n	80042b2 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	2214      	movs	r2, #20
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f001 feca 	bl	8006020 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <TIM_PWM_MspInit+0xec>)
 800428e:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004290:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004294:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	3304      	adds	r3, #4
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f7fd fa1f 	bl	80016f0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe f84f 	bl	800235c <TIM_PeripheralClockControl>
}
 80042be:	bf00      	nop
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40010800 	.word	0x40010800
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40011000 	.word	0x40011000
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40010c00 	.word	0x40010c00

080042e0 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	; 0x38
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80042e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ec:	2210      	movs	r2, #16
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fe95 	bl	8006020 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	f040 80f1 	bne.w	80044e2 <BLDC_MspInit+0x202>
	{
		/************************************************************************
		 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
		 ***********************************************************************/
		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 8004300:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <BLDC_MspInit+0x20c>)
 8004302:	4a7b      	ldr	r2, [pc, #492]	; (80044f0 <BLDC_MspInit+0x210>)
 8004304:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 8004306:	4b79      	ldr	r3, [pc, #484]	; (80044ec <BLDC_MspInit+0x20c>)
 8004308:	2201      	movs	r2, #1
 800430a:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 800430c:	4b77      	ldr	r3, [pc, #476]	; (80044ec <BLDC_MspInit+0x20c>)
 800430e:	2202      	movs	r2, #2
 8004310:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <BLDC_MspInit+0x20c>)
 8004314:	2204      	movs	r2, #4
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 8004318:	4b74      	ldr	r3, [pc, #464]	; (80044ec <BLDC_MspInit+0x20c>)
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	4b73      	ldr	r3, [pc, #460]	; (80044ec <BLDC_MspInit+0x20c>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	431a      	orrs	r2, r3
 8004322:	4b72      	ldr	r3, [pc, #456]	; (80044ec <BLDC_MspInit+0x20c>)
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	4313      	orrs	r3, r2
 8004328:	4a70      	ldr	r2, [pc, #448]	; (80044ec <BLDC_MspInit+0x20c>)
 800432a:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 800432c:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <BLDC_MspInit+0x20c>)
 800432e:	4a70      	ldr	r2, [pc, #448]	; (80044f0 <BLDC_MspInit+0x210>)
 8004330:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 8004332:	4b6e      	ldr	r3, [pc, #440]	; (80044ec <BLDC_MspInit+0x20c>)
 8004334:	2240      	movs	r2, #64	; 0x40
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 8004338:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <BLDC_MspInit+0x20c>)
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 800433e:	4b6b      	ldr	r3, [pc, #428]	; (80044ec <BLDC_MspInit+0x20c>)
 8004340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 8004346:	4b69      	ldr	r3, [pc, #420]	; (80044ec <BLDC_MspInit+0x20c>)
 8004348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434a:	4b68      	ldr	r3, [pc, #416]	; (80044ec <BLDC_MspInit+0x20c>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	431a      	orrs	r2, r3
 8004350:	4b66      	ldr	r3, [pc, #408]	; (80044ec <BLDC_MspInit+0x20c>)
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	4313      	orrs	r3, r2
 8004356:	4a65      	ldr	r2, [pc, #404]	; (80044ec <BLDC_MspInit+0x20c>)
 8004358:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOA;
 800435a:	4b64      	ldr	r3, [pc, #400]	; (80044ec <BLDC_MspInit+0x20c>)
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <BLDC_MspInit+0x214>)
 800435e:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_5;
 8004360:	4b62      	ldr	r3, [pc, #392]	; (80044ec <BLDC_MspInit+0x20c>)
 8004362:	2220      	movs	r2, #32
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_6;
 8004366:	4b61      	ldr	r3, [pc, #388]	; (80044ec <BLDC_MspInit+0x20c>)
 8004368:	2240      	movs	r2, #64	; 0x40
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_7;
 800436c:	4b5f      	ldr	r3, [pc, #380]	; (80044ec <BLDC_MspInit+0x20c>)
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8004372:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <BLDC_MspInit+0x20c>)
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <BLDC_MspInit+0x20c>)
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	431a      	orrs	r2, r3
 800437c:	4b5b      	ldr	r3, [pc, #364]	; (80044ec <BLDC_MspInit+0x20c>)
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	4313      	orrs	r3, r2
 8004382:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <BLDC_MspInit+0x20c>)
 8004384:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800438c:	2301      	movs	r3, #1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004394:	2301      	movs	r3, #1
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f9a4 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 80043a8:	200a      	movs	r0, #10
 80043aa:	f7ff fc03 	bl	8003bb4 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6858      	ldr	r0, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2200      	movs	r2, #0
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7fd fbee 	bl	8001b9c <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80043c6:	2301      	movs	r3, #1
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80043ce:	2301      	movs	r3, #1
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd f987 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 80043e2:	200a      	movs	r0, #10
 80043e4:	f7ff fbe6 	bl	8003bb4 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2200      	movs	r2, #0
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7fd fbd1 	bl	8001b9c <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 80043fa:	200a      	movs	r0, #10
 80043fc:	f7ff fbda 	bl	8003bb4 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6898      	ldr	r0, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	b29b      	uxth	r3, r3
 800440a:	2201      	movs	r2, #1
 800440c:	4619      	mov	r1, r3
 800440e:	f7fd fbc5 	bl	8001b9c <GPIO_WritePin>
		Delay_ms(10);
 8004412:	200a      	movs	r0, #10
 8004414:	f7ff fbce 	bl	8003bb4 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6898      	ldr	r0, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2200      	movs	r2, #0
 8004424:	4619      	mov	r1, r3
 8004426:	f7fd fbb9 	bl	8001b9c <GPIO_WritePin>

		/********************************************************************
		 *			Low level init EXTI for Hall Sensor interrupt			*
		 ********************************************************************/
		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 800442a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800442e:	2210      	movs	r2, #16
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fdf4 	bl	8006020 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 800443e:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <BLDC_MspInit+0x218>)
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd f94d 	bl	80016f0 <GPIO_Init>


		/********************************************************************
		 *				Low level init TIM to generate PWM signals			*
		 ********************************************************************/
		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <BLDC_MspInit+0x21c>)
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <BLDC_MspInit+0x220>)
 8004462:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (1-1);	// 72MHz / 1 = 72MHz
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (3600-1);	// 72MHz / 3600 = 20kHz
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004484:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd fe35 	bl	80020fa <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	221c      	movs	r2, #28
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fdc1 	bl	8006020 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 800449e:	2360      	movs	r3, #96	; 0x60
 80044a0:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f107 010c 	add.w	r1, r7, #12
 80044b2:	2200      	movs	r2, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fe6d 	bl	8002194 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f107 010c 	add.w	r1, r7, #12
 80044c6:	2204      	movs	r2, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd fe63 	bl	8002194 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f107 010c 	add.w	r1, r7, #12
 80044da:	2208      	movs	r2, #8
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd fe59 	bl	8002194 <TIM_PWM_ConfigChannel>
	}
}
 80044e2:	bf00      	nop
 80044e4:	3738      	adds	r7, #56	; 0x38
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000280 	.word	0x20000280
 80044f0:	40010c00 	.word	0x40010c00
 80044f4:	40010800 	.word	0x40010800
 80044f8:	10310000 	.word	0x10310000
 80044fc:	200003f0 	.word	0x200003f0
 8004500:	40000800 	.word	0x40000800

08004504 <TFT_MspInit>:


void TFT_MspInit(TFT_HandleTypeDef *pTFTHandle)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 800450c:	f107 0308 	add.w	r3, r7, #8
 8004510:	2210      	movs	r2, #16
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fd83 	bl	8006020 <memset>

	if(pTFTHandle->Instance == TFT1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d16c      	bne.n	80045fc <TFT_MspInit+0xf8>
		/************************************************************************
		 *		  Low level init GPIO of TFT Control pins and Data pins			*
		 ***********************************************************************/

		// 1. Initialize GPIO for Control Pins (nRST, nCS, RS, nWR) to GPIO Output Push-Pull mode
		pTFTHandle->Init.GPIOx_TFT_Control = GPIOA;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a37      	ldr	r2, [pc, #220]	; (8004604 <TFT_MspInit+0x100>)
 8004526:	605a      	str	r2, [r3, #4]
		pTFTHandle->Init.GPIO_Pin_TFT_nRST = GPIO_PIN_8;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800452e:	615a      	str	r2, [r3, #20]
		pTFTHandle->Init.GPIO_Pin_TFT_nCS = GPIO_PIN_9;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004536:	619a      	str	r2, [r3, #24]
		pTFTHandle->Init.GPIO_Pin_TFT_RS = GPIO_PIN_10;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453e:	61da      	str	r2, [r3, #28]
		pTFTHandle->Init.GPIO_Pin_TFT_nWR = GPIO_PIN_11;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004546:	621a      	str	r2, [r3, #32]
		pTFTHandle->Init.GPIO_Pins_TFT_Control = pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS | pTFTHandle->Init.GPIO_Pin_TFT_nWR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Control;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004568:	2301      	movs	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004570:	2303      	movs	r3, #3
 8004572:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Control, &GPIOInit);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f107 0208 	add.w	r2, r7, #8
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd f8b6 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 8004584:	200a      	movs	r0, #10
 8004586:	f7ff fb15 	bl	8003bb4 <Delay_ms>

		GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_nWR, pTFTHandle->Init.GPIO_Pin_TFT_RS);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6858      	ldr	r0, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	b29b      	uxth	r3, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	b299      	uxth	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fd fb12 	bl	8001bd8 <GPIO_ModifyPin>

		// 2. Initialize GPIO for Data Pins (D0 ~ D15) to GPIO Output mode
		pTFTHandle->Init.GPIOx_TFT_Data = GPIOC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TFT_MspInit+0x104>)
 80045b8:	609a      	str	r2, [r3, #8]
		pTFTHandle->Init.GPIO_Pins_TFT_Data = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c0:	611a      	str	r2, [r3, #16]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Data;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80045c8:	2301      	movs	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 80045d0:	2303      	movs	r3, #3
 80045d2:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Data, &GPIOInit);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f107 0208 	add.w	r2, r7, #8
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd f886 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 80045e4:	200a      	movs	r0, #10
 80045e6:	f7ff fae5 	bl	8003bb4 <Delay_ms>

		GPIO_WritePort(pTFTHandle->Init.GPIOx_TFT_Data, pTFTHandle->Init.GPIO_Pins_TFT_Data, GPIO_PIN_RESET);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6898      	ldr	r0, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2200      	movs	r2, #0
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7fd fb08 	bl	8001c0c <GPIO_WritePort>
	}
}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40010800 	.word	0x40010800
 8004608:	40011000 	.word	0x40011000

0800460c <TS_MspInit>:


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	2210      	movs	r2, #16
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fcff 	bl	8006020 <memset>

	if(pTSHandle->Instance == TS1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d178      	bne.n	800471c <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <TS_MspInit+0x118>)
 800462e:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2208      	movs	r2, #8
 8004634:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2210      	movs	r2, #16
 800463a:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004642:	2301      	movs	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004646:	2303      	movs	r3, #3
 8004648:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f107 0208 	add.w	r2, r7, #8
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd f84b 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f7ff faaa 	bl	8003bb4 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6858      	ldr	r0, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	b29b      	uxth	r3, r3
 800466a:	2201      	movs	r2, #1
 800466c:	4619      	mov	r1, r3
 800466e:	f7fd fa95 	bl	8001b9c <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	2210      	movs	r2, #16
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fcd0 	bl	8006020 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f107 0208 	add.w	r2, r7, #8
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd f829 	bl	80016f0 <GPIO_Init>
		Delay_ms(10);
 800469e:	200a      	movs	r0, #10
 80046a0:	f7ff fa88 	bl	8003bb4 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6858      	ldr	r0, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2200      	movs	r2, #0
 80046b0:	4619      	mov	r1, r3
 80046b2:	f7fd fa73 	bl	8001b9c <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <TS_MspInit+0x11c>)
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <TS_MspInit+0x120>)
 80046c2:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046cc:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046de:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	2200      	movs	r2, #0
 80046ee:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f8:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2218      	movs	r2, #24
 8004700:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2200      	movs	r2, #0
 8004708:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fc30 	bl	8001f7c <SPI_Init>
	}
}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010c00 	.word	0x40010c00
 8004728:	20000454 	.word	0x20000454
 800472c:	40003800 	.word	0x40003800

08004730 <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004738:	f107 030c 	add.w	r3, r7, #12
 800473c:	2214      	movs	r2, #20
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fc6d 	bl	8006020 <memset>

	if(pSPIHandle->Instance == SPI2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <SPI_MspInit+0x88>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d128      	bne.n	80047a2 <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <SPI_MspInit+0x8c>)
 8004752:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 8004754:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004758:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fc ffbf 	bl	80016f0 <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	2214      	movs	r2, #20
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fc50 	bl	8006020 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <SPI_MspInit+0x8c>)
 8004782:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8004784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004788:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fc ffa7 	bl	80016f0 <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fc33 	bl	8002014 <SPI_PeripheralClockControl>
}
 80047ae:	bf00      	nop
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40003800 	.word	0x40003800
 80047bc:	40010c00 	.word	0x40010c00

080047c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <_sbrk+0x50>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <_sbrk+0x16>
		heap_end = &end;
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <_sbrk+0x50>)
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <_sbrk+0x54>)
 80047d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <_sbrk+0x50>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <_sbrk+0x50>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	466a      	mov	r2, sp
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d907      	bls.n	80047fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047ea:	f001 fbef 	bl	8005fcc <__errno>
 80047ee:	4602      	mov	r2, r0
 80047f0:	230c      	movs	r3, #12
 80047f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
 80047f8:	e006      	b.n	8004808 <_sbrk+0x48>
	}

	heap_end += incr;
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <_sbrk+0x50>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	4a03      	ldr	r2, [pc, #12]	; (8004810 <_sbrk+0x50>)
 8004804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000200 	.word	0x20000200
 8004814:	200004d0 	.word	0x200004d0

08004818 <TFT_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TFT_Init(TFT_HandleTypeDef *pTFTHandle)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of TFT LCD : GPIO
	TFT_MspInit(pTFTHandle);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fe6f 	bl	8004504 <TFT_MspInit>

	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_RESET);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6858      	ldr	r0, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2200      	movs	r2, #0
 8004832:	4619      	mov	r1, r3
 8004834:	f7fd f9b2 	bl	8001b9c <GPIO_WritePin>
	Delay_ms(1);
 8004838:	2001      	movs	r0, #1
 800483a:	f7ff f9bb 	bl	8003bb4 <Delay_ms>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_SET);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6858      	ldr	r0, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	b29b      	uxth	r3, r3
 8004848:	2201      	movs	r2, #1
 800484a:	4619      	mov	r1, r3
 800484c:	f7fd f9a6 	bl	8001b9c <GPIO_WritePin>
	Delay_ms(120);
 8004850:	2078      	movs	r0, #120	; 0x78
 8004852:	f7ff f9af 	bl	8003bb4 <Delay_ms>

	TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004856:	2200      	movs	r2, #0
 8004858:	2102      	movs	r1, #2
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9d0 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 8004860:	2200      	movs	r2, #0
 8004862:	2103      	movs	r1, #3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f9cb 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 800486a:	2201      	movs	r2, #1
 800486c:	2104      	movs	r1, #4
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9c6 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8004874:	223f      	movs	r2, #63	; 0x3f
 8004876:	2105      	movs	r1, #5
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f9c1 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 800487e:	2200      	movs	r2, #0
 8004880:	2106      	movs	r1, #6
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9bc 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 8004888:	2200      	movs	r2, #0
 800488a:	2107      	movs	r1, #7
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9b7 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8004892:	2200      	movs	r2, #0
 8004894:	2108      	movs	r1, #8
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9b2 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 800489c:	22ef      	movs	r2, #239	; 0xef
 800489e:	2109      	movs	r1, #9
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f9ad 	bl	8004c00 <TFT_Write>

	TFT_Write(pTFTHandle, 0x01, 0x0006);
 80048a6:	2206      	movs	r2, #6
 80048a8:	2101      	movs	r1, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9a8 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x16, 0x0068);
 80048b0:	2268      	movs	r2, #104	; 0x68
 80048b2:	2116      	movs	r1, #22
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f9a3 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x18, 0x0000);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2118      	movs	r1, #24
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f99e 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x70, 0x0065);
 80048c4:	2265      	movs	r2, #101	; 0x65
 80048c6:	2170      	movs	r1, #112	; 0x70
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f999 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x23, 0x0095);
 80048ce:	2295      	movs	r2, #149	; 0x95
 80048d0:	2123      	movs	r1, #35	; 0x23
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f994 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x24, 0x0095);
 80048d8:	2295      	movs	r2, #149	; 0x95
 80048da:	2124      	movs	r1, #36	; 0x24
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f98f 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x25, 0x00FF);
 80048e2:	22ff      	movs	r2, #255	; 0xff
 80048e4:	2125      	movs	r1, #37	; 0x25
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f98a 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x27, 0x0002);
 80048ec:	2202      	movs	r2, #2
 80048ee:	2127      	movs	r1, #39	; 0x27
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f985 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x28, 0x0002);
 80048f6:	2202      	movs	r2, #2
 80048f8:	2128      	movs	r1, #40	; 0x28
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f980 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x29, 0x0002);
 8004900:	2202      	movs	r2, #2
 8004902:	2129      	movs	r1, #41	; 0x29
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f97b 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2A, 0x0002);
 800490a:	2202      	movs	r2, #2
 800490c:	212a      	movs	r1, #42	; 0x2a
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f976 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2C, 0x0002);
 8004914:	2202      	movs	r2, #2
 8004916:	212c      	movs	r1, #44	; 0x2c
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f971 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2D, 0x0002);
 800491e:	2202      	movs	r2, #2
 8004920:	212d      	movs	r1, #45	; 0x2d
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f96c 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3A, 0x0001);
 8004928:	2201      	movs	r2, #1
 800492a:	213a      	movs	r1, #58	; 0x3a
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f967 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3B, 0x0001);
 8004932:	2201      	movs	r2, #1
 8004934:	213b      	movs	r1, #59	; 0x3b
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f962 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3C, 0x00F0);
 800493c:	22f0      	movs	r2, #240	; 0xf0
 800493e:	213c      	movs	r1, #60	; 0x3c
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f95d 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3D, 0x0000);
 8004946:	2200      	movs	r2, #0
 8004948:	213d      	movs	r1, #61	; 0x3d
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f958 	bl	8004c00 <TFT_Write>
	Delay_ms(20);
 8004950:	2014      	movs	r0, #20
 8004952:	f7ff f92f 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x35, 0x0038);
 8004956:	2238      	movs	r2, #56	; 0x38
 8004958:	2135      	movs	r1, #53	; 0x35
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f950 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x36, 0x0078);
 8004960:	2278      	movs	r2, #120	; 0x78
 8004962:	2136      	movs	r1, #54	; 0x36
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f94b 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3E, 0x0038);
 800496a:	2238      	movs	r2, #56	; 0x38
 800496c:	213e      	movs	r1, #62	; 0x3e
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f946 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x40, 0x000F);
 8004974:	220f      	movs	r2, #15
 8004976:	2140      	movs	r1, #64	; 0x40
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f941 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x41, 0x00F0);
 800497e:	22f0      	movs	r2, #240	; 0xf0
 8004980:	2141      	movs	r1, #65	; 0x41
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f93c 	bl	8004c00 <TFT_Write>

	TFT_Write(pTFTHandle, 0x19, 0x0049);
 8004988:	2249      	movs	r2, #73	; 0x49
 800498a:	2119      	movs	r1, #25
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f937 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x93, 0x000F);
 8004992:	220f      	movs	r2, #15
 8004994:	2193      	movs	r1, #147	; 0x93
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f932 	bl	8004c00 <TFT_Write>
	Delay_ms(10);
 800499c:	200a      	movs	r0, #10
 800499e:	f7ff f909 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x20, 0x0040);
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	2120      	movs	r1, #32
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f92a 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1D, 0x0007);
 80049ac:	2207      	movs	r2, #7
 80049ae:	211d      	movs	r1, #29
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f925 	bl	8004c00 <TFT_Write>
	Delay_ms(10);
 80049b6:	200a      	movs	r0, #10
 80049b8:	f7ff f8fc 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1E, 0x0000);
 80049bc:	2200      	movs	r2, #0
 80049be:	211e      	movs	r1, #30
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f91d 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1F, 0x0004);
 80049c6:	2204      	movs	r2, #4
 80049c8:	211f      	movs	r1, #31
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f918 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x44, 0x0040);
 80049d0:	2240      	movs	r2, #64	; 0x40
 80049d2:	2144      	movs	r1, #68	; 0x44
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f913 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x45, 0x0012);
 80049da:	2212      	movs	r2, #18
 80049dc:	2145      	movs	r1, #69	; 0x45
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f90e 	bl	8004c00 <TFT_Write>
	Delay_ms(10);
 80049e4:	200a      	movs	r0, #10
 80049e6:	f7ff f8e5 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1C, 0x0004);
 80049ea:	2204      	movs	r2, #4
 80049ec:	211c      	movs	r1, #28
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f906 	bl	8004c00 <TFT_Write>
	Delay_ms(20);
 80049f4:	2014      	movs	r0, #20
 80049f6:	f7ff f8dd 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x43, 0x0080);
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	2143      	movs	r1, #67	; 0x43
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8fe 	bl	8004c00 <TFT_Write>
	Delay_ms(5);
 8004a04:	2005      	movs	r0, #5
 8004a06:	f7ff f8d5 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0018);
 8004a0a:	2218      	movs	r2, #24
 8004a0c:	211b      	movs	r1, #27
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8f6 	bl	8004c00 <TFT_Write>
	Delay_ms(40);
 8004a14:	2028      	movs	r0, #40	; 0x28
 8004a16:	f7ff f8cd 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0010);
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	211b      	movs	r1, #27
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8ee 	bl	8004c00 <TFT_Write>
	Delay_ms(40);
 8004a24:	2028      	movs	r0, #40	; 0x28
 8004a26:	f7ff f8c5 	bl	8003bb4 <Delay_ms>

	TFT_Write(pTFTHandle, 0x46, 0x00A4);
 8004a2a:	22a4      	movs	r2, #164	; 0xa4
 8004a2c:	2146      	movs	r1, #70	; 0x46
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8e6 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x47, 0x0053);
 8004a34:	2253      	movs	r2, #83	; 0x53
 8004a36:	2147      	movs	r1, #71	; 0x47
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f8e1 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x48, 0x0010);
 8004a3e:	2210      	movs	r2, #16
 8004a40:	2148      	movs	r1, #72	; 0x48
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8dc 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x49, 0x005F);
 8004a48:	225f      	movs	r2, #95	; 0x5f
 8004a4a:	2149      	movs	r1, #73	; 0x49
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8d7 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4A, 0x0004);
 8004a52:	2204      	movs	r2, #4
 8004a54:	214a      	movs	r1, #74	; 0x4a
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8d2 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4B, 0x003F);
 8004a5c:	223f      	movs	r2, #63	; 0x3f
 8004a5e:	214b      	movs	r1, #75	; 0x4b
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8cd 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4C, 0x0002);
 8004a66:	2202      	movs	r2, #2
 8004a68:	214c      	movs	r1, #76	; 0x4c
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8c8 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4D, 0x00F6);
 8004a70:	22f6      	movs	r2, #246	; 0xf6
 8004a72:	214d      	movs	r1, #77	; 0x4d
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8c3 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4E, 0x0012);
 8004a7a:	2212      	movs	r2, #18
 8004a7c:	214e      	movs	r1, #78	; 0x4e
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f8be 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4F, 0x004C);
 8004a84:	224c      	movs	r2, #76	; 0x4c
 8004a86:	214f      	movs	r1, #79	; 0x4f
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8b9 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x50, 0x0046);
 8004a8e:	2246      	movs	r2, #70	; 0x46
 8004a90:	2150      	movs	r1, #80	; 0x50
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8b4 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x51, 0x0044);
 8004a98:	2244      	movs	r2, #68	; 0x44
 8004a9a:	2151      	movs	r1, #81	; 0x51
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f8af 	bl	8004c00 <TFT_Write>

	TFT_Write(pTFTHandle, 0x90, 0x007F);
 8004aa2:	227f      	movs	r2, #127	; 0x7f
 8004aa4:	2190      	movs	r1, #144	; 0x90
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8aa 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x0004);
 8004aac:	2204      	movs	r2, #4
 8004aae:	2126      	movs	r1, #38	; 0x26
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f8a5 	bl	8004c00 <TFT_Write>
	Delay_ms(40);
 8004ab6:	2028      	movs	r0, #40	; 0x28
 8004ab8:	f7ff f87c 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x0024);
 8004abc:	2224      	movs	r2, #36	; 0x24
 8004abe:	2126      	movs	r1, #38	; 0x26
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f89d 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x002C);
 8004ac6:	222c      	movs	r2, #44	; 0x2c
 8004ac8:	2126      	movs	r1, #38	; 0x26
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f898 	bl	8004c00 <TFT_Write>
	Delay_ms(40);
 8004ad0:	2028      	movs	r0, #40	; 0x28
 8004ad2:	f7ff f86f 	bl	8003bb4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x003C);
 8004ad6:	223c      	movs	r2, #60	; 0x3c
 8004ad8:	2126      	movs	r1, #38	; 0x26
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f890 	bl	8004c00 <TFT_Write>

	TFT_Write(pTFTHandle, 0x57, 0x0002);
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	2157      	movs	r1, #87	; 0x57
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f88b 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x55, 0x0000);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2155      	movs	r1, #85	; 0x55
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f886 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0xFE, 0x005A);
 8004af4:	225a      	movs	r2, #90	; 0x5a
 8004af6:	21fe      	movs	r1, #254	; 0xfe
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f881 	bl	8004c00 <TFT_Write>
	TFT_Write(pTFTHandle, 0x57, 0x0000);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2157      	movs	r1, #87	; 0x57
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f87c 	bl	8004c00 <TFT_Write>

	TFT_Clear_Screen(pTFTHandle);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f88f 	bl	8004c2c <TFT_Clear_Screen>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <TFT_Command>:
	 */
}


void TFT_Command(TFT_HandleTypeDef *pTFTHandle, uint16_t indexRegister)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	807b      	strh	r3, [r7, #2]
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS, GPIO_PIN_RESET);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6858      	ldr	r0, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4313      	orrs	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f7fd f82f 	bl	8001b9c <GPIO_WritePin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, indexRegister);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd f874 	bl	8001c34 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6858      	ldr	r0, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2200      	movs	r2, #0
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f7fd f81f 	bl	8001b9c <GPIO_WritePin>
	asm("NOP");
 8004b5e:	bf00      	nop
	asm("NOP");
 8004b60:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6858      	ldr	r0, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7fd f814 	bl	8001b9c <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6858      	ldr	r0, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7fd f80b 	bl	8001b9c <GPIO_WritePin>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <TFT_Data>:


void TFT_Data(TFT_HandleTypeDef *pTFTHandle, uint16_t data)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	807b      	strh	r3, [r7, #2]
	GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_RS, pTFTHandle->Init.GPIO_Pin_TFT_nCS);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6858      	ldr	r0, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	f7fd f814 	bl	8001bd8 <GPIO_ModifyPin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, data);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	887a      	ldrh	r2, [r7, #2]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd f83b 	bl	8001c34 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6858      	ldr	r0, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fc ffe6 	bl	8001b9c <GPIO_WritePin>
	asm("NOP");
 8004bd0:	bf00      	nop
	asm("NOP");
 8004bd2:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6858      	ldr	r0, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2201      	movs	r2, #1
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fc ffdb 	bl	8001b9c <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6858      	ldr	r0, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f7fc ffd2 	bl	8001b9c <GPIO_WritePin>
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <TFT_Write>:


void TFT_Write(TFT_HandleTypeDef *pTFTHandle, uint16_t reg, uint16_t val)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	803b      	strh	r3, [r7, #0]
	TFT_Command(pTFTHandle, reg);
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff7e 	bl	8004b16 <TFT_Command>
	TFT_Data(pTFTHandle, val);
 8004c1a:	883b      	ldrh	r3, [r7, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffb5 	bl	8004b8e <TFT_Data>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <TFT_Clear_Screen>:




void TFT_Clear_Screen(TFT_HandleTypeDef *pTFTHandle)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	TFT_Color_Screen(pTFTHandle, Black);
 8004c34:	2100      	movs	r1, #0
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f804 	bl	8004c44 <TFT_Color_Screen>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <TFT_Color_Screen>:


void TFT_Color_Screen(TFT_HandleTypeDef *pTFTHandle, uint16_t color)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	807b      	strh	r3, [r7, #2]
	uint16_t i, j;

	TFT_GRAM_Address(pTFTHandle, 0, 0);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f81c 	bl	8004c92 <TFT_GRAM_Address>

	for(i = 0; i < 320; i++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	81fb      	strh	r3, [r7, #14]
 8004c5e:	e010      	b.n	8004c82 <TFT_Color_Screen+0x3e>
	{
		for(j = 0; j < 240; j++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	81bb      	strh	r3, [r7, #12]
 8004c64:	e007      	b.n	8004c76 <TFT_Color_Screen+0x32>
		{
			TFT_Data(pTFTHandle, color);
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff8f 	bl	8004b8e <TFT_Data>
		for(j = 0; j < 240; j++)
 8004c70:	89bb      	ldrh	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	81bb      	strh	r3, [r7, #12]
 8004c76:	89bb      	ldrh	r3, [r7, #12]
 8004c78:	2bef      	cmp	r3, #239	; 0xef
 8004c7a:	d9f4      	bls.n	8004c66 <TFT_Color_Screen+0x22>
	for(i = 0; i < 320; i++)
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	81fb      	strh	r3, [r7, #14]
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004c88:	d3ea      	bcc.n	8004c60 <TFT_Color_Screen+0x1c>
		}
	}
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <TFT_GRAM_Address>:


void TFT_GRAM_Address(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	807b      	strh	r3, [r7, #2]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	803b      	strh	r3, [r7, #0]
	if(pTFTHandle->ScreenMode == 'L')
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca8:	2b4c      	cmp	r3, #76	; 0x4c
 8004caa:	d122      	bne.n	8004cf2 <TFT_GRAM_Address+0x60>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004cac:	887b      	ldrh	r3, [r7, #2]
 8004cae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004cb2:	d245      	bcs.n	8004d40 <TFT_GRAM_Address+0xae>
 8004cb4:	883b      	ldrh	r3, [r7, #0]
 8004cb6:	2bef      	cmp	r3, #239	; 0xef
 8004cb8:	d842      	bhi.n	8004d40 <TFT_GRAM_Address+0xae>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff9b 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff93 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2106      	movs	r1, #6
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ff8e 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004ce4:	883b      	ldrh	r3, [r7, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2107      	movs	r1, #7
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff88 	bl	8004c00 <TFT_Write>
 8004cf0:	e021      	b.n	8004d36 <TFT_GRAM_Address+0xa4>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	2bef      	cmp	r3, #239	; 0xef
 8004cf6:	d825      	bhi.n	8004d44 <TFT_GRAM_Address+0xb2>
 8004cf8:	883b      	ldrh	r3, [r7, #0]
 8004cfa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004cfe:	d221      	bcs.n	8004d44 <TFT_GRAM_Address+0xb2>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2102      	movs	r1, #2
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff7b 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2103      	movs	r1, #3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff75 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004d16:	883b      	ldrh	r3, [r7, #0]
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2106      	movs	r1, #6
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ff6d 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004d26:	883b      	ldrh	r3, [r7, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2107      	movs	r1, #7
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff65 	bl	8004c00 <TFT_Write>
	}

	TFT_Command(pTFTHandle, 0x22);
 8004d36:	2122      	movs	r1, #34	; 0x22
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff feec 	bl	8004b16 <TFT_Command>
 8004d3e:	e002      	b.n	8004d46 <TFT_GRAM_Address+0xb4>
		if((xPos > 319) || (yPos > 239))	return;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <TFT_GRAM_Address+0xb4>
		if((xPos > 239) || (yPos > 319))	return;
 8004d44:	bf00      	nop
}
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <TFT_xy>:


void TFT_xy(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	70bb      	strb	r3, [r7, #2]
	pTFTHandle->Xcharacter = xChar;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	78ba      	ldrb	r2, [r7, #2]
 8004d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <TFT_Pixel>:
	pTFTHandle->background = colorback;
}


void TFT_Pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos, uint16_t color)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	461a      	mov	r2, r3
 8004d84:	4603      	mov	r3, r0
 8004d86:	817b      	strh	r3, [r7, #10]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	813b      	strh	r3, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
	if(pTFTHandle->ScreenMode == 'L')
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d96:	2b4c      	cmp	r3, #76	; 0x4c
 8004d98:	d122      	bne.n	8004de0 <TFT_Pixel+0x6a>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004d9a:	897b      	ldrh	r3, [r7, #10]
 8004d9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004da0:	d24c      	bcs.n	8004e3c <TFT_Pixel+0xc6>
 8004da2:	893b      	ldrh	r3, [r7, #8]
 8004da4:	2bef      	cmp	r3, #239	; 0xef
 8004da6:	d849      	bhi.n	8004e3c <TFT_Pixel+0xc6>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004da8:	897b      	ldrh	r3, [r7, #10]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	2102      	movs	r1, #2
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff ff24 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2103      	movs	r1, #3
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff1c 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2106      	movs	r1, #6
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff ff17 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004dd2:	893b      	ldrh	r3, [r7, #8]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2107      	movs	r1, #7
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ff11 	bl	8004c00 <TFT_Write>
 8004dde:	e021      	b.n	8004e24 <TFT_Pixel+0xae>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	2bef      	cmp	r3, #239	; 0xef
 8004de4:	d82c      	bhi.n	8004e40 <TFT_Pixel+0xca>
 8004de6:	893b      	ldrh	r3, [r7, #8]
 8004de8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004dec:	d228      	bcs.n	8004e40 <TFT_Pixel+0xca>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2102      	movs	r1, #2
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff ff04 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004df8:	897b      	ldrh	r3, [r7, #10]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fefe 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2106      	movs	r1, #6
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fef6 	bl	8004c00 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2107      	movs	r1, #7
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff feee 	bl	8004c00 <TFT_Write>
	}

	if(color != Transparent)	TFT_Write(pTFTHandle, 0x22, color);
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	f640 0221 	movw	r2, #2081	; 0x821
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <TFT_Pixel+0xcc>
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	461a      	mov	r2, r3
 8004e32:	2122      	movs	r1, #34	; 0x22
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fee3 	bl	8004c00 <TFT_Write>
 8004e3a:	e002      	b.n	8004e42 <TFT_Pixel+0xcc>
		if((xPos > 319) || (yPos > 239))	return;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <TFT_Pixel+0xcc>
		if((xPos > 239) || (yPos > 319))	return;
 8004e40:	bf00      	nop
}
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <TFT_English>:

}


void TFT_English(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b0c8      	sub	sp, #288	; 0x120
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	6018      	str	r0, [r3, #0]
 8004e52:	460a      	mov	r2, r1
 8004e54:	1cfb      	adds	r3, r7, #3
 8004e56:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 8; x++)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004e5e:	e044      	b.n	8004eea <TFT_English+0xa2>
	{
		data = E_font[code][x];
 8004e60:	1cfb      	adds	r3, r7, #3
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e68:	497f      	ldr	r1, [pc, #508]	; (8005068 <TFT_English+0x220>)
 8004e6a:	0112      	lsls	r2, r2, #4
 8004e6c:	440a      	add	r2, r1
 8004e6e:	4413      	add	r3, r2
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004e7c:	e02c      	b.n	8004ed8 <TFT_English+0x90>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8004e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <TFT_English+0x60>
 8004e8a:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004e8e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004e98:	f107 030c 	add.w	r3, r7, #12
 8004e9c:	0109      	lsls	r1, r1, #4
 8004e9e:	440a      	add	r2, r1
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004ea6:	e00d      	b.n	8004ec4 <TFT_English+0x7c>
			else				pixel[x][y] = pTFTHandle->background;
 8004ea8:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004eac:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004eb0:	1d3b      	adds	r3, r7, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	0109      	lsls	r1, r1, #4
 8004ebc:	440a      	add	r2, r1
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004ece:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004ed8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004edc:	2b07      	cmp	r3, #7
 8004ede:	d9ce      	bls.n	8004e7e <TFT_English+0x36>
	for(x = 0; x < 8; x++)
 8004ee0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004eea:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	d9b6      	bls.n	8004e60 <TFT_English+0x18>
		}
	}

	for(x = 0; x < 8; x++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004ef8:	e049      	b.n	8004f8e <TFT_English+0x146>
	{
		data = E_font[code][x+8];
 8004efa:	1cfb      	adds	r3, r7, #3
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f02:	3308      	adds	r3, #8
 8004f04:	4958      	ldr	r1, [pc, #352]	; (8005068 <TFT_English+0x220>)
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	440a      	add	r2, r1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004f18:	e030      	b.n	8004f7c <TFT_English+0x134>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8004f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <TFT_English+0x100>
 8004f26:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004f2a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f2e:	f103 0208 	add.w	r2, r3, #8
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	0109      	lsls	r1, r1, #4
 8004f3e:	440a      	add	r2, r1
 8004f40:	4601      	mov	r1, r0
 8004f42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004f46:	e00f      	b.n	8004f68 <TFT_English+0x120>
			else				pixel[x][y+8] = pTFTHandle->background;
 8004f48:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004f4c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f50:	f103 0208 	add.w	r2, r3, #8
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004f5a:	f107 030c 	add.w	r3, r7, #12
 8004f5e:	0109      	lsls	r1, r1, #4
 8004f60:	440a      	add	r2, r1
 8004f62:	4601      	mov	r1, r0
 8004f64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004f72:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f76:	3301      	adds	r3, #1
 8004f78:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004f7c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	d9ca      	bls.n	8004f1a <TFT_English+0xd2>
	for(x = 0; x < 8; x++)
 8004f84:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004f8e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	d9b1      	bls.n	8004efa <TFT_English+0xb2>
		}
	}

	if(pTFTHandle->outline_flag == 1)
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	f040 80ed 	bne.w	800517e <TFT_English+0x336>
	{
		for(x = 0; x < 8; x++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004faa:	e0e3      	b.n	8005174 <TFT_English+0x32c>
		{
			dot0 = E_font[code][x] + E_font[code][x+8]*256;
 8004fac:	1cfb      	adds	r3, r7, #3
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004fb4:	492c      	ldr	r1, [pc, #176]	; (8005068 <TFT_English+0x220>)
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	440a      	add	r2, r1
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	1cfb      	adds	r3, r7, #3
 8004fc2:	7819      	ldrb	r1, [r3, #0]
 8004fc4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004fc8:	3308      	adds	r3, #8
 8004fca:	4827      	ldr	r0, [pc, #156]	; (8005068 <TFT_English+0x220>)
 8004fcc:	0109      	lsls	r1, r1, #4
 8004fce:	4401      	add	r1, r0
 8004fd0:	440b      	add	r3, r1
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			dot1 = dot0 >> 1;
 8004fe0:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			dot2 = dot0;
 8004fea:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004fee:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			dot3 = E_font[code][x+1] + E_font[code][x+9]*256;
 8004ff2:	1cfb      	adds	r3, r7, #3
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	491a      	ldr	r1, [pc, #104]	; (8005068 <TFT_English+0x220>)
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	440a      	add	r2, r1
 8005002:	4413      	add	r3, r2
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b29a      	uxth	r2, r3
 8005008:	1cfb      	adds	r3, r7, #3
 800500a:	7819      	ldrb	r1, [r3, #0]
 800500c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005010:	3309      	adds	r3, #9
 8005012:	4815      	ldr	r0, [pc, #84]	; (8005068 <TFT_English+0x220>)
 8005014:	0109      	lsls	r1, r1, #4
 8005016:	4401      	add	r1, r0
 8005018:	440b      	add	r3, r1
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	b29b      	uxth	r3, r3
 8005022:	4413      	add	r3, r2
 8005024:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			dot4 = E_font[code][x-1] + E_font[code][x+7]*256;
 8005028:	1cfb      	adds	r3, r7, #3
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005030:	3b01      	subs	r3, #1
 8005032:	490d      	ldr	r1, [pc, #52]	; (8005068 <TFT_English+0x220>)
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	440a      	add	r2, r1
 8005038:	4413      	add	r3, r2
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b29a      	uxth	r2, r3
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	7819      	ldrb	r1, [r3, #0]
 8005042:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005046:	3307      	adds	r3, #7
 8005048:	4807      	ldr	r0, [pc, #28]	; (8005068 <TFT_English+0x220>)
 800504a:	0109      	lsls	r1, r1, #4
 800504c:	4401      	add	r1, r0
 800504e:	440b      	add	r3, r1
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	b29b      	uxth	r3, r3
 8005058:	4413      	add	r3, r2
 800505a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for(y = 0; y < 15; y++)
 800505e:	2300      	movs	r3, #0
 8005060:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005064:	e07d      	b.n	8005162 <TFT_English+0x31a>
 8005066:	bf00      	nop
 8005068:	080080ec 	.word	0x080080ec
			{
				if(!(dot0 & 0x0001))
 800506c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d157      	bne.n	8005128 <TFT_English+0x2e0>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8005078:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <TFT_English+0x258>
 8005084:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8005088:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	0109      	lsls	r1, r1, #4
 8005098:	440a      	add	r2, r1
 800509a:	4601      	mov	r1, r0
 800509c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 80050a0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <TFT_English+0x280>
 80050ac:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80050b0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80050ba:	f107 030c 	add.w	r3, r7, #12
 80050be:	0109      	lsls	r1, r1, #4
 80050c0:	440a      	add	r2, r1
 80050c2:	4601      	mov	r1, r0
 80050c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot3 & 0x0001) && (x < 7))		pixel[x][y] = pTFTHandle->outline;
 80050c8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <TFT_English+0x2b0>
 80050d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d80d      	bhi.n	80050f8 <TFT_English+0x2b0>
 80050dc:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80050e0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80050ea:	f107 030c 	add.w	r3, r7, #12
 80050ee:	0109      	lsls	r1, r1, #4
 80050f0:	440a      	add	r2, r1
 80050f2:	4601      	mov	r1, r0
 80050f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 80050f8:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <TFT_English+0x2e0>
 8005104:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <TFT_English+0x2e0>
 800510c:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8005110:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	0109      	lsls	r1, r1, #4
 8005120:	440a      	add	r2, r1
 8005122:	4601      	mov	r1, r0
 8005124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}

				dot1 >>= 1;
 8005128:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				dot2 = dot0;
 8005132:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8005136:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				dot0 >>= 1;
 800513a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
				dot3 >>= 1;
 8005144:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				dot4 >>= 1;
 800514e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			for(y = 0; y < 15; y++)
 8005158:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800515c:	3301      	adds	r3, #1
 800515e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005162:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005166:	2b0e      	cmp	r3, #14
 8005168:	d980      	bls.n	800506c <TFT_English+0x224>
		for(x = 0; x < 8; x++)
 800516a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800516e:	3301      	adds	r3, #1
 8005170:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005174:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005178:	2b07      	cmp	r3, #7
 800517a:	f67f af17 	bls.w	8004fac <TFT_English+0x164>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit)
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800518e:	429a      	cmp	r2, r3
 8005190:	d31f      	bcc.n	80051d2 <TFT_English+0x38a>
	{
		pTFTHandle->Xcharacter = 0;
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		pTFTHandle->Ycharacter += 2;
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a4:	3302      	adds	r3, #2
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit - 1))		pTFTHandle->Ycharacter = 0;
 80051b0:	1d3b      	adds	r3, r7, #4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b8:	461a      	mov	r2, r3
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80051c2:	3b01      	subs	r3, #1
 80051c4:	429a      	cmp	r2, r3
 80051c6:	db04      	blt.n	80051d2 <TFT_English+0x38a>
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if(pTFTHandle->underscore_flag == 1)
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d118      	bne.n	8005210 <TFT_English+0x3c8>
	{
		for(x = 0; x < 8; x++)
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80051e4:	e010      	b.n	8005208 <TFT_English+0x3c0>
		{
			pixel[x][15] = pTFTHandle->underscore;
 80051e6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051ea:	1d3a      	adds	r2, r7, #4
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 80051f0:	f107 020c 	add.w	r2, r7, #12
 80051f4:	015b      	lsls	r3, r3, #5
 80051f6:	4413      	add	r3, r2
 80051f8:	331e      	adds	r3, #30
 80051fa:	460a      	mov	r2, r1
 80051fc:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 80051fe:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005202:	3301      	adds	r3, #1
 8005204:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005208:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800520c:	2b07      	cmp	r3, #7
 800520e:	d9ea      	bls.n	80051e6 <TFT_English+0x39e>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005218:	2b01      	cmp	r3, #1
 800521a:	d138      	bne.n	800528e <TFT_English+0x446>
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800522c:	429a      	cmp	r2, r3
 800522e:	d12e      	bne.n	800528e <TFT_English+0x446>
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005238:	1d3b      	adds	r3, r7, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005240:	429a      	cmp	r2, r3
 8005242:	d124      	bne.n	800528e <TFT_English+0x446>
	{
		for(x = 0; x < 8; x++)
 8005244:	2300      	movs	r3, #0
 8005246:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800524a:	e01c      	b.n	8005286 <TFT_English+0x43e>
		{
			pixel[x][14] = pTFTHandle->cursor;
 800524c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005250:	1d3a      	adds	r2, r7, #4
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005256:	f107 020c 	add.w	r2, r7, #12
 800525a:	015b      	lsls	r3, r3, #5
 800525c:	4413      	add	r3, r2
 800525e:	331c      	adds	r3, #28
 8005260:	460a      	mov	r2, r1
 8005262:	801a      	strh	r2, [r3, #0]
			pixel[x][15] = pTFTHandle->cursor;
 8005264:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005268:	1d3a      	adds	r2, r7, #4
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	015b      	lsls	r3, r3, #5
 8005274:	4413      	add	r3, r2
 8005276:	331e      	adds	r3, #30
 8005278:	460a      	mov	r2, r1
 800527a:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 800527c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005280:	3301      	adds	r3, #1
 8005282:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005286:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800528a:	2b07      	cmp	r3, #7
 800528c:	d9de      	bls.n	800524c <TFT_English+0x404>
		}
	}

	if(pTFTHandle->background != Transparent)
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005294:	f640 0221 	movw	r2, #2081	; 0x821
 8005298:	4293      	cmp	r3, r2
 800529a:	f000 80cd 	beq.w	8005438 <TFT_English+0x5f0>
	{
		xPos = pTFTHandle->Xcharacter * 8;
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

		for(y = 0; y < 16; y++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80052b4:	e0ba      	b.n	800542c <TFT_English+0x5e4>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052be:	b29b      	uxth	r3, r3
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			if(pTFTHandle->ScreenMode == 'L')
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052d8:	2b4c      	cmp	r3, #76	; 0x4c
 80052da:	d11f      	bne.n	800531c <TFT_English+0x4d4>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 80052dc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	2102      	movs	r1, #2
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	f7ff fc89 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 80052ee:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	2103      	movs	r1, #3
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	f7ff fc80 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	2200      	movs	r2, #0
 8005304:	2106      	movs	r1, #6
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	f7ff fc7a 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 800530c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	2107      	movs	r1, #7
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	f7ff fc73 	bl	8004c00 <TFT_Write>
 800531a:	e01e      	b.n	800535a <TFT_English+0x512>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	2200      	movs	r2, #0
 8005320:	2102      	movs	r1, #2
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	f7ff fc6c 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 8005328:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	2103      	movs	r1, #3
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	f7ff fc65 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8005336:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b29a      	uxth	r2, r3
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	2106      	movs	r1, #6
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	f7ff fc5c 	bl	8004c00 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8005348:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800534c:	b2db      	uxtb	r3, r3
 800534e:	b29a      	uxth	r2, r3
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	2107      	movs	r1, #7
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	f7ff fc53 	bl	8004c00 <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	2122      	movs	r1, #34	; 0x22
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	f7ff fbd9 	bl	8004b16 <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 8005364:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	4611      	mov	r1, r2
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f7ff fc0a 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 800537a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800537e:	f107 030c 	add.w	r3, r7, #12
 8005382:	3210      	adds	r2, #16
 8005384:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	4611      	mov	r1, r2
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	f7ff fbfe 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 8005392:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005396:	f107 030c 	add.w	r3, r7, #12
 800539a:	3220      	adds	r2, #32
 800539c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	4611      	mov	r1, r2
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	f7ff fbf2 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 80053aa:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	3230      	adds	r2, #48	; 0x30
 80053b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	4611      	mov	r1, r2
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f7ff fbe6 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 80053c2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	3240      	adds	r2, #64	; 0x40
 80053cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	4611      	mov	r1, r2
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	f7ff fbda 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 80053da:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	3250      	adds	r2, #80	; 0x50
 80053e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	4611      	mov	r1, r2
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	f7ff fbce 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 80053f2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80053f6:	f107 030c 	add.w	r3, r7, #12
 80053fa:	3260      	adds	r2, #96	; 0x60
 80053fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	4611      	mov	r1, r2
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f7ff fbc2 	bl	8004b8e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 800540a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	3270      	adds	r2, #112	; 0x70
 8005414:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	4611      	mov	r1, r2
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	f7ff fbb6 	bl	8004b8e <TFT_Data>
		for(y = 0; y < 16; y++)
 8005422:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005426:	3301      	adds	r3, #1
 8005428:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800542c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005430:	2b0f      	cmp	r3, #15
 8005432:	f67f af40 	bls.w	80052b6 <TFT_English+0x46e>
 8005436:	e041      	b.n	80054bc <TFT_English+0x674>
		}
	}
	else
	{
		for(y = 0; y < 16; y++)
 8005438:	2300      	movs	r3, #0
 800543a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800543e:	e039      	b.n	80054b4 <TFT_English+0x66c>
		{
			for(x = 0; x < 8; x++)
 8005440:	2300      	movs	r3, #0
 8005442:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005446:	e02c      	b.n	80054a2 <TFT_English+0x65a>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 8 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005450:	b29b      	uxth	r3, r3
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	b29a      	uxth	r2, r3
 8005456:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800545a:	b29b      	uxth	r3, r3
 800545c:	4413      	add	r3, r2
 800545e:	b29c      	uxth	r4, r3
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005468:	b29b      	uxth	r3, r3
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	b29a      	uxth	r2, r3
 800546e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005472:	b29b      	uxth	r3, r3
 8005474:	4413      	add	r3, r2
 8005476:	b29d      	uxth	r5, r3
 8005478:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800547c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005480:	f107 030c 	add.w	r3, r7, #12
 8005484:	0109      	lsls	r1, r1, #4
 8005486:	440a      	add	r2, r1
 8005488:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800548c:	1d38      	adds	r0, r7, #4
 800548e:	462a      	mov	r2, r5
 8005490:	4621      	mov	r1, r4
 8005492:	6800      	ldr	r0, [r0, #0]
 8005494:	f7ff fc6f 	bl	8004d76 <TFT_Pixel>
			for(x = 0; x < 8; x++)
 8005498:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800549c:	3301      	adds	r3, #1
 800549e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80054a2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80054a6:	2b07      	cmp	r3, #7
 80054a8:	d9ce      	bls.n	8005448 <TFT_English+0x600>
		for(y = 0; y < 16; y++)
 80054aa:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80054ae:	3301      	adds	r3, #1
 80054b0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80054b4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d9c1      	bls.n	8005440 <TFT_English+0x5f8>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80054c4:	3301      	adds	r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80054d0:	bf00      	nop
 80054d2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bdb0      	pop	{r4, r5, r7, pc}
 80054da:	bf00      	nop

080054dc <TFT_Unsigned_decimal>:
	}
}


void TFT_Unsigned_decimal(TFT_HandleTypeDef *pTFTHandle, uint32_t number, uint8_t zerofill, uint8_t digit)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	460b      	mov	r3, r1
 80054ec:	71fb      	strb	r3, [r7, #7]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, character;
	uint32_t div;

	if((digit == 0) || (digit > 9))		return ;
 80054f2:	79bb      	ldrb	r3, [r7, #6]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d046      	beq.n	8005586 <TFT_Unsigned_decimal+0xaa>
 80054f8:	79bb      	ldrb	r3, [r7, #6]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d843      	bhi.n	8005586 <TFT_Unsigned_decimal+0xaa>

	div = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
	while(--digit)		div *= 10;
 8005502:	e005      	b.n	8005510 <TFT_Unsigned_decimal+0x34>
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	79bb      	ldrb	r3, [r7, #6]
 8005512:	3b01      	subs	r3, #1
 8005514:	71bb      	strb	r3, [r7, #6]
 8005516:	79bb      	ldrb	r3, [r7, #6]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f3      	bne.n	8005504 <TFT_Unsigned_decimal+0x28>

	zero_flag = zerofill;
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	77fb      	strb	r3, [r7, #31]

	while(div > 0)
 8005520:	e02d      	b.n	800557e <TFT_Unsigned_decimal+0xa2>
	{
		character = number / div;
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	fbb2 f3f3 	udiv	r3, r2, r3
 800552a:	75fb      	strb	r3, [r7, #23]

		if((character == 0) && (zero_flag == 0) && (div != 1))
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <TFT_Unsigned_decimal+0x72>
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <TFT_Unsigned_decimal+0x72>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d007      	beq.n	800554e <TFT_Unsigned_decimal+0x72>
		{
			TFT_English(pTFTHandle, character + '0');
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	3330      	adds	r3, #48	; 0x30
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fc7e 	bl	8004e48 <TFT_English>
 800554c:	e008      	b.n	8005560 <TFT_Unsigned_decimal+0x84>
		}
		else
		{
			zero_flag = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character+ '0');
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	3330      	adds	r3, #48	; 0x30
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4619      	mov	r1, r3
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fc74 	bl	8004e48 <TFT_English>
		}

		number %= div;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	fbb3 f2f2 	udiv	r2, r3, r2
 8005568:	69b9      	ldr	r1, [r7, #24]
 800556a:	fb01 f202 	mul.w	r2, r1, r2
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	60bb      	str	r3, [r7, #8]
		div /= 10;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <TFT_Unsigned_decimal+0xb4>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	61bb      	str	r3, [r7, #24]
	while(div > 0)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ce      	bne.n	8005522 <TFT_Unsigned_decimal+0x46>
 8005584:	e000      	b.n	8005588 <TFT_Unsigned_decimal+0xac>
	if((digit == 0) || (digit > 9))		return ;
 8005586:	bf00      	nop
	}
}
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	cccccccd 	.word	0xcccccccd

08005594 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff f835 	bl	800460c <TS_MspInit>
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <TS_Read_ADS7846>:


uint16_t TS_Read_ADS7846(uint16_t command)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
	uint16_t axis;

	axis = SPI2->DR;
 80055b6:	4b19      	ldr	r3, [pc, #100]	; (800561c <TS_Read_ADS7846+0x70>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80055bc:	2200      	movs	r2, #0
 80055be:	2108      	movs	r1, #8
 80055c0:	4817      	ldr	r0, [pc, #92]	; (8005620 <TS_Read_ADS7846+0x74>)
 80055c2:	f7fc faeb 	bl	8001b9c <GPIO_WritePin>
	SPI2->DR = command;
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <TS_Read_ADS7846+0x70>)
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	60d3      	str	r3, [r2, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 80055cc:	bf00      	nop
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <TS_Read_ADS7846+0x70>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d1f9      	bne.n	80055ce <TS_Read_ADS7846+0x22>
	axis = SPI2->DR;
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <TS_Read_ADS7846+0x70>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	81fb      	strh	r3, [r7, #14]
	Delay_us(1);
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7fe facb 	bl	8003b7c <Delay_us>
	SPI2->DR = 0x0000;
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <TS_Read_ADS7846+0x70>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 80055ec:	bf00      	nop
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <TS_Read_ADS7846+0x70>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d1f9      	bne.n	80055ee <TS_Read_ADS7846+0x42>
	axis = SPI2->DR;
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <TS_Read_ADS7846+0x70>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005600:	2201      	movs	r2, #1
 8005602:	2108      	movs	r1, #8
 8005604:	4806      	ldr	r0, [pc, #24]	; (8005620 <TS_Read_ADS7846+0x74>)
 8005606:	f7fc fac9 	bl	8001b9c <GPIO_WritePin>

	axis >>= 3;
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	81fb      	strh	r3, [r7, #14]

	return axis;
 8005610:	89fb      	ldrh	r3, [r7, #14]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40003800 	.word	0x40003800
 8005620:	40010c00 	.word	0x40010c00
 8005624:	00000000 	.word	0x00000000

08005628 <TS_Input>:


void TS_Input(TS_HandleTypeDef *pTSHandle)
{
 8005628:	b5b0      	push	{r4, r5, r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint16_t temp;

	pTSHandle->x_12bit = 0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit = 0;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a

	for(i = 0; i < 16; i++)
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	e040      	b.n	80056c4 <TS_Input+0x9c>
	{
		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8005642:	2110      	movs	r1, #16
 8005644:	488c      	ldr	r0, [pc, #560]	; (8005878 <TS_Input+0x250>)
 8005646:	f7fc fa93 	bl	8001b70 <GPIO_ReadPin>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d117      	bne.n	8005680 <TS_Input+0x58>
		{
			pTSHandle->x_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_X);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8c1b      	ldrh	r3, [r3, #32]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ffa9 	bl	80055ac <TS_Read_ADS7846>
 800565a:	4603      	mov	r3, r0
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	4413      	add	r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->x_12bit = 0;
			pTSHandle->y_12bit = 0;
			break;
		}

		Delay_us(10);
 800566a:	200a      	movs	r0, #10
 800566c:	f7fe fa86 	bl	8003b7c <Delay_us>

		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8005670:	2110      	movs	r1, #16
 8005672:	4881      	ldr	r0, [pc, #516]	; (8005878 <TS_Input+0x250>)
 8005674:	f7fc fa7c 	bl	8001b70 <GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d115      	bne.n	80056aa <TS_Input+0x82>
 800567e:	e006      	b.n	800568e <TS_Input+0x66>
			pTSHandle->x_12bit = 0;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800568c:	e01d      	b.n	80056ca <TS_Input+0xa2>
		{
			pTSHandle->y_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_Y);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff ff8a 	bl	80055ac <TS_Read_ADS7846>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	4413      	add	r3, r2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056a8:	e006      	b.n	80056b8 <TS_Input+0x90>
		}
		else
		{
			pTSHandle->x_12bit = 0;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80056b6:	e008      	b.n	80056ca <TS_Input+0xa2>
		}

		Delay_us(10);
 80056b8:	200a      	movs	r0, #10
 80056ba:	f7fe fa5f 	bl	8003b7c <Delay_us>
	for(i = 0; i < 16; i++)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3301      	adds	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d9bb      	bls.n	8005642 <TS_Input+0x1a>
	}

	pTSHandle->x_12bit >>= 4;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit >>= 4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a

	if((pTSHandle->x_12bit == 0) && (pTSHandle->y_12bit == 0))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <TS_Input+0xd8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <TS_Input+0xd8>
	{
		pTSHandle->x_touch = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	85da      	strh	r2, [r3, #46]	; 0x2e
		return;
 80056fe:	e0b0      	b.n	8005862 <TS_Input+0x23a>
	}

	if(pTSHandle->x_12bit <= pTSHandle->Init.x_touch_min)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	461a      	mov	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <TS_Input+0xee>
	{
		pTSHandle->x_touch = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005714:	e03c      	b.n	8005790 <TS_Input+0x168>
	}
	else if(pTSHandle->x_12bit >= pTSHandle->Init.x_touch_max)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	461a      	mov	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	429a      	cmp	r2, r3
 8005722:	d303      	bcc.n	800572c <TS_Input+0x104>
	{
		pTSHandle->x_touch = 239;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	22ef      	movs	r2, #239	; 0xef
 8005728:	859a      	strh	r2, [r3, #44]	; 0x2c
 800572a:	e031      	b.n	8005790 <TS_Input+0x168>
	}
	else
	{
		pTSHandle->x_touch = (uint32_t)((float)(pTSHandle->x_12bit - pTSHandle->Init.x_touch_min) * 239./(float)(pTSHandle->Init.x_touch_max - pTSHandle->Init.x_touch_min));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb fa8b 	bl	8000c54 <__aeabi_ui2f>
 800573e:	4603      	mov	r3, r0
 8005740:	4618      	mov	r0, r3
 8005742:	f7fa fe81 	bl	8000448 <__aeabi_f2d>
 8005746:	a348      	add	r3, pc, #288	; (adr r3, 8005868 <TS_Input+0x240>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa fed4 	bl	80004f8 <__aeabi_dmul>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4625      	mov	r5, r4
 8005756:	461c      	mov	r4, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb fa76 	bl	8000c54 <__aeabi_ui2f>
 8005768:	4603      	mov	r3, r0
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa fe6c 	bl	8000448 <__aeabi_f2d>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4620      	mov	r0, r4
 8005776:	4629      	mov	r1, r5
 8005778:	f7fa ffe8 	bl	800074c <__aeabi_ddiv>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	4618      	mov	r0, r3
 8005782:	4621      	mov	r1, r4
 8005784:	f7fb f990 	bl	8000aa8 <__aeabi_d2uiz>
 8005788:	4603      	mov	r3, r0
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	859a      	strh	r2, [r3, #44]	; 0x2c
	}

	if(pTSHandle->y_12bit <= pTSHandle->Init.y_touch_min)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	429a      	cmp	r2, r3
 800579c:	d804      	bhi.n	80057a8 <TS_Input+0x180>
	{
		pTSHandle->y_touch = 319;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f240 123f 	movw	r2, #319	; 0x13f
 80057a4:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057a6:	e040      	b.n	800582a <TS_Input+0x202>
	}
	else if(pTSHandle->y_12bit >= pTSHandle->Init.y_touch_max)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d303      	bcc.n	80057be <TS_Input+0x196>
	{
		pTSHandle->y_touch = 0;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057bc:	e035      	b.n	800582a <TS_Input+0x202>
	}
	else
	{
		pTSHandle->y_touch = 319 - (uint32_t)((float)(pTSHandle->y_12bit - pTSHandle->Init.y_touch_min) * 319./(float)(pTSHandle->Init.y_touch_max - pTSHandle->Init.y_touch_min));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fb fa42 	bl	8000c54 <__aeabi_ui2f>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa fe38 	bl	8000448 <__aeabi_f2d>
 80057d8:	a325      	add	r3, pc, #148	; (adr r3, 8005870 <TS_Input+0x248>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa fe8b 	bl	80004f8 <__aeabi_dmul>
 80057e2:	4603      	mov	r3, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	4625      	mov	r5, r4
 80057e8:	461c      	mov	r4, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb fa2d 	bl	8000c54 <__aeabi_ui2f>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fa fe23 	bl	8000448 <__aeabi_f2d>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa ff9f 	bl	800074c <__aeabi_ddiv>
 800580e:	4603      	mov	r3, r0
 8005810:	460c      	mov	r4, r1
 8005812:	4618      	mov	r0, r3
 8005814:	4621      	mov	r1, r4
 8005816:	f7fb f947 	bl	8000aa8 <__aeabi_d2uiz>
 800581a:	4603      	mov	r3, r0
 800581c:	b29b      	uxth	r3, r3
 800581e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005822:	3301      	adds	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if(TFT1Handle.ScreenMode == 'L')
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <TS_Input+0x254>)
 800582c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005830:	2b4c      	cmp	r3, #76	; 0x4c
 8005832:	d116      	bne.n	8005862 <TS_Input+0x23a>
	{
		temp = pTSHandle->x_12bit;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005838:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_12bit = pTSHandle->y_12bit;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
		pTSHandle->y_12bit = temp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	89ba      	ldrh	r2, [r7, #12]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a
		temp = pTSHandle->x_touch;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800584c:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_touch = pTSHandle->y_touch;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 239 - temp;
 8005856:	89bb      	ldrh	r3, [r7, #12]
 8005858:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	85da      	strh	r2, [r3, #46]	; 0x2e
	}
}
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bdb0      	pop	{r4, r5, r7, pc}
 8005868:	00000000 	.word	0x00000000
 800586c:	406de000 	.word	0x406de000
 8005870:	00000000 	.word	0x00000000
 8005874:	4073f000 	.word	0x4073f000
 8005878:	40010c00 	.word	0x40010c00
 800587c:	200003b4 	.word	0x200003b4

08005880 <Button_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Button_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8005886:	463b      	mov	r3, r7
 8005888:	2210      	movs	r2, #16
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fbc7 	bl	8006020 <memset>

	// 1. Initialize GPIO for START/STOP Button
	GPIOInit.Pin = GPIO_PIN_4;
 8005892:	2310      	movs	r3, #16
 8005894:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_INPUT;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 800589a:	2301      	movs	r3, #1
 800589c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800589e:	463b      	mov	r3, r7
 80058a0:	4619      	mov	r1, r3
 80058a2:	4803      	ldr	r0, [pc, #12]	; (80058b0 <Button_Init+0x30>)
 80058a4:	f7fb ff24 	bl	80016f0 <GPIO_Init>
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40010800 	.word	0x40010800

080058b4 <BLDC1_Init>:


void BLDC1_Init(void)
{
 80058b4:	b598      	push	{r3, r4, r7, lr}
 80058b6:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 80058b8:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <BLDC1_Init+0x180>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 80058be:	4b5d      	ldr	r3, [pc, #372]	; (8005a34 <BLDC1_Init+0x180>)
 80058c0:	2208      	movs	r2, #8
 80058c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 80058c6:	4b5b      	ldr	r3, [pc, #364]	; (8005a34 <BLDC1_Init+0x180>)
 80058c8:	2204      	movs	r2, #4
 80058ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 80058ce:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <BLDC1_Init+0x180>)
 80058d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fda3 	bl	8000424 <__aeabi_i2d>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	461a      	mov	r2, r3
 80058e4:	4623      	mov	r3, r4
 80058e6:	f04f 0000 	mov.w	r0, #0
 80058ea:	4953      	ldr	r1, [pc, #332]	; (8005a38 <BLDC1_Init+0x184>)
 80058ec:	f7fa ff2e 	bl	800074c <__aeabi_ddiv>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4618      	mov	r0, r3
 80058f6:	4621      	mov	r1, r4
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	4b4f      	ldr	r3, [pc, #316]	; (8005a3c <BLDC1_Init+0x188>)
 80058fe:	f7fa ff25 	bl	800074c <__aeabi_ddiv>
 8005902:	4603      	mov	r3, r0
 8005904:	460c      	mov	r4, r1
 8005906:	4a4b      	ldr	r2, [pc, #300]	; (8005a34 <BLDC1_Init+0x180>)
 8005908:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 800590c:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <BLDC1_Init+0x180>)
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8005914:	4b47      	ldr	r3, [pc, #284]	; (8005a34 <BLDC1_Init+0x180>)
 8005916:	2200      	movs	r2, #0
 8005918:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 800591a:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <BLDC1_Init+0x180>)
 800591c:	2200      	movs	r2, #0
 800591e:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8005920:	4a44      	ldr	r2, [pc, #272]	; (8005a34 <BLDC1_Init+0x180>)
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	f04f 0400 	mov.w	r4, #0
 800592a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 800592e:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <BLDC1_Init+0x180>)
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	f04f 0400 	mov.w	r4, #0
 8005938:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 800593c:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <BLDC1_Init+0x180>)
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	f04f 0400 	mov.w	r4, #0
 8005946:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 800594a:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <BLDC1_Init+0x180>)
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8005958:	4a36      	ldr	r2, [pc, #216]	; (8005a34 <BLDC1_Init+0x180>)
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 8005966:	4a33      	ldr	r2, [pc, #204]	; (8005a34 <BLDC1_Init+0x180>)
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	f04f 0400 	mov.w	r4, #0
 8005970:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8005974:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <BLDC1_Init+0x180>)
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 8005982:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <BLDC1_Init+0x180>)
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8005990:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <BLDC1_Init+0x180>)
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	f04f 0400 	mov.w	r4, #0
 800599a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 800599e:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <BLDC1_Init+0x180>)
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 80059ac:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <BLDC1_Init+0x180>)
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <BLDC1_Init+0x180>)
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 80059c8:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <BLDC1_Init+0x180>)
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 80059d6:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <BLDC1_Init+0x180>)
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 80059e4:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <BLDC1_Init+0x180>)
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <BLDC1_Init+0x180>)
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 8005a00:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <BLDC1_Init+0x180>)
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <BLDC1_Init+0x180>)
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 8005a1c:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <BLDC1_Init+0x180>)
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	f04f 0400 	mov.w	r4, #0
 8005a26:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 8005a2a:	4802      	ldr	r0, [pc, #8]	; (8005a34 <BLDC1_Init+0x180>)
 8005a2c:	f7fc ffcf 	bl	80029ce <BLDC_Init>
}
 8005a30:	bf00      	nop
 8005a32:	bd98      	pop	{r3, r4, r7, pc}
 8005a34:	20000280 	.word	0x20000280
 8005a38:	404e0000 	.word	0x404e0000
 8005a3c:	40100000 	.word	0x40100000

08005a40 <UART3_Init>:


void UART3_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
	UART3Handle.Instance = USART3;
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <UART3_Init+0x48>)
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <UART3_Init+0x4c>)
 8005a48:	601a      	str	r2, [r3, #0]
	UART3Handle.Init.Mode = UART_MODE_TX;
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <UART3_Init+0x48>)
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	615a      	str	r2, [r3, #20]
	UART3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <UART3_Init+0x48>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	61da      	str	r2, [r3, #28]
	UART3Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8005a56:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <UART3_Init+0x48>)
 8005a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a5c:	605a      	str	r2, [r3, #4]
	UART3Handle.Init.Parity = UART_PARITY_NONE;
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <UART3_Init+0x48>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]
	UART3Handle.Init.StopBits = UART_STOPBITS_1;
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <UART3_Init+0x48>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	60da      	str	r2, [r3, #12]
	UART3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a6a:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <UART3_Init+0x48>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	619a      	str	r2, [r3, #24]
	UART3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <UART3_Init+0x48>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	609a      	str	r2, [r3, #8]
	UART3Handle.hdmatx = &DMA1Handle;
 8005a76:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <UART3_Init+0x48>)
 8005a78:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <UART3_Init+0x50>)
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART3Handle);
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <UART3_Init+0x48>)
 8005a7e:	f7fc fdad 	bl	80025dc <USART_Init>
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000378 	.word	0x20000378
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	20000410 	.word	0x20000410

08005a94 <TIM6_Init>:


void TIM6_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <TIM6_Init+0x5c>)
 8005a9a:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <TIM6_Init+0x60>)
 8005a9c:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a9e:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <TIM6_Init+0x5c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <TIM6_Init+0x5c>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <TIM6_Init+0x5c>)
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <TIM6_Init+0x5c>)
 8005ab2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005ab6:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <TIM6_Init+0x5c>)
 8005aba:	2209      	movs	r2, #9
 8005abc:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <TIM6_Init+0x5c>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8005ac4:	480a      	ldr	r0, [pc, #40]	; (8005af0 <TIM6_Init+0x5c>)
 8005ac6:	f7fc faff 	bl	80020c8 <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <TIM6_Init+0x5c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <TIM6_Init+0x5c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <TIM6_Init+0x5c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <TIM6_Init+0x5c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200004a8 	.word	0x200004a8
 8005af4:	40001000 	.word	0x40001000

08005af8 <DMA1_Init>:


void DMA1_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <DMA1_Init+0x20>)
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <DMA1_Init+0x20>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL2, NVIC_PRIOR_15, ENABLE);
 8005b08:	2201      	movs	r2, #1
 8005b0a:	210f      	movs	r1, #15
 8005b0c:	200c      	movs	r0, #12
 8005b0e:	f7fd fe93 	bl	8003838 <NVIC_IRQConfig>
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000

08005b1c <TFT1_Init>:


void TFT1_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
	TFT1Handle.Instance = TFT1;
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <TFT1_Init+0x4c>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
	TFT1Handle.ScreenMode = 'L';
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <TFT1_Init+0x4c>)
 8005b28:	224c      	movs	r2, #76	; 0x4c
 8005b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TFT1Handle.XcharacterLimit = 40;
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <TFT1_Init+0x4c>)
 8005b30:	2228      	movs	r2, #40	; 0x28
 8005b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	TFT1Handle.YcharacterLimit = 30;
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <TFT1_Init+0x4c>)
 8005b38:	221e      	movs	r2, #30
 8005b3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	TFT1Handle.cursor_flag = 0;
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <TFT1_Init+0x4c>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	TFT1Handle.underscore_flag = 0;
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <TFT1_Init+0x4c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	TFT1Handle.outline_flag = 0;
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <TFT1_Init+0x4c>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	TFT1Handle.Kfont_type = 'M';
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <TFT1_Init+0x4c>)
 8005b58:	224d      	movs	r2, #77	; 0x4d
 8005b5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	TFT_Init(&TFT1Handle);
 8005b5e:	4802      	ldr	r0, [pc, #8]	; (8005b68 <TFT1_Init+0x4c>)
 8005b60:	f7fe fe5a 	bl	8004818 <TFT_Init>
}
 8005b64:	bf00      	nop
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	200003b4 	.word	0x200003b4

08005b6c <TS1_Init>:


void TS1_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <TS1_Init+0x58>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <TS1_Init+0x58>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <TS1_Init+0x58>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <TS1_Init+0x58>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <TS1_Init+0x58>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <TS1_Init+0x58>)
 8005b90:	22fa      	movs	r2, #250	; 0xfa
 8005b92:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <TS1_Init+0x58>)
 8005b96:	f640 6274 	movw	r2, #3700	; 0xe74
 8005b9a:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <TS1_Init+0x58>)
 8005b9e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005ba2:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <TS1_Init+0x58>)
 8005ba6:	f640 62a6 	movw	r2, #3750	; 0xea6
 8005baa:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <TS1_Init+0x58>)
 8005bae:	22d0      	movs	r2, #208	; 0xd0
 8005bb0:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <TS1_Init+0x58>)
 8005bb4:	2290      	movs	r2, #144	; 0x90
 8005bb6:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 8005bb8:	4802      	ldr	r0, [pc, #8]	; (8005bc4 <TS1_Init+0x58>)
 8005bba:	f7ff fceb 	bl	8005594 <TS_Init>
}
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000250 	.word	0x20000250

08005bc8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(ButtonFlag == FLAG_RESET)
 8005bd0:	4b81      	ldr	r3, [pc, #516]	; (8005dd8 <TIM_PeriodElapsedCallback+0x210>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_4);
 8005bd8:	4b80      	ldr	r3, [pc, #512]	; (8005ddc <TIM_PeriodElapsedCallback+0x214>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <TIM_PeriodElapsedCallback+0x28>
		{
			ButtonFlag = FLAG_SET;
 8005bea:	4b7b      	ldr	r3, [pc, #492]	; (8005dd8 <TIM_PeriodElapsedCallback+0x210>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7a      	ldr	r2, [pc, #488]	; (8005de0 <TIM_PeriodElapsedCallback+0x218>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f040 80e0 	bne.w	8005dbc <TIM_PeriodElapsedCallback+0x1f4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 8005bfc:	4b79      	ldr	r3, [pc, #484]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 8097 	bne.w	8005d36 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 8005c08:	4b77      	ldr	r3, [pc, #476]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b63      	cmp	r3, #99	; 0x63
 8005c0e:	f340 80a0 	ble.w	8005d52 <TIM_PeriodElapsedCallback+0x18a>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8005c12:	a36d      	add	r3, pc, #436	; (adr r3, 8005dc8 <TIM_PeriodElapsedCallback+0x200>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	4872      	ldr	r0, [pc, #456]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005c1a:	f7fc ff7b 	bl	8002b14 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 8005c1e:	a36a      	add	r3, pc, #424	; (adr r3, 8005dc8 <TIM_PeriodElapsedCallback+0x200>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	486f      	ldr	r0, [pc, #444]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005c26:	f7fd fb01 	bl	800322c <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART3 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 8005c2a:	4b6e      	ldr	r3, [pc, #440]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005c2c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8005c30:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	4621      	mov	r1, r4
 8005c38:	f7fa ff0e 	bl	8000a58 <__aeabi_d2iz>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8005c40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfb8      	it	lt
 8005c48:	425b      	neglt	r3, r3
 8005c4a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 8005c4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	db02      	blt.n	8005c5a <TIM_PeriodElapsedCallback+0x92>
 8005c54:	232b      	movs	r3, #43	; 0x2b
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e005      	b.n	8005c66 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 8005c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da01      	bge.n	8005c66 <TIM_PeriodElapsedCallback+0x9e>
 8005c62:	232d      	movs	r3, #45	; 0x2d
 8005c64:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8005c66:	4a61      	ldr	r2, [pc, #388]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 8005c6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c70:	4a5f      	ldr	r2, [pc, #380]	; (8005df0 <TIM_PeriodElapsedCallback+0x228>)
 8005c72:	fb82 1203 	smull	r1, r2, r2, r3
 8005c76:	1192      	asrs	r2, r2, #6
 8005c78:	17db      	asrs	r3, r3, #31
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	3330      	adds	r3, #48	; 0x30
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005c86:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8005c88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	; (8005df0 <TIM_PeriodElapsedCallback+0x228>)
 8005c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8005c92:	1191      	asrs	r1, r2, #6
 8005c94:	17da      	asrs	r2, r3, #31
 8005c96:	1a8a      	subs	r2, r1, r2
 8005c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c9c:	fb01 f202 	mul.w	r2, r1, r2
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	4a53      	ldr	r2, [pc, #332]	; (8005df4 <TIM_PeriodElapsedCallback+0x22c>)
 8005ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8005caa:	1152      	asrs	r2, r2, #5
 8005cac:	17db      	asrs	r3, r3, #31
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	3330      	adds	r3, #48	; 0x30
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	4b4c      	ldr	r3, [pc, #304]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005cba:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 8005cbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005cc0:	4a4c      	ldr	r2, [pc, #304]	; (8005df4 <TIM_PeriodElapsedCallback+0x22c>)
 8005cc2:	fb82 1203 	smull	r1, r2, r2, r3
 8005cc6:	1151      	asrs	r1, r2, #5
 8005cc8:	17da      	asrs	r2, r3, #31
 8005cca:	1a8a      	subs	r2, r1, r2
 8005ccc:	2164      	movs	r1, #100	; 0x64
 8005cce:	fb01 f202 	mul.w	r2, r1, r2
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	4a48      	ldr	r2, [pc, #288]	; (8005df8 <TIM_PeriodElapsedCallback+0x230>)
 8005cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8005cdc:	1092      	asrs	r2, r2, #2
 8005cde:	17db      	asrs	r3, r3, #31
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	3330      	adds	r3, #48	; 0x30
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4b40      	ldr	r3, [pc, #256]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005cec:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 8005cee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005cf2:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <TIM_PeriodElapsedCallback+0x230>)
 8005cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8005cf8:	1099      	asrs	r1, r3, #2
 8005cfa:	17d3      	asrs	r3, r2, #31
 8005cfc:	1ac9      	subs	r1, r1, r3
 8005cfe:	460b      	mov	r3, r1
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	b21b      	sxth	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	3330      	adds	r3, #48	; 0x30
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005d12:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005d16:	220a      	movs	r2, #10
 8005d18:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART3Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 8005d1a:	4834      	ldr	r0, [pc, #208]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005d1c:	f7fa fa28 	bl	8000170 <strlen>
 8005d20:	4603      	mov	r3, r0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	4931      	ldr	r1, [pc, #196]	; (8005dec <TIM_PeriodElapsedCallback+0x224>)
 8005d28:	4834      	ldr	r0, [pc, #208]	; (8005dfc <TIM_PeriodElapsedCallback+0x234>)
 8005d2a:	f7fc fdc3 	bl	80028b4 <UART_Transmit_DMA>

				count = 0;
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e00d      	b.n	8005d52 <TIM_PeriodElapsedCallback+0x18a>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d108      	bne.n	8005d52 <TIM_PeriodElapsedCallback+0x18a>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8005d40:	a323      	add	r3, pc, #140	; (adr r3, 8005dd0 <TIM_PeriodElapsedCallback+0x208>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	4827      	ldr	r0, [pc, #156]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d48:	f7fd fac6 	bl	80032d8 <BLDC_PositionPID>

			startFlag = FLAG_SET;
 8005d4c:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <TIM_PeriodElapsedCallback+0x238>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
		}



		/* Transmit Motor Position value to PC through UART3 */
		if(count >= 2)		// Every 2ms
 8005d52:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	dd2b      	ble.n	8005db2 <TIM_PeriodElapsedCallback+0x1ea>
		{
			if(BLDC1Handle.RotationDir == CW)			sign = '+';
 8005d5a:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <TIM_PeriodElapsedCallback+0x1a2>
 8005d64:	232b      	movs	r3, #43	; 0x2b
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	e006      	b.n	8005d78 <TIM_PeriodElapsedCallback+0x1b0>
			else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <TIM_PeriodElapsedCallback+0x1b0>
 8005d74:	232d      	movs	r3, #45	; 0x2d
 8005d76:	73fb      	strb	r3, [r7, #15]

			//sprintf(Msg1, "%.2lf, %.2lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
			sprintf(Msg1, "%.2lf,%.2lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition);	// To see the case of TrjCurPosition
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d7a:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 8005d7e:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <TIM_PeriodElapsedCallback+0x21c>)
 8005d80:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8005d84:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d88:	e9cd 3400 	strd	r3, r4, [sp]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	460a      	mov	r2, r1
 8005d90:	491c      	ldr	r1, [pc, #112]	; (8005e04 <TIM_PeriodElapsedCallback+0x23c>)
 8005d92:	481d      	ldr	r0, [pc, #116]	; (8005e08 <TIM_PeriodElapsedCallback+0x240>)
 8005d94:	f000 fd9c 	bl	80068d0 <siprintf>

			UART_Transmit_DMA(&UART3Handle, (uint8_t*)Msg1, strlen((char*)Msg1));
 8005d98:	481b      	ldr	r0, [pc, #108]	; (8005e08 <TIM_PeriodElapsedCallback+0x240>)
 8005d9a:	f7fa f9e9 	bl	8000170 <strlen>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	4918      	ldr	r1, [pc, #96]	; (8005e08 <TIM_PeriodElapsedCallback+0x240>)
 8005da6:	4815      	ldr	r0, [pc, #84]	; (8005dfc <TIM_PeriodElapsedCallback+0x234>)
 8005da8:	f7fc fd84 	bl	80028b4 <UART_Transmit_DMA>

			count = 0;
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
		}

		count++;
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <TIM_PeriodElapsedCallback+0x220>)
 8005dba:	6013      	str	r3, [r2, #0]
	}
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd90      	pop	{r4, r7, pc}
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	9999999a 	.word	0x9999999a
 8005dcc:	3fb99999 	.word	0x3fb99999
 8005dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dd4:	3f50624d 	.word	0x3f50624d
 8005dd8:	20000204 	.word	0x20000204
 8005ddc:	40010800 	.word	0x40010800
 8005de0:	40001000 	.word	0x40001000
 8005de4:	20000280 	.word	0x20000280
 8005de8:	20000244 	.word	0x20000244
 8005dec:	20000208 	.word	0x20000208
 8005df0:	10624dd3 	.word	0x10624dd3
 8005df4:	51eb851f 	.word	0x51eb851f
 8005df8:	66666667 	.word	0x66666667
 8005dfc:	20000378 	.word	0x20000378
 8005e00:	20000205 	.word	0x20000205
 8005e04:	080080dc 	.word	0x080080dc
 8005e08:	20000210 	.word	0x20000210

08005e0c <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOA->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 5U;
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <EXTI_Callback+0x30>)
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <EXTI_Callback+0x34>)
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <EXTI_Callback+0x34>)
 8005e24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 8005e28:	4805      	ldr	r0, [pc, #20]	; (8005e40 <EXTI_Callback+0x34>)
 8005e2a:	f7fc fec1 	bl	8002bb0 <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 8005e2e:	4804      	ldr	r0, [pc, #16]	; (8005e40 <EXTI_Callback+0x34>)
 8005e30:	f7fc fdd8 	bl	80029e4 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40010800 	.word	0x40010800
 8005e40:	20000280 	.word	0x20000280

08005e44 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8005e48:	2220      	movs	r2, #32
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4813      	ldr	r0, [pc, #76]	; (8005e9c <MemsetHandleStructure+0x58>)
 8005e4e:	f000 f8e7 	bl	8006020 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8005e52:	2220      	movs	r2, #32
 8005e54:	2100      	movs	r1, #0
 8005e56:	4812      	ldr	r0, [pc, #72]	; (8005ea0 <MemsetHandleStructure+0x5c>)
 8005e58:	f000 f8e2 	bl	8006020 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 8005e5c:	22f8      	movs	r2, #248	; 0xf8
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <MemsetHandleStructure+0x60>)
 8005e62:	f000 f8dd 	bl	8006020 <memset>
	memset(&UART3Handle, 0, sizeof(UART3Handle));
 8005e66:	223c      	movs	r2, #60	; 0x3c
 8005e68:	2100      	movs	r1, #0
 8005e6a:	480f      	ldr	r0, [pc, #60]	; (8005ea8 <MemsetHandleStructure+0x64>)
 8005e6c:	f000 f8d8 	bl	8006020 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8005e70:	2244      	movs	r2, #68	; 0x44
 8005e72:	2100      	movs	r1, #0
 8005e74:	480d      	ldr	r0, [pc, #52]	; (8005eac <MemsetHandleStructure+0x68>)
 8005e76:	f000 f8d3 	bl	8006020 <memset>
	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8005e7a:	223c      	movs	r2, #60	; 0x3c
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <MemsetHandleStructure+0x6c>)
 8005e80:	f000 f8ce 	bl	8006020 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8005e84:	2230      	movs	r2, #48	; 0x30
 8005e86:	2100      	movs	r1, #0
 8005e88:	480a      	ldr	r0, [pc, #40]	; (8005eb4 <MemsetHandleStructure+0x70>)
 8005e8a:	f000 f8c9 	bl	8006020 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8005e8e:	2254      	movs	r2, #84	; 0x54
 8005e90:	2100      	movs	r1, #0
 8005e92:	4809      	ldr	r0, [pc, #36]	; (8005eb8 <MemsetHandleStructure+0x74>)
 8005e94:	f000 f8c4 	bl	8006020 <memset>
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	200004a8 	.word	0x200004a8
 8005ea0:	200003f0 	.word	0x200003f0
 8005ea4:	20000280 	.word	0x20000280
 8005ea8:	20000378 	.word	0x20000378
 8005eac:	20000410 	.word	0x20000410
 8005eb0:	200003b4 	.word	0x200003b4
 8005eb4:	20000250 	.word	0x20000250
 8005eb8:	20000454 	.word	0x20000454

08005ebc <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc fb16 	bl	80024fc <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	2104      	movs	r1, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fc fb10 	bl	80024fc <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	2108      	movs	r1, #8
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fc fb0a 	bl	80024fc <TIM_PWM_Start>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0210 	bic.w	r2, r2, #16
 8005f1e:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
	...

08005f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f78:	480d      	ldr	r0, [pc, #52]	; (8005fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f7e:	490e      	ldr	r1, [pc, #56]	; (8005fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f80:	4a0e      	ldr	r2, [pc, #56]	; (8005fbc <LoopForever+0xe>)
  movs r3, #0
 8005f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f84:	e002      	b.n	8005f8c <LoopCopyDataInit>

08005f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f8a:	3304      	adds	r3, #4

08005f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f90:	d3f9      	bcc.n	8005f86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f92:	4a0b      	ldr	r2, [pc, #44]	; (8005fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f94:	4c0b      	ldr	r4, [pc, #44]	; (8005fc4 <LoopForever+0x16>)
  movs r3, #0
 8005f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f98:	e001      	b.n	8005f9e <LoopFillZerobss>

08005f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f9c:	3204      	adds	r2, #4

08005f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fa0:	d3fb      	bcc.n	8005f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005fa2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8005fa6:	f000 f817 	bl	8005fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005faa:	f7fd fe35 	bl	8003c18 <main>

08005fae <LoopForever>:

LoopForever:
    b LoopForever
 8005fae:	e7fe      	b.n	8005fae <LoopForever>
  ldr   r0, =_estack
 8005fb0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8005fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fb8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005fbc:	08008b50 	.word	0x08008b50
  ldr r2, =_sbss
 8005fc0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005fc4:	200004cc 	.word	0x200004cc

08005fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fc8:	e7fe      	b.n	8005fc8 <ADC1_2_IRQHandler>
	...

08005fcc <__errno>:
 8005fcc:	4b01      	ldr	r3, [pc, #4]	; (8005fd4 <__errno+0x8>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000008 	.word	0x20000008

08005fd8 <__libc_init_array>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	2500      	movs	r5, #0
 8005fdc:	4e0c      	ldr	r6, [pc, #48]	; (8006010 <__libc_init_array+0x38>)
 8005fde:	4c0d      	ldr	r4, [pc, #52]	; (8006014 <__libc_init_array+0x3c>)
 8005fe0:	1ba4      	subs	r4, r4, r6
 8005fe2:	10a4      	asrs	r4, r4, #2
 8005fe4:	42a5      	cmp	r5, r4
 8005fe6:	d109      	bne.n	8005ffc <__libc_init_array+0x24>
 8005fe8:	f002 f860 	bl	80080ac <_init>
 8005fec:	2500      	movs	r5, #0
 8005fee:	4e0a      	ldr	r6, [pc, #40]	; (8006018 <__libc_init_array+0x40>)
 8005ff0:	4c0a      	ldr	r4, [pc, #40]	; (800601c <__libc_init_array+0x44>)
 8005ff2:	1ba4      	subs	r4, r4, r6
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	42a5      	cmp	r5, r4
 8005ff8:	d105      	bne.n	8006006 <__libc_init_array+0x2e>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006000:	4798      	blx	r3
 8006002:	3501      	adds	r5, #1
 8006004:	e7ee      	b.n	8005fe4 <__libc_init_array+0xc>
 8006006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800600a:	4798      	blx	r3
 800600c:	3501      	adds	r5, #1
 800600e:	e7f2      	b.n	8005ff6 <__libc_init_array+0x1e>
 8006010:	08008b48 	.word	0x08008b48
 8006014:	08008b48 	.word	0x08008b48
 8006018:	08008b48 	.word	0x08008b48
 800601c:	08008b4c 	.word	0x08008b4c

08006020 <memset>:
 8006020:	4603      	mov	r3, r0
 8006022:	4402      	add	r2, r0
 8006024:	4293      	cmp	r3, r2
 8006026:	d100      	bne.n	800602a <memset+0xa>
 8006028:	4770      	bx	lr
 800602a:	f803 1b01 	strb.w	r1, [r3], #1
 800602e:	e7f9      	b.n	8006024 <memset+0x4>

08006030 <__cvt>:
 8006030:	2b00      	cmp	r3, #0
 8006032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006036:	461e      	mov	r6, r3
 8006038:	bfbb      	ittet	lt
 800603a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800603e:	461e      	movlt	r6, r3
 8006040:	2300      	movge	r3, #0
 8006042:	232d      	movlt	r3, #45	; 0x2d
 8006044:	b088      	sub	sp, #32
 8006046:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006048:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800604c:	f027 0720 	bic.w	r7, r7, #32
 8006050:	2f46      	cmp	r7, #70	; 0x46
 8006052:	4614      	mov	r4, r2
 8006054:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006056:	700b      	strb	r3, [r1, #0]
 8006058:	d004      	beq.n	8006064 <__cvt+0x34>
 800605a:	2f45      	cmp	r7, #69	; 0x45
 800605c:	d100      	bne.n	8006060 <__cvt+0x30>
 800605e:	3501      	adds	r5, #1
 8006060:	2302      	movs	r3, #2
 8006062:	e000      	b.n	8006066 <__cvt+0x36>
 8006064:	2303      	movs	r3, #3
 8006066:	aa07      	add	r2, sp, #28
 8006068:	9204      	str	r2, [sp, #16]
 800606a:	aa06      	add	r2, sp, #24
 800606c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006070:	e9cd 3500 	strd	r3, r5, [sp]
 8006074:	4622      	mov	r2, r4
 8006076:	4633      	mov	r3, r6
 8006078:	f000 fcda 	bl	8006a30 <_dtoa_r>
 800607c:	2f47      	cmp	r7, #71	; 0x47
 800607e:	4680      	mov	r8, r0
 8006080:	d102      	bne.n	8006088 <__cvt+0x58>
 8006082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006084:	07db      	lsls	r3, r3, #31
 8006086:	d526      	bpl.n	80060d6 <__cvt+0xa6>
 8006088:	2f46      	cmp	r7, #70	; 0x46
 800608a:	eb08 0905 	add.w	r9, r8, r5
 800608e:	d111      	bne.n	80060b4 <__cvt+0x84>
 8006090:	f898 3000 	ldrb.w	r3, [r8]
 8006094:	2b30      	cmp	r3, #48	; 0x30
 8006096:	d10a      	bne.n	80060ae <__cvt+0x7e>
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	4620      	mov	r0, r4
 800609e:	4631      	mov	r1, r6
 80060a0:	f7fa fc92 	bl	80009c8 <__aeabi_dcmpeq>
 80060a4:	b918      	cbnz	r0, 80060ae <__cvt+0x7e>
 80060a6:	f1c5 0501 	rsb	r5, r5, #1
 80060aa:	f8ca 5000 	str.w	r5, [sl]
 80060ae:	f8da 3000 	ldr.w	r3, [sl]
 80060b2:	4499      	add	r9, r3
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	4620      	mov	r0, r4
 80060ba:	4631      	mov	r1, r6
 80060bc:	f7fa fc84 	bl	80009c8 <__aeabi_dcmpeq>
 80060c0:	b938      	cbnz	r0, 80060d2 <__cvt+0xa2>
 80060c2:	2230      	movs	r2, #48	; 0x30
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	454b      	cmp	r3, r9
 80060c8:	d205      	bcs.n	80060d6 <__cvt+0xa6>
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	9107      	str	r1, [sp, #28]
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e7f8      	b.n	80060c4 <__cvt+0x94>
 80060d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80060d6:	4640      	mov	r0, r8
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060dc:	eba3 0308 	sub.w	r3, r3, r8
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	b008      	add	sp, #32
 80060e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060e8 <__exponent>:
 80060e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ea:	2900      	cmp	r1, #0
 80060ec:	bfb4      	ite	lt
 80060ee:	232d      	movlt	r3, #45	; 0x2d
 80060f0:	232b      	movge	r3, #43	; 0x2b
 80060f2:	4604      	mov	r4, r0
 80060f4:	bfb8      	it	lt
 80060f6:	4249      	neglt	r1, r1
 80060f8:	2909      	cmp	r1, #9
 80060fa:	f804 2b02 	strb.w	r2, [r4], #2
 80060fe:	7043      	strb	r3, [r0, #1]
 8006100:	dd21      	ble.n	8006146 <__exponent+0x5e>
 8006102:	f10d 0307 	add.w	r3, sp, #7
 8006106:	461f      	mov	r7, r3
 8006108:	260a      	movs	r6, #10
 800610a:	fb91 f5f6 	sdiv	r5, r1, r6
 800610e:	fb06 1115 	mls	r1, r6, r5, r1
 8006112:	2d09      	cmp	r5, #9
 8006114:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006118:	f803 1c01 	strb.w	r1, [r3, #-1]
 800611c:	f103 32ff 	add.w	r2, r3, #4294967295
 8006120:	4629      	mov	r1, r5
 8006122:	dc09      	bgt.n	8006138 <__exponent+0x50>
 8006124:	3130      	adds	r1, #48	; 0x30
 8006126:	3b02      	subs	r3, #2
 8006128:	f802 1c01 	strb.w	r1, [r2, #-1]
 800612c:	42bb      	cmp	r3, r7
 800612e:	4622      	mov	r2, r4
 8006130:	d304      	bcc.n	800613c <__exponent+0x54>
 8006132:	1a10      	subs	r0, r2, r0
 8006134:	b003      	add	sp, #12
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006138:	4613      	mov	r3, r2
 800613a:	e7e6      	b.n	800610a <__exponent+0x22>
 800613c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006140:	f804 2b01 	strb.w	r2, [r4], #1
 8006144:	e7f2      	b.n	800612c <__exponent+0x44>
 8006146:	2330      	movs	r3, #48	; 0x30
 8006148:	4419      	add	r1, r3
 800614a:	7083      	strb	r3, [r0, #2]
 800614c:	1d02      	adds	r2, r0, #4
 800614e:	70c1      	strb	r1, [r0, #3]
 8006150:	e7ef      	b.n	8006132 <__exponent+0x4a>
	...

08006154 <_printf_float>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	b091      	sub	sp, #68	; 0x44
 800615a:	460c      	mov	r4, r1
 800615c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800615e:	4693      	mov	fp, r2
 8006160:	461e      	mov	r6, r3
 8006162:	4605      	mov	r5, r0
 8006164:	f001 fa18 	bl	8007598 <_localeconv_r>
 8006168:	6803      	ldr	r3, [r0, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	f7f9 ffff 	bl	8000170 <strlen>
 8006172:	2300      	movs	r3, #0
 8006174:	930e      	str	r3, [sp, #56]	; 0x38
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	900a      	str	r0, [sp, #40]	; 0x28
 800617a:	3307      	adds	r3, #7
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006188:	f8d4 a000 	ldr.w	sl, [r4]
 800618c:	603a      	str	r2, [r7, #0]
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006196:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800619a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800619e:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	4ba6      	ldr	r3, [pc, #664]	; (8006440 <_printf_float+0x2ec>)
 80061a6:	4638      	mov	r0, r7
 80061a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061aa:	f7fa fc3f 	bl	8000a2c <__aeabi_dcmpun>
 80061ae:	bb68      	cbnz	r0, 800620c <_printf_float+0xb8>
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	4ba2      	ldr	r3, [pc, #648]	; (8006440 <_printf_float+0x2ec>)
 80061b6:	4638      	mov	r0, r7
 80061b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ba:	f7fa fc19 	bl	80009f0 <__aeabi_dcmple>
 80061be:	bb28      	cbnz	r0, 800620c <_printf_float+0xb8>
 80061c0:	2200      	movs	r2, #0
 80061c2:	2300      	movs	r3, #0
 80061c4:	4638      	mov	r0, r7
 80061c6:	4649      	mov	r1, r9
 80061c8:	f7fa fc08 	bl	80009dc <__aeabi_dcmplt>
 80061cc:	b110      	cbz	r0, 80061d4 <_printf_float+0x80>
 80061ce:	232d      	movs	r3, #45	; 0x2d
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	4f9b      	ldr	r7, [pc, #620]	; (8006444 <_printf_float+0x2f0>)
 80061d6:	4b9c      	ldr	r3, [pc, #624]	; (8006448 <_printf_float+0x2f4>)
 80061d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061dc:	bf98      	it	ls
 80061de:	461f      	movls	r7, r3
 80061e0:	2303      	movs	r3, #3
 80061e2:	f04f 0900 	mov.w	r9, #0
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	f02a 0304 	bic.w	r3, sl, #4
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	9600      	str	r6, [sp, #0]
 80061f0:	465b      	mov	r3, fp
 80061f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80061f4:	4621      	mov	r1, r4
 80061f6:	4628      	mov	r0, r5
 80061f8:	f000 f9e2 	bl	80065c0 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	f040 8090 	bne.w	8006322 <_printf_float+0x1ce>
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	b011      	add	sp, #68	; 0x44
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	463a      	mov	r2, r7
 800620e:	464b      	mov	r3, r9
 8006210:	4638      	mov	r0, r7
 8006212:	4649      	mov	r1, r9
 8006214:	f7fa fc0a 	bl	8000a2c <__aeabi_dcmpun>
 8006218:	b110      	cbz	r0, 8006220 <_printf_float+0xcc>
 800621a:	4f8c      	ldr	r7, [pc, #560]	; (800644c <_printf_float+0x2f8>)
 800621c:	4b8c      	ldr	r3, [pc, #560]	; (8006450 <_printf_float+0x2fc>)
 800621e:	e7db      	b.n	80061d8 <_printf_float+0x84>
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006226:	1c59      	adds	r1, r3, #1
 8006228:	a80d      	add	r0, sp, #52	; 0x34
 800622a:	a90e      	add	r1, sp, #56	; 0x38
 800622c:	d140      	bne.n	80062b0 <_printf_float+0x15c>
 800622e:	2306      	movs	r3, #6
 8006230:	6063      	str	r3, [r4, #4]
 8006232:	f04f 0c00 	mov.w	ip, #0
 8006236:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800623a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	6022      	str	r2, [r4, #0]
 8006242:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	463a      	mov	r2, r7
 800624a:	464b      	mov	r3, r9
 800624c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006250:	4628      	mov	r0, r5
 8006252:	f7ff feed 	bl	8006030 <__cvt>
 8006256:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800625a:	2b47      	cmp	r3, #71	; 0x47
 800625c:	4607      	mov	r7, r0
 800625e:	d109      	bne.n	8006274 <_printf_float+0x120>
 8006260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006262:	1cd8      	adds	r0, r3, #3
 8006264:	db02      	blt.n	800626c <_printf_float+0x118>
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	4293      	cmp	r3, r2
 800626a:	dd47      	ble.n	80062fc <_printf_float+0x1a8>
 800626c:	f1a8 0802 	sub.w	r8, r8, #2
 8006270:	fa5f f888 	uxtb.w	r8, r8
 8006274:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006278:	990d      	ldr	r1, [sp, #52]	; 0x34
 800627a:	d824      	bhi.n	80062c6 <_printf_float+0x172>
 800627c:	3901      	subs	r1, #1
 800627e:	4642      	mov	r2, r8
 8006280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006284:	910d      	str	r1, [sp, #52]	; 0x34
 8006286:	f7ff ff2f 	bl	80060e8 <__exponent>
 800628a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800628c:	4681      	mov	r9, r0
 800628e:	1813      	adds	r3, r2, r0
 8006290:	2a01      	cmp	r2, #1
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	dc02      	bgt.n	800629c <_printf_float+0x148>
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	07d1      	lsls	r1, r2, #31
 800629a:	d501      	bpl.n	80062a0 <_printf_float+0x14c>
 800629c:	3301      	adds	r3, #1
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0a2      	beq.n	80061ee <_printf_float+0x9a>
 80062a8:	232d      	movs	r3, #45	; 0x2d
 80062aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ae:	e79e      	b.n	80061ee <_printf_float+0x9a>
 80062b0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80062b4:	f000 816e 	beq.w	8006594 <_printf_float+0x440>
 80062b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062bc:	d1b9      	bne.n	8006232 <_printf_float+0xde>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1b7      	bne.n	8006232 <_printf_float+0xde>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7b4      	b.n	8006230 <_printf_float+0xdc>
 80062c6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80062ca:	d119      	bne.n	8006300 <_printf_float+0x1ac>
 80062cc:	2900      	cmp	r1, #0
 80062ce:	6863      	ldr	r3, [r4, #4]
 80062d0:	dd0c      	ble.n	80062ec <_printf_float+0x198>
 80062d2:	6121      	str	r1, [r4, #16]
 80062d4:	b913      	cbnz	r3, 80062dc <_printf_float+0x188>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	07d2      	lsls	r2, r2, #31
 80062da:	d502      	bpl.n	80062e2 <_printf_float+0x18e>
 80062dc:	3301      	adds	r3, #1
 80062de:	440b      	add	r3, r1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80062ea:	e7d9      	b.n	80062a0 <_printf_float+0x14c>
 80062ec:	b913      	cbnz	r3, 80062f4 <_printf_float+0x1a0>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	07d0      	lsls	r0, r2, #31
 80062f2:	d501      	bpl.n	80062f8 <_printf_float+0x1a4>
 80062f4:	3302      	adds	r3, #2
 80062f6:	e7f3      	b.n	80062e0 <_printf_float+0x18c>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e7f1      	b.n	80062e0 <_printf_float+0x18c>
 80062fc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006300:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006304:	4293      	cmp	r3, r2
 8006306:	db05      	blt.n	8006314 <_printf_float+0x1c0>
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	07d1      	lsls	r1, r2, #31
 800630e:	d5e8      	bpl.n	80062e2 <_printf_float+0x18e>
 8006310:	3301      	adds	r3, #1
 8006312:	e7e5      	b.n	80062e0 <_printf_float+0x18c>
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfcc      	ite	gt
 8006318:	2301      	movgt	r3, #1
 800631a:	f1c3 0302 	rsble	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	e7de      	b.n	80062e0 <_printf_float+0x18c>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	055a      	lsls	r2, r3, #21
 8006326:	d407      	bmi.n	8006338 <_printf_float+0x1e4>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	463a      	mov	r2, r7
 800632c:	4659      	mov	r1, fp
 800632e:	4628      	mov	r0, r5
 8006330:	47b0      	blx	r6
 8006332:	3001      	adds	r0, #1
 8006334:	d129      	bne.n	800638a <_printf_float+0x236>
 8006336:	e764      	b.n	8006202 <_printf_float+0xae>
 8006338:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800633c:	f240 80d7 	bls.w	80064ee <_printf_float+0x39a>
 8006340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	f7fa fb3e 	bl	80009c8 <__aeabi_dcmpeq>
 800634c:	b388      	cbz	r0, 80063b2 <_printf_float+0x25e>
 800634e:	2301      	movs	r3, #1
 8006350:	4a40      	ldr	r2, [pc, #256]	; (8006454 <_printf_float+0x300>)
 8006352:	4659      	mov	r1, fp
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	3001      	adds	r0, #1
 800635a:	f43f af52 	beq.w	8006202 <_printf_float+0xae>
 800635e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006362:	429a      	cmp	r2, r3
 8006364:	db02      	blt.n	800636c <_printf_float+0x218>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	07d8      	lsls	r0, r3, #31
 800636a:	d50e      	bpl.n	800638a <_printf_float+0x236>
 800636c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006370:	4659      	mov	r1, fp
 8006372:	4628      	mov	r0, r5
 8006374:	47b0      	blx	r6
 8006376:	3001      	adds	r0, #1
 8006378:	f43f af43 	beq.w	8006202 <_printf_float+0xae>
 800637c:	2700      	movs	r7, #0
 800637e:	f104 081a 	add.w	r8, r4, #26
 8006382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006384:	3b01      	subs	r3, #1
 8006386:	42bb      	cmp	r3, r7
 8006388:	dc09      	bgt.n	800639e <_printf_float+0x24a>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	079f      	lsls	r7, r3, #30
 800638e:	f100 80fd 	bmi.w	800658c <_printf_float+0x438>
 8006392:	68e0      	ldr	r0, [r4, #12]
 8006394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006396:	4298      	cmp	r0, r3
 8006398:	bfb8      	it	lt
 800639a:	4618      	movlt	r0, r3
 800639c:	e733      	b.n	8006206 <_printf_float+0xb2>
 800639e:	2301      	movs	r3, #1
 80063a0:	4642      	mov	r2, r8
 80063a2:	4659      	mov	r1, fp
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b0      	blx	r6
 80063a8:	3001      	adds	r0, #1
 80063aa:	f43f af2a 	beq.w	8006202 <_printf_float+0xae>
 80063ae:	3701      	adds	r7, #1
 80063b0:	e7e7      	b.n	8006382 <_printf_float+0x22e>
 80063b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc2b      	bgt.n	8006410 <_printf_float+0x2bc>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4a26      	ldr	r2, [pc, #152]	; (8006454 <_printf_float+0x300>)
 80063bc:	4659      	mov	r1, fp
 80063be:	4628      	mov	r0, r5
 80063c0:	47b0      	blx	r6
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af1d 	beq.w	8006202 <_printf_float+0xae>
 80063c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ca:	b923      	cbnz	r3, 80063d6 <_printf_float+0x282>
 80063cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ce:	b913      	cbnz	r3, 80063d6 <_printf_float+0x282>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07d9      	lsls	r1, r3, #31
 80063d4:	d5d9      	bpl.n	800638a <_printf_float+0x236>
 80063d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063da:	4659      	mov	r1, fp
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f af0e 	beq.w	8006202 <_printf_float+0xae>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 091a 	add.w	r9, r4, #26
 80063ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f0:	425b      	negs	r3, r3
 80063f2:	4543      	cmp	r3, r8
 80063f4:	dc01      	bgt.n	80063fa <_printf_float+0x2a6>
 80063f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f8:	e797      	b.n	800632a <_printf_float+0x1d6>
 80063fa:	2301      	movs	r3, #1
 80063fc:	464a      	mov	r2, r9
 80063fe:	4659      	mov	r1, fp
 8006400:	4628      	mov	r0, r5
 8006402:	47b0      	blx	r6
 8006404:	3001      	adds	r0, #1
 8006406:	f43f aefc 	beq.w	8006202 <_printf_float+0xae>
 800640a:	f108 0801 	add.w	r8, r8, #1
 800640e:	e7ee      	b.n	80063ee <_printf_float+0x29a>
 8006410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006414:	429a      	cmp	r2, r3
 8006416:	bfa8      	it	ge
 8006418:	461a      	movge	r2, r3
 800641a:	2a00      	cmp	r2, #0
 800641c:	4690      	mov	r8, r2
 800641e:	dd07      	ble.n	8006430 <_printf_float+0x2dc>
 8006420:	4613      	mov	r3, r2
 8006422:	4659      	mov	r1, fp
 8006424:	463a      	mov	r2, r7
 8006426:	4628      	mov	r0, r5
 8006428:	47b0      	blx	r6
 800642a:	3001      	adds	r0, #1
 800642c:	f43f aee9 	beq.w	8006202 <_printf_float+0xae>
 8006430:	f104 031a 	add.w	r3, r4, #26
 8006434:	f04f 0a00 	mov.w	sl, #0
 8006438:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800643c:	930b      	str	r3, [sp, #44]	; 0x2c
 800643e:	e015      	b.n	800646c <_printf_float+0x318>
 8006440:	7fefffff 	.word	0x7fefffff
 8006444:	080088f0 	.word	0x080088f0
 8006448:	080088ec 	.word	0x080088ec
 800644c:	080088f8 	.word	0x080088f8
 8006450:	080088f4 	.word	0x080088f4
 8006454:	080088fc 	.word	0x080088fc
 8006458:	2301      	movs	r3, #1
 800645a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800645c:	4659      	mov	r1, fp
 800645e:	4628      	mov	r0, r5
 8006460:	47b0      	blx	r6
 8006462:	3001      	adds	r0, #1
 8006464:	f43f aecd 	beq.w	8006202 <_printf_float+0xae>
 8006468:	f10a 0a01 	add.w	sl, sl, #1
 800646c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006470:	eba9 0308 	sub.w	r3, r9, r8
 8006474:	4553      	cmp	r3, sl
 8006476:	dcef      	bgt.n	8006458 <_printf_float+0x304>
 8006478:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800647c:	429a      	cmp	r2, r3
 800647e:	444f      	add	r7, r9
 8006480:	db14      	blt.n	80064ac <_printf_float+0x358>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	07da      	lsls	r2, r3, #31
 8006486:	d411      	bmi.n	80064ac <_printf_float+0x358>
 8006488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800648c:	eba3 0209 	sub.w	r2, r3, r9
 8006490:	eba3 0901 	sub.w	r9, r3, r1
 8006494:	4591      	cmp	r9, r2
 8006496:	bfa8      	it	ge
 8006498:	4691      	movge	r9, r2
 800649a:	f1b9 0f00 	cmp.w	r9, #0
 800649e:	dc0d      	bgt.n	80064bc <_printf_float+0x368>
 80064a0:	2700      	movs	r7, #0
 80064a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064a6:	f104 081a 	add.w	r8, r4, #26
 80064aa:	e018      	b.n	80064de <_printf_float+0x38a>
 80064ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064b0:	4659      	mov	r1, fp
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b0      	blx	r6
 80064b6:	3001      	adds	r0, #1
 80064b8:	d1e6      	bne.n	8006488 <_printf_float+0x334>
 80064ba:	e6a2      	b.n	8006202 <_printf_float+0xae>
 80064bc:	464b      	mov	r3, r9
 80064be:	463a      	mov	r2, r7
 80064c0:	4659      	mov	r1, fp
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b0      	blx	r6
 80064c6:	3001      	adds	r0, #1
 80064c8:	d1ea      	bne.n	80064a0 <_printf_float+0x34c>
 80064ca:	e69a      	b.n	8006202 <_printf_float+0xae>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4642      	mov	r2, r8
 80064d0:	4659      	mov	r1, fp
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f ae93 	beq.w	8006202 <_printf_float+0xae>
 80064dc:	3701      	adds	r7, #1
 80064de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	eba3 0309 	sub.w	r3, r3, r9
 80064e8:	42bb      	cmp	r3, r7
 80064ea:	dcef      	bgt.n	80064cc <_printf_float+0x378>
 80064ec:	e74d      	b.n	800638a <_printf_float+0x236>
 80064ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	dc01      	bgt.n	80064f8 <_printf_float+0x3a4>
 80064f4:	07db      	lsls	r3, r3, #31
 80064f6:	d538      	bpl.n	800656a <_printf_float+0x416>
 80064f8:	2301      	movs	r3, #1
 80064fa:	463a      	mov	r2, r7
 80064fc:	4659      	mov	r1, fp
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	3001      	adds	r0, #1
 8006504:	f43f ae7d 	beq.w	8006202 <_printf_float+0xae>
 8006508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800650c:	4659      	mov	r1, fp
 800650e:	4628      	mov	r0, r5
 8006510:	47b0      	blx	r6
 8006512:	3001      	adds	r0, #1
 8006514:	f107 0701 	add.w	r7, r7, #1
 8006518:	f43f ae73 	beq.w	8006202 <_printf_float+0xae>
 800651c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006522:	2200      	movs	r2, #0
 8006524:	f103 38ff 	add.w	r8, r3, #4294967295
 8006528:	2300      	movs	r3, #0
 800652a:	f7fa fa4d 	bl	80009c8 <__aeabi_dcmpeq>
 800652e:	b9c0      	cbnz	r0, 8006562 <_printf_float+0x40e>
 8006530:	4643      	mov	r3, r8
 8006532:	463a      	mov	r2, r7
 8006534:	4659      	mov	r1, fp
 8006536:	4628      	mov	r0, r5
 8006538:	47b0      	blx	r6
 800653a:	3001      	adds	r0, #1
 800653c:	d10d      	bne.n	800655a <_printf_float+0x406>
 800653e:	e660      	b.n	8006202 <_printf_float+0xae>
 8006540:	2301      	movs	r3, #1
 8006542:	4642      	mov	r2, r8
 8006544:	4659      	mov	r1, fp
 8006546:	4628      	mov	r0, r5
 8006548:	47b0      	blx	r6
 800654a:	3001      	adds	r0, #1
 800654c:	f43f ae59 	beq.w	8006202 <_printf_float+0xae>
 8006550:	3701      	adds	r7, #1
 8006552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006554:	3b01      	subs	r3, #1
 8006556:	42bb      	cmp	r3, r7
 8006558:	dcf2      	bgt.n	8006540 <_printf_float+0x3ec>
 800655a:	464b      	mov	r3, r9
 800655c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006560:	e6e4      	b.n	800632c <_printf_float+0x1d8>
 8006562:	2700      	movs	r7, #0
 8006564:	f104 081a 	add.w	r8, r4, #26
 8006568:	e7f3      	b.n	8006552 <_printf_float+0x3fe>
 800656a:	2301      	movs	r3, #1
 800656c:	e7e1      	b.n	8006532 <_printf_float+0x3de>
 800656e:	2301      	movs	r3, #1
 8006570:	4642      	mov	r2, r8
 8006572:	4659      	mov	r1, fp
 8006574:	4628      	mov	r0, r5
 8006576:	47b0      	blx	r6
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae42 	beq.w	8006202 <_printf_float+0xae>
 800657e:	3701      	adds	r7, #1
 8006580:	68e3      	ldr	r3, [r4, #12]
 8006582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	42bb      	cmp	r3, r7
 8006588:	dcf1      	bgt.n	800656e <_printf_float+0x41a>
 800658a:	e702      	b.n	8006392 <_printf_float+0x23e>
 800658c:	2700      	movs	r7, #0
 800658e:	f104 0819 	add.w	r8, r4, #25
 8006592:	e7f5      	b.n	8006580 <_printf_float+0x42c>
 8006594:	2b00      	cmp	r3, #0
 8006596:	f43f ae94 	beq.w	80062c2 <_printf_float+0x16e>
 800659a:	f04f 0c00 	mov.w	ip, #0
 800659e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80065a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80065a6:	6022      	str	r2, [r4, #0]
 80065a8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80065ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	463a      	mov	r2, r7
 80065b4:	464b      	mov	r3, r9
 80065b6:	4628      	mov	r0, r5
 80065b8:	f7ff fd3a 	bl	8006030 <__cvt>
 80065bc:	4607      	mov	r7, r0
 80065be:	e64f      	b.n	8006260 <_printf_float+0x10c>

080065c0 <_printf_common>:
 80065c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c4:	4691      	mov	r9, r2
 80065c6:	461f      	mov	r7, r3
 80065c8:	688a      	ldr	r2, [r1, #8]
 80065ca:	690b      	ldr	r3, [r1, #16]
 80065cc:	4606      	mov	r6, r0
 80065ce:	4293      	cmp	r3, r2
 80065d0:	bfb8      	it	lt
 80065d2:	4613      	movlt	r3, r2
 80065d4:	f8c9 3000 	str.w	r3, [r9]
 80065d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065dc:	460c      	mov	r4, r1
 80065de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e2:	b112      	cbz	r2, 80065ea <_printf_common+0x2a>
 80065e4:	3301      	adds	r3, #1
 80065e6:	f8c9 3000 	str.w	r3, [r9]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0699      	lsls	r1, r3, #26
 80065ee:	bf42      	ittt	mi
 80065f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065f4:	3302      	addmi	r3, #2
 80065f6:	f8c9 3000 	strmi.w	r3, [r9]
 80065fa:	6825      	ldr	r5, [r4, #0]
 80065fc:	f015 0506 	ands.w	r5, r5, #6
 8006600:	d107      	bne.n	8006612 <_printf_common+0x52>
 8006602:	f104 0a19 	add.w	sl, r4, #25
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	f8d9 2000 	ldr.w	r2, [r9]
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	42ab      	cmp	r3, r5
 8006610:	dc29      	bgt.n	8006666 <_printf_common+0xa6>
 8006612:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	3300      	adds	r3, #0
 800661a:	bf18      	it	ne
 800661c:	2301      	movne	r3, #1
 800661e:	0692      	lsls	r2, r2, #26
 8006620:	d42e      	bmi.n	8006680 <_printf_common+0xc0>
 8006622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006626:	4639      	mov	r1, r7
 8006628:	4630      	mov	r0, r6
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d021      	beq.n	8006674 <_printf_common+0xb4>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	68e5      	ldr	r5, [r4, #12]
 8006634:	f003 0306 	and.w	r3, r3, #6
 8006638:	2b04      	cmp	r3, #4
 800663a:	bf18      	it	ne
 800663c:	2500      	movne	r5, #0
 800663e:	f8d9 2000 	ldr.w	r2, [r9]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	bf08      	it	eq
 8006648:	1aad      	subeq	r5, r5, r2
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	6922      	ldr	r2, [r4, #16]
 800664e:	bf08      	it	eq
 8006650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006654:	4293      	cmp	r3, r2
 8006656:	bfc4      	itt	gt
 8006658:	1a9b      	subgt	r3, r3, r2
 800665a:	18ed      	addgt	r5, r5, r3
 800665c:	341a      	adds	r4, #26
 800665e:	454d      	cmp	r5, r9
 8006660:	d11a      	bne.n	8006698 <_printf_common+0xd8>
 8006662:	2000      	movs	r0, #0
 8006664:	e008      	b.n	8006678 <_printf_common+0xb8>
 8006666:	2301      	movs	r3, #1
 8006668:	4652      	mov	r2, sl
 800666a:	4639      	mov	r1, r7
 800666c:	4630      	mov	r0, r6
 800666e:	47c0      	blx	r8
 8006670:	3001      	adds	r0, #1
 8006672:	d103      	bne.n	800667c <_printf_common+0xbc>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	3501      	adds	r5, #1
 800667e:	e7c2      	b.n	8006606 <_printf_common+0x46>
 8006680:	2030      	movs	r0, #48	; 0x30
 8006682:	18e1      	adds	r1, r4, r3
 8006684:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800668e:	4422      	add	r2, r4
 8006690:	3302      	adds	r3, #2
 8006692:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006696:	e7c4      	b.n	8006622 <_printf_common+0x62>
 8006698:	2301      	movs	r3, #1
 800669a:	4622      	mov	r2, r4
 800669c:	4639      	mov	r1, r7
 800669e:	4630      	mov	r0, r6
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0e6      	beq.n	8006674 <_printf_common+0xb4>
 80066a6:	f109 0901 	add.w	r9, r9, #1
 80066aa:	e7d8      	b.n	800665e <_printf_common+0x9e>

080066ac <_printf_i>:
 80066ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80066b4:	460c      	mov	r4, r1
 80066b6:	7e09      	ldrb	r1, [r1, #24]
 80066b8:	b085      	sub	sp, #20
 80066ba:	296e      	cmp	r1, #110	; 0x6e
 80066bc:	4617      	mov	r7, r2
 80066be:	4606      	mov	r6, r0
 80066c0:	4698      	mov	r8, r3
 80066c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066c4:	f000 80b3 	beq.w	800682e <_printf_i+0x182>
 80066c8:	d822      	bhi.n	8006710 <_printf_i+0x64>
 80066ca:	2963      	cmp	r1, #99	; 0x63
 80066cc:	d036      	beq.n	800673c <_printf_i+0x90>
 80066ce:	d80a      	bhi.n	80066e6 <_printf_i+0x3a>
 80066d0:	2900      	cmp	r1, #0
 80066d2:	f000 80b9 	beq.w	8006848 <_printf_i+0x19c>
 80066d6:	2958      	cmp	r1, #88	; 0x58
 80066d8:	f000 8083 	beq.w	80067e2 <_printf_i+0x136>
 80066dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066e4:	e032      	b.n	800674c <_printf_i+0xa0>
 80066e6:	2964      	cmp	r1, #100	; 0x64
 80066e8:	d001      	beq.n	80066ee <_printf_i+0x42>
 80066ea:	2969      	cmp	r1, #105	; 0x69
 80066ec:	d1f6      	bne.n	80066dc <_printf_i+0x30>
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	6813      	ldr	r3, [r2, #0]
 80066f2:	0605      	lsls	r5, r0, #24
 80066f4:	f103 0104 	add.w	r1, r3, #4
 80066f8:	d52a      	bpl.n	8006750 <_printf_i+0xa4>
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6011      	str	r1, [r2, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da03      	bge.n	800670a <_printf_i+0x5e>
 8006702:	222d      	movs	r2, #45	; 0x2d
 8006704:	425b      	negs	r3, r3
 8006706:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800670a:	486f      	ldr	r0, [pc, #444]	; (80068c8 <_printf_i+0x21c>)
 800670c:	220a      	movs	r2, #10
 800670e:	e039      	b.n	8006784 <_printf_i+0xd8>
 8006710:	2973      	cmp	r1, #115	; 0x73
 8006712:	f000 809d 	beq.w	8006850 <_printf_i+0x1a4>
 8006716:	d808      	bhi.n	800672a <_printf_i+0x7e>
 8006718:	296f      	cmp	r1, #111	; 0x6f
 800671a:	d020      	beq.n	800675e <_printf_i+0xb2>
 800671c:	2970      	cmp	r1, #112	; 0x70
 800671e:	d1dd      	bne.n	80066dc <_printf_i+0x30>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	f043 0320 	orr.w	r3, r3, #32
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	e003      	b.n	8006732 <_printf_i+0x86>
 800672a:	2975      	cmp	r1, #117	; 0x75
 800672c:	d017      	beq.n	800675e <_printf_i+0xb2>
 800672e:	2978      	cmp	r1, #120	; 0x78
 8006730:	d1d4      	bne.n	80066dc <_printf_i+0x30>
 8006732:	2378      	movs	r3, #120	; 0x78
 8006734:	4865      	ldr	r0, [pc, #404]	; (80068cc <_printf_i+0x220>)
 8006736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800673a:	e055      	b.n	80067e8 <_printf_i+0x13c>
 800673c:	6813      	ldr	r3, [r2, #0]
 800673e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006742:	1d19      	adds	r1, r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6011      	str	r1, [r2, #0]
 8006748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800674c:	2301      	movs	r3, #1
 800674e:	e08c      	b.n	800686a <_printf_i+0x1be>
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006756:	6011      	str	r1, [r2, #0]
 8006758:	bf18      	it	ne
 800675a:	b21b      	sxthne	r3, r3
 800675c:	e7cf      	b.n	80066fe <_printf_i+0x52>
 800675e:	6813      	ldr	r3, [r2, #0]
 8006760:	6825      	ldr	r5, [r4, #0]
 8006762:	1d18      	adds	r0, r3, #4
 8006764:	6010      	str	r0, [r2, #0]
 8006766:	0628      	lsls	r0, r5, #24
 8006768:	d501      	bpl.n	800676e <_printf_i+0xc2>
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	e002      	b.n	8006774 <_printf_i+0xc8>
 800676e:	0668      	lsls	r0, r5, #25
 8006770:	d5fb      	bpl.n	800676a <_printf_i+0xbe>
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	296f      	cmp	r1, #111	; 0x6f
 8006776:	bf14      	ite	ne
 8006778:	220a      	movne	r2, #10
 800677a:	2208      	moveq	r2, #8
 800677c:	4852      	ldr	r0, [pc, #328]	; (80068c8 <_printf_i+0x21c>)
 800677e:	2100      	movs	r1, #0
 8006780:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006784:	6865      	ldr	r5, [r4, #4]
 8006786:	2d00      	cmp	r5, #0
 8006788:	60a5      	str	r5, [r4, #8]
 800678a:	f2c0 8095 	blt.w	80068b8 <_printf_i+0x20c>
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	f021 0104 	bic.w	r1, r1, #4
 8006794:	6021      	str	r1, [r4, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d13d      	bne.n	8006816 <_printf_i+0x16a>
 800679a:	2d00      	cmp	r5, #0
 800679c:	f040 808e 	bne.w	80068bc <_printf_i+0x210>
 80067a0:	4665      	mov	r5, ip
 80067a2:	2a08      	cmp	r2, #8
 80067a4:	d10b      	bne.n	80067be <_printf_i+0x112>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	07db      	lsls	r3, r3, #31
 80067aa:	d508      	bpl.n	80067be <_printf_i+0x112>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	bfde      	ittt	le
 80067b4:	2330      	movle	r3, #48	; 0x30
 80067b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067be:	ebac 0305 	sub.w	r3, ip, r5
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	f8cd 8000 	str.w	r8, [sp]
 80067c8:	463b      	mov	r3, r7
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	4621      	mov	r1, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7ff fef6 	bl	80065c0 <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d14d      	bne.n	8006874 <_printf_i+0x1c8>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	b005      	add	sp, #20
 80067de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067e2:	4839      	ldr	r0, [pc, #228]	; (80068c8 <_printf_i+0x21c>)
 80067e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	6821      	ldr	r1, [r4, #0]
 80067ec:	1d1d      	adds	r5, r3, #4
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6015      	str	r5, [r2, #0]
 80067f2:	060a      	lsls	r2, r1, #24
 80067f4:	d50b      	bpl.n	800680e <_printf_i+0x162>
 80067f6:	07ca      	lsls	r2, r1, #31
 80067f8:	bf44      	itt	mi
 80067fa:	f041 0120 	orrmi.w	r1, r1, #32
 80067fe:	6021      	strmi	r1, [r4, #0]
 8006800:	b91b      	cbnz	r3, 800680a <_printf_i+0x15e>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	f022 0220 	bic.w	r2, r2, #32
 8006808:	6022      	str	r2, [r4, #0]
 800680a:	2210      	movs	r2, #16
 800680c:	e7b7      	b.n	800677e <_printf_i+0xd2>
 800680e:	064d      	lsls	r5, r1, #25
 8006810:	bf48      	it	mi
 8006812:	b29b      	uxthmi	r3, r3
 8006814:	e7ef      	b.n	80067f6 <_printf_i+0x14a>
 8006816:	4665      	mov	r5, ip
 8006818:	fbb3 f1f2 	udiv	r1, r3, r2
 800681c:	fb02 3311 	mls	r3, r2, r1, r3
 8006820:	5cc3      	ldrb	r3, [r0, r3]
 8006822:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006826:	460b      	mov	r3, r1
 8006828:	2900      	cmp	r1, #0
 800682a:	d1f5      	bne.n	8006818 <_printf_i+0x16c>
 800682c:	e7b9      	b.n	80067a2 <_printf_i+0xf6>
 800682e:	6813      	ldr	r3, [r2, #0]
 8006830:	6825      	ldr	r5, [r4, #0]
 8006832:	1d18      	adds	r0, r3, #4
 8006834:	6961      	ldr	r1, [r4, #20]
 8006836:	6010      	str	r0, [r2, #0]
 8006838:	0628      	lsls	r0, r5, #24
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	d501      	bpl.n	8006842 <_printf_i+0x196>
 800683e:	6019      	str	r1, [r3, #0]
 8006840:	e002      	b.n	8006848 <_printf_i+0x19c>
 8006842:	066a      	lsls	r2, r5, #25
 8006844:	d5fb      	bpl.n	800683e <_printf_i+0x192>
 8006846:	8019      	strh	r1, [r3, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	4665      	mov	r5, ip
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	e7b9      	b.n	80067c4 <_printf_i+0x118>
 8006850:	6813      	ldr	r3, [r2, #0]
 8006852:	1d19      	adds	r1, r3, #4
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	681d      	ldr	r5, [r3, #0]
 8006858:	6862      	ldr	r2, [r4, #4]
 800685a:	2100      	movs	r1, #0
 800685c:	4628      	mov	r0, r5
 800685e:	f000 feb1 	bl	80075c4 <memchr>
 8006862:	b108      	cbz	r0, 8006868 <_printf_i+0x1bc>
 8006864:	1b40      	subs	r0, r0, r5
 8006866:	6060      	str	r0, [r4, #4]
 8006868:	6863      	ldr	r3, [r4, #4]
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	2300      	movs	r3, #0
 800686e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006872:	e7a7      	b.n	80067c4 <_printf_i+0x118>
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	462a      	mov	r2, r5
 8006878:	4639      	mov	r1, r7
 800687a:	4630      	mov	r0, r6
 800687c:	47c0      	blx	r8
 800687e:	3001      	adds	r0, #1
 8006880:	d0aa      	beq.n	80067d8 <_printf_i+0x12c>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	079b      	lsls	r3, r3, #30
 8006886:	d413      	bmi.n	80068b0 <_printf_i+0x204>
 8006888:	68e0      	ldr	r0, [r4, #12]
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	4298      	cmp	r0, r3
 800688e:	bfb8      	it	lt
 8006890:	4618      	movlt	r0, r3
 8006892:	e7a3      	b.n	80067dc <_printf_i+0x130>
 8006894:	2301      	movs	r3, #1
 8006896:	464a      	mov	r2, r9
 8006898:	4639      	mov	r1, r7
 800689a:	4630      	mov	r0, r6
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d09a      	beq.n	80067d8 <_printf_i+0x12c>
 80068a2:	3501      	adds	r5, #1
 80068a4:	68e3      	ldr	r3, [r4, #12]
 80068a6:	9a03      	ldr	r2, [sp, #12]
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	42ab      	cmp	r3, r5
 80068ac:	dcf2      	bgt.n	8006894 <_printf_i+0x1e8>
 80068ae:	e7eb      	b.n	8006888 <_printf_i+0x1dc>
 80068b0:	2500      	movs	r5, #0
 80068b2:	f104 0919 	add.w	r9, r4, #25
 80068b6:	e7f5      	b.n	80068a4 <_printf_i+0x1f8>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ac      	bne.n	8006816 <_printf_i+0x16a>
 80068bc:	7803      	ldrb	r3, [r0, #0]
 80068be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c6:	e76c      	b.n	80067a2 <_printf_i+0xf6>
 80068c8:	080088fe 	.word	0x080088fe
 80068cc:	0800890f 	.word	0x0800890f

080068d0 <siprintf>:
 80068d0:	b40e      	push	{r1, r2, r3}
 80068d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068d6:	b500      	push	{lr}
 80068d8:	b09c      	sub	sp, #112	; 0x70
 80068da:	ab1d      	add	r3, sp, #116	; 0x74
 80068dc:	9002      	str	r0, [sp, #8]
 80068de:	9006      	str	r0, [sp, #24]
 80068e0:	9107      	str	r1, [sp, #28]
 80068e2:	9104      	str	r1, [sp, #16]
 80068e4:	4808      	ldr	r0, [pc, #32]	; (8006908 <siprintf+0x38>)
 80068e6:	4909      	ldr	r1, [pc, #36]	; (800690c <siprintf+0x3c>)
 80068e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ec:	9105      	str	r1, [sp, #20]
 80068ee:	6800      	ldr	r0, [r0, #0]
 80068f0:	a902      	add	r1, sp, #8
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	f001 fa6a 	bl	8007dcc <_svfiprintf_r>
 80068f8:	2200      	movs	r2, #0
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	b01c      	add	sp, #112	; 0x70
 8006900:	f85d eb04 	ldr.w	lr, [sp], #4
 8006904:	b003      	add	sp, #12
 8006906:	4770      	bx	lr
 8006908:	20000008 	.word	0x20000008
 800690c:	ffff0208 	.word	0xffff0208

08006910 <quorem>:
 8006910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	6903      	ldr	r3, [r0, #16]
 8006916:	690c      	ldr	r4, [r1, #16]
 8006918:	4680      	mov	r8, r0
 800691a:	42a3      	cmp	r3, r4
 800691c:	f2c0 8084 	blt.w	8006a28 <quorem+0x118>
 8006920:	3c01      	subs	r4, #1
 8006922:	f101 0714 	add.w	r7, r1, #20
 8006926:	f100 0614 	add.w	r6, r0, #20
 800692a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800692e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006932:	3501      	adds	r5, #1
 8006934:	fbb0 f5f5 	udiv	r5, r0, r5
 8006938:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800693c:	eb06 030c 	add.w	r3, r6, ip
 8006940:	eb07 090c 	add.w	r9, r7, ip
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	b39d      	cbz	r5, 80069b0 <quorem+0xa0>
 8006948:	f04f 0a00 	mov.w	sl, #0
 800694c:	4638      	mov	r0, r7
 800694e:	46b6      	mov	lr, r6
 8006950:	46d3      	mov	fp, sl
 8006952:	f850 2b04 	ldr.w	r2, [r0], #4
 8006956:	b293      	uxth	r3, r2
 8006958:	fb05 a303 	mla	r3, r5, r3, sl
 800695c:	0c12      	lsrs	r2, r2, #16
 800695e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006962:	fb05 a202 	mla	r2, r5, r2, sl
 8006966:	b29b      	uxth	r3, r3
 8006968:	ebab 0303 	sub.w	r3, fp, r3
 800696c:	f8de b000 	ldr.w	fp, [lr]
 8006970:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006974:	fa1f fb8b 	uxth.w	fp, fp
 8006978:	445b      	add	r3, fp
 800697a:	fa1f fb82 	uxth.w	fp, r2
 800697e:	f8de 2000 	ldr.w	r2, [lr]
 8006982:	4581      	cmp	r9, r0
 8006984:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006992:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006996:	f84e 3b04 	str.w	r3, [lr], #4
 800699a:	d2da      	bcs.n	8006952 <quorem+0x42>
 800699c:	f856 300c 	ldr.w	r3, [r6, ip]
 80069a0:	b933      	cbnz	r3, 80069b0 <quorem+0xa0>
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	429e      	cmp	r6, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	d331      	bcc.n	8006a10 <quorem+0x100>
 80069ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80069b0:	4640      	mov	r0, r8
 80069b2:	f001 f835 	bl	8007a20 <__mcmp>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	db26      	blt.n	8006a08 <quorem+0xf8>
 80069ba:	4630      	mov	r0, r6
 80069bc:	f04f 0c00 	mov.w	ip, #0
 80069c0:	3501      	adds	r5, #1
 80069c2:	f857 1b04 	ldr.w	r1, [r7], #4
 80069c6:	f8d0 e000 	ldr.w	lr, [r0]
 80069ca:	b28b      	uxth	r3, r1
 80069cc:	ebac 0303 	sub.w	r3, ip, r3
 80069d0:	fa1f f28e 	uxth.w	r2, lr
 80069d4:	4413      	add	r3, r2
 80069d6:	0c0a      	lsrs	r2, r1, #16
 80069d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e6:	45b9      	cmp	r9, r7
 80069e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069ec:	f840 3b04 	str.w	r3, [r0], #4
 80069f0:	d2e7      	bcs.n	80069c2 <quorem+0xb2>
 80069f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80069f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80069fa:	b92a      	cbnz	r2, 8006a08 <quorem+0xf8>
 80069fc:	3b04      	subs	r3, #4
 80069fe:	429e      	cmp	r6, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	d30b      	bcc.n	8006a1c <quorem+0x10c>
 8006a04:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a08:	4628      	mov	r0, r5
 8006a0a:	b003      	add	sp, #12
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	3b04      	subs	r3, #4
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d1c9      	bne.n	80069ac <quorem+0x9c>
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	e7c4      	b.n	80069a6 <quorem+0x96>
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d1ef      	bne.n	8006a04 <quorem+0xf4>
 8006a24:	3c01      	subs	r4, #1
 8006a26:	e7ea      	b.n	80069fe <quorem+0xee>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7ee      	b.n	8006a0a <quorem+0xfa>
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_dtoa_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	4616      	mov	r6, r2
 8006a36:	461f      	mov	r7, r3
 8006a38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a3a:	b095      	sub	sp, #84	; 0x54
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006a42:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a46:	b93d      	cbnz	r5, 8006a58 <_dtoa_r+0x28>
 8006a48:	2010      	movs	r0, #16
 8006a4a:	f000 fdb3 	bl	80075b4 <malloc>
 8006a4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006a50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a54:	6005      	str	r5, [r0, #0]
 8006a56:	60c5      	str	r5, [r0, #12]
 8006a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	b151      	cbz	r1, 8006a74 <_dtoa_r+0x44>
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	2301      	movs	r3, #1
 8006a62:	4093      	lsls	r3, r2
 8006a64:	604a      	str	r2, [r1, #4]
 8006a66:	608b      	str	r3, [r1, #8]
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fdf8 	bl	800765e <_Bfree>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	1e3b      	subs	r3, r7, #0
 8006a76:	bfaf      	iteee	ge
 8006a78:	2300      	movge	r3, #0
 8006a7a:	2201      	movlt	r2, #1
 8006a7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	9303      	strlt	r3, [sp, #12]
 8006a82:	bfac      	ite	ge
 8006a84:	f8c8 3000 	strge.w	r3, [r8]
 8006a88:	f8c8 2000 	strlt.w	r2, [r8]
 8006a8c:	4bae      	ldr	r3, [pc, #696]	; (8006d48 <_dtoa_r+0x318>)
 8006a8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a92:	ea33 0308 	bics.w	r3, r3, r8
 8006a96:	d11b      	bne.n	8006ad0 <_dtoa_r+0xa0>
 8006a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	b923      	cbnz	r3, 8006aae <_dtoa_r+0x7e>
 8006aa4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f000 8545 	beq.w	8007538 <_dtoa_r+0xb08>
 8006aae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ab0:	b953      	cbnz	r3, 8006ac8 <_dtoa_r+0x98>
 8006ab2:	4ba6      	ldr	r3, [pc, #664]	; (8006d4c <_dtoa_r+0x31c>)
 8006ab4:	e021      	b.n	8006afa <_dtoa_r+0xca>
 8006ab6:	4ba6      	ldr	r3, [pc, #664]	; (8006d50 <_dtoa_r+0x320>)
 8006ab8:	9306      	str	r3, [sp, #24]
 8006aba:	3308      	adds	r3, #8
 8006abc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	9806      	ldr	r0, [sp, #24]
 8006ac2:	b015      	add	sp, #84	; 0x54
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	4ba0      	ldr	r3, [pc, #640]	; (8006d4c <_dtoa_r+0x31c>)
 8006aca:	9306      	str	r3, [sp, #24]
 8006acc:	3303      	adds	r3, #3
 8006ace:	e7f5      	b.n	8006abc <_dtoa_r+0x8c>
 8006ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	f7f9 ff74 	bl	80009c8 <__aeabi_dcmpeq>
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	b160      	cbz	r0, 8006afe <_dtoa_r+0xce>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8520 	beq.w	8007532 <_dtoa_r+0xb02>
 8006af2:	4b98      	ldr	r3, [pc, #608]	; (8006d54 <_dtoa_r+0x324>)
 8006af4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	9306      	str	r3, [sp, #24]
 8006afc:	e7e0      	b.n	8006ac0 <_dtoa_r+0x90>
 8006afe:	ab12      	add	r3, sp, #72	; 0x48
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	ab13      	add	r3, sp, #76	; 0x4c
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4632      	mov	r2, r6
 8006b08:	463b      	mov	r3, r7
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 f800 	bl	8007b10 <__d2b>
 8006b10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b14:	4683      	mov	fp, r0
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	d07d      	beq.n	8006c16 <_dtoa_r+0x1e6>
 8006b1a:	46b0      	mov	r8, r6
 8006b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006b24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006b28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006b30:	2200      	movs	r2, #0
 8006b32:	4b89      	ldr	r3, [pc, #548]	; (8006d58 <_dtoa_r+0x328>)
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	f7f9 fb26 	bl	8000188 <__aeabi_dsub>
 8006b3c:	a37c      	add	r3, pc, #496	; (adr r3, 8006d30 <_dtoa_r+0x300>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fcd9 	bl	80004f8 <__aeabi_dmul>
 8006b46:	a37c      	add	r3, pc, #496	; (adr r3, 8006d38 <_dtoa_r+0x308>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fb1e 	bl	800018c <__adddf3>
 8006b50:	4606      	mov	r6, r0
 8006b52:	4628      	mov	r0, r5
 8006b54:	460f      	mov	r7, r1
 8006b56:	f7f9 fc65 	bl	8000424 <__aeabi_i2d>
 8006b5a:	a379      	add	r3, pc, #484	; (adr r3, 8006d40 <_dtoa_r+0x310>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fcca 	bl	80004f8 <__aeabi_dmul>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	f7f9 fb0e 	bl	800018c <__adddf3>
 8006b70:	4606      	mov	r6, r0
 8006b72:	460f      	mov	r7, r1
 8006b74:	f7f9 ff70 	bl	8000a58 <__aeabi_d2iz>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4639      	mov	r1, r7
 8006b82:	f7f9 ff2b 	bl	80009dc <__aeabi_dcmplt>
 8006b86:	b148      	cbz	r0, 8006b9c <_dtoa_r+0x16c>
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f7f9 fc4b 	bl	8000424 <__aeabi_i2d>
 8006b8e:	4632      	mov	r2, r6
 8006b90:	463b      	mov	r3, r7
 8006b92:	f7f9 ff19 	bl	80009c8 <__aeabi_dcmpeq>
 8006b96:	b908      	cbnz	r0, 8006b9c <_dtoa_r+0x16c>
 8006b98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b9c:	f1ba 0f16 	cmp.w	sl, #22
 8006ba0:	d85a      	bhi.n	8006c58 <_dtoa_r+0x228>
 8006ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba6:	496d      	ldr	r1, [pc, #436]	; (8006d5c <_dtoa_r+0x32c>)
 8006ba8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb0:	f7f9 ff32 	bl	8000a18 <__aeabi_dcmpgt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d051      	beq.n	8006c5c <_dtoa_r+0x22c>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8006bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bc2:	1b5d      	subs	r5, r3, r5
 8006bc4:	1e6b      	subs	r3, r5, #1
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	bf43      	ittte	mi
 8006bca:	2300      	movmi	r3, #0
 8006bcc:	f1c5 0901 	rsbmi	r9, r5, #1
 8006bd0:	9307      	strmi	r3, [sp, #28]
 8006bd2:	f04f 0900 	movpl.w	r9, #0
 8006bd6:	f1ba 0f00 	cmp.w	sl, #0
 8006bda:	db41      	blt.n	8006c60 <_dtoa_r+0x230>
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006be2:	4453      	add	r3, sl
 8006be4:	9307      	str	r3, [sp, #28]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9308      	str	r3, [sp, #32]
 8006bea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	f200 808f 	bhi.w	8006d10 <_dtoa_r+0x2e0>
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	bfc4      	itt	gt
 8006bf6:	3b04      	subgt	r3, #4
 8006bf8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bfc:	bfc8      	it	gt
 8006bfe:	2500      	movgt	r5, #0
 8006c00:	f1a3 0302 	sub.w	r3, r3, #2
 8006c04:	bfd8      	it	le
 8006c06:	2501      	movle	r5, #1
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	f200 808d 	bhi.w	8006d28 <_dtoa_r+0x2f8>
 8006c0e:	e8df f003 	tbb	[pc, r3]
 8006c12:	7d7b      	.short	0x7d7b
 8006c14:	6f2f      	.short	0x6f2f
 8006c16:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006c1a:	441d      	add	r5, r3
 8006c1c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c20:	2820      	cmp	r0, #32
 8006c22:	dd13      	ble.n	8006c4c <_dtoa_r+0x21c>
 8006c24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c28:	9b02      	ldr	r3, [sp, #8]
 8006c2a:	fa08 f800 	lsl.w	r8, r8, r0
 8006c2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c32:	fa23 f000 	lsr.w	r0, r3, r0
 8006c36:	ea48 0000 	orr.w	r0, r8, r0
 8006c3a:	f7f9 fbe3 	bl	8000404 <__aeabi_ui2d>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4680      	mov	r8, r0
 8006c42:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006c46:	3d01      	subs	r5, #1
 8006c48:	9310      	str	r3, [sp, #64]	; 0x40
 8006c4a:	e771      	b.n	8006b30 <_dtoa_r+0x100>
 8006c4c:	9b02      	ldr	r3, [sp, #8]
 8006c4e:	f1c0 0020 	rsb	r0, r0, #32
 8006c52:	fa03 f000 	lsl.w	r0, r3, r0
 8006c56:	e7f0      	b.n	8006c3a <_dtoa_r+0x20a>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7b0      	b.n	8006bbe <_dtoa_r+0x18e>
 8006c5c:	900d      	str	r0, [sp, #52]	; 0x34
 8006c5e:	e7af      	b.n	8006bc0 <_dtoa_r+0x190>
 8006c60:	f1ca 0300 	rsb	r3, sl, #0
 8006c64:	9308      	str	r3, [sp, #32]
 8006c66:	2300      	movs	r3, #0
 8006c68:	eba9 090a 	sub.w	r9, r9, sl
 8006c6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c6e:	e7bc      	b.n	8006bea <_dtoa_r+0x1ba>
 8006c70:	2301      	movs	r3, #1
 8006c72:	9309      	str	r3, [sp, #36]	; 0x24
 8006c74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd74      	ble.n	8006d64 <_dtoa_r+0x334>
 8006c7a:	4698      	mov	r8, r3
 8006c7c:	9304      	str	r3, [sp, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c82:	6072      	str	r2, [r6, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	f102 0014 	add.w	r0, r2, #20
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	6871      	ldr	r1, [r6, #4]
 8006c8e:	d96e      	bls.n	8006d6e <_dtoa_r+0x33e>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fcb0 	bl	80075f6 <_Balloc>
 8006c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c98:	6030      	str	r0, [r6, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f1b8 0f0e 	cmp.w	r8, #14
 8006ca0:	9306      	str	r3, [sp, #24]
 8006ca2:	f200 80ed 	bhi.w	8006e80 <_dtoa_r+0x450>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	f000 80ea 	beq.w	8006e80 <_dtoa_r+0x450>
 8006cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cb0:	f1ba 0f00 	cmp.w	sl, #0
 8006cb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006cb8:	dd77      	ble.n	8006daa <_dtoa_r+0x37a>
 8006cba:	4a28      	ldr	r2, [pc, #160]	; (8006d5c <_dtoa_r+0x32c>)
 8006cbc:	f00a 030f 	and.w	r3, sl, #15
 8006cc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cc8:	06f0      	lsls	r0, r6, #27
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006cd2:	d568      	bpl.n	8006da6 <_dtoa_r+0x376>
 8006cd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <_dtoa_r+0x330>)
 8006cda:	2503      	movs	r5, #3
 8006cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ce0:	f7f9 fd34 	bl	800074c <__aeabi_ddiv>
 8006ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce8:	f006 060f 	and.w	r6, r6, #15
 8006cec:	4f1c      	ldr	r7, [pc, #112]	; (8006d60 <_dtoa_r+0x330>)
 8006cee:	e04f      	b.n	8006d90 <_dtoa_r+0x360>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cf6:	4453      	add	r3, sl
 8006cf8:	f103 0801 	add.w	r8, r3, #1
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	4643      	mov	r3, r8
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	bfb8      	it	lt
 8006d04:	2301      	movlt	r3, #1
 8006d06:	e7ba      	b.n	8006c7e <_dtoa_r+0x24e>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7b2      	b.n	8006c72 <_dtoa_r+0x242>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e7f0      	b.n	8006cf2 <_dtoa_r+0x2c2>
 8006d10:	2501      	movs	r5, #1
 8006d12:	2300      	movs	r3, #0
 8006d14:	9509      	str	r5, [sp, #36]	; 0x24
 8006d16:	931e      	str	r3, [sp, #120]	; 0x78
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	4698      	mov	r8, r3
 8006d22:	2312      	movs	r3, #18
 8006d24:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d26:	e7aa      	b.n	8006c7e <_dtoa_r+0x24e>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2c:	e7f4      	b.n	8006d18 <_dtoa_r+0x2e8>
 8006d2e:	bf00      	nop
 8006d30:	636f4361 	.word	0x636f4361
 8006d34:	3fd287a7 	.word	0x3fd287a7
 8006d38:	8b60c8b3 	.word	0x8b60c8b3
 8006d3c:	3fc68a28 	.word	0x3fc68a28
 8006d40:	509f79fb 	.word	0x509f79fb
 8006d44:	3fd34413 	.word	0x3fd34413
 8006d48:	7ff00000 	.word	0x7ff00000
 8006d4c:	08008929 	.word	0x08008929
 8006d50:	08008920 	.word	0x08008920
 8006d54:	080088fd 	.word	0x080088fd
 8006d58:	3ff80000 	.word	0x3ff80000
 8006d5c:	08008958 	.word	0x08008958
 8006d60:	08008930 	.word	0x08008930
 8006d64:	2301      	movs	r3, #1
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	4698      	mov	r8, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	e7da      	b.n	8006d24 <_dtoa_r+0x2f4>
 8006d6e:	3101      	adds	r1, #1
 8006d70:	6071      	str	r1, [r6, #4]
 8006d72:	0052      	lsls	r2, r2, #1
 8006d74:	e787      	b.n	8006c86 <_dtoa_r+0x256>
 8006d76:	07f1      	lsls	r1, r6, #31
 8006d78:	d508      	bpl.n	8006d8c <_dtoa_r+0x35c>
 8006d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d82:	f7f9 fbb9 	bl	80004f8 <__aeabi_dmul>
 8006d86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	1076      	asrs	r6, r6, #1
 8006d8e:	3708      	adds	r7, #8
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d1f0      	bne.n	8006d76 <_dtoa_r+0x346>
 8006d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9c:	f7f9 fcd6 	bl	800074c <__aeabi_ddiv>
 8006da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da4:	e01b      	b.n	8006dde <_dtoa_r+0x3ae>
 8006da6:	2502      	movs	r5, #2
 8006da8:	e7a0      	b.n	8006cec <_dtoa_r+0x2bc>
 8006daa:	f000 80a4 	beq.w	8006ef6 <_dtoa_r+0x4c6>
 8006dae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006db2:	f1ca 0600 	rsb	r6, sl, #0
 8006db6:	4ba0      	ldr	r3, [pc, #640]	; (8007038 <_dtoa_r+0x608>)
 8006db8:	f006 020f 	and.w	r2, r6, #15
 8006dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f7f9 fb98 	bl	80004f8 <__aeabi_dmul>
 8006dc8:	2502      	movs	r5, #2
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd0:	4f9a      	ldr	r7, [pc, #616]	; (800703c <_dtoa_r+0x60c>)
 8006dd2:	1136      	asrs	r6, r6, #4
 8006dd4:	2e00      	cmp	r6, #0
 8006dd6:	f040 8083 	bne.w	8006ee0 <_dtoa_r+0x4b0>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e0      	bne.n	8006da0 <_dtoa_r+0x370>
 8006dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 808a 	beq.w	8006efa <_dtoa_r+0x4ca>
 8006de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006df2:	2200      	movs	r2, #0
 8006df4:	4b92      	ldr	r3, [pc, #584]	; (8007040 <_dtoa_r+0x610>)
 8006df6:	f7f9 fdf1 	bl	80009dc <__aeabi_dcmplt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d07d      	beq.n	8006efa <_dtoa_r+0x4ca>
 8006dfe:	f1b8 0f00 	cmp.w	r8, #0
 8006e02:	d07a      	beq.n	8006efa <_dtoa_r+0x4ca>
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dd36      	ble.n	8006e78 <_dtoa_r+0x448>
 8006e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4b8c      	ldr	r3, [pc, #560]	; (8007044 <_dtoa_r+0x614>)
 8006e12:	f7f9 fb71 	bl	80004f8 <__aeabi_dmul>
 8006e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e1a:	9e04      	ldr	r6, [sp, #16]
 8006e1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006e20:	3501      	adds	r5, #1
 8006e22:	4628      	mov	r0, r5
 8006e24:	f7f9 fafe 	bl	8000424 <__aeabi_i2d>
 8006e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e2c:	f7f9 fb64 	bl	80004f8 <__aeabi_dmul>
 8006e30:	2200      	movs	r2, #0
 8006e32:	4b85      	ldr	r3, [pc, #532]	; (8007048 <_dtoa_r+0x618>)
 8006e34:	f7f9 f9aa 	bl	800018c <__adddf3>
 8006e38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006e3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e40:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e42:	2e00      	cmp	r6, #0
 8006e44:	d15c      	bne.n	8006f00 <_dtoa_r+0x4d0>
 8006e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	4b7f      	ldr	r3, [pc, #508]	; (800704c <_dtoa_r+0x61c>)
 8006e4e:	f7f9 f99b 	bl	8000188 <__aeabi_dsub>
 8006e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e54:	462b      	mov	r3, r5
 8006e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5a:	f7f9 fddd 	bl	8000a18 <__aeabi_dcmpgt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f040 8281 	bne.w	8007366 <_dtoa_r+0x936>
 8006e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e6e:	f7f9 fdb5 	bl	80009dc <__aeabi_dcmplt>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	f040 8275 	bne.w	8007362 <_dtoa_r+0x932>
 8006e78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f2c0 814b 	blt.w	800711e <_dtoa_r+0x6ee>
 8006e88:	f1ba 0f0e 	cmp.w	sl, #14
 8006e8c:	f300 8147 	bgt.w	800711e <_dtoa_r+0x6ee>
 8006e90:	4b69      	ldr	r3, [pc, #420]	; (8007038 <_dtoa_r+0x608>)
 8006e92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f280 80d7 	bge.w	8007054 <_dtoa_r+0x624>
 8006ea6:	f1b8 0f00 	cmp.w	r8, #0
 8006eaa:	f300 80d3 	bgt.w	8007054 <_dtoa_r+0x624>
 8006eae:	f040 8257 	bne.w	8007360 <_dtoa_r+0x930>
 8006eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b64      	ldr	r3, [pc, #400]	; (800704c <_dtoa_r+0x61c>)
 8006eba:	f7f9 fb1d 	bl	80004f8 <__aeabi_dmul>
 8006ebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ec2:	f7f9 fd9f 	bl	8000a04 <__aeabi_dcmpge>
 8006ec6:	4646      	mov	r6, r8
 8006ec8:	4647      	mov	r7, r8
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	f040 822d 	bne.w	800732a <_dtoa_r+0x8fa>
 8006ed0:	9b06      	ldr	r3, [sp, #24]
 8006ed2:	9a06      	ldr	r2, [sp, #24]
 8006ed4:	1c5d      	adds	r5, r3, #1
 8006ed6:	2331      	movs	r3, #49	; 0x31
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
 8006edc:	7013      	strb	r3, [r2, #0]
 8006ede:	e228      	b.n	8007332 <_dtoa_r+0x902>
 8006ee0:	07f2      	lsls	r2, r6, #31
 8006ee2:	d505      	bpl.n	8006ef0 <_dtoa_r+0x4c0>
 8006ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee8:	f7f9 fb06 	bl	80004f8 <__aeabi_dmul>
 8006eec:	2301      	movs	r3, #1
 8006eee:	3501      	adds	r5, #1
 8006ef0:	1076      	asrs	r6, r6, #1
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	e76e      	b.n	8006dd4 <_dtoa_r+0x3a4>
 8006ef6:	2502      	movs	r5, #2
 8006ef8:	e771      	b.n	8006dde <_dtoa_r+0x3ae>
 8006efa:	4657      	mov	r7, sl
 8006efc:	4646      	mov	r6, r8
 8006efe:	e790      	b.n	8006e22 <_dtoa_r+0x3f2>
 8006f00:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <_dtoa_r+0x608>)
 8006f02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f06:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d048      	beq.n	8006fa2 <_dtoa_r+0x572>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	2000      	movs	r0, #0
 8006f16:	494e      	ldr	r1, [pc, #312]	; (8007050 <_dtoa_r+0x620>)
 8006f18:	f7f9 fc18 	bl	800074c <__aeabi_ddiv>
 8006f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f20:	f7f9 f932 	bl	8000188 <__aeabi_dsub>
 8006f24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f28:	9d06      	ldr	r5, [sp, #24]
 8006f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2e:	f7f9 fd93 	bl	8000a58 <__aeabi_d2iz>
 8006f32:	9011      	str	r0, [sp, #68]	; 0x44
 8006f34:	f7f9 fa76 	bl	8000424 <__aeabi_i2d>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f40:	f7f9 f922 	bl	8000188 <__aeabi_dsub>
 8006f44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f4a:	3330      	adds	r3, #48	; 0x30
 8006f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f54:	f7f9 fd42 	bl	80009dc <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d163      	bne.n	8007024 <_dtoa_r+0x5f4>
 8006f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f60:	2000      	movs	r0, #0
 8006f62:	4937      	ldr	r1, [pc, #220]	; (8007040 <_dtoa_r+0x610>)
 8006f64:	f7f9 f910 	bl	8000188 <__aeabi_dsub>
 8006f68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f6c:	f7f9 fd36 	bl	80009dc <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f040 80b5 	bne.w	80070e0 <_dtoa_r+0x6b0>
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	1aeb      	subs	r3, r5, r3
 8006f7a:	429e      	cmp	r6, r3
 8006f7c:	f77f af7c 	ble.w	8006e78 <_dtoa_r+0x448>
 8006f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f84:	2200      	movs	r2, #0
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <_dtoa_r+0x614>)
 8006f88:	f7f9 fab6 	bl	80004f8 <__aeabi_dmul>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <_dtoa_r+0x614>)
 8006f98:	f7f9 faae 	bl	80004f8 <__aeabi_dmul>
 8006f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa0:	e7c3      	b.n	8006f2a <_dtoa_r+0x4fa>
 8006fa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fa6:	f7f9 faa7 	bl	80004f8 <__aeabi_dmul>
 8006faa:	9b06      	ldr	r3, [sp, #24]
 8006fac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fb0:	199d      	adds	r5, r3, r6
 8006fb2:	461e      	mov	r6, r3
 8006fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb8:	f7f9 fd4e 	bl	8000a58 <__aeabi_d2iz>
 8006fbc:	9011      	str	r0, [sp, #68]	; 0x44
 8006fbe:	f7f9 fa31 	bl	8000424 <__aeabi_i2d>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fca:	f7f9 f8dd 	bl	8000188 <__aeabi_dsub>
 8006fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd4:	3330      	adds	r3, #48	; 0x30
 8006fd6:	f806 3b01 	strb.w	r3, [r6], #1
 8006fda:	42ae      	cmp	r6, r5
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	d124      	bne.n	800702c <_dtoa_r+0x5fc>
 8006fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <_dtoa_r+0x620>)
 8006fe8:	f7f9 f8d0 	bl	800018c <__adddf3>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff4:	f7f9 fd10 	bl	8000a18 <__aeabi_dcmpgt>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d171      	bne.n	80070e0 <_dtoa_r+0x6b0>
 8006ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007000:	2000      	movs	r0, #0
 8007002:	4913      	ldr	r1, [pc, #76]	; (8007050 <_dtoa_r+0x620>)
 8007004:	f7f9 f8c0 	bl	8000188 <__aeabi_dsub>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007010:	f7f9 fce4 	bl	80009dc <__aeabi_dcmplt>
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f af2f 	beq.w	8006e78 <_dtoa_r+0x448>
 800701a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800701e:	1e6a      	subs	r2, r5, #1
 8007020:	2b30      	cmp	r3, #48	; 0x30
 8007022:	d001      	beq.n	8007028 <_dtoa_r+0x5f8>
 8007024:	46ba      	mov	sl, r7
 8007026:	e04a      	b.n	80070be <_dtoa_r+0x68e>
 8007028:	4615      	mov	r5, r2
 800702a:	e7f6      	b.n	800701a <_dtoa_r+0x5ea>
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <_dtoa_r+0x614>)
 800702e:	f7f9 fa63 	bl	80004f8 <__aeabi_dmul>
 8007032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007036:	e7bd      	b.n	8006fb4 <_dtoa_r+0x584>
 8007038:	08008958 	.word	0x08008958
 800703c:	08008930 	.word	0x08008930
 8007040:	3ff00000 	.word	0x3ff00000
 8007044:	40240000 	.word	0x40240000
 8007048:	401c0000 	.word	0x401c0000
 800704c:	40140000 	.word	0x40140000
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	9d06      	ldr	r5, [sp, #24]
 8007056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800705a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	f7f9 fb73 	bl	800074c <__aeabi_ddiv>
 8007066:	f7f9 fcf7 	bl	8000a58 <__aeabi_d2iz>
 800706a:	4681      	mov	r9, r0
 800706c:	f7f9 f9da 	bl	8000424 <__aeabi_i2d>
 8007070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007074:	f7f9 fa40 	bl	80004f8 <__aeabi_dmul>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 f882 	bl	8000188 <__aeabi_dsub>
 8007084:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007088:	f805 6b01 	strb.w	r6, [r5], #1
 800708c:	9e06      	ldr	r6, [sp, #24]
 800708e:	4602      	mov	r2, r0
 8007090:	1bae      	subs	r6, r5, r6
 8007092:	45b0      	cmp	r8, r6
 8007094:	460b      	mov	r3, r1
 8007096:	d135      	bne.n	8007104 <_dtoa_r+0x6d4>
 8007098:	f7f9 f878 	bl	800018c <__adddf3>
 800709c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070a0:	4606      	mov	r6, r0
 80070a2:	460f      	mov	r7, r1
 80070a4:	f7f9 fcb8 	bl	8000a18 <__aeabi_dcmpgt>
 80070a8:	b9c8      	cbnz	r0, 80070de <_dtoa_r+0x6ae>
 80070aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 fc89 	bl	80009c8 <__aeabi_dcmpeq>
 80070b6:	b110      	cbz	r0, 80070be <_dtoa_r+0x68e>
 80070b8:	f019 0f01 	tst.w	r9, #1
 80070bc:	d10f      	bne.n	80070de <_dtoa_r+0x6ae>
 80070be:	4659      	mov	r1, fp
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 facc 	bl	800765e <_Bfree>
 80070c6:	2300      	movs	r3, #0
 80070c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070ca:	702b      	strb	r3, [r5, #0]
 80070cc:	f10a 0301 	add.w	r3, sl, #1
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f43f acf3 	beq.w	8006ac0 <_dtoa_r+0x90>
 80070da:	601d      	str	r5, [r3, #0]
 80070dc:	e4f0      	b.n	8006ac0 <_dtoa_r+0x90>
 80070de:	4657      	mov	r7, sl
 80070e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070e4:	1e6b      	subs	r3, r5, #1
 80070e6:	2a39      	cmp	r2, #57	; 0x39
 80070e8:	d106      	bne.n	80070f8 <_dtoa_r+0x6c8>
 80070ea:	9a06      	ldr	r2, [sp, #24]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d107      	bne.n	8007100 <_dtoa_r+0x6d0>
 80070f0:	2330      	movs	r3, #48	; 0x30
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	3701      	adds	r7, #1
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	3201      	adds	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e791      	b.n	8007024 <_dtoa_r+0x5f4>
 8007100:	461d      	mov	r5, r3
 8007102:	e7ed      	b.n	80070e0 <_dtoa_r+0x6b0>
 8007104:	2200      	movs	r2, #0
 8007106:	4b99      	ldr	r3, [pc, #612]	; (800736c <_dtoa_r+0x93c>)
 8007108:	f7f9 f9f6 	bl	80004f8 <__aeabi_dmul>
 800710c:	2200      	movs	r2, #0
 800710e:	2300      	movs	r3, #0
 8007110:	4606      	mov	r6, r0
 8007112:	460f      	mov	r7, r1
 8007114:	f7f9 fc58 	bl	80009c8 <__aeabi_dcmpeq>
 8007118:	2800      	cmp	r0, #0
 800711a:	d09e      	beq.n	800705a <_dtoa_r+0x62a>
 800711c:	e7cf      	b.n	80070be <_dtoa_r+0x68e>
 800711e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007120:	2a00      	cmp	r2, #0
 8007122:	f000 8088 	beq.w	8007236 <_dtoa_r+0x806>
 8007126:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007128:	2a01      	cmp	r2, #1
 800712a:	dc6d      	bgt.n	8007208 <_dtoa_r+0x7d8>
 800712c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800712e:	2a00      	cmp	r2, #0
 8007130:	d066      	beq.n	8007200 <_dtoa_r+0x7d0>
 8007132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007136:	464d      	mov	r5, r9
 8007138:	9e08      	ldr	r6, [sp, #32]
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	2101      	movs	r1, #1
 800713e:	441a      	add	r2, r3
 8007140:	4620      	mov	r0, r4
 8007142:	4499      	add	r9, r3
 8007144:	9207      	str	r2, [sp, #28]
 8007146:	f000 fb2a 	bl	800779e <__i2b>
 800714a:	4607      	mov	r7, r0
 800714c:	2d00      	cmp	r5, #0
 800714e:	dd0b      	ble.n	8007168 <_dtoa_r+0x738>
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dd08      	ble.n	8007168 <_dtoa_r+0x738>
 8007156:	42ab      	cmp	r3, r5
 8007158:	bfa8      	it	ge
 800715a:	462b      	movge	r3, r5
 800715c:	9a07      	ldr	r2, [sp, #28]
 800715e:	eba9 0903 	sub.w	r9, r9, r3
 8007162:	1aed      	subs	r5, r5, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	9b08      	ldr	r3, [sp, #32]
 800716a:	b1eb      	cbz	r3, 80071a8 <_dtoa_r+0x778>
 800716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d065      	beq.n	800723e <_dtoa_r+0x80e>
 8007172:	b18e      	cbz	r6, 8007198 <_dtoa_r+0x768>
 8007174:	4639      	mov	r1, r7
 8007176:	4632      	mov	r2, r6
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fbaf 	bl	80078dc <__pow5mult>
 800717e:	465a      	mov	r2, fp
 8007180:	4601      	mov	r1, r0
 8007182:	4607      	mov	r7, r0
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fb13 	bl	80077b0 <__multiply>
 800718a:	4659      	mov	r1, fp
 800718c:	900a      	str	r0, [sp, #40]	; 0x28
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fa65 	bl	800765e <_Bfree>
 8007194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007196:	469b      	mov	fp, r3
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	1b9a      	subs	r2, r3, r6
 800719c:	d004      	beq.n	80071a8 <_dtoa_r+0x778>
 800719e:	4659      	mov	r1, fp
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fb9b 	bl	80078dc <__pow5mult>
 80071a6:	4683      	mov	fp, r0
 80071a8:	2101      	movs	r1, #1
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 faf7 	bl	800779e <__i2b>
 80071b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b2:	4606      	mov	r6, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 81c6 	beq.w	8007546 <_dtoa_r+0xb16>
 80071ba:	461a      	mov	r2, r3
 80071bc:	4601      	mov	r1, r0
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fb8c 	bl	80078dc <__pow5mult>
 80071c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071c6:	4606      	mov	r6, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	dc3e      	bgt.n	800724a <_dtoa_r+0x81a>
 80071cc:	9b02      	ldr	r3, [sp, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d137      	bne.n	8007242 <_dtoa_r+0x812>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d134      	bne.n	8007246 <_dtoa_r+0x816>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071e2:	0d1b      	lsrs	r3, r3, #20
 80071e4:	051b      	lsls	r3, r3, #20
 80071e6:	b12b      	cbz	r3, 80071f4 <_dtoa_r+0x7c4>
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	f109 0901 	add.w	r9, r9, #1
 80071ee:	3301      	adds	r3, #1
 80071f0:	9307      	str	r3, [sp, #28]
 80071f2:	2301      	movs	r3, #1
 80071f4:	9308      	str	r3, [sp, #32]
 80071f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d128      	bne.n	800724e <_dtoa_r+0x81e>
 80071fc:	2001      	movs	r0, #1
 80071fe:	e02e      	b.n	800725e <_dtoa_r+0x82e>
 8007200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007202:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007206:	e796      	b.n	8007136 <_dtoa_r+0x706>
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	f108 36ff 	add.w	r6, r8, #4294967295
 800720e:	42b3      	cmp	r3, r6
 8007210:	bfb7      	itett	lt
 8007212:	9b08      	ldrlt	r3, [sp, #32]
 8007214:	1b9e      	subge	r6, r3, r6
 8007216:	1af2      	sublt	r2, r6, r3
 8007218:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800721a:	bfbf      	itttt	lt
 800721c:	9608      	strlt	r6, [sp, #32]
 800721e:	189b      	addlt	r3, r3, r2
 8007220:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007222:	2600      	movlt	r6, #0
 8007224:	f1b8 0f00 	cmp.w	r8, #0
 8007228:	bfb9      	ittee	lt
 800722a:	eba9 0508 	sublt.w	r5, r9, r8
 800722e:	2300      	movlt	r3, #0
 8007230:	464d      	movge	r5, r9
 8007232:	4643      	movge	r3, r8
 8007234:	e781      	b.n	800713a <_dtoa_r+0x70a>
 8007236:	9e08      	ldr	r6, [sp, #32]
 8007238:	464d      	mov	r5, r9
 800723a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800723c:	e786      	b.n	800714c <_dtoa_r+0x71c>
 800723e:	9a08      	ldr	r2, [sp, #32]
 8007240:	e7ad      	b.n	800719e <_dtoa_r+0x76e>
 8007242:	2300      	movs	r3, #0
 8007244:	e7d6      	b.n	80071f4 <_dtoa_r+0x7c4>
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	e7d4      	b.n	80071f4 <_dtoa_r+0x7c4>
 800724a:	2300      	movs	r3, #0
 800724c:	9308      	str	r3, [sp, #32]
 800724e:	6933      	ldr	r3, [r6, #16]
 8007250:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	f000 fa54 	bl	8007702 <__hi0bits>
 800725a:	f1c0 0020 	rsb	r0, r0, #32
 800725e:	9b07      	ldr	r3, [sp, #28]
 8007260:	4418      	add	r0, r3
 8007262:	f010 001f 	ands.w	r0, r0, #31
 8007266:	d047      	beq.n	80072f8 <_dtoa_r+0x8c8>
 8007268:	f1c0 0320 	rsb	r3, r0, #32
 800726c:	2b04      	cmp	r3, #4
 800726e:	dd3b      	ble.n	80072e8 <_dtoa_r+0x8b8>
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	f1c0 001c 	rsb	r0, r0, #28
 8007276:	4481      	add	r9, r0
 8007278:	4405      	add	r5, r0
 800727a:	4403      	add	r3, r0
 800727c:	9307      	str	r3, [sp, #28]
 800727e:	f1b9 0f00 	cmp.w	r9, #0
 8007282:	dd05      	ble.n	8007290 <_dtoa_r+0x860>
 8007284:	4659      	mov	r1, fp
 8007286:	464a      	mov	r2, r9
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fb75 	bl	8007978 <__lshift>
 800728e:	4683      	mov	fp, r0
 8007290:	9b07      	ldr	r3, [sp, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd05      	ble.n	80072a2 <_dtoa_r+0x872>
 8007296:	4631      	mov	r1, r6
 8007298:	461a      	mov	r2, r3
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fb6c 	bl	8007978 <__lshift>
 80072a0:	4606      	mov	r6, r0
 80072a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a4:	b353      	cbz	r3, 80072fc <_dtoa_r+0x8cc>
 80072a6:	4631      	mov	r1, r6
 80072a8:	4658      	mov	r0, fp
 80072aa:	f000 fbb9 	bl	8007a20 <__mcmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	da24      	bge.n	80072fc <_dtoa_r+0x8cc>
 80072b2:	2300      	movs	r3, #0
 80072b4:	4659      	mov	r1, fp
 80072b6:	220a      	movs	r2, #10
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f9e7 	bl	800768c <__multadd>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c4:	4683      	mov	fp, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 8144 	beq.w	8007554 <_dtoa_r+0xb24>
 80072cc:	2300      	movs	r3, #0
 80072ce:	4639      	mov	r1, r7
 80072d0:	220a      	movs	r2, #10
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f9da 	bl	800768c <__multadd>
 80072d8:	9b04      	ldr	r3, [sp, #16]
 80072da:	4607      	mov	r7, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dc4d      	bgt.n	800737c <_dtoa_r+0x94c>
 80072e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	dd4a      	ble.n	800737c <_dtoa_r+0x94c>
 80072e6:	e011      	b.n	800730c <_dtoa_r+0x8dc>
 80072e8:	d0c9      	beq.n	800727e <_dtoa_r+0x84e>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	331c      	adds	r3, #28
 80072ee:	441a      	add	r2, r3
 80072f0:	4499      	add	r9, r3
 80072f2:	441d      	add	r5, r3
 80072f4:	4613      	mov	r3, r2
 80072f6:	e7c1      	b.n	800727c <_dtoa_r+0x84c>
 80072f8:	4603      	mov	r3, r0
 80072fa:	e7f6      	b.n	80072ea <_dtoa_r+0x8ba>
 80072fc:	f1b8 0f00 	cmp.w	r8, #0
 8007300:	dc36      	bgt.n	8007370 <_dtoa_r+0x940>
 8007302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007304:	2b02      	cmp	r3, #2
 8007306:	dd33      	ble.n	8007370 <_dtoa_r+0x940>
 8007308:	f8cd 8010 	str.w	r8, [sp, #16]
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	b963      	cbnz	r3, 800732a <_dtoa_r+0x8fa>
 8007310:	4631      	mov	r1, r6
 8007312:	2205      	movs	r2, #5
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f9b9 	bl	800768c <__multadd>
 800731a:	4601      	mov	r1, r0
 800731c:	4606      	mov	r6, r0
 800731e:	4658      	mov	r0, fp
 8007320:	f000 fb7e 	bl	8007a20 <__mcmp>
 8007324:	2800      	cmp	r0, #0
 8007326:	f73f add3 	bgt.w	8006ed0 <_dtoa_r+0x4a0>
 800732a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800732c:	9d06      	ldr	r5, [sp, #24]
 800732e:	ea6f 0a03 	mvn.w	sl, r3
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	4631      	mov	r1, r6
 8007338:	4620      	mov	r0, r4
 800733a:	f000 f990 	bl	800765e <_Bfree>
 800733e:	2f00      	cmp	r7, #0
 8007340:	f43f aebd 	beq.w	80070be <_dtoa_r+0x68e>
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	d005      	beq.n	8007356 <_dtoa_r+0x926>
 800734a:	45b9      	cmp	r9, r7
 800734c:	d003      	beq.n	8007356 <_dtoa_r+0x926>
 800734e:	4649      	mov	r1, r9
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f984 	bl	800765e <_Bfree>
 8007356:	4639      	mov	r1, r7
 8007358:	4620      	mov	r0, r4
 800735a:	f000 f980 	bl	800765e <_Bfree>
 800735e:	e6ae      	b.n	80070be <_dtoa_r+0x68e>
 8007360:	2600      	movs	r6, #0
 8007362:	4637      	mov	r7, r6
 8007364:	e7e1      	b.n	800732a <_dtoa_r+0x8fa>
 8007366:	46ba      	mov	sl, r7
 8007368:	4637      	mov	r7, r6
 800736a:	e5b1      	b.n	8006ed0 <_dtoa_r+0x4a0>
 800736c:	40240000 	.word	0x40240000
 8007370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007372:	f8cd 8010 	str.w	r8, [sp, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80f3 	beq.w	8007562 <_dtoa_r+0xb32>
 800737c:	2d00      	cmp	r5, #0
 800737e:	dd05      	ble.n	800738c <_dtoa_r+0x95c>
 8007380:	4639      	mov	r1, r7
 8007382:	462a      	mov	r2, r5
 8007384:	4620      	mov	r0, r4
 8007386:	f000 faf7 	bl	8007978 <__lshift>
 800738a:	4607      	mov	r7, r0
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04c      	beq.n	800742c <_dtoa_r+0x9fc>
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4620      	mov	r0, r4
 8007396:	f000 f92e 	bl	80075f6 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	f107 010c 	add.w	r1, r7, #12
 80073a2:	3202      	adds	r2, #2
 80073a4:	0092      	lsls	r2, r2, #2
 80073a6:	300c      	adds	r0, #12
 80073a8:	f000 f91a 	bl	80075e0 <memcpy>
 80073ac:	2201      	movs	r2, #1
 80073ae:	4629      	mov	r1, r5
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fae1 	bl	8007978 <__lshift>
 80073b6:	46b9      	mov	r9, r7
 80073b8:	4607      	mov	r7, r0
 80073ba:	9b06      	ldr	r3, [sp, #24]
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	9308      	str	r3, [sp, #32]
 80073c6:	4631      	mov	r1, r6
 80073c8:	4658      	mov	r0, fp
 80073ca:	f7ff faa1 	bl	8006910 <quorem>
 80073ce:	4649      	mov	r1, r9
 80073d0:	4605      	mov	r5, r0
 80073d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 fb22 	bl	8007a20 <__mcmp>
 80073dc:	463a      	mov	r2, r7
 80073de:	9002      	str	r0, [sp, #8]
 80073e0:	4631      	mov	r1, r6
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fb36 	bl	8007a54 <__mdiff>
 80073e8:	68c3      	ldr	r3, [r0, #12]
 80073ea:	4602      	mov	r2, r0
 80073ec:	bb03      	cbnz	r3, 8007430 <_dtoa_r+0xa00>
 80073ee:	4601      	mov	r1, r0
 80073f0:	9009      	str	r0, [sp, #36]	; 0x24
 80073f2:	4658      	mov	r0, fp
 80073f4:	f000 fb14 	bl	8007a20 <__mcmp>
 80073f8:	4603      	mov	r3, r0
 80073fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073fc:	4611      	mov	r1, r2
 80073fe:	4620      	mov	r0, r4
 8007400:	9309      	str	r3, [sp, #36]	; 0x24
 8007402:	f000 f92c 	bl	800765e <_Bfree>
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	b9a3      	cbnz	r3, 8007434 <_dtoa_r+0xa04>
 800740a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800740c:	b992      	cbnz	r2, 8007434 <_dtoa_r+0xa04>
 800740e:	9a08      	ldr	r2, [sp, #32]
 8007410:	b982      	cbnz	r2, 8007434 <_dtoa_r+0xa04>
 8007412:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007416:	d029      	beq.n	800746c <_dtoa_r+0xa3c>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	dd01      	ble.n	8007422 <_dtoa_r+0x9f2>
 800741e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007422:	9b07      	ldr	r3, [sp, #28]
 8007424:	1c5d      	adds	r5, r3, #1
 8007426:	f883 8000 	strb.w	r8, [r3]
 800742a:	e784      	b.n	8007336 <_dtoa_r+0x906>
 800742c:	4638      	mov	r0, r7
 800742e:	e7c2      	b.n	80073b6 <_dtoa_r+0x986>
 8007430:	2301      	movs	r3, #1
 8007432:	e7e3      	b.n	80073fc <_dtoa_r+0x9cc>
 8007434:	9a02      	ldr	r2, [sp, #8]
 8007436:	2a00      	cmp	r2, #0
 8007438:	db04      	blt.n	8007444 <_dtoa_r+0xa14>
 800743a:	d123      	bne.n	8007484 <_dtoa_r+0xa54>
 800743c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800743e:	bb0a      	cbnz	r2, 8007484 <_dtoa_r+0xa54>
 8007440:	9a08      	ldr	r2, [sp, #32]
 8007442:	b9fa      	cbnz	r2, 8007484 <_dtoa_r+0xa54>
 8007444:	2b00      	cmp	r3, #0
 8007446:	ddec      	ble.n	8007422 <_dtoa_r+0x9f2>
 8007448:	4659      	mov	r1, fp
 800744a:	2201      	movs	r2, #1
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fa93 	bl	8007978 <__lshift>
 8007452:	4631      	mov	r1, r6
 8007454:	4683      	mov	fp, r0
 8007456:	f000 fae3 	bl	8007a20 <__mcmp>
 800745a:	2800      	cmp	r0, #0
 800745c:	dc03      	bgt.n	8007466 <_dtoa_r+0xa36>
 800745e:	d1e0      	bne.n	8007422 <_dtoa_r+0x9f2>
 8007460:	f018 0f01 	tst.w	r8, #1
 8007464:	d0dd      	beq.n	8007422 <_dtoa_r+0x9f2>
 8007466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800746a:	d1d8      	bne.n	800741e <_dtoa_r+0x9ee>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	9a07      	ldr	r2, [sp, #28]
 8007470:	1c5d      	adds	r5, r3, #1
 8007472:	2339      	movs	r3, #57	; 0x39
 8007474:	7013      	strb	r3, [r2, #0]
 8007476:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800747a:	1e6a      	subs	r2, r5, #1
 800747c:	2b39      	cmp	r3, #57	; 0x39
 800747e:	d04d      	beq.n	800751c <_dtoa_r+0xaec>
 8007480:	3301      	adds	r3, #1
 8007482:	e052      	b.n	800752a <_dtoa_r+0xafa>
 8007484:	9a07      	ldr	r2, [sp, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f102 0501 	add.w	r5, r2, #1
 800748c:	dd06      	ble.n	800749c <_dtoa_r+0xa6c>
 800748e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007492:	d0eb      	beq.n	800746c <_dtoa_r+0xa3c>
 8007494:	f108 0801 	add.w	r8, r8, #1
 8007498:	9b07      	ldr	r3, [sp, #28]
 800749a:	e7c4      	b.n	8007426 <_dtoa_r+0x9f6>
 800749c:	9b06      	ldr	r3, [sp, #24]
 800749e:	9a04      	ldr	r2, [sp, #16]
 80074a0:	1aeb      	subs	r3, r5, r3
 80074a2:	4293      	cmp	r3, r2
 80074a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80074a8:	d021      	beq.n	80074ee <_dtoa_r+0xabe>
 80074aa:	4659      	mov	r1, fp
 80074ac:	2300      	movs	r3, #0
 80074ae:	220a      	movs	r2, #10
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f8eb 	bl	800768c <__multadd>
 80074b6:	45b9      	cmp	r9, r7
 80074b8:	4683      	mov	fp, r0
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f04f 020a 	mov.w	r2, #10
 80074c2:	4649      	mov	r1, r9
 80074c4:	4620      	mov	r0, r4
 80074c6:	d105      	bne.n	80074d4 <_dtoa_r+0xaa4>
 80074c8:	f000 f8e0 	bl	800768c <__multadd>
 80074cc:	4681      	mov	r9, r0
 80074ce:	4607      	mov	r7, r0
 80074d0:	9507      	str	r5, [sp, #28]
 80074d2:	e778      	b.n	80073c6 <_dtoa_r+0x996>
 80074d4:	f000 f8da 	bl	800768c <__multadd>
 80074d8:	4639      	mov	r1, r7
 80074da:	4681      	mov	r9, r0
 80074dc:	2300      	movs	r3, #0
 80074de:	220a      	movs	r2, #10
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 f8d3 	bl	800768c <__multadd>
 80074e6:	4607      	mov	r7, r0
 80074e8:	e7f2      	b.n	80074d0 <_dtoa_r+0xaa0>
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	4659      	mov	r1, fp
 80074f0:	2201      	movs	r2, #1
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fa40 	bl	8007978 <__lshift>
 80074f8:	4631      	mov	r1, r6
 80074fa:	4683      	mov	fp, r0
 80074fc:	f000 fa90 	bl	8007a20 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dcb8      	bgt.n	8007476 <_dtoa_r+0xa46>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xadc>
 8007506:	f018 0f01 	tst.w	r8, #1
 800750a:	d1b4      	bne.n	8007476 <_dtoa_r+0xa46>
 800750c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007510:	1e6a      	subs	r2, r5, #1
 8007512:	2b30      	cmp	r3, #48	; 0x30
 8007514:	f47f af0f 	bne.w	8007336 <_dtoa_r+0x906>
 8007518:	4615      	mov	r5, r2
 800751a:	e7f7      	b.n	800750c <_dtoa_r+0xadc>
 800751c:	9b06      	ldr	r3, [sp, #24]
 800751e:	4293      	cmp	r3, r2
 8007520:	d105      	bne.n	800752e <_dtoa_r+0xafe>
 8007522:	2331      	movs	r3, #49	; 0x31
 8007524:	9a06      	ldr	r2, [sp, #24]
 8007526:	f10a 0a01 	add.w	sl, sl, #1
 800752a:	7013      	strb	r3, [r2, #0]
 800752c:	e703      	b.n	8007336 <_dtoa_r+0x906>
 800752e:	4615      	mov	r5, r2
 8007530:	e7a1      	b.n	8007476 <_dtoa_r+0xa46>
 8007532:	4b17      	ldr	r3, [pc, #92]	; (8007590 <_dtoa_r+0xb60>)
 8007534:	f7ff bae1 	b.w	8006afa <_dtoa_r+0xca>
 8007538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f aabb 	bne.w	8006ab6 <_dtoa_r+0x86>
 8007540:	4b14      	ldr	r3, [pc, #80]	; (8007594 <_dtoa_r+0xb64>)
 8007542:	f7ff bada 	b.w	8006afa <_dtoa_r+0xca>
 8007546:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007548:	2b01      	cmp	r3, #1
 800754a:	f77f ae3f 	ble.w	80071cc <_dtoa_r+0x79c>
 800754e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	e653      	b.n	80071fc <_dtoa_r+0x7cc>
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	dc03      	bgt.n	8007562 <_dtoa_r+0xb32>
 800755a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800755c:	2b02      	cmp	r3, #2
 800755e:	f73f aed5 	bgt.w	800730c <_dtoa_r+0x8dc>
 8007562:	9d06      	ldr	r5, [sp, #24]
 8007564:	4631      	mov	r1, r6
 8007566:	4658      	mov	r0, fp
 8007568:	f7ff f9d2 	bl	8006910 <quorem>
 800756c:	9b06      	ldr	r3, [sp, #24]
 800756e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007572:	f805 8b01 	strb.w	r8, [r5], #1
 8007576:	9a04      	ldr	r2, [sp, #16]
 8007578:	1aeb      	subs	r3, r5, r3
 800757a:	429a      	cmp	r2, r3
 800757c:	ddb5      	ble.n	80074ea <_dtoa_r+0xaba>
 800757e:	4659      	mov	r1, fp
 8007580:	2300      	movs	r3, #0
 8007582:	220a      	movs	r2, #10
 8007584:	4620      	mov	r0, r4
 8007586:	f000 f881 	bl	800768c <__multadd>
 800758a:	4683      	mov	fp, r0
 800758c:	e7ea      	b.n	8007564 <_dtoa_r+0xb34>
 800758e:	bf00      	nop
 8007590:	080088fc 	.word	0x080088fc
 8007594:	08008920 	.word	0x08008920

08007598 <_localeconv_r>:
 8007598:	4b04      	ldr	r3, [pc, #16]	; (80075ac <_localeconv_r+0x14>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6a18      	ldr	r0, [r3, #32]
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <_localeconv_r+0x18>)
 80075a0:	2800      	cmp	r0, #0
 80075a2:	bf08      	it	eq
 80075a4:	4618      	moveq	r0, r3
 80075a6:	30f0      	adds	r0, #240	; 0xf0
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000008 	.word	0x20000008
 80075b0:	2000006c 	.word	0x2000006c

080075b4 <malloc>:
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <malloc+0xc>)
 80075b6:	4601      	mov	r1, r0
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f000 bb53 	b.w	8007c64 <_malloc_r>
 80075be:	bf00      	nop
 80075c0:	20000008 	.word	0x20000008

080075c4 <memchr>:
 80075c4:	b510      	push	{r4, lr}
 80075c6:	b2c9      	uxtb	r1, r1
 80075c8:	4402      	add	r2, r0
 80075ca:	4290      	cmp	r0, r2
 80075cc:	4603      	mov	r3, r0
 80075ce:	d101      	bne.n	80075d4 <memchr+0x10>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e003      	b.n	80075dc <memchr+0x18>
 80075d4:	781c      	ldrb	r4, [r3, #0]
 80075d6:	3001      	adds	r0, #1
 80075d8:	428c      	cmp	r4, r1
 80075da:	d1f6      	bne.n	80075ca <memchr+0x6>
 80075dc:	4618      	mov	r0, r3
 80075de:	bd10      	pop	{r4, pc}

080075e0 <memcpy>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	1e43      	subs	r3, r0, #1
 80075e4:	440a      	add	r2, r1
 80075e6:	4291      	cmp	r1, r2
 80075e8:	d100      	bne.n	80075ec <memcpy+0xc>
 80075ea:	bd10      	pop	{r4, pc}
 80075ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f4:	e7f7      	b.n	80075e6 <memcpy+0x6>

080075f6 <_Balloc>:
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075fa:	4604      	mov	r4, r0
 80075fc:	460e      	mov	r6, r1
 80075fe:	b93d      	cbnz	r5, 8007610 <_Balloc+0x1a>
 8007600:	2010      	movs	r0, #16
 8007602:	f7ff ffd7 	bl	80075b4 <malloc>
 8007606:	6260      	str	r0, [r4, #36]	; 0x24
 8007608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800760c:	6005      	str	r5, [r0, #0]
 800760e:	60c5      	str	r5, [r0, #12]
 8007610:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007612:	68eb      	ldr	r3, [r5, #12]
 8007614:	b183      	cbz	r3, 8007638 <_Balloc+0x42>
 8007616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800761e:	b9b8      	cbnz	r0, 8007650 <_Balloc+0x5a>
 8007620:	2101      	movs	r1, #1
 8007622:	fa01 f506 	lsl.w	r5, r1, r6
 8007626:	1d6a      	adds	r2, r5, #5
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fabf 	bl	8007bae <_calloc_r>
 8007630:	b160      	cbz	r0, 800764c <_Balloc+0x56>
 8007632:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007636:	e00e      	b.n	8007656 <_Balloc+0x60>
 8007638:	2221      	movs	r2, #33	; 0x21
 800763a:	2104      	movs	r1, #4
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fab6 	bl	8007bae <_calloc_r>
 8007642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007644:	60e8      	str	r0, [r5, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <_Balloc+0x20>
 800764c:	2000      	movs	r0, #0
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	6802      	ldr	r2, [r0, #0]
 8007652:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007656:	2300      	movs	r3, #0
 8007658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800765c:	e7f7      	b.n	800764e <_Balloc+0x58>

0800765e <_Bfree>:
 800765e:	b570      	push	{r4, r5, r6, lr}
 8007660:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007662:	4606      	mov	r6, r0
 8007664:	460d      	mov	r5, r1
 8007666:	b93c      	cbnz	r4, 8007678 <_Bfree+0x1a>
 8007668:	2010      	movs	r0, #16
 800766a:	f7ff ffa3 	bl	80075b4 <malloc>
 800766e:	6270      	str	r0, [r6, #36]	; 0x24
 8007670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007674:	6004      	str	r4, [r0, #0]
 8007676:	60c4      	str	r4, [r0, #12]
 8007678:	b13d      	cbz	r5, 800768a <_Bfree+0x2c>
 800767a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800767c:	686a      	ldr	r2, [r5, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007684:	6029      	str	r1, [r5, #0]
 8007686:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800768a:	bd70      	pop	{r4, r5, r6, pc}

0800768c <__multadd>:
 800768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	461f      	mov	r7, r3
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	2300      	movs	r3, #0
 8007698:	690d      	ldr	r5, [r1, #16]
 800769a:	f101 0c14 	add.w	ip, r1, #20
 800769e:	f8dc 0000 	ldr.w	r0, [ip]
 80076a2:	3301      	adds	r3, #1
 80076a4:	b281      	uxth	r1, r0
 80076a6:	fb02 7101 	mla	r1, r2, r1, r7
 80076aa:	0c00      	lsrs	r0, r0, #16
 80076ac:	0c0f      	lsrs	r7, r1, #16
 80076ae:	fb02 7000 	mla	r0, r2, r0, r7
 80076b2:	b289      	uxth	r1, r1
 80076b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80076b8:	429d      	cmp	r5, r3
 80076ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80076be:	f84c 1b04 	str.w	r1, [ip], #4
 80076c2:	dcec      	bgt.n	800769e <__multadd+0x12>
 80076c4:	b1d7      	cbz	r7, 80076fc <__multadd+0x70>
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc12      	bgt.n	80076f2 <__multadd+0x66>
 80076cc:	6861      	ldr	r1, [r4, #4]
 80076ce:	4630      	mov	r0, r6
 80076d0:	3101      	adds	r1, #1
 80076d2:	f7ff ff90 	bl	80075f6 <_Balloc>
 80076d6:	4680      	mov	r8, r0
 80076d8:	6922      	ldr	r2, [r4, #16]
 80076da:	f104 010c 	add.w	r1, r4, #12
 80076de:	3202      	adds	r2, #2
 80076e0:	0092      	lsls	r2, r2, #2
 80076e2:	300c      	adds	r0, #12
 80076e4:	f7ff ff7c 	bl	80075e0 <memcpy>
 80076e8:	4621      	mov	r1, r4
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffb7 	bl	800765e <_Bfree>
 80076f0:	4644      	mov	r4, r8
 80076f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076f6:	3501      	adds	r5, #1
 80076f8:	615f      	str	r7, [r3, #20]
 80076fa:	6125      	str	r5, [r4, #16]
 80076fc:	4620      	mov	r0, r4
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007702 <__hi0bits>:
 8007702:	0c02      	lsrs	r2, r0, #16
 8007704:	0412      	lsls	r2, r2, #16
 8007706:	4603      	mov	r3, r0
 8007708:	b9b2      	cbnz	r2, 8007738 <__hi0bits+0x36>
 800770a:	0403      	lsls	r3, r0, #16
 800770c:	2010      	movs	r0, #16
 800770e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007712:	bf04      	itt	eq
 8007714:	021b      	lsleq	r3, r3, #8
 8007716:	3008      	addeq	r0, #8
 8007718:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800771c:	bf04      	itt	eq
 800771e:	011b      	lsleq	r3, r3, #4
 8007720:	3004      	addeq	r0, #4
 8007722:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007726:	bf04      	itt	eq
 8007728:	009b      	lsleq	r3, r3, #2
 800772a:	3002      	addeq	r0, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	db06      	blt.n	800773e <__hi0bits+0x3c>
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	d503      	bpl.n	800773c <__hi0bits+0x3a>
 8007734:	3001      	adds	r0, #1
 8007736:	4770      	bx	lr
 8007738:	2000      	movs	r0, #0
 800773a:	e7e8      	b.n	800770e <__hi0bits+0xc>
 800773c:	2020      	movs	r0, #32
 800773e:	4770      	bx	lr

08007740 <__lo0bits>:
 8007740:	6803      	ldr	r3, [r0, #0]
 8007742:	4601      	mov	r1, r0
 8007744:	f013 0207 	ands.w	r2, r3, #7
 8007748:	d00b      	beq.n	8007762 <__lo0bits+0x22>
 800774a:	07da      	lsls	r2, r3, #31
 800774c:	d423      	bmi.n	8007796 <__lo0bits+0x56>
 800774e:	0798      	lsls	r0, r3, #30
 8007750:	bf49      	itett	mi
 8007752:	085b      	lsrmi	r3, r3, #1
 8007754:	089b      	lsrpl	r3, r3, #2
 8007756:	2001      	movmi	r0, #1
 8007758:	600b      	strmi	r3, [r1, #0]
 800775a:	bf5c      	itt	pl
 800775c:	600b      	strpl	r3, [r1, #0]
 800775e:	2002      	movpl	r0, #2
 8007760:	4770      	bx	lr
 8007762:	b298      	uxth	r0, r3
 8007764:	b9a8      	cbnz	r0, 8007792 <__lo0bits+0x52>
 8007766:	2010      	movs	r0, #16
 8007768:	0c1b      	lsrs	r3, r3, #16
 800776a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800776e:	bf04      	itt	eq
 8007770:	0a1b      	lsreq	r3, r3, #8
 8007772:	3008      	addeq	r0, #8
 8007774:	071a      	lsls	r2, r3, #28
 8007776:	bf04      	itt	eq
 8007778:	091b      	lsreq	r3, r3, #4
 800777a:	3004      	addeq	r0, #4
 800777c:	079a      	lsls	r2, r3, #30
 800777e:	bf04      	itt	eq
 8007780:	089b      	lsreq	r3, r3, #2
 8007782:	3002      	addeq	r0, #2
 8007784:	07da      	lsls	r2, r3, #31
 8007786:	d402      	bmi.n	800778e <__lo0bits+0x4e>
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	d006      	beq.n	800779a <__lo0bits+0x5a>
 800778c:	3001      	adds	r0, #1
 800778e:	600b      	str	r3, [r1, #0]
 8007790:	4770      	bx	lr
 8007792:	4610      	mov	r0, r2
 8007794:	e7e9      	b.n	800776a <__lo0bits+0x2a>
 8007796:	2000      	movs	r0, #0
 8007798:	4770      	bx	lr
 800779a:	2020      	movs	r0, #32
 800779c:	4770      	bx	lr

0800779e <__i2b>:
 800779e:	b510      	push	{r4, lr}
 80077a0:	460c      	mov	r4, r1
 80077a2:	2101      	movs	r1, #1
 80077a4:	f7ff ff27 	bl	80075f6 <_Balloc>
 80077a8:	2201      	movs	r2, #1
 80077aa:	6144      	str	r4, [r0, #20]
 80077ac:	6102      	str	r2, [r0, #16]
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <__multiply>:
 80077b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4614      	mov	r4, r2
 80077b6:	690a      	ldr	r2, [r1, #16]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	4688      	mov	r8, r1
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfbe      	ittt	lt
 80077c0:	460b      	movlt	r3, r1
 80077c2:	46a0      	movlt	r8, r4
 80077c4:	461c      	movlt	r4, r3
 80077c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077d6:	eb07 0609 	add.w	r6, r7, r9
 80077da:	42b3      	cmp	r3, r6
 80077dc:	bfb8      	it	lt
 80077de:	3101      	addlt	r1, #1
 80077e0:	f7ff ff09 	bl	80075f6 <_Balloc>
 80077e4:	f100 0514 	add.w	r5, r0, #20
 80077e8:	462b      	mov	r3, r5
 80077ea:	2200      	movs	r2, #0
 80077ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80077f0:	4573      	cmp	r3, lr
 80077f2:	d316      	bcc.n	8007822 <__multiply+0x72>
 80077f4:	f104 0214 	add.w	r2, r4, #20
 80077f8:	f108 0114 	add.w	r1, r8, #20
 80077fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007800:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	9b00      	ldr	r3, [sp, #0]
 8007808:	9201      	str	r2, [sp, #4]
 800780a:	4293      	cmp	r3, r2
 800780c:	d80c      	bhi.n	8007828 <__multiply+0x78>
 800780e:	2e00      	cmp	r6, #0
 8007810:	dd03      	ble.n	800781a <__multiply+0x6a>
 8007812:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007816:	2b00      	cmp	r3, #0
 8007818:	d05d      	beq.n	80078d6 <__multiply+0x126>
 800781a:	6106      	str	r6, [r0, #16]
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	f843 2b04 	str.w	r2, [r3], #4
 8007826:	e7e3      	b.n	80077f0 <__multiply+0x40>
 8007828:	f8b2 b000 	ldrh.w	fp, [r2]
 800782c:	f1bb 0f00 	cmp.w	fp, #0
 8007830:	d023      	beq.n	800787a <__multiply+0xca>
 8007832:	4689      	mov	r9, r1
 8007834:	46ac      	mov	ip, r5
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	f859 4b04 	ldr.w	r4, [r9], #4
 800783e:	f8dc a000 	ldr.w	sl, [ip]
 8007842:	b2a3      	uxth	r3, r4
 8007844:	fa1f fa8a 	uxth.w	sl, sl
 8007848:	fb0b a303 	mla	r3, fp, r3, sl
 800784c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007850:	f8dc 4000 	ldr.w	r4, [ip]
 8007854:	4443      	add	r3, r8
 8007856:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800785a:	fb0b 840a 	mla	r4, fp, sl, r8
 800785e:	46e2      	mov	sl, ip
 8007860:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800786a:	454f      	cmp	r7, r9
 800786c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007870:	f84a 3b04 	str.w	r3, [sl], #4
 8007874:	d82b      	bhi.n	80078ce <__multiply+0x11e>
 8007876:	f8cc 8004 	str.w	r8, [ip, #4]
 800787a:	9b01      	ldr	r3, [sp, #4]
 800787c:	3204      	adds	r2, #4
 800787e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007882:	f1ba 0f00 	cmp.w	sl, #0
 8007886:	d020      	beq.n	80078ca <__multiply+0x11a>
 8007888:	4689      	mov	r9, r1
 800788a:	46a8      	mov	r8, r5
 800788c:	f04f 0b00 	mov.w	fp, #0
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	f8b9 c000 	ldrh.w	ip, [r9]
 8007896:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800789a:	b29b      	uxth	r3, r3
 800789c:	fb0a 440c 	mla	r4, sl, ip, r4
 80078a0:	46c4      	mov	ip, r8
 80078a2:	445c      	add	r4, fp
 80078a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80078a8:	f84c 3b04 	str.w	r3, [ip], #4
 80078ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80078b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	fb0a b303 	mla	r3, sl, r3, fp
 80078ba:	454f      	cmp	r7, r9
 80078bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80078c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80078c4:	d805      	bhi.n	80078d2 <__multiply+0x122>
 80078c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80078ca:	3504      	adds	r5, #4
 80078cc:	e79b      	b.n	8007806 <__multiply+0x56>
 80078ce:	46d4      	mov	ip, sl
 80078d0:	e7b3      	b.n	800783a <__multiply+0x8a>
 80078d2:	46e0      	mov	r8, ip
 80078d4:	e7dd      	b.n	8007892 <__multiply+0xe2>
 80078d6:	3e01      	subs	r6, #1
 80078d8:	e799      	b.n	800780e <__multiply+0x5e>
	...

080078dc <__pow5mult>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4615      	mov	r5, r2
 80078e2:	f012 0203 	ands.w	r2, r2, #3
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	d007      	beq.n	80078fc <__pow5mult+0x20>
 80078ec:	4c21      	ldr	r4, [pc, #132]	; (8007974 <__pow5mult+0x98>)
 80078ee:	3a01      	subs	r2, #1
 80078f0:	2300      	movs	r3, #0
 80078f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078f6:	f7ff fec9 	bl	800768c <__multadd>
 80078fa:	4607      	mov	r7, r0
 80078fc:	10ad      	asrs	r5, r5, #2
 80078fe:	d035      	beq.n	800796c <__pow5mult+0x90>
 8007900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007902:	b93c      	cbnz	r4, 8007914 <__pow5mult+0x38>
 8007904:	2010      	movs	r0, #16
 8007906:	f7ff fe55 	bl	80075b4 <malloc>
 800790a:	6270      	str	r0, [r6, #36]	; 0x24
 800790c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007910:	6004      	str	r4, [r0, #0]
 8007912:	60c4      	str	r4, [r0, #12]
 8007914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800791c:	b94c      	cbnz	r4, 8007932 <__pow5mult+0x56>
 800791e:	f240 2171 	movw	r1, #625	; 0x271
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff3b 	bl	800779e <__i2b>
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	07eb      	lsls	r3, r5, #31
 8007938:	d50a      	bpl.n	8007950 <__pow5mult+0x74>
 800793a:	4639      	mov	r1, r7
 800793c:	4622      	mov	r2, r4
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff36 	bl	80077b0 <__multiply>
 8007944:	4681      	mov	r9, r0
 8007946:	4639      	mov	r1, r7
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff fe88 	bl	800765e <_Bfree>
 800794e:	464f      	mov	r7, r9
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	d00b      	beq.n	800796c <__pow5mult+0x90>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	b938      	cbnz	r0, 8007968 <__pow5mult+0x8c>
 8007958:	4622      	mov	r2, r4
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ff27 	bl	80077b0 <__multiply>
 8007962:	6020      	str	r0, [r4, #0]
 8007964:	f8c0 8000 	str.w	r8, [r0]
 8007968:	4604      	mov	r4, r0
 800796a:	e7e4      	b.n	8007936 <__pow5mult+0x5a>
 800796c:	4638      	mov	r0, r7
 800796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007972:	bf00      	nop
 8007974:	08008a20 	.word	0x08008a20

08007978 <__lshift>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	4607      	mov	r7, r0
 8007980:	4616      	mov	r6, r2
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007988:	eb0a 0903 	add.w	r9, sl, r3
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	f109 0501 	add.w	r5, r9, #1
 8007994:	42ab      	cmp	r3, r5
 8007996:	db32      	blt.n	80079fe <__lshift+0x86>
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff fe2c 	bl	80075f6 <_Balloc>
 800799e:	2300      	movs	r3, #0
 80079a0:	4680      	mov	r8, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	f100 0114 	add.w	r1, r0, #20
 80079a8:	4553      	cmp	r3, sl
 80079aa:	db2b      	blt.n	8007a04 <__lshift+0x8c>
 80079ac:	6920      	ldr	r0, [r4, #16]
 80079ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b2:	f104 0314 	add.w	r3, r4, #20
 80079b6:	f016 021f 	ands.w	r2, r6, #31
 80079ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079c2:	d025      	beq.n	8007a10 <__lshift+0x98>
 80079c4:	2000      	movs	r0, #0
 80079c6:	f1c2 0e20 	rsb	lr, r2, #32
 80079ca:	468a      	mov	sl, r1
 80079cc:	681e      	ldr	r6, [r3, #0]
 80079ce:	4096      	lsls	r6, r2
 80079d0:	4330      	orrs	r0, r6
 80079d2:	f84a 0b04 	str.w	r0, [sl], #4
 80079d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80079da:	459c      	cmp	ip, r3
 80079dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80079e0:	d814      	bhi.n	8007a0c <__lshift+0x94>
 80079e2:	6048      	str	r0, [r1, #4]
 80079e4:	b108      	cbz	r0, 80079ea <__lshift+0x72>
 80079e6:	f109 0502 	add.w	r5, r9, #2
 80079ea:	3d01      	subs	r5, #1
 80079ec:	4638      	mov	r0, r7
 80079ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80079f2:	4621      	mov	r1, r4
 80079f4:	f7ff fe33 	bl	800765e <_Bfree>
 80079f8:	4640      	mov	r0, r8
 80079fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fe:	3101      	adds	r1, #1
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	e7c7      	b.n	8007994 <__lshift+0x1c>
 8007a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	e7cd      	b.n	80079a8 <__lshift+0x30>
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	e7dc      	b.n	80079ca <__lshift+0x52>
 8007a10:	3904      	subs	r1, #4
 8007a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a16:	459c      	cmp	ip, r3
 8007a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a1c:	d8f9      	bhi.n	8007a12 <__lshift+0x9a>
 8007a1e:	e7e4      	b.n	80079ea <__lshift+0x72>

08007a20 <__mcmp>:
 8007a20:	6903      	ldr	r3, [r0, #16]
 8007a22:	690a      	ldr	r2, [r1, #16]
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	d10c      	bne.n	8007a44 <__mcmp+0x24>
 8007a2a:	0092      	lsls	r2, r2, #2
 8007a2c:	3014      	adds	r0, #20
 8007a2e:	3114      	adds	r1, #20
 8007a30:	1884      	adds	r4, r0, r2
 8007a32:	4411      	add	r1, r2
 8007a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a3c:	4295      	cmp	r5, r2
 8007a3e:	d003      	beq.n	8007a48 <__mcmp+0x28>
 8007a40:	d305      	bcc.n	8007a4e <__mcmp+0x2e>
 8007a42:	2301      	movs	r3, #1
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd30      	pop	{r4, r5, pc}
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d3f3      	bcc.n	8007a34 <__mcmp+0x14>
 8007a4c:	e7fa      	b.n	8007a44 <__mcmp+0x24>
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a52:	e7f7      	b.n	8007a44 <__mcmp+0x24>

08007a54 <__mdiff>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	460d      	mov	r5, r1
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4628      	mov	r0, r5
 8007a60:	4614      	mov	r4, r2
 8007a62:	f7ff ffdd 	bl	8007a20 <__mcmp>
 8007a66:	1e06      	subs	r6, r0, #0
 8007a68:	d108      	bne.n	8007a7c <__mdiff+0x28>
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fdc2 	bl	80075f6 <_Balloc>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7c:	bfa4      	itt	ge
 8007a7e:	4623      	movge	r3, r4
 8007a80:	462c      	movge	r4, r5
 8007a82:	4638      	mov	r0, r7
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	bfa6      	itte	ge
 8007a88:	461d      	movge	r5, r3
 8007a8a:	2600      	movge	r6, #0
 8007a8c:	2601      	movlt	r6, #1
 8007a8e:	f7ff fdb2 	bl	80075f6 <_Balloc>
 8007a92:	f04f 0e00 	mov.w	lr, #0
 8007a96:	60c6      	str	r6, [r0, #12]
 8007a98:	692b      	ldr	r3, [r5, #16]
 8007a9a:	6926      	ldr	r6, [r4, #16]
 8007a9c:	f104 0214 	add.w	r2, r4, #20
 8007aa0:	f105 0914 	add.w	r9, r5, #20
 8007aa4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007aa8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007aac:	f100 0114 	add.w	r1, r0, #20
 8007ab0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ab4:	f859 5b04 	ldr.w	r5, [r9], #4
 8007ab8:	fa1f f38a 	uxth.w	r3, sl
 8007abc:	4473      	add	r3, lr
 8007abe:	b2ac      	uxth	r4, r5
 8007ac0:	1b1b      	subs	r3, r3, r4
 8007ac2:	0c2c      	lsrs	r4, r5, #16
 8007ac4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007ac8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007ad2:	45c8      	cmp	r8, r9
 8007ad4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007ad8:	4694      	mov	ip, r2
 8007ada:	f841 4b04 	str.w	r4, [r1], #4
 8007ade:	d8e7      	bhi.n	8007ab0 <__mdiff+0x5c>
 8007ae0:	45bc      	cmp	ip, r7
 8007ae2:	d304      	bcc.n	8007aee <__mdiff+0x9a>
 8007ae4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ae8:	b183      	cbz	r3, 8007b0c <__mdiff+0xb8>
 8007aea:	6106      	str	r6, [r0, #16]
 8007aec:	e7c4      	b.n	8007a78 <__mdiff+0x24>
 8007aee:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007af2:	b2a2      	uxth	r2, r4
 8007af4:	4472      	add	r2, lr
 8007af6:	1413      	asrs	r3, r2, #16
 8007af8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007afc:	b292      	uxth	r2, r2
 8007afe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007b06:	f841 2b04 	str.w	r2, [r1], #4
 8007b0a:	e7e9      	b.n	8007ae0 <__mdiff+0x8c>
 8007b0c:	3e01      	subs	r6, #1
 8007b0e:	e7e9      	b.n	8007ae4 <__mdiff+0x90>

08007b10 <__d2b>:
 8007b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b14:	461c      	mov	r4, r3
 8007b16:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	f7ff fd6a 	bl	80075f6 <_Balloc>
 8007b22:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007b26:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	bb34      	cbnz	r4, 8007b7c <__d2b+0x6c>
 8007b2e:	9201      	str	r2, [sp, #4]
 8007b30:	f1b8 0200 	subs.w	r2, r8, #0
 8007b34:	d027      	beq.n	8007b86 <__d2b+0x76>
 8007b36:	a802      	add	r0, sp, #8
 8007b38:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007b3c:	f7ff fe00 	bl	8007740 <__lo0bits>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	b1f0      	cbz	r0, 8007b82 <__d2b+0x72>
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf14      	ite	ne
 8007b5c:	2102      	movne	r1, #2
 8007b5e:	2101      	moveq	r1, #1
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	6139      	str	r1, [r7, #16]
 8007b64:	b1c4      	cbz	r4, 8007b98 <__d2b+0x88>
 8007b66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b6a:	4404      	add	r4, r0
 8007b6c:	6034      	str	r4, [r6, #0]
 8007b6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b72:	6028      	str	r0, [r5, #0]
 8007b74:	4638      	mov	r0, r7
 8007b76:	b002      	add	sp, #8
 8007b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b80:	e7d5      	b.n	8007b2e <__d2b+0x1e>
 8007b82:	6179      	str	r1, [r7, #20]
 8007b84:	e7e7      	b.n	8007b56 <__d2b+0x46>
 8007b86:	a801      	add	r0, sp, #4
 8007b88:	f7ff fdda 	bl	8007740 <__lo0bits>
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	6139      	str	r1, [r7, #16]
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	3020      	adds	r0, #32
 8007b96:	e7e5      	b.n	8007b64 <__d2b+0x54>
 8007b98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ba0:	6030      	str	r0, [r6, #0]
 8007ba2:	6918      	ldr	r0, [r3, #16]
 8007ba4:	f7ff fdad 	bl	8007702 <__hi0bits>
 8007ba8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007bac:	e7e1      	b.n	8007b72 <__d2b+0x62>

08007bae <_calloc_r>:
 8007bae:	b538      	push	{r3, r4, r5, lr}
 8007bb0:	fb02 f401 	mul.w	r4, r2, r1
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f000 f855 	bl	8007c64 <_malloc_r>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b118      	cbz	r0, 8007bc6 <_calloc_r+0x18>
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	f7fe fa2d 	bl	8006020 <memset>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08007bcc <_free_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d043      	beq.n	8007c5c <_free_r+0x90>
 8007bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd8:	1f0c      	subs	r4, r1, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfb8      	it	lt
 8007bde:	18e4      	addlt	r4, r4, r3
 8007be0:	f000 fa27 	bl	8008032 <__malloc_lock>
 8007be4:	4a1e      	ldr	r2, [pc, #120]	; (8007c60 <_free_r+0x94>)
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	4610      	mov	r0, r2
 8007bea:	b933      	cbnz	r3, 8007bfa <_free_r+0x2e>
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6014      	str	r4, [r2, #0]
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf6:	f000 ba1d 	b.w	8008034 <__malloc_unlock>
 8007bfa:	42a3      	cmp	r3, r4
 8007bfc:	d90b      	bls.n	8007c16 <_free_r+0x4a>
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	1862      	adds	r2, r4, r1
 8007c02:	4293      	cmp	r3, r2
 8007c04:	bf01      	itttt	eq
 8007c06:	681a      	ldreq	r2, [r3, #0]
 8007c08:	685b      	ldreq	r3, [r3, #4]
 8007c0a:	1852      	addeq	r2, r2, r1
 8007c0c:	6022      	streq	r2, [r4, #0]
 8007c0e:	6063      	str	r3, [r4, #4]
 8007c10:	6004      	str	r4, [r0, #0]
 8007c12:	e7ed      	b.n	8007bf0 <_free_r+0x24>
 8007c14:	4613      	mov	r3, r2
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	b10a      	cbz	r2, 8007c1e <_free_r+0x52>
 8007c1a:	42a2      	cmp	r2, r4
 8007c1c:	d9fa      	bls.n	8007c14 <_free_r+0x48>
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	1858      	adds	r0, r3, r1
 8007c22:	42a0      	cmp	r0, r4
 8007c24:	d10b      	bne.n	8007c3e <_free_r+0x72>
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	4401      	add	r1, r0
 8007c2a:	1858      	adds	r0, r3, r1
 8007c2c:	4282      	cmp	r2, r0
 8007c2e:	6019      	str	r1, [r3, #0]
 8007c30:	d1de      	bne.n	8007bf0 <_free_r+0x24>
 8007c32:	6810      	ldr	r0, [r2, #0]
 8007c34:	6852      	ldr	r2, [r2, #4]
 8007c36:	4401      	add	r1, r0
 8007c38:	6019      	str	r1, [r3, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	e7d8      	b.n	8007bf0 <_free_r+0x24>
 8007c3e:	d902      	bls.n	8007c46 <_free_r+0x7a>
 8007c40:	230c      	movs	r3, #12
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	e7d4      	b.n	8007bf0 <_free_r+0x24>
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	1821      	adds	r1, r4, r0
 8007c4a:	428a      	cmp	r2, r1
 8007c4c:	bf01      	itttt	eq
 8007c4e:	6811      	ldreq	r1, [r2, #0]
 8007c50:	6852      	ldreq	r2, [r2, #4]
 8007c52:	1809      	addeq	r1, r1, r0
 8007c54:	6021      	streq	r1, [r4, #0]
 8007c56:	6062      	str	r2, [r4, #4]
 8007c58:	605c      	str	r4, [r3, #4]
 8007c5a:	e7c9      	b.n	8007bf0 <_free_r+0x24>
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000248 	.word	0x20000248

08007c64 <_malloc_r>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	1ccd      	adds	r5, r1, #3
 8007c68:	f025 0503 	bic.w	r5, r5, #3
 8007c6c:	3508      	adds	r5, #8
 8007c6e:	2d0c      	cmp	r5, #12
 8007c70:	bf38      	it	cc
 8007c72:	250c      	movcc	r5, #12
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	4606      	mov	r6, r0
 8007c78:	db01      	blt.n	8007c7e <_malloc_r+0x1a>
 8007c7a:	42a9      	cmp	r1, r5
 8007c7c:	d903      	bls.n	8007c86 <_malloc_r+0x22>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	2000      	movs	r0, #0
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
 8007c86:	f000 f9d4 	bl	8008032 <__malloc_lock>
 8007c8a:	4a21      	ldr	r2, [pc, #132]	; (8007d10 <_malloc_r+0xac>)
 8007c8c:	6814      	ldr	r4, [r2, #0]
 8007c8e:	4621      	mov	r1, r4
 8007c90:	b991      	cbnz	r1, 8007cb8 <_malloc_r+0x54>
 8007c92:	4c20      	ldr	r4, [pc, #128]	; (8007d14 <_malloc_r+0xb0>)
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	b91b      	cbnz	r3, 8007ca0 <_malloc_r+0x3c>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f000 f98f 	bl	8007fbc <_sbrk_r>
 8007c9e:	6020      	str	r0, [r4, #0]
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 f98a 	bl	8007fbc <_sbrk_r>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d124      	bne.n	8007cf6 <_malloc_r+0x92>
 8007cac:	230c      	movs	r3, #12
 8007cae:	4630      	mov	r0, r6
 8007cb0:	6033      	str	r3, [r6, #0]
 8007cb2:	f000 f9bf 	bl	8008034 <__malloc_unlock>
 8007cb6:	e7e4      	b.n	8007c82 <_malloc_r+0x1e>
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	1b5b      	subs	r3, r3, r5
 8007cbc:	d418      	bmi.n	8007cf0 <_malloc_r+0x8c>
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	d90f      	bls.n	8007ce2 <_malloc_r+0x7e>
 8007cc2:	600b      	str	r3, [r1, #0]
 8007cc4:	18cc      	adds	r4, r1, r3
 8007cc6:	50cd      	str	r5, [r1, r3]
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f000 f9b3 	bl	8008034 <__malloc_unlock>
 8007cce:	f104 000b 	add.w	r0, r4, #11
 8007cd2:	1d23      	adds	r3, r4, #4
 8007cd4:	f020 0007 	bic.w	r0, r0, #7
 8007cd8:	1ac3      	subs	r3, r0, r3
 8007cda:	d0d3      	beq.n	8007c84 <_malloc_r+0x20>
 8007cdc:	425a      	negs	r2, r3
 8007cde:	50e2      	str	r2, [r4, r3]
 8007ce0:	e7d0      	b.n	8007c84 <_malloc_r+0x20>
 8007ce2:	684b      	ldr	r3, [r1, #4]
 8007ce4:	428c      	cmp	r4, r1
 8007ce6:	bf16      	itet	ne
 8007ce8:	6063      	strne	r3, [r4, #4]
 8007cea:	6013      	streq	r3, [r2, #0]
 8007cec:	460c      	movne	r4, r1
 8007cee:	e7eb      	b.n	8007cc8 <_malloc_r+0x64>
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	6849      	ldr	r1, [r1, #4]
 8007cf4:	e7cc      	b.n	8007c90 <_malloc_r+0x2c>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d005      	beq.n	8007d0c <_malloc_r+0xa8>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f95a 	bl	8007fbc <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0cf      	beq.n	8007cac <_malloc_r+0x48>
 8007d0c:	6025      	str	r5, [r4, #0]
 8007d0e:	e7db      	b.n	8007cc8 <_malloc_r+0x64>
 8007d10:	20000248 	.word	0x20000248
 8007d14:	2000024c 	.word	0x2000024c

08007d18 <__ssputs_r>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	688e      	ldr	r6, [r1, #8]
 8007d1e:	4682      	mov	sl, r0
 8007d20:	429e      	cmp	r6, r3
 8007d22:	460c      	mov	r4, r1
 8007d24:	4690      	mov	r8, r2
 8007d26:	4699      	mov	r9, r3
 8007d28:	d837      	bhi.n	8007d9a <__ssputs_r+0x82>
 8007d2a:	898a      	ldrh	r2, [r1, #12]
 8007d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d30:	d031      	beq.n	8007d96 <__ssputs_r+0x7e>
 8007d32:	2302      	movs	r3, #2
 8007d34:	6825      	ldr	r5, [r4, #0]
 8007d36:	6909      	ldr	r1, [r1, #16]
 8007d38:	1a6f      	subs	r7, r5, r1
 8007d3a:	6965      	ldr	r5, [r4, #20]
 8007d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d44:	f109 0301 	add.w	r3, r9, #1
 8007d48:	443b      	add	r3, r7
 8007d4a:	429d      	cmp	r5, r3
 8007d4c:	bf38      	it	cc
 8007d4e:	461d      	movcc	r5, r3
 8007d50:	0553      	lsls	r3, r2, #21
 8007d52:	d530      	bpl.n	8007db6 <__ssputs_r+0x9e>
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7ff ff85 	bl	8007c64 <_malloc_r>
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	b950      	cbnz	r0, 8007d74 <__ssputs_r+0x5c>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	f8ca 3000 	str.w	r3, [sl]
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d74:	463a      	mov	r2, r7
 8007d76:	6921      	ldr	r1, [r4, #16]
 8007d78:	f7ff fc32 	bl	80075e0 <memcpy>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	6126      	str	r6, [r4, #16]
 8007d8a:	443e      	add	r6, r7
 8007d8c:	6026      	str	r6, [r4, #0]
 8007d8e:	464e      	mov	r6, r9
 8007d90:	6165      	str	r5, [r4, #20]
 8007d92:	1bed      	subs	r5, r5, r7
 8007d94:	60a5      	str	r5, [r4, #8]
 8007d96:	454e      	cmp	r6, r9
 8007d98:	d900      	bls.n	8007d9c <__ssputs_r+0x84>
 8007d9a:	464e      	mov	r6, r9
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	4641      	mov	r1, r8
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	f000 f92d 	bl	8008000 <memmove>
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	2000      	movs	r0, #0
 8007daa:	1b9b      	subs	r3, r3, r6
 8007dac:	60a3      	str	r3, [r4, #8]
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	441e      	add	r6, r3
 8007db2:	6026      	str	r6, [r4, #0]
 8007db4:	e7dc      	b.n	8007d70 <__ssputs_r+0x58>
 8007db6:	462a      	mov	r2, r5
 8007db8:	f000 f93d 	bl	8008036 <_realloc_r>
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1e2      	bne.n	8007d88 <__ssputs_r+0x70>
 8007dc2:	6921      	ldr	r1, [r4, #16]
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	f7ff ff01 	bl	8007bcc <_free_r>
 8007dca:	e7c8      	b.n	8007d5e <__ssputs_r+0x46>

08007dcc <_svfiprintf_r>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	898b      	ldrh	r3, [r1, #12]
 8007dd4:	b09d      	sub	sp, #116	; 0x74
 8007dd6:	061f      	lsls	r7, r3, #24
 8007dd8:	4680      	mov	r8, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	4616      	mov	r6, r2
 8007dde:	d50f      	bpl.n	8007e00 <_svfiprintf_r+0x34>
 8007de0:	690b      	ldr	r3, [r1, #16]
 8007de2:	b96b      	cbnz	r3, 8007e00 <_svfiprintf_r+0x34>
 8007de4:	2140      	movs	r1, #64	; 0x40
 8007de6:	f7ff ff3d 	bl	8007c64 <_malloc_r>
 8007dea:	6020      	str	r0, [r4, #0]
 8007dec:	6120      	str	r0, [r4, #16]
 8007dee:	b928      	cbnz	r0, 8007dfc <_svfiprintf_r+0x30>
 8007df0:	230c      	movs	r3, #12
 8007df2:	f8c8 3000 	str.w	r3, [r8]
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	e0c8      	b.n	8007f8e <_svfiprintf_r+0x1c2>
 8007dfc:	2340      	movs	r3, #64	; 0x40
 8007dfe:	6163      	str	r3, [r4, #20]
 8007e00:	2300      	movs	r3, #0
 8007e02:	9309      	str	r3, [sp, #36]	; 0x24
 8007e04:	2320      	movs	r3, #32
 8007e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e0a:	2330      	movs	r3, #48	; 0x30
 8007e0c:	f04f 0b01 	mov.w	fp, #1
 8007e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e14:	9503      	str	r5, [sp, #12]
 8007e16:	4637      	mov	r7, r6
 8007e18:	463d      	mov	r5, r7
 8007e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e1e:	b10b      	cbz	r3, 8007e24 <_svfiprintf_r+0x58>
 8007e20:	2b25      	cmp	r3, #37	; 0x25
 8007e22:	d13e      	bne.n	8007ea2 <_svfiprintf_r+0xd6>
 8007e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e28:	d00b      	beq.n	8007e42 <_svfiprintf_r+0x76>
 8007e2a:	4653      	mov	r3, sl
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4640      	mov	r0, r8
 8007e32:	f7ff ff71 	bl	8007d18 <__ssputs_r>
 8007e36:	3001      	adds	r0, #1
 8007e38:	f000 80a4 	beq.w	8007f84 <_svfiprintf_r+0x1b8>
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	4453      	add	r3, sl
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	783b      	ldrb	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 809d 	beq.w	8007f84 <_svfiprintf_r+0x1b8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	9307      	str	r3, [sp, #28]
 8007e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e5e:	462f      	mov	r7, r5
 8007e60:	2205      	movs	r2, #5
 8007e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e66:	4850      	ldr	r0, [pc, #320]	; (8007fa8 <_svfiprintf_r+0x1dc>)
 8007e68:	f7ff fbac 	bl	80075c4 <memchr>
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	b9d0      	cbnz	r0, 8007ea6 <_svfiprintf_r+0xda>
 8007e70:	06d9      	lsls	r1, r3, #27
 8007e72:	bf44      	itt	mi
 8007e74:	2220      	movmi	r2, #32
 8007e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e7a:	071a      	lsls	r2, r3, #28
 8007e7c:	bf44      	itt	mi
 8007e7e:	222b      	movmi	r2, #43	; 0x2b
 8007e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e84:	782a      	ldrb	r2, [r5, #0]
 8007e86:	2a2a      	cmp	r2, #42	; 0x2a
 8007e88:	d015      	beq.n	8007eb6 <_svfiprintf_r+0xea>
 8007e8a:	462f      	mov	r7, r5
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	250a      	movs	r5, #10
 8007e90:	9a07      	ldr	r2, [sp, #28]
 8007e92:	4639      	mov	r1, r7
 8007e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e98:	3b30      	subs	r3, #48	; 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d94d      	bls.n	8007f3a <_svfiprintf_r+0x16e>
 8007e9e:	b1b8      	cbz	r0, 8007ed0 <_svfiprintf_r+0x104>
 8007ea0:	e00f      	b.n	8007ec2 <_svfiprintf_r+0xf6>
 8007ea2:	462f      	mov	r7, r5
 8007ea4:	e7b8      	b.n	8007e18 <_svfiprintf_r+0x4c>
 8007ea6:	4a40      	ldr	r2, [pc, #256]	; (8007fa8 <_svfiprintf_r+0x1dc>)
 8007ea8:	463d      	mov	r5, r7
 8007eaa:	1a80      	subs	r0, r0, r2
 8007eac:	fa0b f000 	lsl.w	r0, fp, r0
 8007eb0:	4318      	orrs	r0, r3
 8007eb2:	9004      	str	r0, [sp, #16]
 8007eb4:	e7d3      	b.n	8007e5e <_svfiprintf_r+0x92>
 8007eb6:	9a03      	ldr	r2, [sp, #12]
 8007eb8:	1d11      	adds	r1, r2, #4
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	9103      	str	r1, [sp, #12]
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	db01      	blt.n	8007ec6 <_svfiprintf_r+0xfa>
 8007ec2:	9207      	str	r2, [sp, #28]
 8007ec4:	e004      	b.n	8007ed0 <_svfiprintf_r+0x104>
 8007ec6:	4252      	negs	r2, r2
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	9207      	str	r2, [sp, #28]
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	783b      	ldrb	r3, [r7, #0]
 8007ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed4:	d10c      	bne.n	8007ef0 <_svfiprintf_r+0x124>
 8007ed6:	787b      	ldrb	r3, [r7, #1]
 8007ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eda:	d133      	bne.n	8007f44 <_svfiprintf_r+0x178>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	3702      	adds	r7, #2
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	9203      	str	r2, [sp, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb8      	it	lt
 8007eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	4d2e      	ldr	r5, [pc, #184]	; (8007fac <_svfiprintf_r+0x1e0>)
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	7839      	ldrb	r1, [r7, #0]
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f7ff fb64 	bl	80075c4 <memchr>
 8007efc:	b138      	cbz	r0, 8007f0e <_svfiprintf_r+0x142>
 8007efe:	2340      	movs	r3, #64	; 0x40
 8007f00:	1b40      	subs	r0, r0, r5
 8007f02:	fa03 f000 	lsl.w	r0, r3, r0
 8007f06:	9b04      	ldr	r3, [sp, #16]
 8007f08:	3701      	adds	r7, #1
 8007f0a:	4303      	orrs	r3, r0
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	7839      	ldrb	r1, [r7, #0]
 8007f10:	2206      	movs	r2, #6
 8007f12:	4827      	ldr	r0, [pc, #156]	; (8007fb0 <_svfiprintf_r+0x1e4>)
 8007f14:	1c7e      	adds	r6, r7, #1
 8007f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f1a:	f7ff fb53 	bl	80075c4 <memchr>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d038      	beq.n	8007f94 <_svfiprintf_r+0x1c8>
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <_svfiprintf_r+0x1e8>)
 8007f24:	bb13      	cbnz	r3, 8007f6c <_svfiprintf_r+0x1a0>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	3307      	adds	r3, #7
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	3308      	adds	r3, #8
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f34:	444b      	add	r3, r9
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	e76d      	b.n	8007e16 <_svfiprintf_r+0x4a>
 8007f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8007f3e:	2001      	movs	r0, #1
 8007f40:	460f      	mov	r7, r1
 8007f42:	e7a6      	b.n	8007e92 <_svfiprintf_r+0xc6>
 8007f44:	2300      	movs	r3, #0
 8007f46:	250a      	movs	r5, #10
 8007f48:	4619      	mov	r1, r3
 8007f4a:	3701      	adds	r7, #1
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f54:	3a30      	subs	r2, #48	; 0x30
 8007f56:	2a09      	cmp	r2, #9
 8007f58:	d903      	bls.n	8007f62 <_svfiprintf_r+0x196>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0c8      	beq.n	8007ef0 <_svfiprintf_r+0x124>
 8007f5e:	9105      	str	r1, [sp, #20]
 8007f60:	e7c6      	b.n	8007ef0 <_svfiprintf_r+0x124>
 8007f62:	fb05 2101 	mla	r1, r5, r1, r2
 8007f66:	2301      	movs	r3, #1
 8007f68:	4607      	mov	r7, r0
 8007f6a:	e7f0      	b.n	8007f4e <_svfiprintf_r+0x182>
 8007f6c:	ab03      	add	r3, sp, #12
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	4622      	mov	r2, r4
 8007f72:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <_svfiprintf_r+0x1ec>)
 8007f74:	a904      	add	r1, sp, #16
 8007f76:	4640      	mov	r0, r8
 8007f78:	f7fe f8ec 	bl	8006154 <_printf_float>
 8007f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f80:	4681      	mov	r9, r0
 8007f82:	d1d6      	bne.n	8007f32 <_svfiprintf_r+0x166>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	065b      	lsls	r3, r3, #25
 8007f88:	f53f af35 	bmi.w	8007df6 <_svfiprintf_r+0x2a>
 8007f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8e:	b01d      	add	sp, #116	; 0x74
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <_svfiprintf_r+0x1ec>)
 8007f9c:	a904      	add	r1, sp, #16
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	f7fe fb84 	bl	80066ac <_printf_i>
 8007fa4:	e7ea      	b.n	8007f7c <_svfiprintf_r+0x1b0>
 8007fa6:	bf00      	nop
 8007fa8:	08008a2c 	.word	0x08008a2c
 8007fac:	08008a32 	.word	0x08008a32
 8007fb0:	08008a36 	.word	0x08008a36
 8007fb4:	08006155 	.word	0x08006155
 8007fb8:	08007d19 	.word	0x08007d19

08007fbc <_sbrk_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4c05      	ldr	r4, [pc, #20]	; (8007fd8 <_sbrk_r+0x1c>)
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	f7fc fbfa 	bl	80047c0 <_sbrk>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_sbrk_r+0x1a>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_sbrk_r+0x1a>
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	200004c8 	.word	0x200004c8

08007fdc <__ascii_mbtowc>:
 8007fdc:	b082      	sub	sp, #8
 8007fde:	b901      	cbnz	r1, 8007fe2 <__ascii_mbtowc+0x6>
 8007fe0:	a901      	add	r1, sp, #4
 8007fe2:	b142      	cbz	r2, 8007ff6 <__ascii_mbtowc+0x1a>
 8007fe4:	b14b      	cbz	r3, 8007ffa <__ascii_mbtowc+0x1e>
 8007fe6:	7813      	ldrb	r3, [r2, #0]
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	1c10      	adds	r0, r2, #0
 8007fee:	bf18      	it	ne
 8007ff0:	2001      	movne	r0, #1
 8007ff2:	b002      	add	sp, #8
 8007ff4:	4770      	bx	lr
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	e7fb      	b.n	8007ff2 <__ascii_mbtowc+0x16>
 8007ffa:	f06f 0001 	mvn.w	r0, #1
 8007ffe:	e7f8      	b.n	8007ff2 <__ascii_mbtowc+0x16>

08008000 <memmove>:
 8008000:	4288      	cmp	r0, r1
 8008002:	b510      	push	{r4, lr}
 8008004:	eb01 0302 	add.w	r3, r1, r2
 8008008:	d807      	bhi.n	800801a <memmove+0x1a>
 800800a:	1e42      	subs	r2, r0, #1
 800800c:	4299      	cmp	r1, r3
 800800e:	d00a      	beq.n	8008026 <memmove+0x26>
 8008010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008014:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008018:	e7f8      	b.n	800800c <memmove+0xc>
 800801a:	4283      	cmp	r3, r0
 800801c:	d9f5      	bls.n	800800a <memmove+0xa>
 800801e:	1881      	adds	r1, r0, r2
 8008020:	1ad2      	subs	r2, r2, r3
 8008022:	42d3      	cmn	r3, r2
 8008024:	d100      	bne.n	8008028 <memmove+0x28>
 8008026:	bd10      	pop	{r4, pc}
 8008028:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800802c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008030:	e7f7      	b.n	8008022 <memmove+0x22>

08008032 <__malloc_lock>:
 8008032:	4770      	bx	lr

08008034 <__malloc_unlock>:
 8008034:	4770      	bx	lr

08008036 <_realloc_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	4607      	mov	r7, r0
 800803a:	4614      	mov	r4, r2
 800803c:	460e      	mov	r6, r1
 800803e:	b921      	cbnz	r1, 800804a <_realloc_r+0x14>
 8008040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008044:	4611      	mov	r1, r2
 8008046:	f7ff be0d 	b.w	8007c64 <_malloc_r>
 800804a:	b922      	cbnz	r2, 8008056 <_realloc_r+0x20>
 800804c:	f7ff fdbe 	bl	8007bcc <_free_r>
 8008050:	4625      	mov	r5, r4
 8008052:	4628      	mov	r0, r5
 8008054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008056:	f000 f821 	bl	800809c <_malloc_usable_size_r>
 800805a:	42a0      	cmp	r0, r4
 800805c:	d20f      	bcs.n	800807e <_realloc_r+0x48>
 800805e:	4621      	mov	r1, r4
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff fdff 	bl	8007c64 <_malloc_r>
 8008066:	4605      	mov	r5, r0
 8008068:	2800      	cmp	r0, #0
 800806a:	d0f2      	beq.n	8008052 <_realloc_r+0x1c>
 800806c:	4631      	mov	r1, r6
 800806e:	4622      	mov	r2, r4
 8008070:	f7ff fab6 	bl	80075e0 <memcpy>
 8008074:	4631      	mov	r1, r6
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff fda8 	bl	8007bcc <_free_r>
 800807c:	e7e9      	b.n	8008052 <_realloc_r+0x1c>
 800807e:	4635      	mov	r5, r6
 8008080:	e7e7      	b.n	8008052 <_realloc_r+0x1c>

08008082 <__ascii_wctomb>:
 8008082:	b149      	cbz	r1, 8008098 <__ascii_wctomb+0x16>
 8008084:	2aff      	cmp	r2, #255	; 0xff
 8008086:	bf8b      	itete	hi
 8008088:	238a      	movhi	r3, #138	; 0x8a
 800808a:	700a      	strbls	r2, [r1, #0]
 800808c:	6003      	strhi	r3, [r0, #0]
 800808e:	2001      	movls	r0, #1
 8008090:	bf88      	it	hi
 8008092:	f04f 30ff 	movhi.w	r0, #4294967295
 8008096:	4770      	bx	lr
 8008098:	4608      	mov	r0, r1
 800809a:	4770      	bx	lr

0800809c <_malloc_usable_size_r>:
 800809c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a0:	1f18      	subs	r0, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfbc      	itt	lt
 80080a6:	580b      	ldrlt	r3, [r1, r0]
 80080a8:	18c0      	addlt	r0, r0, r3
 80080aa:	4770      	bx	lr

080080ac <_init>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	bf00      	nop
 80080b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b2:	bc08      	pop	{r3}
 80080b4:	469e      	mov	lr, r3
 80080b6:	4770      	bx	lr

080080b8 <_fini>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr
