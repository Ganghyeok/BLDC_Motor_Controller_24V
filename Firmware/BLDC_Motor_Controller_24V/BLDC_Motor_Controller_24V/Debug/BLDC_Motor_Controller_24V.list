
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080051d8  080051d8  000151d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005440  08005440  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08005440  08005440  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005440  08005440  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08005448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d8  08005620  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08005620  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb89  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de1  00000000  00000000  0002fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d8  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003f0  00000000  00000000  00032048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a076  00000000  00000000  00032438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076a5  00000000  00000000  0003c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002ac15  00000000  00000000  00043b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006e768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b58  00000000  00000000  0006e7e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	080051bc 	.word	0x080051bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	080051bc 	.word	0x080051bc

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <DMA_SetConfig>:
	pDMAHandle->State = DMA_STATE_READY;
}


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d108      	bne.n	8000b28 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 8000b26:	e007      	b.n	8000b38 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	60da      	str	r2, [r3, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff ffbe 	bl	8000ae8 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0204 	bic.w	r2, r2, #4
 8000b7a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0202 	orr.w	r2, r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 80bf 	beq.w	8000d52 <DMA_IRQ_Handling+0x1ae>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80bb 	beq.w	8000d52 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b99      	ldr	r3, [pc, #612]	; (8000e48 <DMA_IRQ_Handling+0x2a4>)
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d958      	bls.n	8000c9a <DMA_IRQ_Handling+0xf6>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a97      	ldr	r2, [pc, #604]	; (8000e4c <DMA_IRQ_Handling+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d04f      	beq.n	8000c92 <DMA_IRQ_Handling+0xee>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a96      	ldr	r2, [pc, #600]	; (8000e50 <DMA_IRQ_Handling+0x2ac>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d048      	beq.n	8000c8e <DMA_IRQ_Handling+0xea>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a94      	ldr	r2, [pc, #592]	; (8000e54 <DMA_IRQ_Handling+0x2b0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d040      	beq.n	8000c88 <DMA_IRQ_Handling+0xe4>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a93      	ldr	r2, [pc, #588]	; (8000e58 <DMA_IRQ_Handling+0x2b4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d038      	beq.n	8000c82 <DMA_IRQ_Handling+0xde>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a91      	ldr	r2, [pc, #580]	; (8000e5c <DMA_IRQ_Handling+0x2b8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d030      	beq.n	8000c7c <DMA_IRQ_Handling+0xd8>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a90      	ldr	r2, [pc, #576]	; (8000e60 <DMA_IRQ_Handling+0x2bc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d028      	beq.n	8000c76 <DMA_IRQ_Handling+0xd2>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <DMA_IRQ_Handling+0x2a4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d020      	beq.n	8000c70 <DMA_IRQ_Handling+0xcc>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a8c      	ldr	r2, [pc, #560]	; (8000e64 <DMA_IRQ_Handling+0x2c0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d019      	beq.n	8000c6c <DMA_IRQ_Handling+0xc8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a8a      	ldr	r2, [pc, #552]	; (8000e68 <DMA_IRQ_Handling+0x2c4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d012      	beq.n	8000c68 <DMA_IRQ_Handling+0xc4>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a89      	ldr	r2, [pc, #548]	; (8000e6c <DMA_IRQ_Handling+0x2c8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00a      	beq.n	8000c62 <DMA_IRQ_Handling+0xbe>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a87      	ldr	r2, [pc, #540]	; (8000e70 <DMA_IRQ_Handling+0x2cc>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d102      	bne.n	8000c5c <DMA_IRQ_Handling+0xb8>
 8000c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5a:	e01b      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c60:	e018      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	e015      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	e013      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e011      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c74:	e00e      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7a:	e00b      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c80:	e008      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c86:	e005      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8c:	e002      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c8e:	2340      	movs	r3, #64	; 0x40
 8000c90:	e000      	b.n	8000c94 <DMA_IRQ_Handling+0xf0>
 8000c92:	2304      	movs	r3, #4
 8000c94:	4a77      	ldr	r2, [pc, #476]	; (8000e74 <DMA_IRQ_Handling+0x2d0>)
 8000c96:	6053      	str	r3, [r2, #4]
 8000c98:	e057      	b.n	8000d4a <DMA_IRQ_Handling+0x1a6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a6b      	ldr	r2, [pc, #428]	; (8000e4c <DMA_IRQ_Handling+0x2a8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d04f      	beq.n	8000d44 <DMA_IRQ_Handling+0x1a0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a69      	ldr	r2, [pc, #420]	; (8000e50 <DMA_IRQ_Handling+0x2ac>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d048      	beq.n	8000d40 <DMA_IRQ_Handling+0x19c>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a68      	ldr	r2, [pc, #416]	; (8000e54 <DMA_IRQ_Handling+0x2b0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d040      	beq.n	8000d3a <DMA_IRQ_Handling+0x196>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <DMA_IRQ_Handling+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d038      	beq.n	8000d34 <DMA_IRQ_Handling+0x190>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a65      	ldr	r2, [pc, #404]	; (8000e5c <DMA_IRQ_Handling+0x2b8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d030      	beq.n	8000d2e <DMA_IRQ_Handling+0x18a>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a63      	ldr	r2, [pc, #396]	; (8000e60 <DMA_IRQ_Handling+0x2bc>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d028      	beq.n	8000d28 <DMA_IRQ_Handling+0x184>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <DMA_IRQ_Handling+0x2a4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d020      	beq.n	8000d22 <DMA_IRQ_Handling+0x17e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5f      	ldr	r2, [pc, #380]	; (8000e64 <DMA_IRQ_Handling+0x2c0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d019      	beq.n	8000d1e <DMA_IRQ_Handling+0x17a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a5e      	ldr	r2, [pc, #376]	; (8000e68 <DMA_IRQ_Handling+0x2c4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d012      	beq.n	8000d1a <DMA_IRQ_Handling+0x176>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a5c      	ldr	r2, [pc, #368]	; (8000e6c <DMA_IRQ_Handling+0x2c8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00a      	beq.n	8000d14 <DMA_IRQ_Handling+0x170>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a5b      	ldr	r2, [pc, #364]	; (8000e70 <DMA_IRQ_Handling+0x2cc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d102      	bne.n	8000d0e <DMA_IRQ_Handling+0x16a>
 8000d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d0c:	e01b      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d12:	e018      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d18:	e015      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d1a:	2340      	movs	r3, #64	; 0x40
 8000d1c:	e013      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e011      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d26:	e00e      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2c:	e00b      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d32:	e008      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d38:	e005      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	e002      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	e000      	b.n	8000d46 <DMA_IRQ_Handling+0x1a2>
 8000d44:	2304      	movs	r3, #4
 8000d46:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <DMA_IRQ_Handling+0x2d4>)
 8000d48:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80dd 	beq.w	8000f34 <DMA_IRQ_Handling+0x390>
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80d9 	beq.w	8000f34 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <DMA_IRQ_Handling+0x2a4>)
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d972      	bls.n	8000e7c <DMA_IRQ_Handling+0x2d8>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <DMA_IRQ_Handling+0x2a8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d04f      	beq.n	8000e40 <DMA_IRQ_Handling+0x29c>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <DMA_IRQ_Handling+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d048      	beq.n	8000e3c <DMA_IRQ_Handling+0x298>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <DMA_IRQ_Handling+0x2b0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d040      	beq.n	8000e36 <DMA_IRQ_Handling+0x292>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <DMA_IRQ_Handling+0x2b4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d038      	beq.n	8000e30 <DMA_IRQ_Handling+0x28c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <DMA_IRQ_Handling+0x2b8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d030      	beq.n	8000e2a <DMA_IRQ_Handling+0x286>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <DMA_IRQ_Handling+0x2bc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d028      	beq.n	8000e24 <DMA_IRQ_Handling+0x280>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <DMA_IRQ_Handling+0x2a4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d020      	beq.n	8000e1e <DMA_IRQ_Handling+0x27a>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <DMA_IRQ_Handling+0x2c0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d019      	beq.n	8000e1a <DMA_IRQ_Handling+0x276>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <DMA_IRQ_Handling+0x2c4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d012      	beq.n	8000e16 <DMA_IRQ_Handling+0x272>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <DMA_IRQ_Handling+0x2c8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00a      	beq.n	8000e10 <DMA_IRQ_Handling+0x26c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <DMA_IRQ_Handling+0x2cc>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d102      	bne.n	8000e0a <DMA_IRQ_Handling+0x266>
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	e01b      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0e:	e018      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e14:	e015      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e16:	2320      	movs	r3, #32
 8000e18:	e013      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e011      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e22:	e00e      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e28:	e00b      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2e:	e008      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	e005      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	e002      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	e000      	b.n	8000e42 <DMA_IRQ_Handling+0x29e>
 8000e40:	2302      	movs	r3, #2
 8000e42:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <DMA_IRQ_Handling+0x2d0>)
 8000e44:	6053      	str	r3, [r2, #4]
 8000e46:	e071      	b.n	8000f2c <DMA_IRQ_Handling+0x388>
 8000e48:	40020080 	.word	0x40020080
 8000e4c:	40020008 	.word	0x40020008
 8000e50:	4002001c 	.word	0x4002001c
 8000e54:	40020030 	.word	0x40020030
 8000e58:	40020044 	.word	0x40020044
 8000e5c:	40020058 	.word	0x40020058
 8000e60:	4002006c 	.word	0x4002006c
 8000e64:	40020408 	.word	0x40020408
 8000e68:	4002041c 	.word	0x4002041c
 8000e6c:	40020430 	.word	0x40020430
 8000e70:	40020444 	.word	0x40020444
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a9a      	ldr	r2, [pc, #616]	; (80010ec <DMA_IRQ_Handling+0x548>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d04f      	beq.n	8000f26 <DMA_IRQ_Handling+0x382>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a99      	ldr	r2, [pc, #612]	; (80010f0 <DMA_IRQ_Handling+0x54c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d048      	beq.n	8000f22 <DMA_IRQ_Handling+0x37e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a97      	ldr	r2, [pc, #604]	; (80010f4 <DMA_IRQ_Handling+0x550>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d040      	beq.n	8000f1c <DMA_IRQ_Handling+0x378>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a96      	ldr	r2, [pc, #600]	; (80010f8 <DMA_IRQ_Handling+0x554>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d038      	beq.n	8000f16 <DMA_IRQ_Handling+0x372>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a94      	ldr	r2, [pc, #592]	; (80010fc <DMA_IRQ_Handling+0x558>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d030      	beq.n	8000f10 <DMA_IRQ_Handling+0x36c>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a93      	ldr	r2, [pc, #588]	; (8001100 <DMA_IRQ_Handling+0x55c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d028      	beq.n	8000f0a <DMA_IRQ_Handling+0x366>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a91      	ldr	r2, [pc, #580]	; (8001104 <DMA_IRQ_Handling+0x560>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d020      	beq.n	8000f04 <DMA_IRQ_Handling+0x360>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a90      	ldr	r2, [pc, #576]	; (8001108 <DMA_IRQ_Handling+0x564>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <DMA_IRQ_Handling+0x35c>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a8e      	ldr	r2, [pc, #568]	; (800110c <DMA_IRQ_Handling+0x568>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d012      	beq.n	8000efc <DMA_IRQ_Handling+0x358>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a8d      	ldr	r2, [pc, #564]	; (8001110 <DMA_IRQ_Handling+0x56c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00a      	beq.n	8000ef6 <DMA_IRQ_Handling+0x352>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a8b      	ldr	r2, [pc, #556]	; (8001114 <DMA_IRQ_Handling+0x570>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d102      	bne.n	8000ef0 <DMA_IRQ_Handling+0x34c>
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	e01b      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef4:	e018      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efa:	e015      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000efc:	2320      	movs	r3, #32
 8000efe:	e013      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e011      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f08:	e00e      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f0e:	e00b      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	e008      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1a:	e005      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	e002      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f22:	2320      	movs	r3, #32
 8000f24:	e000      	b.n	8000f28 <DMA_IRQ_Handling+0x384>
 8000f26:	2302      	movs	r3, #2
 8000f28:	4a7b      	ldr	r2, [pc, #492]	; (8001118 <DMA_IRQ_Handling+0x574>)
 8000f2a:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	2108      	movs	r1, #8
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80c3 	beq.w	80010e2 <DMA_IRQ_Handling+0x53e>
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80bf 	beq.w	80010e2 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b66      	ldr	r3, [pc, #408]	; (8001104 <DMA_IRQ_Handling+0x560>)
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d958      	bls.n	8001022 <DMA_IRQ_Handling+0x47e>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a5d      	ldr	r2, [pc, #372]	; (80010ec <DMA_IRQ_Handling+0x548>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d04f      	beq.n	800101a <DMA_IRQ_Handling+0x476>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	; (80010f0 <DMA_IRQ_Handling+0x54c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d048      	beq.n	8001016 <DMA_IRQ_Handling+0x472>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <DMA_IRQ_Handling+0x550>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d040      	beq.n	8001010 <DMA_IRQ_Handling+0x46c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a59      	ldr	r2, [pc, #356]	; (80010f8 <DMA_IRQ_Handling+0x554>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d038      	beq.n	800100a <DMA_IRQ_Handling+0x466>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a57      	ldr	r2, [pc, #348]	; (80010fc <DMA_IRQ_Handling+0x558>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d030      	beq.n	8001004 <DMA_IRQ_Handling+0x460>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <DMA_IRQ_Handling+0x55c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d028      	beq.n	8000ffe <DMA_IRQ_Handling+0x45a>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <DMA_IRQ_Handling+0x560>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d020      	beq.n	8000ff8 <DMA_IRQ_Handling+0x454>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a53      	ldr	r2, [pc, #332]	; (8001108 <DMA_IRQ_Handling+0x564>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d019      	beq.n	8000ff4 <DMA_IRQ_Handling+0x450>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	; (800110c <DMA_IRQ_Handling+0x568>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d012      	beq.n	8000ff0 <DMA_IRQ_Handling+0x44c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a50      	ldr	r2, [pc, #320]	; (8001110 <DMA_IRQ_Handling+0x56c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00a      	beq.n	8000fea <DMA_IRQ_Handling+0x446>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <DMA_IRQ_Handling+0x570>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d102      	bne.n	8000fe4 <DMA_IRQ_Handling+0x440>
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	e01b      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	e018      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	e015      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	e013      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e011      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffc:	e00e      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8000ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001002:	e00b      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8001004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001008:	e008      	b.n	800101c <DMA_IRQ_Handling+0x478>
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	e005      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	e002      	b.n	800101c <DMA_IRQ_Handling+0x478>
 8001016:	2310      	movs	r3, #16
 8001018:	e000      	b.n	800101c <DMA_IRQ_Handling+0x478>
 800101a:	2301      	movs	r3, #1
 800101c:	4a3f      	ldr	r2, [pc, #252]	; (800111c <DMA_IRQ_Handling+0x578>)
 800101e:	6053      	str	r3, [r2, #4]
 8001020:	e057      	b.n	80010d2 <DMA_IRQ_Handling+0x52e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <DMA_IRQ_Handling+0x548>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d04f      	beq.n	80010cc <DMA_IRQ_Handling+0x528>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <DMA_IRQ_Handling+0x54c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d048      	beq.n	80010c8 <DMA_IRQ_Handling+0x524>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <DMA_IRQ_Handling+0x550>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d040      	beq.n	80010c2 <DMA_IRQ_Handling+0x51e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <DMA_IRQ_Handling+0x554>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d038      	beq.n	80010bc <DMA_IRQ_Handling+0x518>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <DMA_IRQ_Handling+0x558>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d030      	beq.n	80010b6 <DMA_IRQ_Handling+0x512>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <DMA_IRQ_Handling+0x55c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d028      	beq.n	80010b0 <DMA_IRQ_Handling+0x50c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a28      	ldr	r2, [pc, #160]	; (8001104 <DMA_IRQ_Handling+0x560>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d020      	beq.n	80010aa <DMA_IRQ_Handling+0x506>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <DMA_IRQ_Handling+0x564>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <DMA_IRQ_Handling+0x502>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a25      	ldr	r2, [pc, #148]	; (800110c <DMA_IRQ_Handling+0x568>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d012      	beq.n	80010a2 <DMA_IRQ_Handling+0x4fe>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <DMA_IRQ_Handling+0x56c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00a      	beq.n	800109c <DMA_IRQ_Handling+0x4f8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <DMA_IRQ_Handling+0x570>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d102      	bne.n	8001096 <DMA_IRQ_Handling+0x4f2>
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	e01b      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 8001096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109a:	e018      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	e015      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010a2:	2310      	movs	r3, #16
 80010a4:	e013      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e011      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ae:	e00e      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b4:	e00b      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ba:	e008      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	e005      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c6:	e002      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010c8:	2310      	movs	r3, #16
 80010ca:	e000      	b.n	80010ce <DMA_IRQ_Handling+0x52a>
 80010cc:	2301      	movs	r3, #1
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <DMA_IRQ_Handling+0x574>)
 80010d0:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
	}
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020008 	.word	0x40020008
 80010f0:	4002001c 	.word	0x4002001c
 80010f4:	40020030 	.word	0x40020030
 80010f8:	40020044 	.word	0x40020044
 80010fc:	40020058 	.word	0x40020058
 8001100:	4002006c 	.word	0x4002006c
 8001104:	40020080 	.word	0x40020080
 8001108:	40020408 	.word	0x40020408
 800110c:	4002041c 	.word	0x4002041c
 8001110:	40020430 	.word	0x40020430
 8001114:	40020444 	.word	0x40020444
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400

08001120 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a96      	ldr	r2, [pc, #600]	; (8001390 <GPIO_Init+0x270>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d106      	bne.n	8001148 <GPIO_Init+0x28>
 800113a:	4b96      	ldr	r3, [pc, #600]	; (8001394 <GPIO_Init+0x274>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a95      	ldr	r2, [pc, #596]	; (8001394 <GPIO_Init+0x274>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	e03c      	b.n	80011c2 <GPIO_Init+0xa2>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a93      	ldr	r2, [pc, #588]	; (8001398 <GPIO_Init+0x278>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d106      	bne.n	800115e <GPIO_Init+0x3e>
 8001150:	4b90      	ldr	r3, [pc, #576]	; (8001394 <GPIO_Init+0x274>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a8f      	ldr	r2, [pc, #572]	; (8001394 <GPIO_Init+0x274>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	e031      	b.n	80011c2 <GPIO_Init+0xa2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a8e      	ldr	r2, [pc, #568]	; (800139c <GPIO_Init+0x27c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <GPIO_Init+0x54>
 8001166:	4b8b      	ldr	r3, [pc, #556]	; (8001394 <GPIO_Init+0x274>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a8a      	ldr	r2, [pc, #552]	; (8001394 <GPIO_Init+0x274>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	e026      	b.n	80011c2 <GPIO_Init+0xa2>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <GPIO_Init+0x280>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <GPIO_Init+0x6a>
 800117c:	4b85      	ldr	r3, [pc, #532]	; (8001394 <GPIO_Init+0x274>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a84      	ldr	r2, [pc, #528]	; (8001394 <GPIO_Init+0x274>)
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	e01b      	b.n	80011c2 <GPIO_Init+0xa2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a85      	ldr	r2, [pc, #532]	; (80013a4 <GPIO_Init+0x284>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d106      	bne.n	80011a0 <GPIO_Init+0x80>
 8001192:	4b80      	ldr	r3, [pc, #512]	; (8001394 <GPIO_Init+0x274>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a7f      	ldr	r2, [pc, #508]	; (8001394 <GPIO_Init+0x274>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	e010      	b.n	80011c2 <GPIO_Init+0xa2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a81      	ldr	r2, [pc, #516]	; (80013a8 <GPIO_Init+0x288>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d106      	bne.n	80011b6 <GPIO_Init+0x96>
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <GPIO_Init+0x274>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a79      	ldr	r2, [pc, #484]	; (8001394 <GPIO_Init+0x274>)
 80011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	e005      	b.n	80011c2 <GPIO_Init+0xa2>
 80011b6:	4b77      	ldr	r3, [pc, #476]	; (8001394 <GPIO_Init+0x274>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a76      	ldr	r2, [pc, #472]	; (8001394 <GPIO_Init+0x274>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	76fb      	strb	r3, [r7, #27]
 80011c6:	e1d0      	b.n	800156a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	7efa      	ldrb	r2, [r7, #27]
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81c0 	beq.w	800155c <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b11      	cmp	r3, #17
 80011e2:	d039      	beq.n	8001258 <GPIO_Init+0x138>
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d807      	bhi.n	80011f8 <GPIO_Init+0xd8>
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d016      	beq.n	800121a <GPIO_Init+0xfa>
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	f0c0 8090 	bcc.w	8001312 <GPIO_Init+0x1f2>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d04f      	beq.n	8001296 <GPIO_Init+0x176>
 80011f6:	e0bd      	b.n	8001374 <GPIO_Init+0x254>
 80011f8:	4a6c      	ldr	r2, [pc, #432]	; (80013ac <GPIO_Init+0x28c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f000 8089 	beq.w	8001312 <GPIO_Init+0x1f2>
 8001200:	4a6a      	ldr	r2, [pc, #424]	; (80013ac <GPIO_Init+0x28c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d802      	bhi.n	800120c <GPIO_Init+0xec>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d064      	beq.n	80012d4 <GPIO_Init+0x1b4>
 800120a:	e0b3      	b.n	8001374 <GPIO_Init+0x254>
 800120c:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <GPIO_Init+0x290>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d07f      	beq.n	8001312 <GPIO_Init+0x1f2>
 8001212:	4a68      	ldr	r2, [pc, #416]	; (80013b4 <GPIO_Init+0x294>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d07c      	beq.n	8001312 <GPIO_Init+0x1f2>
 8001218:	e0ac      	b.n	8001374 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d104      	bne.n	800122c <GPIO_Init+0x10c>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e010      	b.n	800124e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d104      	bne.n	800123e <GPIO_Init+0x11e>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e007      	b.n	800124e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d103      	bne.n	800124e <GPIO_Init+0x12e>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f043 0303 	orr.w	r3, r3, #3
 800124c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f023 030c 	bic.w	r3, r3, #12
 8001254:	61fb      	str	r3, [r7, #28]


					break;
 8001256:	e08d      	b.n	8001374 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d104      	bne.n	800126a <GPIO_Init+0x14a>
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e010      	b.n	800128c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d104      	bne.n	800127c <GPIO_Init+0x15c>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e007      	b.n	800128c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d103      	bne.n	800128c <GPIO_Init+0x16c>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f043 0303 	orr.w	r3, r3, #3
 800128a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	61fb      	str	r3, [r7, #28]

					break;
 8001294:	e06e      	b.n	8001374 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d104      	bne.n	80012a8 <GPIO_Init+0x188>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e010      	b.n	80012ca <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d104      	bne.n	80012ba <GPIO_Init+0x19a>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e007      	b.n	80012ca <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d103      	bne.n	80012ca <GPIO_Init+0x1aa>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f043 0303 	orr.w	r3, r3, #3
 80012c8:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	61fb      	str	r3, [r7, #28]

					break;
 80012d2:	e04f      	b.n	8001374 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d104      	bne.n	80012e6 <GPIO_Init+0x1c6>
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e010      	b.n	8001308 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d104      	bne.n	80012f8 <GPIO_Init+0x1d8>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e007      	b.n	8001308 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d103      	bne.n	8001308 <GPIO_Init+0x1e8>
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f043 0303 	orr.w	r3, r3, #3
 8001306:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f043 030c 	orr.w	r3, r3, #12
 800130e:	61fb      	str	r3, [r7, #28]

					break;
 8001310:	e030      	b.n	8001374 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f023 0303 	bic.w	r3, r3, #3
 8001318:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 800132a:	e022      	b.n	8001372 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	7efa      	ldrb	r2, [r7, #27]
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f202 	lsl.w	r2, r1, r2
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
					break;
 800134e:	e010      	b.n	8001372 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10c      	bne.n	8001372 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	7efa      	ldrb	r2, [r7, #27]
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	615a      	str	r2, [r3, #20]
					break;
 8001372:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001374:	7efb      	ldrb	r3, [r7, #27]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d801      	bhi.n	800137e <GPIO_Init+0x25e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <GPIO_Init+0x262>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d816      	bhi.n	80013b8 <GPIO_Init+0x298>
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e016      	b.n	80013be <GPIO_Init+0x29e>
 8001390:	40010800 	.word	0x40010800
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40011000 	.word	0x40011000
 80013a0:	40011400 	.word	0x40011400
 80013a4:	40011800 	.word	0x40011800
 80013a8:	40011c00 	.word	0x40011c00
 80013ac:	10110000 	.word	0x10110000
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10310000 	.word	0x10310000
 80013b8:	7efb      	ldrb	r3, [r7, #27]
 80013ba:	3b08      	subs	r3, #8
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	210f      	movs	r1, #15
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	69f9      	ldr	r1, [r7, #28]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	431a      	orrs	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80b8 	beq.w	800155c <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 80013ec:	4b63      	ldr	r3, [pc, #396]	; (800157c <GPIO_Init+0x45c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a62      	ldr	r2, [pc, #392]	; (800157c <GPIO_Init+0x45c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 80013f8:	7efb      	ldrb	r3, [r7, #27]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001400:	7efb      	ldrb	r3, [r7, #27]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001408:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <GPIO_Init+0x460>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	210f      	movs	r1, #15
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	43d2      	mvns	r2, r2
 800141e:	401a      	ands	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4958      	ldr	r1, [pc, #352]	; (8001584 <GPIO_Init+0x464>)
 8001424:	428b      	cmp	r3, r1
 8001426:	d01f      	beq.n	8001468 <GPIO_Init+0x348>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4957      	ldr	r1, [pc, #348]	; (8001588 <GPIO_Init+0x468>)
 800142c:	428b      	cmp	r3, r1
 800142e:	d019      	beq.n	8001464 <GPIO_Init+0x344>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4956      	ldr	r1, [pc, #344]	; (800158c <GPIO_Init+0x46c>)
 8001434:	428b      	cmp	r3, r1
 8001436:	d013      	beq.n	8001460 <GPIO_Init+0x340>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4955      	ldr	r1, [pc, #340]	; (8001590 <GPIO_Init+0x470>)
 800143c:	428b      	cmp	r3, r1
 800143e:	d00d      	beq.n	800145c <GPIO_Init+0x33c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4954      	ldr	r1, [pc, #336]	; (8001594 <GPIO_Init+0x474>)
 8001444:	428b      	cmp	r3, r1
 8001446:	d007      	beq.n	8001458 <GPIO_Init+0x338>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4953      	ldr	r1, [pc, #332]	; (8001598 <GPIO_Init+0x478>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d101      	bne.n	8001454 <GPIO_Init+0x334>
 8001450:	2305      	movs	r3, #5
 8001452:	e00a      	b.n	800146a <GPIO_Init+0x34a>
 8001454:	2306      	movs	r3, #6
 8001456:	e008      	b.n	800146a <GPIO_Init+0x34a>
 8001458:	2304      	movs	r3, #4
 800145a:	e006      	b.n	800146a <GPIO_Init+0x34a>
 800145c:	2303      	movs	r3, #3
 800145e:	e004      	b.n	800146a <GPIO_Init+0x34a>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <GPIO_Init+0x34a>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <GPIO_Init+0x34a>
 8001468:	2300      	movs	r3, #0
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	0089      	lsls	r1, r1, #2
 800146e:	408b      	lsls	r3, r1
 8001470:	4943      	ldr	r1, [pc, #268]	; (8001580 <GPIO_Init+0x460>)
 8001472:	431a      	orrs	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3302      	adds	r3, #2
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <GPIO_Init+0x47c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	7efa      	ldrb	r2, [r7, #27]
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4611      	mov	r1, r2
 8001496:	4a41      	ldr	r2, [pc, #260]	; (800159c <GPIO_Init+0x47c>)
 8001498:	430b      	orrs	r3, r1
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e00a      	b.n	80014b4 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <GPIO_Init+0x47c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	43d2      	mvns	r2, r2
 80014ac:	4611      	mov	r1, r2
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <GPIO_Init+0x47c>)
 80014b0:	400b      	ands	r3, r1
 80014b2:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00a      	beq.n	80014d6 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <GPIO_Init+0x47c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	7efa      	ldrb	r2, [r7, #27]
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4611      	mov	r1, r2
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <GPIO_Init+0x47c>)
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6053      	str	r3, [r2, #4]
 80014d4:	e00a      	b.n	80014ec <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <GPIO_Init+0x47c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	7efa      	ldrb	r2, [r7, #27]
 80014dc:	2101      	movs	r1, #1
 80014de:	fa01 f202 	lsl.w	r2, r1, r2
 80014e2:	43d2      	mvns	r2, r2
 80014e4:	4611      	mov	r1, r2
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <GPIO_Init+0x47c>)
 80014e8:	400b      	ands	r3, r1
 80014ea:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00a      	beq.n	800150e <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <GPIO_Init+0x47c>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	7efa      	ldrb	r2, [r7, #27]
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4611      	mov	r1, r2
 8001506:	4a25      	ldr	r2, [pc, #148]	; (800159c <GPIO_Init+0x47c>)
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]
 800150c:	e00a      	b.n	8001524 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <GPIO_Init+0x47c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	7efa      	ldrb	r2, [r7, #27]
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	43d2      	mvns	r2, r2
 800151c:	4611      	mov	r1, r2
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <GPIO_Init+0x47c>)
 8001520:	400b      	ands	r3, r1
 8001522:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00a      	beq.n	8001546 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <GPIO_Init+0x47c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	7efa      	ldrb	r2, [r7, #27]
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	4611      	mov	r1, r2
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <GPIO_Init+0x47c>)
 8001540:	430b      	orrs	r3, r1
 8001542:	60d3      	str	r3, [r2, #12]
 8001544:	e00a      	b.n	800155c <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <GPIO_Init+0x47c>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	7efa      	ldrb	r2, [r7, #27]
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	43d2      	mvns	r2, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <GPIO_Init+0x47c>)
 8001558:	400b      	ands	r3, r1
 800155a:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001564:	7efb      	ldrb	r3, [r7, #27]
 8001566:	3301      	adds	r3, #1
 8001568:	76fb      	strb	r3, [r7, #27]
 800156a:	7efb      	ldrb	r3, [r7, #27]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	f67f ae2b 	bls.w	80011c8 <GPIO_Init+0xa8>
	}
}
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	40010800 	.word	0x40010800
 8001588:	40010c00 	.word	0x40010c00
 800158c:	40011000 	.word	0x40011000
 8001590:	40011400 	.word	0x40011400
 8001594:	40011800 	.word	0x40011800
 8001598:	40011c00 	.word	0x40011c00
 800159c:	40010400 	.word	0x40010400

080015a0 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d106      	bne.n	80015c4 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 80015c2:	e006      	b.n	80015d2 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 80015f0:	883b      	ldrh	r3, [r7, #0]
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <EXTI_IRQHandling+0x34>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <EXTI_IRQHandling+0x34>)
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	4905      	ldr	r1, [pc, #20]	; (8001644 <EXTI_IRQHandling+0x34>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f001 fcf1 	bl	800301c <EXTI_Callback>
	}
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40010400 	.word	0x40010400

08001648 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d011      	beq.n	8001680 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d10c      	bne.n	8001680 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <RCC_OscConfig+0x9c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <RCC_OscConfig+0x9c>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001672:	bf00      	nop
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <RCC_OscConfig+0x9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f9      	beq.n	8001674 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d128      	bne.n	80016da <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <RCC_OscConfig+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <RCC_OscConfig+0x9c>)
 800168e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d105      	bne.n	80016aa <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016a8:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	4313      	orrs	r3, r2
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016be:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 80016cc:	bf00      	nop
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <RCC_OscConfig+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f9      	beq.n	80016ce <RCC_OscConfig+0x86>
	}
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000

080016e8 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <RCC_ClockConfig+0x7c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0207 	bic.w	r2, r3, #7
 80016fa:	491a      	ldr	r1, [pc, #104]	; (8001764 <RCC_ClockConfig+0x7c>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <RCC_ClockConfig+0x80>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	4916      	ldr	r1, [pc, #88]	; (8001768 <RCC_ClockConfig+0x80>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <RCC_ClockConfig+0x80>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4911      	ldr	r1, [pc, #68]	; (8001768 <RCC_ClockConfig+0x80>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <RCC_ClockConfig+0x80>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	490d      	ldr	r1, [pc, #52]	; (8001768 <RCC_ClockConfig+0x80>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <RCC_ClockConfig+0x80>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 0203 	bic.w	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4908      	ldr	r1, [pc, #32]	; (8001768 <RCC_ClockConfig+0x80>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 800174a:	bf00      	nop
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <RCC_ClockConfig+0x80>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f9      	beq.n	800174c <RCC_ClockConfig+0x64>
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000

0800176c <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f001 fa43 	bl	8002c00 <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001788:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	ea42 0103 	orr.w	r1, r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	0c1a      	lsrs	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f002 0204 	and.w	r2, r2, #4
 80017f8:	605a      	str	r2, [r3, #4]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d120      	bne.n	8001858 <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <SPI_PeripheralClockControl+0xa4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d106      	bne.n	800182c <SPI_PeripheralClockControl+0x28>
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a22      	ldr	r2, [pc, #136]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 800182a:	e038      	b.n	800189e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <SPI_PeripheralClockControl+0xac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d106      	bne.n	8001842 <SPI_PeripheralClockControl+0x3e>
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	61d3      	str	r3, [r2, #28]
}
 8001840:	e02d      	b.n	800189e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <SPI_PeripheralClockControl+0xb0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d129      	bne.n	800189e <SPI_PeripheralClockControl+0x9a>
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001854:	61d3      	str	r3, [r2, #28]
}
 8001856:	e022      	b.n	800189e <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11f      	bne.n	800189e <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <SPI_PeripheralClockControl+0xa4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d106      	bne.n	8001874 <SPI_PeripheralClockControl+0x70>
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 800186c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001870:	6193      	str	r3, [r2, #24]
}
 8001872:	e014      	b.n	800189e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <SPI_PeripheralClockControl+0xac>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d106      	bne.n	800188a <SPI_PeripheralClockControl+0x86>
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001886:	61d3      	str	r3, [r2, #28]
}
 8001888:	e009      	b.n	800189e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <SPI_PeripheralClockControl+0xb0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d105      	bne.n	800189e <SPI_PeripheralClockControl+0x9a>
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SPI_PeripheralClockControl+0xa8>)
 8001898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800189c:	61d3      	str	r3, [r2, #28]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40003800 	.word	0x40003800
 80018b4:	40003c00 	.word	0x40003c00

080018b8 <TIM_IRQHandling>:
}



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <TIM_IRQHandling+0x3e>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <TIM_IRQHandling+0x48>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <TIM_IRQHandling+0x48>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f001 fa71 	bl	8002dd8 <TIM_PeriodElapsedCallback>
	}
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40001000 	.word	0x40001000

08001904 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	4613      	mov	r3, r2
 8001910:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <UART_Transmit_DMA+0x84>)
 800192a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <UART_Transmit_DMA+0x88>)
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <UART_Transmit_DMA+0x8c>)
 800193a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	2200      	movs	r2, #0
 8001942:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	461a      	mov	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f7ff f8f1 	bl	8000b42 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196e:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197e:	615a      	str	r2, [r3, #20]
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	080019cb 	.word	0x080019cb
 800198c:	080019e7 	.word	0x080019e7
 8001990:	08001a03 	.word	0x08001a03

08001994 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff ffdb 	bl	8001994 <UART_TxCpltCallback>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff ffd6 	bl	80019a6 <UART_TxHalfCpltCallback>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff ffd1 	bl	80019b8 <UART_ErrorCallback>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d87b      	bhi.n	8001b2c <BLDC_Drive+0x10c>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <BLDC_Drive+0x1c>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001b09 	.word	0x08001b09
 8001a40:	08001a79 	.word	0x08001a79
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001ac1 	.word	0x08001ac1
 8001a4c:	08001ae5 	.word	0x08001ae5
 8001a50:	08001a9d 	.word	0x08001a9d
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <BLDC_Drive+0x46>
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fa6c 	bl	8001f3c <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 8001a64:	e064      	b.n	8001b30 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d15f      	bne.n	8001b30 <BLDC_Drive+0x110>
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f9bb 	bl	8001dec <BLDC_Step2>
			break;
 8001a76:	e05b      	b.n	8001b30 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <BLDC_Drive+0x6a>
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fa22 	bl	8001ecc <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8001a88:	e054      	b.n	8001b34 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d14f      	bne.n	8001b34 <BLDC_Drive+0x114>
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f971 	bl	8001d7c <BLDC_Step1>
			break;
 8001a9a:	e04b      	b.n	8001b34 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <BLDC_Drive+0x8e>
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f9d8 	bl	8001e5c <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8001aac:	e044      	b.n	8001b38 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13f      	bne.n	8001b38 <BLDC_Drive+0x118>
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa77 	bl	8001fac <BLDC_Step6>
			break;
 8001abe:	e03b      	b.n	8001b38 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <BLDC_Drive+0xb2>
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f98e 	bl	8001dec <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8001ad0:	e034      	b.n	8001b3c <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d12f      	bne.n	8001b3c <BLDC_Drive+0x11c>
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fa2d 	bl	8001f3c <BLDC_Step5>
			break;
 8001ae2:	e02b      	b.n	8001b3c <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <BLDC_Drive+0xd6>
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f944 	bl	8001d7c <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8001af4:	e024      	b.n	8001b40 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d11f      	bne.n	8001b40 <BLDC_Drive+0x120>
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f9e3 	bl	8001ecc <BLDC_Step4>
			break;
 8001b06:	e01b      	b.n	8001b40 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <BLDC_Drive+0xfa>
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fa4a 	bl	8001fac <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8001b18:	e014      	b.n	8001b44 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10f      	bne.n	8001b44 <BLDC_Drive+0x124>
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f999 	bl	8001e5c <BLDC_Step3>
			break;
 8001b2a:	e00b      	b.n	8001b44 <BLDC_Drive+0x124>
		}

		default :
			break;
 8001b2c:	bf00      	nop
 8001b2e:	e00a      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b30:	bf00      	nop
 8001b32:	e008      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b34:	bf00      	nop
 8001b36:	e006      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b38:	bf00      	nop
 8001b3a:	e004      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b3c:	bf00      	nop
 8001b3e:	e002      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <BLDC_Drive+0x126>
			break;
 8001b44:	bf00      	nop
	}
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8001b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc52 	bl	8000424 <__aeabi_i2d>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <BLDC_Get_Speed+0x94>)
 8001b86:	f7fe fcb7 	bl	80004f8 <__aeabi_dmul>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	4625      	mov	r5, r4
 8001b90:	461c      	mov	r4, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba0:	fb03 f302 	mul.w	r3, r3, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc3d 	bl	8000424 <__aeabi_i2d>
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <BLDC_Get_Speed+0x98>)
 8001bb0:	f7fe fca2 	bl	80004f8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fdc6 	bl	800074c <__aeabi_ddiv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bcc:	f7fe fdbe 	bl	800074c <__aeabi_ddiv>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	404e0000 	.word	0x404e0000
 8001be8:	40080000 	.word	0x40080000

08001bec <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	f200 8093 	bhi.w	8001d28 <BLDC_Get_Position+0x13c>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <BLDC_Get_Position+0x1c>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001cfd 	.word	0x08001cfd
 8001c0c:	08001c4d 	.word	0x08001c4d
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001ca5 	.word	0x08001ca5
 8001c18:	08001cd1 	.word	0x08001cd1
 8001c1c:	08001c79 	.word	0x08001c79
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d105      	bne.n	8001c36 <BLDC_Get_Position+0x4a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8001c34:	e07a      	b.n	8001d2c <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d175      	bne.n	8001d2c <BLDC_Get_Position+0x140>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001c4a:	e06f      	b.n	8001d2c <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d105      	bne.n	8001c62 <BLDC_Get_Position+0x76>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8001c60:	e066      	b.n	8001d30 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d161      	bne.n	8001d30 <BLDC_Get_Position+0x144>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001c76:	e05b      	b.n	8001d30 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d105      	bne.n	8001c8e <BLDC_Get_Position+0xa2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8001c8c:	e052      	b.n	8001d34 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d14d      	bne.n	8001d34 <BLDC_Get_Position+0x148>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001ca2:	e047      	b.n	8001d34 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d105      	bne.n	8001cba <BLDC_Get_Position+0xce>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8001cb8:	e03e      	b.n	8001d38 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d139      	bne.n	8001d38 <BLDC_Get_Position+0x14c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001cce:	e033      	b.n	8001d38 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <BLDC_Get_Position+0xfa>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8001ce4:	e02a      	b.n	8001d3c <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d125      	bne.n	8001d3c <BLDC_Get_Position+0x150>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001cfa:	e01f      	b.n	8001d3c <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d105      	bne.n	8001d12 <BLDC_Get_Position+0x126>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8001d10:	e016      	b.n	8001d40 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d111      	bne.n	8001d40 <BLDC_Get_Position+0x154>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8001d26:	e00b      	b.n	8001d40 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8001d28:	bf00      	nop
 8001d2a:	e00a      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d2c:	bf00      	nop
 8001d2e:	e008      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d30:	bf00      	nop
 8001d32:	e006      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d34:	bf00      	nop
 8001d36:	e004      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d38:	bf00      	nop
 8001d3a:	e002      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <BLDC_Get_Position+0x156>
			break;
 8001d40:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fb6c 	bl	8000424 <__aeabi_i2d>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001d52:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	f7fe fbcd 	bl	80004f8 <__aeabi_dmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <BLDC_Step1>:
	Delay_ms(10);
}


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <BLDC_Step1+0x6c>)
 8001d9e:	f7ff fc1d 	bl	80015dc <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0210 	orr.w	r2, r2, #16
 8001ddc:	621a      	str	r2, [r3, #32]
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40010c00 	.word	0x40010c00

08001dec <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <BLDC_Step2+0x6c>)
 8001e0e:	f7ff fbe5 	bl	80015dc <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e38:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a1a      	ldr	r2, [r3, #32]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0210 	orr.w	r2, r2, #16
 8001e4c:	621a      	str	r2, [r3, #32]
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40010c00 	.word	0x40010c00

08001e5c <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <BLDC_Step3+0x6c>)
 8001e7e:	f7ff fbad 	bl	80015dc <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0210 	bic.w	r2, r2, #16
 8001e94:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	621a      	str	r2, [r3, #32]
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <BLDC_Step4+0x6c>)
 8001eee:	f7ff fb75 	bl	80015dc <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0210 	bic.w	r2, r2, #16
 8001f04:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f18:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010c00 	.word	0x40010c00

08001f3c <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4812      	ldr	r0, [pc, #72]	; (8001fa8 <BLDC_Step5+0x6c>)
 8001f5e:	f7ff fb3d 	bl	80015dc <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0210 	bic.w	r2, r2, #16
 8001f88:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9c:	621a      	str	r2, [r3, #32]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010c00 	.word	0x40010c00

08001fac <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4812      	ldr	r0, [pc, #72]	; (8002018 <BLDC_Step6+0x6c>)
 8001fce:	f7ff fb05 	bl	80015dc <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0210 	bic.w	r2, r2, #16
 8001ff8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200c:	621a      	str	r2, [r3, #32]
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40010c00 	.word	0x40010c00

0800201c <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 8002028:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002030:	f7fe f8aa 	bl	8000188 <__aeabi_dsub>
 8002034:	4603      	mov	r3, r0
 8002036:	460c      	mov	r4, r1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800204a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800204e:	461a      	mov	r2, r3
 8002050:	4623      	mov	r3, r4
 8002052:	f7fe fa51 	bl	80004f8 <__aeabi_dmul>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002072:	f7fe fa41 	bl	80004f8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002082:	f7fe fa39 	bl	80004f8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe f87d 	bl	800018c <__adddf3>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80020ae:	f7fe f86b 	bl	8000188 <__aeabi_dsub>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	f7fe fa1d 	bl	80004f8 <__aeabi_dmul>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	4618      	mov	r0, r3
 80020c4:	4621      	mov	r1, r4
 80020c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ca:	f7fe fb3f 	bl	800074c <__aeabi_ddiv>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80020e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	f7fe f84e 	bl	800018c <__adddf3>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	4618      	mov	r0, r3
 80020f6:	4621      	mov	r1, r4
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80020fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002102:	461a      	mov	r2, r3
 8002104:	4623      	mov	r3, r4
 8002106:	f7fe f841 	bl	800018c <__adddf3>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800211a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bdb0      	pop	{r4, r5, r7, pc}

0800212c <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af04      	add	r7, sp, #16
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002144:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002148:	e9d7 1200 	ldrd	r1, r2, [r7]
 800214c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002150:	e9cd 3400 	strd	r3, r4, [sp]
 8002154:	462a      	mov	r2, r5
 8002156:	4633      	mov	r3, r6
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff ff5f 	bl	800201c <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	f7fe fc4a 	bl	8000a04 <__aeabi_dcmpge>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <BLDC_SpeedPID+0x54>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800217e:	e00f      	b.n	80021a0 <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f7fe fc25 	bl	80009dc <__aeabi_dcmplt>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <BLDC_SpeedPID+0x74>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80021a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	4621      	mov	r1, r4
 80021ae:	f7fe fc53 	bl	8000a58 <__aeabi_d2iz>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bfb8      	it	lt
 80021b8:	425b      	neglt	r3, r3
 80021ba:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 80021bc:	8afb      	ldrh	r3, [r7, #22]
 80021be:	2b5f      	cmp	r3, #95	; 0x5f
 80021c0:	d901      	bls.n	80021c6 <BLDC_SpeedPID+0x9a>
 80021c2:	235f      	movs	r3, #95	; 0x5f
 80021c4:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 80021c6:	8afb      	ldrh	r3, [r7, #22]
 80021c8:	4619      	mov	r1, r3
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 ff42 	bl	8003054 <SetPwmDuty>
}
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d8 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021dc:	b08f      	sub	sp, #60	; 0x3c
 80021de:	af04      	add	r7, sp, #16
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24
 80021e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 80021e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ec:	f000 f8b2 	bl	8002354 <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	//BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80021fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002200:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002204:	e9cd 1200 	strd	r1, r2, [sp]
 8002208:	462a      	mov	r2, r5
 800220a:	4633      	mov	r3, r6
 800220c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800220e:	f7ff ff05 	bl	800201c <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <BLDC_PositionPID+0x174>)
 800221a:	cb18      	ldmia	r3, {r3, r4}
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	f7fe fbfa 	bl	8000a18 <__aeabi_dcmpgt>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <BLDC_PositionPID+0x5e>
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <BLDC_PositionPID+0x174>)
 800222c:	cb18      	ldmia	r3, {r3, r4}
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 8002234:	e017      	b.n	8002266 <BLDC_PositionPID+0x8e>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <BLDC_PositionPID+0x174>)
 800223e:	cb18      	ldmia	r3, {r3, r4}
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800224c:	f7fe fbc6 	bl	80009dc <__aeabi_dcmplt>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <BLDC_PositionPID+0x8e>
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <BLDC_PositionPID+0x174>)
 8002258:	cb18      	ldmia	r3, {r3, r4}
 800225a:	469a      	mov	sl, r3
 800225c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	f7fe fbc6 	bl	8000a04 <__aeabi_dcmpge>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d024      	beq.n	80022c8 <BLDC_PositionPID+0xf0>
	{
		pBLDCHandle->RotationDir = CW;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <BLDC_PositionPID+0x178>)
 800228e:	cb18      	ldmia	r3, {r3, r4}
 8002290:	461a      	mov	r2, r3
 8002292:	4623      	mov	r3, r4
 8002294:	f7fe fba2 	bl	80009dc <__aeabi_dcmplt>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <BLDC_PositionPID+0xd0>
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <BLDC_PositionPID+0x178>)
 80022a0:	cb18      	ldmia	r3, {r3, r4}
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80022ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	4621      	mov	r1, r4
 80022b6:	f7fe fbf7 	bl	8000aa8 <__aeabi_d2uiz>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022c2:	f000 fec7 	bl	8003054 <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 80022c6:	e03b      	b.n	8002340 <BLDC_PositionPID+0x168>
	else if(pBLDCHandle->PwmPID < 0)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	f7fe fb81 	bl	80009dc <__aeabi_dcmplt>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d100      	bne.n	80022e2 <BLDC_PositionPID+0x10a>
}
 80022e0:	e02e      	b.n	8002340 <BLDC_PositionPID+0x168>
		pBLDCHandle->RotationDir = CCW;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <BLDC_PositionPID+0x178>)
 80022f2:	cb18      	ldmia	r3, {r3, r4}
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002300:	f7fe fb8a 	bl	8000a18 <__aeabi_dcmpgt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <BLDC_PositionPID+0x142>
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <BLDC_PositionPID+0x178>)
 800230c:	cb18      	ldmia	r3, {r3, r4}
 800230e:	4698      	mov	r8, r3
 8002310:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8002320:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002330:	f7fe fbba 	bl	8000aa8 <__aeabi_d2uiz>
 8002334:	4603      	mov	r3, r0
 8002336:	b29b      	uxth	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800233c:	f000 fe8a 	bl	8003054 <SetPwmDuty>
}
 8002340:	bf00      	nop
 8002342:	372c      	adds	r7, #44	; 0x2c
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000
 8002350:	200001f8 	.word	0x200001f8

08002354 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8002354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002358:	b08d      	sub	sp, #52	; 0x34
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800236e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	f7fd ff07 	bl	8000188 <__aeabi_dsub>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800238e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002392:	461a      	mov	r2, r3
 8002394:	4623      	mov	r3, r4
 8002396:	f7fe f8af 	bl	80004f8 <__aeabi_dmul>
 800239a:	4603      	mov	r3, r0
 800239c:	460c      	mov	r4, r1
 800239e:	4618      	mov	r0, r3
 80023a0:	4621      	mov	r1, r4
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	4baa      	ldr	r3, [pc, #680]	; (8002650 <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80023a8:	f7fe f8a6 	bl	80004f8 <__aeabi_dmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80023ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023be:	461a      	mov	r2, r3
 80023c0:	4623      	mov	r3, r4
 80023c2:	f7fe f9c3 	bl	800074c <__aeabi_ddiv>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80023da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023de:	461a      	mov	r2, r3
 80023e0:	4623      	mov	r3, r4
 80023e2:	f7fd fed1 	bl	8000188 <__aeabi_dsub>
 80023e6:	4603      	mov	r3, r0
 80023e8:	460c      	mov	r4, r1
 80023ea:	e9c7 3404 	strd	r3, r4, [r7, #16]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023fa:	f7fe fb03 	bl	8000a04 <__aeabi_dcmpge>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <BLDC_CalculateTrajectoryPosition+0xb6>
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002408:	e00c      	b.n	8002424 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002416:	f7fe fae1 	bl	80009dc <__aeabi_dcmplt>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <BLDC_CalculateTrajectoryPosition+0xd0>
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b89      	ldr	r3, [pc, #548]	; (8002650 <BLDC_CalculateTrajectoryPosition+0x2fc>)
 800242a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800242e:	f7fe f863 	bl	80004f8 <__aeabi_dmul>
 8002432:	4603      	mov	r3, r0
 8002434:	460c      	mov	r4, r1
 8002436:	461a      	mov	r2, r3
 8002438:	4623      	mov	r3, r4
 800243a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800243e:	f7fe facd 	bl	80009dc <__aeabi_dcmplt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d029      	beq.n	800249c <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002454:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002458:	461a      	mov	r2, r3
 800245a:	4623      	mov	r3, r4
 800245c:	f7fd fe94 	bl	8000188 <__aeabi_dsub>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800246c:	f7fe fad4 	bl	8000a18 <__aeabi_dcmpgt>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <BLDC_CalculateTrajectoryPosition+0x128>
 8002476:	2301      	movs	r3, #1
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
 800247a:	e049      	b.n	8002510 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 800247c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002480:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002484:	f7fe fac8 	bl	8000a18 <__aeabi_dcmpgt>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <BLDC_CalculateTrajectoryPosition+0x140>
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
 8002492:	e03d      	b.n	8002510 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
 800249a:	e039      	b.n	8002510 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80024a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024a6:	f7fe f827 	bl	80004f8 <__aeabi_dmul>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	461a      	mov	r2, r3
 80024b0:	4623      	mov	r3, r4
 80024b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024b6:	f7fe faa5 	bl	8000a04 <__aeabi_dcmpge>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d027      	beq.n	8002510 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80024cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	f7fd fe58 	bl	8000188 <__aeabi_dsub>
 80024d8:	4603      	mov	r3, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	4698      	mov	r8, r3
 80024de:	46a1      	mov	r9, r4
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80024e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ea:	f7fe f805 	bl	80004f8 <__aeabi_dmul>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	461a      	mov	r2, r3
 80024f4:	4623      	mov	r3, r4
 80024f6:	4640      	mov	r0, r8
 80024f8:	4649      	mov	r1, r9
 80024fa:	f7fe fa6f 	bl	80009dc <__aeabi_dcmplt>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <BLDC_CalculateTrajectoryPosition+0x1b6>
 8002504:	2301      	movs	r3, #1
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	e002      	b.n	8002510 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	switch (accelDir)
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <BLDC_CalculateTrajectoryPosition+0x1e8>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d003      	beq.n	8002522 <BLDC_CalculateTrajectoryPosition+0x1ce>
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d015      	beq.n	800254c <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 8002520:	e028      	b.n	8002574 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8002528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252c:	f7fd ffe4 	bl	80004f8 <__aeabi_dmul>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800253a:	e01b      	b.n	8002574 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800254a:	e013      	b.n	8002574 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002552:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002556:	461d      	mov	r5, r3
 8002558:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800255c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002560:	4628      	mov	r0, r5
 8002562:	4631      	mov	r1, r6
 8002564:	f7fd ffc8 	bl	80004f8 <__aeabi_dmul>
 8002568:	4603      	mov	r3, r0
 800256a:	460c      	mov	r4, r1
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8002572:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8002580:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	f7fd fe00 	bl	800018c <__adddf3>
 800258c:	4603      	mov	r3, r0
 800258e:	460c      	mov	r4, r1
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <BLDC_CalculateTrajectoryPosition+0x24e>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d059      	beq.n	8002654 <BLDC_CalculateTrajectoryPosition+0x300>

			break;
		}

		default :
			break;
 80025a0:	e0ae      	b.n	8002700 <BLDC_CalculateTrajectoryPosition+0x3ac>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80025ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	f7fe fa25 	bl	8000a04 <__aeabi_dcmpge>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d016      	beq.n	80025ee <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	f04f 0400 	mov.w	r4, #0
 80025ca:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80025e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80025ec:	e088      	b.n	8002700 <BLDC_CalculateTrajectoryPosition+0x3ac>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80025fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025fe:	f7fd ff7b 	bl	80004f8 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	f7fd fdba 	bl	800018c <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8002626:	f7fd fdaf 	bl	8000188 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4640      	mov	r0, r8
 8002630:	4649      	mov	r1, r9
 8002632:	f7fd ff61 	bl	80004f8 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	f7fd fda5 	bl	800018c <__adddf3>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800264c:	e058      	b.n	8002700 <BLDC_CalculateTrajectoryPosition+0x3ac>
 800264e:	bf00      	nop
 8002650:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002660:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002664:	461a      	mov	r2, r3
 8002666:	4623      	mov	r3, r4
 8002668:	f7fe f9c2 	bl	80009f0 <__aeabi_dcmple>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <BLDC_CalculateTrajectoryPosition+0x34c>
				pBLDCHandle->TrjCurSpeed = 0;
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	f04f 0400 	mov.w	r4, #0
 800267c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002694:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 800269e:	e02e      	b.n	80026fe <BLDC_CalculateTrajectoryPosition+0x3aa>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <BLDC_CalculateTrajectoryPosition+0x3b8>)
 80026ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026b0:	f7fd ff22 	bl	80004f8 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4690      	mov	r8, r2
 80026ba:	4699      	mov	r9, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	f7fd fd61 	bl	800018c <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80026d8:	f7fd fd56 	bl	8000188 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4640      	mov	r0, r8
 80026e2:	4649      	mov	r1, r9
 80026e4:	f7fd ff08 	bl	80004f8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fd4c 	bl	800018c <__adddf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 80026fe:	bf00      	nop
	}
}
 8002700:	bf00      	nop
 8002702:	3734      	adds	r7, #52	; 0x34
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800270a:	bf00      	nop
 800270c:	3fe00000 	.word	0x3fe00000

08002710 <SystemClock_Config>:
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
}


void SystemClock_Config(uint8_t clockFreq)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b092      	sub	sp, #72	; 0x48
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	2228      	movs	r2, #40	; 0x28
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fd03 	bl	8003134 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2214      	movs	r2, #20
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fcfc 	bl	8003134 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273c:	2301      	movs	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8002740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002744:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800274a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8002750:	2302      	movs	r3, #2
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	3b10      	subs	r3, #16
 8002758:	2b38      	cmp	r3, #56	; 0x38
 800275a:	f200 8101 	bhi.w	8002960 <SystemClock_Config+0x250>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <SystemClock_Config+0x54>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002849 	.word	0x08002849
 8002768:	08002961 	.word	0x08002961
 800276c:	08002961 	.word	0x08002961
 8002770:	08002961 	.word	0x08002961
 8002774:	08002961 	.word	0x08002961
 8002778:	08002961 	.word	0x08002961
 800277c:	08002961 	.word	0x08002961
 8002780:	08002961 	.word	0x08002961
 8002784:	08002869 	.word	0x08002869
 8002788:	08002961 	.word	0x08002961
 800278c:	08002961 	.word	0x08002961
 8002790:	08002961 	.word	0x08002961
 8002794:	08002961 	.word	0x08002961
 8002798:	08002961 	.word	0x08002961
 800279c:	08002961 	.word	0x08002961
 80027a0:	08002961 	.word	0x08002961
 80027a4:	0800288b 	.word	0x0800288b
 80027a8:	08002961 	.word	0x08002961
 80027ac:	08002961 	.word	0x08002961
 80027b0:	08002961 	.word	0x08002961
 80027b4:	08002961 	.word	0x08002961
 80027b8:	08002961 	.word	0x08002961
 80027bc:	08002961 	.word	0x08002961
 80027c0:	08002961 	.word	0x08002961
 80027c4:	080028ad 	.word	0x080028ad
 80027c8:	08002961 	.word	0x08002961
 80027cc:	08002961 	.word	0x08002961
 80027d0:	08002961 	.word	0x08002961
 80027d4:	08002961 	.word	0x08002961
 80027d8:	08002961 	.word	0x08002961
 80027dc:	08002961 	.word	0x08002961
 80027e0:	08002961 	.word	0x08002961
 80027e4:	080028d1 	.word	0x080028d1
 80027e8:	08002961 	.word	0x08002961
 80027ec:	08002961 	.word	0x08002961
 80027f0:	08002961 	.word	0x08002961
 80027f4:	08002961 	.word	0x08002961
 80027f8:	08002961 	.word	0x08002961
 80027fc:	08002961 	.word	0x08002961
 8002800:	08002961 	.word	0x08002961
 8002804:	080028f5 	.word	0x080028f5
 8002808:	08002961 	.word	0x08002961
 800280c:	08002961 	.word	0x08002961
 8002810:	08002961 	.word	0x08002961
 8002814:	08002961 	.word	0x08002961
 8002818:	08002961 	.word	0x08002961
 800281c:	08002961 	.word	0x08002961
 8002820:	08002961 	.word	0x08002961
 8002824:	08002919 	.word	0x08002919
 8002828:	08002961 	.word	0x08002961
 800282c:	08002961 	.word	0x08002961
 8002830:	08002961 	.word	0x08002961
 8002834:	08002961 	.word	0x08002961
 8002838:	08002961 	.word	0x08002961
 800283c:	08002961 	.word	0x08002961
 8002840:	08002961 	.word	0x08002961
 8002844:	0800293d 	.word	0x0800293d
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8002848:	2300      	movs	r3, #0
 800284a:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800284c:	230f      	movs	r3, #15
 800284e:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002850:	2302      	movs	r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002866:	e07c      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8002868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800286c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286e:	230f      	movs	r3, #15
 8002870:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002872:	2302      	movs	r3, #2
 8002874:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002888:	e06b      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 800288a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800288e:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002890:	230f      	movs	r3, #15
 8002892:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002894:	2302      	movs	r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80028aa:	e05a      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 80028ac:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028b2:	230f      	movs	r3, #15
 80028b4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b6:	2302      	movs	r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 80028be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80028ce:	e048      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 80028d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028d6:	230f      	movs	r3, #15
 80028d8:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028da:	2302      	movs	r3, #2
 80028dc:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80028f2:	e036      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 80028f4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028fa:	230f      	movs	r3, #15
 80028fc:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028fe:	2302      	movs	r3, #2
 8002900:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8002906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8002916:	e024      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8002918:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800291c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800291e:	230f      	movs	r3, #15
 8002920:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002922:	2302      	movs	r3, #2
 8002924:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 800292a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002934:	2302      	movs	r3, #2
 8002936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800293a:	e012      	b.n	8002962 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 800293c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002940:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002942:	230f      	movs	r3, #15
 8002944:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002946:	2302      	movs	r3, #2
 8002948:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 800294e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002952:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8002958:	2302      	movs	r3, #2
 800295a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800295e:	e000      	b.n	8002962 <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8002960:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fe6e 	bl	8001648 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 800296c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe feb6 	bl	80016e8 <RCC_ClockConfig>
}
 800297c:	bf00      	nop
 800297e:	3748      	adds	r7, #72	; 0x48
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <Delay_us>:
//}



void Delay_us(uint32_t time_us)
{
 8002984:	b4b0      	push	{r4, r5, r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 800298c:	2400      	movs	r4, #0
 800298e:	e006      	b.n	800299e <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8002990:	2500      	movs	r5, #0
 8002992:	e001      	b.n	8002998 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8002994:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8002996:	3501      	adds	r5, #1
 8002998:	2d4c      	cmp	r5, #76	; 0x4c
 800299a:	d9fb      	bls.n	8002994 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 800299c:	3401      	adds	r4, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <Delay_us+0x34>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	429c      	cmp	r4, r3
 80029aa:	d3f1      	bcc.n	8002990 <Delay_us+0xc>
		}
	}
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bcb0      	pop	{r4, r5, r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	cccccccd 	.word	0xcccccccd

080029bc <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ffd8 	bl	8002984 <Delay_us>
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM6_IRQHandler+0x10>)
 80029e2:	f7fe ff69 	bl	80018b8 <TIM_IRQHandling>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200004a8 	.word	0x200004a8

080029f0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <EXTI9_5_IRQHandler+0x14>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fe09 	bl	8001610 <EXTI_IRQHandling>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000280 	.word	0x20000280

08002a08 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <DMA1_Channel7_IRQHandler>:


void DMA1_Channel7_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART2Handle.hdmatx);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <DMA1_Channel7_IRQHandler+0x14>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f8c1 	bl	8000ba4 <DMA_IRQ_Handling>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200003d4 	.word	0x200003d4

08002a2c <main>:
 */

#include "main.h"

int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8002a32:	2048      	movs	r0, #72	; 0x48
 8002a34:	f7ff fe6c 	bl	8002710 <SystemClock_Config>
	Delay_ms(100);
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	f7ff ffbf 	bl	80029bc <Delay_ms>

	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8002a3e:	223c      	movs	r2, #60	; 0x3c
 8002a40:	2100      	movs	r1, #0
 8002a42:	4821      	ldr	r0, [pc, #132]	; (8002ac8 <main+0x9c>)
 8002a44:	f000 fb76 	bl	8003134 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8002a48:	2230      	movs	r2, #48	; 0x30
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	481f      	ldr	r0, [pc, #124]	; (8002acc <main+0xa0>)
 8002a4e:	f000 fb71 	bl	8003134 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8002a52:	2254      	movs	r2, #84	; 0x54
 8002a54:	2100      	movs	r1, #0
 8002a56:	481e      	ldr	r0, [pc, #120]	; (8002ad0 <main+0xa4>)
 8002a58:	f000 fb6c 	bl	8003134 <memset>
	Delay_ms(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f7ff ffad 	bl	80029bc <Delay_ms>

	RCC_AFIO_CLK_ENABLE();
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <main+0xa8>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <main+0xa8>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <main+0xac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <main+0xac>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6053      	str	r3, [r2, #4]

	//TFT1_Init();
	TS1_Init();
 8002a8a:	f000 f975 	bl	8002d78 <TS1_Init>
	SPI_ENABLE(&SPI2Handle);
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <main+0xa4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <main+0xa4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9c:	601a      	str	r2, [r3, #0]

	Delay_ms(1000);
 8002a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aa2:	f7ff ff8b 	bl	80029bc <Delay_ms>
//	TFT_String(&TFT1Handle, 6, 2, White, Black, (uint8_t *)"Hello World!");
//	TFT_String(&TFT1Handle, 25, 2, White, Black, (uint8_t *)"Nice to meet you!");

//	Test_Init();

	TFT1Handle.foreground = White;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <main+0x9c>)
 8002aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aac:	86da      	strh	r2, [r3, #54]	; 0x36
	TFT1Handle.background = Black;
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <main+0x9c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	871a      	strh	r2, [r3, #56]	; 0x38

	uint16_t x_data;

	while(1)
	{
		x_data = TS_Read_ADS7846(0x00D0);
 8002ab4:	20d0      	movs	r0, #208	; 0xd0
 8002ab6:	f000 f923 	bl	8002d00 <TS_Read_ADS7846>
 8002aba:	4603      	mov	r3, r0
 8002abc:	807b      	strh	r3, [r7, #2]

		Delay_ms(10);
 8002abe:	200a      	movs	r0, #10
 8002ac0:	f7ff ff7c 	bl	80029bc <Delay_ms>
		x_data = TS_Read_ADS7846(0x00D0);
 8002ac4:	e7f6      	b.n	8002ab4 <main+0x88>
 8002ac6:	bf00      	nop
 8002ac8:	20000378 	.word	0x20000378
 8002acc:	20000250 	.word	0x20000250
 8002ad0:	20000454 	.word	0x20000454
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000

08002adc <TS_MspInit>:
	}
}


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	2210      	movs	r2, #16
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fb21 	bl	8003134 <memset>

	if(pTSHandle->Instance == TS1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d178      	bne.n	8002bec <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a3d      	ldr	r2, [pc, #244]	; (8002bf4 <TS_MspInit+0x118>)
 8002afe:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2208      	movs	r2, #8
 8002b04:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2210      	movs	r2, #16
 8002b0a:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f107 0208 	add.w	r2, r7, #8
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fafb 	bl	8001120 <GPIO_Init>
		Delay_ms(10);
 8002b2a:	200a      	movs	r0, #10
 8002b2c:	f7ff ff46 	bl	80029bc <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6858      	ldr	r0, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe fd2f 	bl	80015a0 <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	2210      	movs	r2, #16
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 faf2 	bl	8003134 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f107 0208 	add.w	r2, r7, #8
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fad9 	bl	8001120 <GPIO_Init>
		Delay_ms(10);
 8002b6e:	200a      	movs	r0, #10
 8002b70:	f7ff ff24 	bl	80029bc <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6858      	ldr	r0, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fe fd0d 	bl	80015a0 <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <TS_MspInit+0x11c>)
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <TS_MspInit+0x120>)
 8002b92:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b9c:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bae:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc8:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2218      	movs	r2, #24
 8002bd0:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fdc0 	bl	800176c <SPI_Init>
	}
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40010c00 	.word	0x40010c00
 8002bf8:	20000454 	.word	0x20000454
 8002bfc:	40003800 	.word	0x40003800

08002c00 <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2214      	movs	r2, #20
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fa8f 	bl	8003134 <memset>

	if(pSPIHandle->Instance == SPI2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <SPI_MspInit+0x88>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d128      	bne.n	8002c72 <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <SPI_MspInit+0x8c>)
 8002c22:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 8002c24:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c28:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	3304      	adds	r3, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe fa6f 	bl	8001120 <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2214      	movs	r2, #20
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa72 	bl	8003134 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <SPI_MspInit+0x8c>)
 8002c52:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8002c54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c58:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f7fe fa57 	bl	8001120 <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fdc3 	bl	8001804 <SPI_PeripheralClockControl>
}
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40003800 	.word	0x40003800
 8002c8c:	40010c00 	.word	0x40010c00

08002c90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <_sbrk+0x50>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x16>
		heap_end = &end;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <_sbrk+0x50>)
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <_sbrk+0x54>)
 8002ca4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <_sbrk+0x50>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <_sbrk+0x50>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	466a      	mov	r2, sp
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d907      	bls.n	8002cca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cba:	f000 fa11 	bl	80030e0 <__errno>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	e006      	b.n	8002cd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <_sbrk+0x50>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <_sbrk+0x50>)
 8002cd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000200 	.word	0x20000200
 8002ce4:	200004d0 	.word	0x200004d0

08002ce8 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fef3 	bl	8002adc <TS_MspInit>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <TS_Read_ADS7846>:


uint16_t TS_Read_ADS7846(uint16_t command)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
	uint16_t axis;

	axis = SPI2->DR;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2108      	movs	r1, #8
 8002d14:	4817      	ldr	r0, [pc, #92]	; (8002d74 <TS_Read_ADS7846+0x74>)
 8002d16:	f7fe fc43 	bl	80015a0 <GPIO_WritePin>
	SPI2->DR = command;
 8002d1a:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	60d3      	str	r3, [r2, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 8002d20:	bf00      	nop
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d1f9      	bne.n	8002d22 <TS_Read_ADS7846+0x22>
	axis = SPI2->DR;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	81fb      	strh	r3, [r7, #14]
	Delay_us(1);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff fe25 	bl	8002984 <Delay_us>
	SPI2->DR = 0x0000;
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 8002d40:	bf00      	nop
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d1f9      	bne.n	8002d42 <TS_Read_ADS7846+0x42>
	axis = SPI2->DR;
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <TS_Read_ADS7846+0x70>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2108      	movs	r1, #8
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <TS_Read_ADS7846+0x74>)
 8002d5a:	f7fe fc21 	bl	80015a0 <GPIO_WritePin>

	axis >>= 3;
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	81fb      	strh	r3, [r7, #14]

	return axis;
 8002d64:	89fb      	ldrh	r3, [r7, #14]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40003800 	.word	0x40003800
 8002d74:	40010c00 	.word	0x40010c00

08002d78 <TS1_Init>:
	TFT_Init(&TFT1Handle);
}


void TS1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <TS1_Init+0x58>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <TS1_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <TS1_Init+0x58>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <TS1_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <TS1_Init+0x58>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <TS1_Init+0x58>)
 8002d9c:	22fa      	movs	r2, #250	; 0xfa
 8002d9e:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <TS1_Init+0x58>)
 8002da2:	f640 6274 	movw	r2, #3700	; 0xe74
 8002da6:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <TS1_Init+0x58>)
 8002daa:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002dae:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <TS1_Init+0x58>)
 8002db2:	f640 62a6 	movw	r2, #3750	; 0xea6
 8002db6:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <TS1_Init+0x58>)
 8002dba:	22d0      	movs	r2, #208	; 0xd0
 8002dbc:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <TS1_Init+0x58>)
 8002dc0:	2290      	movs	r2, #144	; 0x90
 8002dc2:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <TS1_Init+0x58>)
 8002dc6:	f7ff ff8f 	bl	8002ce8 <TS_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000250 	.word	0x20000250
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(ButtonFlag == FLAG_RESET)
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <TIM_PeriodElapsedCallback+0x210>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_7);
 8002de8:	4b80      	ldr	r3, [pc, #512]	; (8002fec <TIM_PeriodElapsedCallback+0x214>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002df2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <TIM_PeriodElapsedCallback+0x28>
		{
			ButtonFlag = FLAG_SET;
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <TIM_PeriodElapsedCallback+0x210>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <TIM_PeriodElapsedCallback+0x218>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f040 80e0 	bne.w	8002fcc <TIM_PeriodElapsedCallback+0x1f4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 8002e0c:	4b79      	ldr	r3, [pc, #484]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 8097 	bne.w	8002f46 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 8002e18:	4b77      	ldr	r3, [pc, #476]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b63      	cmp	r3, #99	; 0x63
 8002e1e:	f340 80a0 	ble.w	8002f62 <TIM_PeriodElapsedCallback+0x18a>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8002e22:	a36d      	add	r3, pc, #436	; (adr r3, 8002fd8 <TIM_PeriodElapsedCallback+0x200>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	4872      	ldr	r0, [pc, #456]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002e2a:	f7fe fe91 	bl	8001b50 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 8002e2e:	a36a      	add	r3, pc, #424	; (adr r3, 8002fd8 <TIM_PeriodElapsedCallback+0x200>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	486f      	ldr	r0, [pc, #444]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002e36:	f7ff f979 	bl	800212c <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART2 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002e3c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002e40:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	4621      	mov	r1, r4
 8002e48:	f7fd fe06 	bl	8000a58 <__aeabi_d2iz>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8002e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfb8      	it	lt
 8002e58:	425b      	neglt	r3, r3
 8002e5a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 8002e5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db02      	blt.n	8002e6a <TIM_PeriodElapsedCallback+0x92>
 8002e64:	232b      	movs	r3, #43	; 0x2b
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e005      	b.n	8002e76 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 8002e6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da01      	bge.n	8002e76 <TIM_PeriodElapsedCallback+0x9e>
 8002e72:	232d      	movs	r3, #45	; 0x2d
 8002e74:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8002e76:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 8002e7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e80:	4a5f      	ldr	r2, [pc, #380]	; (8003000 <TIM_PeriodElapsedCallback+0x228>)
 8002e82:	fb82 1203 	smull	r1, r2, r2, r3
 8002e86:	1192      	asrs	r2, r2, #6
 8002e88:	17db      	asrs	r3, r3, #31
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3330      	adds	r3, #48	; 0x30
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002e96:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8002e98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <TIM_PeriodElapsedCallback+0x228>)
 8002e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002ea2:	1191      	asrs	r1, r2, #6
 8002ea4:	17da      	asrs	r2, r3, #31
 8002ea6:	1a8a      	subs	r2, r1, r2
 8002ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eac:	fb01 f202 	mul.w	r2, r1, r2
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	4a53      	ldr	r2, [pc, #332]	; (8003004 <TIM_PeriodElapsedCallback+0x22c>)
 8002eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8002eba:	1152      	asrs	r2, r2, #5
 8002ebc:	17db      	asrs	r3, r3, #31
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3330      	adds	r3, #48	; 0x30
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002eca:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 8002ecc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	; (8003004 <TIM_PeriodElapsedCallback+0x22c>)
 8002ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed6:	1151      	asrs	r1, r2, #5
 8002ed8:	17da      	asrs	r2, r3, #31
 8002eda:	1a8a      	subs	r2, r1, r2
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 f202 	mul.w	r2, r1, r2
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4a48      	ldr	r2, [pc, #288]	; (8003008 <TIM_PeriodElapsedCallback+0x230>)
 8002ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8002eec:	1092      	asrs	r2, r2, #2
 8002eee:	17db      	asrs	r3, r3, #31
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3330      	adds	r3, #48	; 0x30
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002efc:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 8002efe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <TIM_PeriodElapsedCallback+0x230>)
 8002f04:	fb83 1302 	smull	r1, r3, r3, r2
 8002f08:	1099      	asrs	r1, r3, #2
 8002f0a:	17d3      	asrs	r3, r2, #31
 8002f0c:	1ac9      	subs	r1, r1, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b21b      	sxth	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3330      	adds	r3, #48	; 0x30
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002f22:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002f26:	220a      	movs	r2, #10
 8002f28:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART2Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 8002f2a:	4834      	ldr	r0, [pc, #208]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002f2c:	f7fd f920 	bl	8000170 <strlen>
 8002f30:	4603      	mov	r3, r0
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4931      	ldr	r1, [pc, #196]	; (8002ffc <TIM_PeriodElapsedCallback+0x224>)
 8002f38:	4834      	ldr	r0, [pc, #208]	; (800300c <TIM_PeriodElapsedCallback+0x234>)
 8002f3a:	f7fe fce3 	bl	8001904 <UART_Transmit_DMA>

				count = 0;
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e00d      	b.n	8002f62 <TIM_PeriodElapsedCallback+0x18a>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d108      	bne.n	8002f62 <TIM_PeriodElapsedCallback+0x18a>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8002f50:	a323      	add	r3, pc, #140	; (adr r3, 8002fe0 <TIM_PeriodElapsedCallback+0x208>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	4827      	ldr	r0, [pc, #156]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f58:	f7ff f93e 	bl	80021d8 <BLDC_PositionPID>

			startFlag = FLAG_SET;
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <TIM_PeriodElapsedCallback+0x238>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
		}



		/* Transmit Motor Position value to PC through UART2 */
		if(count >= 2)		// Every 2ms
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	dd2b      	ble.n	8002fc2 <TIM_PeriodElapsedCallback+0x1ea>
		{
			if(BLDC1Handle.RotationDir == CW)			sign = '+';
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <TIM_PeriodElapsedCallback+0x1a2>
 8002f74:	232b      	movs	r3, #43	; 0x2b
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e006      	b.n	8002f88 <TIM_PeriodElapsedCallback+0x1b0>
			else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <TIM_PeriodElapsedCallback+0x1b0>
 8002f84:	232d      	movs	r3, #45	; 0x2d
 8002f86:	73fb      	strb	r3, [r7, #15]

			//sprintf(Msg1, "%.2lf, %.2lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
			sprintf(Msg1, "%.2lf,%.2lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition);	// To see the case of TrjCurPosition
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f8a:	e9d3 1222 	ldrd	r1, r2, [r3, #136]	; 0x88
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <TIM_PeriodElapsedCallback+0x21c>)
 8002f90:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002f94:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f98:	e9cd 3400 	strd	r3, r4, [sp]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	491c      	ldr	r1, [pc, #112]	; (8003014 <TIM_PeriodElapsedCallback+0x23c>)
 8002fa2:	481d      	ldr	r0, [pc, #116]	; (8003018 <TIM_PeriodElapsedCallback+0x240>)
 8002fa4:	f000 fd1e 	bl	80039e4 <siprintf>

			UART_Transmit_DMA(&UART2Handle, (uint8_t*)Msg1, strlen((char*)Msg1));
 8002fa8:	481b      	ldr	r0, [pc, #108]	; (8003018 <TIM_PeriodElapsedCallback+0x240>)
 8002faa:	f7fd f8e1 	bl	8000170 <strlen>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4918      	ldr	r1, [pc, #96]	; (8003018 <TIM_PeriodElapsedCallback+0x240>)
 8002fb6:	4815      	ldr	r0, [pc, #84]	; (800300c <TIM_PeriodElapsedCallback+0x234>)
 8002fb8:	f7fe fca4 	bl	8001904 <UART_Transmit_DMA>

			count = 0;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
		}

		count++;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <TIM_PeriodElapsedCallback+0x220>)
 8002fca:	6013      	str	r3, [r2, #0]
	}
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	9999999a 	.word	0x9999999a
 8002fdc:	3fb99999 	.word	0x3fb99999
 8002fe0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fe4:	3f50624d 	.word	0x3f50624d
 8002fe8:	20000204 	.word	0x20000204
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	40001000 	.word	0x40001000
 8002ff4:	20000280 	.word	0x20000280
 8002ff8:	20000244 	.word	0x20000244
 8002ffc:	20000208 	.word	0x20000208
 8003000:	10624dd3 	.word	0x10624dd3
 8003004:	51eb851f 	.word	0x51eb851f
 8003008:	66666667 	.word	0x66666667
 800300c:	200003d4 	.word	0x200003d4
 8003010:	20000242 	.word	0x20000242
 8003014:	080051d8 	.word	0x080051d8
 8003018:	20000210 	.word	0x20000210

0800301c <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 6U;
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <EXTI_Callback+0x30>)
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <EXTI_Callback+0x34>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <EXTI_Callback+0x34>)
 8003034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 8003038:	4805      	ldr	r0, [pc, #20]	; (8003050 <EXTI_Callback+0x34>)
 800303a:	f7fe fdd7 	bl	8001bec <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <EXTI_Callback+0x34>)
 8003040:	f7fe fcee 	bl	8001a20 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40011000 	.word	0x40011000
 8003050:	20000280 	.word	0x20000280

08003054 <SetPwmDuty>:
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800308e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003092:	490e      	ldr	r1, [pc, #56]	; (80030cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <LoopForever+0xe>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003098:	e002      	b.n	80030a0 <LoopCopyDataInit>

0800309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309e:	3304      	adds	r3, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a4:	d3f9      	bcc.n	800309a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030a8:	4c0b      	ldr	r4, [pc, #44]	; (80030d8 <LoopForever+0x16>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ac:	e001      	b.n	80030b2 <LoopFillZerobss>

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b0:	3204      	adds	r2, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80030ba:	f000 f817 	bl	80030ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030be:	f7ff fcb5 	bl	8002a2c <main>

080030c2 <LoopForever>:

LoopForever:
    b LoopForever
 80030c2:	e7fe      	b.n	80030c2 <LoopForever>
  ldr   r0, =_estack
 80030c4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030d0:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 80030d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030d8:	200004cc 	.word	0x200004cc

080030dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC1_2_IRQHandler>
	...

080030e0 <__errno>:
 80030e0:	4b01      	ldr	r3, [pc, #4]	; (80030e8 <__errno+0x8>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000008 	.word	0x20000008

080030ec <__libc_init_array>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	2500      	movs	r5, #0
 80030f0:	4e0c      	ldr	r6, [pc, #48]	; (8003124 <__libc_init_array+0x38>)
 80030f2:	4c0d      	ldr	r4, [pc, #52]	; (8003128 <__libc_init_array+0x3c>)
 80030f4:	1ba4      	subs	r4, r4, r6
 80030f6:	10a4      	asrs	r4, r4, #2
 80030f8:	42a5      	cmp	r5, r4
 80030fa:	d109      	bne.n	8003110 <__libc_init_array+0x24>
 80030fc:	f002 f85e 	bl	80051bc <_init>
 8003100:	2500      	movs	r5, #0
 8003102:	4e0a      	ldr	r6, [pc, #40]	; (800312c <__libc_init_array+0x40>)
 8003104:	4c0a      	ldr	r4, [pc, #40]	; (8003130 <__libc_init_array+0x44>)
 8003106:	1ba4      	subs	r4, r4, r6
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	42a5      	cmp	r5, r4
 800310c:	d105      	bne.n	800311a <__libc_init_array+0x2e>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003114:	4798      	blx	r3
 8003116:	3501      	adds	r5, #1
 8003118:	e7ee      	b.n	80030f8 <__libc_init_array+0xc>
 800311a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800311e:	4798      	blx	r3
 8003120:	3501      	adds	r5, #1
 8003122:	e7f2      	b.n	800310a <__libc_init_array+0x1e>
 8003124:	08005440 	.word	0x08005440
 8003128:	08005440 	.word	0x08005440
 800312c:	08005440 	.word	0x08005440
 8003130:	08005444 	.word	0x08005444

08003134 <memset>:
 8003134:	4603      	mov	r3, r0
 8003136:	4402      	add	r2, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <__cvt>:
 8003144:	2b00      	cmp	r3, #0
 8003146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314a:	461e      	mov	r6, r3
 800314c:	bfbb      	ittet	lt
 800314e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003152:	461e      	movlt	r6, r3
 8003154:	2300      	movge	r3, #0
 8003156:	232d      	movlt	r3, #45	; 0x2d
 8003158:	b088      	sub	sp, #32
 800315a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800315c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003160:	f027 0720 	bic.w	r7, r7, #32
 8003164:	2f46      	cmp	r7, #70	; 0x46
 8003166:	4614      	mov	r4, r2
 8003168:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800316a:	700b      	strb	r3, [r1, #0]
 800316c:	d004      	beq.n	8003178 <__cvt+0x34>
 800316e:	2f45      	cmp	r7, #69	; 0x45
 8003170:	d100      	bne.n	8003174 <__cvt+0x30>
 8003172:	3501      	adds	r5, #1
 8003174:	2302      	movs	r3, #2
 8003176:	e000      	b.n	800317a <__cvt+0x36>
 8003178:	2303      	movs	r3, #3
 800317a:	aa07      	add	r2, sp, #28
 800317c:	9204      	str	r2, [sp, #16]
 800317e:	aa06      	add	r2, sp, #24
 8003180:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003184:	e9cd 3500 	strd	r3, r5, [sp]
 8003188:	4622      	mov	r2, r4
 800318a:	4633      	mov	r3, r6
 800318c:	f000 fcd8 	bl	8003b40 <_dtoa_r>
 8003190:	2f47      	cmp	r7, #71	; 0x47
 8003192:	4680      	mov	r8, r0
 8003194:	d102      	bne.n	800319c <__cvt+0x58>
 8003196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003198:	07db      	lsls	r3, r3, #31
 800319a:	d526      	bpl.n	80031ea <__cvt+0xa6>
 800319c:	2f46      	cmp	r7, #70	; 0x46
 800319e:	eb08 0905 	add.w	r9, r8, r5
 80031a2:	d111      	bne.n	80031c8 <__cvt+0x84>
 80031a4:	f898 3000 	ldrb.w	r3, [r8]
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d10a      	bne.n	80031c2 <__cvt+0x7e>
 80031ac:	2200      	movs	r2, #0
 80031ae:	2300      	movs	r3, #0
 80031b0:	4620      	mov	r0, r4
 80031b2:	4631      	mov	r1, r6
 80031b4:	f7fd fc08 	bl	80009c8 <__aeabi_dcmpeq>
 80031b8:	b918      	cbnz	r0, 80031c2 <__cvt+0x7e>
 80031ba:	f1c5 0501 	rsb	r5, r5, #1
 80031be:	f8ca 5000 	str.w	r5, [sl]
 80031c2:	f8da 3000 	ldr.w	r3, [sl]
 80031c6:	4499      	add	r9, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	2300      	movs	r3, #0
 80031cc:	4620      	mov	r0, r4
 80031ce:	4631      	mov	r1, r6
 80031d0:	f7fd fbfa 	bl	80009c8 <__aeabi_dcmpeq>
 80031d4:	b938      	cbnz	r0, 80031e6 <__cvt+0xa2>
 80031d6:	2230      	movs	r2, #48	; 0x30
 80031d8:	9b07      	ldr	r3, [sp, #28]
 80031da:	454b      	cmp	r3, r9
 80031dc:	d205      	bcs.n	80031ea <__cvt+0xa6>
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	9107      	str	r1, [sp, #28]
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e7f8      	b.n	80031d8 <__cvt+0x94>
 80031e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80031ea:	4640      	mov	r0, r8
 80031ec:	9b07      	ldr	r3, [sp, #28]
 80031ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80031f0:	eba3 0308 	sub.w	r3, r3, r8
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	b008      	add	sp, #32
 80031f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031fc <__exponent>:
 80031fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031fe:	2900      	cmp	r1, #0
 8003200:	bfb4      	ite	lt
 8003202:	232d      	movlt	r3, #45	; 0x2d
 8003204:	232b      	movge	r3, #43	; 0x2b
 8003206:	4604      	mov	r4, r0
 8003208:	bfb8      	it	lt
 800320a:	4249      	neglt	r1, r1
 800320c:	2909      	cmp	r1, #9
 800320e:	f804 2b02 	strb.w	r2, [r4], #2
 8003212:	7043      	strb	r3, [r0, #1]
 8003214:	dd21      	ble.n	800325a <__exponent+0x5e>
 8003216:	f10d 0307 	add.w	r3, sp, #7
 800321a:	461f      	mov	r7, r3
 800321c:	260a      	movs	r6, #10
 800321e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003222:	fb06 1115 	mls	r1, r6, r5, r1
 8003226:	2d09      	cmp	r5, #9
 8003228:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800322c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003230:	f103 32ff 	add.w	r2, r3, #4294967295
 8003234:	4629      	mov	r1, r5
 8003236:	dc09      	bgt.n	800324c <__exponent+0x50>
 8003238:	3130      	adds	r1, #48	; 0x30
 800323a:	3b02      	subs	r3, #2
 800323c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003240:	42bb      	cmp	r3, r7
 8003242:	4622      	mov	r2, r4
 8003244:	d304      	bcc.n	8003250 <__exponent+0x54>
 8003246:	1a10      	subs	r0, r2, r0
 8003248:	b003      	add	sp, #12
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324c:	4613      	mov	r3, r2
 800324e:	e7e6      	b.n	800321e <__exponent+0x22>
 8003250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003254:	f804 2b01 	strb.w	r2, [r4], #1
 8003258:	e7f2      	b.n	8003240 <__exponent+0x44>
 800325a:	2330      	movs	r3, #48	; 0x30
 800325c:	4419      	add	r1, r3
 800325e:	7083      	strb	r3, [r0, #2]
 8003260:	1d02      	adds	r2, r0, #4
 8003262:	70c1      	strb	r1, [r0, #3]
 8003264:	e7ef      	b.n	8003246 <__exponent+0x4a>
	...

08003268 <_printf_float>:
 8003268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326c:	b091      	sub	sp, #68	; 0x44
 800326e:	460c      	mov	r4, r1
 8003270:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003272:	4693      	mov	fp, r2
 8003274:	461e      	mov	r6, r3
 8003276:	4605      	mov	r5, r0
 8003278:	f001 fa16 	bl	80046a8 <_localeconv_r>
 800327c:	6803      	ldr	r3, [r0, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	9309      	str	r3, [sp, #36]	; 0x24
 8003282:	f7fc ff75 	bl	8000170 <strlen>
 8003286:	2300      	movs	r3, #0
 8003288:	930e      	str	r3, [sp, #56]	; 0x38
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	900a      	str	r0, [sp, #40]	; 0x28
 800328e:	3307      	adds	r3, #7
 8003290:	f023 0307 	bic.w	r3, r3, #7
 8003294:	f103 0208 	add.w	r2, r3, #8
 8003298:	f894 8018 	ldrb.w	r8, [r4, #24]
 800329c:	f8d4 a000 	ldr.w	sl, [r4]
 80032a0:	603a      	str	r2, [r7, #0]
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032aa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80032ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	4ba6      	ldr	r3, [pc, #664]	; (8003554 <_printf_float+0x2ec>)
 80032ba:	4638      	mov	r0, r7
 80032bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032be:	f7fd fbb5 	bl	8000a2c <__aeabi_dcmpun>
 80032c2:	bb68      	cbnz	r0, 8003320 <_printf_float+0xb8>
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	4ba2      	ldr	r3, [pc, #648]	; (8003554 <_printf_float+0x2ec>)
 80032ca:	4638      	mov	r0, r7
 80032cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ce:	f7fd fb8f 	bl	80009f0 <__aeabi_dcmple>
 80032d2:	bb28      	cbnz	r0, 8003320 <_printf_float+0xb8>
 80032d4:	2200      	movs	r2, #0
 80032d6:	2300      	movs	r3, #0
 80032d8:	4638      	mov	r0, r7
 80032da:	4649      	mov	r1, r9
 80032dc:	f7fd fb7e 	bl	80009dc <__aeabi_dcmplt>
 80032e0:	b110      	cbz	r0, 80032e8 <_printf_float+0x80>
 80032e2:	232d      	movs	r3, #45	; 0x2d
 80032e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e8:	4f9b      	ldr	r7, [pc, #620]	; (8003558 <_printf_float+0x2f0>)
 80032ea:	4b9c      	ldr	r3, [pc, #624]	; (800355c <_printf_float+0x2f4>)
 80032ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032f0:	bf98      	it	ls
 80032f2:	461f      	movls	r7, r3
 80032f4:	2303      	movs	r3, #3
 80032f6:	f04f 0900 	mov.w	r9, #0
 80032fa:	6123      	str	r3, [r4, #16]
 80032fc:	f02a 0304 	bic.w	r3, sl, #4
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	9600      	str	r6, [sp, #0]
 8003304:	465b      	mov	r3, fp
 8003306:	aa0f      	add	r2, sp, #60	; 0x3c
 8003308:	4621      	mov	r1, r4
 800330a:	4628      	mov	r0, r5
 800330c:	f000 f9e2 	bl	80036d4 <_printf_common>
 8003310:	3001      	adds	r0, #1
 8003312:	f040 8090 	bne.w	8003436 <_printf_float+0x1ce>
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	b011      	add	sp, #68	; 0x44
 800331c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003320:	463a      	mov	r2, r7
 8003322:	464b      	mov	r3, r9
 8003324:	4638      	mov	r0, r7
 8003326:	4649      	mov	r1, r9
 8003328:	f7fd fb80 	bl	8000a2c <__aeabi_dcmpun>
 800332c:	b110      	cbz	r0, 8003334 <_printf_float+0xcc>
 800332e:	4f8c      	ldr	r7, [pc, #560]	; (8003560 <_printf_float+0x2f8>)
 8003330:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <_printf_float+0x2fc>)
 8003332:	e7db      	b.n	80032ec <_printf_float+0x84>
 8003334:	6863      	ldr	r3, [r4, #4]
 8003336:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	a80d      	add	r0, sp, #52	; 0x34
 800333e:	a90e      	add	r1, sp, #56	; 0x38
 8003340:	d140      	bne.n	80033c4 <_printf_float+0x15c>
 8003342:	2306      	movs	r3, #6
 8003344:	6063      	str	r3, [r4, #4]
 8003346:	f04f 0c00 	mov.w	ip, #0
 800334a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800334e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003352:	6863      	ldr	r3, [r4, #4]
 8003354:	6022      	str	r2, [r4, #0]
 8003356:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	463a      	mov	r2, r7
 800335e:	464b      	mov	r3, r9
 8003360:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003364:	4628      	mov	r0, r5
 8003366:	f7ff feed 	bl	8003144 <__cvt>
 800336a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800336e:	2b47      	cmp	r3, #71	; 0x47
 8003370:	4607      	mov	r7, r0
 8003372:	d109      	bne.n	8003388 <_printf_float+0x120>
 8003374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003376:	1cd8      	adds	r0, r3, #3
 8003378:	db02      	blt.n	8003380 <_printf_float+0x118>
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	4293      	cmp	r3, r2
 800337e:	dd47      	ble.n	8003410 <_printf_float+0x1a8>
 8003380:	f1a8 0802 	sub.w	r8, r8, #2
 8003384:	fa5f f888 	uxtb.w	r8, r8
 8003388:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800338c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800338e:	d824      	bhi.n	80033da <_printf_float+0x172>
 8003390:	3901      	subs	r1, #1
 8003392:	4642      	mov	r2, r8
 8003394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003398:	910d      	str	r1, [sp, #52]	; 0x34
 800339a:	f7ff ff2f 	bl	80031fc <__exponent>
 800339e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033a0:	4681      	mov	r9, r0
 80033a2:	1813      	adds	r3, r2, r0
 80033a4:	2a01      	cmp	r2, #1
 80033a6:	6123      	str	r3, [r4, #16]
 80033a8:	dc02      	bgt.n	80033b0 <_printf_float+0x148>
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	07d1      	lsls	r1, r2, #31
 80033ae:	d501      	bpl.n	80033b4 <_printf_float+0x14c>
 80033b0:	3301      	adds	r3, #1
 80033b2:	6123      	str	r3, [r4, #16]
 80033b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0a2      	beq.n	8003302 <_printf_float+0x9a>
 80033bc:	232d      	movs	r3, #45	; 0x2d
 80033be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c2:	e79e      	b.n	8003302 <_printf_float+0x9a>
 80033c4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80033c8:	f000 816e 	beq.w	80036a8 <_printf_float+0x440>
 80033cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033d0:	d1b9      	bne.n	8003346 <_printf_float+0xde>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1b7      	bne.n	8003346 <_printf_float+0xde>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e7b4      	b.n	8003344 <_printf_float+0xdc>
 80033da:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80033de:	d119      	bne.n	8003414 <_printf_float+0x1ac>
 80033e0:	2900      	cmp	r1, #0
 80033e2:	6863      	ldr	r3, [r4, #4]
 80033e4:	dd0c      	ble.n	8003400 <_printf_float+0x198>
 80033e6:	6121      	str	r1, [r4, #16]
 80033e8:	b913      	cbnz	r3, 80033f0 <_printf_float+0x188>
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	07d2      	lsls	r2, r2, #31
 80033ee:	d502      	bpl.n	80033f6 <_printf_float+0x18e>
 80033f0:	3301      	adds	r3, #1
 80033f2:	440b      	add	r3, r1
 80033f4:	6123      	str	r3, [r4, #16]
 80033f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033f8:	f04f 0900 	mov.w	r9, #0
 80033fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80033fe:	e7d9      	b.n	80033b4 <_printf_float+0x14c>
 8003400:	b913      	cbnz	r3, 8003408 <_printf_float+0x1a0>
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	07d0      	lsls	r0, r2, #31
 8003406:	d501      	bpl.n	800340c <_printf_float+0x1a4>
 8003408:	3302      	adds	r3, #2
 800340a:	e7f3      	b.n	80033f4 <_printf_float+0x18c>
 800340c:	2301      	movs	r3, #1
 800340e:	e7f1      	b.n	80033f4 <_printf_float+0x18c>
 8003410:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003414:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003418:	4293      	cmp	r3, r2
 800341a:	db05      	blt.n	8003428 <_printf_float+0x1c0>
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	07d1      	lsls	r1, r2, #31
 8003422:	d5e8      	bpl.n	80033f6 <_printf_float+0x18e>
 8003424:	3301      	adds	r3, #1
 8003426:	e7e5      	b.n	80033f4 <_printf_float+0x18c>
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfcc      	ite	gt
 800342c:	2301      	movgt	r3, #1
 800342e:	f1c3 0302 	rsble	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	e7de      	b.n	80033f4 <_printf_float+0x18c>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	055a      	lsls	r2, r3, #21
 800343a:	d407      	bmi.n	800344c <_printf_float+0x1e4>
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	463a      	mov	r2, r7
 8003440:	4659      	mov	r1, fp
 8003442:	4628      	mov	r0, r5
 8003444:	47b0      	blx	r6
 8003446:	3001      	adds	r0, #1
 8003448:	d129      	bne.n	800349e <_printf_float+0x236>
 800344a:	e764      	b.n	8003316 <_printf_float+0xae>
 800344c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003450:	f240 80d7 	bls.w	8003602 <_printf_float+0x39a>
 8003454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003458:	2200      	movs	r2, #0
 800345a:	2300      	movs	r3, #0
 800345c:	f7fd fab4 	bl	80009c8 <__aeabi_dcmpeq>
 8003460:	b388      	cbz	r0, 80034c6 <_printf_float+0x25e>
 8003462:	2301      	movs	r3, #1
 8003464:	4a40      	ldr	r2, [pc, #256]	; (8003568 <_printf_float+0x300>)
 8003466:	4659      	mov	r1, fp
 8003468:	4628      	mov	r0, r5
 800346a:	47b0      	blx	r6
 800346c:	3001      	adds	r0, #1
 800346e:	f43f af52 	beq.w	8003316 <_printf_float+0xae>
 8003472:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003476:	429a      	cmp	r2, r3
 8003478:	db02      	blt.n	8003480 <_printf_float+0x218>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	07d8      	lsls	r0, r3, #31
 800347e:	d50e      	bpl.n	800349e <_printf_float+0x236>
 8003480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003484:	4659      	mov	r1, fp
 8003486:	4628      	mov	r0, r5
 8003488:	47b0      	blx	r6
 800348a:	3001      	adds	r0, #1
 800348c:	f43f af43 	beq.w	8003316 <_printf_float+0xae>
 8003490:	2700      	movs	r7, #0
 8003492:	f104 081a 	add.w	r8, r4, #26
 8003496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003498:	3b01      	subs	r3, #1
 800349a:	42bb      	cmp	r3, r7
 800349c:	dc09      	bgt.n	80034b2 <_printf_float+0x24a>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	079f      	lsls	r7, r3, #30
 80034a2:	f100 80fd 	bmi.w	80036a0 <_printf_float+0x438>
 80034a6:	68e0      	ldr	r0, [r4, #12]
 80034a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034aa:	4298      	cmp	r0, r3
 80034ac:	bfb8      	it	lt
 80034ae:	4618      	movlt	r0, r3
 80034b0:	e733      	b.n	800331a <_printf_float+0xb2>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4642      	mov	r2, r8
 80034b6:	4659      	mov	r1, fp
 80034b8:	4628      	mov	r0, r5
 80034ba:	47b0      	blx	r6
 80034bc:	3001      	adds	r0, #1
 80034be:	f43f af2a 	beq.w	8003316 <_printf_float+0xae>
 80034c2:	3701      	adds	r7, #1
 80034c4:	e7e7      	b.n	8003496 <_printf_float+0x22e>
 80034c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	dc2b      	bgt.n	8003524 <_printf_float+0x2bc>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <_printf_float+0x300>)
 80034d0:	4659      	mov	r1, fp
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b0      	blx	r6
 80034d6:	3001      	adds	r0, #1
 80034d8:	f43f af1d 	beq.w	8003316 <_printf_float+0xae>
 80034dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034de:	b923      	cbnz	r3, 80034ea <_printf_float+0x282>
 80034e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e2:	b913      	cbnz	r3, 80034ea <_printf_float+0x282>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	07d9      	lsls	r1, r3, #31
 80034e8:	d5d9      	bpl.n	800349e <_printf_float+0x236>
 80034ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034ee:	4659      	mov	r1, fp
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b0      	blx	r6
 80034f4:	3001      	adds	r0, #1
 80034f6:	f43f af0e 	beq.w	8003316 <_printf_float+0xae>
 80034fa:	f04f 0800 	mov.w	r8, #0
 80034fe:	f104 091a 	add.w	r9, r4, #26
 8003502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003504:	425b      	negs	r3, r3
 8003506:	4543      	cmp	r3, r8
 8003508:	dc01      	bgt.n	800350e <_printf_float+0x2a6>
 800350a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800350c:	e797      	b.n	800343e <_printf_float+0x1d6>
 800350e:	2301      	movs	r3, #1
 8003510:	464a      	mov	r2, r9
 8003512:	4659      	mov	r1, fp
 8003514:	4628      	mov	r0, r5
 8003516:	47b0      	blx	r6
 8003518:	3001      	adds	r0, #1
 800351a:	f43f aefc 	beq.w	8003316 <_printf_float+0xae>
 800351e:	f108 0801 	add.w	r8, r8, #1
 8003522:	e7ee      	b.n	8003502 <_printf_float+0x29a>
 8003524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003528:	429a      	cmp	r2, r3
 800352a:	bfa8      	it	ge
 800352c:	461a      	movge	r2, r3
 800352e:	2a00      	cmp	r2, #0
 8003530:	4690      	mov	r8, r2
 8003532:	dd07      	ble.n	8003544 <_printf_float+0x2dc>
 8003534:	4613      	mov	r3, r2
 8003536:	4659      	mov	r1, fp
 8003538:	463a      	mov	r2, r7
 800353a:	4628      	mov	r0, r5
 800353c:	47b0      	blx	r6
 800353e:	3001      	adds	r0, #1
 8003540:	f43f aee9 	beq.w	8003316 <_printf_float+0xae>
 8003544:	f104 031a 	add.w	r3, r4, #26
 8003548:	f04f 0a00 	mov.w	sl, #0
 800354c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003550:	930b      	str	r3, [sp, #44]	; 0x2c
 8003552:	e015      	b.n	8003580 <_printf_float+0x318>
 8003554:	7fefffff 	.word	0x7fefffff
 8003558:	080051e9 	.word	0x080051e9
 800355c:	080051e5 	.word	0x080051e5
 8003560:	080051f1 	.word	0x080051f1
 8003564:	080051ed 	.word	0x080051ed
 8003568:	080051f5 	.word	0x080051f5
 800356c:	2301      	movs	r3, #1
 800356e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003570:	4659      	mov	r1, fp
 8003572:	4628      	mov	r0, r5
 8003574:	47b0      	blx	r6
 8003576:	3001      	adds	r0, #1
 8003578:	f43f aecd 	beq.w	8003316 <_printf_float+0xae>
 800357c:	f10a 0a01 	add.w	sl, sl, #1
 8003580:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003584:	eba9 0308 	sub.w	r3, r9, r8
 8003588:	4553      	cmp	r3, sl
 800358a:	dcef      	bgt.n	800356c <_printf_float+0x304>
 800358c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003590:	429a      	cmp	r2, r3
 8003592:	444f      	add	r7, r9
 8003594:	db14      	blt.n	80035c0 <_printf_float+0x358>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	07da      	lsls	r2, r3, #31
 800359a:	d411      	bmi.n	80035c0 <_printf_float+0x358>
 800359c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800359e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035a0:	eba3 0209 	sub.w	r2, r3, r9
 80035a4:	eba3 0901 	sub.w	r9, r3, r1
 80035a8:	4591      	cmp	r9, r2
 80035aa:	bfa8      	it	ge
 80035ac:	4691      	movge	r9, r2
 80035ae:	f1b9 0f00 	cmp.w	r9, #0
 80035b2:	dc0d      	bgt.n	80035d0 <_printf_float+0x368>
 80035b4:	2700      	movs	r7, #0
 80035b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ba:	f104 081a 	add.w	r8, r4, #26
 80035be:	e018      	b.n	80035f2 <_printf_float+0x38a>
 80035c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c4:	4659      	mov	r1, fp
 80035c6:	4628      	mov	r0, r5
 80035c8:	47b0      	blx	r6
 80035ca:	3001      	adds	r0, #1
 80035cc:	d1e6      	bne.n	800359c <_printf_float+0x334>
 80035ce:	e6a2      	b.n	8003316 <_printf_float+0xae>
 80035d0:	464b      	mov	r3, r9
 80035d2:	463a      	mov	r2, r7
 80035d4:	4659      	mov	r1, fp
 80035d6:	4628      	mov	r0, r5
 80035d8:	47b0      	blx	r6
 80035da:	3001      	adds	r0, #1
 80035dc:	d1ea      	bne.n	80035b4 <_printf_float+0x34c>
 80035de:	e69a      	b.n	8003316 <_printf_float+0xae>
 80035e0:	2301      	movs	r3, #1
 80035e2:	4642      	mov	r2, r8
 80035e4:	4659      	mov	r1, fp
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b0      	blx	r6
 80035ea:	3001      	adds	r0, #1
 80035ec:	f43f ae93 	beq.w	8003316 <_printf_float+0xae>
 80035f0:	3701      	adds	r7, #1
 80035f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	eba3 0309 	sub.w	r3, r3, r9
 80035fc:	42bb      	cmp	r3, r7
 80035fe:	dcef      	bgt.n	80035e0 <_printf_float+0x378>
 8003600:	e74d      	b.n	800349e <_printf_float+0x236>
 8003602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003604:	2a01      	cmp	r2, #1
 8003606:	dc01      	bgt.n	800360c <_printf_float+0x3a4>
 8003608:	07db      	lsls	r3, r3, #31
 800360a:	d538      	bpl.n	800367e <_printf_float+0x416>
 800360c:	2301      	movs	r3, #1
 800360e:	463a      	mov	r2, r7
 8003610:	4659      	mov	r1, fp
 8003612:	4628      	mov	r0, r5
 8003614:	47b0      	blx	r6
 8003616:	3001      	adds	r0, #1
 8003618:	f43f ae7d 	beq.w	8003316 <_printf_float+0xae>
 800361c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003620:	4659      	mov	r1, fp
 8003622:	4628      	mov	r0, r5
 8003624:	47b0      	blx	r6
 8003626:	3001      	adds	r0, #1
 8003628:	f107 0701 	add.w	r7, r7, #1
 800362c:	f43f ae73 	beq.w	8003316 <_printf_float+0xae>
 8003630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	f103 38ff 	add.w	r8, r3, #4294967295
 800363c:	2300      	movs	r3, #0
 800363e:	f7fd f9c3 	bl	80009c8 <__aeabi_dcmpeq>
 8003642:	b9c0      	cbnz	r0, 8003676 <_printf_float+0x40e>
 8003644:	4643      	mov	r3, r8
 8003646:	463a      	mov	r2, r7
 8003648:	4659      	mov	r1, fp
 800364a:	4628      	mov	r0, r5
 800364c:	47b0      	blx	r6
 800364e:	3001      	adds	r0, #1
 8003650:	d10d      	bne.n	800366e <_printf_float+0x406>
 8003652:	e660      	b.n	8003316 <_printf_float+0xae>
 8003654:	2301      	movs	r3, #1
 8003656:	4642      	mov	r2, r8
 8003658:	4659      	mov	r1, fp
 800365a:	4628      	mov	r0, r5
 800365c:	47b0      	blx	r6
 800365e:	3001      	adds	r0, #1
 8003660:	f43f ae59 	beq.w	8003316 <_printf_float+0xae>
 8003664:	3701      	adds	r7, #1
 8003666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003668:	3b01      	subs	r3, #1
 800366a:	42bb      	cmp	r3, r7
 800366c:	dcf2      	bgt.n	8003654 <_printf_float+0x3ec>
 800366e:	464b      	mov	r3, r9
 8003670:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003674:	e6e4      	b.n	8003440 <_printf_float+0x1d8>
 8003676:	2700      	movs	r7, #0
 8003678:	f104 081a 	add.w	r8, r4, #26
 800367c:	e7f3      	b.n	8003666 <_printf_float+0x3fe>
 800367e:	2301      	movs	r3, #1
 8003680:	e7e1      	b.n	8003646 <_printf_float+0x3de>
 8003682:	2301      	movs	r3, #1
 8003684:	4642      	mov	r2, r8
 8003686:	4659      	mov	r1, fp
 8003688:	4628      	mov	r0, r5
 800368a:	47b0      	blx	r6
 800368c:	3001      	adds	r0, #1
 800368e:	f43f ae42 	beq.w	8003316 <_printf_float+0xae>
 8003692:	3701      	adds	r7, #1
 8003694:	68e3      	ldr	r3, [r4, #12]
 8003696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	42bb      	cmp	r3, r7
 800369c:	dcf1      	bgt.n	8003682 <_printf_float+0x41a>
 800369e:	e702      	b.n	80034a6 <_printf_float+0x23e>
 80036a0:	2700      	movs	r7, #0
 80036a2:	f104 0819 	add.w	r8, r4, #25
 80036a6:	e7f5      	b.n	8003694 <_printf_float+0x42c>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f43f ae94 	beq.w	80033d6 <_printf_float+0x16e>
 80036ae:	f04f 0c00 	mov.w	ip, #0
 80036b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80036ba:	6022      	str	r2, [r4, #0]
 80036bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	463a      	mov	r2, r7
 80036c8:	464b      	mov	r3, r9
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7ff fd3a 	bl	8003144 <__cvt>
 80036d0:	4607      	mov	r7, r0
 80036d2:	e64f      	b.n	8003374 <_printf_float+0x10c>

080036d4 <_printf_common>:
 80036d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d8:	4691      	mov	r9, r2
 80036da:	461f      	mov	r7, r3
 80036dc:	688a      	ldr	r2, [r1, #8]
 80036de:	690b      	ldr	r3, [r1, #16]
 80036e0:	4606      	mov	r6, r0
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bfb8      	it	lt
 80036e6:	4613      	movlt	r3, r2
 80036e8:	f8c9 3000 	str.w	r3, [r9]
 80036ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036f0:	460c      	mov	r4, r1
 80036f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f6:	b112      	cbz	r2, 80036fe <_printf_common+0x2a>
 80036f8:	3301      	adds	r3, #1
 80036fa:	f8c9 3000 	str.w	r3, [r9]
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	0699      	lsls	r1, r3, #26
 8003702:	bf42      	ittt	mi
 8003704:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003708:	3302      	addmi	r3, #2
 800370a:	f8c9 3000 	strmi.w	r3, [r9]
 800370e:	6825      	ldr	r5, [r4, #0]
 8003710:	f015 0506 	ands.w	r5, r5, #6
 8003714:	d107      	bne.n	8003726 <_printf_common+0x52>
 8003716:	f104 0a19 	add.w	sl, r4, #25
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	f8d9 2000 	ldr.w	r2, [r9]
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	42ab      	cmp	r3, r5
 8003724:	dc29      	bgt.n	800377a <_printf_common+0xa6>
 8003726:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	3300      	adds	r3, #0
 800372e:	bf18      	it	ne
 8003730:	2301      	movne	r3, #1
 8003732:	0692      	lsls	r2, r2, #26
 8003734:	d42e      	bmi.n	8003794 <_printf_common+0xc0>
 8003736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800373a:	4639      	mov	r1, r7
 800373c:	4630      	mov	r0, r6
 800373e:	47c0      	blx	r8
 8003740:	3001      	adds	r0, #1
 8003742:	d021      	beq.n	8003788 <_printf_common+0xb4>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	68e5      	ldr	r5, [r4, #12]
 8003748:	f003 0306 	and.w	r3, r3, #6
 800374c:	2b04      	cmp	r3, #4
 800374e:	bf18      	it	ne
 8003750:	2500      	movne	r5, #0
 8003752:	f8d9 2000 	ldr.w	r2, [r9]
 8003756:	f04f 0900 	mov.w	r9, #0
 800375a:	bf08      	it	eq
 800375c:	1aad      	subeq	r5, r5, r2
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	6922      	ldr	r2, [r4, #16]
 8003762:	bf08      	it	eq
 8003764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003768:	4293      	cmp	r3, r2
 800376a:	bfc4      	itt	gt
 800376c:	1a9b      	subgt	r3, r3, r2
 800376e:	18ed      	addgt	r5, r5, r3
 8003770:	341a      	adds	r4, #26
 8003772:	454d      	cmp	r5, r9
 8003774:	d11a      	bne.n	80037ac <_printf_common+0xd8>
 8003776:	2000      	movs	r0, #0
 8003778:	e008      	b.n	800378c <_printf_common+0xb8>
 800377a:	2301      	movs	r3, #1
 800377c:	4652      	mov	r2, sl
 800377e:	4639      	mov	r1, r7
 8003780:	4630      	mov	r0, r6
 8003782:	47c0      	blx	r8
 8003784:	3001      	adds	r0, #1
 8003786:	d103      	bne.n	8003790 <_printf_common+0xbc>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003790:	3501      	adds	r5, #1
 8003792:	e7c2      	b.n	800371a <_printf_common+0x46>
 8003794:	2030      	movs	r0, #48	; 0x30
 8003796:	18e1      	adds	r1, r4, r3
 8003798:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037a2:	4422      	add	r2, r4
 80037a4:	3302      	adds	r3, #2
 80037a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037aa:	e7c4      	b.n	8003736 <_printf_common+0x62>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4622      	mov	r2, r4
 80037b0:	4639      	mov	r1, r7
 80037b2:	4630      	mov	r0, r6
 80037b4:	47c0      	blx	r8
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0e6      	beq.n	8003788 <_printf_common+0xb4>
 80037ba:	f109 0901 	add.w	r9, r9, #1
 80037be:	e7d8      	b.n	8003772 <_printf_common+0x9e>

080037c0 <_printf_i>:
 80037c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037c8:	460c      	mov	r4, r1
 80037ca:	7e09      	ldrb	r1, [r1, #24]
 80037cc:	b085      	sub	sp, #20
 80037ce:	296e      	cmp	r1, #110	; 0x6e
 80037d0:	4617      	mov	r7, r2
 80037d2:	4606      	mov	r6, r0
 80037d4:	4698      	mov	r8, r3
 80037d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037d8:	f000 80b3 	beq.w	8003942 <_printf_i+0x182>
 80037dc:	d822      	bhi.n	8003824 <_printf_i+0x64>
 80037de:	2963      	cmp	r1, #99	; 0x63
 80037e0:	d036      	beq.n	8003850 <_printf_i+0x90>
 80037e2:	d80a      	bhi.n	80037fa <_printf_i+0x3a>
 80037e4:	2900      	cmp	r1, #0
 80037e6:	f000 80b9 	beq.w	800395c <_printf_i+0x19c>
 80037ea:	2958      	cmp	r1, #88	; 0x58
 80037ec:	f000 8083 	beq.w	80038f6 <_printf_i+0x136>
 80037f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037f8:	e032      	b.n	8003860 <_printf_i+0xa0>
 80037fa:	2964      	cmp	r1, #100	; 0x64
 80037fc:	d001      	beq.n	8003802 <_printf_i+0x42>
 80037fe:	2969      	cmp	r1, #105	; 0x69
 8003800:	d1f6      	bne.n	80037f0 <_printf_i+0x30>
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	6813      	ldr	r3, [r2, #0]
 8003806:	0605      	lsls	r5, r0, #24
 8003808:	f103 0104 	add.w	r1, r3, #4
 800380c:	d52a      	bpl.n	8003864 <_printf_i+0xa4>
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	da03      	bge.n	800381e <_printf_i+0x5e>
 8003816:	222d      	movs	r2, #45	; 0x2d
 8003818:	425b      	negs	r3, r3
 800381a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800381e:	486f      	ldr	r0, [pc, #444]	; (80039dc <_printf_i+0x21c>)
 8003820:	220a      	movs	r2, #10
 8003822:	e039      	b.n	8003898 <_printf_i+0xd8>
 8003824:	2973      	cmp	r1, #115	; 0x73
 8003826:	f000 809d 	beq.w	8003964 <_printf_i+0x1a4>
 800382a:	d808      	bhi.n	800383e <_printf_i+0x7e>
 800382c:	296f      	cmp	r1, #111	; 0x6f
 800382e:	d020      	beq.n	8003872 <_printf_i+0xb2>
 8003830:	2970      	cmp	r1, #112	; 0x70
 8003832:	d1dd      	bne.n	80037f0 <_printf_i+0x30>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f043 0320 	orr.w	r3, r3, #32
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	e003      	b.n	8003846 <_printf_i+0x86>
 800383e:	2975      	cmp	r1, #117	; 0x75
 8003840:	d017      	beq.n	8003872 <_printf_i+0xb2>
 8003842:	2978      	cmp	r1, #120	; 0x78
 8003844:	d1d4      	bne.n	80037f0 <_printf_i+0x30>
 8003846:	2378      	movs	r3, #120	; 0x78
 8003848:	4865      	ldr	r0, [pc, #404]	; (80039e0 <_printf_i+0x220>)
 800384a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800384e:	e055      	b.n	80038fc <_printf_i+0x13c>
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003856:	1d19      	adds	r1, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6011      	str	r1, [r2, #0]
 800385c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003860:	2301      	movs	r3, #1
 8003862:	e08c      	b.n	800397e <_printf_i+0x1be>
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800386a:	6011      	str	r1, [r2, #0]
 800386c:	bf18      	it	ne
 800386e:	b21b      	sxthne	r3, r3
 8003870:	e7cf      	b.n	8003812 <_printf_i+0x52>
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	6825      	ldr	r5, [r4, #0]
 8003876:	1d18      	adds	r0, r3, #4
 8003878:	6010      	str	r0, [r2, #0]
 800387a:	0628      	lsls	r0, r5, #24
 800387c:	d501      	bpl.n	8003882 <_printf_i+0xc2>
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	e002      	b.n	8003888 <_printf_i+0xc8>
 8003882:	0668      	lsls	r0, r5, #25
 8003884:	d5fb      	bpl.n	800387e <_printf_i+0xbe>
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	296f      	cmp	r1, #111	; 0x6f
 800388a:	bf14      	ite	ne
 800388c:	220a      	movne	r2, #10
 800388e:	2208      	moveq	r2, #8
 8003890:	4852      	ldr	r0, [pc, #328]	; (80039dc <_printf_i+0x21c>)
 8003892:	2100      	movs	r1, #0
 8003894:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003898:	6865      	ldr	r5, [r4, #4]
 800389a:	2d00      	cmp	r5, #0
 800389c:	60a5      	str	r5, [r4, #8]
 800389e:	f2c0 8095 	blt.w	80039cc <_printf_i+0x20c>
 80038a2:	6821      	ldr	r1, [r4, #0]
 80038a4:	f021 0104 	bic.w	r1, r1, #4
 80038a8:	6021      	str	r1, [r4, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d13d      	bne.n	800392a <_printf_i+0x16a>
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	f040 808e 	bne.w	80039d0 <_printf_i+0x210>
 80038b4:	4665      	mov	r5, ip
 80038b6:	2a08      	cmp	r2, #8
 80038b8:	d10b      	bne.n	80038d2 <_printf_i+0x112>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	07db      	lsls	r3, r3, #31
 80038be:	d508      	bpl.n	80038d2 <_printf_i+0x112>
 80038c0:	6923      	ldr	r3, [r4, #16]
 80038c2:	6862      	ldr	r2, [r4, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	bfde      	ittt	le
 80038c8:	2330      	movle	r3, #48	; 0x30
 80038ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038d2:	ebac 0305 	sub.w	r3, ip, r5
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	f8cd 8000 	str.w	r8, [sp]
 80038dc:	463b      	mov	r3, r7
 80038de:	aa03      	add	r2, sp, #12
 80038e0:	4621      	mov	r1, r4
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff fef6 	bl	80036d4 <_printf_common>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d14d      	bne.n	8003988 <_printf_i+0x1c8>
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	b005      	add	sp, #20
 80038f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038f6:	4839      	ldr	r0, [pc, #228]	; (80039dc <_printf_i+0x21c>)
 80038f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	1d1d      	adds	r5, r3, #4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6015      	str	r5, [r2, #0]
 8003906:	060a      	lsls	r2, r1, #24
 8003908:	d50b      	bpl.n	8003922 <_printf_i+0x162>
 800390a:	07ca      	lsls	r2, r1, #31
 800390c:	bf44      	itt	mi
 800390e:	f041 0120 	orrmi.w	r1, r1, #32
 8003912:	6021      	strmi	r1, [r4, #0]
 8003914:	b91b      	cbnz	r3, 800391e <_printf_i+0x15e>
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	f022 0220 	bic.w	r2, r2, #32
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	e7b7      	b.n	8003892 <_printf_i+0xd2>
 8003922:	064d      	lsls	r5, r1, #25
 8003924:	bf48      	it	mi
 8003926:	b29b      	uxthmi	r3, r3
 8003928:	e7ef      	b.n	800390a <_printf_i+0x14a>
 800392a:	4665      	mov	r5, ip
 800392c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003930:	fb02 3311 	mls	r3, r2, r1, r3
 8003934:	5cc3      	ldrb	r3, [r0, r3]
 8003936:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800393a:	460b      	mov	r3, r1
 800393c:	2900      	cmp	r1, #0
 800393e:	d1f5      	bne.n	800392c <_printf_i+0x16c>
 8003940:	e7b9      	b.n	80038b6 <_printf_i+0xf6>
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	6825      	ldr	r5, [r4, #0]
 8003946:	1d18      	adds	r0, r3, #4
 8003948:	6961      	ldr	r1, [r4, #20]
 800394a:	6010      	str	r0, [r2, #0]
 800394c:	0628      	lsls	r0, r5, #24
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0x196>
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	e002      	b.n	800395c <_printf_i+0x19c>
 8003956:	066a      	lsls	r2, r5, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0x192>
 800395a:	8019      	strh	r1, [r3, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	4665      	mov	r5, ip
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	e7b9      	b.n	80038d8 <_printf_i+0x118>
 8003964:	6813      	ldr	r3, [r2, #0]
 8003966:	1d19      	adds	r1, r3, #4
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	681d      	ldr	r5, [r3, #0]
 800396c:	6862      	ldr	r2, [r4, #4]
 800396e:	2100      	movs	r1, #0
 8003970:	4628      	mov	r0, r5
 8003972:	f000 feaf 	bl	80046d4 <memchr>
 8003976:	b108      	cbz	r0, 800397c <_printf_i+0x1bc>
 8003978:	1b40      	subs	r0, r0, r5
 800397a:	6060      	str	r0, [r4, #4]
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	2300      	movs	r3, #0
 8003982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003986:	e7a7      	b.n	80038d8 <_printf_i+0x118>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	462a      	mov	r2, r5
 800398c:	4639      	mov	r1, r7
 800398e:	4630      	mov	r0, r6
 8003990:	47c0      	blx	r8
 8003992:	3001      	adds	r0, #1
 8003994:	d0aa      	beq.n	80038ec <_printf_i+0x12c>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	079b      	lsls	r3, r3, #30
 800399a:	d413      	bmi.n	80039c4 <_printf_i+0x204>
 800399c:	68e0      	ldr	r0, [r4, #12]
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	4298      	cmp	r0, r3
 80039a2:	bfb8      	it	lt
 80039a4:	4618      	movlt	r0, r3
 80039a6:	e7a3      	b.n	80038f0 <_printf_i+0x130>
 80039a8:	2301      	movs	r3, #1
 80039aa:	464a      	mov	r2, r9
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d09a      	beq.n	80038ec <_printf_i+0x12c>
 80039b6:	3501      	adds	r5, #1
 80039b8:	68e3      	ldr	r3, [r4, #12]
 80039ba:	9a03      	ldr	r2, [sp, #12]
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	42ab      	cmp	r3, r5
 80039c0:	dcf2      	bgt.n	80039a8 <_printf_i+0x1e8>
 80039c2:	e7eb      	b.n	800399c <_printf_i+0x1dc>
 80039c4:	2500      	movs	r5, #0
 80039c6:	f104 0919 	add.w	r9, r4, #25
 80039ca:	e7f5      	b.n	80039b8 <_printf_i+0x1f8>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ac      	bne.n	800392a <_printf_i+0x16a>
 80039d0:	7803      	ldrb	r3, [r0, #0]
 80039d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039da:	e76c      	b.n	80038b6 <_printf_i+0xf6>
 80039dc:	080051f7 	.word	0x080051f7
 80039e0:	08005208 	.word	0x08005208

080039e4 <siprintf>:
 80039e4:	b40e      	push	{r1, r2, r3}
 80039e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ea:	b500      	push	{lr}
 80039ec:	b09c      	sub	sp, #112	; 0x70
 80039ee:	ab1d      	add	r3, sp, #116	; 0x74
 80039f0:	9002      	str	r0, [sp, #8]
 80039f2:	9006      	str	r0, [sp, #24]
 80039f4:	9107      	str	r1, [sp, #28]
 80039f6:	9104      	str	r1, [sp, #16]
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <siprintf+0x38>)
 80039fa:	4909      	ldr	r1, [pc, #36]	; (8003a20 <siprintf+0x3c>)
 80039fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a00:	9105      	str	r1, [sp, #20]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	a902      	add	r1, sp, #8
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	f001 fa68 	bl	8004edc <_svfiprintf_r>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	9b02      	ldr	r3, [sp, #8]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	b01c      	add	sp, #112	; 0x70
 8003a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a18:	b003      	add	sp, #12
 8003a1a:	4770      	bx	lr
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	ffff0208 	.word	0xffff0208

08003a24 <quorem>:
 8003a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	6903      	ldr	r3, [r0, #16]
 8003a2a:	690c      	ldr	r4, [r1, #16]
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	f2c0 8084 	blt.w	8003b3c <quorem+0x118>
 8003a34:	3c01      	subs	r4, #1
 8003a36:	f101 0714 	add.w	r7, r1, #20
 8003a3a:	f100 0614 	add.w	r6, r0, #20
 8003a3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a46:	3501      	adds	r5, #1
 8003a48:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003a50:	eb06 030c 	add.w	r3, r6, ip
 8003a54:	eb07 090c 	add.w	r9, r7, ip
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	b39d      	cbz	r5, 8003ac4 <quorem+0xa0>
 8003a5c:	f04f 0a00 	mov.w	sl, #0
 8003a60:	4638      	mov	r0, r7
 8003a62:	46b6      	mov	lr, r6
 8003a64:	46d3      	mov	fp, sl
 8003a66:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a6a:	b293      	uxth	r3, r2
 8003a6c:	fb05 a303 	mla	r3, r5, r3, sl
 8003a70:	0c12      	lsrs	r2, r2, #16
 8003a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a76:	fb05 a202 	mla	r2, r5, r2, sl
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	ebab 0303 	sub.w	r3, fp, r3
 8003a80:	f8de b000 	ldr.w	fp, [lr]
 8003a84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a88:	fa1f fb8b 	uxth.w	fp, fp
 8003a8c:	445b      	add	r3, fp
 8003a8e:	fa1f fb82 	uxth.w	fp, r2
 8003a92:	f8de 2000 	ldr.w	r2, [lr]
 8003a96:	4581      	cmp	r9, r0
 8003a98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aa6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003aaa:	f84e 3b04 	str.w	r3, [lr], #4
 8003aae:	d2da      	bcs.n	8003a66 <quorem+0x42>
 8003ab0:	f856 300c 	ldr.w	r3, [r6, ip]
 8003ab4:	b933      	cbnz	r3, 8003ac4 <quorem+0xa0>
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	3b04      	subs	r3, #4
 8003aba:	429e      	cmp	r6, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	d331      	bcc.n	8003b24 <quorem+0x100>
 8003ac0:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	f001 f833 	bl	8004b30 <__mcmp>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	db26      	blt.n	8003b1c <quorem+0xf8>
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f04f 0c00 	mov.w	ip, #0
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	f857 1b04 	ldr.w	r1, [r7], #4
 8003ada:	f8d0 e000 	ldr.w	lr, [r0]
 8003ade:	b28b      	uxth	r3, r1
 8003ae0:	ebac 0303 	sub.w	r3, ip, r3
 8003ae4:	fa1f f28e 	uxth.w	r2, lr
 8003ae8:	4413      	add	r3, r2
 8003aea:	0c0a      	lsrs	r2, r1, #16
 8003aec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003afa:	45b9      	cmp	r9, r7
 8003afc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b00:	f840 3b04 	str.w	r3, [r0], #4
 8003b04:	d2e7      	bcs.n	8003ad6 <quorem+0xb2>
 8003b06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003b0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003b0e:	b92a      	cbnz	r2, 8003b1c <quorem+0xf8>
 8003b10:	3b04      	subs	r3, #4
 8003b12:	429e      	cmp	r6, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	d30b      	bcc.n	8003b30 <quorem+0x10c>
 8003b18:	f8c8 4010 	str.w	r4, [r8, #16]
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	b003      	add	sp, #12
 8003b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	3b04      	subs	r3, #4
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d1c9      	bne.n	8003ac0 <quorem+0x9c>
 8003b2c:	3c01      	subs	r4, #1
 8003b2e:	e7c4      	b.n	8003aba <quorem+0x96>
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	3b04      	subs	r3, #4
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d1ef      	bne.n	8003b18 <quorem+0xf4>
 8003b38:	3c01      	subs	r4, #1
 8003b3a:	e7ea      	b.n	8003b12 <quorem+0xee>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7ee      	b.n	8003b1e <quorem+0xfa>

08003b40 <_dtoa_r>:
 8003b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b44:	4616      	mov	r6, r2
 8003b46:	461f      	mov	r7, r3
 8003b48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b4a:	b095      	sub	sp, #84	; 0x54
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003b52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003b56:	b93d      	cbnz	r5, 8003b68 <_dtoa_r+0x28>
 8003b58:	2010      	movs	r0, #16
 8003b5a:	f000 fdb3 	bl	80046c4 <malloc>
 8003b5e:	6260      	str	r0, [r4, #36]	; 0x24
 8003b60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b64:	6005      	str	r5, [r0, #0]
 8003b66:	60c5      	str	r5, [r0, #12]
 8003b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	b151      	cbz	r1, 8003b84 <_dtoa_r+0x44>
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2301      	movs	r3, #1
 8003b72:	4093      	lsls	r3, r2
 8003b74:	604a      	str	r2, [r1, #4]
 8003b76:	608b      	str	r3, [r1, #8]
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f000 fdf8 	bl	800476e <_Bfree>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	1e3b      	subs	r3, r7, #0
 8003b86:	bfaf      	iteee	ge
 8003b88:	2300      	movge	r3, #0
 8003b8a:	2201      	movlt	r2, #1
 8003b8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b90:	9303      	strlt	r3, [sp, #12]
 8003b92:	bfac      	ite	ge
 8003b94:	f8c8 3000 	strge.w	r3, [r8]
 8003b98:	f8c8 2000 	strlt.w	r2, [r8]
 8003b9c:	4bae      	ldr	r3, [pc, #696]	; (8003e58 <_dtoa_r+0x318>)
 8003b9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003ba2:	ea33 0308 	bics.w	r3, r3, r8
 8003ba6:	d11b      	bne.n	8003be0 <_dtoa_r+0xa0>
 8003ba8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	9b02      	ldr	r3, [sp, #8]
 8003bb2:	b923      	cbnz	r3, 8003bbe <_dtoa_r+0x7e>
 8003bb4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f000 8545 	beq.w	8004648 <_dtoa_r+0xb08>
 8003bbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bc0:	b953      	cbnz	r3, 8003bd8 <_dtoa_r+0x98>
 8003bc2:	4ba6      	ldr	r3, [pc, #664]	; (8003e5c <_dtoa_r+0x31c>)
 8003bc4:	e021      	b.n	8003c0a <_dtoa_r+0xca>
 8003bc6:	4ba6      	ldr	r3, [pc, #664]	; (8003e60 <_dtoa_r+0x320>)
 8003bc8:	9306      	str	r3, [sp, #24]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	9806      	ldr	r0, [sp, #24]
 8003bd2:	b015      	add	sp, #84	; 0x54
 8003bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd8:	4ba0      	ldr	r3, [pc, #640]	; (8003e5c <_dtoa_r+0x31c>)
 8003bda:	9306      	str	r3, [sp, #24]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	e7f5      	b.n	8003bcc <_dtoa_r+0x8c>
 8003be0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2300      	movs	r3, #0
 8003be8:	4630      	mov	r0, r6
 8003bea:	4639      	mov	r1, r7
 8003bec:	f7fc feec 	bl	80009c8 <__aeabi_dcmpeq>
 8003bf0:	4682      	mov	sl, r0
 8003bf2:	b160      	cbz	r0, 8003c0e <_dtoa_r+0xce>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8520 	beq.w	8004642 <_dtoa_r+0xb02>
 8003c02:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <_dtoa_r+0x324>)
 8003c04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	9306      	str	r3, [sp, #24]
 8003c0c:	e7e0      	b.n	8003bd0 <_dtoa_r+0x90>
 8003c0e:	ab12      	add	r3, sp, #72	; 0x48
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	ab13      	add	r3, sp, #76	; 0x4c
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4632      	mov	r2, r6
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f001 f800 	bl	8004c20 <__d2b>
 8003c20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003c24:	4683      	mov	fp, r0
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	d07d      	beq.n	8003d26 <_dtoa_r+0x1e6>
 8003c2a:	46b0      	mov	r8, r6
 8003c2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003c34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003c38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003c40:	2200      	movs	r2, #0
 8003c42:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <_dtoa_r+0x328>)
 8003c44:	4640      	mov	r0, r8
 8003c46:	4649      	mov	r1, r9
 8003c48:	f7fc fa9e 	bl	8000188 <__aeabi_dsub>
 8003c4c:	a37c      	add	r3, pc, #496	; (adr r3, 8003e40 <_dtoa_r+0x300>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fc51 	bl	80004f8 <__aeabi_dmul>
 8003c56:	a37c      	add	r3, pc, #496	; (adr r3, 8003e48 <_dtoa_r+0x308>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fa96 	bl	800018c <__adddf3>
 8003c60:	4606      	mov	r6, r0
 8003c62:	4628      	mov	r0, r5
 8003c64:	460f      	mov	r7, r1
 8003c66:	f7fc fbdd 	bl	8000424 <__aeabi_i2d>
 8003c6a:	a379      	add	r3, pc, #484	; (adr r3, 8003e50 <_dtoa_r+0x310>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc fc42 	bl	80004f8 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fa86 	bl	800018c <__adddf3>
 8003c80:	4606      	mov	r6, r0
 8003c82:	460f      	mov	r7, r1
 8003c84:	f7fc fee8 	bl	8000a58 <__aeabi_d2iz>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4682      	mov	sl, r0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4630      	mov	r0, r6
 8003c90:	4639      	mov	r1, r7
 8003c92:	f7fc fea3 	bl	80009dc <__aeabi_dcmplt>
 8003c96:	b148      	cbz	r0, 8003cac <_dtoa_r+0x16c>
 8003c98:	4650      	mov	r0, sl
 8003c9a:	f7fc fbc3 	bl	8000424 <__aeabi_i2d>
 8003c9e:	4632      	mov	r2, r6
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	f7fc fe91 	bl	80009c8 <__aeabi_dcmpeq>
 8003ca6:	b908      	cbnz	r0, 8003cac <_dtoa_r+0x16c>
 8003ca8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cac:	f1ba 0f16 	cmp.w	sl, #22
 8003cb0:	d85a      	bhi.n	8003d68 <_dtoa_r+0x228>
 8003cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cb6:	496d      	ldr	r1, [pc, #436]	; (8003e6c <_dtoa_r+0x32c>)
 8003cb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc0:	f7fc feaa 	bl	8000a18 <__aeabi_dcmpgt>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d051      	beq.n	8003d6c <_dtoa_r+0x22c>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cce:	930d      	str	r3, [sp, #52]	; 0x34
 8003cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cd2:	1b5d      	subs	r5, r3, r5
 8003cd4:	1e6b      	subs	r3, r5, #1
 8003cd6:	9307      	str	r3, [sp, #28]
 8003cd8:	bf43      	ittte	mi
 8003cda:	2300      	movmi	r3, #0
 8003cdc:	f1c5 0901 	rsbmi	r9, r5, #1
 8003ce0:	9307      	strmi	r3, [sp, #28]
 8003ce2:	f04f 0900 	movpl.w	r9, #0
 8003ce6:	f1ba 0f00 	cmp.w	sl, #0
 8003cea:	db41      	blt.n	8003d70 <_dtoa_r+0x230>
 8003cec:	9b07      	ldr	r3, [sp, #28]
 8003cee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003cf2:	4453      	add	r3, sl
 8003cf4:	9307      	str	r3, [sp, #28]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9308      	str	r3, [sp, #32]
 8003cfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	f200 808f 	bhi.w	8003e20 <_dtoa_r+0x2e0>
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	bfc4      	itt	gt
 8003d06:	3b04      	subgt	r3, #4
 8003d08:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003d0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d0c:	bfc8      	it	gt
 8003d0e:	2500      	movgt	r5, #0
 8003d10:	f1a3 0302 	sub.w	r3, r3, #2
 8003d14:	bfd8      	it	le
 8003d16:	2501      	movle	r5, #1
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	f200 808d 	bhi.w	8003e38 <_dtoa_r+0x2f8>
 8003d1e:	e8df f003 	tbb	[pc, r3]
 8003d22:	7d7b      	.short	0x7d7b
 8003d24:	6f2f      	.short	0x6f2f
 8003d26:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003d2a:	441d      	add	r5, r3
 8003d2c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003d30:	2820      	cmp	r0, #32
 8003d32:	dd13      	ble.n	8003d5c <_dtoa_r+0x21c>
 8003d34:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003d38:	9b02      	ldr	r3, [sp, #8]
 8003d3a:	fa08 f800 	lsl.w	r8, r8, r0
 8003d3e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003d42:	fa23 f000 	lsr.w	r0, r3, r0
 8003d46:	ea48 0000 	orr.w	r0, r8, r0
 8003d4a:	f7fc fb5b 	bl	8000404 <__aeabi_ui2d>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4680      	mov	r8, r0
 8003d52:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003d56:	3d01      	subs	r5, #1
 8003d58:	9310      	str	r3, [sp, #64]	; 0x40
 8003d5a:	e771      	b.n	8003c40 <_dtoa_r+0x100>
 8003d5c:	9b02      	ldr	r3, [sp, #8]
 8003d5e:	f1c0 0020 	rsb	r0, r0, #32
 8003d62:	fa03 f000 	lsl.w	r0, r3, r0
 8003d66:	e7f0      	b.n	8003d4a <_dtoa_r+0x20a>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e7b0      	b.n	8003cce <_dtoa_r+0x18e>
 8003d6c:	900d      	str	r0, [sp, #52]	; 0x34
 8003d6e:	e7af      	b.n	8003cd0 <_dtoa_r+0x190>
 8003d70:	f1ca 0300 	rsb	r3, sl, #0
 8003d74:	9308      	str	r3, [sp, #32]
 8003d76:	2300      	movs	r3, #0
 8003d78:	eba9 090a 	sub.w	r9, r9, sl
 8003d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8003d7e:	e7bc      	b.n	8003cfa <_dtoa_r+0x1ba>
 8003d80:	2301      	movs	r3, #1
 8003d82:	9309      	str	r3, [sp, #36]	; 0x24
 8003d84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dd74      	ble.n	8003e74 <_dtoa_r+0x334>
 8003d8a:	4698      	mov	r8, r3
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003d92:	6072      	str	r2, [r6, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	f102 0014 	add.w	r0, r2, #20
 8003d9a:	4298      	cmp	r0, r3
 8003d9c:	6871      	ldr	r1, [r6, #4]
 8003d9e:	d96e      	bls.n	8003e7e <_dtoa_r+0x33e>
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fcb0 	bl	8004706 <_Balloc>
 8003da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003da8:	6030      	str	r0, [r6, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b8 0f0e 	cmp.w	r8, #14
 8003db0:	9306      	str	r3, [sp, #24]
 8003db2:	f200 80ed 	bhi.w	8003f90 <_dtoa_r+0x450>
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	f000 80ea 	beq.w	8003f90 <_dtoa_r+0x450>
 8003dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dc0:	f1ba 0f00 	cmp.w	sl, #0
 8003dc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003dc8:	dd77      	ble.n	8003eba <_dtoa_r+0x37a>
 8003dca:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <_dtoa_r+0x32c>)
 8003dcc:	f00a 030f 	and.w	r3, sl, #15
 8003dd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003dd8:	06f0      	lsls	r0, r6, #27
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003de2:	d568      	bpl.n	8003eb6 <_dtoa_r+0x376>
 8003de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <_dtoa_r+0x330>)
 8003dea:	2503      	movs	r5, #3
 8003dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003df0:	f7fc fcac 	bl	800074c <__aeabi_ddiv>
 8003df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003df8:	f006 060f 	and.w	r6, r6, #15
 8003dfc:	4f1c      	ldr	r7, [pc, #112]	; (8003e70 <_dtoa_r+0x330>)
 8003dfe:	e04f      	b.n	8003ea0 <_dtoa_r+0x360>
 8003e00:	2301      	movs	r3, #1
 8003e02:	9309      	str	r3, [sp, #36]	; 0x24
 8003e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e06:	4453      	add	r3, sl
 8003e08:	f103 0801 	add.w	r8, r3, #1
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	4643      	mov	r3, r8
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bfb8      	it	lt
 8003e14:	2301      	movlt	r3, #1
 8003e16:	e7ba      	b.n	8003d8e <_dtoa_r+0x24e>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e7b2      	b.n	8003d82 <_dtoa_r+0x242>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e7f0      	b.n	8003e02 <_dtoa_r+0x2c2>
 8003e20:	2501      	movs	r5, #1
 8003e22:	2300      	movs	r3, #0
 8003e24:	9509      	str	r5, [sp, #36]	; 0x24
 8003e26:	931e      	str	r3, [sp, #120]	; 0x78
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	4698      	mov	r8, r3
 8003e32:	2312      	movs	r3, #18
 8003e34:	921f      	str	r2, [sp, #124]	; 0x7c
 8003e36:	e7aa      	b.n	8003d8e <_dtoa_r+0x24e>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3c:	e7f4      	b.n	8003e28 <_dtoa_r+0x2e8>
 8003e3e:	bf00      	nop
 8003e40:	636f4361 	.word	0x636f4361
 8003e44:	3fd287a7 	.word	0x3fd287a7
 8003e48:	8b60c8b3 	.word	0x8b60c8b3
 8003e4c:	3fc68a28 	.word	0x3fc68a28
 8003e50:	509f79fb 	.word	0x509f79fb
 8003e54:	3fd34413 	.word	0x3fd34413
 8003e58:	7ff00000 	.word	0x7ff00000
 8003e5c:	08005222 	.word	0x08005222
 8003e60:	08005219 	.word	0x08005219
 8003e64:	080051f6 	.word	0x080051f6
 8003e68:	3ff80000 	.word	0x3ff80000
 8003e6c:	08005250 	.word	0x08005250
 8003e70:	08005228 	.word	0x08005228
 8003e74:	2301      	movs	r3, #1
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	4698      	mov	r8, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	e7da      	b.n	8003e34 <_dtoa_r+0x2f4>
 8003e7e:	3101      	adds	r1, #1
 8003e80:	6071      	str	r1, [r6, #4]
 8003e82:	0052      	lsls	r2, r2, #1
 8003e84:	e787      	b.n	8003d96 <_dtoa_r+0x256>
 8003e86:	07f1      	lsls	r1, r6, #31
 8003e88:	d508      	bpl.n	8003e9c <_dtoa_r+0x35c>
 8003e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e92:	f7fc fb31 	bl	80004f8 <__aeabi_dmul>
 8003e96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	1076      	asrs	r6, r6, #1
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	2e00      	cmp	r6, #0
 8003ea2:	d1f0      	bne.n	8003e86 <_dtoa_r+0x346>
 8003ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eac:	f7fc fc4e 	bl	800074c <__aeabi_ddiv>
 8003eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eb4:	e01b      	b.n	8003eee <_dtoa_r+0x3ae>
 8003eb6:	2502      	movs	r5, #2
 8003eb8:	e7a0      	b.n	8003dfc <_dtoa_r+0x2bc>
 8003eba:	f000 80a4 	beq.w	8004006 <_dtoa_r+0x4c6>
 8003ebe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ec2:	f1ca 0600 	rsb	r6, sl, #0
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <_dtoa_r+0x608>)
 8003ec8:	f006 020f 	and.w	r2, r6, #15
 8003ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc fb10 	bl	80004f8 <__aeabi_dmul>
 8003ed8:	2502      	movs	r5, #2
 8003eda:	2300      	movs	r3, #0
 8003edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ee0:	4f9a      	ldr	r7, [pc, #616]	; (800414c <_dtoa_r+0x60c>)
 8003ee2:	1136      	asrs	r6, r6, #4
 8003ee4:	2e00      	cmp	r6, #0
 8003ee6:	f040 8083 	bne.w	8003ff0 <_dtoa_r+0x4b0>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e0      	bne.n	8003eb0 <_dtoa_r+0x370>
 8003eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 808a 	beq.w	800400a <_dtoa_r+0x4ca>
 8003ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003efa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f02:	2200      	movs	r2, #0
 8003f04:	4b92      	ldr	r3, [pc, #584]	; (8004150 <_dtoa_r+0x610>)
 8003f06:	f7fc fd69 	bl	80009dc <__aeabi_dcmplt>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d07d      	beq.n	800400a <_dtoa_r+0x4ca>
 8003f0e:	f1b8 0f00 	cmp.w	r8, #0
 8003f12:	d07a      	beq.n	800400a <_dtoa_r+0x4ca>
 8003f14:	9b04      	ldr	r3, [sp, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dd36      	ble.n	8003f88 <_dtoa_r+0x448>
 8003f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f1e:	2200      	movs	r2, #0
 8003f20:	4b8c      	ldr	r3, [pc, #560]	; (8004154 <_dtoa_r+0x614>)
 8003f22:	f7fc fae9 	bl	80004f8 <__aeabi_dmul>
 8003f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f2a:	9e04      	ldr	r6, [sp, #16]
 8003f2c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003f30:	3501      	adds	r5, #1
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7fc fa76 	bl	8000424 <__aeabi_i2d>
 8003f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f3c:	f7fc fadc 	bl	80004f8 <__aeabi_dmul>
 8003f40:	2200      	movs	r2, #0
 8003f42:	4b85      	ldr	r3, [pc, #532]	; (8004158 <_dtoa_r+0x618>)
 8003f44:	f7fc f922 	bl	800018c <__adddf3>
 8003f48:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003f4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f50:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	d15c      	bne.n	8004010 <_dtoa_r+0x4d0>
 8003f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4b7f      	ldr	r3, [pc, #508]	; (800415c <_dtoa_r+0x61c>)
 8003f5e:	f7fc f913 	bl	8000188 <__aeabi_dsub>
 8003f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f64:	462b      	mov	r3, r5
 8003f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f6a:	f7fc fd55 	bl	8000a18 <__aeabi_dcmpgt>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	f040 8281 	bne.w	8004476 <_dtoa_r+0x936>
 8003f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f7e:	f7fc fd2d 	bl	80009dc <__aeabi_dcmplt>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f040 8275 	bne.w	8004472 <_dtoa_r+0x932>
 8003f88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f2c0 814b 	blt.w	800422e <_dtoa_r+0x6ee>
 8003f98:	f1ba 0f0e 	cmp.w	sl, #14
 8003f9c:	f300 8147 	bgt.w	800422e <_dtoa_r+0x6ee>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <_dtoa_r+0x608>)
 8003fa2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f280 80d7 	bge.w	8004164 <_dtoa_r+0x624>
 8003fb6:	f1b8 0f00 	cmp.w	r8, #0
 8003fba:	f300 80d3 	bgt.w	8004164 <_dtoa_r+0x624>
 8003fbe:	f040 8257 	bne.w	8004470 <_dtoa_r+0x930>
 8003fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4b64      	ldr	r3, [pc, #400]	; (800415c <_dtoa_r+0x61c>)
 8003fca:	f7fc fa95 	bl	80004f8 <__aeabi_dmul>
 8003fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fd2:	f7fc fd17 	bl	8000a04 <__aeabi_dcmpge>
 8003fd6:	4646      	mov	r6, r8
 8003fd8:	4647      	mov	r7, r8
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f040 822d 	bne.w	800443a <_dtoa_r+0x8fa>
 8003fe0:	9b06      	ldr	r3, [sp, #24]
 8003fe2:	9a06      	ldr	r2, [sp, #24]
 8003fe4:	1c5d      	adds	r5, r3, #1
 8003fe6:	2331      	movs	r3, #49	; 0x31
 8003fe8:	f10a 0a01 	add.w	sl, sl, #1
 8003fec:	7013      	strb	r3, [r2, #0]
 8003fee:	e228      	b.n	8004442 <_dtoa_r+0x902>
 8003ff0:	07f2      	lsls	r2, r6, #31
 8003ff2:	d505      	bpl.n	8004000 <_dtoa_r+0x4c0>
 8003ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff8:	f7fc fa7e 	bl	80004f8 <__aeabi_dmul>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	3501      	adds	r5, #1
 8004000:	1076      	asrs	r6, r6, #1
 8004002:	3708      	adds	r7, #8
 8004004:	e76e      	b.n	8003ee4 <_dtoa_r+0x3a4>
 8004006:	2502      	movs	r5, #2
 8004008:	e771      	b.n	8003eee <_dtoa_r+0x3ae>
 800400a:	4657      	mov	r7, sl
 800400c:	4646      	mov	r6, r8
 800400e:	e790      	b.n	8003f32 <_dtoa_r+0x3f2>
 8004010:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <_dtoa_r+0x608>)
 8004012:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004016:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800401a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d048      	beq.n	80040b2 <_dtoa_r+0x572>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	2000      	movs	r0, #0
 8004026:	494e      	ldr	r1, [pc, #312]	; (8004160 <_dtoa_r+0x620>)
 8004028:	f7fc fb90 	bl	800074c <__aeabi_ddiv>
 800402c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004030:	f7fc f8aa 	bl	8000188 <__aeabi_dsub>
 8004034:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004038:	9d06      	ldr	r5, [sp, #24]
 800403a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800403e:	f7fc fd0b 	bl	8000a58 <__aeabi_d2iz>
 8004042:	9011      	str	r0, [sp, #68]	; 0x44
 8004044:	f7fc f9ee 	bl	8000424 <__aeabi_i2d>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004050:	f7fc f89a 	bl	8000188 <__aeabi_dsub>
 8004054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800405a:	3330      	adds	r3, #48	; 0x30
 800405c:	f805 3b01 	strb.w	r3, [r5], #1
 8004060:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004064:	f7fc fcba 	bl	80009dc <__aeabi_dcmplt>
 8004068:	2800      	cmp	r0, #0
 800406a:	d163      	bne.n	8004134 <_dtoa_r+0x5f4>
 800406c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004070:	2000      	movs	r0, #0
 8004072:	4937      	ldr	r1, [pc, #220]	; (8004150 <_dtoa_r+0x610>)
 8004074:	f7fc f888 	bl	8000188 <__aeabi_dsub>
 8004078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800407c:	f7fc fcae 	bl	80009dc <__aeabi_dcmplt>
 8004080:	2800      	cmp	r0, #0
 8004082:	f040 80b5 	bne.w	80041f0 <_dtoa_r+0x6b0>
 8004086:	9b06      	ldr	r3, [sp, #24]
 8004088:	1aeb      	subs	r3, r5, r3
 800408a:	429e      	cmp	r6, r3
 800408c:	f77f af7c 	ble.w	8003f88 <_dtoa_r+0x448>
 8004090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004094:	2200      	movs	r2, #0
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <_dtoa_r+0x614>)
 8004098:	f7fc fa2e 	bl	80004f8 <__aeabi_dmul>
 800409c:	2200      	movs	r2, #0
 800409e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a6:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <_dtoa_r+0x614>)
 80040a8:	f7fc fa26 	bl	80004f8 <__aeabi_dmul>
 80040ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040b0:	e7c3      	b.n	800403a <_dtoa_r+0x4fa>
 80040b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040b6:	f7fc fa1f 	bl	80004f8 <__aeabi_dmul>
 80040ba:	9b06      	ldr	r3, [sp, #24]
 80040bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040c0:	199d      	adds	r5, r3, r6
 80040c2:	461e      	mov	r6, r3
 80040c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040c8:	f7fc fcc6 	bl	8000a58 <__aeabi_d2iz>
 80040cc:	9011      	str	r0, [sp, #68]	; 0x44
 80040ce:	f7fc f9a9 	bl	8000424 <__aeabi_i2d>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040da:	f7fc f855 	bl	8000188 <__aeabi_dsub>
 80040de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040e4:	3330      	adds	r3, #48	; 0x30
 80040e6:	f806 3b01 	strb.w	r3, [r6], #1
 80040ea:	42ae      	cmp	r6, r5
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	d124      	bne.n	800413c <_dtoa_r+0x5fc>
 80040f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <_dtoa_r+0x620>)
 80040f8:	f7fc f848 	bl	800018c <__adddf3>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004104:	f7fc fc88 	bl	8000a18 <__aeabi_dcmpgt>
 8004108:	2800      	cmp	r0, #0
 800410a:	d171      	bne.n	80041f0 <_dtoa_r+0x6b0>
 800410c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004110:	2000      	movs	r0, #0
 8004112:	4913      	ldr	r1, [pc, #76]	; (8004160 <_dtoa_r+0x620>)
 8004114:	f7fc f838 	bl	8000188 <__aeabi_dsub>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004120:	f7fc fc5c 	bl	80009dc <__aeabi_dcmplt>
 8004124:	2800      	cmp	r0, #0
 8004126:	f43f af2f 	beq.w	8003f88 <_dtoa_r+0x448>
 800412a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800412e:	1e6a      	subs	r2, r5, #1
 8004130:	2b30      	cmp	r3, #48	; 0x30
 8004132:	d001      	beq.n	8004138 <_dtoa_r+0x5f8>
 8004134:	46ba      	mov	sl, r7
 8004136:	e04a      	b.n	80041ce <_dtoa_r+0x68e>
 8004138:	4615      	mov	r5, r2
 800413a:	e7f6      	b.n	800412a <_dtoa_r+0x5ea>
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <_dtoa_r+0x614>)
 800413e:	f7fc f9db 	bl	80004f8 <__aeabi_dmul>
 8004142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004146:	e7bd      	b.n	80040c4 <_dtoa_r+0x584>
 8004148:	08005250 	.word	0x08005250
 800414c:	08005228 	.word	0x08005228
 8004150:	3ff00000 	.word	0x3ff00000
 8004154:	40240000 	.word	0x40240000
 8004158:	401c0000 	.word	0x401c0000
 800415c:	40140000 	.word	0x40140000
 8004160:	3fe00000 	.word	0x3fe00000
 8004164:	9d06      	ldr	r5, [sp, #24]
 8004166:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800416a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800416e:	4630      	mov	r0, r6
 8004170:	4639      	mov	r1, r7
 8004172:	f7fc faeb 	bl	800074c <__aeabi_ddiv>
 8004176:	f7fc fc6f 	bl	8000a58 <__aeabi_d2iz>
 800417a:	4681      	mov	r9, r0
 800417c:	f7fc f952 	bl	8000424 <__aeabi_i2d>
 8004180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004184:	f7fc f9b8 	bl	80004f8 <__aeabi_dmul>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4630      	mov	r0, r6
 800418e:	4639      	mov	r1, r7
 8004190:	f7fb fffa 	bl	8000188 <__aeabi_dsub>
 8004194:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004198:	f805 6b01 	strb.w	r6, [r5], #1
 800419c:	9e06      	ldr	r6, [sp, #24]
 800419e:	4602      	mov	r2, r0
 80041a0:	1bae      	subs	r6, r5, r6
 80041a2:	45b0      	cmp	r8, r6
 80041a4:	460b      	mov	r3, r1
 80041a6:	d135      	bne.n	8004214 <_dtoa_r+0x6d4>
 80041a8:	f7fb fff0 	bl	800018c <__adddf3>
 80041ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041b0:	4606      	mov	r6, r0
 80041b2:	460f      	mov	r7, r1
 80041b4:	f7fc fc30 	bl	8000a18 <__aeabi_dcmpgt>
 80041b8:	b9c8      	cbnz	r0, 80041ee <_dtoa_r+0x6ae>
 80041ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc fc01 	bl	80009c8 <__aeabi_dcmpeq>
 80041c6:	b110      	cbz	r0, 80041ce <_dtoa_r+0x68e>
 80041c8:	f019 0f01 	tst.w	r9, #1
 80041cc:	d10f      	bne.n	80041ee <_dtoa_r+0x6ae>
 80041ce:	4659      	mov	r1, fp
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 facc 	bl	800476e <_Bfree>
 80041d6:	2300      	movs	r3, #0
 80041d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041da:	702b      	strb	r3, [r5, #0]
 80041dc:	f10a 0301 	add.w	r3, sl, #1
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f43f acf3 	beq.w	8003bd0 <_dtoa_r+0x90>
 80041ea:	601d      	str	r5, [r3, #0]
 80041ec:	e4f0      	b.n	8003bd0 <_dtoa_r+0x90>
 80041ee:	4657      	mov	r7, sl
 80041f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80041f4:	1e6b      	subs	r3, r5, #1
 80041f6:	2a39      	cmp	r2, #57	; 0x39
 80041f8:	d106      	bne.n	8004208 <_dtoa_r+0x6c8>
 80041fa:	9a06      	ldr	r2, [sp, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <_dtoa_r+0x6d0>
 8004200:	2330      	movs	r3, #48	; 0x30
 8004202:	7013      	strb	r3, [r2, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	3701      	adds	r7, #1
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	3201      	adds	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e791      	b.n	8004134 <_dtoa_r+0x5f4>
 8004210:	461d      	mov	r5, r3
 8004212:	e7ed      	b.n	80041f0 <_dtoa_r+0x6b0>
 8004214:	2200      	movs	r2, #0
 8004216:	4b99      	ldr	r3, [pc, #612]	; (800447c <_dtoa_r+0x93c>)
 8004218:	f7fc f96e 	bl	80004f8 <__aeabi_dmul>
 800421c:	2200      	movs	r2, #0
 800421e:	2300      	movs	r3, #0
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	f7fc fbd0 	bl	80009c8 <__aeabi_dcmpeq>
 8004228:	2800      	cmp	r0, #0
 800422a:	d09e      	beq.n	800416a <_dtoa_r+0x62a>
 800422c:	e7cf      	b.n	80041ce <_dtoa_r+0x68e>
 800422e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004230:	2a00      	cmp	r2, #0
 8004232:	f000 8088 	beq.w	8004346 <_dtoa_r+0x806>
 8004236:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004238:	2a01      	cmp	r2, #1
 800423a:	dc6d      	bgt.n	8004318 <_dtoa_r+0x7d8>
 800423c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800423e:	2a00      	cmp	r2, #0
 8004240:	d066      	beq.n	8004310 <_dtoa_r+0x7d0>
 8004242:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004246:	464d      	mov	r5, r9
 8004248:	9e08      	ldr	r6, [sp, #32]
 800424a:	9a07      	ldr	r2, [sp, #28]
 800424c:	2101      	movs	r1, #1
 800424e:	441a      	add	r2, r3
 8004250:	4620      	mov	r0, r4
 8004252:	4499      	add	r9, r3
 8004254:	9207      	str	r2, [sp, #28]
 8004256:	f000 fb2a 	bl	80048ae <__i2b>
 800425a:	4607      	mov	r7, r0
 800425c:	2d00      	cmp	r5, #0
 800425e:	dd0b      	ble.n	8004278 <_dtoa_r+0x738>
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd08      	ble.n	8004278 <_dtoa_r+0x738>
 8004266:	42ab      	cmp	r3, r5
 8004268:	bfa8      	it	ge
 800426a:	462b      	movge	r3, r5
 800426c:	9a07      	ldr	r2, [sp, #28]
 800426e:	eba9 0903 	sub.w	r9, r9, r3
 8004272:	1aed      	subs	r5, r5, r3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	9307      	str	r3, [sp, #28]
 8004278:	9b08      	ldr	r3, [sp, #32]
 800427a:	b1eb      	cbz	r3, 80042b8 <_dtoa_r+0x778>
 800427c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d065      	beq.n	800434e <_dtoa_r+0x80e>
 8004282:	b18e      	cbz	r6, 80042a8 <_dtoa_r+0x768>
 8004284:	4639      	mov	r1, r7
 8004286:	4632      	mov	r2, r6
 8004288:	4620      	mov	r0, r4
 800428a:	f000 fbaf 	bl	80049ec <__pow5mult>
 800428e:	465a      	mov	r2, fp
 8004290:	4601      	mov	r1, r0
 8004292:	4607      	mov	r7, r0
 8004294:	4620      	mov	r0, r4
 8004296:	f000 fb13 	bl	80048c0 <__multiply>
 800429a:	4659      	mov	r1, fp
 800429c:	900a      	str	r0, [sp, #40]	; 0x28
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 fa65 	bl	800476e <_Bfree>
 80042a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a6:	469b      	mov	fp, r3
 80042a8:	9b08      	ldr	r3, [sp, #32]
 80042aa:	1b9a      	subs	r2, r3, r6
 80042ac:	d004      	beq.n	80042b8 <_dtoa_r+0x778>
 80042ae:	4659      	mov	r1, fp
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fb9b 	bl	80049ec <__pow5mult>
 80042b6:	4683      	mov	fp, r0
 80042b8:	2101      	movs	r1, #1
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 faf7 	bl	80048ae <__i2b>
 80042c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042c2:	4606      	mov	r6, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 81c6 	beq.w	8004656 <_dtoa_r+0xb16>
 80042ca:	461a      	mov	r2, r3
 80042cc:	4601      	mov	r1, r0
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 fb8c 	bl	80049ec <__pow5mult>
 80042d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042d6:	4606      	mov	r6, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	dc3e      	bgt.n	800435a <_dtoa_r+0x81a>
 80042dc:	9b02      	ldr	r3, [sp, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d137      	bne.n	8004352 <_dtoa_r+0x812>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d134      	bne.n	8004356 <_dtoa_r+0x816>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	0d1b      	lsrs	r3, r3, #20
 80042f4:	051b      	lsls	r3, r3, #20
 80042f6:	b12b      	cbz	r3, 8004304 <_dtoa_r+0x7c4>
 80042f8:	9b07      	ldr	r3, [sp, #28]
 80042fa:	f109 0901 	add.w	r9, r9, #1
 80042fe:	3301      	adds	r3, #1
 8004300:	9307      	str	r3, [sp, #28]
 8004302:	2301      	movs	r3, #1
 8004304:	9308      	str	r3, [sp, #32]
 8004306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d128      	bne.n	800435e <_dtoa_r+0x81e>
 800430c:	2001      	movs	r0, #1
 800430e:	e02e      	b.n	800436e <_dtoa_r+0x82e>
 8004310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004312:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004316:	e796      	b.n	8004246 <_dtoa_r+0x706>
 8004318:	9b08      	ldr	r3, [sp, #32]
 800431a:	f108 36ff 	add.w	r6, r8, #4294967295
 800431e:	42b3      	cmp	r3, r6
 8004320:	bfb7      	itett	lt
 8004322:	9b08      	ldrlt	r3, [sp, #32]
 8004324:	1b9e      	subge	r6, r3, r6
 8004326:	1af2      	sublt	r2, r6, r3
 8004328:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800432a:	bfbf      	itttt	lt
 800432c:	9608      	strlt	r6, [sp, #32]
 800432e:	189b      	addlt	r3, r3, r2
 8004330:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004332:	2600      	movlt	r6, #0
 8004334:	f1b8 0f00 	cmp.w	r8, #0
 8004338:	bfb9      	ittee	lt
 800433a:	eba9 0508 	sublt.w	r5, r9, r8
 800433e:	2300      	movlt	r3, #0
 8004340:	464d      	movge	r5, r9
 8004342:	4643      	movge	r3, r8
 8004344:	e781      	b.n	800424a <_dtoa_r+0x70a>
 8004346:	9e08      	ldr	r6, [sp, #32]
 8004348:	464d      	mov	r5, r9
 800434a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800434c:	e786      	b.n	800425c <_dtoa_r+0x71c>
 800434e:	9a08      	ldr	r2, [sp, #32]
 8004350:	e7ad      	b.n	80042ae <_dtoa_r+0x76e>
 8004352:	2300      	movs	r3, #0
 8004354:	e7d6      	b.n	8004304 <_dtoa_r+0x7c4>
 8004356:	9b02      	ldr	r3, [sp, #8]
 8004358:	e7d4      	b.n	8004304 <_dtoa_r+0x7c4>
 800435a:	2300      	movs	r3, #0
 800435c:	9308      	str	r3, [sp, #32]
 800435e:	6933      	ldr	r3, [r6, #16]
 8004360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004364:	6918      	ldr	r0, [r3, #16]
 8004366:	f000 fa54 	bl	8004812 <__hi0bits>
 800436a:	f1c0 0020 	rsb	r0, r0, #32
 800436e:	9b07      	ldr	r3, [sp, #28]
 8004370:	4418      	add	r0, r3
 8004372:	f010 001f 	ands.w	r0, r0, #31
 8004376:	d047      	beq.n	8004408 <_dtoa_r+0x8c8>
 8004378:	f1c0 0320 	rsb	r3, r0, #32
 800437c:	2b04      	cmp	r3, #4
 800437e:	dd3b      	ble.n	80043f8 <_dtoa_r+0x8b8>
 8004380:	9b07      	ldr	r3, [sp, #28]
 8004382:	f1c0 001c 	rsb	r0, r0, #28
 8004386:	4481      	add	r9, r0
 8004388:	4405      	add	r5, r0
 800438a:	4403      	add	r3, r0
 800438c:	9307      	str	r3, [sp, #28]
 800438e:	f1b9 0f00 	cmp.w	r9, #0
 8004392:	dd05      	ble.n	80043a0 <_dtoa_r+0x860>
 8004394:	4659      	mov	r1, fp
 8004396:	464a      	mov	r2, r9
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fb75 	bl	8004a88 <__lshift>
 800439e:	4683      	mov	fp, r0
 80043a0:	9b07      	ldr	r3, [sp, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	dd05      	ble.n	80043b2 <_dtoa_r+0x872>
 80043a6:	4631      	mov	r1, r6
 80043a8:	461a      	mov	r2, r3
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 fb6c 	bl	8004a88 <__lshift>
 80043b0:	4606      	mov	r6, r0
 80043b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b4:	b353      	cbz	r3, 800440c <_dtoa_r+0x8cc>
 80043b6:	4631      	mov	r1, r6
 80043b8:	4658      	mov	r0, fp
 80043ba:	f000 fbb9 	bl	8004b30 <__mcmp>
 80043be:	2800      	cmp	r0, #0
 80043c0:	da24      	bge.n	800440c <_dtoa_r+0x8cc>
 80043c2:	2300      	movs	r3, #0
 80043c4:	4659      	mov	r1, fp
 80043c6:	220a      	movs	r2, #10
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 f9e7 	bl	800479c <__multadd>
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043d4:	4683      	mov	fp, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8144 	beq.w	8004664 <_dtoa_r+0xb24>
 80043dc:	2300      	movs	r3, #0
 80043de:	4639      	mov	r1, r7
 80043e0:	220a      	movs	r2, #10
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 f9da 	bl	800479c <__multadd>
 80043e8:	9b04      	ldr	r3, [sp, #16]
 80043ea:	4607      	mov	r7, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dc4d      	bgt.n	800448c <_dtoa_r+0x94c>
 80043f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	dd4a      	ble.n	800448c <_dtoa_r+0x94c>
 80043f6:	e011      	b.n	800441c <_dtoa_r+0x8dc>
 80043f8:	d0c9      	beq.n	800438e <_dtoa_r+0x84e>
 80043fa:	9a07      	ldr	r2, [sp, #28]
 80043fc:	331c      	adds	r3, #28
 80043fe:	441a      	add	r2, r3
 8004400:	4499      	add	r9, r3
 8004402:	441d      	add	r5, r3
 8004404:	4613      	mov	r3, r2
 8004406:	e7c1      	b.n	800438c <_dtoa_r+0x84c>
 8004408:	4603      	mov	r3, r0
 800440a:	e7f6      	b.n	80043fa <_dtoa_r+0x8ba>
 800440c:	f1b8 0f00 	cmp.w	r8, #0
 8004410:	dc36      	bgt.n	8004480 <_dtoa_r+0x940>
 8004412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004414:	2b02      	cmp	r3, #2
 8004416:	dd33      	ble.n	8004480 <_dtoa_r+0x940>
 8004418:	f8cd 8010 	str.w	r8, [sp, #16]
 800441c:	9b04      	ldr	r3, [sp, #16]
 800441e:	b963      	cbnz	r3, 800443a <_dtoa_r+0x8fa>
 8004420:	4631      	mov	r1, r6
 8004422:	2205      	movs	r2, #5
 8004424:	4620      	mov	r0, r4
 8004426:	f000 f9b9 	bl	800479c <__multadd>
 800442a:	4601      	mov	r1, r0
 800442c:	4606      	mov	r6, r0
 800442e:	4658      	mov	r0, fp
 8004430:	f000 fb7e 	bl	8004b30 <__mcmp>
 8004434:	2800      	cmp	r0, #0
 8004436:	f73f add3 	bgt.w	8003fe0 <_dtoa_r+0x4a0>
 800443a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800443c:	9d06      	ldr	r5, [sp, #24]
 800443e:	ea6f 0a03 	mvn.w	sl, r3
 8004442:	f04f 0900 	mov.w	r9, #0
 8004446:	4631      	mov	r1, r6
 8004448:	4620      	mov	r0, r4
 800444a:	f000 f990 	bl	800476e <_Bfree>
 800444e:	2f00      	cmp	r7, #0
 8004450:	f43f aebd 	beq.w	80041ce <_dtoa_r+0x68e>
 8004454:	f1b9 0f00 	cmp.w	r9, #0
 8004458:	d005      	beq.n	8004466 <_dtoa_r+0x926>
 800445a:	45b9      	cmp	r9, r7
 800445c:	d003      	beq.n	8004466 <_dtoa_r+0x926>
 800445e:	4649      	mov	r1, r9
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f984 	bl	800476e <_Bfree>
 8004466:	4639      	mov	r1, r7
 8004468:	4620      	mov	r0, r4
 800446a:	f000 f980 	bl	800476e <_Bfree>
 800446e:	e6ae      	b.n	80041ce <_dtoa_r+0x68e>
 8004470:	2600      	movs	r6, #0
 8004472:	4637      	mov	r7, r6
 8004474:	e7e1      	b.n	800443a <_dtoa_r+0x8fa>
 8004476:	46ba      	mov	sl, r7
 8004478:	4637      	mov	r7, r6
 800447a:	e5b1      	b.n	8003fe0 <_dtoa_r+0x4a0>
 800447c:	40240000 	.word	0x40240000
 8004480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004482:	f8cd 8010 	str.w	r8, [sp, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80f3 	beq.w	8004672 <_dtoa_r+0xb32>
 800448c:	2d00      	cmp	r5, #0
 800448e:	dd05      	ble.n	800449c <_dtoa_r+0x95c>
 8004490:	4639      	mov	r1, r7
 8004492:	462a      	mov	r2, r5
 8004494:	4620      	mov	r0, r4
 8004496:	f000 faf7 	bl	8004a88 <__lshift>
 800449a:	4607      	mov	r7, r0
 800449c:	9b08      	ldr	r3, [sp, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d04c      	beq.n	800453c <_dtoa_r+0x9fc>
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4620      	mov	r0, r4
 80044a6:	f000 f92e 	bl	8004706 <_Balloc>
 80044aa:	4605      	mov	r5, r0
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	f107 010c 	add.w	r1, r7, #12
 80044b2:	3202      	adds	r2, #2
 80044b4:	0092      	lsls	r2, r2, #2
 80044b6:	300c      	adds	r0, #12
 80044b8:	f000 f91a 	bl	80046f0 <memcpy>
 80044bc:	2201      	movs	r2, #1
 80044be:	4629      	mov	r1, r5
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 fae1 	bl	8004a88 <__lshift>
 80044c6:	46b9      	mov	r9, r7
 80044c8:	4607      	mov	r7, r0
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	9b02      	ldr	r3, [sp, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	9308      	str	r3, [sp, #32]
 80044d6:	4631      	mov	r1, r6
 80044d8:	4658      	mov	r0, fp
 80044da:	f7ff faa3 	bl	8003a24 <quorem>
 80044de:	4649      	mov	r1, r9
 80044e0:	4605      	mov	r5, r0
 80044e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80044e6:	4658      	mov	r0, fp
 80044e8:	f000 fb22 	bl	8004b30 <__mcmp>
 80044ec:	463a      	mov	r2, r7
 80044ee:	9002      	str	r0, [sp, #8]
 80044f0:	4631      	mov	r1, r6
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 fb36 	bl	8004b64 <__mdiff>
 80044f8:	68c3      	ldr	r3, [r0, #12]
 80044fa:	4602      	mov	r2, r0
 80044fc:	bb03      	cbnz	r3, 8004540 <_dtoa_r+0xa00>
 80044fe:	4601      	mov	r1, r0
 8004500:	9009      	str	r0, [sp, #36]	; 0x24
 8004502:	4658      	mov	r0, fp
 8004504:	f000 fb14 	bl	8004b30 <__mcmp>
 8004508:	4603      	mov	r3, r0
 800450a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800450c:	4611      	mov	r1, r2
 800450e:	4620      	mov	r0, r4
 8004510:	9309      	str	r3, [sp, #36]	; 0x24
 8004512:	f000 f92c 	bl	800476e <_Bfree>
 8004516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004518:	b9a3      	cbnz	r3, 8004544 <_dtoa_r+0xa04>
 800451a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800451c:	b992      	cbnz	r2, 8004544 <_dtoa_r+0xa04>
 800451e:	9a08      	ldr	r2, [sp, #32]
 8004520:	b982      	cbnz	r2, 8004544 <_dtoa_r+0xa04>
 8004522:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004526:	d029      	beq.n	800457c <_dtoa_r+0xa3c>
 8004528:	9b02      	ldr	r3, [sp, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	dd01      	ble.n	8004532 <_dtoa_r+0x9f2>
 800452e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004532:	9b07      	ldr	r3, [sp, #28]
 8004534:	1c5d      	adds	r5, r3, #1
 8004536:	f883 8000 	strb.w	r8, [r3]
 800453a:	e784      	b.n	8004446 <_dtoa_r+0x906>
 800453c:	4638      	mov	r0, r7
 800453e:	e7c2      	b.n	80044c6 <_dtoa_r+0x986>
 8004540:	2301      	movs	r3, #1
 8004542:	e7e3      	b.n	800450c <_dtoa_r+0x9cc>
 8004544:	9a02      	ldr	r2, [sp, #8]
 8004546:	2a00      	cmp	r2, #0
 8004548:	db04      	blt.n	8004554 <_dtoa_r+0xa14>
 800454a:	d123      	bne.n	8004594 <_dtoa_r+0xa54>
 800454c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800454e:	bb0a      	cbnz	r2, 8004594 <_dtoa_r+0xa54>
 8004550:	9a08      	ldr	r2, [sp, #32]
 8004552:	b9fa      	cbnz	r2, 8004594 <_dtoa_r+0xa54>
 8004554:	2b00      	cmp	r3, #0
 8004556:	ddec      	ble.n	8004532 <_dtoa_r+0x9f2>
 8004558:	4659      	mov	r1, fp
 800455a:	2201      	movs	r2, #1
 800455c:	4620      	mov	r0, r4
 800455e:	f000 fa93 	bl	8004a88 <__lshift>
 8004562:	4631      	mov	r1, r6
 8004564:	4683      	mov	fp, r0
 8004566:	f000 fae3 	bl	8004b30 <__mcmp>
 800456a:	2800      	cmp	r0, #0
 800456c:	dc03      	bgt.n	8004576 <_dtoa_r+0xa36>
 800456e:	d1e0      	bne.n	8004532 <_dtoa_r+0x9f2>
 8004570:	f018 0f01 	tst.w	r8, #1
 8004574:	d0dd      	beq.n	8004532 <_dtoa_r+0x9f2>
 8004576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800457a:	d1d8      	bne.n	800452e <_dtoa_r+0x9ee>
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	9a07      	ldr	r2, [sp, #28]
 8004580:	1c5d      	adds	r5, r3, #1
 8004582:	2339      	movs	r3, #57	; 0x39
 8004584:	7013      	strb	r3, [r2, #0]
 8004586:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800458a:	1e6a      	subs	r2, r5, #1
 800458c:	2b39      	cmp	r3, #57	; 0x39
 800458e:	d04d      	beq.n	800462c <_dtoa_r+0xaec>
 8004590:	3301      	adds	r3, #1
 8004592:	e052      	b.n	800463a <_dtoa_r+0xafa>
 8004594:	9a07      	ldr	r2, [sp, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f102 0501 	add.w	r5, r2, #1
 800459c:	dd06      	ble.n	80045ac <_dtoa_r+0xa6c>
 800459e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80045a2:	d0eb      	beq.n	800457c <_dtoa_r+0xa3c>
 80045a4:	f108 0801 	add.w	r8, r8, #1
 80045a8:	9b07      	ldr	r3, [sp, #28]
 80045aa:	e7c4      	b.n	8004536 <_dtoa_r+0x9f6>
 80045ac:	9b06      	ldr	r3, [sp, #24]
 80045ae:	9a04      	ldr	r2, [sp, #16]
 80045b0:	1aeb      	subs	r3, r5, r3
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80045b8:	d021      	beq.n	80045fe <_dtoa_r+0xabe>
 80045ba:	4659      	mov	r1, fp
 80045bc:	2300      	movs	r3, #0
 80045be:	220a      	movs	r2, #10
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 f8eb 	bl	800479c <__multadd>
 80045c6:	45b9      	cmp	r9, r7
 80045c8:	4683      	mov	fp, r0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	f04f 020a 	mov.w	r2, #10
 80045d2:	4649      	mov	r1, r9
 80045d4:	4620      	mov	r0, r4
 80045d6:	d105      	bne.n	80045e4 <_dtoa_r+0xaa4>
 80045d8:	f000 f8e0 	bl	800479c <__multadd>
 80045dc:	4681      	mov	r9, r0
 80045de:	4607      	mov	r7, r0
 80045e0:	9507      	str	r5, [sp, #28]
 80045e2:	e778      	b.n	80044d6 <_dtoa_r+0x996>
 80045e4:	f000 f8da 	bl	800479c <__multadd>
 80045e8:	4639      	mov	r1, r7
 80045ea:	4681      	mov	r9, r0
 80045ec:	2300      	movs	r3, #0
 80045ee:	220a      	movs	r2, #10
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f8d3 	bl	800479c <__multadd>
 80045f6:	4607      	mov	r7, r0
 80045f8:	e7f2      	b.n	80045e0 <_dtoa_r+0xaa0>
 80045fa:	f04f 0900 	mov.w	r9, #0
 80045fe:	4659      	mov	r1, fp
 8004600:	2201      	movs	r2, #1
 8004602:	4620      	mov	r0, r4
 8004604:	f000 fa40 	bl	8004a88 <__lshift>
 8004608:	4631      	mov	r1, r6
 800460a:	4683      	mov	fp, r0
 800460c:	f000 fa90 	bl	8004b30 <__mcmp>
 8004610:	2800      	cmp	r0, #0
 8004612:	dcb8      	bgt.n	8004586 <_dtoa_r+0xa46>
 8004614:	d102      	bne.n	800461c <_dtoa_r+0xadc>
 8004616:	f018 0f01 	tst.w	r8, #1
 800461a:	d1b4      	bne.n	8004586 <_dtoa_r+0xa46>
 800461c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004620:	1e6a      	subs	r2, r5, #1
 8004622:	2b30      	cmp	r3, #48	; 0x30
 8004624:	f47f af0f 	bne.w	8004446 <_dtoa_r+0x906>
 8004628:	4615      	mov	r5, r2
 800462a:	e7f7      	b.n	800461c <_dtoa_r+0xadc>
 800462c:	9b06      	ldr	r3, [sp, #24]
 800462e:	4293      	cmp	r3, r2
 8004630:	d105      	bne.n	800463e <_dtoa_r+0xafe>
 8004632:	2331      	movs	r3, #49	; 0x31
 8004634:	9a06      	ldr	r2, [sp, #24]
 8004636:	f10a 0a01 	add.w	sl, sl, #1
 800463a:	7013      	strb	r3, [r2, #0]
 800463c:	e703      	b.n	8004446 <_dtoa_r+0x906>
 800463e:	4615      	mov	r5, r2
 8004640:	e7a1      	b.n	8004586 <_dtoa_r+0xa46>
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <_dtoa_r+0xb60>)
 8004644:	f7ff bae1 	b.w	8003c0a <_dtoa_r+0xca>
 8004648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f aabb 	bne.w	8003bc6 <_dtoa_r+0x86>
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <_dtoa_r+0xb64>)
 8004652:	f7ff bada 	b.w	8003c0a <_dtoa_r+0xca>
 8004656:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004658:	2b01      	cmp	r3, #1
 800465a:	f77f ae3f 	ble.w	80042dc <_dtoa_r+0x79c>
 800465e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	e653      	b.n	800430c <_dtoa_r+0x7cc>
 8004664:	9b04      	ldr	r3, [sp, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	dc03      	bgt.n	8004672 <_dtoa_r+0xb32>
 800466a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800466c:	2b02      	cmp	r3, #2
 800466e:	f73f aed5 	bgt.w	800441c <_dtoa_r+0x8dc>
 8004672:	9d06      	ldr	r5, [sp, #24]
 8004674:	4631      	mov	r1, r6
 8004676:	4658      	mov	r0, fp
 8004678:	f7ff f9d4 	bl	8003a24 <quorem>
 800467c:	9b06      	ldr	r3, [sp, #24]
 800467e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004682:	f805 8b01 	strb.w	r8, [r5], #1
 8004686:	9a04      	ldr	r2, [sp, #16]
 8004688:	1aeb      	subs	r3, r5, r3
 800468a:	429a      	cmp	r2, r3
 800468c:	ddb5      	ble.n	80045fa <_dtoa_r+0xaba>
 800468e:	4659      	mov	r1, fp
 8004690:	2300      	movs	r3, #0
 8004692:	220a      	movs	r2, #10
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f881 	bl	800479c <__multadd>
 800469a:	4683      	mov	fp, r0
 800469c:	e7ea      	b.n	8004674 <_dtoa_r+0xb34>
 800469e:	bf00      	nop
 80046a0:	080051f5 	.word	0x080051f5
 80046a4:	08005219 	.word	0x08005219

080046a8 <_localeconv_r>:
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <_localeconv_r+0x14>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6a18      	ldr	r0, [r3, #32]
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <_localeconv_r+0x18>)
 80046b0:	2800      	cmp	r0, #0
 80046b2:	bf08      	it	eq
 80046b4:	4618      	moveq	r0, r3
 80046b6:	30f0      	adds	r0, #240	; 0xf0
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000008 	.word	0x20000008
 80046c0:	2000006c 	.word	0x2000006c

080046c4 <malloc>:
 80046c4:	4b02      	ldr	r3, [pc, #8]	; (80046d0 <malloc+0xc>)
 80046c6:	4601      	mov	r1, r0
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f000 bb53 	b.w	8004d74 <_malloc_r>
 80046ce:	bf00      	nop
 80046d0:	20000008 	.word	0x20000008

080046d4 <memchr>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	b2c9      	uxtb	r1, r1
 80046d8:	4402      	add	r2, r0
 80046da:	4290      	cmp	r0, r2
 80046dc:	4603      	mov	r3, r0
 80046de:	d101      	bne.n	80046e4 <memchr+0x10>
 80046e0:	2300      	movs	r3, #0
 80046e2:	e003      	b.n	80046ec <memchr+0x18>
 80046e4:	781c      	ldrb	r4, [r3, #0]
 80046e6:	3001      	adds	r0, #1
 80046e8:	428c      	cmp	r4, r1
 80046ea:	d1f6      	bne.n	80046da <memchr+0x6>
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd10      	pop	{r4, pc}

080046f0 <memcpy>:
 80046f0:	b510      	push	{r4, lr}
 80046f2:	1e43      	subs	r3, r0, #1
 80046f4:	440a      	add	r2, r1
 80046f6:	4291      	cmp	r1, r2
 80046f8:	d100      	bne.n	80046fc <memcpy+0xc>
 80046fa:	bd10      	pop	{r4, pc}
 80046fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004704:	e7f7      	b.n	80046f6 <memcpy+0x6>

08004706 <_Balloc>:
 8004706:	b570      	push	{r4, r5, r6, lr}
 8004708:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800470a:	4604      	mov	r4, r0
 800470c:	460e      	mov	r6, r1
 800470e:	b93d      	cbnz	r5, 8004720 <_Balloc+0x1a>
 8004710:	2010      	movs	r0, #16
 8004712:	f7ff ffd7 	bl	80046c4 <malloc>
 8004716:	6260      	str	r0, [r4, #36]	; 0x24
 8004718:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800471c:	6005      	str	r5, [r0, #0]
 800471e:	60c5      	str	r5, [r0, #12]
 8004720:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004722:	68eb      	ldr	r3, [r5, #12]
 8004724:	b183      	cbz	r3, 8004748 <_Balloc+0x42>
 8004726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800472e:	b9b8      	cbnz	r0, 8004760 <_Balloc+0x5a>
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f506 	lsl.w	r5, r1, r6
 8004736:	1d6a      	adds	r2, r5, #5
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fabf 	bl	8004cbe <_calloc_r>
 8004740:	b160      	cbz	r0, 800475c <_Balloc+0x56>
 8004742:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004746:	e00e      	b.n	8004766 <_Balloc+0x60>
 8004748:	2221      	movs	r2, #33	; 0x21
 800474a:	2104      	movs	r1, #4
 800474c:	4620      	mov	r0, r4
 800474e:	f000 fab6 	bl	8004cbe <_calloc_r>
 8004752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004754:	60e8      	str	r0, [r5, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e4      	bne.n	8004726 <_Balloc+0x20>
 800475c:	2000      	movs	r0, #0
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	6802      	ldr	r2, [r0, #0]
 8004762:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004766:	2300      	movs	r3, #0
 8004768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800476c:	e7f7      	b.n	800475e <_Balloc+0x58>

0800476e <_Bfree>:
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004772:	4606      	mov	r6, r0
 8004774:	460d      	mov	r5, r1
 8004776:	b93c      	cbnz	r4, 8004788 <_Bfree+0x1a>
 8004778:	2010      	movs	r0, #16
 800477a:	f7ff ffa3 	bl	80046c4 <malloc>
 800477e:	6270      	str	r0, [r6, #36]	; 0x24
 8004780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004784:	6004      	str	r4, [r0, #0]
 8004786:	60c4      	str	r4, [r0, #12]
 8004788:	b13d      	cbz	r5, 800479a <_Bfree+0x2c>
 800478a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800478c:	686a      	ldr	r2, [r5, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004794:	6029      	str	r1, [r5, #0]
 8004796:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800479a:	bd70      	pop	{r4, r5, r6, pc}

0800479c <__multadd>:
 800479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a0:	461f      	mov	r7, r3
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	2300      	movs	r3, #0
 80047a8:	690d      	ldr	r5, [r1, #16]
 80047aa:	f101 0c14 	add.w	ip, r1, #20
 80047ae:	f8dc 0000 	ldr.w	r0, [ip]
 80047b2:	3301      	adds	r3, #1
 80047b4:	b281      	uxth	r1, r0
 80047b6:	fb02 7101 	mla	r1, r2, r1, r7
 80047ba:	0c00      	lsrs	r0, r0, #16
 80047bc:	0c0f      	lsrs	r7, r1, #16
 80047be:	fb02 7000 	mla	r0, r2, r0, r7
 80047c2:	b289      	uxth	r1, r1
 80047c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80047c8:	429d      	cmp	r5, r3
 80047ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80047ce:	f84c 1b04 	str.w	r1, [ip], #4
 80047d2:	dcec      	bgt.n	80047ae <__multadd+0x12>
 80047d4:	b1d7      	cbz	r7, 800480c <__multadd+0x70>
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dc12      	bgt.n	8004802 <__multadd+0x66>
 80047dc:	6861      	ldr	r1, [r4, #4]
 80047de:	4630      	mov	r0, r6
 80047e0:	3101      	adds	r1, #1
 80047e2:	f7ff ff90 	bl	8004706 <_Balloc>
 80047e6:	4680      	mov	r8, r0
 80047e8:	6922      	ldr	r2, [r4, #16]
 80047ea:	f104 010c 	add.w	r1, r4, #12
 80047ee:	3202      	adds	r2, #2
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	300c      	adds	r0, #12
 80047f4:	f7ff ff7c 	bl	80046f0 <memcpy>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7ff ffb7 	bl	800476e <_Bfree>
 8004800:	4644      	mov	r4, r8
 8004802:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004806:	3501      	adds	r5, #1
 8004808:	615f      	str	r7, [r3, #20]
 800480a:	6125      	str	r5, [r4, #16]
 800480c:	4620      	mov	r0, r4
 800480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004812 <__hi0bits>:
 8004812:	0c02      	lsrs	r2, r0, #16
 8004814:	0412      	lsls	r2, r2, #16
 8004816:	4603      	mov	r3, r0
 8004818:	b9b2      	cbnz	r2, 8004848 <__hi0bits+0x36>
 800481a:	0403      	lsls	r3, r0, #16
 800481c:	2010      	movs	r0, #16
 800481e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004822:	bf04      	itt	eq
 8004824:	021b      	lsleq	r3, r3, #8
 8004826:	3008      	addeq	r0, #8
 8004828:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800482c:	bf04      	itt	eq
 800482e:	011b      	lsleq	r3, r3, #4
 8004830:	3004      	addeq	r0, #4
 8004832:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004836:	bf04      	itt	eq
 8004838:	009b      	lsleq	r3, r3, #2
 800483a:	3002      	addeq	r0, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	db06      	blt.n	800484e <__hi0bits+0x3c>
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	d503      	bpl.n	800484c <__hi0bits+0x3a>
 8004844:	3001      	adds	r0, #1
 8004846:	4770      	bx	lr
 8004848:	2000      	movs	r0, #0
 800484a:	e7e8      	b.n	800481e <__hi0bits+0xc>
 800484c:	2020      	movs	r0, #32
 800484e:	4770      	bx	lr

08004850 <__lo0bits>:
 8004850:	6803      	ldr	r3, [r0, #0]
 8004852:	4601      	mov	r1, r0
 8004854:	f013 0207 	ands.w	r2, r3, #7
 8004858:	d00b      	beq.n	8004872 <__lo0bits+0x22>
 800485a:	07da      	lsls	r2, r3, #31
 800485c:	d423      	bmi.n	80048a6 <__lo0bits+0x56>
 800485e:	0798      	lsls	r0, r3, #30
 8004860:	bf49      	itett	mi
 8004862:	085b      	lsrmi	r3, r3, #1
 8004864:	089b      	lsrpl	r3, r3, #2
 8004866:	2001      	movmi	r0, #1
 8004868:	600b      	strmi	r3, [r1, #0]
 800486a:	bf5c      	itt	pl
 800486c:	600b      	strpl	r3, [r1, #0]
 800486e:	2002      	movpl	r0, #2
 8004870:	4770      	bx	lr
 8004872:	b298      	uxth	r0, r3
 8004874:	b9a8      	cbnz	r0, 80048a2 <__lo0bits+0x52>
 8004876:	2010      	movs	r0, #16
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800487e:	bf04      	itt	eq
 8004880:	0a1b      	lsreq	r3, r3, #8
 8004882:	3008      	addeq	r0, #8
 8004884:	071a      	lsls	r2, r3, #28
 8004886:	bf04      	itt	eq
 8004888:	091b      	lsreq	r3, r3, #4
 800488a:	3004      	addeq	r0, #4
 800488c:	079a      	lsls	r2, r3, #30
 800488e:	bf04      	itt	eq
 8004890:	089b      	lsreq	r3, r3, #2
 8004892:	3002      	addeq	r0, #2
 8004894:	07da      	lsls	r2, r3, #31
 8004896:	d402      	bmi.n	800489e <__lo0bits+0x4e>
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	d006      	beq.n	80048aa <__lo0bits+0x5a>
 800489c:	3001      	adds	r0, #1
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	4770      	bx	lr
 80048a2:	4610      	mov	r0, r2
 80048a4:	e7e9      	b.n	800487a <__lo0bits+0x2a>
 80048a6:	2000      	movs	r0, #0
 80048a8:	4770      	bx	lr
 80048aa:	2020      	movs	r0, #32
 80048ac:	4770      	bx	lr

080048ae <__i2b>:
 80048ae:	b510      	push	{r4, lr}
 80048b0:	460c      	mov	r4, r1
 80048b2:	2101      	movs	r1, #1
 80048b4:	f7ff ff27 	bl	8004706 <_Balloc>
 80048b8:	2201      	movs	r2, #1
 80048ba:	6144      	str	r4, [r0, #20]
 80048bc:	6102      	str	r2, [r0, #16]
 80048be:	bd10      	pop	{r4, pc}

080048c0 <__multiply>:
 80048c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	4614      	mov	r4, r2
 80048c6:	690a      	ldr	r2, [r1, #16]
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	4688      	mov	r8, r1
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bfbe      	ittt	lt
 80048d0:	460b      	movlt	r3, r1
 80048d2:	46a0      	movlt	r8, r4
 80048d4:	461c      	movlt	r4, r3
 80048d6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80048da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80048e6:	eb07 0609 	add.w	r6, r7, r9
 80048ea:	42b3      	cmp	r3, r6
 80048ec:	bfb8      	it	lt
 80048ee:	3101      	addlt	r1, #1
 80048f0:	f7ff ff09 	bl	8004706 <_Balloc>
 80048f4:	f100 0514 	add.w	r5, r0, #20
 80048f8:	462b      	mov	r3, r5
 80048fa:	2200      	movs	r2, #0
 80048fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004900:	4573      	cmp	r3, lr
 8004902:	d316      	bcc.n	8004932 <__multiply+0x72>
 8004904:	f104 0214 	add.w	r2, r4, #20
 8004908:	f108 0114 	add.w	r1, r8, #20
 800490c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004910:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	9b00      	ldr	r3, [sp, #0]
 8004918:	9201      	str	r2, [sp, #4]
 800491a:	4293      	cmp	r3, r2
 800491c:	d80c      	bhi.n	8004938 <__multiply+0x78>
 800491e:	2e00      	cmp	r6, #0
 8004920:	dd03      	ble.n	800492a <__multiply+0x6a>
 8004922:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004926:	2b00      	cmp	r3, #0
 8004928:	d05d      	beq.n	80049e6 <__multiply+0x126>
 800492a:	6106      	str	r6, [r0, #16]
 800492c:	b003      	add	sp, #12
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	f843 2b04 	str.w	r2, [r3], #4
 8004936:	e7e3      	b.n	8004900 <__multiply+0x40>
 8004938:	f8b2 b000 	ldrh.w	fp, [r2]
 800493c:	f1bb 0f00 	cmp.w	fp, #0
 8004940:	d023      	beq.n	800498a <__multiply+0xca>
 8004942:	4689      	mov	r9, r1
 8004944:	46ac      	mov	ip, r5
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	f859 4b04 	ldr.w	r4, [r9], #4
 800494e:	f8dc a000 	ldr.w	sl, [ip]
 8004952:	b2a3      	uxth	r3, r4
 8004954:	fa1f fa8a 	uxth.w	sl, sl
 8004958:	fb0b a303 	mla	r3, fp, r3, sl
 800495c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004960:	f8dc 4000 	ldr.w	r4, [ip]
 8004964:	4443      	add	r3, r8
 8004966:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800496a:	fb0b 840a 	mla	r4, fp, sl, r8
 800496e:	46e2      	mov	sl, ip
 8004970:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800497a:	454f      	cmp	r7, r9
 800497c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004980:	f84a 3b04 	str.w	r3, [sl], #4
 8004984:	d82b      	bhi.n	80049de <__multiply+0x11e>
 8004986:	f8cc 8004 	str.w	r8, [ip, #4]
 800498a:	9b01      	ldr	r3, [sp, #4]
 800498c:	3204      	adds	r2, #4
 800498e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004992:	f1ba 0f00 	cmp.w	sl, #0
 8004996:	d020      	beq.n	80049da <__multiply+0x11a>
 8004998:	4689      	mov	r9, r1
 800499a:	46a8      	mov	r8, r5
 800499c:	f04f 0b00 	mov.w	fp, #0
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	f8b9 c000 	ldrh.w	ip, [r9]
 80049a6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80049b0:	46c4      	mov	ip, r8
 80049b2:	445c      	add	r4, fp
 80049b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80049b8:	f84c 3b04 	str.w	r3, [ip], #4
 80049bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80049c0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	fb0a b303 	mla	r3, sl, r3, fp
 80049ca:	454f      	cmp	r7, r9
 80049cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80049d0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80049d4:	d805      	bhi.n	80049e2 <__multiply+0x122>
 80049d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80049da:	3504      	adds	r5, #4
 80049dc:	e79b      	b.n	8004916 <__multiply+0x56>
 80049de:	46d4      	mov	ip, sl
 80049e0:	e7b3      	b.n	800494a <__multiply+0x8a>
 80049e2:	46e0      	mov	r8, ip
 80049e4:	e7dd      	b.n	80049a2 <__multiply+0xe2>
 80049e6:	3e01      	subs	r6, #1
 80049e8:	e799      	b.n	800491e <__multiply+0x5e>
	...

080049ec <__pow5mult>:
 80049ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	4615      	mov	r5, r2
 80049f2:	f012 0203 	ands.w	r2, r2, #3
 80049f6:	4606      	mov	r6, r0
 80049f8:	460f      	mov	r7, r1
 80049fa:	d007      	beq.n	8004a0c <__pow5mult+0x20>
 80049fc:	4c21      	ldr	r4, [pc, #132]	; (8004a84 <__pow5mult+0x98>)
 80049fe:	3a01      	subs	r2, #1
 8004a00:	2300      	movs	r3, #0
 8004a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a06:	f7ff fec9 	bl	800479c <__multadd>
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	10ad      	asrs	r5, r5, #2
 8004a0e:	d035      	beq.n	8004a7c <__pow5mult+0x90>
 8004a10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a12:	b93c      	cbnz	r4, 8004a24 <__pow5mult+0x38>
 8004a14:	2010      	movs	r0, #16
 8004a16:	f7ff fe55 	bl	80046c4 <malloc>
 8004a1a:	6270      	str	r0, [r6, #36]	; 0x24
 8004a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a20:	6004      	str	r4, [r0, #0]
 8004a22:	60c4      	str	r4, [r0, #12]
 8004a24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a2c:	b94c      	cbnz	r4, 8004a42 <__pow5mult+0x56>
 8004a2e:	f240 2171 	movw	r1, #625	; 0x271
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff ff3b 	bl	80048ae <__i2b>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a40:	6003      	str	r3, [r0, #0]
 8004a42:	f04f 0800 	mov.w	r8, #0
 8004a46:	07eb      	lsls	r3, r5, #31
 8004a48:	d50a      	bpl.n	8004a60 <__pow5mult+0x74>
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4630      	mov	r0, r6
 8004a50:	f7ff ff36 	bl	80048c0 <__multiply>
 8004a54:	4681      	mov	r9, r0
 8004a56:	4639      	mov	r1, r7
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff fe88 	bl	800476e <_Bfree>
 8004a5e:	464f      	mov	r7, r9
 8004a60:	106d      	asrs	r5, r5, #1
 8004a62:	d00b      	beq.n	8004a7c <__pow5mult+0x90>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	b938      	cbnz	r0, 8004a78 <__pow5mult+0x8c>
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff ff27 	bl	80048c0 <__multiply>
 8004a72:	6020      	str	r0, [r4, #0]
 8004a74:	f8c0 8000 	str.w	r8, [r0]
 8004a78:	4604      	mov	r4, r0
 8004a7a:	e7e4      	b.n	8004a46 <__pow5mult+0x5a>
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a82:	bf00      	nop
 8004a84:	08005318 	.word	0x08005318

08004a88 <__lshift>:
 8004a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	4607      	mov	r7, r0
 8004a90:	4616      	mov	r6, r2
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a98:	eb0a 0903 	add.w	r9, sl, r3
 8004a9c:	6849      	ldr	r1, [r1, #4]
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	f109 0501 	add.w	r5, r9, #1
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	db32      	blt.n	8004b0e <__lshift+0x86>
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	f7ff fe2c 	bl	8004706 <_Balloc>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f100 0114 	add.w	r1, r0, #20
 8004ab8:	4553      	cmp	r3, sl
 8004aba:	db2b      	blt.n	8004b14 <__lshift+0x8c>
 8004abc:	6920      	ldr	r0, [r4, #16]
 8004abe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ac2:	f104 0314 	add.w	r3, r4, #20
 8004ac6:	f016 021f 	ands.w	r2, r6, #31
 8004aca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ace:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ad2:	d025      	beq.n	8004b20 <__lshift+0x98>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f1c2 0e20 	rsb	lr, r2, #32
 8004ada:	468a      	mov	sl, r1
 8004adc:	681e      	ldr	r6, [r3, #0]
 8004ade:	4096      	lsls	r6, r2
 8004ae0:	4330      	orrs	r0, r6
 8004ae2:	f84a 0b04 	str.w	r0, [sl], #4
 8004ae6:	f853 0b04 	ldr.w	r0, [r3], #4
 8004aea:	459c      	cmp	ip, r3
 8004aec:	fa20 f00e 	lsr.w	r0, r0, lr
 8004af0:	d814      	bhi.n	8004b1c <__lshift+0x94>
 8004af2:	6048      	str	r0, [r1, #4]
 8004af4:	b108      	cbz	r0, 8004afa <__lshift+0x72>
 8004af6:	f109 0502 	add.w	r5, r9, #2
 8004afa:	3d01      	subs	r5, #1
 8004afc:	4638      	mov	r0, r7
 8004afe:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b02:	4621      	mov	r1, r4
 8004b04:	f7ff fe33 	bl	800476e <_Bfree>
 8004b08:	4640      	mov	r0, r8
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	3101      	adds	r1, #1
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	e7c7      	b.n	8004aa4 <__lshift+0x1c>
 8004b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	e7cd      	b.n	8004ab8 <__lshift+0x30>
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	e7dc      	b.n	8004ada <__lshift+0x52>
 8004b20:	3904      	subs	r1, #4
 8004b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b26:	459c      	cmp	ip, r3
 8004b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b2c:	d8f9      	bhi.n	8004b22 <__lshift+0x9a>
 8004b2e:	e7e4      	b.n	8004afa <__lshift+0x72>

08004b30 <__mcmp>:
 8004b30:	6903      	ldr	r3, [r0, #16]
 8004b32:	690a      	ldr	r2, [r1, #16]
 8004b34:	b530      	push	{r4, r5, lr}
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	d10c      	bne.n	8004b54 <__mcmp+0x24>
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	3014      	adds	r0, #20
 8004b3e:	3114      	adds	r1, #20
 8004b40:	1884      	adds	r4, r0, r2
 8004b42:	4411      	add	r1, r2
 8004b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b4c:	4295      	cmp	r5, r2
 8004b4e:	d003      	beq.n	8004b58 <__mcmp+0x28>
 8004b50:	d305      	bcc.n	8004b5e <__mcmp+0x2e>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd30      	pop	{r4, r5, pc}
 8004b58:	42a0      	cmp	r0, r4
 8004b5a:	d3f3      	bcc.n	8004b44 <__mcmp+0x14>
 8004b5c:	e7fa      	b.n	8004b54 <__mcmp+0x24>
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e7f7      	b.n	8004b54 <__mcmp+0x24>

08004b64 <__mdiff>:
 8004b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b68:	460d      	mov	r5, r1
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4614      	mov	r4, r2
 8004b72:	f7ff ffdd 	bl	8004b30 <__mcmp>
 8004b76:	1e06      	subs	r6, r0, #0
 8004b78:	d108      	bne.n	8004b8c <__mdiff+0x28>
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7ff fdc2 	bl	8004706 <_Balloc>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	bfa4      	itt	ge
 8004b8e:	4623      	movge	r3, r4
 8004b90:	462c      	movge	r4, r5
 8004b92:	4638      	mov	r0, r7
 8004b94:	6861      	ldr	r1, [r4, #4]
 8004b96:	bfa6      	itte	ge
 8004b98:	461d      	movge	r5, r3
 8004b9a:	2600      	movge	r6, #0
 8004b9c:	2601      	movlt	r6, #1
 8004b9e:	f7ff fdb2 	bl	8004706 <_Balloc>
 8004ba2:	f04f 0e00 	mov.w	lr, #0
 8004ba6:	60c6      	str	r6, [r0, #12]
 8004ba8:	692b      	ldr	r3, [r5, #16]
 8004baa:	6926      	ldr	r6, [r4, #16]
 8004bac:	f104 0214 	add.w	r2, r4, #20
 8004bb0:	f105 0914 	add.w	r9, r5, #20
 8004bb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004bb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004bbc:	f100 0114 	add.w	r1, r0, #20
 8004bc0:	f852 ab04 	ldr.w	sl, [r2], #4
 8004bc4:	f859 5b04 	ldr.w	r5, [r9], #4
 8004bc8:	fa1f f38a 	uxth.w	r3, sl
 8004bcc:	4473      	add	r3, lr
 8004bce:	b2ac      	uxth	r4, r5
 8004bd0:	1b1b      	subs	r3, r3, r4
 8004bd2:	0c2c      	lsrs	r4, r5, #16
 8004bd4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004bd8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004be2:	45c8      	cmp	r8, r9
 8004be4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004be8:	4694      	mov	ip, r2
 8004bea:	f841 4b04 	str.w	r4, [r1], #4
 8004bee:	d8e7      	bhi.n	8004bc0 <__mdiff+0x5c>
 8004bf0:	45bc      	cmp	ip, r7
 8004bf2:	d304      	bcc.n	8004bfe <__mdiff+0x9a>
 8004bf4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004bf8:	b183      	cbz	r3, 8004c1c <__mdiff+0xb8>
 8004bfa:	6106      	str	r6, [r0, #16]
 8004bfc:	e7c4      	b.n	8004b88 <__mdiff+0x24>
 8004bfe:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004c02:	b2a2      	uxth	r2, r4
 8004c04:	4472      	add	r2, lr
 8004c06:	1413      	asrs	r3, r2, #16
 8004c08:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c12:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004c16:	f841 2b04 	str.w	r2, [r1], #4
 8004c1a:	e7e9      	b.n	8004bf0 <__mdiff+0x8c>
 8004c1c:	3e01      	subs	r6, #1
 8004c1e:	e7e9      	b.n	8004bf4 <__mdiff+0x90>

08004c20 <__d2b>:
 8004c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c24:	461c      	mov	r4, r3
 8004c26:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4690      	mov	r8, r2
 8004c2e:	f7ff fd6a 	bl	8004706 <_Balloc>
 8004c32:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004c36:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	bb34      	cbnz	r4, 8004c8c <__d2b+0x6c>
 8004c3e:	9201      	str	r2, [sp, #4]
 8004c40:	f1b8 0200 	subs.w	r2, r8, #0
 8004c44:	d027      	beq.n	8004c96 <__d2b+0x76>
 8004c46:	a802      	add	r0, sp, #8
 8004c48:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004c4c:	f7ff fe00 	bl	8004850 <__lo0bits>
 8004c50:	9900      	ldr	r1, [sp, #0]
 8004c52:	b1f0      	cbz	r0, 8004c92 <__d2b+0x72>
 8004c54:	9a01      	ldr	r2, [sp, #4]
 8004c56:	f1c0 0320 	rsb	r3, r0, #32
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	40c2      	lsrs	r2, r0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	9201      	str	r2, [sp, #4]
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf14      	ite	ne
 8004c6c:	2102      	movne	r1, #2
 8004c6e:	2101      	moveq	r1, #1
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	6139      	str	r1, [r7, #16]
 8004c74:	b1c4      	cbz	r4, 8004ca8 <__d2b+0x88>
 8004c76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004c7a:	4404      	add	r4, r0
 8004c7c:	6034      	str	r4, [r6, #0]
 8004c7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c82:	6028      	str	r0, [r5, #0]
 8004c84:	4638      	mov	r0, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c90:	e7d5      	b.n	8004c3e <__d2b+0x1e>
 8004c92:	6179      	str	r1, [r7, #20]
 8004c94:	e7e7      	b.n	8004c66 <__d2b+0x46>
 8004c96:	a801      	add	r0, sp, #4
 8004c98:	f7ff fdda 	bl	8004850 <__lo0bits>
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	3020      	adds	r0, #32
 8004ca6:	e7e5      	b.n	8004c74 <__d2b+0x54>
 8004ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004cac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004cb0:	6030      	str	r0, [r6, #0]
 8004cb2:	6918      	ldr	r0, [r3, #16]
 8004cb4:	f7ff fdad 	bl	8004812 <__hi0bits>
 8004cb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004cbc:	e7e1      	b.n	8004c82 <__d2b+0x62>

08004cbe <_calloc_r>:
 8004cbe:	b538      	push	{r3, r4, r5, lr}
 8004cc0:	fb02 f401 	mul.w	r4, r2, r1
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	f000 f855 	bl	8004d74 <_malloc_r>
 8004cca:	4605      	mov	r5, r0
 8004ccc:	b118      	cbz	r0, 8004cd6 <_calloc_r+0x18>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f7fe fa2f 	bl	8003134 <memset>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
	...

08004cdc <_free_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4605      	mov	r5, r0
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d043      	beq.n	8004d6c <_free_r+0x90>
 8004ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce8:	1f0c      	subs	r4, r1, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfb8      	it	lt
 8004cee:	18e4      	addlt	r4, r4, r3
 8004cf0:	f000 fa27 	bl	8005142 <__malloc_lock>
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <_free_r+0x94>)
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	b933      	cbnz	r3, 8004d0a <_free_r+0x2e>
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	6014      	str	r4, [r2, #0]
 8004d00:	4628      	mov	r0, r5
 8004d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d06:	f000 ba1d 	b.w	8005144 <__malloc_unlock>
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	d90b      	bls.n	8004d26 <_free_r+0x4a>
 8004d0e:	6821      	ldr	r1, [r4, #0]
 8004d10:	1862      	adds	r2, r4, r1
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf01      	itttt	eq
 8004d16:	681a      	ldreq	r2, [r3, #0]
 8004d18:	685b      	ldreq	r3, [r3, #4]
 8004d1a:	1852      	addeq	r2, r2, r1
 8004d1c:	6022      	streq	r2, [r4, #0]
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	6004      	str	r4, [r0, #0]
 8004d22:	e7ed      	b.n	8004d00 <_free_r+0x24>
 8004d24:	4613      	mov	r3, r2
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	b10a      	cbz	r2, 8004d2e <_free_r+0x52>
 8004d2a:	42a2      	cmp	r2, r4
 8004d2c:	d9fa      	bls.n	8004d24 <_free_r+0x48>
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	1858      	adds	r0, r3, r1
 8004d32:	42a0      	cmp	r0, r4
 8004d34:	d10b      	bne.n	8004d4e <_free_r+0x72>
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	4401      	add	r1, r0
 8004d3a:	1858      	adds	r0, r3, r1
 8004d3c:	4282      	cmp	r2, r0
 8004d3e:	6019      	str	r1, [r3, #0]
 8004d40:	d1de      	bne.n	8004d00 <_free_r+0x24>
 8004d42:	6810      	ldr	r0, [r2, #0]
 8004d44:	6852      	ldr	r2, [r2, #4]
 8004d46:	4401      	add	r1, r0
 8004d48:	6019      	str	r1, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	e7d8      	b.n	8004d00 <_free_r+0x24>
 8004d4e:	d902      	bls.n	8004d56 <_free_r+0x7a>
 8004d50:	230c      	movs	r3, #12
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	e7d4      	b.n	8004d00 <_free_r+0x24>
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	1821      	adds	r1, r4, r0
 8004d5a:	428a      	cmp	r2, r1
 8004d5c:	bf01      	itttt	eq
 8004d5e:	6811      	ldreq	r1, [r2, #0]
 8004d60:	6852      	ldreq	r2, [r2, #4]
 8004d62:	1809      	addeq	r1, r1, r0
 8004d64:	6021      	streq	r1, [r4, #0]
 8004d66:	6062      	str	r2, [r4, #4]
 8004d68:	605c      	str	r4, [r3, #4]
 8004d6a:	e7c9      	b.n	8004d00 <_free_r+0x24>
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000248 	.word	0x20000248

08004d74 <_malloc_r>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	1ccd      	adds	r5, r1, #3
 8004d78:	f025 0503 	bic.w	r5, r5, #3
 8004d7c:	3508      	adds	r5, #8
 8004d7e:	2d0c      	cmp	r5, #12
 8004d80:	bf38      	it	cc
 8004d82:	250c      	movcc	r5, #12
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	4606      	mov	r6, r0
 8004d88:	db01      	blt.n	8004d8e <_malloc_r+0x1a>
 8004d8a:	42a9      	cmp	r1, r5
 8004d8c:	d903      	bls.n	8004d96 <_malloc_r+0x22>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	2000      	movs	r0, #0
 8004d94:	bd70      	pop	{r4, r5, r6, pc}
 8004d96:	f000 f9d4 	bl	8005142 <__malloc_lock>
 8004d9a:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <_malloc_r+0xac>)
 8004d9c:	6814      	ldr	r4, [r2, #0]
 8004d9e:	4621      	mov	r1, r4
 8004da0:	b991      	cbnz	r1, 8004dc8 <_malloc_r+0x54>
 8004da2:	4c20      	ldr	r4, [pc, #128]	; (8004e24 <_malloc_r+0xb0>)
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	b91b      	cbnz	r3, 8004db0 <_malloc_r+0x3c>
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f98f 	bl	80050cc <_sbrk_r>
 8004dae:	6020      	str	r0, [r4, #0]
 8004db0:	4629      	mov	r1, r5
 8004db2:	4630      	mov	r0, r6
 8004db4:	f000 f98a 	bl	80050cc <_sbrk_r>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d124      	bne.n	8004e06 <_malloc_r+0x92>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	f000 f9bf 	bl	8005144 <__malloc_unlock>
 8004dc6:	e7e4      	b.n	8004d92 <_malloc_r+0x1e>
 8004dc8:	680b      	ldr	r3, [r1, #0]
 8004dca:	1b5b      	subs	r3, r3, r5
 8004dcc:	d418      	bmi.n	8004e00 <_malloc_r+0x8c>
 8004dce:	2b0b      	cmp	r3, #11
 8004dd0:	d90f      	bls.n	8004df2 <_malloc_r+0x7e>
 8004dd2:	600b      	str	r3, [r1, #0]
 8004dd4:	18cc      	adds	r4, r1, r3
 8004dd6:	50cd      	str	r5, [r1, r3]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f9b3 	bl	8005144 <__malloc_unlock>
 8004dde:	f104 000b 	add.w	r0, r4, #11
 8004de2:	1d23      	adds	r3, r4, #4
 8004de4:	f020 0007 	bic.w	r0, r0, #7
 8004de8:	1ac3      	subs	r3, r0, r3
 8004dea:	d0d3      	beq.n	8004d94 <_malloc_r+0x20>
 8004dec:	425a      	negs	r2, r3
 8004dee:	50e2      	str	r2, [r4, r3]
 8004df0:	e7d0      	b.n	8004d94 <_malloc_r+0x20>
 8004df2:	684b      	ldr	r3, [r1, #4]
 8004df4:	428c      	cmp	r4, r1
 8004df6:	bf16      	itet	ne
 8004df8:	6063      	strne	r3, [r4, #4]
 8004dfa:	6013      	streq	r3, [r2, #0]
 8004dfc:	460c      	movne	r4, r1
 8004dfe:	e7eb      	b.n	8004dd8 <_malloc_r+0x64>
 8004e00:	460c      	mov	r4, r1
 8004e02:	6849      	ldr	r1, [r1, #4]
 8004e04:	e7cc      	b.n	8004da0 <_malloc_r+0x2c>
 8004e06:	1cc4      	adds	r4, r0, #3
 8004e08:	f024 0403 	bic.w	r4, r4, #3
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d005      	beq.n	8004e1c <_malloc_r+0xa8>
 8004e10:	1a21      	subs	r1, r4, r0
 8004e12:	4630      	mov	r0, r6
 8004e14:	f000 f95a 	bl	80050cc <_sbrk_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d0cf      	beq.n	8004dbc <_malloc_r+0x48>
 8004e1c:	6025      	str	r5, [r4, #0]
 8004e1e:	e7db      	b.n	8004dd8 <_malloc_r+0x64>
 8004e20:	20000248 	.word	0x20000248
 8004e24:	2000024c 	.word	0x2000024c

08004e28 <__ssputs_r>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	688e      	ldr	r6, [r1, #8]
 8004e2e:	4682      	mov	sl, r0
 8004e30:	429e      	cmp	r6, r3
 8004e32:	460c      	mov	r4, r1
 8004e34:	4690      	mov	r8, r2
 8004e36:	4699      	mov	r9, r3
 8004e38:	d837      	bhi.n	8004eaa <__ssputs_r+0x82>
 8004e3a:	898a      	ldrh	r2, [r1, #12]
 8004e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e40:	d031      	beq.n	8004ea6 <__ssputs_r+0x7e>
 8004e42:	2302      	movs	r3, #2
 8004e44:	6825      	ldr	r5, [r4, #0]
 8004e46:	6909      	ldr	r1, [r1, #16]
 8004e48:	1a6f      	subs	r7, r5, r1
 8004e4a:	6965      	ldr	r5, [r4, #20]
 8004e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e50:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e54:	f109 0301 	add.w	r3, r9, #1
 8004e58:	443b      	add	r3, r7
 8004e5a:	429d      	cmp	r5, r3
 8004e5c:	bf38      	it	cc
 8004e5e:	461d      	movcc	r5, r3
 8004e60:	0553      	lsls	r3, r2, #21
 8004e62:	d530      	bpl.n	8004ec6 <__ssputs_r+0x9e>
 8004e64:	4629      	mov	r1, r5
 8004e66:	f7ff ff85 	bl	8004d74 <_malloc_r>
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	b950      	cbnz	r0, 8004e84 <__ssputs_r+0x5c>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	f8ca 3000 	str.w	r3, [sl]
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	463a      	mov	r2, r7
 8004e86:	6921      	ldr	r1, [r4, #16]
 8004e88:	f7ff fc32 	bl	80046f0 <memcpy>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	6126      	str	r6, [r4, #16]
 8004e9a:	443e      	add	r6, r7
 8004e9c:	6026      	str	r6, [r4, #0]
 8004e9e:	464e      	mov	r6, r9
 8004ea0:	6165      	str	r5, [r4, #20]
 8004ea2:	1bed      	subs	r5, r5, r7
 8004ea4:	60a5      	str	r5, [r4, #8]
 8004ea6:	454e      	cmp	r6, r9
 8004ea8:	d900      	bls.n	8004eac <__ssputs_r+0x84>
 8004eaa:	464e      	mov	r6, r9
 8004eac:	4632      	mov	r2, r6
 8004eae:	4641      	mov	r1, r8
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	f000 f92d 	bl	8005110 <memmove>
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	2000      	movs	r0, #0
 8004eba:	1b9b      	subs	r3, r3, r6
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	441e      	add	r6, r3
 8004ec2:	6026      	str	r6, [r4, #0]
 8004ec4:	e7dc      	b.n	8004e80 <__ssputs_r+0x58>
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	f000 f93d 	bl	8005146 <_realloc_r>
 8004ecc:	4606      	mov	r6, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d1e2      	bne.n	8004e98 <__ssputs_r+0x70>
 8004ed2:	6921      	ldr	r1, [r4, #16]
 8004ed4:	4650      	mov	r0, sl
 8004ed6:	f7ff ff01 	bl	8004cdc <_free_r>
 8004eda:	e7c8      	b.n	8004e6e <__ssputs_r+0x46>

08004edc <_svfiprintf_r>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	461d      	mov	r5, r3
 8004ee2:	898b      	ldrh	r3, [r1, #12]
 8004ee4:	b09d      	sub	sp, #116	; 0x74
 8004ee6:	061f      	lsls	r7, r3, #24
 8004ee8:	4680      	mov	r8, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	4616      	mov	r6, r2
 8004eee:	d50f      	bpl.n	8004f10 <_svfiprintf_r+0x34>
 8004ef0:	690b      	ldr	r3, [r1, #16]
 8004ef2:	b96b      	cbnz	r3, 8004f10 <_svfiprintf_r+0x34>
 8004ef4:	2140      	movs	r1, #64	; 0x40
 8004ef6:	f7ff ff3d 	bl	8004d74 <_malloc_r>
 8004efa:	6020      	str	r0, [r4, #0]
 8004efc:	6120      	str	r0, [r4, #16]
 8004efe:	b928      	cbnz	r0, 8004f0c <_svfiprintf_r+0x30>
 8004f00:	230c      	movs	r3, #12
 8004f02:	f8c8 3000 	str.w	r3, [r8]
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	e0c8      	b.n	800509e <_svfiprintf_r+0x1c2>
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	6163      	str	r3, [r4, #20]
 8004f10:	2300      	movs	r3, #0
 8004f12:	9309      	str	r3, [sp, #36]	; 0x24
 8004f14:	2320      	movs	r3, #32
 8004f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f1a:	2330      	movs	r3, #48	; 0x30
 8004f1c:	f04f 0b01 	mov.w	fp, #1
 8004f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f24:	9503      	str	r5, [sp, #12]
 8004f26:	4637      	mov	r7, r6
 8004f28:	463d      	mov	r5, r7
 8004f2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f2e:	b10b      	cbz	r3, 8004f34 <_svfiprintf_r+0x58>
 8004f30:	2b25      	cmp	r3, #37	; 0x25
 8004f32:	d13e      	bne.n	8004fb2 <_svfiprintf_r+0xd6>
 8004f34:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f38:	d00b      	beq.n	8004f52 <_svfiprintf_r+0x76>
 8004f3a:	4653      	mov	r3, sl
 8004f3c:	4632      	mov	r2, r6
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4640      	mov	r0, r8
 8004f42:	f7ff ff71 	bl	8004e28 <__ssputs_r>
 8004f46:	3001      	adds	r0, #1
 8004f48:	f000 80a4 	beq.w	8005094 <_svfiprintf_r+0x1b8>
 8004f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4e:	4453      	add	r3, sl
 8004f50:	9309      	str	r3, [sp, #36]	; 0x24
 8004f52:	783b      	ldrb	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 809d 	beq.w	8005094 <_svfiprintf_r+0x1b8>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	9307      	str	r3, [sp, #28]
 8004f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f6e:	462f      	mov	r7, r5
 8004f70:	2205      	movs	r2, #5
 8004f72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f76:	4850      	ldr	r0, [pc, #320]	; (80050b8 <_svfiprintf_r+0x1dc>)
 8004f78:	f7ff fbac 	bl	80046d4 <memchr>
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	b9d0      	cbnz	r0, 8004fb6 <_svfiprintf_r+0xda>
 8004f80:	06d9      	lsls	r1, r3, #27
 8004f82:	bf44      	itt	mi
 8004f84:	2220      	movmi	r2, #32
 8004f86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f8a:	071a      	lsls	r2, r3, #28
 8004f8c:	bf44      	itt	mi
 8004f8e:	222b      	movmi	r2, #43	; 0x2b
 8004f90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f94:	782a      	ldrb	r2, [r5, #0]
 8004f96:	2a2a      	cmp	r2, #42	; 0x2a
 8004f98:	d015      	beq.n	8004fc6 <_svfiprintf_r+0xea>
 8004f9a:	462f      	mov	r7, r5
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	250a      	movs	r5, #10
 8004fa0:	9a07      	ldr	r2, [sp, #28]
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa8:	3b30      	subs	r3, #48	; 0x30
 8004faa:	2b09      	cmp	r3, #9
 8004fac:	d94d      	bls.n	800504a <_svfiprintf_r+0x16e>
 8004fae:	b1b8      	cbz	r0, 8004fe0 <_svfiprintf_r+0x104>
 8004fb0:	e00f      	b.n	8004fd2 <_svfiprintf_r+0xf6>
 8004fb2:	462f      	mov	r7, r5
 8004fb4:	e7b8      	b.n	8004f28 <_svfiprintf_r+0x4c>
 8004fb6:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <_svfiprintf_r+0x1dc>)
 8004fb8:	463d      	mov	r5, r7
 8004fba:	1a80      	subs	r0, r0, r2
 8004fbc:	fa0b f000 	lsl.w	r0, fp, r0
 8004fc0:	4318      	orrs	r0, r3
 8004fc2:	9004      	str	r0, [sp, #16]
 8004fc4:	e7d3      	b.n	8004f6e <_svfiprintf_r+0x92>
 8004fc6:	9a03      	ldr	r2, [sp, #12]
 8004fc8:	1d11      	adds	r1, r2, #4
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	9103      	str	r1, [sp, #12]
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	db01      	blt.n	8004fd6 <_svfiprintf_r+0xfa>
 8004fd2:	9207      	str	r2, [sp, #28]
 8004fd4:	e004      	b.n	8004fe0 <_svfiprintf_r+0x104>
 8004fd6:	4252      	negs	r2, r2
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	9207      	str	r2, [sp, #28]
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	783b      	ldrb	r3, [r7, #0]
 8004fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8004fe4:	d10c      	bne.n	8005000 <_svfiprintf_r+0x124>
 8004fe6:	787b      	ldrb	r3, [r7, #1]
 8004fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fea:	d133      	bne.n	8005054 <_svfiprintf_r+0x178>
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	3702      	adds	r7, #2
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	9203      	str	r2, [sp, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bfb8      	it	lt
 8004ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	4d2e      	ldr	r5, [pc, #184]	; (80050bc <_svfiprintf_r+0x1e0>)
 8005002:	2203      	movs	r2, #3
 8005004:	7839      	ldrb	r1, [r7, #0]
 8005006:	4628      	mov	r0, r5
 8005008:	f7ff fb64 	bl	80046d4 <memchr>
 800500c:	b138      	cbz	r0, 800501e <_svfiprintf_r+0x142>
 800500e:	2340      	movs	r3, #64	; 0x40
 8005010:	1b40      	subs	r0, r0, r5
 8005012:	fa03 f000 	lsl.w	r0, r3, r0
 8005016:	9b04      	ldr	r3, [sp, #16]
 8005018:	3701      	adds	r7, #1
 800501a:	4303      	orrs	r3, r0
 800501c:	9304      	str	r3, [sp, #16]
 800501e:	7839      	ldrb	r1, [r7, #0]
 8005020:	2206      	movs	r2, #6
 8005022:	4827      	ldr	r0, [pc, #156]	; (80050c0 <_svfiprintf_r+0x1e4>)
 8005024:	1c7e      	adds	r6, r7, #1
 8005026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800502a:	f7ff fb53 	bl	80046d4 <memchr>
 800502e:	2800      	cmp	r0, #0
 8005030:	d038      	beq.n	80050a4 <_svfiprintf_r+0x1c8>
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <_svfiprintf_r+0x1e8>)
 8005034:	bb13      	cbnz	r3, 800507c <_svfiprintf_r+0x1a0>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	3307      	adds	r3, #7
 800503a:	f023 0307 	bic.w	r3, r3, #7
 800503e:	3308      	adds	r3, #8
 8005040:	9303      	str	r3, [sp, #12]
 8005042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005044:	444b      	add	r3, r9
 8005046:	9309      	str	r3, [sp, #36]	; 0x24
 8005048:	e76d      	b.n	8004f26 <_svfiprintf_r+0x4a>
 800504a:	fb05 3202 	mla	r2, r5, r2, r3
 800504e:	2001      	movs	r0, #1
 8005050:	460f      	mov	r7, r1
 8005052:	e7a6      	b.n	8004fa2 <_svfiprintf_r+0xc6>
 8005054:	2300      	movs	r3, #0
 8005056:	250a      	movs	r5, #10
 8005058:	4619      	mov	r1, r3
 800505a:	3701      	adds	r7, #1
 800505c:	9305      	str	r3, [sp, #20]
 800505e:	4638      	mov	r0, r7
 8005060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005064:	3a30      	subs	r2, #48	; 0x30
 8005066:	2a09      	cmp	r2, #9
 8005068:	d903      	bls.n	8005072 <_svfiprintf_r+0x196>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0c8      	beq.n	8005000 <_svfiprintf_r+0x124>
 800506e:	9105      	str	r1, [sp, #20]
 8005070:	e7c6      	b.n	8005000 <_svfiprintf_r+0x124>
 8005072:	fb05 2101 	mla	r1, r5, r1, r2
 8005076:	2301      	movs	r3, #1
 8005078:	4607      	mov	r7, r0
 800507a:	e7f0      	b.n	800505e <_svfiprintf_r+0x182>
 800507c:	ab03      	add	r3, sp, #12
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4622      	mov	r2, r4
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <_svfiprintf_r+0x1ec>)
 8005084:	a904      	add	r1, sp, #16
 8005086:	4640      	mov	r0, r8
 8005088:	f7fe f8ee 	bl	8003268 <_printf_float>
 800508c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005090:	4681      	mov	r9, r0
 8005092:	d1d6      	bne.n	8005042 <_svfiprintf_r+0x166>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	065b      	lsls	r3, r3, #25
 8005098:	f53f af35 	bmi.w	8004f06 <_svfiprintf_r+0x2a>
 800509c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800509e:	b01d      	add	sp, #116	; 0x74
 80050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4622      	mov	r2, r4
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <_svfiprintf_r+0x1ec>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	4640      	mov	r0, r8
 80050b0:	f7fe fb86 	bl	80037c0 <_printf_i>
 80050b4:	e7ea      	b.n	800508c <_svfiprintf_r+0x1b0>
 80050b6:	bf00      	nop
 80050b8:	08005324 	.word	0x08005324
 80050bc:	0800532a 	.word	0x0800532a
 80050c0:	0800532e 	.word	0x0800532e
 80050c4:	08003269 	.word	0x08003269
 80050c8:	08004e29 	.word	0x08004e29

080050cc <_sbrk_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	2300      	movs	r3, #0
 80050d0:	4c05      	ldr	r4, [pc, #20]	; (80050e8 <_sbrk_r+0x1c>)
 80050d2:	4605      	mov	r5, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	f7fd fdda 	bl	8002c90 <_sbrk>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_sbrk_r+0x1a>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_sbrk_r+0x1a>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	200004c8 	.word	0x200004c8

080050ec <__ascii_mbtowc>:
 80050ec:	b082      	sub	sp, #8
 80050ee:	b901      	cbnz	r1, 80050f2 <__ascii_mbtowc+0x6>
 80050f0:	a901      	add	r1, sp, #4
 80050f2:	b142      	cbz	r2, 8005106 <__ascii_mbtowc+0x1a>
 80050f4:	b14b      	cbz	r3, 800510a <__ascii_mbtowc+0x1e>
 80050f6:	7813      	ldrb	r3, [r2, #0]
 80050f8:	600b      	str	r3, [r1, #0]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	1c10      	adds	r0, r2, #0
 80050fe:	bf18      	it	ne
 8005100:	2001      	movne	r0, #1
 8005102:	b002      	add	sp, #8
 8005104:	4770      	bx	lr
 8005106:	4610      	mov	r0, r2
 8005108:	e7fb      	b.n	8005102 <__ascii_mbtowc+0x16>
 800510a:	f06f 0001 	mvn.w	r0, #1
 800510e:	e7f8      	b.n	8005102 <__ascii_mbtowc+0x16>

08005110 <memmove>:
 8005110:	4288      	cmp	r0, r1
 8005112:	b510      	push	{r4, lr}
 8005114:	eb01 0302 	add.w	r3, r1, r2
 8005118:	d807      	bhi.n	800512a <memmove+0x1a>
 800511a:	1e42      	subs	r2, r0, #1
 800511c:	4299      	cmp	r1, r3
 800511e:	d00a      	beq.n	8005136 <memmove+0x26>
 8005120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005124:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005128:	e7f8      	b.n	800511c <memmove+0xc>
 800512a:	4283      	cmp	r3, r0
 800512c:	d9f5      	bls.n	800511a <memmove+0xa>
 800512e:	1881      	adds	r1, r0, r2
 8005130:	1ad2      	subs	r2, r2, r3
 8005132:	42d3      	cmn	r3, r2
 8005134:	d100      	bne.n	8005138 <memmove+0x28>
 8005136:	bd10      	pop	{r4, pc}
 8005138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800513c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005140:	e7f7      	b.n	8005132 <memmove+0x22>

08005142 <__malloc_lock>:
 8005142:	4770      	bx	lr

08005144 <__malloc_unlock>:
 8005144:	4770      	bx	lr

08005146 <_realloc_r>:
 8005146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005148:	4607      	mov	r7, r0
 800514a:	4614      	mov	r4, r2
 800514c:	460e      	mov	r6, r1
 800514e:	b921      	cbnz	r1, 800515a <_realloc_r+0x14>
 8005150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005154:	4611      	mov	r1, r2
 8005156:	f7ff be0d 	b.w	8004d74 <_malloc_r>
 800515a:	b922      	cbnz	r2, 8005166 <_realloc_r+0x20>
 800515c:	f7ff fdbe 	bl	8004cdc <_free_r>
 8005160:	4625      	mov	r5, r4
 8005162:	4628      	mov	r0, r5
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005166:	f000 f821 	bl	80051ac <_malloc_usable_size_r>
 800516a:	42a0      	cmp	r0, r4
 800516c:	d20f      	bcs.n	800518e <_realloc_r+0x48>
 800516e:	4621      	mov	r1, r4
 8005170:	4638      	mov	r0, r7
 8005172:	f7ff fdff 	bl	8004d74 <_malloc_r>
 8005176:	4605      	mov	r5, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d0f2      	beq.n	8005162 <_realloc_r+0x1c>
 800517c:	4631      	mov	r1, r6
 800517e:	4622      	mov	r2, r4
 8005180:	f7ff fab6 	bl	80046f0 <memcpy>
 8005184:	4631      	mov	r1, r6
 8005186:	4638      	mov	r0, r7
 8005188:	f7ff fda8 	bl	8004cdc <_free_r>
 800518c:	e7e9      	b.n	8005162 <_realloc_r+0x1c>
 800518e:	4635      	mov	r5, r6
 8005190:	e7e7      	b.n	8005162 <_realloc_r+0x1c>

08005192 <__ascii_wctomb>:
 8005192:	b149      	cbz	r1, 80051a8 <__ascii_wctomb+0x16>
 8005194:	2aff      	cmp	r2, #255	; 0xff
 8005196:	bf8b      	itete	hi
 8005198:	238a      	movhi	r3, #138	; 0x8a
 800519a:	700a      	strbls	r2, [r1, #0]
 800519c:	6003      	strhi	r3, [r0, #0]
 800519e:	2001      	movls	r0, #1
 80051a0:	bf88      	it	hi
 80051a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80051a6:	4770      	bx	lr
 80051a8:	4608      	mov	r0, r1
 80051aa:	4770      	bx	lr

080051ac <_malloc_usable_size_r>:
 80051ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b0:	1f18      	subs	r0, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bfbc      	itt	lt
 80051b6:	580b      	ldrlt	r3, [r1, r0]
 80051b8:	18c0      	addlt	r0, r0, r3
 80051ba:	4770      	bx	lr

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
