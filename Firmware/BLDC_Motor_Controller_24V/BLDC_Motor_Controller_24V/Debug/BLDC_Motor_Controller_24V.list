
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000676c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080068a0  080068a0  000168a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b18  08006b18  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006b18  08006b18  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b18  08006b18  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08006b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d0  08006cf0  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006cf0  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bab2  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001790  00000000  00000000  0002bcab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000420  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  0002d860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000914e  00000000  00000000  0002dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063e8  00000000  00000000  00036d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00027ffc  00000000  00000000  0003d0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000650ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001940  00000000  00000000  00065168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d0 	.word	0x200001d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08006884 	.word	0x08006884

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d4 	.word	0x200001d4
 800016c:	08006884 	.word	0x08006884

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	d1ed      	bne.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d16:	2afd      	cmp	r2, #253	; 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	; 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	; 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	; 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__aeabi_f2uiz>:
 8000f64:	0042      	lsls	r2, r0, #1
 8000f66:	d20e      	bcs.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f6c:	d30b      	bcc.n	8000f86 <__aeabi_f2uiz+0x22>
 8000f6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f76:	d409      	bmi.n	8000f8c <__aeabi_f2uiz+0x28>
 8000f78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f80:	fa23 f002 	lsr.w	r0, r3, r2
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2uiz+0x32>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d102      	bne.n	8000f9c <__aeabi_f2uiz+0x38>
 8000f96:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9a:	4770      	bx	lr
 8000f9c:	f04f 0000 	mov.w	r0, #0
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <DMA_Init+0xbc>)
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d80f      	bhi.n	8000fdc <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <DMA_Init+0xc0>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <DMA_Init+0xc4>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	009a      	lsls	r2, r3, #2
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <DMA_Init+0xc8>)
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fda:	e00e      	b.n	8000ffa <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <DMA_Init+0xcc>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <DMA_Init+0xc4>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	009a      	lsls	r2, r3, #2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <DMA_Init+0xd0>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001010:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001014:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 800101e:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 800102a:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001036:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40020407 	.word	0x40020407
 8001064:	bffdfff8 	.word	0xbffdfff8
 8001068:	cccccccd 	.word	0xcccccccd
 800106c:	40020000 	.word	0x40020000
 8001070:	bffdfbf8 	.word	0xbffdfbf8
 8001074:	40020400 	.word	0x40020400

08001078 <DMA_SetConfig>:


static void DMA_SetConfig(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	// 1. Clear all flags
	pDMAHandle->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << pDMAHandle->ChannelIndex);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]

	// 2. Configure DMA Channel data length
	pDMAHandle->Instance->CNDTR = DataLength;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	605a      	str	r2, [r3, #4]

	// 3a. Case of Memory to Peripheral
	if((pDMAHandle->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d108      	bne.n	80010b8 <DMA_SetConfig+0x40>
	{
		// Configure DMA Channel destination address
		pDMAHandle->Instance->CPAR = DstAddress;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]

		// Configure DMA Channel source address
		pDMAHandle->Instance->CMAR = SrcAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	60da      	str	r2, [r3, #12]
		pDMAHandle->Instance->CPAR = SrcAddress;

		// Configure DMA Channel destination address
		pDMAHandle->Instance->CMAR = DstAddress;
	}
}
 80010b6:	e007      	b.n	80010c8 <DMA_SetConfig+0x50>
		pDMAHandle->Instance->CPAR = SrcAddress;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	609a      	str	r2, [r3, #8]
		pDMAHandle->Instance->CMAR = DstAddress;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	60da      	str	r2, [r3, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <DMA_Start_IT>:


void DMA_Start_IT(DMA_HandleTypeDef *pDMAHandle, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
	// BUSY에서 READY로 안바뀌어서 생기는 문제였다. READY인지 체크하는 조건문을 제거하면 잘됨

	// 1. Disable the peripheral
	DISABLE_DMA(pDMAHandle);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

	// 2. Configure the source, destination address and the data length & clear flags
	DMA_SetConfig(pDMAHandle, SrcAddress, DstAddress, DataLength);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff ffbe 	bl	8001078 <DMA_SetConfig>

	// 3. Enable the transfer complete interrupt and the transfer error interrupt
	DISABLE_DMA_IT(pDMAHandle, DMA_IT_HT);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	601a      	str	r2, [r3, #0]
	ENABLE_DMA_IT(pDMAHandle, (DMA_IT_TC));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0202 	orr.w	r2, r2, #2
 800111a:	601a      	str	r2, [r3, #0]

	// 4. Enable the peripheral
	ENABLE_DMA(pDMAHandle);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <DMA_IRQ_Handling>:


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	2104      	movs	r1, #4
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 80bf 	beq.w	80012e2 <DMA_IRQ_Handling+0x1ae>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80bb 	beq.w	80012e2 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001174:	429a      	cmp	r2, r3
 8001176:	d958      	bls.n	800122a <DMA_IRQ_Handling+0xf6>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a97      	ldr	r2, [pc, #604]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d04f      	beq.n	8001222 <DMA_IRQ_Handling+0xee>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a96      	ldr	r2, [pc, #600]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d048      	beq.n	800121e <DMA_IRQ_Handling+0xea>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a94      	ldr	r2, [pc, #592]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d040      	beq.n	8001218 <DMA_IRQ_Handling+0xe4>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d038      	beq.n	8001212 <DMA_IRQ_Handling+0xde>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a91      	ldr	r2, [pc, #580]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d030      	beq.n	800120c <DMA_IRQ_Handling+0xd8>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a90      	ldr	r2, [pc, #576]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d028      	beq.n	8001206 <DMA_IRQ_Handling+0xd2>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d020      	beq.n	8001200 <DMA_IRQ_Handling+0xcc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8c      	ldr	r2, [pc, #560]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d019      	beq.n	80011fc <DMA_IRQ_Handling+0xc8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a8a      	ldr	r2, [pc, #552]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d012      	beq.n	80011f8 <DMA_IRQ_Handling+0xc4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a89      	ldr	r2, [pc, #548]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00a      	beq.n	80011f2 <DMA_IRQ_Handling+0xbe>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a87      	ldr	r2, [pc, #540]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d102      	bne.n	80011ec <DMA_IRQ_Handling+0xb8>
 80011e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ea:	e01b      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011f0:	e018      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	e015      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	e013      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e011      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001204:	e00e      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120a:	e00b      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 800120c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001210:	e008      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001216:	e005      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121c:	e002      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 800121e:	2340      	movs	r3, #64	; 0x40
 8001220:	e000      	b.n	8001224 <DMA_IRQ_Handling+0xf0>
 8001222:	2304      	movs	r3, #4
 8001224:	4a77      	ldr	r2, [pc, #476]	; (8001404 <DMA_IRQ_Handling+0x2d0>)
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e057      	b.n	80012da <DMA_IRQ_Handling+0x1a6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6b      	ldr	r2, [pc, #428]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04f      	beq.n	80012d4 <DMA_IRQ_Handling+0x1a0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d048      	beq.n	80012d0 <DMA_IRQ_Handling+0x19c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d040      	beq.n	80012ca <DMA_IRQ_Handling+0x196>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d038      	beq.n	80012c4 <DMA_IRQ_Handling+0x190>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a65      	ldr	r2, [pc, #404]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d030      	beq.n	80012be <DMA_IRQ_Handling+0x18a>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d028      	beq.n	80012b8 <DMA_IRQ_Handling+0x184>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d020      	beq.n	80012b2 <DMA_IRQ_Handling+0x17e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <DMA_IRQ_Handling+0x17a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d012      	beq.n	80012aa <DMA_IRQ_Handling+0x176>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00a      	beq.n	80012a4 <DMA_IRQ_Handling+0x170>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <DMA_IRQ_Handling+0x16a>
 8001298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129c:	e01b      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 800129e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a2:	e018      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a8:	e015      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	e013      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e011      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012b6:	e00e      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012bc:	e00b      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012c2:	e008      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c8:	e005      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	e002      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	e000      	b.n	80012d6 <DMA_IRQ_Handling+0x1a2>
 80012d4:	2304      	movs	r3, #4
 80012d6:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <DMA_IRQ_Handling+0x2d4>)
 80012d8:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2102      	movs	r1, #2
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80dd 	beq.w	80014c4 <DMA_IRQ_Handling+0x390>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80d9 	beq.w	80014c4 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001322:	429a      	cmp	r2, r3
 8001324:	d972      	bls.n	800140c <DMA_IRQ_Handling+0x2d8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <DMA_IRQ_Handling+0x2a8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04f      	beq.n	80013d0 <DMA_IRQ_Handling+0x29c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <DMA_IRQ_Handling+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d048      	beq.n	80013cc <DMA_IRQ_Handling+0x298>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <DMA_IRQ_Handling+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d040      	beq.n	80013c6 <DMA_IRQ_Handling+0x292>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <DMA_IRQ_Handling+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d038      	beq.n	80013c0 <DMA_IRQ_Handling+0x28c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a26      	ldr	r2, [pc, #152]	; (80013ec <DMA_IRQ_Handling+0x2b8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d030      	beq.n	80013ba <DMA_IRQ_Handling+0x286>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <DMA_IRQ_Handling+0x2bc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d028      	beq.n	80013b4 <DMA_IRQ_Handling+0x280>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <DMA_IRQ_Handling+0x2a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d020      	beq.n	80013ae <DMA_IRQ_Handling+0x27a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <DMA_IRQ_Handling+0x2c0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <DMA_IRQ_Handling+0x276>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <DMA_IRQ_Handling+0x2c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <DMA_IRQ_Handling+0x272>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <DMA_IRQ_Handling+0x2c8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <DMA_IRQ_Handling+0x26c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <DMA_IRQ_Handling+0x2cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <DMA_IRQ_Handling+0x266>
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	e01b      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	e018      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a4:	e015      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013a6:	2320      	movs	r3, #32
 80013a8:	e013      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e011      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b2:	e00e      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b8:	e00b      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013be:	e008      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	e005      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	e002      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013cc:	2320      	movs	r3, #32
 80013ce:	e000      	b.n	80013d2 <DMA_IRQ_Handling+0x29e>
 80013d0:	2302      	movs	r3, #2
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <DMA_IRQ_Handling+0x2d0>)
 80013d4:	6053      	str	r3, [r2, #4]
 80013d6:	e071      	b.n	80014bc <DMA_IRQ_Handling+0x388>
 80013d8:	40020080 	.word	0x40020080
 80013dc:	40020008 	.word	0x40020008
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	40020030 	.word	0x40020030
 80013e8:	40020044 	.word	0x40020044
 80013ec:	40020058 	.word	0x40020058
 80013f0:	4002006c 	.word	0x4002006c
 80013f4:	40020408 	.word	0x40020408
 80013f8:	4002041c 	.word	0x4002041c
 80013fc:	40020430 	.word	0x40020430
 8001400:	40020444 	.word	0x40020444
 8001404:	40020400 	.word	0x40020400
 8001408:	40020000 	.word	0x40020000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9a      	ldr	r2, [pc, #616]	; (800167c <DMA_IRQ_Handling+0x548>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d04f      	beq.n	80014b6 <DMA_IRQ_Handling+0x382>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a99      	ldr	r2, [pc, #612]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d048      	beq.n	80014b2 <DMA_IRQ_Handling+0x37e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a97      	ldr	r2, [pc, #604]	; (8001684 <DMA_IRQ_Handling+0x550>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d040      	beq.n	80014ac <DMA_IRQ_Handling+0x378>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a96      	ldr	r2, [pc, #600]	; (8001688 <DMA_IRQ_Handling+0x554>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d038      	beq.n	80014a6 <DMA_IRQ_Handling+0x372>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <DMA_IRQ_Handling+0x558>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d030      	beq.n	80014a0 <DMA_IRQ_Handling+0x36c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a93      	ldr	r2, [pc, #588]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d028      	beq.n	800149a <DMA_IRQ_Handling+0x366>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a91      	ldr	r2, [pc, #580]	; (8001694 <DMA_IRQ_Handling+0x560>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d020      	beq.n	8001494 <DMA_IRQ_Handling+0x360>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a90      	ldr	r2, [pc, #576]	; (8001698 <DMA_IRQ_Handling+0x564>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d019      	beq.n	8001490 <DMA_IRQ_Handling+0x35c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a8e      	ldr	r2, [pc, #568]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d012      	beq.n	800148c <DMA_IRQ_Handling+0x358>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a8d      	ldr	r2, [pc, #564]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00a      	beq.n	8001486 <DMA_IRQ_Handling+0x352>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a8b      	ldr	r2, [pc, #556]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d102      	bne.n	8001480 <DMA_IRQ_Handling+0x34c>
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	e01b      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001484:	e018      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	e015      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 800148c:	2320      	movs	r3, #32
 800148e:	e013      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001490:	2302      	movs	r3, #2
 8001492:	e011      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 8001494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001498:	e00e      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 800149a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800149e:	e00b      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	e008      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	e005      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	e002      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014b2:	2320      	movs	r3, #32
 80014b4:	e000      	b.n	80014b8 <DMA_IRQ_Handling+0x384>
 80014b6:	2302      	movs	r3, #2
 80014b8:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <DMA_IRQ_Handling+0x574>)
 80014ba:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2108      	movs	r1, #8
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80c3 	beq.w	8001672 <DMA_IRQ_Handling+0x53e>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80bf 	beq.w	8001672 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <DMA_IRQ_Handling+0x560>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d958      	bls.n	80015b2 <DMA_IRQ_Handling+0x47e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a5d      	ldr	r2, [pc, #372]	; (800167c <DMA_IRQ_Handling+0x548>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d04f      	beq.n	80015aa <DMA_IRQ_Handling+0x476>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d048      	beq.n	80015a6 <DMA_IRQ_Handling+0x472>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <DMA_IRQ_Handling+0x550>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d040      	beq.n	80015a0 <DMA_IRQ_Handling+0x46c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a59      	ldr	r2, [pc, #356]	; (8001688 <DMA_IRQ_Handling+0x554>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d038      	beq.n	800159a <DMA_IRQ_Handling+0x466>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <DMA_IRQ_Handling+0x558>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d030      	beq.n	8001594 <DMA_IRQ_Handling+0x460>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d028      	beq.n	800158e <DMA_IRQ_Handling+0x45a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a54      	ldr	r2, [pc, #336]	; (8001694 <DMA_IRQ_Handling+0x560>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d020      	beq.n	8001588 <DMA_IRQ_Handling+0x454>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a53      	ldr	r2, [pc, #332]	; (8001698 <DMA_IRQ_Handling+0x564>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <DMA_IRQ_Handling+0x450>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d012      	beq.n	8001580 <DMA_IRQ_Handling+0x44c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00a      	beq.n	800157a <DMA_IRQ_Handling+0x446>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <DMA_IRQ_Handling+0x440>
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	e01b      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	e018      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	e015      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001580:	2310      	movs	r3, #16
 8001582:	e013      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001584:	2301      	movs	r3, #1
 8001586:	e011      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158c:	e00e      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800158e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001592:	e00b      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	e008      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	e005      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	e002      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015a6:	2310      	movs	r3, #16
 80015a8:	e000      	b.n	80015ac <DMA_IRQ_Handling+0x478>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <DMA_IRQ_Handling+0x578>)
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e057      	b.n	8001662 <DMA_IRQ_Handling+0x52e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <DMA_IRQ_Handling+0x548>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04f      	beq.n	800165c <DMA_IRQ_Handling+0x528>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <DMA_IRQ_Handling+0x54c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d048      	beq.n	8001658 <DMA_IRQ_Handling+0x524>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <DMA_IRQ_Handling+0x550>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <DMA_IRQ_Handling+0x51e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <DMA_IRQ_Handling+0x554>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d038      	beq.n	800164c <DMA_IRQ_Handling+0x518>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2b      	ldr	r2, [pc, #172]	; (800168c <DMA_IRQ_Handling+0x558>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d030      	beq.n	8001646 <DMA_IRQ_Handling+0x512>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <DMA_IRQ_Handling+0x55c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d028      	beq.n	8001640 <DMA_IRQ_Handling+0x50c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <DMA_IRQ_Handling+0x560>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d020      	beq.n	800163a <DMA_IRQ_Handling+0x506>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <DMA_IRQ_Handling+0x564>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <DMA_IRQ_Handling+0x502>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <DMA_IRQ_Handling+0x568>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d012      	beq.n	8001632 <DMA_IRQ_Handling+0x4fe>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <DMA_IRQ_Handling+0x56c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00a      	beq.n	800162c <DMA_IRQ_Handling+0x4f8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <DMA_IRQ_Handling+0x570>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <DMA_IRQ_Handling+0x4f2>
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	e01b      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	e018      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	e015      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001632:	2310      	movs	r3, #16
 8001634:	e013      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001636:	2301      	movs	r3, #1
 8001638:	e011      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800163a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163e:	e00e      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001644:	e00b      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164a:	e008      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	e005      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	e002      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 8001658:	2310      	movs	r3, #16
 800165a:	e000      	b.n	800165e <DMA_IRQ_Handling+0x52a>
 800165c:	2301      	movs	r3, #1
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <DMA_IRQ_Handling+0x574>)
 8001660:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
	}
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020008 	.word	0x40020008
 8001680:	4002001c 	.word	0x4002001c
 8001684:	40020030 	.word	0x40020030
 8001688:	40020044 	.word	0x40020044
 800168c:	40020058 	.word	0x40020058
 8001690:	4002006c 	.word	0x4002006c
 8001694:	40020080 	.word	0x40020080
 8001698:	40020408 	.word	0x40020408
 800169c:	4002041c 	.word	0x4002041c
 80016a0:	40020430 	.word	0x40020430
 80016a4:	40020444 	.word	0x40020444
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400

080016b0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <GPIO_Init+0x270>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d106      	bne.n	80016d8 <GPIO_Init+0x28>
 80016ca:	4b96      	ldr	r3, [pc, #600]	; (8001924 <GPIO_Init+0x274>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a95      	ldr	r2, [pc, #596]	; (8001924 <GPIO_Init+0x274>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	e03c      	b.n	8001752 <GPIO_Init+0xa2>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <GPIO_Init+0x278>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d106      	bne.n	80016ee <GPIO_Init+0x3e>
 80016e0:	4b90      	ldr	r3, [pc, #576]	; (8001924 <GPIO_Init+0x274>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a8f      	ldr	r2, [pc, #572]	; (8001924 <GPIO_Init+0x274>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	e031      	b.n	8001752 <GPIO_Init+0xa2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a8e      	ldr	r2, [pc, #568]	; (800192c <GPIO_Init+0x27c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d106      	bne.n	8001704 <GPIO_Init+0x54>
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <GPIO_Init+0x274>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a8a      	ldr	r2, [pc, #552]	; (8001924 <GPIO_Init+0x274>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	e026      	b.n	8001752 <GPIO_Init+0xa2>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a8a      	ldr	r2, [pc, #552]	; (8001930 <GPIO_Init+0x280>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d106      	bne.n	800171a <GPIO_Init+0x6a>
 800170c:	4b85      	ldr	r3, [pc, #532]	; (8001924 <GPIO_Init+0x274>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a84      	ldr	r2, [pc, #528]	; (8001924 <GPIO_Init+0x274>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	e01b      	b.n	8001752 <GPIO_Init+0xa2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a85      	ldr	r2, [pc, #532]	; (8001934 <GPIO_Init+0x284>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d106      	bne.n	8001730 <GPIO_Init+0x80>
 8001722:	4b80      	ldr	r3, [pc, #512]	; (8001924 <GPIO_Init+0x274>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <GPIO_Init+0x274>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	e010      	b.n	8001752 <GPIO_Init+0xa2>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a81      	ldr	r2, [pc, #516]	; (8001938 <GPIO_Init+0x288>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d106      	bne.n	8001746 <GPIO_Init+0x96>
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <GPIO_Init+0x274>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a79      	ldr	r2, [pc, #484]	; (8001924 <GPIO_Init+0x274>)
 800173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	e005      	b.n	8001752 <GPIO_Init+0xa2>
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <GPIO_Init+0x274>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a76      	ldr	r2, [pc, #472]	; (8001924 <GPIO_Init+0x274>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001752:	2300      	movs	r3, #0
 8001754:	76fb      	strb	r3, [r7, #27]
 8001756:	e1d0      	b.n	8001afa <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	7efa      	ldrb	r2, [r7, #27]
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 81c0 	beq.w	8001aec <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b11      	cmp	r3, #17
 8001772:	d039      	beq.n	80017e8 <GPIO_Init+0x138>
 8001774:	2b11      	cmp	r3, #17
 8001776:	d807      	bhi.n	8001788 <GPIO_Init+0xd8>
 8001778:	2b01      	cmp	r3, #1
 800177a:	d016      	beq.n	80017aa <GPIO_Init+0xfa>
 800177c:	2b01      	cmp	r3, #1
 800177e:	f0c0 8090 	bcc.w	80018a2 <GPIO_Init+0x1f2>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d04f      	beq.n	8001826 <GPIO_Init+0x176>
 8001786:	e0bd      	b.n	8001904 <GPIO_Init+0x254>
 8001788:	4a6c      	ldr	r2, [pc, #432]	; (800193c <GPIO_Init+0x28c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f000 8089 	beq.w	80018a2 <GPIO_Init+0x1f2>
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <GPIO_Init+0x28c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d802      	bhi.n	800179c <GPIO_Init+0xec>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d064      	beq.n	8001864 <GPIO_Init+0x1b4>
 800179a:	e0b3      	b.n	8001904 <GPIO_Init+0x254>
 800179c:	4a68      	ldr	r2, [pc, #416]	; (8001940 <GPIO_Init+0x290>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d07f      	beq.n	80018a2 <GPIO_Init+0x1f2>
 80017a2:	4a68      	ldr	r2, [pc, #416]	; (8001944 <GPIO_Init+0x294>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d07c      	beq.n	80018a2 <GPIO_Init+0x1f2>
 80017a8:	e0ac      	b.n	8001904 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <GPIO_Init+0x10c>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e010      	b.n	80017de <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <GPIO_Init+0x11e>
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	e007      	b.n	80017de <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d103      	bne.n	80017de <GPIO_Init+0x12e>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f043 0303 	orr.w	r3, r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f023 030c 	bic.w	r3, r3, #12
 80017e4:	61fb      	str	r3, [r7, #28]


					break;
 80017e6:	e08d      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d104      	bne.n	80017fa <GPIO_Init+0x14a>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	e010      	b.n	800181c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d104      	bne.n	800180c <GPIO_Init+0x15c>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e007      	b.n	800181c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d103      	bne.n	800181c <GPIO_Init+0x16c>
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f043 0303 	orr.w	r3, r3, #3
 800181a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	61fb      	str	r3, [r7, #28]

					break;
 8001824:	e06e      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d104      	bne.n	8001838 <GPIO_Init+0x188>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e010      	b.n	800185a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d104      	bne.n	800184a <GPIO_Init+0x19a>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	e007      	b.n	800185a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d103      	bne.n	800185a <GPIO_Init+0x1aa>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f043 0303 	orr.w	r3, r3, #3
 8001858:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	61fb      	str	r3, [r7, #28]

					break;
 8001862:	e04f      	b.n	8001904 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d104      	bne.n	8001876 <GPIO_Init+0x1c6>
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e010      	b.n	8001898 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d104      	bne.n	8001888 <GPIO_Init+0x1d8>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e007      	b.n	8001898 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d103      	bne.n	8001898 <GPIO_Init+0x1e8>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f043 0303 	orr.w	r3, r3, #3
 8001896:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f043 030c 	orr.w	r3, r3, #12
 800189e:	61fb      	str	r3, [r7, #28]

					break;
 80018a0:	e030      	b.n	8001904 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80018ba:	e022      	b.n	8001902 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	7efa      	ldrb	r2, [r7, #27]
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]
					break;
 80018de:	e010      	b.n	8001902 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d10c      	bne.n	8001902 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	7efa      	ldrb	r2, [r7, #27]
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	615a      	str	r2, [r3, #20]
					break;
 8001902:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001904:	7efb      	ldrb	r3, [r7, #27]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d801      	bhi.n	800190e <GPIO_Init+0x25e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <GPIO_Init+0x262>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001914:	7efb      	ldrb	r3, [r7, #27]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d816      	bhi.n	8001948 <GPIO_Init+0x298>
 800191a:	7efb      	ldrb	r3, [r7, #27]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	e016      	b.n	800194e <GPIO_Init+0x29e>
 8001920:	40010800 	.word	0x40010800
 8001924:	40021000 	.word	0x40021000
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	40011800 	.word	0x40011800
 8001938:	40011c00 	.word	0x40011c00
 800193c:	10110000 	.word	0x10110000
 8001940:	10210000 	.word	0x10210000
 8001944:	10310000 	.word	0x10310000
 8001948:	7efb      	ldrb	r3, [r7, #27]
 800194a:	3b08      	subs	r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	210f      	movs	r1, #15
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	69f9      	ldr	r1, [r7, #28]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80b8 	beq.w	8001aec <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <GPIO_Init+0x45c>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a62      	ldr	r2, [pc, #392]	; (8001b0c <GPIO_Init+0x45c>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001990:	7efb      	ldrb	r3, [r7, #27]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <GPIO_Init+0x460>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	210f      	movs	r1, #15
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4958      	ldr	r1, [pc, #352]	; (8001b14 <GPIO_Init+0x464>)
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d01f      	beq.n	80019f8 <GPIO_Init+0x348>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4957      	ldr	r1, [pc, #348]	; (8001b18 <GPIO_Init+0x468>)
 80019bc:	428b      	cmp	r3, r1
 80019be:	d019      	beq.n	80019f4 <GPIO_Init+0x344>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4956      	ldr	r1, [pc, #344]	; (8001b1c <GPIO_Init+0x46c>)
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d013      	beq.n	80019f0 <GPIO_Init+0x340>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4955      	ldr	r1, [pc, #340]	; (8001b20 <GPIO_Init+0x470>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d00d      	beq.n	80019ec <GPIO_Init+0x33c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4954      	ldr	r1, [pc, #336]	; (8001b24 <GPIO_Init+0x474>)
 80019d4:	428b      	cmp	r3, r1
 80019d6:	d007      	beq.n	80019e8 <GPIO_Init+0x338>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4953      	ldr	r1, [pc, #332]	; (8001b28 <GPIO_Init+0x478>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d101      	bne.n	80019e4 <GPIO_Init+0x334>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e00a      	b.n	80019fa <GPIO_Init+0x34a>
 80019e4:	2306      	movs	r3, #6
 80019e6:	e008      	b.n	80019fa <GPIO_Init+0x34a>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e006      	b.n	80019fa <GPIO_Init+0x34a>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e004      	b.n	80019fa <GPIO_Init+0x34a>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <GPIO_Init+0x34a>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <GPIO_Init+0x34a>
 80019f8:	2300      	movs	r3, #0
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	0089      	lsls	r1, r1, #2
 80019fe:	408b      	lsls	r3, r1
 8001a00:	4943      	ldr	r1, [pc, #268]	; (8001b10 <GPIO_Init+0x460>)
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3302      	adds	r3, #2
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001a18:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <GPIO_Init+0x47c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	7efa      	ldrb	r2, [r7, #27]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4611      	mov	r1, r2
 8001a26:	4a41      	ldr	r2, [pc, #260]	; (8001b2c <GPIO_Init+0x47c>)
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e00a      	b.n	8001a44 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <GPIO_Init+0x47c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	7efa      	ldrb	r2, [r7, #27]
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	43d2      	mvns	r2, r2
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <GPIO_Init+0x47c>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001a50:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <GPIO_Init+0x47c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	7efa      	ldrb	r2, [r7, #27]
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <GPIO_Init+0x47c>)
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6053      	str	r3, [r2, #4]
 8001a64:	e00a      	b.n	8001a7c <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <GPIO_Init+0x47c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	7efa      	ldrb	r2, [r7, #27]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	43d2      	mvns	r2, r2
 8001a74:	4611      	mov	r1, r2
 8001a76:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <GPIO_Init+0x47c>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <GPIO_Init+0x47c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	7efa      	ldrb	r2, [r7, #27]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4611      	mov	r1, r2
 8001a96:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <GPIO_Init+0x47c>)
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]
 8001a9c:	e00a      	b.n	8001ab4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <GPIO_Init+0x47c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	7efa      	ldrb	r2, [r7, #27]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	43d2      	mvns	r2, r2
 8001aac:	4611      	mov	r1, r2
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <GPIO_Init+0x47c>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <GPIO_Init+0x47c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	7efa      	ldrb	r2, [r7, #27]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <GPIO_Init+0x47c>)
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	60d3      	str	r3, [r2, #12]
 8001ad4:	e00a      	b.n	8001aec <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <GPIO_Init+0x47c>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	7efa      	ldrb	r2, [r7, #27]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	43d2      	mvns	r2, r2
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <GPIO_Init+0x47c>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001af4:	7efb      	ldrb	r3, [r7, #27]
 8001af6:	3301      	adds	r3, #1
 8001af8:	76fb      	strb	r3, [r7, #27]
 8001afa:	7efb      	ldrb	r3, [r7, #27]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	f67f ae2b 	bls.w	8001758 <GPIO_Init+0xa8>
	}
}
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40011800 	.word	0x40011800
 8001b28:	40011c00 	.word	0x40011c00
 8001b2c:	40010400 	.word	0x40010400

08001b30 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d106      	bne.n	8001b54 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001b52:	e006      	b.n	8001b62 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001b80:	883b      	ldrh	r3, [r7, #0]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <EXTI_IRQHandling+0x34>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f002 fd21 	bl	800460c <EXTI_Callback>
	}
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d011      	beq.n	8001c10 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf4:	d10c      	bne.n	8001c10 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001c02:	bf00      	nop
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f9      	beq.n	8001c04 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d128      	bne.n	8001c6a <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d105      	bne.n	8001c3a <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c38:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	4313      	orrs	r3, r2
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001c5c:	bf00      	nop
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <RCC_OscConfig+0x9c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f9      	beq.n	8001c5e <RCC_OscConfig+0x86>
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40021000 	.word	0x40021000

08001c78 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <RCC_ClockConfig+0x7c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <RCC_ClockConfig+0x7c>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4911      	ldr	r1, [pc, #68]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 0203 	bic.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001cda:	bf00      	nop
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <RCC_ClockConfig+0x80>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f9      	beq.n	8001cdc <RCC_ClockConfig+0x64>
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000

08001cfc <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <RCC_GetPLLOutputClock+0x1e>
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e020      	b.n	8001d60 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <RCC_GetPLLOutputClock+0x74>)
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e001      	b.n	8001d34 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <RCC_GetPLLOutputClock+0x78>)
 8001d32:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <RCC_GetPLLOutputClock+0x70>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d102      	bne.n	8001d4e <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	72fb      	strb	r3, [r7, #11]
 8001d4c:	e002      	b.n	8001d54 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001d4e:	7abb      	ldrb	r3, [r7, #10]
 8001d50:	3302      	adds	r3, #2
 8001d52:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001d54:	7afa      	ldrb	r2, [r7, #11]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b08d      	sub	sp, #52	; 0x34
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001d92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <RCC_GetPCLKxValue+0x148>)
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9e:	e00d      	b.n	8001dbc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001da8:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <RCC_GetPCLKxValue+0x148>)
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dac:	e006      	b.n	8001dbc <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d102      	bne.n	8001dbc <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001db6:	f7ff ffa1 	bl	8001cfc <RCC_GetPLLOutputClock>
 8001dba:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <RCC_GetPCLKxValue+0x14c>)
 8001dbe:	f107 0410 	add.w	r4, r7, #16
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d803      	bhi.n	8001de8 <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001de6:	e00a      	b.n	8001dfe <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dec:	3b08      	subs	r3, #8
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001df4:	4413      	add	r3, r2
 8001df6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <RCC_GetPCLKxValue+0x150>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11a      	bne.n	8001e40 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d803      	bhi.n	8001e2a <RCC_GetPCLKxValue+0xb2>
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e28:	e027      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e34:	4413      	add	r3, r2
 8001e36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e3e:	e01c      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d119      	bne.n	8001e7a <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <RCC_GetPCLKxValue+0x144>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0adb      	lsrs	r3, r3, #11
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d803      	bhi.n	8001e66 <RCC_GetPCLKxValue+0xee>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e64:	e009      	b.n	8001e7a <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e70:	4413      	add	r3, r2
 8001e72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <RCC_GetPCLKxValue+0x11e>
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e94:	e00c      	b.n	8001eb0 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d109      	bne.n	8001eb0 <RCC_GetPCLKxValue+0x138>
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3734      	adds	r7, #52	; 0x34
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	007a1200 	.word	0x007a1200
 8001ec4:	080068a0 	.word	0x080068a0
 8001ec8:	080068b0 	.word	0x080068b0

08001ecc <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 ff54 	bl	8003d90 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f81f 	bl	8001f2c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]
 8001ef4:	e000      	b.n	8001ef8 <TIM_Base_Init+0x2c>
		return;
 8001ef6:	bf00      	nop
}
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7f1b      	ldrb	r3, [r3, #28]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 ff55 	bl	8003dc0 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f808 	bl	8001f2c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	771a      	strb	r2, [r3, #28]
 8001f22:	e000      	b.n	8001f26 <TIM_PWM_Init+0x28>
		return;
 8001f24:	bf00      	nop
}
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68d2      	ldr	r2, [r2, #12]
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6852      	ldr	r2, [r2, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6952      	ldr	r2, [r2, #20]
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	f200 80d3 	bhi.w	8002152 <TIM_PWM_ConfigChannel+0x1ba>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <TIM_PWM_ConfigChannel+0x1c>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fe9 	.word	0x08001fe9
 8001fb8:	08002153 	.word	0x08002153
 8001fbc:	08002153 	.word	0x08002153
 8001fc0:	08002153 	.word	0x08002153
 8001fc4:	08002041 	.word	0x08002041
 8001fc8:	08002153 	.word	0x08002153
 8001fcc:	08002153 	.word	0x08002153
 8001fd0:	08002153 	.word	0x08002153
 8001fd4:	0800209d 	.word	0x0800209d
 8001fd8:	08002153 	.word	0x08002153
 8001fdc:	08002153 	.word	0x08002153
 8001fe0:	08002153 	.word	0x08002153
 8001fe4:	080020f7 	.word	0x080020f7
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 0102 	bic.w	r1, r3, #2
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0208 	orr.w	r2, r2, #8
 800203c:	619a      	str	r2, [r3, #24]

			break;
 800203e:	e089      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0210 	bic.w	r2, r2, #16
 800204e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0120 	bic.w	r1, r3, #32
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	011a      	lsls	r2, r3, #4
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	6852      	ldr	r2, [r2, #4]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002098:	619a      	str	r2, [r3, #24]

			break;
 800209a:	e05b      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020aa:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	61da      	str	r2, [r3, #28]

			break;
 80020f4:	e02e      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002104:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	031a      	lsls	r2, r3, #12
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	6852      	ldr	r2, [r2, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214e:	61da      	str	r2, [r3, #28]

			break;
 8002150:	e000      	b.n	8002154 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8002152:	bf00      	nop
	}
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d157      	bne.n	8002222 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <TIM_PeripheralClockControl+0x180>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d106      	bne.n	8002188 <TIM_PeripheralClockControl+0x28>
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002184:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002186:	e0a6      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d106      	bne.n	800219e <TIM_PeripheralClockControl+0x3e>
 8002190:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4a53      	ldr	r2, [pc, #332]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	61d3      	str	r3, [r2, #28]
}
 800219c:	e09b      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <TIM_PeripheralClockControl+0x188>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d106      	bne.n	80021b4 <TIM_PeripheralClockControl+0x54>
 80021a6:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a4e      	ldr	r2, [pc, #312]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	61d3      	str	r3, [r2, #28]
}
 80021b2:	e090      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4d      	ldr	r2, [pc, #308]	; (80022ec <TIM_PeripheralClockControl+0x18c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d106      	bne.n	80021ca <TIM_PeripheralClockControl+0x6a>
 80021bc:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a48      	ldr	r2, [pc, #288]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	61d3      	str	r3, [r2, #28]
}
 80021c8:	e085      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <TIM_PeripheralClockControl+0x190>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d106      	bne.n	80021e0 <TIM_PeripheralClockControl+0x80>
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	61d3      	str	r3, [r2, #28]
}
 80021de:	e07a      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <TIM_PeripheralClockControl+0x194>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d106      	bne.n	80021f6 <TIM_PeripheralClockControl+0x96>
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	61d3      	str	r3, [r2, #28]
}
 80021f4:	e06f      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <TIM_PeripheralClockControl+0x198>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d106      	bne.n	800220c <TIM_PeripheralClockControl+0xac>
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	61d3      	str	r3, [r2, #28]
}
 800220a:	e064      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <TIM_PeripheralClockControl+0x19c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d160      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800221a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800221e:	6193      	str	r3, [r2, #24]
}
 8002220:	e059      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d156      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <TIM_PeripheralClockControl+0x180>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d106      	bne.n	800223e <TIM_PeripheralClockControl+0xde>
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223a:	6193      	str	r3, [r2, #24]
}
 800223c:	e04b      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d106      	bne.n	8002254 <TIM_PeripheralClockControl+0xf4>
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	61d3      	str	r3, [r2, #28]
}
 8002252:	e040      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <TIM_PeripheralClockControl+0x188>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <TIM_PeripheralClockControl+0x10a>
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002262:	f023 0302 	bic.w	r3, r3, #2
 8002266:	61d3      	str	r3, [r2, #28]
}
 8002268:	e035      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <TIM_PeripheralClockControl+0x18c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <TIM_PeripheralClockControl+0x120>
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	61d3      	str	r3, [r2, #28]
}
 800227e:	e02a      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <TIM_PeripheralClockControl+0x190>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d106      	bne.n	8002296 <TIM_PeripheralClockControl+0x136>
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 800228e:	f023 0308 	bic.w	r3, r3, #8
 8002292:	61d3      	str	r3, [r2, #28]
}
 8002294:	e01f      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <TIM_PeripheralClockControl+0x194>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d106      	bne.n	80022ac <TIM_PeripheralClockControl+0x14c>
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022a4:	f023 0310 	bic.w	r3, r3, #16
 80022a8:	61d3      	str	r3, [r2, #28]
}
 80022aa:	e014      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <TIM_PeripheralClockControl+0x198>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d106      	bne.n	80022c2 <TIM_PeripheralClockControl+0x162>
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022ba:	f023 0320 	bic.w	r3, r3, #32
 80022be:	61d3      	str	r3, [r2, #28]
}
 80022c0:	e009      	b.n	80022d6 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <TIM_PeripheralClockControl+0x19c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d105      	bne.n	80022d6 <TIM_PeripheralClockControl+0x176>
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <TIM_PeripheralClockControl+0x184>)
 80022d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d4:	6193      	str	r3, [r2, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40001000 	.word	0x40001000
 80022f8:	40001400 	.word	0x40001400
 80022fc:	40013400 	.word	0x40013400

08002300 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <TIM_PWM_Start+0x22>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	621a      	str	r2, [r3, #32]
 8002320:	e022      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d108      	bne.n	800233a <TIM_PWM_Start+0x3a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0210 	orr.w	r2, r2, #16
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e016      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d108      	bne.n	8002352 <TIM_PWM_Start+0x52>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	e00a      	b.n	8002368 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d107      	bne.n	8002368 <TIM_PWM_Start+0x68>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a1a      	ldr	r2, [r3, #32]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002366:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002376:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
	...

08002394 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <TIM_IRQHandling+0x3e>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <TIM_IRQHandling+0x48>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <TIM_IRQHandling+0x48>)
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f001 fffb 	bl	80043c8 <TIM_PeriodElapsedCallback>
	}
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40001000 	.word	0x40001000

080023e0 <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 fc3b 	bl	8003c68 <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f8db 	bl	80025b4 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800241e:	f023 030c 	bic.w	r3, r3, #12
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
	config = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	430a      	orrs	r2, r1
 800244c:	611a      	str	r2, [r3, #16]
	config = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	430a      	orrs	r2, r1
 800246e:	615a      	str	r2, [r3, #20]
	config = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 f8b6 	bl	80025f0 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f892 	bl	80025b4 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d136      	bne.n	8002520 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <USART_PeripheralClockControl+0xfc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d106      	bne.n	80024c8 <USART_PeripheralClockControl+0x28>
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 80024c6:	e064      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <USART_PeripheralClockControl+0x104>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d106      	bne.n	80024de <USART_PeripheralClockControl+0x3e>
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	61d3      	str	r3, [r2, #28]
}
 80024dc:	e059      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <USART_PeripheralClockControl+0x108>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d106      	bne.n	80024f4 <USART_PeripheralClockControl+0x54>
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	61d3      	str	r3, [r2, #28]
}
 80024f2:	e04e      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <USART_PeripheralClockControl+0x10c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <USART_PeripheralClockControl+0x6a>
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002506:	61d3      	str	r3, [r2, #28]
}
 8002508:	e043      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <USART_PeripheralClockControl+0x110>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d13f      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251c:	61d3      	str	r3, [r2, #28]
}
 800251e:	e038      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d135      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <USART_PeripheralClockControl+0xfc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <USART_PeripheralClockControl+0x9c>
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002538:	6193      	str	r3, [r2, #24]
}
 800253a:	e02a      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <USART_PeripheralClockControl+0x104>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d106      	bne.n	8002552 <USART_PeripheralClockControl+0xb2>
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800254a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800254e:	61d3      	str	r3, [r2, #28]
}
 8002550:	e01f      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <USART_PeripheralClockControl+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d106      	bne.n	8002568 <USART_PeripheralClockControl+0xc8>
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	61d3      	str	r3, [r2, #28]
}
 8002566:	e014      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <USART_PeripheralClockControl+0x10c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d106      	bne.n	800257e <USART_PeripheralClockControl+0xde>
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002576:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800257a:	61d3      	str	r3, [r2, #28]
}
 800257c:	e009      	b.n	8002592 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <USART_PeripheralClockControl+0x110>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d105      	bne.n	8002592 <USART_PeripheralClockControl+0xf2>
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <USART_PeripheralClockControl+0x100>)
 800258c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002590:	61d3      	str	r3, [r2, #28]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40013800 	.word	0x40013800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40004800 	.word	0x40004800
 80025ac:	40004c00 	.word	0x40004c00
 80025b0:	40005000 	.word	0x40005000

080025b4 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <USART_PeripheralControl+0x20>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 80025d2:	e008      	b.n	80025e6 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <USART_PeripheralControl+0x32>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <USART_SetBaudRate+0xbc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d104      	bne.n	800260c <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff fbb8 	bl	8001d78 <RCC_GetPCLKxValue>
 8002608:	61f8      	str	r0, [r7, #28]
 800260a:	e003      	b.n	8002614 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fbb3 	bl	8001d78 <RCC_GetPCLKxValue>
 8002612:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 8002614:	69f8      	ldr	r0, [r7, #28]
 8002616:	f7fe fafd 	bl	8000c14 <__aeabi_ui2f>
 800261a:	4604      	mov	r4, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe faf7 	bl	8000c14 <__aeabi_ui2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f7fe fbfe 	bl	8000e2c <__aeabi_fdiv>
 8002630:	4603      	mov	r3, r0
 8002632:	491f      	ldr	r1, [pc, #124]	; (80026b0 <USART_SetBaudRate+0xc0>)
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb45 	bl	8000cc4 <__aeabi_fmul>
 800263a:	4603      	mov	r3, r0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fc91 	bl	8000f64 <__aeabi_f2uiz>
 8002642:	4603      	mov	r3, r0
 8002644:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <USART_SetBaudRate+0xc4>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	440b      	add	r3, r1
 8002660:	4619      	mov	r1, r3
 8002662:	0088      	lsls	r0, r1, #2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	440b      	add	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	3332      	adds	r3, #50	; 0x32
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <USART_SetBaudRate+0xc4>)
 800267a:	fb82 1203 	smull	r1, r2, r2, r3
 800267e:	1152      	asrs	r2, r2, #5
 8002680:	17db      	asrs	r3, r3, #31
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	0119      	lsls	r1, r3, #4
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	430b      	orrs	r3, r1
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	3724      	adds	r7, #36	; 0x24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	40013800 	.word	0x40013800
 80026b0:	42c80000 	.word	0x42c80000
 80026b4:	51eb851f 	.word	0x51eb851f

080026b8 <UART_Transmit_DMA>:
	return pUSARTHandle->State;
}


void UART_Transmit_DMA(UART_HandleTypeDef *pUSARTHandle, uint8_t *pData, uint16_t Size)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
	uint32_t *tmp;

	pUSARTHandle->pTxBuffPtr = pData;
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	621a      	str	r2, [r3, #32]
	pUSARTHandle->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	; 0x24
	pUSARTHandle->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Set the UART DMA transfer complete callback */
	pUSARTHandle->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <UART_Transmit_DMA+0x84>)
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
	pUSARTHandle->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <UART_Transmit_DMA+0x88>)
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
	pUSARTHandle->hdmatx->XferErrorCallback = UART_DMAError;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <UART_Transmit_DMA+0x8c>)
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
	pUSARTHandle->hdmatx->XferAbortCallback = NULL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Enable the UART transmit DMA channel */
	tmp = (uint32_t *)&pData;
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	617b      	str	r3, [r7, #20]
	DMA_Start_IT(pUSARTHandle->hdmatx, *(uint32_t *)tmp, (uint32_t)&pUSARTHandle->Instance->DR, Size);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3304      	adds	r3, #4
 800270c:	461a      	mov	r2, r3
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f7fe fcdf 	bl	80010d2 <DMA_Start_IT>

	/* Clear the TC flag in the SR register by writing 0 to it */
	CLEAR_FLAG(pUSARTHandle->Instance->SR, UART_FLAG_TC);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]

	/* Enable the DMA transfer for transmit request by setting the DMAT bit
	   in the UART CR3 register */
	SET_BIT(pUSARTHandle->Instance->CR3, USART_CR3_DMAT);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002732:	615a      	str	r2, [r3, #20]
}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800277f 	.word	0x0800277f
 8002740:	0800279b 	.word	0x0800279b
 8002744:	080027b7 	.word	0x080027b7

08002748 <UART_TxCpltCallback>:


__weak void UART_TxCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(pUSARTHandle);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the UART_TxCpltCallback could be implemented in the user file
	*/
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <UART_TxHalfCpltCallback>:


__weak void UART_TxHalfCpltCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <UART_ErrorCallback>:


__weak void UART_ErrorCallback(UART_HandleTypeDef *pUSARTHandle)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pUSARTHandle);
  /* NOTE: This function should not be modified, when the callback is needed,
           the UART_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <UART_DMATransmitCplt>:
}



static void UART_DMATransmitCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	60fb      	str	r3, [r7, #12]

	UART_TxCpltCallback(pUSARTHandle);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ffdb 	bl	8002748 <UART_TxCpltCallback>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <UART_DMATxHalfCplt>:


static void UART_DMATxHalfCplt(DMA_HandleTypeDef *pDMAHandle)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	60fb      	str	r3, [r7, #12]

	UART_TxHalfCpltCallback(pUSARTHandle);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ffd6 	bl	800275a <UART_TxHalfCpltCallback>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <UART_DMAError>:


static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *pUSARTHandle = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)pDMAHandle)->Parent;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	60fb      	str	r3, [r7, #12]

	UART_ErrorCallback(pUSARTHandle);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff ffd1 	bl	800276c <UART_ErrorCallback>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f001 fb68 	bl	8003eb0 <BLDC_MspInit>

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f6:	3b01      	subs	r3, #1
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d87b      	bhi.n	80028f4 <BLDC_Drive+0x10c>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <BLDC_Drive+0x1c>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	080028d1 	.word	0x080028d1
 8002808:	08002841 	.word	0x08002841
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002889 	.word	0x08002889
 8002814:	080028ad 	.word	0x080028ad
 8002818:	08002865 	.word	0x08002865
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <BLDC_Drive+0x46>
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb0a 	bl	8002e40 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 800282c:	e064      	b.n	80028f8 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002834:	2b01      	cmp	r3, #1
 8002836:	d15f      	bne.n	80028f8 <BLDC_Drive+0x110>
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa59 	bl	8002cf0 <BLDC_Step2>
			break;
 800283e:	e05b      	b.n	80028f8 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <BLDC_Drive+0x6a>
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fac0 	bl	8002dd0 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002850:	e054      	b.n	80028fc <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002858:	2b01      	cmp	r3, #1
 800285a:	d14f      	bne.n	80028fc <BLDC_Drive+0x114>
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fa0f 	bl	8002c80 <BLDC_Step1>
			break;
 8002862:	e04b      	b.n	80028fc <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <BLDC_Drive+0x8e>
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa76 	bl	8002d60 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8002874:	e044      	b.n	8002900 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287c:	2b01      	cmp	r3, #1
 800287e:	d13f      	bne.n	8002900 <BLDC_Drive+0x118>
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb15 	bl	8002eb0 <BLDC_Step6>
			break;
 8002886:	e03b      	b.n	8002900 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <BLDC_Drive+0xb2>
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa2c 	bl	8002cf0 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002898:	e034      	b.n	8002904 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d12f      	bne.n	8002904 <BLDC_Drive+0x11c>
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 facb 	bl	8002e40 <BLDC_Step5>
			break;
 80028aa:	e02b      	b.n	8002904 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <BLDC_Drive+0xd6>
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9e2 	bl	8002c80 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 80028bc:	e024      	b.n	8002908 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d11f      	bne.n	8002908 <BLDC_Drive+0x120>
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa81 	bl	8002dd0 <BLDC_Step4>
			break;
 80028ce:	e01b      	b.n	8002908 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <BLDC_Drive+0xfa>
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fae8 	bl	8002eb0 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 80028e0:	e014      	b.n	800290c <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10f      	bne.n	800290c <BLDC_Drive+0x124>
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa37 	bl	8002d60 <BLDC_Step3>
			break;
 80028f2:	e00b      	b.n	800290c <BLDC_Drive+0x124>
		}

		default :
			break;
 80028f4:	bf00      	nop
 80028f6:	e00a      	b.n	800290e <BLDC_Drive+0x126>
			break;
 80028f8:	bf00      	nop
 80028fa:	e008      	b.n	800290e <BLDC_Drive+0x126>
			break;
 80028fc:	bf00      	nop
 80028fe:	e006      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002900:	bf00      	nop
 8002902:	e004      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <BLDC_Drive+0x126>
			break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <BLDC_Drive+0x126>
			break;
 800290c:	bf00      	nop
	}
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop

08002918 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	b29b      	uxth	r3, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 800293e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fd6e 	bl	8000424 <__aeabi_i2d>
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <BLDC_Get_Speed+0x94>)
 800294e:	f7fd fdd3 	bl	80004f8 <__aeabi_dmul>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	4625      	mov	r5, r4
 8002958:	461c      	mov	r4, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	461a      	mov	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002968:	fb03 f302 	mul.w	r3, r3, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fd59 	bl	8000424 <__aeabi_i2d>
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <BLDC_Get_Speed+0x98>)
 8002978:	f7fd fdbe 	bl	80004f8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4620      	mov	r0, r4
 8002982:	4629      	mov	r1, r5
 8002984:	f7fd fee2 	bl	800074c <__aeabi_ddiv>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	4618      	mov	r0, r3
 800298e:	4621      	mov	r1, r4
 8002990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002994:	f7fd feda 	bl	800074c <__aeabi_ddiv>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	404e0000 	.word	0x404e0000
 80029b0:	40080000 	.word	0x40080000

080029b4 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c2:	3b01      	subs	r3, #1
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	f200 8093 	bhi.w	8002af0 <BLDC_Get_Position+0x13c>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <BLDC_Get_Position+0x1c>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	08002ac5 	.word	0x08002ac5
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	08002a6d 	.word	0x08002a6d
 80029e0:	08002a99 	.word	0x08002a99
 80029e4:	08002a41 	.word	0x08002a41
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d105      	bne.n	80029fe <BLDC_Get_Position+0x4a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 80029fc:	e07a      	b.n	8002af4 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d175      	bne.n	8002af4 <BLDC_Get_Position+0x140>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a12:	e06f      	b.n	8002af4 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d105      	bne.n	8002a2a <BLDC_Get_Position+0x76>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002a28:	e066      	b.n	8002af8 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d161      	bne.n	8002af8 <BLDC_Get_Position+0x144>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a3e:	e05b      	b.n	8002af8 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d105      	bne.n	8002a56 <BLDC_Get_Position+0xa2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002a54:	e052      	b.n	8002afc <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d14d      	bne.n	8002afc <BLDC_Get_Position+0x148>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a6a:	e047      	b.n	8002afc <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d105      	bne.n	8002a82 <BLDC_Get_Position+0xce>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002a80:	e03e      	b.n	8002b00 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d139      	bne.n	8002b00 <BLDC_Get_Position+0x14c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002a96:	e033      	b.n	8002b00 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d105      	bne.n	8002aae <BLDC_Get_Position+0xfa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002aac:	e02a      	b.n	8002b04 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d125      	bne.n	8002b04 <BLDC_Get_Position+0x150>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002ac2:	e01f      	b.n	8002b04 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d105      	bne.n	8002ada <BLDC_Get_Position+0x126>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002ad8:	e016      	b.n	8002b08 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d111      	bne.n	8002b08 <BLDC_Get_Position+0x154>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002aee:	e00b      	b.n	8002b08 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002af0:	bf00      	nop
 8002af2:	e00a      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002af4:	bf00      	nop
 8002af6:	e008      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002af8:	bf00      	nop
 8002afa:	e006      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002afc:	bf00      	nop
 8002afe:	e004      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <BLDC_Get_Position+0x156>
			break;
 8002b08:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fc88 	bl	8000424 <__aeabi_i2d>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002b1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	f7fd fce9 	bl	80004f8 <__aeabi_dmul>
 8002b26:	4603      	mov	r3, r0
 8002b28:	460c      	mov	r4, r1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6858      	ldr	r0, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe ffe9 	bl	8001b30 <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a1a      	ldr	r2, [r3, #32]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0210 	bic.w	r2, r2, #16
 8002b84:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b98:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	f000 fe9c 	bl	80038d8 <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002ba0:	f107 0308 	add.w	r3, r7, #8
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fe25 	bl	80047f8 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f107 0208 	add.w	r2, r7, #8
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fd70 	bl	80016b0 <GPIO_Init>
	Delay_ms(10);
 8002bd0:	200a      	movs	r0, #10
 8002bd2:	f000 fe81 	bl	80038d8 <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6898      	ldr	r0, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fe ffa4 	bl	8001b30 <GPIO_WritePin>
	Delay_ms(10);
 8002be8:	200a      	movs	r0, #10
 8002bea:	f000 fe75 	bl	80038d8 <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6898      	ldr	r0, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7fe ff98 	bl	8001b30 <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	2210      	movs	r2, #16
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fdf5 	bl	80047f8 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fd40 	bl	80016b0 <GPIO_Init>
	Delay_ms(10);
 8002c30:	200a      	movs	r0, #10
 8002c32:	f000 fe51 	bl	80038d8 <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0210 	orr.w	r2, r2, #16
 8002c5c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c70:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002c72:	200a      	movs	r0, #10
 8002c74:	f000 fe30 	bl	80038d8 <Delay_ms>
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4812      	ldr	r0, [pc, #72]	; (8002cec <BLDC_Step1+0x6c>)
 8002ca2:	f7fe ff63 	bl	8001b6c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ccc:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0210 	orr.w	r2, r2, #16
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40010c00 	.word	0x40010c00

08002cf0 <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4812      	ldr	r0, [pc, #72]	; (8002d5c <BLDC_Step2+0x6c>)
 8002d12:	f7fe ff2b 	bl	8001b6c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a1a      	ldr	r2, [r3, #32]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0210 	orr.w	r2, r2, #16
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40010c00 	.word	0x40010c00

08002d60 <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4812      	ldr	r0, [pc, #72]	; (8002dcc <BLDC_Step3+0x6c>)
 8002d82:	f7fe fef3 	bl	8001b6c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0210 	bic.w	r2, r2, #16
 8002d98:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dac:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40010c00 	.word	0x40010c00

08002dd0 <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	b299      	uxth	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4812      	ldr	r0, [pc, #72]	; (8002e3c <BLDC_Step4+0x6c>)
 8002df2:	f7fe febb 	bl	8001b6c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40010c00 	.word	0x40010c00

08002e40 <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4812      	ldr	r0, [pc, #72]	; (8002eac <BLDC_Step5+0x6c>)
 8002e62:	f7fe fe83 	bl	8001b6c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0210 	bic.w	r2, r2, #16
 8002e8c:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40010c00 	.word	0x40010c00

08002eb0 <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4812      	ldr	r0, [pc, #72]	; (8002f1c <BLDC_Step6+0x6c>)
 8002ed2:	f7fe fe4b 	bl	8001b6c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0210 	bic.w	r2, r2, #16
 8002efc:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40010c00 	.word	0x40010c00

08002f20 <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 8002f20:	b5b0      	push	{r4, r5, r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 8002f2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f34:	f7fd f928 	bl	8000188 <__aeabi_dsub>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002f4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f52:	461a      	mov	r2, r3
 8002f54:	4623      	mov	r3, r4
 8002f56:	f7fd facf 	bl	80004f8 <__aeabi_dmul>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002f76:	f7fd fabf 	bl	80004f8 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f86:	f7fd fab7 	bl	80004f8 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd f8fb 	bl	800018c <__adddf3>
 8002f96:	4603      	mov	r3, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8002fb2:	f7fd f8e9 	bl	8000188 <__aeabi_dsub>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	f7fd fa9b 	bl	80004f8 <__aeabi_dmul>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	4621      	mov	r1, r4
 8002fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fce:	f7fd fbbd 	bl	800074c <__aeabi_ddiv>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8002fe8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f7fd f8cc 	bl	800018c <__adddf3>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8003002:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003006:	461a      	mov	r2, r3
 8003008:	4623      	mov	r3, r4
 800300a:	f7fd f8bf 	bl	800018c <__adddf3>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800301e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bdb0      	pop	{r4, r5, r7, pc}

08003030 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	b08b      	sub	sp, #44	; 0x2c
 8003034:	af04      	add	r7, sp, #16
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003048:	e9d4 3400 	ldrd	r3, r4, [r4]
 800304c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003050:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003054:	e9cd 3400 	strd	r3, r4, [sp]
 8003058:	462a      	mov	r2, r5
 800305a:	4633      	mov	r3, r6
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff ff5f 	bl	8002f20 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f7fd fcc8 	bl	8000a04 <__aeabi_dcmpge>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <BLDC_SpeedPID+0x54>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003082:	e00f      	b.n	80030a4 <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	f7fd fca3 	bl	80009dc <__aeabi_dcmplt>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <BLDC_SpeedPID+0x74>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80030aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	4621      	mov	r1, r4
 80030b2:	f7fd fcd1 	bl	8000a58 <__aeabi_d2iz>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bfb8      	it	lt
 80030bc:	425b      	neglt	r3, r3
 80030be:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)		PwmPID_ABS = 95;
 80030c0:	8afb      	ldrh	r3, [r7, #22]
 80030c2:	2b5f      	cmp	r3, #95	; 0x5f
 80030c4:	d901      	bls.n	80030ca <BLDC_SpeedPID+0x9a>
 80030c6:	235f      	movs	r3, #95	; 0x5f
 80030c8:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 80030ca:	8afb      	ldrh	r3, [r7, #22]
 80030cc:	4619      	mov	r1, r3
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f001 fb21 	bl	8004716 <SetPwmDuty>
}
 80030d4:	bf00      	nop
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030dc <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	b08b      	sub	sp, #44	; 0x2c
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	e9c7 2300 	strd	r2, r3, [r7]
	/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
	BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 80030e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f857 	bl	80031a0 <BLDC_CalculateTrajectoryPosition>

	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	e9d3 561e 	ldrd	r5, r6, [r3, #120]	; 0x78
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80030fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003102:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003106:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800310a:	e9cd 3400 	strd	r3, r4, [sp]
 800310e:	462a      	mov	r2, r5
 8003110:	4633      	mov	r3, r6
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff ff04 	bl	8002f20 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f7fd fc6d 	bl	8000a04 <__aeabi_dcmpge>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <BLDC_PositionPID+0x5e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003138:	e00f      	b.n	800315a <BLDC_PositionPID+0x7e>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f7fd fc48 	bl	80009dc <__aeabi_dcmplt>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <BLDC_PositionPID+0x7e>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003160:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003164:	4618      	mov	r0, r3
 8003166:	4621      	mov	r1, r4
 8003168:	f7fd fc76 	bl	8000a58 <__aeabi_d2iz>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfb8      	it	lt
 8003172:	425b      	neglt	r3, r3
 8003174:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > 95)			PwmPID_ABS = 95;
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	2b5f      	cmp	r3, #95	; 0x5f
 800317a:	d902      	bls.n	8003182 <BLDC_PositionPID+0xa6>
 800317c:	235f      	movs	r3, #95	; 0x5f
 800317e:	82fb      	strh	r3, [r7, #22]
 8003180:	e004      	b.n	800318c <BLDC_PositionPID+0xb0>
	else if(PwmPID_ABS < 5)		PwmPID_ABS = 5;
 8003182:	8afb      	ldrh	r3, [r7, #22]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d801      	bhi.n	800318c <BLDC_PositionPID+0xb0>
 8003188:	2305      	movs	r3, #5
 800318a:	82fb      	strh	r3, [r7, #22]


	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 800318c:	8afb      	ldrh	r3, [r7, #22]
 800318e:	4619      	mov	r1, r3
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f001 fac0 	bl	8004716 <SetPwmDuty>
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080031a0 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80031a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a4:	b08d      	sub	sp, #52	; 0x34
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80031ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	f7fc ffe1 	bl	8000188 <__aeabi_dsub>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80031da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031de:	461a      	mov	r2, r3
 80031e0:	4623      	mov	r3, r4
 80031e2:	f7fd f989 	bl	80004f8 <__aeabi_dmul>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	4618      	mov	r0, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	4baa      	ldr	r3, [pc, #680]	; (800349c <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80031f4:	f7fd f980 	bl	80004f8 <__aeabi_dmul>
 80031f8:	4603      	mov	r3, r0
 80031fa:	460c      	mov	r4, r1
 80031fc:	4618      	mov	r0, r3
 80031fe:	4621      	mov	r1, r4
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003206:	e9d4 3400 	ldrd	r3, r4, [r4]
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	f7fd fa9d 	bl	800074c <__aeabi_ddiv>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	e9c7 3406 	strd	r3, r4, [r7, #24]

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003226:	e9d4 3400 	ldrd	r3, r4, [r4]
 800322a:	461a      	mov	r2, r3
 800322c:	4623      	mov	r3, r4
 800322e:	f7fc ffab 	bl	8000188 <__aeabi_dsub>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	e9c7 3404 	strd	r3, r4, [r7, #16]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003246:	f7fd fbdd 	bl	8000a04 <__aeabi_dcmpge>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <BLDC_CalculateTrajectoryPosition+0xb6>
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003254:	e00c      	b.n	8003270 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003262:	f7fd fbbb 	bl	80009dc <__aeabi_dcmplt>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <BLDC_CalculateTrajectoryPosition+0xd0>
 800326c:	2301      	movs	r3, #1
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	4b89      	ldr	r3, [pc, #548]	; (800349c <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8003276:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800327a:	f7fd f93d 	bl	80004f8 <__aeabi_dmul>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	461a      	mov	r2, r3
 8003284:	4623      	mov	r3, r4
 8003286:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800328a:	f7fd fba7 	bl	80009dc <__aeabi_dcmplt>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d029      	beq.n	80032e8 <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80032a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	f7fc ff6e 	bl	8000188 <__aeabi_dsub>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	461a      	mov	r2, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b8:	f7fd fbae 	bl	8000a18 <__aeabi_dcmpgt>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <BLDC_CalculateTrajectoryPosition+0x128>
 80032c2:	2301      	movs	r3, #1
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c6:	e049      	b.n	800335c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 80032c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032d0:	f7fd fba2 	bl	8000a18 <__aeabi_dcmpgt>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <BLDC_CalculateTrajectoryPosition+0x140>
 80032da:	2300      	movs	r3, #0
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032de:	e03d      	b.n	800335c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	e039      	b.n	800335c <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	4b6b      	ldr	r3, [pc, #428]	; (800349c <BLDC_CalculateTrajectoryPosition+0x2fc>)
 80032ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032f2:	f7fd f901 	bl	80004f8 <__aeabi_dmul>
 80032f6:	4603      	mov	r3, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003302:	f7fd fb7f 	bl	8000a04 <__aeabi_dcmpge>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d027      	beq.n	800335c <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003318:	e9d4 3400 	ldrd	r3, r4, [r4]
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fc ff32 	bl	8000188 <__aeabi_dsub>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	4698      	mov	r8, r3
 800332a:	46a1      	mov	r9, r4
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	4b5a      	ldr	r3, [pc, #360]	; (800349c <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8003332:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003336:	f7fd f8df 	bl	80004f8 <__aeabi_dmul>
 800333a:	4603      	mov	r3, r0
 800333c:	460c      	mov	r4, r1
 800333e:	461a      	mov	r2, r3
 8003340:	4623      	mov	r3, r4
 8003342:	4640      	mov	r0, r8
 8003344:	4649      	mov	r1, r9
 8003346:	f7fd fb49 	bl	80009dc <__aeabi_dcmplt>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <BLDC_CalculateTrajectoryPosition+0x1b6>
 8003350:	2301      	movs	r3, #1
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
 8003354:	e002      	b.n	800335c <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	switch (accelDir)
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <BLDC_CalculateTrajectoryPosition+0x1e8>
 8003362:	2b01      	cmp	r3, #1
 8003364:	d003      	beq.n	800336e <BLDC_CalculateTrajectoryPosition+0x1ce>
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d015      	beq.n	8003398 <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 800336c:	e028      	b.n	80033c0 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003378:	f7fd f8be 	bl	80004f8 <__aeabi_dmul>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003386:	e01b      	b.n	80033c0 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003396:	e013      	b.n	80033c0 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800339e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033a2:	461d      	mov	r5, r3
 80033a4:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80033a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ac:	4628      	mov	r0, r5
 80033ae:	4631      	mov	r1, r6
 80033b0:	f7fd f8a2 	bl	80004f8 <__aeabi_dmul>
 80033b4:	4603      	mov	r3, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 80033be:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80033cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4623      	mov	r3, r4
 80033d4:	f7fc feda 	bl	800018c <__adddf3>
 80033d8:	4603      	mov	r3, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <BLDC_CalculateTrajectoryPosition+0x24e>
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d059      	beq.n	80034a0 <BLDC_CalculateTrajectoryPosition+0x300>

			break;
		}

		default :
			break;
 80033ec:	e0ae      	b.n	800354c <BLDC_CalculateTrajectoryPosition+0x3ac>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80033fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033fe:	461a      	mov	r2, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f7fd faff 	bl	8000a04 <__aeabi_dcmpge>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	f04f 0400 	mov.w	r4, #0
 8003416:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800342e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 8003438:	e088      	b.n	800354c <BLDC_CalculateTrajectoryPosition+0x3ac>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <BLDC_CalculateTrajectoryPosition+0x2fc>)
 8003446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800344a:	f7fd f855 	bl	80004f8 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4690      	mov	r8, r2
 8003454:	4699      	mov	r9, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	f7fc fe94 	bl	800018c <__adddf3>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003472:	f7fc fe89 	bl	8000188 <__aeabi_dsub>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f7fd f83b 	bl	80004f8 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fc fe7f 	bl	800018c <__adddf3>
 800348e:	4603      	mov	r3, r0
 8003490:	460c      	mov	r4, r1
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003498:	e058      	b.n	800354c <BLDC_CalculateTrajectoryPosition+0x3ac>
 800349a:	bf00      	nop
 800349c:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80034ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	f7fd fa9c 	bl	80009f0 <__aeabi_dcmple>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <BLDC_CalculateTrajectoryPosition+0x34c>
				pBLDCHandle->TrjCurSpeed = 0;
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	f04f 0400 	mov.w	r4, #0
 80034c8:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	f04f 0400 	mov.w	r4, #0
 80034d6:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80034e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80034ea:	e02e      	b.n	800354a <BLDC_CalculateTrajectoryPosition+0x3aa>
				pBLDCHandle->TrjCurPosition += (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <BLDC_CalculateTrajectoryPosition+0x3b8>)
 80034f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034fc:	f7fc fffc 	bl	80004f8 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4690      	mov	r8, r2
 8003506:	4699      	mov	r9, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	f7fc fe3b 	bl	800018c <__adddf3>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003524:	f7fc fe30 	bl	8000188 <__aeabi_dsub>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4640      	mov	r0, r8
 800352e:	4649      	mov	r1, r9
 8003530:	f7fc ffe2 	bl	80004f8 <__aeabi_dmul>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4620      	mov	r0, r4
 800353a:	4629      	mov	r1, r5
 800353c:	f7fc fe26 	bl	800018c <__adddf3>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800354a:	bf00      	nop
	}
}
 800354c:	bf00      	nop
 800354e:	3734      	adds	r7, #52	; 0x34
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003556:	bf00      	nop
 8003558:	3fe00000 	.word	0x3fe00000

0800355c <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
 8003566:	460b      	mov	r3, r1
 8003568:	71bb      	strb	r3, [r7, #6]
 800356a:	4613      	mov	r3, r2
 800356c:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800356e:	797b      	ldrb	r3, [r7, #5]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d11d      	bne.n	80035b0 <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b1f      	cmp	r3, #31
 8003578:	d80a      	bhi.n	8003590 <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <NVIC_IRQConfig+0xcc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	79fa      	ldrb	r2, [r7, #7]
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	4611      	mov	r1, r2
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <NVIC_IRQConfig+0xcc>)
 800358a:	430b      	orrs	r3, r1
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e033      	b.n	80035f8 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	2b3b      	cmp	r3, #59	; 0x3b
 8003594:	d830      	bhi.n	80035f8 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <NVIC_IRQConfig+0xcc>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	79fa      	ldrb	r2, [r7, #7]
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4611      	mov	r1, r2
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6053      	str	r3, [r2, #4]
 80035ae:	e023      	b.n	80035f8 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 80035b0:	797b      	ldrb	r3, [r7, #5]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d120      	bne.n	80035f8 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b1f      	cmp	r3, #31
 80035ba:	d80c      	bhi.n	80035d6 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c2:	79fa      	ldrb	r2, [r7, #7]
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035d4:	e010      	b.n	80035f8 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b3b      	cmp	r3, #59	; 0x3b
 80035da:	d80d      	bhi.n	80035f8 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4611      	mov	r1, r2
 80035f0:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035f2:	430b      	orrs	r3, r1
 80035f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 80035f8:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <NVIC_IRQConfig+0xcc>)
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	4413      	add	r3, r2
 80035fe:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8003602:	b2db      	uxtb	r3, r3
 8003604:	b25a      	sxtb	r2, r3
 8003606:	79bb      	ldrb	r3, [r7, #6]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	b25b      	sxtb	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b259      	sxtb	r1, r3
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <NVIC_IRQConfig+0xcc>)
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	b2c9      	uxtb	r1, r1
 8003616:	4413      	add	r3, r2
 8003618:	460a      	mov	r2, r1
 800361a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100

0800362c <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	; 0x48
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 800363c:	f107 031c 	add.w	r3, r7, #28
 8003640:	2228      	movs	r2, #40	; 0x28
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f001 f8d7 	bl	80047f8 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	2214      	movs	r2, #20
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f8d0 	bl	80047f8 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 800365c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003660:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 800366c:	2302      	movs	r3, #2
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	3b10      	subs	r3, #16
 8003674:	2b38      	cmp	r3, #56	; 0x38
 8003676:	f200 8101 	bhi.w	800387c <SystemClock_Config+0x250>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <SystemClock_Config+0x54>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003765 	.word	0x08003765
 8003684:	0800387d 	.word	0x0800387d
 8003688:	0800387d 	.word	0x0800387d
 800368c:	0800387d 	.word	0x0800387d
 8003690:	0800387d 	.word	0x0800387d
 8003694:	0800387d 	.word	0x0800387d
 8003698:	0800387d 	.word	0x0800387d
 800369c:	0800387d 	.word	0x0800387d
 80036a0:	08003785 	.word	0x08003785
 80036a4:	0800387d 	.word	0x0800387d
 80036a8:	0800387d 	.word	0x0800387d
 80036ac:	0800387d 	.word	0x0800387d
 80036b0:	0800387d 	.word	0x0800387d
 80036b4:	0800387d 	.word	0x0800387d
 80036b8:	0800387d 	.word	0x0800387d
 80036bc:	0800387d 	.word	0x0800387d
 80036c0:	080037a7 	.word	0x080037a7
 80036c4:	0800387d 	.word	0x0800387d
 80036c8:	0800387d 	.word	0x0800387d
 80036cc:	0800387d 	.word	0x0800387d
 80036d0:	0800387d 	.word	0x0800387d
 80036d4:	0800387d 	.word	0x0800387d
 80036d8:	0800387d 	.word	0x0800387d
 80036dc:	0800387d 	.word	0x0800387d
 80036e0:	080037c9 	.word	0x080037c9
 80036e4:	0800387d 	.word	0x0800387d
 80036e8:	0800387d 	.word	0x0800387d
 80036ec:	0800387d 	.word	0x0800387d
 80036f0:	0800387d 	.word	0x0800387d
 80036f4:	0800387d 	.word	0x0800387d
 80036f8:	0800387d 	.word	0x0800387d
 80036fc:	0800387d 	.word	0x0800387d
 8003700:	080037ed 	.word	0x080037ed
 8003704:	0800387d 	.word	0x0800387d
 8003708:	0800387d 	.word	0x0800387d
 800370c:	0800387d 	.word	0x0800387d
 8003710:	0800387d 	.word	0x0800387d
 8003714:	0800387d 	.word	0x0800387d
 8003718:	0800387d 	.word	0x0800387d
 800371c:	0800387d 	.word	0x0800387d
 8003720:	08003811 	.word	0x08003811
 8003724:	0800387d 	.word	0x0800387d
 8003728:	0800387d 	.word	0x0800387d
 800372c:	0800387d 	.word	0x0800387d
 8003730:	0800387d 	.word	0x0800387d
 8003734:	0800387d 	.word	0x0800387d
 8003738:	0800387d 	.word	0x0800387d
 800373c:	0800387d 	.word	0x0800387d
 8003740:	08003835 	.word	0x08003835
 8003744:	0800387d 	.word	0x0800387d
 8003748:	0800387d 	.word	0x0800387d
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	0800387d 	.word	0x0800387d
 8003758:	0800387d 	.word	0x0800387d
 800375c:	0800387d 	.word	0x0800387d
 8003760:	08003859 	.word	0x08003859
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8003764:	2300      	movs	r3, #0
 8003766:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003768:	230f      	movs	r3, #15
 800376a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376c:	2302      	movs	r3, #2
 800376e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003782:	e07c      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8003784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003788:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800378a:	230f      	movs	r3, #15
 800378c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378e:	2302      	movs	r3, #2
 8003790:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80037a4:	e06b      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 80037a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ac:	230f      	movs	r3, #15
 80037ae:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037b0:	2302      	movs	r3, #2
 80037b2:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80037c6:	e05a      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 80037c8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ce:	230f      	movs	r3, #15
 80037d0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d2:	2302      	movs	r3, #2
 80037d4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80037ea:	e048      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 80037ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037f0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037f2:	230f      	movs	r3, #15
 80037f4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f6:	2302      	movs	r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 80037fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003802:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800380e:	e036      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003810:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003814:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003816:	230f      	movs	r3, #15
 8003818:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800381a:	2302      	movs	r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003826:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 800382c:	2302      	movs	r3, #2
 800382e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003832:	e024      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003834:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003838:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383a:	230f      	movs	r3, #15
 800383c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800383e:	2302      	movs	r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8003846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003856:	e012      	b.n	800387e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8003858:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800385c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800385e:	230f      	movs	r3, #15
 8003860:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003862:	2302      	movs	r3, #2
 8003864:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 800386a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003874:	2302      	movs	r3, #2
 8003876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800387a:	e000      	b.n	800387e <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 800387c:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe f9a8 	bl	8001bd8 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8003888:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800388c:	f107 0308 	add.w	r3, r7, #8
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe f9f0 	bl	8001c78 <RCC_ClockConfig>
}
 8003898:	bf00      	nop
 800389a:	3748      	adds	r7, #72	; 0x48
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <Delay_us>:


void Delay_us(uint32_t time_us)
{
 80038a0:	b4b0      	push	{r4, r5, r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 80038a8:	2400      	movs	r4, #0
 80038aa:	e006      	b.n	80038ba <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 80038ac:	2500      	movs	r5, #0
 80038ae:	e001      	b.n	80038b4 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 80038b0:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 80038b2:	3501      	adds	r5, #1
 80038b4:	2d4c      	cmp	r5, #76	; 0x4c
 80038b6:	d9fb      	bls.n	80038b0 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 80038b8:	3401      	adds	r4, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <Delay_us+0x34>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	08db      	lsrs	r3, r3, #3
 80038c4:	429c      	cmp	r4, r3
 80038c6:	d3f1      	bcc.n	80038ac <Delay_us+0xc>
		}
	}
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bcb0      	pop	{r4, r5, r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	cccccccd 	.word	0xcccccccd

080038d8 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ffd8 	bl	80038a0 <Delay_us>
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <TIM6_IRQHandler+0x10>)
 80038fe:	f7fe fd49 	bl	8002394 <TIM_IRQHandling>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200003d8 	.word	0x200003d8

0800390c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <EXTI9_5_IRQHandler+0x14>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe f943 	bl	8001ba0 <EXTI_IRQHandling>
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000240 	.word	0x20000240

08003924 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
//	EXTI->PR |= GPIO_PIN_0;
//
//	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <DMA1_Channel7_IRQHandler>:


void DMA1_Channel7_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART2Handle.hdmatx);
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <DMA1_Channel7_IRQHandler+0x14>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fbfb 	bl	8001134 <DMA_IRQ_Handling>
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000358 	.word	0x20000358

08003948 <main>:

#include "main.h"


int main(void)
{
 8003948:	b598      	push	{r3, r4, r7, lr}
 800394a:	af00      	add	r7, sp, #0
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 800394c:	2048      	movs	r0, #72	; 0x48
 800394e:	f7ff fe6d 	bl	800362c <SystemClock_Config>

	Delay_ms(3000);
 8003952:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003956:	f7ff ffbf 	bl	80038d8 <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 800395a:	f000 fe73 	bl	8004644 <MemsetHandleStructure>

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 800395e:	f000 fd21 	bl	80043a4 <DMA1_Init>
	Button_Init();				// Initialize peripherals related to Button
 8003962:	f000 fbe3 	bl	800412c <Button_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003966:	f000 fbfb 	bl	8004160 <BLDC1_Init>
	UART2_Init();				// Initialize UART2 to transmit data to PC
 800396a:	f000 fcbf 	bl	80042ec <UART2_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 800396e:	f000 fce7 	bl	8004340 <TIM6_Init>
	Delay_ms(10);
 8003972:	200a      	movs	r0, #10
 8003974:	f7ff ffb0 	bl	80038d8 <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003978:	48b3      	ldr	r0, [pc, #716]	; (8003c48 <main+0x300>)
 800397a:	f000 fe8b 	bl	8004694 <StartTimerPwm>
	Delay_ms(10);
 800397e:	200a      	movs	r0, #10
 8003980:	f7ff ffaa 	bl	80038d8 <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003984:	48b0      	ldr	r0, [pc, #704]	; (8003c48 <main+0x300>)
 8003986:	f000 fe9f 	bl	80046c8 <DisableTimerPwmChannel>
	Delay_ms(10);
 800398a:	200a      	movs	r0, #10
 800398c:	f7ff ffa4 	bl	80038d8 <Delay_ms>
	 */


	while(1)
	{
		if(ButtonFlag == FLAG_SET)
 8003990:	4bae      	ldr	r3, [pc, #696]	; (8003c4c <main+0x304>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d1fb      	bne.n	8003990 <main+0x48>
		{
			/* Button is pressed */

			Delay_ms(2000);		// Wait a while to avoid Button chattering
 8003998:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800399c:	f7ff ff9c 	bl	80038d8 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 80039a0:	4ba9      	ldr	r3, [pc, #676]	; (8003c48 <main+0x300>)
 80039a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 80d5 	bne.w	8003b56 <main+0x20e>
			{
				/* Previous Motor state was MOTOR_STATE_STOP */

				// 1. To Make 'BLDC_Get_Position' function Operate perfectly, Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 80039ac:	4ba8      	ldr	r3, [pc, #672]	; (8003c50 <main+0x308>)
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4ba5      	ldr	r3, [pc, #660]	; (8003c48 <main+0x300>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4ba3      	ldr	r3, [pc, #652]	; (8003c48 <main+0x300>)
 80039bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80039c0:	4ba1      	ldr	r3, [pc, #644]	; (8003c48 <main+0x300>)
 80039c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c6:	3b01      	subs	r3, #1
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	f200 8086 	bhi.w	8003ada <main+0x192>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <main+0x8c>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003ab5 	.word	0x08003ab5
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	080039ed 	.word	0x080039ed
 80039e0:	08003a65 	.word	0x08003a65
 80039e4:	08003a8d 	.word	0x08003a8d
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	4b96      	ldr	r3, [pc, #600]	; (8003c48 <main+0x300>)
 80039ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <main+0xb8>
 80039f6:	4b94      	ldr	r3, [pc, #592]	; (8003c48 <main+0x300>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80039fe:	e06c      	b.n	8003ada <main+0x192>
 8003a00:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <main+0x300>)
 8003a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d167      	bne.n	8003ada <main+0x192>
 8003a0a:	4b8f      	ldr	r3, [pc, #572]	; (8003c48 <main+0x300>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a12:	e062      	b.n	8003ada <main+0x192>
 8003a14:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <main+0x300>)
 8003a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <main+0xe0>
 8003a1e:	4b8a      	ldr	r3, [pc, #552]	; (8003c48 <main+0x300>)
 8003a20:	2206      	movs	r2, #6
 8003a22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a26:	e058      	b.n	8003ada <main+0x192>
 8003a28:	4b87      	ldr	r3, [pc, #540]	; (8003c48 <main+0x300>)
 8003a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d153      	bne.n	8003ada <main+0x192>
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <main+0x300>)
 8003a34:	2203      	movs	r2, #3
 8003a36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a3a:	e04e      	b.n	8003ada <main+0x192>
 8003a3c:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <main+0x300>)
 8003a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d104      	bne.n	8003a50 <main+0x108>
 8003a46:	4b80      	ldr	r3, [pc, #512]	; (8003c48 <main+0x300>)
 8003a48:	2204      	movs	r2, #4
 8003a4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a4e:	e044      	b.n	8003ada <main+0x192>
 8003a50:	4b7d      	ldr	r3, [pc, #500]	; (8003c48 <main+0x300>)
 8003a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d13f      	bne.n	8003ada <main+0x192>
 8003a5a:	4b7b      	ldr	r3, [pc, #492]	; (8003c48 <main+0x300>)
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a62:	e03a      	b.n	8003ada <main+0x192>
 8003a64:	4b78      	ldr	r3, [pc, #480]	; (8003c48 <main+0x300>)
 8003a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <main+0x130>
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <main+0x300>)
 8003a70:	2205      	movs	r2, #5
 8003a72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a76:	e030      	b.n	8003ada <main+0x192>
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <main+0x300>)
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d12b      	bne.n	8003ada <main+0x192>
 8003a82:	4b71      	ldr	r3, [pc, #452]	; (8003c48 <main+0x300>)
 8003a84:	2206      	movs	r2, #6
 8003a86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a8a:	e026      	b.n	8003ada <main+0x192>
 8003a8c:	4b6e      	ldr	r3, [pc, #440]	; (8003c48 <main+0x300>)
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <main+0x158>
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <main+0x300>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003a9e:	e01c      	b.n	8003ada <main+0x192>
 8003aa0:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <main+0x300>)
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d117      	bne.n	8003ada <main+0x192>
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <main+0x300>)
 8003aac:	2204      	movs	r2, #4
 8003aae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003ab2:	e012      	b.n	8003ada <main+0x192>
 8003ab4:	4b64      	ldr	r3, [pc, #400]	; (8003c48 <main+0x300>)
 8003ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <main+0x180>
 8003abe:	4b62      	ldr	r3, [pc, #392]	; (8003c48 <main+0x300>)
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003ac6:	e008      	b.n	8003ada <main+0x192>
 8003ac8:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <main+0x300>)
 8003aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d103      	bne.n	8003ada <main+0x192>
 8003ad2:	4b5d      	ldr	r3, [pc, #372]	; (8003c48 <main+0x300>)
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003ada:	bf00      	nop

				// 2. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8003adc:	2201      	movs	r2, #1
 8003ade:	2108      	movs	r1, #8
 8003ae0:	2017      	movs	r0, #23
 8003ae2:	f7ff fd3b 	bl	800355c <NVIC_IRQConfig>

				// 3. Charge Bootstrap Capacitor for 10ms before Drive BLDC motor
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8003ae6:	4858      	ldr	r0, [pc, #352]	; (8003c48 <main+0x300>)
 8003ae8:	f7ff f82c 	bl	8002b44 <BLDC_BootstrapCap_Charge>

				// 4. Set Reference Position, PID gain, etc
				BLDC1Handle.RefPosition = 360;
 8003aec:	4a56      	ldr	r2, [pc, #344]	; (8003c48 <main+0x300>)
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	4c58      	ldr	r4, [pc, #352]	; (8003c54 <main+0x30c>)
 8003af4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
				BLDC1Handle.TrjRefMaxSpeed = 32000;
 8003af8:	4a53      	ldr	r2, [pc, #332]	; (8003c48 <main+0x300>)
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	4c56      	ldr	r4, [pc, #344]	; (8003c58 <main+0x310>)
 8003b00:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
				BLDC1Handle.TrjRefAcceleration = 50;
 8003b04:	4a50      	ldr	r2, [pc, #320]	; (8003c48 <main+0x300>)
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	4c54      	ldr	r4, [pc, #336]	; (8003c5c <main+0x314>)
 8003b0c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

				BLDC_PID_GAIN_SET(&BLDC1Handle, 0.2, 0, 0.0001);	// 180 deg well -> P : 0.18, I : 0, D : 0
 8003b10:	4a4d      	ldr	r2, [pc, #308]	; (8003c48 <main+0x300>)
 8003b12:	a449      	add	r4, pc, #292	; (adr r4, 8003c38 <main+0x2f0>)
 8003b14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b18:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8003b1c:	4a4a      	ldr	r2, [pc, #296]	; (8003c48 <main+0x300>)
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	f04f 0400 	mov.w	r4, #0
 8003b26:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8003b2a:	4a47      	ldr	r2, [pc, #284]	; (8003c48 <main+0x300>)
 8003b2c:	a444      	add	r4, pc, #272	; (adr r4, 8003c40 <main+0x2f8>)
 8003b2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b32:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION;
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <main+0x300>)
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 6. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. Then, Motor rotates with given PWM duty cycle
				while(startFlag != FLAG_SET);
 8003b3e:	bf00      	nop
 8003b40:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <main+0x318>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d1fb      	bne.n	8003b40 <main+0x1f8>
				EXTI->SWIER |= (0x1 << 6);
 8003b48:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <main+0x31c>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	4a45      	ldr	r2, [pc, #276]	; (8003c64 <main+0x31c>)
 8003b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b52:	6113      	str	r3, [r2, #16]
 8003b54:	e06c      	b.n	8003c30 <main+0x2e8>
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <main+0x300>)
 8003b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d167      	bne.n	8003c30 <main+0x2e8>
			{
				/* Previous Motor state was MOTOR_STATE_POSITION */

				Delay_ms(500);
 8003b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b64:	f7ff feb8 	bl	80038d8 <Delay_ms>

				// 3. Change MotorState from MOTOR_STATE_POSITION to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8003b68:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <main+0x300>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 4. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8003b70:	2200      	movs	r2, #0
 8003b72:	2108      	movs	r1, #8
 8003b74:	2017      	movs	r0, #23
 8003b76:	f7ff fcf1 	bl	800355c <NVIC_IRQConfig>

				// 5. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8003b7a:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <main+0x300>)
 8003b7c:	6858      	ldr	r0, [r3, #4]
 8003b7e:	4b32      	ldr	r3, [pc, #200]	; (8003c48 <main+0x300>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	4619      	mov	r1, r3
 8003b88:	f7fd ffd2 	bl	8001b30 <GPIO_WritePin>

				// 6. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8003b8c:	482e      	ldr	r0, [pc, #184]	; (8003c48 <main+0x300>)
 8003b8e:	f000 fd9b 	bl	80046c8 <DisableTimerPwmChannel>

				startFlag = FLAG_RESET;
 8003b92:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <main+0x318>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]

				BLDC1Handle.HallCount = 0;
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <main+0x300>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58
				BLDC1Handle.OldHallCount = 0;
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <main+0x300>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c
				BLDC1Handle.CurPosition = 0;
 8003ba4:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <main+0x300>)
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	f04f 0400 	mov.w	r4, #0
 8003bae:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
				BLDC1Handle.Kp = 0;
 8003bb2:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <main+0x300>)
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	f04f 0400 	mov.w	r4, #0
 8003bbc:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
				BLDC1Handle.Ki = 0;
 8003bc0:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <main+0x300>)
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	f04f 0400 	mov.w	r4, #0
 8003bca:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
				BLDC1Handle.Kd = 0;
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <main+0x300>)
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	f04f 0400 	mov.w	r4, #0
 8003bd8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
				BLDC1Handle.Error = 0;
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <main+0x300>)
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f04f 0400 	mov.w	r4, #0
 8003be6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
				BLDC1Handle.PrvError = 0;
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <main+0x300>)
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
				BLDC1Handle.P_term = 0;
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <main+0x300>)
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
				BLDC1Handle.I_term = 0;
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <main+0x300>)
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
				BLDC1Handle.D_term = 0;
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <main+0x300>)
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
				BLDC1Handle.PwmPID = 0;
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <main+0x300>)
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
			}

			ButtonFlag = FLAG_RESET;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <main+0x304>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
		if(ButtonFlag == FLAG_SET)
 8003c36:	e6ab      	b.n	8003990 <main+0x48>
 8003c38:	9999999a 	.word	0x9999999a
 8003c3c:	3fc99999 	.word	0x3fc99999
 8003c40:	eb1c432d 	.word	0xeb1c432d
 8003c44:	3f1a36e2 	.word	0x3f1a36e2
 8003c48:	20000240 	.word	0x20000240
 8003c4c:	200001f0 	.word	0x200001f0
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40768000 	.word	0x40768000
 8003c58:	40df4000 	.word	0x40df4000
 8003c5c:	40490000 	.word	0x40490000
 8003c60:	2000022e 	.word	0x2000022e
 8003c64:	40010400 	.word	0x40010400

08003c68 <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	2214      	movs	r2, #20
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fdbd 	bl	80047f8 <memset>

	if(pUARTHandle->Instance == USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3e      	ldr	r2, [pc, #248]	; (8003d7c <USART_MspInit+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d120      	bne.n	8003cca <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <USART_MspInit+0x118>)
 8003c8a:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c94:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fd fd01 	bl	80016b0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb6:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fd fcf4 	bl	80016b0 <GPIO_Init>
 8003cc8:	e04d      	b.n	8003d66 <USART_MspInit+0xfe>
	}
	else if(pUARTHandle->Instance == USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <USART_MspInit+0x11c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d148      	bne.n	8003d66 <USART_MspInit+0xfe>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <USART_MspInit+0x118>)
 8003cd6:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fd fcdc 	bl	80016b0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	3304      	adds	r3, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7fd fcd0 	bl	80016b0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <USART_MspInit+0x120>)
 8003d16:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2200      	movs	r2, #0
 8003d46:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f925 	bl	8000fa4 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <USART_MspInit+0x124>)
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <USART_MspInit+0x124>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fb97 	bl	80024a0 <USART_PeripheralClockControl>
}
 8003d72:	bf00      	nop
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40010800 	.word	0x40010800
 8003d84:	40004400 	.word	0x40004400
 8003d88:	40020080 	.word	0x40020080
 8003d8c:	20000394 	.word	0x20000394

08003d90 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <TIM_Base_MspInit+0x2c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003da0:	2101      	movs	r1, #1
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe f9dc 	bl	8002160 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 8003da8:	2201      	movs	r2, #1
 8003daa:	210f      	movs	r1, #15
 8003dac:	2036      	movs	r0, #54	; 0x36
 8003dae:	f7ff fbd5 	bl	800355c <NVIC_IRQConfig>
	}
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40001000 	.word	0x40001000

08003dc0 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <TIM_PWM_MspInit+0xd8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d119      	bne.n	8003e06 <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	2214      	movs	r2, #20
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fd0c 	bl	80047f8 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003de0:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <TIM_PWM_MspInit+0xdc>)
 8003de2:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003de4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003de8:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f107 030c 	add.w	r3, r7, #12
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fd fc55 	bl	80016b0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_PWM_MspInit+0xe0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d119      	bne.n	8003e44 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	2214      	movs	r2, #20
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fced 	bl	80047f8 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <TIM_PWM_MspInit+0xe4>)
 8003e20:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003e22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003e26:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e30:	2301      	movs	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fd fc36 	bl	80016b0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <TIM_PWM_MspInit+0xe8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d119      	bne.n	8003e82 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	2214      	movs	r2, #20
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fcce 	bl	80047f8 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <TIM_PWM_MspInit+0xec>)
 8003e5e:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003e60:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003e64:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fd fc17 	bl	80016b0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe f969 	bl	8002160 <TIM_PeripheralClockControl>
}
 8003e8e:	bf00      	nop
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40010800 	.word	0x40010800
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40010c00 	.word	0x40010c00

08003eb0 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08e      	sub	sp, #56	; 0x38
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fc99 	bl	80047f8 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	f040 80f1 	bne.w	80040b2 <BLDC_MspInit+0x202>
	{
	/************************************************************************
	 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
	 ***********************************************************************/

		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 8003ed0:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <BLDC_MspInit+0x20c>)
 8003ed2:	4a7b      	ldr	r2, [pc, #492]	; (80040c0 <BLDC_MspInit+0x210>)
 8003ed4:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 8003ed6:	4b79      	ldr	r3, [pc, #484]	; (80040bc <BLDC_MspInit+0x20c>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 8003edc:	4b77      	ldr	r3, [pc, #476]	; (80040bc <BLDC_MspInit+0x20c>)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 8003ee2:	4b76      	ldr	r3, [pc, #472]	; (80040bc <BLDC_MspInit+0x20c>)
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 8003ee8:	4b74      	ldr	r3, [pc, #464]	; (80040bc <BLDC_MspInit+0x20c>)
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	4b73      	ldr	r3, [pc, #460]	; (80040bc <BLDC_MspInit+0x20c>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	4b72      	ldr	r3, [pc, #456]	; (80040bc <BLDC_MspInit+0x20c>)
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	4a70      	ldr	r2, [pc, #448]	; (80040bc <BLDC_MspInit+0x20c>)
 8003efa:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <BLDC_MspInit+0x20c>)
 8003efe:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <BLDC_MspInit+0x210>)
 8003f00:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 8003f02:	4b6e      	ldr	r3, [pc, #440]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f04:	2240      	movs	r2, #64	; 0x40
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 8003f08:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 8003f0e:	4b6b      	ldr	r3, [pc, #428]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 8003f16:	4b69      	ldr	r3, [pc, #420]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1a:	4b68      	ldr	r3, [pc, #416]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	4b66      	ldr	r3, [pc, #408]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4a65      	ldr	r2, [pc, #404]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f28:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOC;
 8003f2a:	4b64      	ldr	r3, [pc, #400]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f2c:	4a65      	ldr	r2, [pc, #404]	; (80040c4 <BLDC_MspInit+0x214>)
 8003f2e:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_6;
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f32:	2240      	movs	r2, #64	; 0x40
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_7;
 8003f36:	4b61      	ldr	r3, [pc, #388]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f38:	2280      	movs	r2, #128	; 0x80
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_8;
 8003f3c:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8003f44:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f48:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	4b5b      	ldr	r3, [pc, #364]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	4313      	orrs	r3, r2
 8003f54:	4a59      	ldr	r2, [pc, #356]	; (80040bc <BLDC_MspInit+0x20c>)
 8003f56:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003f66:	2301      	movs	r3, #1
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fd fb9b 	bl	80016b0 <GPIO_Init>
		Delay_ms(10);
 8003f7a:	200a      	movs	r0, #10
 8003f7c:	f7ff fcac 	bl	80038d8 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6858      	ldr	r0, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fd fdcf 	bl	8001b30 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fb7e 	bl	80016b0 <GPIO_Init>
		Delay_ms(10);
 8003fb4:	200a      	movs	r0, #10
 8003fb6:	f7ff fc8f 	bl	80038d8 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6898      	ldr	r0, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7fd fdb2 	bl	8001b30 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f7ff fc83 	bl	80038d8 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6898      	ldr	r0, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7fd fda6 	bl	8001b30 <GPIO_WritePin>
		Delay_ms(10);
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7ff fc77 	bl	80038d8 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6898      	ldr	r0, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f7fd fd9a 	bl	8001b30 <GPIO_WritePin>
	/********************************************************************
	 *			Low level init EXTI for Hall Sensor interrupt			*
	 ********************************************************************/

		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8003ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004000:	2210      	movs	r2, #16
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbf7 	bl	80047f8 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004010:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <BLDC_MspInit+0x218>)
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fb44 	bl	80016b0 <GPIO_Init>

	/********************************************************************
	 *				Low level init TIM to generate PWM signals			*
	 ********************************************************************/

		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a28      	ldr	r2, [pc, #160]	; (80040cc <BLDC_MspInit+0x21c>)
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <BLDC_MspInit+0x220>)
 8004034:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (36-1);		//   72MHz / 36 = 2MHz
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2223      	movs	r2, #35	; 0x23
 800404c:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (100-1);		//   2MHz / 100 = 20kHz
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2263      	movs	r2, #99	; 0x63
 8004054:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd ff4f 	bl	8001efe <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	221c      	movs	r2, #28
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fbc5 	bl	80047f8 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 800406e:	2360      	movs	r3, #96	; 0x60
 8004070:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f107 010c 	add.w	r1, r7, #12
 8004082:	2200      	movs	r2, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd ff87 	bl	8001f98 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f107 010c 	add.w	r1, r7, #12
 8004096:	2204      	movs	r2, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd ff7d 	bl	8001f98 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f107 010c 	add.w	r1, r7, #12
 80040aa:	2208      	movs	r2, #8
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fd ff73 	bl	8001f98 <TIM_PWM_ConfigChannel>
	}
}
 80040b2:	bf00      	nop
 80040b4:	3738      	adds	r7, #56	; 0x38
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000240 	.word	0x20000240
 80040c0:	40010c00 	.word	0x40010c00
 80040c4:	40011000 	.word	0x40011000
 80040c8:	10310000 	.word	0x10310000
 80040cc:	20000338 	.word	0x20000338
 80040d0:	40000800 	.word	0x40000800

080040d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <_sbrk+0x50>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <_sbrk+0x16>
		heap_end = &end;
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <_sbrk+0x50>)
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <_sbrk+0x54>)
 80040e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <_sbrk+0x50>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <_sbrk+0x50>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	466a      	mov	r2, sp
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d907      	bls.n	800410e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80040fe:	f000 fb51 	bl	80047a4 <__errno>
 8004102:	4602      	mov	r2, r0
 8004104:	230c      	movs	r3, #12
 8004106:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
 800410c:	e006      	b.n	800411c <_sbrk+0x48>
	}

	heap_end += incr;
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <_sbrk+0x50>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <_sbrk+0x50>)
 8004118:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	200001ec 	.word	0x200001ec
 8004128:	20000400 	.word	0x20000400

0800412c <Button_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Button_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004132:	463b      	mov	r3, r7
 8004134:	2210      	movs	r2, #16
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fb5d 	bl	80047f8 <memset>

	// 1. Initialize GPIO for START/STOP Button
	GPIOInit.Pin = GPIO_PIN_7;
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_INPUT;
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8004146:	2301      	movs	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800414a:	463b      	mov	r3, r7
 800414c:	4619      	mov	r1, r3
 800414e:	4803      	ldr	r0, [pc, #12]	; (800415c <Button_Init+0x30>)
 8004150:	f7fd faae 	bl	80016b0 <GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010800 	.word	0x40010800

08004160 <BLDC1_Init>:


void BLDC1_Init(void)
{
 8004160:	b598      	push	{r3, r4, r7, lr}
 8004162:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <BLDC1_Init+0x180>)
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <BLDC1_Init+0x180>)
 800416c:	2208      	movs	r2, #8
 800416e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 8004172:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <BLDC1_Init+0x180>)
 8004174:	2204      	movs	r2, #4
 8004176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 800417a:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <BLDC1_Init+0x180>)
 800417c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc f94d 	bl	8000424 <__aeabi_i2d>
 800418a:	4603      	mov	r3, r0
 800418c:	460c      	mov	r4, r1
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	4953      	ldr	r1, [pc, #332]	; (80042e4 <BLDC1_Init+0x184>)
 8004198:	f7fc fad8 	bl	800074c <__aeabi_ddiv>
 800419c:	4603      	mov	r3, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	4618      	mov	r0, r3
 80041a2:	4621      	mov	r1, r4
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <BLDC1_Init+0x188>)
 80041aa:	f7fc facf 	bl	800074c <__aeabi_ddiv>
 80041ae:	4603      	mov	r3, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	4a4b      	ldr	r2, [pc, #300]	; (80042e0 <BLDC1_Init+0x180>)
 80041b4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 80041b8:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <BLDC1_Init+0x180>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <BLDC1_Init+0x180>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <BLDC1_Init+0x180>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 80041cc:	4a44      	ldr	r2, [pc, #272]	; (80042e0 <BLDC1_Init+0x180>)
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <BLDC1_Init+0x180>)
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 80041e8:	4a3d      	ldr	r2, [pc, #244]	; (80042e0 <BLDC1_Init+0x180>)
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 80041f6:	4a3a      	ldr	r2, [pc, #232]	; (80042e0 <BLDC1_Init+0x180>)
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8004204:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <BLDC1_Init+0x180>)
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 8004212:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <BLDC1_Init+0x180>)
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	f04f 0400 	mov.w	r4, #0
 800421c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8004220:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <BLDC1_Init+0x180>)
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <BLDC1_Init+0x180>)
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <BLDC1_Init+0x180>)
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f04f 0400 	mov.w	r4, #0
 8004246:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 800424a:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <BLDC1_Init+0x180>)
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 8004258:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <BLDC1_Init+0x180>)
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	f04f 0400 	mov.w	r4, #0
 8004262:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <BLDC1_Init+0x180>)
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f04f 0400 	mov.w	r4, #0
 8004270:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <BLDC1_Init+0x180>)
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	f04f 0400 	mov.w	r4, #0
 800427e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <BLDC1_Init+0x180>)
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	f04f 0400 	mov.w	r4, #0
 800428c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <BLDC1_Init+0x180>)
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <BLDC1_Init+0x180>)
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <BLDC1_Init+0x180>)
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 80042ba:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <BLDC1_Init+0x180>)
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f04f 0400 	mov.w	r4, #0
 80042c4:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <BLDC1_Init+0x180>)
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 80042d6:	4802      	ldr	r0, [pc, #8]	; (80042e0 <BLDC1_Init+0x180>)
 80042d8:	f7fe fa7b 	bl	80027d2 <BLDC_Init>
}
 80042dc:	bf00      	nop
 80042de:	bd98      	pop	{r3, r4, r7, pc}
 80042e0:	20000240 	.word	0x20000240
 80042e4:	404e0000 	.word	0x404e0000
 80042e8:	40100000 	.word	0x40100000

080042ec <UART2_Init>:


void UART2_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	UART2Handle.Instance = USART2;
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <UART2_Init+0x48>)
 80042f2:	4a11      	ldr	r2, [pc, #68]	; (8004338 <UART2_Init+0x4c>)
 80042f4:	601a      	str	r2, [r3, #0]
	UART2Handle.Init.Mode = UART_MODE_TX;
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <UART2_Init+0x48>)
 80042f8:	2208      	movs	r2, #8
 80042fa:	615a      	str	r2, [r3, #20]
	UART2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <UART2_Init+0x48>)
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
	UART2Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <UART2_Init+0x48>)
 8004304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004308:	605a      	str	r2, [r3, #4]
	UART2Handle.Init.Parity = UART_PARITY_NONE;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <UART2_Init+0x48>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
	UART2Handle.Init.StopBits = UART_STOPBITS_1;
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <UART2_Init+0x48>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
	UART2Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <UART2_Init+0x48>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
	UART2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <UART2_Init+0x48>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
	UART2Handle.hdmatx = &DMA1Handle;
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <UART2_Init+0x48>)
 8004324:	4a05      	ldr	r2, [pc, #20]	; (800433c <UART2_Init+0x50>)
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART2Handle);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <UART2_Init+0x48>)
 800432a:	f7fe f859 	bl	80023e0 <USART_Init>
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000358 	.word	0x20000358
 8004338:	40004400 	.word	0x40004400
 800433c:	20000394 	.word	0x20000394

08004340 <TIM6_Init>:


void TIM6_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <TIM6_Init+0x5c>)
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <TIM6_Init+0x60>)
 8004348:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <TIM6_Init+0x5c>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <TIM6_Init+0x5c>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <TIM6_Init+0x5c>)
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <TIM6_Init+0x5c>)
 800435e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004362:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (5-1);	// 10kHz / 5 = 2kHz
 8004364:	4b0d      	ldr	r3, [pc, #52]	; (800439c <TIM6_Init+0x5c>)
 8004366:	2204      	movs	r2, #4
 8004368:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <TIM6_Init+0x5c>)
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8004370:	480a      	ldr	r0, [pc, #40]	; (800439c <TIM6_Init+0x5c>)
 8004372:	f7fd fdab 	bl	8001ecc <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <TIM6_Init+0x5c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <TIM6_Init+0x5c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <TIM6_Init+0x5c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <TIM6_Init+0x5c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200003d8 	.word	0x200003d8
 80043a0:	40001000 	.word	0x40001000

080043a4 <DMA1_Init>:


void DMA1_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <DMA1_Init+0x20>)
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <DMA1_Init+0x20>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL7, NVIC_PRIOR_15, ENABLE);
 80043b4:	2201      	movs	r2, #1
 80043b6:	210f      	movs	r1, #15
 80043b8:	2011      	movs	r0, #17
 80043ba:	f7ff f8cf 	bl	800355c <NVIC_IRQConfig>
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000

080043c8 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
	static int count = 0;
	char sign;


	/* Check the Button is pressed */
	if(ButtonFlag == FLAG_RESET)
 80043d0:	4b81      	ldr	r3, [pc, #516]	; (80045d8 <TIM_PeriodElapsedCallback+0x210>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <TIM_PeriodElapsedCallback+0x28>
	{
		uint8_t buttonState;

		buttonState = READ_BIT(GPIOA->IDR, GPIO_PIN_7);
 80043d8:	4b80      	ldr	r3, [pc, #512]	; (80045dc <TIM_PeriodElapsedCallback+0x214>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043e2:	73bb      	strb	r3, [r7, #14]

		if(buttonState == BUTTON_PRESSED)
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <TIM_PeriodElapsedCallback+0x28>
		{
			ButtonFlag = FLAG_SET;
 80043ea:	4b7b      	ldr	r3, [pc, #492]	; (80045d8 <TIM_PeriodElapsedCallback+0x210>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
		}
	}


	if(pTIMHandle->Instance == TIM6)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7a      	ldr	r2, [pc, #488]	; (80045e0 <TIM_PeriodElapsedCallback+0x218>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f040 80e0 	bne.w	80045bc <TIM_PeriodElapsedCallback+0x1f4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 80043fc:	4b79      	ldr	r3, [pc, #484]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 80043fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 8097 	bne.w	8004536 <TIM_PeriodElapsedCallback+0x16e>
		{
			if(count >= 100)
 8004408:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b63      	cmp	r3, #99	; 0x63
 800440e:	f340 80a0 	ble.w	8004552 <TIM_PeriodElapsedCallback+0x18a>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.05);
 8004412:	a36d      	add	r3, pc, #436	; (adr r3, 80045c8 <TIM_PeriodElapsedCallback+0x200>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	4872      	ldr	r0, [pc, #456]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 800441a:	f7fe fa7d 	bl	8002918 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.05);
 800441e:	a36a      	add	r3, pc, #424	; (adr r3, 80045c8 <TIM_PeriodElapsedCallback+0x200>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	486f      	ldr	r0, [pc, #444]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 8004426:	f7fe fe03 	bl	8003030 <BLDC_SpeedPID>

				/* Transmit Motor Speed value to PC through UART2 */
				int16_t motorSpeed, motorSpeedAbs;

				motorSpeed = (int16_t)BLDC1Handle.CurSpeed;
 800442a:	4b6e      	ldr	r3, [pc, #440]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 800442c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8004430:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004434:	4618      	mov	r0, r3
 8004436:	4621      	mov	r1, r4
 8004438:	f7fc fb0e 	bl	8000a58 <__aeabi_d2iz>
 800443c:	4603      	mov	r3, r0
 800443e:	81bb      	strh	r3, [r7, #12]
				motorSpeedAbs = abs(motorSpeed);
 8004440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	bfb8      	it	lt
 8004448:	425b      	neglt	r3, r3
 800444a:	817b      	strh	r3, [r7, #10]

				if(motorSpeed >= 0)			sign = '+';
 800444c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	db02      	blt.n	800445a <TIM_PeriodElapsedCallback+0x92>
 8004454:	232b      	movs	r3, #43	; 0x2b
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e005      	b.n	8004466 <TIM_PeriodElapsedCallback+0x9e>
				else if(motorSpeed < 0)		sign = '-';
 800445a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da01      	bge.n	8004466 <TIM_PeriodElapsedCallback+0x9e>
 8004462:	232d      	movs	r3, #45	; 0x2d
 8004464:	73fb      	strb	r3, [r7, #15]

				MotorSpeedStr[0] = sign;
 8004466:	4a61      	ldr	r2, [pc, #388]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	7013      	strb	r3, [r2, #0]
				MotorSpeedStr[1] = (motorSpeedAbs / 1000) + 48;
 800446c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004470:	4a5f      	ldr	r2, [pc, #380]	; (80045f0 <TIM_PeriodElapsedCallback+0x228>)
 8004472:	fb82 1203 	smull	r1, r2, r2, r3
 8004476:	1192      	asrs	r2, r2, #6
 8004478:	17db      	asrs	r3, r3, #31
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	b21b      	sxth	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3330      	adds	r3, #48	; 0x30
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 8004486:	705a      	strb	r2, [r3, #1]
				MotorSpeedStr[2] = ((motorSpeedAbs % 1000) / 100) + 48;
 8004488:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <TIM_PeriodElapsedCallback+0x228>)
 800448e:	fb82 1203 	smull	r1, r2, r2, r3
 8004492:	1191      	asrs	r1, r2, #6
 8004494:	17da      	asrs	r2, r3, #31
 8004496:	1a8a      	subs	r2, r1, r2
 8004498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800449c:	fb01 f202 	mul.w	r2, r1, r2
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	4a53      	ldr	r2, [pc, #332]	; (80045f4 <TIM_PeriodElapsedCallback+0x22c>)
 80044a6:	fb82 1203 	smull	r1, r2, r2, r3
 80044aa:	1152      	asrs	r2, r2, #5
 80044ac:	17db      	asrs	r3, r3, #31
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3330      	adds	r3, #48	; 0x30
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 80044ba:	709a      	strb	r2, [r3, #2]
				MotorSpeedStr[3] = ((motorSpeedAbs % 100) / 10) + 48;
 80044bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044c0:	4a4c      	ldr	r2, [pc, #304]	; (80045f4 <TIM_PeriodElapsedCallback+0x22c>)
 80044c2:	fb82 1203 	smull	r1, r2, r2, r3
 80044c6:	1151      	asrs	r1, r2, #5
 80044c8:	17da      	asrs	r2, r3, #31
 80044ca:	1a8a      	subs	r2, r1, r2
 80044cc:	2164      	movs	r1, #100	; 0x64
 80044ce:	fb01 f202 	mul.w	r2, r1, r2
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	4a48      	ldr	r2, [pc, #288]	; (80045f8 <TIM_PeriodElapsedCallback+0x230>)
 80044d8:	fb82 1203 	smull	r1, r2, r2, r3
 80044dc:	1092      	asrs	r2, r2, #2
 80044de:	17db      	asrs	r3, r3, #31
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3330      	adds	r3, #48	; 0x30
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 80044ec:	70da      	strb	r2, [r3, #3]
				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
 80044ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <TIM_PeriodElapsedCallback+0x230>)
 80044f4:	fb83 1302 	smull	r1, r3, r3, r2
 80044f8:	1099      	asrs	r1, r3, #2
 80044fa:	17d3      	asrs	r3, r2, #31
 80044fc:	1ac9      	subs	r1, r1, r3
 80044fe:	460b      	mov	r3, r1
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	b21b      	sxth	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3330      	adds	r3, #48	; 0x30
 800450e:	b2da      	uxtb	r2, r3
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 8004512:	711a      	strb	r2, [r3, #4]
				MotorSpeedStr[5] = '\n';
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 8004516:	220a      	movs	r2, #10
 8004518:	715a      	strb	r2, [r3, #5]

				UART_Transmit_DMA(&UART2Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));
 800451a:	4834      	ldr	r0, [pc, #208]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 800451c:	f7fb fe28 	bl	8000170 <strlen>
 8004520:	4603      	mov	r3, r0
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	4931      	ldr	r1, [pc, #196]	; (80045ec <TIM_PeriodElapsedCallback+0x224>)
 8004528:	4834      	ldr	r0, [pc, #208]	; (80045fc <TIM_PeriodElapsedCallback+0x234>)
 800452a:	f7fe f8c5 	bl	80026b8 <UART_Transmit_DMA>

				count = 0;
 800452e:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e00d      	b.n	8004552 <TIM_PeriodElapsedCallback+0x18a>
			}
		}

		/* Motor State is POSITION */
		else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8004536:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 8004538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800453c:	2b02      	cmp	r3, #2
 800453e:	d108      	bne.n	8004552 <TIM_PeriodElapsedCallback+0x18a>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.0005);
 8004540:	a323      	add	r3, pc, #140	; (adr r3, 80045d0 <TIM_PeriodElapsedCallback+0x208>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	4827      	ldr	r0, [pc, #156]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 8004548:	f7fe fdc8 	bl	80030dc <BLDC_PositionPID>

			startFlag = FLAG_SET;
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <TIM_PeriodElapsedCallback+0x238>)
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
		}



		/* Transmit Motor Position value to PC through UART2 */
		if(count >= 10)
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b09      	cmp	r3, #9
 8004558:	dd2b      	ble.n	80045b2 <TIM_PeriodElapsedCallback+0x1ea>
		{
			if(BLDC1Handle.RotationDir == CW)			sign = '+';
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 800455c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <TIM_PeriodElapsedCallback+0x1a2>
 8004564:	232b      	movs	r3, #43	; 0x2b
 8004566:	73fb      	strb	r3, [r7, #15]
 8004568:	e006      	b.n	8004578 <TIM_PeriodElapsedCallback+0x1b0>
			else if(BLDC1Handle.RotationDir == CCW)		sign = '-';
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <TIM_PeriodElapsedCallback+0x1b0>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	73fb      	strb	r3, [r7, #15]

			sprintf(Msg1, "%lf, %lf\n", BLDC1Handle.CurPosition, BLDC1Handle.PwmPID);	// To see the case of RefPosition
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 800457a:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <TIM_PeriodElapsedCallback+0x21c>)
 8004580:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8004584:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004588:	e9cd 3400 	strd	r3, r4, [sp]
 800458c:	4613      	mov	r3, r2
 800458e:	460a      	mov	r2, r1
 8004590:	491c      	ldr	r1, [pc, #112]	; (8004604 <TIM_PeriodElapsedCallback+0x23c>)
 8004592:	481d      	ldr	r0, [pc, #116]	; (8004608 <TIM_PeriodElapsedCallback+0x240>)
 8004594:	f000 fd88 	bl	80050a8 <siprintf>
			//sprintf(Msg1, "%lf, %lf, %lf, %lf\n", BLDC1Handle.TrjCurPosition, BLDC1Handle.CurPosition, BLDC1Handle.TrjDtAcceleration, BLDC1Handle.PwmPID);	// To see the case of TrjCurPosition

			UART_Transmit_DMA(&UART2Handle, (uint8_t*)Msg1, strlen((char*)Msg1));
 8004598:	481b      	ldr	r0, [pc, #108]	; (8004608 <TIM_PeriodElapsedCallback+0x240>)
 800459a:	f7fb fde9 	bl	8000170 <strlen>
 800459e:	4603      	mov	r3, r0
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	4918      	ldr	r1, [pc, #96]	; (8004608 <TIM_PeriodElapsedCallback+0x240>)
 80045a6:	4815      	ldr	r0, [pc, #84]	; (80045fc <TIM_PeriodElapsedCallback+0x234>)
 80045a8:	f7fe f886 	bl	80026b8 <UART_Transmit_DMA>

			count = 0;
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
		}

		count++;
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <TIM_PeriodElapsedCallback+0x220>)
 80045ba:	6013      	str	r3, [r2, #0]
	}
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}
 80045c4:	f3af 8000 	nop.w
 80045c8:	9999999a 	.word	0x9999999a
 80045cc:	3fa99999 	.word	0x3fa99999
 80045d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80045d4:	3f40624d 	.word	0x3f40624d
 80045d8:	200001f0 	.word	0x200001f0
 80045dc:	40010800 	.word	0x40010800
 80045e0:	40001000 	.word	0x40001000
 80045e4:	20000240 	.word	0x20000240
 80045e8:	20000230 	.word	0x20000230
 80045ec:	200001f4 	.word	0x200001f4
 80045f0:	10624dd3 	.word	0x10624dd3
 80045f4:	51eb851f 	.word	0x51eb851f
 80045f8:	66666667 	.word	0x66666667
 80045fc:	20000358 	.word	0x20000358
 8004600:	2000022e 	.word	0x2000022e
 8004604:	080068b4 	.word	0x080068b4
 8004608:	200001fc 	.word	0x200001fc

0800460c <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	// 1. Detect current HallPhase location
	BLDC1Handle.HallPhase = (READ_BIT(GPIOC->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 6U;
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <EXTI_Callback+0x30>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <EXTI_Callback+0x34>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	b29a      	uxth	r2, r3
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <EXTI_Callback+0x34>)
 8004624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	// 2. Get current position value
	BLDC_Get_Position(&BLDC1Handle);
 8004628:	4805      	ldr	r0, [pc, #20]	; (8004640 <EXTI_Callback+0x34>)
 800462a:	f7fe f9c3 	bl	80029b4 <BLDC_Get_Position>

	// 3. Drive BLDC motor according to HallPhase location
	BLDC_Drive(&BLDC1Handle);
 800462e:	4804      	ldr	r0, [pc, #16]	; (8004640 <EXTI_Callback+0x34>)
 8004630:	f7fe f8da 	bl	80027e8 <BLDC_Drive>


	UNUSED(GPIO_Pin);
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40011000 	.word	0x40011000
 8004640:	20000240 	.word	0x20000240

08004644 <MemsetHandleStructure>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void MemsetHandleStructure(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8004648:	2220      	movs	r2, #32
 800464a:	2100      	movs	r1, #0
 800464c:	480c      	ldr	r0, [pc, #48]	; (8004680 <MemsetHandleStructure+0x3c>)
 800464e:	f000 f8d3 	bl	80047f8 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8004652:	2220      	movs	r2, #32
 8004654:	2100      	movs	r1, #0
 8004656:	480b      	ldr	r0, [pc, #44]	; (8004684 <MemsetHandleStructure+0x40>)
 8004658:	f000 f8ce 	bl	80047f8 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 800465c:	22f8      	movs	r2, #248	; 0xf8
 800465e:	2100      	movs	r1, #0
 8004660:	4809      	ldr	r0, [pc, #36]	; (8004688 <MemsetHandleStructure+0x44>)
 8004662:	f000 f8c9 	bl	80047f8 <memset>
	memset(&UART2Handle, 0, sizeof(UART2Handle));
 8004666:	223c      	movs	r2, #60	; 0x3c
 8004668:	2100      	movs	r1, #0
 800466a:	4808      	ldr	r0, [pc, #32]	; (800468c <MemsetHandleStructure+0x48>)
 800466c:	f000 f8c4 	bl	80047f8 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8004670:	2244      	movs	r2, #68	; 0x44
 8004672:	2100      	movs	r1, #0
 8004674:	4806      	ldr	r0, [pc, #24]	; (8004690 <MemsetHandleStructure+0x4c>)
 8004676:	f000 f8bf 	bl	80047f8 <memset>
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200003d8 	.word	0x200003d8
 8004684:	20000338 	.word	0x20000338
 8004688:	20000240 	.word	0x20000240
 800468c:	20000358 	.word	0x20000358
 8004690:	20000394 	.word	0x20000394

08004694 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fe2c 	bl	8002300 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2104      	movs	r1, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fe26 	bl	8002300 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2108      	movs	r1, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fe20 	bl	8002300 <TIM_PWM_Start>
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0210 	bic.w	r2, r2, #16
 80046f6:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004750:	480d      	ldr	r0, [pc, #52]	; (8004788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004754:	480d      	ldr	r0, [pc, #52]	; (800478c <LoopForever+0x6>)
  ldr r1, =_edata
 8004756:	490e      	ldr	r1, [pc, #56]	; (8004790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004758:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <LoopForever+0xe>)
  movs r3, #0
 800475a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800475c:	e002      	b.n	8004764 <LoopCopyDataInit>

0800475e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800475e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004762:	3304      	adds	r3, #4

08004764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004768:	d3f9      	bcc.n	800475e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800476a:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800476c:	4c0b      	ldr	r4, [pc, #44]	; (800479c <LoopForever+0x16>)
  movs r3, #0
 800476e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004770:	e001      	b.n	8004776 <LoopFillZerobss>

08004772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004774:	3204      	adds	r2, #4

08004776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004778:	d3fb      	bcc.n	8004772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800477a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800477e:	f000 f817 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004782:	f7ff f8e1 	bl	8003948 <main>

08004786 <LoopForever>:

LoopForever:
    b LoopForever
 8004786:	e7fe      	b.n	8004786 <LoopForever>
  ldr   r0, =_estack
 8004788:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800478c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004790:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8004794:	08006b20 	.word	0x08006b20
  ldr r2, =_sbss
 8004798:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800479c:	200003fc 	.word	0x200003fc

080047a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047a0:	e7fe      	b.n	80047a0 <ADC1_2_IRQHandler>
	...

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000000 	.word	0x20000000

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2500      	movs	r5, #0
 80047b4:	4e0c      	ldr	r6, [pc, #48]	; (80047e8 <__libc_init_array+0x38>)
 80047b6:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b8:	1ba4      	subs	r4, r4, r6
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a5      	cmp	r5, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	f002 f860 	bl	8006884 <_init>
 80047c4:	2500      	movs	r5, #0
 80047c6:	4e0a      	ldr	r6, [pc, #40]	; (80047f0 <__libc_init_array+0x40>)
 80047c8:	4c0a      	ldr	r4, [pc, #40]	; (80047f4 <__libc_init_array+0x44>)
 80047ca:	1ba4      	subs	r4, r4, r6
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a5      	cmp	r5, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047d8:	4798      	blx	r3
 80047da:	3501      	adds	r5, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e2:	4798      	blx	r3
 80047e4:	3501      	adds	r5, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08006b18 	.word	0x08006b18
 80047ec:	08006b18 	.word	0x08006b18
 80047f0:	08006b18 	.word	0x08006b18
 80047f4:	08006b1c 	.word	0x08006b1c

080047f8 <memset>:
 80047f8:	4603      	mov	r3, r0
 80047fa:	4402      	add	r2, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <__cvt>:
 8004808:	2b00      	cmp	r3, #0
 800480a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480e:	461e      	mov	r6, r3
 8004810:	bfbb      	ittet	lt
 8004812:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004816:	461e      	movlt	r6, r3
 8004818:	2300      	movge	r3, #0
 800481a:	232d      	movlt	r3, #45	; 0x2d
 800481c:	b088      	sub	sp, #32
 800481e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004820:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004824:	f027 0720 	bic.w	r7, r7, #32
 8004828:	2f46      	cmp	r7, #70	; 0x46
 800482a:	4614      	mov	r4, r2
 800482c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800482e:	700b      	strb	r3, [r1, #0]
 8004830:	d004      	beq.n	800483c <__cvt+0x34>
 8004832:	2f45      	cmp	r7, #69	; 0x45
 8004834:	d100      	bne.n	8004838 <__cvt+0x30>
 8004836:	3501      	adds	r5, #1
 8004838:	2302      	movs	r3, #2
 800483a:	e000      	b.n	800483e <__cvt+0x36>
 800483c:	2303      	movs	r3, #3
 800483e:	aa07      	add	r2, sp, #28
 8004840:	9204      	str	r2, [sp, #16]
 8004842:	aa06      	add	r2, sp, #24
 8004844:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004848:	e9cd 3500 	strd	r3, r5, [sp]
 800484c:	4622      	mov	r2, r4
 800484e:	4633      	mov	r3, r6
 8004850:	f000 fcda 	bl	8005208 <_dtoa_r>
 8004854:	2f47      	cmp	r7, #71	; 0x47
 8004856:	4680      	mov	r8, r0
 8004858:	d102      	bne.n	8004860 <__cvt+0x58>
 800485a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	d526      	bpl.n	80048ae <__cvt+0xa6>
 8004860:	2f46      	cmp	r7, #70	; 0x46
 8004862:	eb08 0905 	add.w	r9, r8, r5
 8004866:	d111      	bne.n	800488c <__cvt+0x84>
 8004868:	f898 3000 	ldrb.w	r3, [r8]
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d10a      	bne.n	8004886 <__cvt+0x7e>
 8004870:	2200      	movs	r2, #0
 8004872:	2300      	movs	r3, #0
 8004874:	4620      	mov	r0, r4
 8004876:	4631      	mov	r1, r6
 8004878:	f7fc f8a6 	bl	80009c8 <__aeabi_dcmpeq>
 800487c:	b918      	cbnz	r0, 8004886 <__cvt+0x7e>
 800487e:	f1c5 0501 	rsb	r5, r5, #1
 8004882:	f8ca 5000 	str.w	r5, [sl]
 8004886:	f8da 3000 	ldr.w	r3, [sl]
 800488a:	4499      	add	r9, r3
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	4620      	mov	r0, r4
 8004892:	4631      	mov	r1, r6
 8004894:	f7fc f898 	bl	80009c8 <__aeabi_dcmpeq>
 8004898:	b938      	cbnz	r0, 80048aa <__cvt+0xa2>
 800489a:	2230      	movs	r2, #48	; 0x30
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	454b      	cmp	r3, r9
 80048a0:	d205      	bcs.n	80048ae <__cvt+0xa6>
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	9107      	str	r1, [sp, #28]
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e7f8      	b.n	800489c <__cvt+0x94>
 80048aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80048ae:	4640      	mov	r0, r8
 80048b0:	9b07      	ldr	r3, [sp, #28]
 80048b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048b4:	eba3 0308 	sub.w	r3, r3, r8
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	b008      	add	sp, #32
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080048c0 <__exponent>:
 80048c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048c2:	2900      	cmp	r1, #0
 80048c4:	bfb4      	ite	lt
 80048c6:	232d      	movlt	r3, #45	; 0x2d
 80048c8:	232b      	movge	r3, #43	; 0x2b
 80048ca:	4604      	mov	r4, r0
 80048cc:	bfb8      	it	lt
 80048ce:	4249      	neglt	r1, r1
 80048d0:	2909      	cmp	r1, #9
 80048d2:	f804 2b02 	strb.w	r2, [r4], #2
 80048d6:	7043      	strb	r3, [r0, #1]
 80048d8:	dd21      	ble.n	800491e <__exponent+0x5e>
 80048da:	f10d 0307 	add.w	r3, sp, #7
 80048de:	461f      	mov	r7, r3
 80048e0:	260a      	movs	r6, #10
 80048e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80048e6:	fb06 1115 	mls	r1, r6, r5, r1
 80048ea:	2d09      	cmp	r5, #9
 80048ec:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80048f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048f4:	f103 32ff 	add.w	r2, r3, #4294967295
 80048f8:	4629      	mov	r1, r5
 80048fa:	dc09      	bgt.n	8004910 <__exponent+0x50>
 80048fc:	3130      	adds	r1, #48	; 0x30
 80048fe:	3b02      	subs	r3, #2
 8004900:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004904:	42bb      	cmp	r3, r7
 8004906:	4622      	mov	r2, r4
 8004908:	d304      	bcc.n	8004914 <__exponent+0x54>
 800490a:	1a10      	subs	r0, r2, r0
 800490c:	b003      	add	sp, #12
 800490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004910:	4613      	mov	r3, r2
 8004912:	e7e6      	b.n	80048e2 <__exponent+0x22>
 8004914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004918:	f804 2b01 	strb.w	r2, [r4], #1
 800491c:	e7f2      	b.n	8004904 <__exponent+0x44>
 800491e:	2330      	movs	r3, #48	; 0x30
 8004920:	4419      	add	r1, r3
 8004922:	7083      	strb	r3, [r0, #2]
 8004924:	1d02      	adds	r2, r0, #4
 8004926:	70c1      	strb	r1, [r0, #3]
 8004928:	e7ef      	b.n	800490a <__exponent+0x4a>
	...

0800492c <_printf_float>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	b091      	sub	sp, #68	; 0x44
 8004932:	460c      	mov	r4, r1
 8004934:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004936:	4693      	mov	fp, r2
 8004938:	461e      	mov	r6, r3
 800493a:	4605      	mov	r5, r0
 800493c:	f001 fa18 	bl	8005d70 <_localeconv_r>
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	9309      	str	r3, [sp, #36]	; 0x24
 8004946:	f7fb fc13 	bl	8000170 <strlen>
 800494a:	2300      	movs	r3, #0
 800494c:	930e      	str	r3, [sp, #56]	; 0x38
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	900a      	str	r0, [sp, #40]	; 0x28
 8004952:	3307      	adds	r3, #7
 8004954:	f023 0307 	bic.w	r3, r3, #7
 8004958:	f103 0208 	add.w	r2, r3, #8
 800495c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004960:	f8d4 a000 	ldr.w	sl, [r4]
 8004964:	603a      	str	r2, [r7, #0]
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800496e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004976:	930b      	str	r3, [sp, #44]	; 0x2c
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	4ba6      	ldr	r3, [pc, #664]	; (8004c18 <_printf_float+0x2ec>)
 800497e:	4638      	mov	r0, r7
 8004980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004982:	f7fc f853 	bl	8000a2c <__aeabi_dcmpun>
 8004986:	bb68      	cbnz	r0, 80049e4 <_printf_float+0xb8>
 8004988:	f04f 32ff 	mov.w	r2, #4294967295
 800498c:	4ba2      	ldr	r3, [pc, #648]	; (8004c18 <_printf_float+0x2ec>)
 800498e:	4638      	mov	r0, r7
 8004990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004992:	f7fc f82d 	bl	80009f0 <__aeabi_dcmple>
 8004996:	bb28      	cbnz	r0, 80049e4 <_printf_float+0xb8>
 8004998:	2200      	movs	r2, #0
 800499a:	2300      	movs	r3, #0
 800499c:	4638      	mov	r0, r7
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f81c 	bl	80009dc <__aeabi_dcmplt>
 80049a4:	b110      	cbz	r0, 80049ac <_printf_float+0x80>
 80049a6:	232d      	movs	r3, #45	; 0x2d
 80049a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ac:	4f9b      	ldr	r7, [pc, #620]	; (8004c1c <_printf_float+0x2f0>)
 80049ae:	4b9c      	ldr	r3, [pc, #624]	; (8004c20 <_printf_float+0x2f4>)
 80049b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049b4:	bf98      	it	ls
 80049b6:	461f      	movls	r7, r3
 80049b8:	2303      	movs	r3, #3
 80049ba:	f04f 0900 	mov.w	r9, #0
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	f02a 0304 	bic.w	r3, sl, #4
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	9600      	str	r6, [sp, #0]
 80049c8:	465b      	mov	r3, fp
 80049ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80049cc:	4621      	mov	r1, r4
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 f9e2 	bl	8004d98 <_printf_common>
 80049d4:	3001      	adds	r0, #1
 80049d6:	f040 8090 	bne.w	8004afa <_printf_float+0x1ce>
 80049da:	f04f 30ff 	mov.w	r0, #4294967295
 80049de:	b011      	add	sp, #68	; 0x44
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	463a      	mov	r2, r7
 80049e6:	464b      	mov	r3, r9
 80049e8:	4638      	mov	r0, r7
 80049ea:	4649      	mov	r1, r9
 80049ec:	f7fc f81e 	bl	8000a2c <__aeabi_dcmpun>
 80049f0:	b110      	cbz	r0, 80049f8 <_printf_float+0xcc>
 80049f2:	4f8c      	ldr	r7, [pc, #560]	; (8004c24 <_printf_float+0x2f8>)
 80049f4:	4b8c      	ldr	r3, [pc, #560]	; (8004c28 <_printf_float+0x2fc>)
 80049f6:	e7db      	b.n	80049b0 <_printf_float+0x84>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	a80d      	add	r0, sp, #52	; 0x34
 8004a02:	a90e      	add	r1, sp, #56	; 0x38
 8004a04:	d140      	bne.n	8004a88 <_printf_float+0x15c>
 8004a06:	2306      	movs	r3, #6
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	f04f 0c00 	mov.w	ip, #0
 8004a0e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004a12:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004a16:	6863      	ldr	r3, [r4, #4]
 8004a18:	6022      	str	r2, [r4, #0]
 8004a1a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	463a      	mov	r2, r7
 8004a22:	464b      	mov	r3, r9
 8004a24:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7ff feed 	bl	8004808 <__cvt>
 8004a2e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004a32:	2b47      	cmp	r3, #71	; 0x47
 8004a34:	4607      	mov	r7, r0
 8004a36:	d109      	bne.n	8004a4c <_printf_float+0x120>
 8004a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3a:	1cd8      	adds	r0, r3, #3
 8004a3c:	db02      	blt.n	8004a44 <_printf_float+0x118>
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	dd47      	ble.n	8004ad4 <_printf_float+0x1a8>
 8004a44:	f1a8 0802 	sub.w	r8, r8, #2
 8004a48:	fa5f f888 	uxtb.w	r8, r8
 8004a4c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004a50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a52:	d824      	bhi.n	8004a9e <_printf_float+0x172>
 8004a54:	3901      	subs	r1, #1
 8004a56:	4642      	mov	r2, r8
 8004a58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a5c:	910d      	str	r1, [sp, #52]	; 0x34
 8004a5e:	f7ff ff2f 	bl	80048c0 <__exponent>
 8004a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a64:	4681      	mov	r9, r0
 8004a66:	1813      	adds	r3, r2, r0
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	dc02      	bgt.n	8004a74 <_printf_float+0x148>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	07d1      	lsls	r1, r2, #31
 8004a72:	d501      	bpl.n	8004a78 <_printf_float+0x14c>
 8004a74:	3301      	adds	r3, #1
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0a2      	beq.n	80049c6 <_printf_float+0x9a>
 8004a80:	232d      	movs	r3, #45	; 0x2d
 8004a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a86:	e79e      	b.n	80049c6 <_printf_float+0x9a>
 8004a88:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004a8c:	f000 816e 	beq.w	8004d6c <_printf_float+0x440>
 8004a90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a94:	d1b9      	bne.n	8004a0a <_printf_float+0xde>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1b7      	bne.n	8004a0a <_printf_float+0xde>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e7b4      	b.n	8004a08 <_printf_float+0xdc>
 8004a9e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004aa2:	d119      	bne.n	8004ad8 <_printf_float+0x1ac>
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	dd0c      	ble.n	8004ac4 <_printf_float+0x198>
 8004aaa:	6121      	str	r1, [r4, #16]
 8004aac:	b913      	cbnz	r3, 8004ab4 <_printf_float+0x188>
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	07d2      	lsls	r2, r2, #31
 8004ab2:	d502      	bpl.n	8004aba <_printf_float+0x18e>
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	440b      	add	r3, r1
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004abc:	f04f 0900 	mov.w	r9, #0
 8004ac0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ac2:	e7d9      	b.n	8004a78 <_printf_float+0x14c>
 8004ac4:	b913      	cbnz	r3, 8004acc <_printf_float+0x1a0>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	07d0      	lsls	r0, r2, #31
 8004aca:	d501      	bpl.n	8004ad0 <_printf_float+0x1a4>
 8004acc:	3302      	adds	r3, #2
 8004ace:	e7f3      	b.n	8004ab8 <_printf_float+0x18c>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e7f1      	b.n	8004ab8 <_printf_float+0x18c>
 8004ad4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ad8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004adc:	4293      	cmp	r3, r2
 8004ade:	db05      	blt.n	8004aec <_printf_float+0x1c0>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	07d1      	lsls	r1, r2, #31
 8004ae6:	d5e8      	bpl.n	8004aba <_printf_float+0x18e>
 8004ae8:	3301      	adds	r3, #1
 8004aea:	e7e5      	b.n	8004ab8 <_printf_float+0x18c>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bfcc      	ite	gt
 8004af0:	2301      	movgt	r3, #1
 8004af2:	f1c3 0302 	rsble	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	e7de      	b.n	8004ab8 <_printf_float+0x18c>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	055a      	lsls	r2, r3, #21
 8004afe:	d407      	bmi.n	8004b10 <_printf_float+0x1e4>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	463a      	mov	r2, r7
 8004b04:	4659      	mov	r1, fp
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b0      	blx	r6
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d129      	bne.n	8004b62 <_printf_float+0x236>
 8004b0e:	e764      	b.n	80049da <_printf_float+0xae>
 8004b10:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004b14:	f240 80d7 	bls.w	8004cc6 <_printf_float+0x39a>
 8004b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f7fb ff52 	bl	80009c8 <__aeabi_dcmpeq>
 8004b24:	b388      	cbz	r0, 8004b8a <_printf_float+0x25e>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4a40      	ldr	r2, [pc, #256]	; (8004c2c <_printf_float+0x300>)
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b0      	blx	r6
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f af52 	beq.w	80049da <_printf_float+0xae>
 8004b36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	db02      	blt.n	8004b44 <_printf_float+0x218>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	07d8      	lsls	r0, r3, #31
 8004b42:	d50e      	bpl.n	8004b62 <_printf_float+0x236>
 8004b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b48:	4659      	mov	r1, fp
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	47b0      	blx	r6
 8004b4e:	3001      	adds	r0, #1
 8004b50:	f43f af43 	beq.w	80049da <_printf_float+0xae>
 8004b54:	2700      	movs	r7, #0
 8004b56:	f104 081a 	add.w	r8, r4, #26
 8004b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	42bb      	cmp	r3, r7
 8004b60:	dc09      	bgt.n	8004b76 <_printf_float+0x24a>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	079f      	lsls	r7, r3, #30
 8004b66:	f100 80fd 	bmi.w	8004d64 <_printf_float+0x438>
 8004b6a:	68e0      	ldr	r0, [r4, #12]
 8004b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b6e:	4298      	cmp	r0, r3
 8004b70:	bfb8      	it	lt
 8004b72:	4618      	movlt	r0, r3
 8004b74:	e733      	b.n	80049de <_printf_float+0xb2>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b0      	blx	r6
 8004b80:	3001      	adds	r0, #1
 8004b82:	f43f af2a 	beq.w	80049da <_printf_float+0xae>
 8004b86:	3701      	adds	r7, #1
 8004b88:	e7e7      	b.n	8004b5a <_printf_float+0x22e>
 8004b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dc2b      	bgt.n	8004be8 <_printf_float+0x2bc>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <_printf_float+0x300>)
 8004b94:	4659      	mov	r1, fp
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b0      	blx	r6
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f af1d 	beq.w	80049da <_printf_float+0xae>
 8004ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba2:	b923      	cbnz	r3, 8004bae <_printf_float+0x282>
 8004ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ba6:	b913      	cbnz	r3, 8004bae <_printf_float+0x282>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07d9      	lsls	r1, r3, #31
 8004bac:	d5d9      	bpl.n	8004b62 <_printf_float+0x236>
 8004bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b0      	blx	r6
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f af0e 	beq.w	80049da <_printf_float+0xae>
 8004bbe:	f04f 0800 	mov.w	r8, #0
 8004bc2:	f104 091a 	add.w	r9, r4, #26
 8004bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc8:	425b      	negs	r3, r3
 8004bca:	4543      	cmp	r3, r8
 8004bcc:	dc01      	bgt.n	8004bd2 <_printf_float+0x2a6>
 8004bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bd0:	e797      	b.n	8004b02 <_printf_float+0x1d6>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	464a      	mov	r2, r9
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b0      	blx	r6
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f aefc 	beq.w	80049da <_printf_float+0xae>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	e7ee      	b.n	8004bc6 <_printf_float+0x29a>
 8004be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bec:	429a      	cmp	r2, r3
 8004bee:	bfa8      	it	ge
 8004bf0:	461a      	movge	r2, r3
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	dd07      	ble.n	8004c08 <_printf_float+0x2dc>
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	4659      	mov	r1, fp
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b0      	blx	r6
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f aee9 	beq.w	80049da <_printf_float+0xae>
 8004c08:	f104 031a 	add.w	r3, r4, #26
 8004c0c:	f04f 0a00 	mov.w	sl, #0
 8004c10:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c16:	e015      	b.n	8004c44 <_printf_float+0x318>
 8004c18:	7fefffff 	.word	0x7fefffff
 8004c1c:	080068c2 	.word	0x080068c2
 8004c20:	080068be 	.word	0x080068be
 8004c24:	080068ca 	.word	0x080068ca
 8004c28:	080068c6 	.word	0x080068c6
 8004c2c:	080068ce 	.word	0x080068ce
 8004c30:	2301      	movs	r3, #1
 8004c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c34:	4659      	mov	r1, fp
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b0      	blx	r6
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f aecd 	beq.w	80049da <_printf_float+0xae>
 8004c40:	f10a 0a01 	add.w	sl, sl, #1
 8004c44:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004c48:	eba9 0308 	sub.w	r3, r9, r8
 8004c4c:	4553      	cmp	r3, sl
 8004c4e:	dcef      	bgt.n	8004c30 <_printf_float+0x304>
 8004c50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c54:	429a      	cmp	r2, r3
 8004c56:	444f      	add	r7, r9
 8004c58:	db14      	blt.n	8004c84 <_printf_float+0x358>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	07da      	lsls	r2, r3, #31
 8004c5e:	d411      	bmi.n	8004c84 <_printf_float+0x358>
 8004c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c64:	eba3 0209 	sub.w	r2, r3, r9
 8004c68:	eba3 0901 	sub.w	r9, r3, r1
 8004c6c:	4591      	cmp	r9, r2
 8004c6e:	bfa8      	it	ge
 8004c70:	4691      	movge	r9, r2
 8004c72:	f1b9 0f00 	cmp.w	r9, #0
 8004c76:	dc0d      	bgt.n	8004c94 <_printf_float+0x368>
 8004c78:	2700      	movs	r7, #0
 8004c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7e:	f104 081a 	add.w	r8, r4, #26
 8004c82:	e018      	b.n	8004cb6 <_printf_float+0x38a>
 8004c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c88:	4659      	mov	r1, fp
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b0      	blx	r6
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d1e6      	bne.n	8004c60 <_printf_float+0x334>
 8004c92:	e6a2      	b.n	80049da <_printf_float+0xae>
 8004c94:	464b      	mov	r3, r9
 8004c96:	463a      	mov	r2, r7
 8004c98:	4659      	mov	r1, fp
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b0      	blx	r6
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d1ea      	bne.n	8004c78 <_printf_float+0x34c>
 8004ca2:	e69a      	b.n	80049da <_printf_float+0xae>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	4659      	mov	r1, fp
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b0      	blx	r6
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f ae93 	beq.w	80049da <_printf_float+0xae>
 8004cb4:	3701      	adds	r7, #1
 8004cb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	eba3 0309 	sub.w	r3, r3, r9
 8004cc0:	42bb      	cmp	r3, r7
 8004cc2:	dcef      	bgt.n	8004ca4 <_printf_float+0x378>
 8004cc4:	e74d      	b.n	8004b62 <_printf_float+0x236>
 8004cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc8:	2a01      	cmp	r2, #1
 8004cca:	dc01      	bgt.n	8004cd0 <_printf_float+0x3a4>
 8004ccc:	07db      	lsls	r3, r3, #31
 8004cce:	d538      	bpl.n	8004d42 <_printf_float+0x416>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	463a      	mov	r2, r7
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b0      	blx	r6
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f ae7d 	beq.w	80049da <_printf_float+0xae>
 8004ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b0      	blx	r6
 8004cea:	3001      	adds	r0, #1
 8004cec:	f107 0701 	add.w	r7, r7, #1
 8004cf0:	f43f ae73 	beq.w	80049da <_printf_float+0xae>
 8004cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f103 38ff 	add.w	r8, r3, #4294967295
 8004d00:	2300      	movs	r3, #0
 8004d02:	f7fb fe61 	bl	80009c8 <__aeabi_dcmpeq>
 8004d06:	b9c0      	cbnz	r0, 8004d3a <_printf_float+0x40e>
 8004d08:	4643      	mov	r3, r8
 8004d0a:	463a      	mov	r2, r7
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b0      	blx	r6
 8004d12:	3001      	adds	r0, #1
 8004d14:	d10d      	bne.n	8004d32 <_printf_float+0x406>
 8004d16:	e660      	b.n	80049da <_printf_float+0xae>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b0      	blx	r6
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f ae59 	beq.w	80049da <_printf_float+0xae>
 8004d28:	3701      	adds	r7, #1
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	42bb      	cmp	r3, r7
 8004d30:	dcf2      	bgt.n	8004d18 <_printf_float+0x3ec>
 8004d32:	464b      	mov	r3, r9
 8004d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d38:	e6e4      	b.n	8004b04 <_printf_float+0x1d8>
 8004d3a:	2700      	movs	r7, #0
 8004d3c:	f104 081a 	add.w	r8, r4, #26
 8004d40:	e7f3      	b.n	8004d2a <_printf_float+0x3fe>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e7e1      	b.n	8004d0a <_printf_float+0x3de>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4642      	mov	r2, r8
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b0      	blx	r6
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f ae42 	beq.w	80049da <_printf_float+0xae>
 8004d56:	3701      	adds	r7, #1
 8004d58:	68e3      	ldr	r3, [r4, #12]
 8004d5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	42bb      	cmp	r3, r7
 8004d60:	dcf1      	bgt.n	8004d46 <_printf_float+0x41a>
 8004d62:	e702      	b.n	8004b6a <_printf_float+0x23e>
 8004d64:	2700      	movs	r7, #0
 8004d66:	f104 0819 	add.w	r8, r4, #25
 8004d6a:	e7f5      	b.n	8004d58 <_printf_float+0x42c>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f43f ae94 	beq.w	8004a9a <_printf_float+0x16e>
 8004d72:	f04f 0c00 	mov.w	ip, #0
 8004d76:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004d7a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004d7e:	6022      	str	r2, [r4, #0]
 8004d80:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d84:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	463a      	mov	r2, r7
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7ff fd3a 	bl	8004808 <__cvt>
 8004d94:	4607      	mov	r7, r0
 8004d96:	e64f      	b.n	8004a38 <_printf_float+0x10c>

08004d98 <_printf_common>:
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	4691      	mov	r9, r2
 8004d9e:	461f      	mov	r7, r3
 8004da0:	688a      	ldr	r2, [r1, #8]
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4606      	mov	r6, r0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfb8      	it	lt
 8004daa:	4613      	movlt	r3, r2
 8004dac:	f8c9 3000 	str.w	r3, [r9]
 8004db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004db4:	460c      	mov	r4, r1
 8004db6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dba:	b112      	cbz	r2, 8004dc2 <_printf_common+0x2a>
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	f8c9 3000 	str.w	r3, [r9]
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	0699      	lsls	r1, r3, #26
 8004dc6:	bf42      	ittt	mi
 8004dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004dcc:	3302      	addmi	r3, #2
 8004dce:	f8c9 3000 	strmi.w	r3, [r9]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	f015 0506 	ands.w	r5, r5, #6
 8004dd8:	d107      	bne.n	8004dea <_printf_common+0x52>
 8004dda:	f104 0a19 	add.w	sl, r4, #25
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	f8d9 2000 	ldr.w	r2, [r9]
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	42ab      	cmp	r3, r5
 8004de8:	dc29      	bgt.n	8004e3e <_printf_common+0xa6>
 8004dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	3300      	adds	r3, #0
 8004df2:	bf18      	it	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	0692      	lsls	r2, r2, #26
 8004df8:	d42e      	bmi.n	8004e58 <_printf_common+0xc0>
 8004dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dfe:	4639      	mov	r1, r7
 8004e00:	4630      	mov	r0, r6
 8004e02:	47c0      	blx	r8
 8004e04:	3001      	adds	r0, #1
 8004e06:	d021      	beq.n	8004e4c <_printf_common+0xb4>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	68e5      	ldr	r5, [r4, #12]
 8004e0c:	f003 0306 	and.w	r3, r3, #6
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	bf18      	it	ne
 8004e14:	2500      	movne	r5, #0
 8004e16:	f8d9 2000 	ldr.w	r2, [r9]
 8004e1a:	f04f 0900 	mov.w	r9, #0
 8004e1e:	bf08      	it	eq
 8004e20:	1aad      	subeq	r5, r5, r2
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	bf08      	it	eq
 8004e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	bfc4      	itt	gt
 8004e30:	1a9b      	subgt	r3, r3, r2
 8004e32:	18ed      	addgt	r5, r5, r3
 8004e34:	341a      	adds	r4, #26
 8004e36:	454d      	cmp	r5, r9
 8004e38:	d11a      	bne.n	8004e70 <_printf_common+0xd8>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e008      	b.n	8004e50 <_printf_common+0xb8>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4639      	mov	r1, r7
 8004e44:	4630      	mov	r0, r6
 8004e46:	47c0      	blx	r8
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_printf_common+0xbc>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7c2      	b.n	8004dde <_printf_common+0x46>
 8004e58:	2030      	movs	r0, #48	; 0x30
 8004e5a:	18e1      	adds	r1, r4, r3
 8004e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e66:	4422      	add	r2, r4
 8004e68:	3302      	adds	r3, #2
 8004e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e6e:	e7c4      	b.n	8004dfa <_printf_common+0x62>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4622      	mov	r2, r4
 8004e74:	4639      	mov	r1, r7
 8004e76:	4630      	mov	r0, r6
 8004e78:	47c0      	blx	r8
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d0e6      	beq.n	8004e4c <_printf_common+0xb4>
 8004e7e:	f109 0901 	add.w	r9, r9, #1
 8004e82:	e7d8      	b.n	8004e36 <_printf_common+0x9e>

08004e84 <_printf_i>:
 8004e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	7e09      	ldrb	r1, [r1, #24]
 8004e90:	b085      	sub	sp, #20
 8004e92:	296e      	cmp	r1, #110	; 0x6e
 8004e94:	4617      	mov	r7, r2
 8004e96:	4606      	mov	r6, r0
 8004e98:	4698      	mov	r8, r3
 8004e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e9c:	f000 80b3 	beq.w	8005006 <_printf_i+0x182>
 8004ea0:	d822      	bhi.n	8004ee8 <_printf_i+0x64>
 8004ea2:	2963      	cmp	r1, #99	; 0x63
 8004ea4:	d036      	beq.n	8004f14 <_printf_i+0x90>
 8004ea6:	d80a      	bhi.n	8004ebe <_printf_i+0x3a>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	f000 80b9 	beq.w	8005020 <_printf_i+0x19c>
 8004eae:	2958      	cmp	r1, #88	; 0x58
 8004eb0:	f000 8083 	beq.w	8004fba <_printf_i+0x136>
 8004eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ebc:	e032      	b.n	8004f24 <_printf_i+0xa0>
 8004ebe:	2964      	cmp	r1, #100	; 0x64
 8004ec0:	d001      	beq.n	8004ec6 <_printf_i+0x42>
 8004ec2:	2969      	cmp	r1, #105	; 0x69
 8004ec4:	d1f6      	bne.n	8004eb4 <_printf_i+0x30>
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	0605      	lsls	r5, r0, #24
 8004ecc:	f103 0104 	add.w	r1, r3, #4
 8004ed0:	d52a      	bpl.n	8004f28 <_printf_i+0xa4>
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da03      	bge.n	8004ee2 <_printf_i+0x5e>
 8004eda:	222d      	movs	r2, #45	; 0x2d
 8004edc:	425b      	negs	r3, r3
 8004ede:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ee2:	486f      	ldr	r0, [pc, #444]	; (80050a0 <_printf_i+0x21c>)
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	e039      	b.n	8004f5c <_printf_i+0xd8>
 8004ee8:	2973      	cmp	r1, #115	; 0x73
 8004eea:	f000 809d 	beq.w	8005028 <_printf_i+0x1a4>
 8004eee:	d808      	bhi.n	8004f02 <_printf_i+0x7e>
 8004ef0:	296f      	cmp	r1, #111	; 0x6f
 8004ef2:	d020      	beq.n	8004f36 <_printf_i+0xb2>
 8004ef4:	2970      	cmp	r1, #112	; 0x70
 8004ef6:	d1dd      	bne.n	8004eb4 <_printf_i+0x30>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e003      	b.n	8004f0a <_printf_i+0x86>
 8004f02:	2975      	cmp	r1, #117	; 0x75
 8004f04:	d017      	beq.n	8004f36 <_printf_i+0xb2>
 8004f06:	2978      	cmp	r1, #120	; 0x78
 8004f08:	d1d4      	bne.n	8004eb4 <_printf_i+0x30>
 8004f0a:	2378      	movs	r3, #120	; 0x78
 8004f0c:	4865      	ldr	r0, [pc, #404]	; (80050a4 <_printf_i+0x220>)
 8004f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f12:	e055      	b.n	8004fc0 <_printf_i+0x13c>
 8004f14:	6813      	ldr	r3, [r2, #0]
 8004f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f1a:	1d19      	adds	r1, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6011      	str	r1, [r2, #0]
 8004f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f24:	2301      	movs	r3, #1
 8004f26:	e08c      	b.n	8005042 <_printf_i+0x1be>
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f2e:	6011      	str	r1, [r2, #0]
 8004f30:	bf18      	it	ne
 8004f32:	b21b      	sxthne	r3, r3
 8004f34:	e7cf      	b.n	8004ed6 <_printf_i+0x52>
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	6825      	ldr	r5, [r4, #0]
 8004f3a:	1d18      	adds	r0, r3, #4
 8004f3c:	6010      	str	r0, [r2, #0]
 8004f3e:	0628      	lsls	r0, r5, #24
 8004f40:	d501      	bpl.n	8004f46 <_printf_i+0xc2>
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <_printf_i+0xc8>
 8004f46:	0668      	lsls	r0, r5, #25
 8004f48:	d5fb      	bpl.n	8004f42 <_printf_i+0xbe>
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	296f      	cmp	r1, #111	; 0x6f
 8004f4e:	bf14      	ite	ne
 8004f50:	220a      	movne	r2, #10
 8004f52:	2208      	moveq	r2, #8
 8004f54:	4852      	ldr	r0, [pc, #328]	; (80050a0 <_printf_i+0x21c>)
 8004f56:	2100      	movs	r1, #0
 8004f58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f5c:	6865      	ldr	r5, [r4, #4]
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	60a5      	str	r5, [r4, #8]
 8004f62:	f2c0 8095 	blt.w	8005090 <_printf_i+0x20c>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	f021 0104 	bic.w	r1, r1, #4
 8004f6c:	6021      	str	r1, [r4, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d13d      	bne.n	8004fee <_printf_i+0x16a>
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	f040 808e 	bne.w	8005094 <_printf_i+0x210>
 8004f78:	4665      	mov	r5, ip
 8004f7a:	2a08      	cmp	r2, #8
 8004f7c:	d10b      	bne.n	8004f96 <_printf_i+0x112>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	07db      	lsls	r3, r3, #31
 8004f82:	d508      	bpl.n	8004f96 <_printf_i+0x112>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	6862      	ldr	r2, [r4, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bfde      	ittt	le
 8004f8c:	2330      	movle	r3, #48	; 0x30
 8004f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f96:	ebac 0305 	sub.w	r3, ip, r5
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	f8cd 8000 	str.w	r8, [sp]
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	aa03      	add	r2, sp, #12
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f7ff fef6 	bl	8004d98 <_printf_common>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d14d      	bne.n	800504c <_printf_i+0x1c8>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b005      	add	sp, #20
 8004fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fba:	4839      	ldr	r0, [pc, #228]	; (80050a0 <_printf_i+0x21c>)
 8004fbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1d1d      	adds	r5, r3, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6015      	str	r5, [r2, #0]
 8004fca:	060a      	lsls	r2, r1, #24
 8004fcc:	d50b      	bpl.n	8004fe6 <_printf_i+0x162>
 8004fce:	07ca      	lsls	r2, r1, #31
 8004fd0:	bf44      	itt	mi
 8004fd2:	f041 0120 	orrmi.w	r1, r1, #32
 8004fd6:	6021      	strmi	r1, [r4, #0]
 8004fd8:	b91b      	cbnz	r3, 8004fe2 <_printf_i+0x15e>
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	f022 0220 	bic.w	r2, r2, #32
 8004fe0:	6022      	str	r2, [r4, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	e7b7      	b.n	8004f56 <_printf_i+0xd2>
 8004fe6:	064d      	lsls	r5, r1, #25
 8004fe8:	bf48      	it	mi
 8004fea:	b29b      	uxthmi	r3, r3
 8004fec:	e7ef      	b.n	8004fce <_printf_i+0x14a>
 8004fee:	4665      	mov	r5, ip
 8004ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ff4:	fb02 3311 	mls	r3, r2, r1, r3
 8004ff8:	5cc3      	ldrb	r3, [r0, r3]
 8004ffa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ffe:	460b      	mov	r3, r1
 8005000:	2900      	cmp	r1, #0
 8005002:	d1f5      	bne.n	8004ff0 <_printf_i+0x16c>
 8005004:	e7b9      	b.n	8004f7a <_printf_i+0xf6>
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	6825      	ldr	r5, [r4, #0]
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	6961      	ldr	r1, [r4, #20]
 800500e:	6010      	str	r0, [r2, #0]
 8005010:	0628      	lsls	r0, r5, #24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	d501      	bpl.n	800501a <_printf_i+0x196>
 8005016:	6019      	str	r1, [r3, #0]
 8005018:	e002      	b.n	8005020 <_printf_i+0x19c>
 800501a:	066a      	lsls	r2, r5, #25
 800501c:	d5fb      	bpl.n	8005016 <_printf_i+0x192>
 800501e:	8019      	strh	r1, [r3, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	4665      	mov	r5, ip
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	e7b9      	b.n	8004f9c <_printf_i+0x118>
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	1d19      	adds	r1, r3, #4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	681d      	ldr	r5, [r3, #0]
 8005030:	6862      	ldr	r2, [r4, #4]
 8005032:	2100      	movs	r1, #0
 8005034:	4628      	mov	r0, r5
 8005036:	f000 feb1 	bl	8005d9c <memchr>
 800503a:	b108      	cbz	r0, 8005040 <_printf_i+0x1bc>
 800503c:	1b40      	subs	r0, r0, r5
 800503e:	6060      	str	r0, [r4, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	2300      	movs	r3, #0
 8005046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504a:	e7a7      	b.n	8004f9c <_printf_i+0x118>
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	462a      	mov	r2, r5
 8005050:	4639      	mov	r1, r7
 8005052:	4630      	mov	r0, r6
 8005054:	47c0      	blx	r8
 8005056:	3001      	adds	r0, #1
 8005058:	d0aa      	beq.n	8004fb0 <_printf_i+0x12c>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	079b      	lsls	r3, r3, #30
 800505e:	d413      	bmi.n	8005088 <_printf_i+0x204>
 8005060:	68e0      	ldr	r0, [r4, #12]
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	4298      	cmp	r0, r3
 8005066:	bfb8      	it	lt
 8005068:	4618      	movlt	r0, r3
 800506a:	e7a3      	b.n	8004fb4 <_printf_i+0x130>
 800506c:	2301      	movs	r3, #1
 800506e:	464a      	mov	r2, r9
 8005070:	4639      	mov	r1, r7
 8005072:	4630      	mov	r0, r6
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d09a      	beq.n	8004fb0 <_printf_i+0x12c>
 800507a:	3501      	adds	r5, #1
 800507c:	68e3      	ldr	r3, [r4, #12]
 800507e:	9a03      	ldr	r2, [sp, #12]
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	42ab      	cmp	r3, r5
 8005084:	dcf2      	bgt.n	800506c <_printf_i+0x1e8>
 8005086:	e7eb      	b.n	8005060 <_printf_i+0x1dc>
 8005088:	2500      	movs	r5, #0
 800508a:	f104 0919 	add.w	r9, r4, #25
 800508e:	e7f5      	b.n	800507c <_printf_i+0x1f8>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ac      	bne.n	8004fee <_printf_i+0x16a>
 8005094:	7803      	ldrb	r3, [r0, #0]
 8005096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800509a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800509e:	e76c      	b.n	8004f7a <_printf_i+0xf6>
 80050a0:	080068d0 	.word	0x080068d0
 80050a4:	080068e1 	.word	0x080068e1

080050a8 <siprintf>:
 80050a8:	b40e      	push	{r1, r2, r3}
 80050aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050ae:	b500      	push	{lr}
 80050b0:	b09c      	sub	sp, #112	; 0x70
 80050b2:	ab1d      	add	r3, sp, #116	; 0x74
 80050b4:	9002      	str	r0, [sp, #8]
 80050b6:	9006      	str	r0, [sp, #24]
 80050b8:	9107      	str	r1, [sp, #28]
 80050ba:	9104      	str	r1, [sp, #16]
 80050bc:	4808      	ldr	r0, [pc, #32]	; (80050e0 <siprintf+0x38>)
 80050be:	4909      	ldr	r1, [pc, #36]	; (80050e4 <siprintf+0x3c>)
 80050c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c4:	9105      	str	r1, [sp, #20]
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	a902      	add	r1, sp, #8
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f001 fa6a 	bl	80065a4 <_svfiprintf_r>
 80050d0:	2200      	movs	r2, #0
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	b01c      	add	sp, #112	; 0x70
 80050d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050dc:	b003      	add	sp, #12
 80050de:	4770      	bx	lr
 80050e0:	20000000 	.word	0x20000000
 80050e4:	ffff0208 	.word	0xffff0208

080050e8 <quorem>:
 80050e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	6903      	ldr	r3, [r0, #16]
 80050ee:	690c      	ldr	r4, [r1, #16]
 80050f0:	4680      	mov	r8, r0
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	f2c0 8084 	blt.w	8005200 <quorem+0x118>
 80050f8:	3c01      	subs	r4, #1
 80050fa:	f101 0714 	add.w	r7, r1, #20
 80050fe:	f100 0614 	add.w	r6, r0, #20
 8005102:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005106:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800510a:	3501      	adds	r5, #1
 800510c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005110:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005114:	eb06 030c 	add.w	r3, r6, ip
 8005118:	eb07 090c 	add.w	r9, r7, ip
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	b39d      	cbz	r5, 8005188 <quorem+0xa0>
 8005120:	f04f 0a00 	mov.w	sl, #0
 8005124:	4638      	mov	r0, r7
 8005126:	46b6      	mov	lr, r6
 8005128:	46d3      	mov	fp, sl
 800512a:	f850 2b04 	ldr.w	r2, [r0], #4
 800512e:	b293      	uxth	r3, r2
 8005130:	fb05 a303 	mla	r3, r5, r3, sl
 8005134:	0c12      	lsrs	r2, r2, #16
 8005136:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800513a:	fb05 a202 	mla	r2, r5, r2, sl
 800513e:	b29b      	uxth	r3, r3
 8005140:	ebab 0303 	sub.w	r3, fp, r3
 8005144:	f8de b000 	ldr.w	fp, [lr]
 8005148:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800514c:	fa1f fb8b 	uxth.w	fp, fp
 8005150:	445b      	add	r3, fp
 8005152:	fa1f fb82 	uxth.w	fp, r2
 8005156:	f8de 2000 	ldr.w	r2, [lr]
 800515a:	4581      	cmp	r9, r0
 800515c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005164:	b29b      	uxth	r3, r3
 8005166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800516a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800516e:	f84e 3b04 	str.w	r3, [lr], #4
 8005172:	d2da      	bcs.n	800512a <quorem+0x42>
 8005174:	f856 300c 	ldr.w	r3, [r6, ip]
 8005178:	b933      	cbnz	r3, 8005188 <quorem+0xa0>
 800517a:	9b01      	ldr	r3, [sp, #4]
 800517c:	3b04      	subs	r3, #4
 800517e:	429e      	cmp	r6, r3
 8005180:	461a      	mov	r2, r3
 8005182:	d331      	bcc.n	80051e8 <quorem+0x100>
 8005184:	f8c8 4010 	str.w	r4, [r8, #16]
 8005188:	4640      	mov	r0, r8
 800518a:	f001 f835 	bl	80061f8 <__mcmp>
 800518e:	2800      	cmp	r0, #0
 8005190:	db26      	blt.n	80051e0 <quorem+0xf8>
 8005192:	4630      	mov	r0, r6
 8005194:	f04f 0c00 	mov.w	ip, #0
 8005198:	3501      	adds	r5, #1
 800519a:	f857 1b04 	ldr.w	r1, [r7], #4
 800519e:	f8d0 e000 	ldr.w	lr, [r0]
 80051a2:	b28b      	uxth	r3, r1
 80051a4:	ebac 0303 	sub.w	r3, ip, r3
 80051a8:	fa1f f28e 	uxth.w	r2, lr
 80051ac:	4413      	add	r3, r2
 80051ae:	0c0a      	lsrs	r2, r1, #16
 80051b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051be:	45b9      	cmp	r9, r7
 80051c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051c4:	f840 3b04 	str.w	r3, [r0], #4
 80051c8:	d2e7      	bcs.n	800519a <quorem+0xb2>
 80051ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051d2:	b92a      	cbnz	r2, 80051e0 <quorem+0xf8>
 80051d4:	3b04      	subs	r3, #4
 80051d6:	429e      	cmp	r6, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	d30b      	bcc.n	80051f4 <quorem+0x10c>
 80051dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80051e0:	4628      	mov	r0, r5
 80051e2:	b003      	add	sp, #12
 80051e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	3b04      	subs	r3, #4
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d1c9      	bne.n	8005184 <quorem+0x9c>
 80051f0:	3c01      	subs	r4, #1
 80051f2:	e7c4      	b.n	800517e <quorem+0x96>
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	3b04      	subs	r3, #4
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	d1ef      	bne.n	80051dc <quorem+0xf4>
 80051fc:	3c01      	subs	r4, #1
 80051fe:	e7ea      	b.n	80051d6 <quorem+0xee>
 8005200:	2000      	movs	r0, #0
 8005202:	e7ee      	b.n	80051e2 <quorem+0xfa>
 8005204:	0000      	movs	r0, r0
	...

08005208 <_dtoa_r>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	4616      	mov	r6, r2
 800520e:	461f      	mov	r7, r3
 8005210:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005212:	b095      	sub	sp, #84	; 0x54
 8005214:	4604      	mov	r4, r0
 8005216:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800521a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800521e:	b93d      	cbnz	r5, 8005230 <_dtoa_r+0x28>
 8005220:	2010      	movs	r0, #16
 8005222:	f000 fdb3 	bl	8005d8c <malloc>
 8005226:	6260      	str	r0, [r4, #36]	; 0x24
 8005228:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800522c:	6005      	str	r5, [r0, #0]
 800522e:	60c5      	str	r5, [r0, #12]
 8005230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	b151      	cbz	r1, 800524c <_dtoa_r+0x44>
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	2301      	movs	r3, #1
 800523a:	4093      	lsls	r3, r2
 800523c:	604a      	str	r2, [r1, #4]
 800523e:	608b      	str	r3, [r1, #8]
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fdf8 	bl	8005e36 <_Bfree>
 8005246:	2200      	movs	r2, #0
 8005248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	1e3b      	subs	r3, r7, #0
 800524e:	bfaf      	iteee	ge
 8005250:	2300      	movge	r3, #0
 8005252:	2201      	movlt	r2, #1
 8005254:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005258:	9303      	strlt	r3, [sp, #12]
 800525a:	bfac      	ite	ge
 800525c:	f8c8 3000 	strge.w	r3, [r8]
 8005260:	f8c8 2000 	strlt.w	r2, [r8]
 8005264:	4bae      	ldr	r3, [pc, #696]	; (8005520 <_dtoa_r+0x318>)
 8005266:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800526a:	ea33 0308 	bics.w	r3, r3, r8
 800526e:	d11b      	bne.n	80052a8 <_dtoa_r+0xa0>
 8005270:	f242 730f 	movw	r3, #9999	; 0x270f
 8005274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	b923      	cbnz	r3, 8005286 <_dtoa_r+0x7e>
 800527c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005280:	2800      	cmp	r0, #0
 8005282:	f000 8545 	beq.w	8005d10 <_dtoa_r+0xb08>
 8005286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005288:	b953      	cbnz	r3, 80052a0 <_dtoa_r+0x98>
 800528a:	4ba6      	ldr	r3, [pc, #664]	; (8005524 <_dtoa_r+0x31c>)
 800528c:	e021      	b.n	80052d2 <_dtoa_r+0xca>
 800528e:	4ba6      	ldr	r3, [pc, #664]	; (8005528 <_dtoa_r+0x320>)
 8005290:	9306      	str	r3, [sp, #24]
 8005292:	3308      	adds	r3, #8
 8005294:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	9806      	ldr	r0, [sp, #24]
 800529a:	b015      	add	sp, #84	; 0x54
 800529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a0:	4ba0      	ldr	r3, [pc, #640]	; (8005524 <_dtoa_r+0x31c>)
 80052a2:	9306      	str	r3, [sp, #24]
 80052a4:	3303      	adds	r3, #3
 80052a6:	e7f5      	b.n	8005294 <_dtoa_r+0x8c>
 80052a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2300      	movs	r3, #0
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	f7fb fb88 	bl	80009c8 <__aeabi_dcmpeq>
 80052b8:	4682      	mov	sl, r0
 80052ba:	b160      	cbz	r0, 80052d6 <_dtoa_r+0xce>
 80052bc:	2301      	movs	r3, #1
 80052be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8520 	beq.w	8005d0a <_dtoa_r+0xb02>
 80052ca:	4b98      	ldr	r3, [pc, #608]	; (800552c <_dtoa_r+0x324>)
 80052cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	9306      	str	r3, [sp, #24]
 80052d4:	e7e0      	b.n	8005298 <_dtoa_r+0x90>
 80052d6:	ab12      	add	r3, sp, #72	; 0x48
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	ab13      	add	r3, sp, #76	; 0x4c
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	4620      	mov	r0, r4
 80052e4:	f001 f800 	bl	80062e8 <__d2b>
 80052e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052ec:	4683      	mov	fp, r0
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	d07d      	beq.n	80053ee <_dtoa_r+0x1e6>
 80052f2:	46b0      	mov	r8, r6
 80052f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80052fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005300:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005304:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005308:	2200      	movs	r2, #0
 800530a:	4b89      	ldr	r3, [pc, #548]	; (8005530 <_dtoa_r+0x328>)
 800530c:	4640      	mov	r0, r8
 800530e:	4649      	mov	r1, r9
 8005310:	f7fa ff3a 	bl	8000188 <__aeabi_dsub>
 8005314:	a37c      	add	r3, pc, #496	; (adr r3, 8005508 <_dtoa_r+0x300>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb f8ed 	bl	80004f8 <__aeabi_dmul>
 800531e:	a37c      	add	r3, pc, #496	; (adr r3, 8005510 <_dtoa_r+0x308>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ff32 	bl	800018c <__adddf3>
 8005328:	4606      	mov	r6, r0
 800532a:	4628      	mov	r0, r5
 800532c:	460f      	mov	r7, r1
 800532e:	f7fb f879 	bl	8000424 <__aeabi_i2d>
 8005332:	a379      	add	r3, pc, #484	; (adr r3, 8005518 <_dtoa_r+0x310>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb f8de 	bl	80004f8 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f7fa ff22 	bl	800018c <__adddf3>
 8005348:	4606      	mov	r6, r0
 800534a:	460f      	mov	r7, r1
 800534c:	f7fb fb84 	bl	8000a58 <__aeabi_d2iz>
 8005350:	2200      	movs	r2, #0
 8005352:	4682      	mov	sl, r0
 8005354:	2300      	movs	r3, #0
 8005356:	4630      	mov	r0, r6
 8005358:	4639      	mov	r1, r7
 800535a:	f7fb fb3f 	bl	80009dc <__aeabi_dcmplt>
 800535e:	b148      	cbz	r0, 8005374 <_dtoa_r+0x16c>
 8005360:	4650      	mov	r0, sl
 8005362:	f7fb f85f 	bl	8000424 <__aeabi_i2d>
 8005366:	4632      	mov	r2, r6
 8005368:	463b      	mov	r3, r7
 800536a:	f7fb fb2d 	bl	80009c8 <__aeabi_dcmpeq>
 800536e:	b908      	cbnz	r0, 8005374 <_dtoa_r+0x16c>
 8005370:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005374:	f1ba 0f16 	cmp.w	sl, #22
 8005378:	d85a      	bhi.n	8005430 <_dtoa_r+0x228>
 800537a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800537e:	496d      	ldr	r1, [pc, #436]	; (8005534 <_dtoa_r+0x32c>)
 8005380:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005388:	f7fb fb46 	bl	8000a18 <__aeabi_dcmpgt>
 800538c:	2800      	cmp	r0, #0
 800538e:	d051      	beq.n	8005434 <_dtoa_r+0x22c>
 8005390:	2300      	movs	r3, #0
 8005392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005396:	930d      	str	r3, [sp, #52]	; 0x34
 8005398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800539a:	1b5d      	subs	r5, r3, r5
 800539c:	1e6b      	subs	r3, r5, #1
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	bf43      	ittte	mi
 80053a2:	2300      	movmi	r3, #0
 80053a4:	f1c5 0901 	rsbmi	r9, r5, #1
 80053a8:	9307      	strmi	r3, [sp, #28]
 80053aa:	f04f 0900 	movpl.w	r9, #0
 80053ae:	f1ba 0f00 	cmp.w	sl, #0
 80053b2:	db41      	blt.n	8005438 <_dtoa_r+0x230>
 80053b4:	9b07      	ldr	r3, [sp, #28]
 80053b6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80053ba:	4453      	add	r3, sl
 80053bc:	9307      	str	r3, [sp, #28]
 80053be:	2300      	movs	r3, #0
 80053c0:	9308      	str	r3, [sp, #32]
 80053c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053c4:	2b09      	cmp	r3, #9
 80053c6:	f200 808f 	bhi.w	80054e8 <_dtoa_r+0x2e0>
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	bfc4      	itt	gt
 80053ce:	3b04      	subgt	r3, #4
 80053d0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80053d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053d4:	bfc8      	it	gt
 80053d6:	2500      	movgt	r5, #0
 80053d8:	f1a3 0302 	sub.w	r3, r3, #2
 80053dc:	bfd8      	it	le
 80053de:	2501      	movle	r5, #1
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	f200 808d 	bhi.w	8005500 <_dtoa_r+0x2f8>
 80053e6:	e8df f003 	tbb	[pc, r3]
 80053ea:	7d7b      	.short	0x7d7b
 80053ec:	6f2f      	.short	0x6f2f
 80053ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80053f2:	441d      	add	r5, r3
 80053f4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053f8:	2820      	cmp	r0, #32
 80053fa:	dd13      	ble.n	8005424 <_dtoa_r+0x21c>
 80053fc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005400:	9b02      	ldr	r3, [sp, #8]
 8005402:	fa08 f800 	lsl.w	r8, r8, r0
 8005406:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800540a:	fa23 f000 	lsr.w	r0, r3, r0
 800540e:	ea48 0000 	orr.w	r0, r8, r0
 8005412:	f7fa fff7 	bl	8000404 <__aeabi_ui2d>
 8005416:	2301      	movs	r3, #1
 8005418:	4680      	mov	r8, r0
 800541a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800541e:	3d01      	subs	r5, #1
 8005420:	9310      	str	r3, [sp, #64]	; 0x40
 8005422:	e771      	b.n	8005308 <_dtoa_r+0x100>
 8005424:	9b02      	ldr	r3, [sp, #8]
 8005426:	f1c0 0020 	rsb	r0, r0, #32
 800542a:	fa03 f000 	lsl.w	r0, r3, r0
 800542e:	e7f0      	b.n	8005412 <_dtoa_r+0x20a>
 8005430:	2301      	movs	r3, #1
 8005432:	e7b0      	b.n	8005396 <_dtoa_r+0x18e>
 8005434:	900d      	str	r0, [sp, #52]	; 0x34
 8005436:	e7af      	b.n	8005398 <_dtoa_r+0x190>
 8005438:	f1ca 0300 	rsb	r3, sl, #0
 800543c:	9308      	str	r3, [sp, #32]
 800543e:	2300      	movs	r3, #0
 8005440:	eba9 090a 	sub.w	r9, r9, sl
 8005444:	930c      	str	r3, [sp, #48]	; 0x30
 8005446:	e7bc      	b.n	80053c2 <_dtoa_r+0x1ba>
 8005448:	2301      	movs	r3, #1
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd74      	ble.n	800553c <_dtoa_r+0x334>
 8005452:	4698      	mov	r8, r3
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	2200      	movs	r2, #0
 8005458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800545a:	6072      	str	r2, [r6, #4]
 800545c:	2204      	movs	r2, #4
 800545e:	f102 0014 	add.w	r0, r2, #20
 8005462:	4298      	cmp	r0, r3
 8005464:	6871      	ldr	r1, [r6, #4]
 8005466:	d96e      	bls.n	8005546 <_dtoa_r+0x33e>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fcb0 	bl	8005dce <_Balloc>
 800546e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005470:	6030      	str	r0, [r6, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f1b8 0f0e 	cmp.w	r8, #14
 8005478:	9306      	str	r3, [sp, #24]
 800547a:	f200 80ed 	bhi.w	8005658 <_dtoa_r+0x450>
 800547e:	2d00      	cmp	r5, #0
 8005480:	f000 80ea 	beq.w	8005658 <_dtoa_r+0x450>
 8005484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005488:	f1ba 0f00 	cmp.w	sl, #0
 800548c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005490:	dd77      	ble.n	8005582 <_dtoa_r+0x37a>
 8005492:	4a28      	ldr	r2, [pc, #160]	; (8005534 <_dtoa_r+0x32c>)
 8005494:	f00a 030f 	and.w	r3, sl, #15
 8005498:	ea4f 162a 	mov.w	r6, sl, asr #4
 800549c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054a0:	06f0      	lsls	r0, r6, #27
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054aa:	d568      	bpl.n	800557e <_dtoa_r+0x376>
 80054ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <_dtoa_r+0x330>)
 80054b2:	2503      	movs	r5, #3
 80054b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b8:	f7fb f948 	bl	800074c <__aeabi_ddiv>
 80054bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c0:	f006 060f 	and.w	r6, r6, #15
 80054c4:	4f1c      	ldr	r7, [pc, #112]	; (8005538 <_dtoa_r+0x330>)
 80054c6:	e04f      	b.n	8005568 <_dtoa_r+0x360>
 80054c8:	2301      	movs	r3, #1
 80054ca:	9309      	str	r3, [sp, #36]	; 0x24
 80054cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054ce:	4453      	add	r3, sl
 80054d0:	f103 0801 	add.w	r8, r3, #1
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	4643      	mov	r3, r8
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bfb8      	it	lt
 80054dc:	2301      	movlt	r3, #1
 80054de:	e7ba      	b.n	8005456 <_dtoa_r+0x24e>
 80054e0:	2300      	movs	r3, #0
 80054e2:	e7b2      	b.n	800544a <_dtoa_r+0x242>
 80054e4:	2300      	movs	r3, #0
 80054e6:	e7f0      	b.n	80054ca <_dtoa_r+0x2c2>
 80054e8:	2501      	movs	r5, #1
 80054ea:	2300      	movs	r3, #0
 80054ec:	9509      	str	r5, [sp, #36]	; 0x24
 80054ee:	931e      	str	r3, [sp, #120]	; 0x78
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	2200      	movs	r2, #0
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	4698      	mov	r8, r3
 80054fa:	2312      	movs	r3, #18
 80054fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80054fe:	e7aa      	b.n	8005456 <_dtoa_r+0x24e>
 8005500:	2301      	movs	r3, #1
 8005502:	9309      	str	r3, [sp, #36]	; 0x24
 8005504:	e7f4      	b.n	80054f0 <_dtoa_r+0x2e8>
 8005506:	bf00      	nop
 8005508:	636f4361 	.word	0x636f4361
 800550c:	3fd287a7 	.word	0x3fd287a7
 8005510:	8b60c8b3 	.word	0x8b60c8b3
 8005514:	3fc68a28 	.word	0x3fc68a28
 8005518:	509f79fb 	.word	0x509f79fb
 800551c:	3fd34413 	.word	0x3fd34413
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	080068fb 	.word	0x080068fb
 8005528:	080068f2 	.word	0x080068f2
 800552c:	080068cf 	.word	0x080068cf
 8005530:	3ff80000 	.word	0x3ff80000
 8005534:	08006928 	.word	0x08006928
 8005538:	08006900 	.word	0x08006900
 800553c:	2301      	movs	r3, #1
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	4698      	mov	r8, r3
 8005542:	461a      	mov	r2, r3
 8005544:	e7da      	b.n	80054fc <_dtoa_r+0x2f4>
 8005546:	3101      	adds	r1, #1
 8005548:	6071      	str	r1, [r6, #4]
 800554a:	0052      	lsls	r2, r2, #1
 800554c:	e787      	b.n	800545e <_dtoa_r+0x256>
 800554e:	07f1      	lsls	r1, r6, #31
 8005550:	d508      	bpl.n	8005564 <_dtoa_r+0x35c>
 8005552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800555a:	f7fa ffcd 	bl	80004f8 <__aeabi_dmul>
 800555e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005562:	3501      	adds	r5, #1
 8005564:	1076      	asrs	r6, r6, #1
 8005566:	3708      	adds	r7, #8
 8005568:	2e00      	cmp	r6, #0
 800556a:	d1f0      	bne.n	800554e <_dtoa_r+0x346>
 800556c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005574:	f7fb f8ea 	bl	800074c <__aeabi_ddiv>
 8005578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800557c:	e01b      	b.n	80055b6 <_dtoa_r+0x3ae>
 800557e:	2502      	movs	r5, #2
 8005580:	e7a0      	b.n	80054c4 <_dtoa_r+0x2bc>
 8005582:	f000 80a4 	beq.w	80056ce <_dtoa_r+0x4c6>
 8005586:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800558a:	f1ca 0600 	rsb	r6, sl, #0
 800558e:	4ba0      	ldr	r3, [pc, #640]	; (8005810 <_dtoa_r+0x608>)
 8005590:	f006 020f 	and.w	r2, r6, #15
 8005594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fa ffac 	bl	80004f8 <__aeabi_dmul>
 80055a0:	2502      	movs	r5, #2
 80055a2:	2300      	movs	r3, #0
 80055a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055a8:	4f9a      	ldr	r7, [pc, #616]	; (8005814 <_dtoa_r+0x60c>)
 80055aa:	1136      	asrs	r6, r6, #4
 80055ac:	2e00      	cmp	r6, #0
 80055ae:	f040 8083 	bne.w	80056b8 <_dtoa_r+0x4b0>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e0      	bne.n	8005578 <_dtoa_r+0x370>
 80055b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 808a 	beq.w	80056d2 <_dtoa_r+0x4ca>
 80055be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b92      	ldr	r3, [pc, #584]	; (8005818 <_dtoa_r+0x610>)
 80055ce:	f7fb fa05 	bl	80009dc <__aeabi_dcmplt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d07d      	beq.n	80056d2 <_dtoa_r+0x4ca>
 80055d6:	f1b8 0f00 	cmp.w	r8, #0
 80055da:	d07a      	beq.n	80056d2 <_dtoa_r+0x4ca>
 80055dc:	9b04      	ldr	r3, [sp, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd36      	ble.n	8005650 <_dtoa_r+0x448>
 80055e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055e6:	2200      	movs	r2, #0
 80055e8:	4b8c      	ldr	r3, [pc, #560]	; (800581c <_dtoa_r+0x614>)
 80055ea:	f7fa ff85 	bl	80004f8 <__aeabi_dmul>
 80055ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f2:	9e04      	ldr	r6, [sp, #16]
 80055f4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80055f8:	3501      	adds	r5, #1
 80055fa:	4628      	mov	r0, r5
 80055fc:	f7fa ff12 	bl	8000424 <__aeabi_i2d>
 8005600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005604:	f7fa ff78 	bl	80004f8 <__aeabi_dmul>
 8005608:	2200      	movs	r2, #0
 800560a:	4b85      	ldr	r3, [pc, #532]	; (8005820 <_dtoa_r+0x618>)
 800560c:	f7fa fdbe 	bl	800018c <__adddf3>
 8005610:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005614:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005618:	950b      	str	r5, [sp, #44]	; 0x2c
 800561a:	2e00      	cmp	r6, #0
 800561c:	d15c      	bne.n	80056d8 <_dtoa_r+0x4d0>
 800561e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	4b7f      	ldr	r3, [pc, #508]	; (8005824 <_dtoa_r+0x61c>)
 8005626:	f7fa fdaf 	bl	8000188 <__aeabi_dsub>
 800562a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800562c:	462b      	mov	r3, r5
 800562e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005632:	f7fb f9f1 	bl	8000a18 <__aeabi_dcmpgt>
 8005636:	2800      	cmp	r0, #0
 8005638:	f040 8281 	bne.w	8005b3e <_dtoa_r+0x936>
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005642:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005646:	f7fb f9c9 	bl	80009dc <__aeabi_dcmplt>
 800564a:	2800      	cmp	r0, #0
 800564c:	f040 8275 	bne.w	8005b3a <_dtoa_r+0x932>
 8005650:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800565a:	2b00      	cmp	r3, #0
 800565c:	f2c0 814b 	blt.w	80058f6 <_dtoa_r+0x6ee>
 8005660:	f1ba 0f0e 	cmp.w	sl, #14
 8005664:	f300 8147 	bgt.w	80058f6 <_dtoa_r+0x6ee>
 8005668:	4b69      	ldr	r3, [pc, #420]	; (8005810 <_dtoa_r+0x608>)
 800566a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005676:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005678:	2b00      	cmp	r3, #0
 800567a:	f280 80d7 	bge.w	800582c <_dtoa_r+0x624>
 800567e:	f1b8 0f00 	cmp.w	r8, #0
 8005682:	f300 80d3 	bgt.w	800582c <_dtoa_r+0x624>
 8005686:	f040 8257 	bne.w	8005b38 <_dtoa_r+0x930>
 800568a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800568e:	2200      	movs	r2, #0
 8005690:	4b64      	ldr	r3, [pc, #400]	; (8005824 <_dtoa_r+0x61c>)
 8005692:	f7fa ff31 	bl	80004f8 <__aeabi_dmul>
 8005696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800569a:	f7fb f9b3 	bl	8000a04 <__aeabi_dcmpge>
 800569e:	4646      	mov	r6, r8
 80056a0:	4647      	mov	r7, r8
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 822d 	bne.w	8005b02 <_dtoa_r+0x8fa>
 80056a8:	9b06      	ldr	r3, [sp, #24]
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	1c5d      	adds	r5, r3, #1
 80056ae:	2331      	movs	r3, #49	; 0x31
 80056b0:	f10a 0a01 	add.w	sl, sl, #1
 80056b4:	7013      	strb	r3, [r2, #0]
 80056b6:	e228      	b.n	8005b0a <_dtoa_r+0x902>
 80056b8:	07f2      	lsls	r2, r6, #31
 80056ba:	d505      	bpl.n	80056c8 <_dtoa_r+0x4c0>
 80056bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c0:	f7fa ff1a 	bl	80004f8 <__aeabi_dmul>
 80056c4:	2301      	movs	r3, #1
 80056c6:	3501      	adds	r5, #1
 80056c8:	1076      	asrs	r6, r6, #1
 80056ca:	3708      	adds	r7, #8
 80056cc:	e76e      	b.n	80055ac <_dtoa_r+0x3a4>
 80056ce:	2502      	movs	r5, #2
 80056d0:	e771      	b.n	80055b6 <_dtoa_r+0x3ae>
 80056d2:	4657      	mov	r7, sl
 80056d4:	4646      	mov	r6, r8
 80056d6:	e790      	b.n	80055fa <_dtoa_r+0x3f2>
 80056d8:	4b4d      	ldr	r3, [pc, #308]	; (8005810 <_dtoa_r+0x608>)
 80056da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80056e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d048      	beq.n	800577a <_dtoa_r+0x572>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	2000      	movs	r0, #0
 80056ee:	494e      	ldr	r1, [pc, #312]	; (8005828 <_dtoa_r+0x620>)
 80056f0:	f7fb f82c 	bl	800074c <__aeabi_ddiv>
 80056f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056f8:	f7fa fd46 	bl	8000188 <__aeabi_dsub>
 80056fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005700:	9d06      	ldr	r5, [sp, #24]
 8005702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005706:	f7fb f9a7 	bl	8000a58 <__aeabi_d2iz>
 800570a:	9011      	str	r0, [sp, #68]	; 0x44
 800570c:	f7fa fe8a 	bl	8000424 <__aeabi_i2d>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005718:	f7fa fd36 	bl	8000188 <__aeabi_dsub>
 800571c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800571e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005722:	3330      	adds	r3, #48	; 0x30
 8005724:	f805 3b01 	strb.w	r3, [r5], #1
 8005728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800572c:	f7fb f956 	bl	80009dc <__aeabi_dcmplt>
 8005730:	2800      	cmp	r0, #0
 8005732:	d163      	bne.n	80057fc <_dtoa_r+0x5f4>
 8005734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005738:	2000      	movs	r0, #0
 800573a:	4937      	ldr	r1, [pc, #220]	; (8005818 <_dtoa_r+0x610>)
 800573c:	f7fa fd24 	bl	8000188 <__aeabi_dsub>
 8005740:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005744:	f7fb f94a 	bl	80009dc <__aeabi_dcmplt>
 8005748:	2800      	cmp	r0, #0
 800574a:	f040 80b5 	bne.w	80058b8 <_dtoa_r+0x6b0>
 800574e:	9b06      	ldr	r3, [sp, #24]
 8005750:	1aeb      	subs	r3, r5, r3
 8005752:	429e      	cmp	r6, r3
 8005754:	f77f af7c 	ble.w	8005650 <_dtoa_r+0x448>
 8005758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800575c:	2200      	movs	r2, #0
 800575e:	4b2f      	ldr	r3, [pc, #188]	; (800581c <_dtoa_r+0x614>)
 8005760:	f7fa feca 	bl	80004f8 <__aeabi_dmul>
 8005764:	2200      	movs	r2, #0
 8005766:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800576a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <_dtoa_r+0x614>)
 8005770:	f7fa fec2 	bl	80004f8 <__aeabi_dmul>
 8005774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005778:	e7c3      	b.n	8005702 <_dtoa_r+0x4fa>
 800577a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800577e:	f7fa febb 	bl	80004f8 <__aeabi_dmul>
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005788:	199d      	adds	r5, r3, r6
 800578a:	461e      	mov	r6, r3
 800578c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005790:	f7fb f962 	bl	8000a58 <__aeabi_d2iz>
 8005794:	9011      	str	r0, [sp, #68]	; 0x44
 8005796:	f7fa fe45 	bl	8000424 <__aeabi_i2d>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a2:	f7fa fcf1 	bl	8000188 <__aeabi_dsub>
 80057a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ac:	3330      	adds	r3, #48	; 0x30
 80057ae:	f806 3b01 	strb.w	r3, [r6], #1
 80057b2:	42ae      	cmp	r6, r5
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	d124      	bne.n	8005804 <_dtoa_r+0x5fc>
 80057ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <_dtoa_r+0x620>)
 80057c0:	f7fa fce4 	bl	800018c <__adddf3>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057cc:	f7fb f924 	bl	8000a18 <__aeabi_dcmpgt>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d171      	bne.n	80058b8 <_dtoa_r+0x6b0>
 80057d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057d8:	2000      	movs	r0, #0
 80057da:	4913      	ldr	r1, [pc, #76]	; (8005828 <_dtoa_r+0x620>)
 80057dc:	f7fa fcd4 	bl	8000188 <__aeabi_dsub>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e8:	f7fb f8f8 	bl	80009dc <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f43f af2f 	beq.w	8005650 <_dtoa_r+0x448>
 80057f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057f6:	1e6a      	subs	r2, r5, #1
 80057f8:	2b30      	cmp	r3, #48	; 0x30
 80057fa:	d001      	beq.n	8005800 <_dtoa_r+0x5f8>
 80057fc:	46ba      	mov	sl, r7
 80057fe:	e04a      	b.n	8005896 <_dtoa_r+0x68e>
 8005800:	4615      	mov	r5, r2
 8005802:	e7f6      	b.n	80057f2 <_dtoa_r+0x5ea>
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <_dtoa_r+0x614>)
 8005806:	f7fa fe77 	bl	80004f8 <__aeabi_dmul>
 800580a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580e:	e7bd      	b.n	800578c <_dtoa_r+0x584>
 8005810:	08006928 	.word	0x08006928
 8005814:	08006900 	.word	0x08006900
 8005818:	3ff00000 	.word	0x3ff00000
 800581c:	40240000 	.word	0x40240000
 8005820:	401c0000 	.word	0x401c0000
 8005824:	40140000 	.word	0x40140000
 8005828:	3fe00000 	.word	0x3fe00000
 800582c:	9d06      	ldr	r5, [sp, #24]
 800582e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa ff87 	bl	800074c <__aeabi_ddiv>
 800583e:	f7fb f90b 	bl	8000a58 <__aeabi_d2iz>
 8005842:	4681      	mov	r9, r0
 8005844:	f7fa fdee 	bl	8000424 <__aeabi_i2d>
 8005848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800584c:	f7fa fe54 	bl	80004f8 <__aeabi_dmul>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fa fc96 	bl	8000188 <__aeabi_dsub>
 800585c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005860:	f805 6b01 	strb.w	r6, [r5], #1
 8005864:	9e06      	ldr	r6, [sp, #24]
 8005866:	4602      	mov	r2, r0
 8005868:	1bae      	subs	r6, r5, r6
 800586a:	45b0      	cmp	r8, r6
 800586c:	460b      	mov	r3, r1
 800586e:	d135      	bne.n	80058dc <_dtoa_r+0x6d4>
 8005870:	f7fa fc8c 	bl	800018c <__adddf3>
 8005874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005878:	4606      	mov	r6, r0
 800587a:	460f      	mov	r7, r1
 800587c:	f7fb f8cc 	bl	8000a18 <__aeabi_dcmpgt>
 8005880:	b9c8      	cbnz	r0, 80058b6 <_dtoa_r+0x6ae>
 8005882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005886:	4630      	mov	r0, r6
 8005888:	4639      	mov	r1, r7
 800588a:	f7fb f89d 	bl	80009c8 <__aeabi_dcmpeq>
 800588e:	b110      	cbz	r0, 8005896 <_dtoa_r+0x68e>
 8005890:	f019 0f01 	tst.w	r9, #1
 8005894:	d10f      	bne.n	80058b6 <_dtoa_r+0x6ae>
 8005896:	4659      	mov	r1, fp
 8005898:	4620      	mov	r0, r4
 800589a:	f000 facc 	bl	8005e36 <_Bfree>
 800589e:	2300      	movs	r3, #0
 80058a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058a2:	702b      	strb	r3, [r5, #0]
 80058a4:	f10a 0301 	add.w	r3, sl, #1
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f43f acf3 	beq.w	8005298 <_dtoa_r+0x90>
 80058b2:	601d      	str	r5, [r3, #0]
 80058b4:	e4f0      	b.n	8005298 <_dtoa_r+0x90>
 80058b6:	4657      	mov	r7, sl
 80058b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058bc:	1e6b      	subs	r3, r5, #1
 80058be:	2a39      	cmp	r2, #57	; 0x39
 80058c0:	d106      	bne.n	80058d0 <_dtoa_r+0x6c8>
 80058c2:	9a06      	ldr	r2, [sp, #24]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d107      	bne.n	80058d8 <_dtoa_r+0x6d0>
 80058c8:	2330      	movs	r3, #48	; 0x30
 80058ca:	7013      	strb	r3, [r2, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	3701      	adds	r7, #1
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	3201      	adds	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e791      	b.n	80057fc <_dtoa_r+0x5f4>
 80058d8:	461d      	mov	r5, r3
 80058da:	e7ed      	b.n	80058b8 <_dtoa_r+0x6b0>
 80058dc:	2200      	movs	r2, #0
 80058de:	4b99      	ldr	r3, [pc, #612]	; (8005b44 <_dtoa_r+0x93c>)
 80058e0:	f7fa fe0a 	bl	80004f8 <__aeabi_dmul>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	4606      	mov	r6, r0
 80058ea:	460f      	mov	r7, r1
 80058ec:	f7fb f86c 	bl	80009c8 <__aeabi_dcmpeq>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d09e      	beq.n	8005832 <_dtoa_r+0x62a>
 80058f4:	e7cf      	b.n	8005896 <_dtoa_r+0x68e>
 80058f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	f000 8088 	beq.w	8005a0e <_dtoa_r+0x806>
 80058fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005900:	2a01      	cmp	r2, #1
 8005902:	dc6d      	bgt.n	80059e0 <_dtoa_r+0x7d8>
 8005904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005906:	2a00      	cmp	r2, #0
 8005908:	d066      	beq.n	80059d8 <_dtoa_r+0x7d0>
 800590a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800590e:	464d      	mov	r5, r9
 8005910:	9e08      	ldr	r6, [sp, #32]
 8005912:	9a07      	ldr	r2, [sp, #28]
 8005914:	2101      	movs	r1, #1
 8005916:	441a      	add	r2, r3
 8005918:	4620      	mov	r0, r4
 800591a:	4499      	add	r9, r3
 800591c:	9207      	str	r2, [sp, #28]
 800591e:	f000 fb2a 	bl	8005f76 <__i2b>
 8005922:	4607      	mov	r7, r0
 8005924:	2d00      	cmp	r5, #0
 8005926:	dd0b      	ble.n	8005940 <_dtoa_r+0x738>
 8005928:	9b07      	ldr	r3, [sp, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd08      	ble.n	8005940 <_dtoa_r+0x738>
 800592e:	42ab      	cmp	r3, r5
 8005930:	bfa8      	it	ge
 8005932:	462b      	movge	r3, r5
 8005934:	9a07      	ldr	r2, [sp, #28]
 8005936:	eba9 0903 	sub.w	r9, r9, r3
 800593a:	1aed      	subs	r5, r5, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	b1eb      	cbz	r3, 8005980 <_dtoa_r+0x778>
 8005944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d065      	beq.n	8005a16 <_dtoa_r+0x80e>
 800594a:	b18e      	cbz	r6, 8005970 <_dtoa_r+0x768>
 800594c:	4639      	mov	r1, r7
 800594e:	4632      	mov	r2, r6
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fbaf 	bl	80060b4 <__pow5mult>
 8005956:	465a      	mov	r2, fp
 8005958:	4601      	mov	r1, r0
 800595a:	4607      	mov	r7, r0
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fb13 	bl	8005f88 <__multiply>
 8005962:	4659      	mov	r1, fp
 8005964:	900a      	str	r0, [sp, #40]	; 0x28
 8005966:	4620      	mov	r0, r4
 8005968:	f000 fa65 	bl	8005e36 <_Bfree>
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	469b      	mov	fp, r3
 8005970:	9b08      	ldr	r3, [sp, #32]
 8005972:	1b9a      	subs	r2, r3, r6
 8005974:	d004      	beq.n	8005980 <_dtoa_r+0x778>
 8005976:	4659      	mov	r1, fp
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fb9b 	bl	80060b4 <__pow5mult>
 800597e:	4683      	mov	fp, r0
 8005980:	2101      	movs	r1, #1
 8005982:	4620      	mov	r0, r4
 8005984:	f000 faf7 	bl	8005f76 <__i2b>
 8005988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598a:	4606      	mov	r6, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 81c6 	beq.w	8005d1e <_dtoa_r+0xb16>
 8005992:	461a      	mov	r2, r3
 8005994:	4601      	mov	r1, r0
 8005996:	4620      	mov	r0, r4
 8005998:	f000 fb8c 	bl	80060b4 <__pow5mult>
 800599c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800599e:	4606      	mov	r6, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	dc3e      	bgt.n	8005a22 <_dtoa_r+0x81a>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d137      	bne.n	8005a1a <_dtoa_r+0x812>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d134      	bne.n	8005a1e <_dtoa_r+0x816>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ba:	0d1b      	lsrs	r3, r3, #20
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	b12b      	cbz	r3, 80059cc <_dtoa_r+0x7c4>
 80059c0:	9b07      	ldr	r3, [sp, #28]
 80059c2:	f109 0901 	add.w	r9, r9, #1
 80059c6:	3301      	adds	r3, #1
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	2301      	movs	r3, #1
 80059cc:	9308      	str	r3, [sp, #32]
 80059ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d128      	bne.n	8005a26 <_dtoa_r+0x81e>
 80059d4:	2001      	movs	r0, #1
 80059d6:	e02e      	b.n	8005a36 <_dtoa_r+0x82e>
 80059d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059de:	e796      	b.n	800590e <_dtoa_r+0x706>
 80059e0:	9b08      	ldr	r3, [sp, #32]
 80059e2:	f108 36ff 	add.w	r6, r8, #4294967295
 80059e6:	42b3      	cmp	r3, r6
 80059e8:	bfb7      	itett	lt
 80059ea:	9b08      	ldrlt	r3, [sp, #32]
 80059ec:	1b9e      	subge	r6, r3, r6
 80059ee:	1af2      	sublt	r2, r6, r3
 80059f0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80059f2:	bfbf      	itttt	lt
 80059f4:	9608      	strlt	r6, [sp, #32]
 80059f6:	189b      	addlt	r3, r3, r2
 80059f8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80059fa:	2600      	movlt	r6, #0
 80059fc:	f1b8 0f00 	cmp.w	r8, #0
 8005a00:	bfb9      	ittee	lt
 8005a02:	eba9 0508 	sublt.w	r5, r9, r8
 8005a06:	2300      	movlt	r3, #0
 8005a08:	464d      	movge	r5, r9
 8005a0a:	4643      	movge	r3, r8
 8005a0c:	e781      	b.n	8005912 <_dtoa_r+0x70a>
 8005a0e:	9e08      	ldr	r6, [sp, #32]
 8005a10:	464d      	mov	r5, r9
 8005a12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a14:	e786      	b.n	8005924 <_dtoa_r+0x71c>
 8005a16:	9a08      	ldr	r2, [sp, #32]
 8005a18:	e7ad      	b.n	8005976 <_dtoa_r+0x76e>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e7d6      	b.n	80059cc <_dtoa_r+0x7c4>
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	e7d4      	b.n	80059cc <_dtoa_r+0x7c4>
 8005a22:	2300      	movs	r3, #0
 8005a24:	9308      	str	r3, [sp, #32]
 8005a26:	6933      	ldr	r3, [r6, #16]
 8005a28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a2c:	6918      	ldr	r0, [r3, #16]
 8005a2e:	f000 fa54 	bl	8005eda <__hi0bits>
 8005a32:	f1c0 0020 	rsb	r0, r0, #32
 8005a36:	9b07      	ldr	r3, [sp, #28]
 8005a38:	4418      	add	r0, r3
 8005a3a:	f010 001f 	ands.w	r0, r0, #31
 8005a3e:	d047      	beq.n	8005ad0 <_dtoa_r+0x8c8>
 8005a40:	f1c0 0320 	rsb	r3, r0, #32
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	dd3b      	ble.n	8005ac0 <_dtoa_r+0x8b8>
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	f1c0 001c 	rsb	r0, r0, #28
 8005a4e:	4481      	add	r9, r0
 8005a50:	4405      	add	r5, r0
 8005a52:	4403      	add	r3, r0
 8005a54:	9307      	str	r3, [sp, #28]
 8005a56:	f1b9 0f00 	cmp.w	r9, #0
 8005a5a:	dd05      	ble.n	8005a68 <_dtoa_r+0x860>
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	464a      	mov	r2, r9
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fb75 	bl	8006150 <__lshift>
 8005a66:	4683      	mov	fp, r0
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd05      	ble.n	8005a7a <_dtoa_r+0x872>
 8005a6e:	4631      	mov	r1, r6
 8005a70:	461a      	mov	r2, r3
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fb6c 	bl	8006150 <__lshift>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a7c:	b353      	cbz	r3, 8005ad4 <_dtoa_r+0x8cc>
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4658      	mov	r0, fp
 8005a82:	f000 fbb9 	bl	80061f8 <__mcmp>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	da24      	bge.n	8005ad4 <_dtoa_r+0x8cc>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	220a      	movs	r2, #10
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f9e7 	bl	8005e64 <__multadd>
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a9c:	4683      	mov	fp, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8144 	beq.w	8005d2c <_dtoa_r+0xb24>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 f9da 	bl	8005e64 <__multadd>
 8005ab0:	9b04      	ldr	r3, [sp, #16]
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc4d      	bgt.n	8005b54 <_dtoa_r+0x94c>
 8005ab8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	dd4a      	ble.n	8005b54 <_dtoa_r+0x94c>
 8005abe:	e011      	b.n	8005ae4 <_dtoa_r+0x8dc>
 8005ac0:	d0c9      	beq.n	8005a56 <_dtoa_r+0x84e>
 8005ac2:	9a07      	ldr	r2, [sp, #28]
 8005ac4:	331c      	adds	r3, #28
 8005ac6:	441a      	add	r2, r3
 8005ac8:	4499      	add	r9, r3
 8005aca:	441d      	add	r5, r3
 8005acc:	4613      	mov	r3, r2
 8005ace:	e7c1      	b.n	8005a54 <_dtoa_r+0x84c>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	e7f6      	b.n	8005ac2 <_dtoa_r+0x8ba>
 8005ad4:	f1b8 0f00 	cmp.w	r8, #0
 8005ad8:	dc36      	bgt.n	8005b48 <_dtoa_r+0x940>
 8005ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	dd33      	ble.n	8005b48 <_dtoa_r+0x940>
 8005ae0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	b963      	cbnz	r3, 8005b02 <_dtoa_r+0x8fa>
 8005ae8:	4631      	mov	r1, r6
 8005aea:	2205      	movs	r2, #5
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f9b9 	bl	8005e64 <__multadd>
 8005af2:	4601      	mov	r1, r0
 8005af4:	4606      	mov	r6, r0
 8005af6:	4658      	mov	r0, fp
 8005af8:	f000 fb7e 	bl	80061f8 <__mcmp>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f73f add3 	bgt.w	80056a8 <_dtoa_r+0x4a0>
 8005b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b04:	9d06      	ldr	r5, [sp, #24]
 8005b06:	ea6f 0a03 	mvn.w	sl, r3
 8005b0a:	f04f 0900 	mov.w	r9, #0
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f990 	bl	8005e36 <_Bfree>
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	f43f aebd 	beq.w	8005896 <_dtoa_r+0x68e>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	d005      	beq.n	8005b2e <_dtoa_r+0x926>
 8005b22:	45b9      	cmp	r9, r7
 8005b24:	d003      	beq.n	8005b2e <_dtoa_r+0x926>
 8005b26:	4649      	mov	r1, r9
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 f984 	bl	8005e36 <_Bfree>
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 f980 	bl	8005e36 <_Bfree>
 8005b36:	e6ae      	b.n	8005896 <_dtoa_r+0x68e>
 8005b38:	2600      	movs	r6, #0
 8005b3a:	4637      	mov	r7, r6
 8005b3c:	e7e1      	b.n	8005b02 <_dtoa_r+0x8fa>
 8005b3e:	46ba      	mov	sl, r7
 8005b40:	4637      	mov	r7, r6
 8005b42:	e5b1      	b.n	80056a8 <_dtoa_r+0x4a0>
 8005b44:	40240000 	.word	0x40240000
 8005b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80f3 	beq.w	8005d3a <_dtoa_r+0xb32>
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	dd05      	ble.n	8005b64 <_dtoa_r+0x95c>
 8005b58:	4639      	mov	r1, r7
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 faf7 	bl	8006150 <__lshift>
 8005b62:	4607      	mov	r7, r0
 8005b64:	9b08      	ldr	r3, [sp, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d04c      	beq.n	8005c04 <_dtoa_r+0x9fc>
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 f92e 	bl	8005dce <_Balloc>
 8005b72:	4605      	mov	r5, r0
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	f107 010c 	add.w	r1, r7, #12
 8005b7a:	3202      	adds	r2, #2
 8005b7c:	0092      	lsls	r2, r2, #2
 8005b7e:	300c      	adds	r0, #12
 8005b80:	f000 f91a 	bl	8005db8 <memcpy>
 8005b84:	2201      	movs	r2, #1
 8005b86:	4629      	mov	r1, r5
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fae1 	bl	8006150 <__lshift>
 8005b8e:	46b9      	mov	r9, r7
 8005b90:	4607      	mov	r7, r0
 8005b92:	9b06      	ldr	r3, [sp, #24]
 8005b94:	9307      	str	r3, [sp, #28]
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	9308      	str	r3, [sp, #32]
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	f7ff faa1 	bl	80050e8 <quorem>
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4605      	mov	r5, r0
 8005baa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bae:	4658      	mov	r0, fp
 8005bb0:	f000 fb22 	bl	80061f8 <__mcmp>
 8005bb4:	463a      	mov	r2, r7
 8005bb6:	9002      	str	r0, [sp, #8]
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 fb36 	bl	800622c <__mdiff>
 8005bc0:	68c3      	ldr	r3, [r0, #12]
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	bb03      	cbnz	r3, 8005c08 <_dtoa_r+0xa00>
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	9009      	str	r0, [sp, #36]	; 0x24
 8005bca:	4658      	mov	r0, fp
 8005bcc:	f000 fb14 	bl	80061f8 <__mcmp>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	f000 f92c 	bl	8005e36 <_Bfree>
 8005bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be0:	b9a3      	cbnz	r3, 8005c0c <_dtoa_r+0xa04>
 8005be2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005be4:	b992      	cbnz	r2, 8005c0c <_dtoa_r+0xa04>
 8005be6:	9a08      	ldr	r2, [sp, #32]
 8005be8:	b982      	cbnz	r2, 8005c0c <_dtoa_r+0xa04>
 8005bea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bee:	d029      	beq.n	8005c44 <_dtoa_r+0xa3c>
 8005bf0:	9b02      	ldr	r3, [sp, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dd01      	ble.n	8005bfa <_dtoa_r+0x9f2>
 8005bf6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bfa:	9b07      	ldr	r3, [sp, #28]
 8005bfc:	1c5d      	adds	r5, r3, #1
 8005bfe:	f883 8000 	strb.w	r8, [r3]
 8005c02:	e784      	b.n	8005b0e <_dtoa_r+0x906>
 8005c04:	4638      	mov	r0, r7
 8005c06:	e7c2      	b.n	8005b8e <_dtoa_r+0x986>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e7e3      	b.n	8005bd4 <_dtoa_r+0x9cc>
 8005c0c:	9a02      	ldr	r2, [sp, #8]
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	db04      	blt.n	8005c1c <_dtoa_r+0xa14>
 8005c12:	d123      	bne.n	8005c5c <_dtoa_r+0xa54>
 8005c14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c16:	bb0a      	cbnz	r2, 8005c5c <_dtoa_r+0xa54>
 8005c18:	9a08      	ldr	r2, [sp, #32]
 8005c1a:	b9fa      	cbnz	r2, 8005c5c <_dtoa_r+0xa54>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	ddec      	ble.n	8005bfa <_dtoa_r+0x9f2>
 8005c20:	4659      	mov	r1, fp
 8005c22:	2201      	movs	r2, #1
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fa93 	bl	8006150 <__lshift>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	f000 fae3 	bl	80061f8 <__mcmp>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	dc03      	bgt.n	8005c3e <_dtoa_r+0xa36>
 8005c36:	d1e0      	bne.n	8005bfa <_dtoa_r+0x9f2>
 8005c38:	f018 0f01 	tst.w	r8, #1
 8005c3c:	d0dd      	beq.n	8005bfa <_dtoa_r+0x9f2>
 8005c3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c42:	d1d8      	bne.n	8005bf6 <_dtoa_r+0x9ee>
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	9a07      	ldr	r2, [sp, #28]
 8005c48:	1c5d      	adds	r5, r3, #1
 8005c4a:	2339      	movs	r3, #57	; 0x39
 8005c4c:	7013      	strb	r3, [r2, #0]
 8005c4e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c52:	1e6a      	subs	r2, r5, #1
 8005c54:	2b39      	cmp	r3, #57	; 0x39
 8005c56:	d04d      	beq.n	8005cf4 <_dtoa_r+0xaec>
 8005c58:	3301      	adds	r3, #1
 8005c5a:	e052      	b.n	8005d02 <_dtoa_r+0xafa>
 8005c5c:	9a07      	ldr	r2, [sp, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f102 0501 	add.w	r5, r2, #1
 8005c64:	dd06      	ble.n	8005c74 <_dtoa_r+0xa6c>
 8005c66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c6a:	d0eb      	beq.n	8005c44 <_dtoa_r+0xa3c>
 8005c6c:	f108 0801 	add.w	r8, r8, #1
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	e7c4      	b.n	8005bfe <_dtoa_r+0x9f6>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	1aeb      	subs	r3, r5, r3
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c80:	d021      	beq.n	8005cc6 <_dtoa_r+0xabe>
 8005c82:	4659      	mov	r1, fp
 8005c84:	2300      	movs	r3, #0
 8005c86:	220a      	movs	r2, #10
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f8eb 	bl	8005e64 <__multadd>
 8005c8e:	45b9      	cmp	r9, r7
 8005c90:	4683      	mov	fp, r0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	f04f 020a 	mov.w	r2, #10
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	d105      	bne.n	8005cac <_dtoa_r+0xaa4>
 8005ca0:	f000 f8e0 	bl	8005e64 <__multadd>
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	9507      	str	r5, [sp, #28]
 8005caa:	e778      	b.n	8005b9e <_dtoa_r+0x996>
 8005cac:	f000 f8da 	bl	8005e64 <__multadd>
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4681      	mov	r9, r0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 f8d3 	bl	8005e64 <__multadd>
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	e7f2      	b.n	8005ca8 <_dtoa_r+0xaa0>
 8005cc2:	f04f 0900 	mov.w	r9, #0
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 fa40 	bl	8006150 <__lshift>
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4683      	mov	fp, r0
 8005cd4:	f000 fa90 	bl	80061f8 <__mcmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	dcb8      	bgt.n	8005c4e <_dtoa_r+0xa46>
 8005cdc:	d102      	bne.n	8005ce4 <_dtoa_r+0xadc>
 8005cde:	f018 0f01 	tst.w	r8, #1
 8005ce2:	d1b4      	bne.n	8005c4e <_dtoa_r+0xa46>
 8005ce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ce8:	1e6a      	subs	r2, r5, #1
 8005cea:	2b30      	cmp	r3, #48	; 0x30
 8005cec:	f47f af0f 	bne.w	8005b0e <_dtoa_r+0x906>
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	e7f7      	b.n	8005ce4 <_dtoa_r+0xadc>
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d105      	bne.n	8005d06 <_dtoa_r+0xafe>
 8005cfa:	2331      	movs	r3, #49	; 0x31
 8005cfc:	9a06      	ldr	r2, [sp, #24]
 8005cfe:	f10a 0a01 	add.w	sl, sl, #1
 8005d02:	7013      	strb	r3, [r2, #0]
 8005d04:	e703      	b.n	8005b0e <_dtoa_r+0x906>
 8005d06:	4615      	mov	r5, r2
 8005d08:	e7a1      	b.n	8005c4e <_dtoa_r+0xa46>
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <_dtoa_r+0xb60>)
 8005d0c:	f7ff bae1 	b.w	80052d2 <_dtoa_r+0xca>
 8005d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f aabb 	bne.w	800528e <_dtoa_r+0x86>
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <_dtoa_r+0xb64>)
 8005d1a:	f7ff bada 	b.w	80052d2 <_dtoa_r+0xca>
 8005d1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f77f ae3f 	ble.w	80059a4 <_dtoa_r+0x79c>
 8005d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	e653      	b.n	80059d4 <_dtoa_r+0x7cc>
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dc03      	bgt.n	8005d3a <_dtoa_r+0xb32>
 8005d32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	f73f aed5 	bgt.w	8005ae4 <_dtoa_r+0x8dc>
 8005d3a:	9d06      	ldr	r5, [sp, #24]
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f7ff f9d2 	bl	80050e8 <quorem>
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d4a:	f805 8b01 	strb.w	r8, [r5], #1
 8005d4e:	9a04      	ldr	r2, [sp, #16]
 8005d50:	1aeb      	subs	r3, r5, r3
 8005d52:	429a      	cmp	r2, r3
 8005d54:	ddb5      	ble.n	8005cc2 <_dtoa_r+0xaba>
 8005d56:	4659      	mov	r1, fp
 8005d58:	2300      	movs	r3, #0
 8005d5a:	220a      	movs	r2, #10
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 f881 	bl	8005e64 <__multadd>
 8005d62:	4683      	mov	fp, r0
 8005d64:	e7ea      	b.n	8005d3c <_dtoa_r+0xb34>
 8005d66:	bf00      	nop
 8005d68:	080068ce 	.word	0x080068ce
 8005d6c:	080068f2 	.word	0x080068f2

08005d70 <_localeconv_r>:
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <_localeconv_r+0x14>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a18      	ldr	r0, [r3, #32]
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <_localeconv_r+0x18>)
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	bf08      	it	eq
 8005d7c:	4618      	moveq	r0, r3
 8005d7e:	30f0      	adds	r0, #240	; 0xf0
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000064 	.word	0x20000064

08005d8c <malloc>:
 8005d8c:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <malloc+0xc>)
 8005d8e:	4601      	mov	r1, r0
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f000 bb53 	b.w	800643c <_malloc_r>
 8005d96:	bf00      	nop
 8005d98:	20000000 	.word	0x20000000

08005d9c <memchr>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	b2c9      	uxtb	r1, r1
 8005da0:	4402      	add	r2, r0
 8005da2:	4290      	cmp	r0, r2
 8005da4:	4603      	mov	r3, r0
 8005da6:	d101      	bne.n	8005dac <memchr+0x10>
 8005da8:	2300      	movs	r3, #0
 8005daa:	e003      	b.n	8005db4 <memchr+0x18>
 8005dac:	781c      	ldrb	r4, [r3, #0]
 8005dae:	3001      	adds	r0, #1
 8005db0:	428c      	cmp	r4, r1
 8005db2:	d1f6      	bne.n	8005da2 <memchr+0x6>
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <memcpy>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	1e43      	subs	r3, r0, #1
 8005dbc:	440a      	add	r2, r1
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	d100      	bne.n	8005dc4 <memcpy+0xc>
 8005dc2:	bd10      	pop	{r4, pc}
 8005dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dcc:	e7f7      	b.n	8005dbe <memcpy+0x6>

08005dce <_Balloc>:
 8005dce:	b570      	push	{r4, r5, r6, lr}
 8005dd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	b93d      	cbnz	r5, 8005de8 <_Balloc+0x1a>
 8005dd8:	2010      	movs	r0, #16
 8005dda:	f7ff ffd7 	bl	8005d8c <malloc>
 8005dde:	6260      	str	r0, [r4, #36]	; 0x24
 8005de0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005de4:	6005      	str	r5, [r0, #0]
 8005de6:	60c5      	str	r5, [r0, #12]
 8005de8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dea:	68eb      	ldr	r3, [r5, #12]
 8005dec:	b183      	cbz	r3, 8005e10 <_Balloc+0x42>
 8005dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005df6:	b9b8      	cbnz	r0, 8005e28 <_Balloc+0x5a>
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f506 	lsl.w	r5, r1, r6
 8005dfe:	1d6a      	adds	r2, r5, #5
 8005e00:	0092      	lsls	r2, r2, #2
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fabf 	bl	8006386 <_calloc_r>
 8005e08:	b160      	cbz	r0, 8005e24 <_Balloc+0x56>
 8005e0a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e0e:	e00e      	b.n	8005e2e <_Balloc+0x60>
 8005e10:	2221      	movs	r2, #33	; 0x21
 8005e12:	2104      	movs	r1, #4
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fab6 	bl	8006386 <_calloc_r>
 8005e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1c:	60e8      	str	r0, [r5, #12]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e4      	bne.n	8005dee <_Balloc+0x20>
 8005e24:	2000      	movs	r0, #0
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e34:	e7f7      	b.n	8005e26 <_Balloc+0x58>

08005e36 <_Bfree>:
 8005e36:	b570      	push	{r4, r5, r6, lr}
 8005e38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	b93c      	cbnz	r4, 8005e50 <_Bfree+0x1a>
 8005e40:	2010      	movs	r0, #16
 8005e42:	f7ff ffa3 	bl	8005d8c <malloc>
 8005e46:	6270      	str	r0, [r6, #36]	; 0x24
 8005e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e4c:	6004      	str	r4, [r0, #0]
 8005e4e:	60c4      	str	r4, [r0, #12]
 8005e50:	b13d      	cbz	r5, 8005e62 <_Bfree+0x2c>
 8005e52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e54:	686a      	ldr	r2, [r5, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e5c:	6029      	str	r1, [r5, #0]
 8005e5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e62:	bd70      	pop	{r4, r5, r6, pc}

08005e64 <__multadd>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	461f      	mov	r7, r3
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	2300      	movs	r3, #0
 8005e70:	690d      	ldr	r5, [r1, #16]
 8005e72:	f101 0c14 	add.w	ip, r1, #20
 8005e76:	f8dc 0000 	ldr.w	r0, [ip]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b281      	uxth	r1, r0
 8005e7e:	fb02 7101 	mla	r1, r2, r1, r7
 8005e82:	0c00      	lsrs	r0, r0, #16
 8005e84:	0c0f      	lsrs	r7, r1, #16
 8005e86:	fb02 7000 	mla	r0, r2, r0, r7
 8005e8a:	b289      	uxth	r1, r1
 8005e8c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e90:	429d      	cmp	r5, r3
 8005e92:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e96:	f84c 1b04 	str.w	r1, [ip], #4
 8005e9a:	dcec      	bgt.n	8005e76 <__multadd+0x12>
 8005e9c:	b1d7      	cbz	r7, 8005ed4 <__multadd+0x70>
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	dc12      	bgt.n	8005eca <__multadd+0x66>
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	3101      	adds	r1, #1
 8005eaa:	f7ff ff90 	bl	8005dce <_Balloc>
 8005eae:	4680      	mov	r8, r0
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	f104 010c 	add.w	r1, r4, #12
 8005eb6:	3202      	adds	r2, #2
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	300c      	adds	r0, #12
 8005ebc:	f7ff ff7c 	bl	8005db8 <memcpy>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff ffb7 	bl	8005e36 <_Bfree>
 8005ec8:	4644      	mov	r4, r8
 8005eca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ece:	3501      	adds	r5, #1
 8005ed0:	615f      	str	r7, [r3, #20]
 8005ed2:	6125      	str	r5, [r4, #16]
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005eda <__hi0bits>:
 8005eda:	0c02      	lsrs	r2, r0, #16
 8005edc:	0412      	lsls	r2, r2, #16
 8005ede:	4603      	mov	r3, r0
 8005ee0:	b9b2      	cbnz	r2, 8005f10 <__hi0bits+0x36>
 8005ee2:	0403      	lsls	r3, r0, #16
 8005ee4:	2010      	movs	r0, #16
 8005ee6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005eea:	bf04      	itt	eq
 8005eec:	021b      	lsleq	r3, r3, #8
 8005eee:	3008      	addeq	r0, #8
 8005ef0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ef4:	bf04      	itt	eq
 8005ef6:	011b      	lsleq	r3, r3, #4
 8005ef8:	3004      	addeq	r0, #4
 8005efa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005efe:	bf04      	itt	eq
 8005f00:	009b      	lsleq	r3, r3, #2
 8005f02:	3002      	addeq	r0, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db06      	blt.n	8005f16 <__hi0bits+0x3c>
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	d503      	bpl.n	8005f14 <__hi0bits+0x3a>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	4770      	bx	lr
 8005f10:	2000      	movs	r0, #0
 8005f12:	e7e8      	b.n	8005ee6 <__hi0bits+0xc>
 8005f14:	2020      	movs	r0, #32
 8005f16:	4770      	bx	lr

08005f18 <__lo0bits>:
 8005f18:	6803      	ldr	r3, [r0, #0]
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	f013 0207 	ands.w	r2, r3, #7
 8005f20:	d00b      	beq.n	8005f3a <__lo0bits+0x22>
 8005f22:	07da      	lsls	r2, r3, #31
 8005f24:	d423      	bmi.n	8005f6e <__lo0bits+0x56>
 8005f26:	0798      	lsls	r0, r3, #30
 8005f28:	bf49      	itett	mi
 8005f2a:	085b      	lsrmi	r3, r3, #1
 8005f2c:	089b      	lsrpl	r3, r3, #2
 8005f2e:	2001      	movmi	r0, #1
 8005f30:	600b      	strmi	r3, [r1, #0]
 8005f32:	bf5c      	itt	pl
 8005f34:	600b      	strpl	r3, [r1, #0]
 8005f36:	2002      	movpl	r0, #2
 8005f38:	4770      	bx	lr
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	b9a8      	cbnz	r0, 8005f6a <__lo0bits+0x52>
 8005f3e:	2010      	movs	r0, #16
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f46:	bf04      	itt	eq
 8005f48:	0a1b      	lsreq	r3, r3, #8
 8005f4a:	3008      	addeq	r0, #8
 8005f4c:	071a      	lsls	r2, r3, #28
 8005f4e:	bf04      	itt	eq
 8005f50:	091b      	lsreq	r3, r3, #4
 8005f52:	3004      	addeq	r0, #4
 8005f54:	079a      	lsls	r2, r3, #30
 8005f56:	bf04      	itt	eq
 8005f58:	089b      	lsreq	r3, r3, #2
 8005f5a:	3002      	addeq	r0, #2
 8005f5c:	07da      	lsls	r2, r3, #31
 8005f5e:	d402      	bmi.n	8005f66 <__lo0bits+0x4e>
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	d006      	beq.n	8005f72 <__lo0bits+0x5a>
 8005f64:	3001      	adds	r0, #1
 8005f66:	600b      	str	r3, [r1, #0]
 8005f68:	4770      	bx	lr
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	e7e9      	b.n	8005f42 <__lo0bits+0x2a>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	4770      	bx	lr
 8005f72:	2020      	movs	r0, #32
 8005f74:	4770      	bx	lr

08005f76 <__i2b>:
 8005f76:	b510      	push	{r4, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f7ff ff27 	bl	8005dce <_Balloc>
 8005f80:	2201      	movs	r2, #1
 8005f82:	6144      	str	r4, [r0, #20]
 8005f84:	6102      	str	r2, [r0, #16]
 8005f86:	bd10      	pop	{r4, pc}

08005f88 <__multiply>:
 8005f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	690a      	ldr	r2, [r1, #16]
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	4688      	mov	r8, r1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	bfbe      	ittt	lt
 8005f98:	460b      	movlt	r3, r1
 8005f9a:	46a0      	movlt	r8, r4
 8005f9c:	461c      	movlt	r4, r3
 8005f9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fa2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005faa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fae:	eb07 0609 	add.w	r6, r7, r9
 8005fb2:	42b3      	cmp	r3, r6
 8005fb4:	bfb8      	it	lt
 8005fb6:	3101      	addlt	r1, #1
 8005fb8:	f7ff ff09 	bl	8005dce <_Balloc>
 8005fbc:	f100 0514 	add.w	r5, r0, #20
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fc8:	4573      	cmp	r3, lr
 8005fca:	d316      	bcc.n	8005ffa <__multiply+0x72>
 8005fcc:	f104 0214 	add.w	r2, r4, #20
 8005fd0:	f108 0114 	add.w	r1, r8, #20
 8005fd4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	9b00      	ldr	r3, [sp, #0]
 8005fe0:	9201      	str	r2, [sp, #4]
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d80c      	bhi.n	8006000 <__multiply+0x78>
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	dd03      	ble.n	8005ff2 <__multiply+0x6a>
 8005fea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d05d      	beq.n	80060ae <__multiply+0x126>
 8005ff2:	6106      	str	r6, [r0, #16]
 8005ff4:	b003      	add	sp, #12
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	f843 2b04 	str.w	r2, [r3], #4
 8005ffe:	e7e3      	b.n	8005fc8 <__multiply+0x40>
 8006000:	f8b2 b000 	ldrh.w	fp, [r2]
 8006004:	f1bb 0f00 	cmp.w	fp, #0
 8006008:	d023      	beq.n	8006052 <__multiply+0xca>
 800600a:	4689      	mov	r9, r1
 800600c:	46ac      	mov	ip, r5
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	f859 4b04 	ldr.w	r4, [r9], #4
 8006016:	f8dc a000 	ldr.w	sl, [ip]
 800601a:	b2a3      	uxth	r3, r4
 800601c:	fa1f fa8a 	uxth.w	sl, sl
 8006020:	fb0b a303 	mla	r3, fp, r3, sl
 8006024:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006028:	f8dc 4000 	ldr.w	r4, [ip]
 800602c:	4443      	add	r3, r8
 800602e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006032:	fb0b 840a 	mla	r4, fp, sl, r8
 8006036:	46e2      	mov	sl, ip
 8006038:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006042:	454f      	cmp	r7, r9
 8006044:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006048:	f84a 3b04 	str.w	r3, [sl], #4
 800604c:	d82b      	bhi.n	80060a6 <__multiply+0x11e>
 800604e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	3204      	adds	r2, #4
 8006056:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800605a:	f1ba 0f00 	cmp.w	sl, #0
 800605e:	d020      	beq.n	80060a2 <__multiply+0x11a>
 8006060:	4689      	mov	r9, r1
 8006062:	46a8      	mov	r8, r5
 8006064:	f04f 0b00 	mov.w	fp, #0
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	f8b9 c000 	ldrh.w	ip, [r9]
 800606e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006072:	b29b      	uxth	r3, r3
 8006074:	fb0a 440c 	mla	r4, sl, ip, r4
 8006078:	46c4      	mov	ip, r8
 800607a:	445c      	add	r4, fp
 800607c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006080:	f84c 3b04 	str.w	r3, [ip], #4
 8006084:	f859 3b04 	ldr.w	r3, [r9], #4
 8006088:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	fb0a b303 	mla	r3, sl, r3, fp
 8006092:	454f      	cmp	r7, r9
 8006094:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006098:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800609c:	d805      	bhi.n	80060aa <__multiply+0x122>
 800609e:	f8c8 3004 	str.w	r3, [r8, #4]
 80060a2:	3504      	adds	r5, #4
 80060a4:	e79b      	b.n	8005fde <__multiply+0x56>
 80060a6:	46d4      	mov	ip, sl
 80060a8:	e7b3      	b.n	8006012 <__multiply+0x8a>
 80060aa:	46e0      	mov	r8, ip
 80060ac:	e7dd      	b.n	800606a <__multiply+0xe2>
 80060ae:	3e01      	subs	r6, #1
 80060b0:	e799      	b.n	8005fe6 <__multiply+0x5e>
	...

080060b4 <__pow5mult>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	4615      	mov	r5, r2
 80060ba:	f012 0203 	ands.w	r2, r2, #3
 80060be:	4606      	mov	r6, r0
 80060c0:	460f      	mov	r7, r1
 80060c2:	d007      	beq.n	80060d4 <__pow5mult+0x20>
 80060c4:	4c21      	ldr	r4, [pc, #132]	; (800614c <__pow5mult+0x98>)
 80060c6:	3a01      	subs	r2, #1
 80060c8:	2300      	movs	r3, #0
 80060ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ce:	f7ff fec9 	bl	8005e64 <__multadd>
 80060d2:	4607      	mov	r7, r0
 80060d4:	10ad      	asrs	r5, r5, #2
 80060d6:	d035      	beq.n	8006144 <__pow5mult+0x90>
 80060d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060da:	b93c      	cbnz	r4, 80060ec <__pow5mult+0x38>
 80060dc:	2010      	movs	r0, #16
 80060de:	f7ff fe55 	bl	8005d8c <malloc>
 80060e2:	6270      	str	r0, [r6, #36]	; 0x24
 80060e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060e8:	6004      	str	r4, [r0, #0]
 80060ea:	60c4      	str	r4, [r0, #12]
 80060ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f4:	b94c      	cbnz	r4, 800610a <__pow5mult+0x56>
 80060f6:	f240 2171 	movw	r1, #625	; 0x271
 80060fa:	4630      	mov	r0, r6
 80060fc:	f7ff ff3b 	bl	8005f76 <__i2b>
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	f8c8 0008 	str.w	r0, [r8, #8]
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	07eb      	lsls	r3, r5, #31
 8006110:	d50a      	bpl.n	8006128 <__pow5mult+0x74>
 8006112:	4639      	mov	r1, r7
 8006114:	4622      	mov	r2, r4
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ff36 	bl	8005f88 <__multiply>
 800611c:	4681      	mov	r9, r0
 800611e:	4639      	mov	r1, r7
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff fe88 	bl	8005e36 <_Bfree>
 8006126:	464f      	mov	r7, r9
 8006128:	106d      	asrs	r5, r5, #1
 800612a:	d00b      	beq.n	8006144 <__pow5mult+0x90>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	b938      	cbnz	r0, 8006140 <__pow5mult+0x8c>
 8006130:	4622      	mov	r2, r4
 8006132:	4621      	mov	r1, r4
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff ff27 	bl	8005f88 <__multiply>
 800613a:	6020      	str	r0, [r4, #0]
 800613c:	f8c0 8000 	str.w	r8, [r0]
 8006140:	4604      	mov	r4, r0
 8006142:	e7e4      	b.n	800610e <__pow5mult+0x5a>
 8006144:	4638      	mov	r0, r7
 8006146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614a:	bf00      	nop
 800614c:	080069f0 	.word	0x080069f0

08006150 <__lshift>:
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	460c      	mov	r4, r1
 8006156:	4607      	mov	r7, r0
 8006158:	4616      	mov	r6, r2
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006160:	eb0a 0903 	add.w	r9, sl, r3
 8006164:	6849      	ldr	r1, [r1, #4]
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	f109 0501 	add.w	r5, r9, #1
 800616c:	42ab      	cmp	r3, r5
 800616e:	db32      	blt.n	80061d6 <__lshift+0x86>
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff fe2c 	bl	8005dce <_Balloc>
 8006176:	2300      	movs	r3, #0
 8006178:	4680      	mov	r8, r0
 800617a:	461a      	mov	r2, r3
 800617c:	f100 0114 	add.w	r1, r0, #20
 8006180:	4553      	cmp	r3, sl
 8006182:	db2b      	blt.n	80061dc <__lshift+0x8c>
 8006184:	6920      	ldr	r0, [r4, #16]
 8006186:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800618a:	f104 0314 	add.w	r3, r4, #20
 800618e:	f016 021f 	ands.w	r2, r6, #31
 8006192:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006196:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800619a:	d025      	beq.n	80061e8 <__lshift+0x98>
 800619c:	2000      	movs	r0, #0
 800619e:	f1c2 0e20 	rsb	lr, r2, #32
 80061a2:	468a      	mov	sl, r1
 80061a4:	681e      	ldr	r6, [r3, #0]
 80061a6:	4096      	lsls	r6, r2
 80061a8:	4330      	orrs	r0, r6
 80061aa:	f84a 0b04 	str.w	r0, [sl], #4
 80061ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80061b2:	459c      	cmp	ip, r3
 80061b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80061b8:	d814      	bhi.n	80061e4 <__lshift+0x94>
 80061ba:	6048      	str	r0, [r1, #4]
 80061bc:	b108      	cbz	r0, 80061c2 <__lshift+0x72>
 80061be:	f109 0502 	add.w	r5, r9, #2
 80061c2:	3d01      	subs	r5, #1
 80061c4:	4638      	mov	r0, r7
 80061c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80061ca:	4621      	mov	r1, r4
 80061cc:	f7ff fe33 	bl	8005e36 <_Bfree>
 80061d0:	4640      	mov	r0, r8
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	3101      	adds	r1, #1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	e7c7      	b.n	800616c <__lshift+0x1c>
 80061dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061e0:	3301      	adds	r3, #1
 80061e2:	e7cd      	b.n	8006180 <__lshift+0x30>
 80061e4:	4651      	mov	r1, sl
 80061e6:	e7dc      	b.n	80061a2 <__lshift+0x52>
 80061e8:	3904      	subs	r1, #4
 80061ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ee:	459c      	cmp	ip, r3
 80061f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80061f4:	d8f9      	bhi.n	80061ea <__lshift+0x9a>
 80061f6:	e7e4      	b.n	80061c2 <__lshift+0x72>

080061f8 <__mcmp>:
 80061f8:	6903      	ldr	r3, [r0, #16]
 80061fa:	690a      	ldr	r2, [r1, #16]
 80061fc:	b530      	push	{r4, r5, lr}
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	d10c      	bne.n	800621c <__mcmp+0x24>
 8006202:	0092      	lsls	r2, r2, #2
 8006204:	3014      	adds	r0, #20
 8006206:	3114      	adds	r1, #20
 8006208:	1884      	adds	r4, r0, r2
 800620a:	4411      	add	r1, r2
 800620c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006214:	4295      	cmp	r5, r2
 8006216:	d003      	beq.n	8006220 <__mcmp+0x28>
 8006218:	d305      	bcc.n	8006226 <__mcmp+0x2e>
 800621a:	2301      	movs	r3, #1
 800621c:	4618      	mov	r0, r3
 800621e:	bd30      	pop	{r4, r5, pc}
 8006220:	42a0      	cmp	r0, r4
 8006222:	d3f3      	bcc.n	800620c <__mcmp+0x14>
 8006224:	e7fa      	b.n	800621c <__mcmp+0x24>
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	e7f7      	b.n	800621c <__mcmp+0x24>

0800622c <__mdiff>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	460d      	mov	r5, r1
 8006232:	4607      	mov	r7, r0
 8006234:	4611      	mov	r1, r2
 8006236:	4628      	mov	r0, r5
 8006238:	4614      	mov	r4, r2
 800623a:	f7ff ffdd 	bl	80061f8 <__mcmp>
 800623e:	1e06      	subs	r6, r0, #0
 8006240:	d108      	bne.n	8006254 <__mdiff+0x28>
 8006242:	4631      	mov	r1, r6
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff fdc2 	bl	8005dce <_Balloc>
 800624a:	2301      	movs	r3, #1
 800624c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006254:	bfa4      	itt	ge
 8006256:	4623      	movge	r3, r4
 8006258:	462c      	movge	r4, r5
 800625a:	4638      	mov	r0, r7
 800625c:	6861      	ldr	r1, [r4, #4]
 800625e:	bfa6      	itte	ge
 8006260:	461d      	movge	r5, r3
 8006262:	2600      	movge	r6, #0
 8006264:	2601      	movlt	r6, #1
 8006266:	f7ff fdb2 	bl	8005dce <_Balloc>
 800626a:	f04f 0e00 	mov.w	lr, #0
 800626e:	60c6      	str	r6, [r0, #12]
 8006270:	692b      	ldr	r3, [r5, #16]
 8006272:	6926      	ldr	r6, [r4, #16]
 8006274:	f104 0214 	add.w	r2, r4, #20
 8006278:	f105 0914 	add.w	r9, r5, #20
 800627c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006280:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006284:	f100 0114 	add.w	r1, r0, #20
 8006288:	f852 ab04 	ldr.w	sl, [r2], #4
 800628c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006290:	fa1f f38a 	uxth.w	r3, sl
 8006294:	4473      	add	r3, lr
 8006296:	b2ac      	uxth	r4, r5
 8006298:	1b1b      	subs	r3, r3, r4
 800629a:	0c2c      	lsrs	r4, r5, #16
 800629c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80062a0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80062aa:	45c8      	cmp	r8, r9
 80062ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80062b0:	4694      	mov	ip, r2
 80062b2:	f841 4b04 	str.w	r4, [r1], #4
 80062b6:	d8e7      	bhi.n	8006288 <__mdiff+0x5c>
 80062b8:	45bc      	cmp	ip, r7
 80062ba:	d304      	bcc.n	80062c6 <__mdiff+0x9a>
 80062bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062c0:	b183      	cbz	r3, 80062e4 <__mdiff+0xb8>
 80062c2:	6106      	str	r6, [r0, #16]
 80062c4:	e7c4      	b.n	8006250 <__mdiff+0x24>
 80062c6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80062ca:	b2a2      	uxth	r2, r4
 80062cc:	4472      	add	r2, lr
 80062ce:	1413      	asrs	r3, r2, #16
 80062d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062d4:	b292      	uxth	r2, r2
 80062d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062da:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80062de:	f841 2b04 	str.w	r2, [r1], #4
 80062e2:	e7e9      	b.n	80062b8 <__mdiff+0x8c>
 80062e4:	3e01      	subs	r6, #1
 80062e6:	e7e9      	b.n	80062bc <__mdiff+0x90>

080062e8 <__d2b>:
 80062e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062ec:	461c      	mov	r4, r3
 80062ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062f2:	2101      	movs	r1, #1
 80062f4:	4690      	mov	r8, r2
 80062f6:	f7ff fd6a 	bl	8005dce <_Balloc>
 80062fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80062fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006302:	4607      	mov	r7, r0
 8006304:	bb34      	cbnz	r4, 8006354 <__d2b+0x6c>
 8006306:	9201      	str	r2, [sp, #4]
 8006308:	f1b8 0200 	subs.w	r2, r8, #0
 800630c:	d027      	beq.n	800635e <__d2b+0x76>
 800630e:	a802      	add	r0, sp, #8
 8006310:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006314:	f7ff fe00 	bl	8005f18 <__lo0bits>
 8006318:	9900      	ldr	r1, [sp, #0]
 800631a:	b1f0      	cbz	r0, 800635a <__d2b+0x72>
 800631c:	9a01      	ldr	r2, [sp, #4]
 800631e:	f1c0 0320 	rsb	r3, r0, #32
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	430b      	orrs	r3, r1
 8006328:	40c2      	lsrs	r2, r0
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	9201      	str	r2, [sp, #4]
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	bf14      	ite	ne
 8006334:	2102      	movne	r1, #2
 8006336:	2101      	moveq	r1, #1
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	6139      	str	r1, [r7, #16]
 800633c:	b1c4      	cbz	r4, 8006370 <__d2b+0x88>
 800633e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006342:	4404      	add	r4, r0
 8006344:	6034      	str	r4, [r6, #0]
 8006346:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800634a:	6028      	str	r0, [r5, #0]
 800634c:	4638      	mov	r0, r7
 800634e:	b002      	add	sp, #8
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006354:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006358:	e7d5      	b.n	8006306 <__d2b+0x1e>
 800635a:	6179      	str	r1, [r7, #20]
 800635c:	e7e7      	b.n	800632e <__d2b+0x46>
 800635e:	a801      	add	r0, sp, #4
 8006360:	f7ff fdda 	bl	8005f18 <__lo0bits>
 8006364:	2101      	movs	r1, #1
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	6139      	str	r1, [r7, #16]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	3020      	adds	r0, #32
 800636e:	e7e5      	b.n	800633c <__d2b+0x54>
 8006370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006374:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006378:	6030      	str	r0, [r6, #0]
 800637a:	6918      	ldr	r0, [r3, #16]
 800637c:	f7ff fdad 	bl	8005eda <__hi0bits>
 8006380:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006384:	e7e1      	b.n	800634a <__d2b+0x62>

08006386 <_calloc_r>:
 8006386:	b538      	push	{r3, r4, r5, lr}
 8006388:	fb02 f401 	mul.w	r4, r2, r1
 800638c:	4621      	mov	r1, r4
 800638e:	f000 f855 	bl	800643c <_malloc_r>
 8006392:	4605      	mov	r5, r0
 8006394:	b118      	cbz	r0, 800639e <_calloc_r+0x18>
 8006396:	4622      	mov	r2, r4
 8006398:	2100      	movs	r1, #0
 800639a:	f7fe fa2d 	bl	80047f8 <memset>
 800639e:	4628      	mov	r0, r5
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080063a4 <_free_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4605      	mov	r5, r0
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d043      	beq.n	8006434 <_free_r+0x90>
 80063ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b0:	1f0c      	subs	r4, r1, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bfb8      	it	lt
 80063b6:	18e4      	addlt	r4, r4, r3
 80063b8:	f000 fa27 	bl	800680a <__malloc_lock>
 80063bc:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <_free_r+0x94>)
 80063be:	6813      	ldr	r3, [r2, #0]
 80063c0:	4610      	mov	r0, r2
 80063c2:	b933      	cbnz	r3, 80063d2 <_free_r+0x2e>
 80063c4:	6063      	str	r3, [r4, #4]
 80063c6:	6014      	str	r4, [r2, #0]
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ce:	f000 ba1d 	b.w	800680c <__malloc_unlock>
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	d90b      	bls.n	80063ee <_free_r+0x4a>
 80063d6:	6821      	ldr	r1, [r4, #0]
 80063d8:	1862      	adds	r2, r4, r1
 80063da:	4293      	cmp	r3, r2
 80063dc:	bf01      	itttt	eq
 80063de:	681a      	ldreq	r2, [r3, #0]
 80063e0:	685b      	ldreq	r3, [r3, #4]
 80063e2:	1852      	addeq	r2, r2, r1
 80063e4:	6022      	streq	r2, [r4, #0]
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6004      	str	r4, [r0, #0]
 80063ea:	e7ed      	b.n	80063c8 <_free_r+0x24>
 80063ec:	4613      	mov	r3, r2
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	b10a      	cbz	r2, 80063f6 <_free_r+0x52>
 80063f2:	42a2      	cmp	r2, r4
 80063f4:	d9fa      	bls.n	80063ec <_free_r+0x48>
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	1858      	adds	r0, r3, r1
 80063fa:	42a0      	cmp	r0, r4
 80063fc:	d10b      	bne.n	8006416 <_free_r+0x72>
 80063fe:	6820      	ldr	r0, [r4, #0]
 8006400:	4401      	add	r1, r0
 8006402:	1858      	adds	r0, r3, r1
 8006404:	4282      	cmp	r2, r0
 8006406:	6019      	str	r1, [r3, #0]
 8006408:	d1de      	bne.n	80063c8 <_free_r+0x24>
 800640a:	6810      	ldr	r0, [r2, #0]
 800640c:	6852      	ldr	r2, [r2, #4]
 800640e:	4401      	add	r1, r0
 8006410:	6019      	str	r1, [r3, #0]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	e7d8      	b.n	80063c8 <_free_r+0x24>
 8006416:	d902      	bls.n	800641e <_free_r+0x7a>
 8006418:	230c      	movs	r3, #12
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	e7d4      	b.n	80063c8 <_free_r+0x24>
 800641e:	6820      	ldr	r0, [r4, #0]
 8006420:	1821      	adds	r1, r4, r0
 8006422:	428a      	cmp	r2, r1
 8006424:	bf01      	itttt	eq
 8006426:	6811      	ldreq	r1, [r2, #0]
 8006428:	6852      	ldreq	r2, [r2, #4]
 800642a:	1809      	addeq	r1, r1, r0
 800642c:	6021      	streq	r1, [r4, #0]
 800642e:	6062      	str	r2, [r4, #4]
 8006430:	605c      	str	r4, [r3, #4]
 8006432:	e7c9      	b.n	80063c8 <_free_r+0x24>
 8006434:	bd38      	pop	{r3, r4, r5, pc}
 8006436:	bf00      	nop
 8006438:	20000234 	.word	0x20000234

0800643c <_malloc_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	1ccd      	adds	r5, r1, #3
 8006440:	f025 0503 	bic.w	r5, r5, #3
 8006444:	3508      	adds	r5, #8
 8006446:	2d0c      	cmp	r5, #12
 8006448:	bf38      	it	cc
 800644a:	250c      	movcc	r5, #12
 800644c:	2d00      	cmp	r5, #0
 800644e:	4606      	mov	r6, r0
 8006450:	db01      	blt.n	8006456 <_malloc_r+0x1a>
 8006452:	42a9      	cmp	r1, r5
 8006454:	d903      	bls.n	800645e <_malloc_r+0x22>
 8006456:	230c      	movs	r3, #12
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	2000      	movs	r0, #0
 800645c:	bd70      	pop	{r4, r5, r6, pc}
 800645e:	f000 f9d4 	bl	800680a <__malloc_lock>
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <_malloc_r+0xac>)
 8006464:	6814      	ldr	r4, [r2, #0]
 8006466:	4621      	mov	r1, r4
 8006468:	b991      	cbnz	r1, 8006490 <_malloc_r+0x54>
 800646a:	4c20      	ldr	r4, [pc, #128]	; (80064ec <_malloc_r+0xb0>)
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	b91b      	cbnz	r3, 8006478 <_malloc_r+0x3c>
 8006470:	4630      	mov	r0, r6
 8006472:	f000 f98f 	bl	8006794 <_sbrk_r>
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f000 f98a 	bl	8006794 <_sbrk_r>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d124      	bne.n	80064ce <_malloc_r+0x92>
 8006484:	230c      	movs	r3, #12
 8006486:	4630      	mov	r0, r6
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	f000 f9bf 	bl	800680c <__malloc_unlock>
 800648e:	e7e4      	b.n	800645a <_malloc_r+0x1e>
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	1b5b      	subs	r3, r3, r5
 8006494:	d418      	bmi.n	80064c8 <_malloc_r+0x8c>
 8006496:	2b0b      	cmp	r3, #11
 8006498:	d90f      	bls.n	80064ba <_malloc_r+0x7e>
 800649a:	600b      	str	r3, [r1, #0]
 800649c:	18cc      	adds	r4, r1, r3
 800649e:	50cd      	str	r5, [r1, r3]
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f9b3 	bl	800680c <__malloc_unlock>
 80064a6:	f104 000b 	add.w	r0, r4, #11
 80064aa:	1d23      	adds	r3, r4, #4
 80064ac:	f020 0007 	bic.w	r0, r0, #7
 80064b0:	1ac3      	subs	r3, r0, r3
 80064b2:	d0d3      	beq.n	800645c <_malloc_r+0x20>
 80064b4:	425a      	negs	r2, r3
 80064b6:	50e2      	str	r2, [r4, r3]
 80064b8:	e7d0      	b.n	800645c <_malloc_r+0x20>
 80064ba:	684b      	ldr	r3, [r1, #4]
 80064bc:	428c      	cmp	r4, r1
 80064be:	bf16      	itet	ne
 80064c0:	6063      	strne	r3, [r4, #4]
 80064c2:	6013      	streq	r3, [r2, #0]
 80064c4:	460c      	movne	r4, r1
 80064c6:	e7eb      	b.n	80064a0 <_malloc_r+0x64>
 80064c8:	460c      	mov	r4, r1
 80064ca:	6849      	ldr	r1, [r1, #4]
 80064cc:	e7cc      	b.n	8006468 <_malloc_r+0x2c>
 80064ce:	1cc4      	adds	r4, r0, #3
 80064d0:	f024 0403 	bic.w	r4, r4, #3
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d005      	beq.n	80064e4 <_malloc_r+0xa8>
 80064d8:	1a21      	subs	r1, r4, r0
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f95a 	bl	8006794 <_sbrk_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d0cf      	beq.n	8006484 <_malloc_r+0x48>
 80064e4:	6025      	str	r5, [r4, #0]
 80064e6:	e7db      	b.n	80064a0 <_malloc_r+0x64>
 80064e8:	20000234 	.word	0x20000234
 80064ec:	20000238 	.word	0x20000238

080064f0 <__ssputs_r>:
 80064f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	688e      	ldr	r6, [r1, #8]
 80064f6:	4682      	mov	sl, r0
 80064f8:	429e      	cmp	r6, r3
 80064fa:	460c      	mov	r4, r1
 80064fc:	4690      	mov	r8, r2
 80064fe:	4699      	mov	r9, r3
 8006500:	d837      	bhi.n	8006572 <__ssputs_r+0x82>
 8006502:	898a      	ldrh	r2, [r1, #12]
 8006504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006508:	d031      	beq.n	800656e <__ssputs_r+0x7e>
 800650a:	2302      	movs	r3, #2
 800650c:	6825      	ldr	r5, [r4, #0]
 800650e:	6909      	ldr	r1, [r1, #16]
 8006510:	1a6f      	subs	r7, r5, r1
 8006512:	6965      	ldr	r5, [r4, #20]
 8006514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006518:	fb95 f5f3 	sdiv	r5, r5, r3
 800651c:	f109 0301 	add.w	r3, r9, #1
 8006520:	443b      	add	r3, r7
 8006522:	429d      	cmp	r5, r3
 8006524:	bf38      	it	cc
 8006526:	461d      	movcc	r5, r3
 8006528:	0553      	lsls	r3, r2, #21
 800652a:	d530      	bpl.n	800658e <__ssputs_r+0x9e>
 800652c:	4629      	mov	r1, r5
 800652e:	f7ff ff85 	bl	800643c <_malloc_r>
 8006532:	4606      	mov	r6, r0
 8006534:	b950      	cbnz	r0, 800654c <__ssputs_r+0x5c>
 8006536:	230c      	movs	r3, #12
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	f8ca 3000 	str.w	r3, [sl]
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654c:	463a      	mov	r2, r7
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	f7ff fc32 	bl	8005db8 <memcpy>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800655a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	6126      	str	r6, [r4, #16]
 8006562:	443e      	add	r6, r7
 8006564:	6026      	str	r6, [r4, #0]
 8006566:	464e      	mov	r6, r9
 8006568:	6165      	str	r5, [r4, #20]
 800656a:	1bed      	subs	r5, r5, r7
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	454e      	cmp	r6, r9
 8006570:	d900      	bls.n	8006574 <__ssputs_r+0x84>
 8006572:	464e      	mov	r6, r9
 8006574:	4632      	mov	r2, r6
 8006576:	4641      	mov	r1, r8
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	f000 f92d 	bl	80067d8 <memmove>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	2000      	movs	r0, #0
 8006582:	1b9b      	subs	r3, r3, r6
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	441e      	add	r6, r3
 800658a:	6026      	str	r6, [r4, #0]
 800658c:	e7dc      	b.n	8006548 <__ssputs_r+0x58>
 800658e:	462a      	mov	r2, r5
 8006590:	f000 f93d 	bl	800680e <_realloc_r>
 8006594:	4606      	mov	r6, r0
 8006596:	2800      	cmp	r0, #0
 8006598:	d1e2      	bne.n	8006560 <__ssputs_r+0x70>
 800659a:	6921      	ldr	r1, [r4, #16]
 800659c:	4650      	mov	r0, sl
 800659e:	f7ff ff01 	bl	80063a4 <_free_r>
 80065a2:	e7c8      	b.n	8006536 <__ssputs_r+0x46>

080065a4 <_svfiprintf_r>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	461d      	mov	r5, r3
 80065aa:	898b      	ldrh	r3, [r1, #12]
 80065ac:	b09d      	sub	sp, #116	; 0x74
 80065ae:	061f      	lsls	r7, r3, #24
 80065b0:	4680      	mov	r8, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	4616      	mov	r6, r2
 80065b6:	d50f      	bpl.n	80065d8 <_svfiprintf_r+0x34>
 80065b8:	690b      	ldr	r3, [r1, #16]
 80065ba:	b96b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x34>
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	f7ff ff3d 	bl	800643c <_malloc_r>
 80065c2:	6020      	str	r0, [r4, #0]
 80065c4:	6120      	str	r0, [r4, #16]
 80065c6:	b928      	cbnz	r0, 80065d4 <_svfiprintf_r+0x30>
 80065c8:	230c      	movs	r3, #12
 80065ca:	f8c8 3000 	str.w	r3, [r8]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	e0c8      	b.n	8006766 <_svfiprintf_r+0x1c2>
 80065d4:	2340      	movs	r3, #64	; 0x40
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	2300      	movs	r3, #0
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	2320      	movs	r3, #32
 80065de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e2:	2330      	movs	r3, #48	; 0x30
 80065e4:	f04f 0b01 	mov.w	fp, #1
 80065e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ec:	9503      	str	r5, [sp, #12]
 80065ee:	4637      	mov	r7, r6
 80065f0:	463d      	mov	r5, r7
 80065f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065f6:	b10b      	cbz	r3, 80065fc <_svfiprintf_r+0x58>
 80065f8:	2b25      	cmp	r3, #37	; 0x25
 80065fa:	d13e      	bne.n	800667a <_svfiprintf_r+0xd6>
 80065fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x76>
 8006602:	4653      	mov	r3, sl
 8006604:	4632      	mov	r2, r6
 8006606:	4621      	mov	r1, r4
 8006608:	4640      	mov	r0, r8
 800660a:	f7ff ff71 	bl	80064f0 <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80a4 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006616:	4453      	add	r3, sl
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	783b      	ldrb	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 809d 	beq.w	800675c <_svfiprintf_r+0x1b8>
 8006622:	2300      	movs	r3, #0
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006634:	931a      	str	r3, [sp, #104]	; 0x68
 8006636:	462f      	mov	r7, r5
 8006638:	2205      	movs	r2, #5
 800663a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800663e:	4850      	ldr	r0, [pc, #320]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006640:	f7ff fbac 	bl	8005d9c <memchr>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	b9d0      	cbnz	r0, 800667e <_svfiprintf_r+0xda>
 8006648:	06d9      	lsls	r1, r3, #27
 800664a:	bf44      	itt	mi
 800664c:	2220      	movmi	r2, #32
 800664e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006652:	071a      	lsls	r2, r3, #28
 8006654:	bf44      	itt	mi
 8006656:	222b      	movmi	r2, #43	; 0x2b
 8006658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800665c:	782a      	ldrb	r2, [r5, #0]
 800665e:	2a2a      	cmp	r2, #42	; 0x2a
 8006660:	d015      	beq.n	800668e <_svfiprintf_r+0xea>
 8006662:	462f      	mov	r7, r5
 8006664:	2000      	movs	r0, #0
 8006666:	250a      	movs	r5, #10
 8006668:	9a07      	ldr	r2, [sp, #28]
 800666a:	4639      	mov	r1, r7
 800666c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006670:	3b30      	subs	r3, #48	; 0x30
 8006672:	2b09      	cmp	r3, #9
 8006674:	d94d      	bls.n	8006712 <_svfiprintf_r+0x16e>
 8006676:	b1b8      	cbz	r0, 80066a8 <_svfiprintf_r+0x104>
 8006678:	e00f      	b.n	800669a <_svfiprintf_r+0xf6>
 800667a:	462f      	mov	r7, r5
 800667c:	e7b8      	b.n	80065f0 <_svfiprintf_r+0x4c>
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <_svfiprintf_r+0x1dc>)
 8006680:	463d      	mov	r5, r7
 8006682:	1a80      	subs	r0, r0, r2
 8006684:	fa0b f000 	lsl.w	r0, fp, r0
 8006688:	4318      	orrs	r0, r3
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	e7d3      	b.n	8006636 <_svfiprintf_r+0x92>
 800668e:	9a03      	ldr	r2, [sp, #12]
 8006690:	1d11      	adds	r1, r2, #4
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	9103      	str	r1, [sp, #12]
 8006696:	2a00      	cmp	r2, #0
 8006698:	db01      	blt.n	800669e <_svfiprintf_r+0xfa>
 800669a:	9207      	str	r2, [sp, #28]
 800669c:	e004      	b.n	80066a8 <_svfiprintf_r+0x104>
 800669e:	4252      	negs	r2, r2
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	9207      	str	r2, [sp, #28]
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	783b      	ldrb	r3, [r7, #0]
 80066aa:	2b2e      	cmp	r3, #46	; 0x2e
 80066ac:	d10c      	bne.n	80066c8 <_svfiprintf_r+0x124>
 80066ae:	787b      	ldrb	r3, [r7, #1]
 80066b0:	2b2a      	cmp	r3, #42	; 0x2a
 80066b2:	d133      	bne.n	800671c <_svfiprintf_r+0x178>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	3702      	adds	r7, #2
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9203      	str	r2, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c6:	9305      	str	r3, [sp, #20]
 80066c8:	4d2e      	ldr	r5, [pc, #184]	; (8006784 <_svfiprintf_r+0x1e0>)
 80066ca:	2203      	movs	r2, #3
 80066cc:	7839      	ldrb	r1, [r7, #0]
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff fb64 	bl	8005d9c <memchr>
 80066d4:	b138      	cbz	r0, 80066e6 <_svfiprintf_r+0x142>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	1b40      	subs	r0, r0, r5
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	3701      	adds	r7, #1
 80066e2:	4303      	orrs	r3, r0
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	7839      	ldrb	r1, [r7, #0]
 80066e8:	2206      	movs	r2, #6
 80066ea:	4827      	ldr	r0, [pc, #156]	; (8006788 <_svfiprintf_r+0x1e4>)
 80066ec:	1c7e      	adds	r6, r7, #1
 80066ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f2:	f7ff fb53 	bl	8005d9c <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1c8>
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <_svfiprintf_r+0x1e8>)
 80066fc:	bb13      	cbnz	r3, 8006744 <_svfiprintf_r+0x1a0>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	444b      	add	r3, r9
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e76d      	b.n	80065ee <_svfiprintf_r+0x4a>
 8006712:	fb05 3202 	mla	r2, r5, r2, r3
 8006716:	2001      	movs	r0, #1
 8006718:	460f      	mov	r7, r1
 800671a:	e7a6      	b.n	800666a <_svfiprintf_r+0xc6>
 800671c:	2300      	movs	r3, #0
 800671e:	250a      	movs	r5, #10
 8006720:	4619      	mov	r1, r3
 8006722:	3701      	adds	r7, #1
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	4638      	mov	r0, r7
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_svfiprintf_r+0x196>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c8      	beq.n	80066c8 <_svfiprintf_r+0x124>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c6      	b.n	80066c8 <_svfiprintf_r+0x124>
 800673a:	fb05 2101 	mla	r1, r5, r1, r2
 800673e:	2301      	movs	r3, #1
 8006740:	4607      	mov	r7, r0
 8006742:	e7f0      	b.n	8006726 <_svfiprintf_r+0x182>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	4622      	mov	r2, r4
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <_svfiprintf_r+0x1ec>)
 800674c:	a904      	add	r1, sp, #16
 800674e:	4640      	mov	r0, r8
 8006750:	f7fe f8ec 	bl	800492c <_printf_float>
 8006754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006758:	4681      	mov	r9, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x166>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af35 	bmi.w	80065ce <_svfiprintf_r+0x2a>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4622      	mov	r2, r4
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_svfiprintf_r+0x1ec>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4640      	mov	r0, r8
 8006778:	f7fe fb84 	bl	8004e84 <_printf_i>
 800677c:	e7ea      	b.n	8006754 <_svfiprintf_r+0x1b0>
 800677e:	bf00      	nop
 8006780:	080069fc 	.word	0x080069fc
 8006784:	08006a02 	.word	0x08006a02
 8006788:	08006a06 	.word	0x08006a06
 800678c:	0800492d 	.word	0x0800492d
 8006790:	080064f1 	.word	0x080064f1

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	2300      	movs	r3, #0
 8006798:	4c05      	ldr	r4, [pc, #20]	; (80067b0 <_sbrk_r+0x1c>)
 800679a:	4605      	mov	r5, r0
 800679c:	4608      	mov	r0, r1
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	f7fd fc98 	bl	80040d4 <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	200003f8 	.word	0x200003f8

080067b4 <__ascii_mbtowc>:
 80067b4:	b082      	sub	sp, #8
 80067b6:	b901      	cbnz	r1, 80067ba <__ascii_mbtowc+0x6>
 80067b8:	a901      	add	r1, sp, #4
 80067ba:	b142      	cbz	r2, 80067ce <__ascii_mbtowc+0x1a>
 80067bc:	b14b      	cbz	r3, 80067d2 <__ascii_mbtowc+0x1e>
 80067be:	7813      	ldrb	r3, [r2, #0]
 80067c0:	600b      	str	r3, [r1, #0]
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	1c10      	adds	r0, r2, #0
 80067c6:	bf18      	it	ne
 80067c8:	2001      	movne	r0, #1
 80067ca:	b002      	add	sp, #8
 80067cc:	4770      	bx	lr
 80067ce:	4610      	mov	r0, r2
 80067d0:	e7fb      	b.n	80067ca <__ascii_mbtowc+0x16>
 80067d2:	f06f 0001 	mvn.w	r0, #1
 80067d6:	e7f8      	b.n	80067ca <__ascii_mbtowc+0x16>

080067d8 <memmove>:
 80067d8:	4288      	cmp	r0, r1
 80067da:	b510      	push	{r4, lr}
 80067dc:	eb01 0302 	add.w	r3, r1, r2
 80067e0:	d807      	bhi.n	80067f2 <memmove+0x1a>
 80067e2:	1e42      	subs	r2, r0, #1
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d00a      	beq.n	80067fe <memmove+0x26>
 80067e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067f0:	e7f8      	b.n	80067e4 <memmove+0xc>
 80067f2:	4283      	cmp	r3, r0
 80067f4:	d9f5      	bls.n	80067e2 <memmove+0xa>
 80067f6:	1881      	adds	r1, r0, r2
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	42d3      	cmn	r3, r2
 80067fc:	d100      	bne.n	8006800 <memmove+0x28>
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006804:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006808:	e7f7      	b.n	80067fa <memmove+0x22>

0800680a <__malloc_lock>:
 800680a:	4770      	bx	lr

0800680c <__malloc_unlock>:
 800680c:	4770      	bx	lr

0800680e <_realloc_r>:
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	4607      	mov	r7, r0
 8006812:	4614      	mov	r4, r2
 8006814:	460e      	mov	r6, r1
 8006816:	b921      	cbnz	r1, 8006822 <_realloc_r+0x14>
 8006818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800681c:	4611      	mov	r1, r2
 800681e:	f7ff be0d 	b.w	800643c <_malloc_r>
 8006822:	b922      	cbnz	r2, 800682e <_realloc_r+0x20>
 8006824:	f7ff fdbe 	bl	80063a4 <_free_r>
 8006828:	4625      	mov	r5, r4
 800682a:	4628      	mov	r0, r5
 800682c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682e:	f000 f821 	bl	8006874 <_malloc_usable_size_r>
 8006832:	42a0      	cmp	r0, r4
 8006834:	d20f      	bcs.n	8006856 <_realloc_r+0x48>
 8006836:	4621      	mov	r1, r4
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff fdff 	bl	800643c <_malloc_r>
 800683e:	4605      	mov	r5, r0
 8006840:	2800      	cmp	r0, #0
 8006842:	d0f2      	beq.n	800682a <_realloc_r+0x1c>
 8006844:	4631      	mov	r1, r6
 8006846:	4622      	mov	r2, r4
 8006848:	f7ff fab6 	bl	8005db8 <memcpy>
 800684c:	4631      	mov	r1, r6
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff fda8 	bl	80063a4 <_free_r>
 8006854:	e7e9      	b.n	800682a <_realloc_r+0x1c>
 8006856:	4635      	mov	r5, r6
 8006858:	e7e7      	b.n	800682a <_realloc_r+0x1c>

0800685a <__ascii_wctomb>:
 800685a:	b149      	cbz	r1, 8006870 <__ascii_wctomb+0x16>
 800685c:	2aff      	cmp	r2, #255	; 0xff
 800685e:	bf8b      	itete	hi
 8006860:	238a      	movhi	r3, #138	; 0x8a
 8006862:	700a      	strbls	r2, [r1, #0]
 8006864:	6003      	strhi	r3, [r0, #0]
 8006866:	2001      	movls	r0, #1
 8006868:	bf88      	it	hi
 800686a:	f04f 30ff 	movhi.w	r0, #4294967295
 800686e:	4770      	bx	lr
 8006870:	4608      	mov	r0, r1
 8006872:	4770      	bx	lr

08006874 <_malloc_usable_size_r>:
 8006874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006878:	1f18      	subs	r0, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	bfbc      	itt	lt
 800687e:	580b      	ldrlt	r3, [r1, r0]
 8006880:	18c0      	addlt	r0, r0, r3
 8006882:	4770      	bx	lr

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
