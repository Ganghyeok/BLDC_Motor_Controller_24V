
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009630  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  08009760  08009760  00019760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2a0  0800a2a0  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2a0  0800a2a0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a2a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001d8  0800a480  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800a480  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012097  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002082  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00034320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a32b  00000000  00000000  00034ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a95  00000000  00000000  0003f223  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002aff5  00000000  00000000  00047cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00072cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  00072d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	08009748 	.word	0x08009748

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	08009748 	.word	0x08009748

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	d1ed      	bne.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <DMA_Init+0xbc>)
 8001184:	429a      	cmp	r2, r3
 8001186:	d80f      	bhi.n	80011a8 <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <DMA_Init+0xc0>)
 8001190:	4413      	add	r3, r2
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <DMA_Init+0xc4>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <DMA_Init+0xc8>)
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a6:	e00e      	b.n	80011c6 <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <DMA_Init+0xcc>)
 80011b0:	4413      	add	r3, r2
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <DMA_Init+0xc4>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	009a      	lsls	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <DMA_Init+0xd0>)
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011e0:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 80011ea:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011f6:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001202:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40020407 	.word	0x40020407
 8001230:	bffdfff8 	.word	0xbffdfff8
 8001234:	cccccccd 	.word	0xcccccccd
 8001238:	40020000 	.word	0x40020000
 800123c:	bffdfbf8 	.word	0xbffdfbf8
 8001240:	40020400 	.word	0x40020400

08001244 <DMA_IRQ_Handling>:
	ENABLE_DMA(pDMAHandle);
}


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2104      	movs	r1, #4
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80bf 	beq.w	80013f2 <DMA_IRQ_Handling+0x1ae>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80bb 	beq.w	80013f2 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b99      	ldr	r3, [pc, #612]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001284:	429a      	cmp	r2, r3
 8001286:	d958      	bls.n	800133a <DMA_IRQ_Handling+0xf6>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a97      	ldr	r2, [pc, #604]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d04f      	beq.n	8001332 <DMA_IRQ_Handling+0xee>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a96      	ldr	r2, [pc, #600]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d048      	beq.n	800132e <DMA_IRQ_Handling+0xea>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a94      	ldr	r2, [pc, #592]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d040      	beq.n	8001328 <DMA_IRQ_Handling+0xe4>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d038      	beq.n	8001322 <DMA_IRQ_Handling+0xde>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a91      	ldr	r2, [pc, #580]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d030      	beq.n	800131c <DMA_IRQ_Handling+0xd8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a90      	ldr	r2, [pc, #576]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d028      	beq.n	8001316 <DMA_IRQ_Handling+0xd2>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d020      	beq.n	8001310 <DMA_IRQ_Handling+0xcc>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8c      	ldr	r2, [pc, #560]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <DMA_IRQ_Handling+0xc8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d012      	beq.n	8001308 <DMA_IRQ_Handling+0xc4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a89      	ldr	r2, [pc, #548]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00a      	beq.n	8001302 <DMA_IRQ_Handling+0xbe>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a87      	ldr	r2, [pc, #540]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d102      	bne.n	80012fc <DMA_IRQ_Handling+0xb8>
 80012f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fa:	e01b      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 80012fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001300:	e018      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	e015      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	e013      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800130c:	2304      	movs	r3, #4
 800130e:	e011      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001310:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001314:	e00e      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	e00b      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800131c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001320:	e008      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	e005      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132c:	e002      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	e000      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001332:	2304      	movs	r3, #4
 8001334:	4a77      	ldr	r2, [pc, #476]	; (8001514 <DMA_IRQ_Handling+0x2d0>)
 8001336:	6053      	str	r3, [r2, #4]
 8001338:	e057      	b.n	80013ea <DMA_IRQ_Handling+0x1a6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6b      	ldr	r2, [pc, #428]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d04f      	beq.n	80013e4 <DMA_IRQ_Handling+0x1a0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d048      	beq.n	80013e0 <DMA_IRQ_Handling+0x19c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d040      	beq.n	80013da <DMA_IRQ_Handling+0x196>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d038      	beq.n	80013d4 <DMA_IRQ_Handling+0x190>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d030      	beq.n	80013ce <DMA_IRQ_Handling+0x18a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a63      	ldr	r2, [pc, #396]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d028      	beq.n	80013c8 <DMA_IRQ_Handling+0x184>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d020      	beq.n	80013c2 <DMA_IRQ_Handling+0x17e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <DMA_IRQ_Handling+0x17a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d012      	beq.n	80013ba <DMA_IRQ_Handling+0x176>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a5c      	ldr	r2, [pc, #368]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00a      	beq.n	80013b4 <DMA_IRQ_Handling+0x170>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d102      	bne.n	80013ae <DMA_IRQ_Handling+0x16a>
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	e01b      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013b2:	e018      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	e015      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	e013      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013be:	2304      	movs	r3, #4
 80013c0:	e011      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c6:	e00e      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013cc:	e00b      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013d2:	e008      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d8:	e005      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013de:	e002      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	e000      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013e4:	2304      	movs	r3, #4
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <DMA_IRQ_Handling+0x2d4>)
 80013e8:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2102      	movs	r1, #2
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80dd 	beq.w	80015d4 <DMA_IRQ_Handling+0x390>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80d9 	beq.w	80015d4 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d972      	bls.n	800151c <DMA_IRQ_Handling+0x2d8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d04f      	beq.n	80014e0 <DMA_IRQ_Handling+0x29c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d048      	beq.n	80014dc <DMA_IRQ_Handling+0x298>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d040      	beq.n	80014d6 <DMA_IRQ_Handling+0x292>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d038      	beq.n	80014d0 <DMA_IRQ_Handling+0x28c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a26      	ldr	r2, [pc, #152]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d030      	beq.n	80014ca <DMA_IRQ_Handling+0x286>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d028      	beq.n	80014c4 <DMA_IRQ_Handling+0x280>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d020      	beq.n	80014be <DMA_IRQ_Handling+0x27a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <DMA_IRQ_Handling+0x276>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d012      	beq.n	80014b6 <DMA_IRQ_Handling+0x272>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00a      	beq.n	80014b0 <DMA_IRQ_Handling+0x26c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d102      	bne.n	80014aa <DMA_IRQ_Handling+0x266>
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	e01b      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ae:	e018      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	e015      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014b6:	2320      	movs	r3, #32
 80014b8:	e013      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e011      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	e00e      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014c8:	e00b      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ce:	e008      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	e005      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014da:	e002      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014dc:	2320      	movs	r3, #32
 80014de:	e000      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014e0:	2302      	movs	r3, #2
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <DMA_IRQ_Handling+0x2d0>)
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	e071      	b.n	80015cc <DMA_IRQ_Handling+0x388>
 80014e8:	40020080 	.word	0x40020080
 80014ec:	40020008 	.word	0x40020008
 80014f0:	4002001c 	.word	0x4002001c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	40020044 	.word	0x40020044
 80014fc:	40020058 	.word	0x40020058
 8001500:	4002006c 	.word	0x4002006c
 8001504:	40020408 	.word	0x40020408
 8001508:	4002041c 	.word	0x4002041c
 800150c:	40020430 	.word	0x40020430
 8001510:	40020444 	.word	0x40020444
 8001514:	40020400 	.word	0x40020400
 8001518:	40020000 	.word	0x40020000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9a      	ldr	r2, [pc, #616]	; (800178c <DMA_IRQ_Handling+0x548>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d04f      	beq.n	80015c6 <DMA_IRQ_Handling+0x382>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a99      	ldr	r2, [pc, #612]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d048      	beq.n	80015c2 <DMA_IRQ_Handling+0x37e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a97      	ldr	r2, [pc, #604]	; (8001794 <DMA_IRQ_Handling+0x550>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d040      	beq.n	80015bc <DMA_IRQ_Handling+0x378>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a96      	ldr	r2, [pc, #600]	; (8001798 <DMA_IRQ_Handling+0x554>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d038      	beq.n	80015b6 <DMA_IRQ_Handling+0x372>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a94      	ldr	r2, [pc, #592]	; (800179c <DMA_IRQ_Handling+0x558>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d030      	beq.n	80015b0 <DMA_IRQ_Handling+0x36c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a93      	ldr	r2, [pc, #588]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d028      	beq.n	80015aa <DMA_IRQ_Handling+0x366>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d020      	beq.n	80015a4 <DMA_IRQ_Handling+0x360>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d019      	beq.n	80015a0 <DMA_IRQ_Handling+0x35c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a8e      	ldr	r2, [pc, #568]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d012      	beq.n	800159c <DMA_IRQ_Handling+0x358>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8d      	ldr	r2, [pc, #564]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00a      	beq.n	8001596 <DMA_IRQ_Handling+0x352>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a8b      	ldr	r2, [pc, #556]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d102      	bne.n	8001590 <DMA_IRQ_Handling+0x34c>
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	e01b      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	e018      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	e015      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 800159c:	2320      	movs	r3, #32
 800159e:	e013      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e011      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a8:	e00e      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015ae:	e00b      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b4:	e008      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	e005      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c0:	e002      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015c2:	2320      	movs	r3, #32
 80015c4:	e000      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015c6:	2302      	movs	r3, #2
 80015c8:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <DMA_IRQ_Handling+0x574>)
 80015ca:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2108      	movs	r1, #8
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c3 	beq.w	8001782 <DMA_IRQ_Handling+0x53e>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80bf 	beq.w	8001782 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d958      	bls.n	80016c2 <DMA_IRQ_Handling+0x47e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5d      	ldr	r2, [pc, #372]	; (800178c <DMA_IRQ_Handling+0x548>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d04f      	beq.n	80016ba <DMA_IRQ_Handling+0x476>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5c      	ldr	r2, [pc, #368]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d048      	beq.n	80016b6 <DMA_IRQ_Handling+0x472>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <DMA_IRQ_Handling+0x550>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d040      	beq.n	80016b0 <DMA_IRQ_Handling+0x46c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a59      	ldr	r2, [pc, #356]	; (8001798 <DMA_IRQ_Handling+0x554>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d038      	beq.n	80016aa <DMA_IRQ_Handling+0x466>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <DMA_IRQ_Handling+0x558>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d030      	beq.n	80016a4 <DMA_IRQ_Handling+0x460>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d028      	beq.n	800169e <DMA_IRQ_Handling+0x45a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d020      	beq.n	8001698 <DMA_IRQ_Handling+0x454>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a53      	ldr	r2, [pc, #332]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d019      	beq.n	8001694 <DMA_IRQ_Handling+0x450>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d012      	beq.n	8001690 <DMA_IRQ_Handling+0x44c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00a      	beq.n	800168a <DMA_IRQ_Handling+0x446>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d102      	bne.n	8001684 <DMA_IRQ_Handling+0x440>
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	e01b      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	e018      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	e015      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001690:	2310      	movs	r3, #16
 8001692:	e013      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001694:	2301      	movs	r3, #1
 8001696:	e011      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169c:	e00e      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 800169e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016a2:	e00b      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	e008      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	e005      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	e002      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016b6:	2310      	movs	r3, #16
 80016b8:	e000      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016ba:	2301      	movs	r3, #1
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <DMA_IRQ_Handling+0x578>)
 80016be:	6053      	str	r3, [r2, #4]
 80016c0:	e057      	b.n	8001772 <DMA_IRQ_Handling+0x52e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <DMA_IRQ_Handling+0x548>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04f      	beq.n	800176c <DMA_IRQ_Handling+0x528>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d048      	beq.n	8001768 <DMA_IRQ_Handling+0x524>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <DMA_IRQ_Handling+0x550>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d040      	beq.n	8001762 <DMA_IRQ_Handling+0x51e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <DMA_IRQ_Handling+0x554>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d038      	beq.n	800175c <DMA_IRQ_Handling+0x518>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <DMA_IRQ_Handling+0x558>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d030      	beq.n	8001756 <DMA_IRQ_Handling+0x512>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d028      	beq.n	8001750 <DMA_IRQ_Handling+0x50c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d020      	beq.n	800174a <DMA_IRQ_Handling+0x506>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <DMA_IRQ_Handling+0x502>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a25      	ldr	r2, [pc, #148]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d012      	beq.n	8001742 <DMA_IRQ_Handling+0x4fe>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00a      	beq.n	800173c <DMA_IRQ_Handling+0x4f8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d102      	bne.n	8001736 <DMA_IRQ_Handling+0x4f2>
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	e01b      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	e018      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	e015      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001742:	2310      	movs	r3, #16
 8001744:	e013      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001746:	2301      	movs	r3, #1
 8001748:	e011      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	e00e      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001754:	e00b      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	e008      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	e005      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	e002      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001768:	2310      	movs	r3, #16
 800176a:	e000      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800176c:	2301      	movs	r3, #1
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <DMA_IRQ_Handling+0x574>)
 8001770:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
	}
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020008 	.word	0x40020008
 8001790:	4002001c 	.word	0x4002001c
 8001794:	40020030 	.word	0x40020030
 8001798:	40020044 	.word	0x40020044
 800179c:	40020058 	.word	0x40020058
 80017a0:	4002006c 	.word	0x4002006c
 80017a4:	40020080 	.word	0x40020080
 80017a8:	40020408 	.word	0x40020408
 80017ac:	4002041c 	.word	0x4002041c
 80017b0:	40020430 	.word	0x40020430
 80017b4:	40020444 	.word	0x40020444
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400

080017c0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a96      	ldr	r2, [pc, #600]	; (8001a30 <GPIO_Init+0x270>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d106      	bne.n	80017e8 <GPIO_Init+0x28>
 80017da:	4b96      	ldr	r3, [pc, #600]	; (8001a34 <GPIO_Init+0x274>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a95      	ldr	r2, [pc, #596]	; (8001a34 <GPIO_Init+0x274>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	e03c      	b.n	8001862 <GPIO_Init+0xa2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a93      	ldr	r2, [pc, #588]	; (8001a38 <GPIO_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d106      	bne.n	80017fe <GPIO_Init+0x3e>
 80017f0:	4b90      	ldr	r3, [pc, #576]	; (8001a34 <GPIO_Init+0x274>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a8f      	ldr	r2, [pc, #572]	; (8001a34 <GPIO_Init+0x274>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	e031      	b.n	8001862 <GPIO_Init+0xa2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a8e      	ldr	r2, [pc, #568]	; (8001a3c <GPIO_Init+0x27c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d106      	bne.n	8001814 <GPIO_Init+0x54>
 8001806:	4b8b      	ldr	r3, [pc, #556]	; (8001a34 <GPIO_Init+0x274>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a8a      	ldr	r2, [pc, #552]	; (8001a34 <GPIO_Init+0x274>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	e026      	b.n	8001862 <GPIO_Init+0xa2>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <GPIO_Init+0x280>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d106      	bne.n	800182a <GPIO_Init+0x6a>
 800181c:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <GPIO_Init+0x274>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a84      	ldr	r2, [pc, #528]	; (8001a34 <GPIO_Init+0x274>)
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	e01b      	b.n	8001862 <GPIO_Init+0xa2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a85      	ldr	r2, [pc, #532]	; (8001a44 <GPIO_Init+0x284>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d106      	bne.n	8001840 <GPIO_Init+0x80>
 8001832:	4b80      	ldr	r3, [pc, #512]	; (8001a34 <GPIO_Init+0x274>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a7f      	ldr	r2, [pc, #508]	; (8001a34 <GPIO_Init+0x274>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	e010      	b.n	8001862 <GPIO_Init+0xa2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <GPIO_Init+0x288>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d106      	bne.n	8001856 <GPIO_Init+0x96>
 8001848:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <GPIO_Init+0x274>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a79      	ldr	r2, [pc, #484]	; (8001a34 <GPIO_Init+0x274>)
 800184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	e005      	b.n	8001862 <GPIO_Init+0xa2>
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <GPIO_Init+0x274>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a76      	ldr	r2, [pc, #472]	; (8001a34 <GPIO_Init+0x274>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	76fb      	strb	r3, [r7, #27]
 8001866:	e1d0      	b.n	8001c0a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	7efa      	ldrb	r2, [r7, #27]
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 81c0 	beq.w	8001bfc <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b11      	cmp	r3, #17
 8001882:	d039      	beq.n	80018f8 <GPIO_Init+0x138>
 8001884:	2b11      	cmp	r3, #17
 8001886:	d807      	bhi.n	8001898 <GPIO_Init+0xd8>
 8001888:	2b01      	cmp	r3, #1
 800188a:	d016      	beq.n	80018ba <GPIO_Init+0xfa>
 800188c:	2b01      	cmp	r3, #1
 800188e:	f0c0 8090 	bcc.w	80019b2 <GPIO_Init+0x1f2>
 8001892:	2b02      	cmp	r3, #2
 8001894:	d04f      	beq.n	8001936 <GPIO_Init+0x176>
 8001896:	e0bd      	b.n	8001a14 <GPIO_Init+0x254>
 8001898:	4a6c      	ldr	r2, [pc, #432]	; (8001a4c <GPIO_Init+0x28c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 8089 	beq.w	80019b2 <GPIO_Init+0x1f2>
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <GPIO_Init+0x28c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d802      	bhi.n	80018ac <GPIO_Init+0xec>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d064      	beq.n	8001974 <GPIO_Init+0x1b4>
 80018aa:	e0b3      	b.n	8001a14 <GPIO_Init+0x254>
 80018ac:	4a68      	ldr	r2, [pc, #416]	; (8001a50 <GPIO_Init+0x290>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d07f      	beq.n	80019b2 <GPIO_Init+0x1f2>
 80018b2:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <GPIO_Init+0x294>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d07c      	beq.n	80019b2 <GPIO_Init+0x1f2>
 80018b8:	e0ac      	b.n	8001a14 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d104      	bne.n	80018cc <GPIO_Init+0x10c>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e010      	b.n	80018ee <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d104      	bne.n	80018de <GPIO_Init+0x11e>
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	e007      	b.n	80018ee <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d103      	bne.n	80018ee <GPIO_Init+0x12e>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f043 0303 	orr.w	r3, r3, #3
 80018ec:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f023 030c 	bic.w	r3, r3, #12
 80018f4:	61fb      	str	r3, [r7, #28]


					break;
 80018f6:	e08d      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d104      	bne.n	800190a <GPIO_Init+0x14a>
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e010      	b.n	800192c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d104      	bne.n	800191c <GPIO_Init+0x15c>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e007      	b.n	800192c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d103      	bne.n	800192c <GPIO_Init+0x16c>
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f043 0303 	orr.w	r3, r3, #3
 800192a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	61fb      	str	r3, [r7, #28]

					break;
 8001934:	e06e      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d104      	bne.n	8001948 <GPIO_Init+0x188>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e010      	b.n	800196a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d104      	bne.n	800195a <GPIO_Init+0x19a>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e007      	b.n	800196a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d103      	bne.n	800196a <GPIO_Init+0x1aa>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f043 0303 	orr.w	r3, r3, #3
 8001968:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	61fb      	str	r3, [r7, #28]

					break;
 8001972:	e04f      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <GPIO_Init+0x1c6>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e010      	b.n	80019a8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d104      	bne.n	8001998 <GPIO_Init+0x1d8>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e007      	b.n	80019a8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d103      	bne.n	80019a8 <GPIO_Init+0x1e8>
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f043 0303 	orr.w	r3, r3, #3
 80019a6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f043 030c 	orr.w	r3, r3, #12
 80019ae:	61fb      	str	r3, [r7, #28]

					break;
 80019b0:	e030      	b.n	8001a14 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f023 0303 	bic.w	r3, r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d104      	bne.n	80019cc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80019ca:	e022      	b.n	8001a12 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10d      	bne.n	80019f0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f043 0308 	orr.w	r3, r3, #8
 80019da:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	7efa      	ldrb	r2, [r7, #27]
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
					break;
 80019ee:	e010      	b.n	8001a12 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10c      	bne.n	8001a12 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	7efa      	ldrb	r2, [r7, #27]
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	615a      	str	r2, [r3, #20]
					break;
 8001a12:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001a14:	7efb      	ldrb	r3, [r7, #27]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d801      	bhi.n	8001a1e <GPIO_Init+0x25e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	e001      	b.n	8001a22 <GPIO_Init+0x262>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3304      	adds	r3, #4
 8001a22:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d816      	bhi.n	8001a58 <GPIO_Init+0x298>
 8001a2a:	7efb      	ldrb	r3, [r7, #27]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	e016      	b.n	8001a5e <GPIO_Init+0x29e>
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40011800 	.word	0x40011800
 8001a48:	40011c00 	.word	0x40011c00
 8001a4c:	10110000 	.word	0x10110000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10310000 	.word	0x10310000
 8001a58:	7efb      	ldrb	r3, [r7, #27]
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	43d2      	mvns	r2, r2
 8001a6e:	401a      	ands	r2, r3
 8001a70:	69f9      	ldr	r1, [r7, #28]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80b8 	beq.w	8001bfc <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <GPIO_Init+0x45c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a62      	ldr	r2, [pc, #392]	; (8001c1c <GPIO_Init+0x45c>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8001a98:	7efb      	ldrb	r3, [r7, #27]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001aa0:	7efb      	ldrb	r3, [r7, #27]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001aa8:	4a5d      	ldr	r2, [pc, #372]	; (8001c20 <GPIO_Init+0x460>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	43d2      	mvns	r2, r2
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4958      	ldr	r1, [pc, #352]	; (8001c24 <GPIO_Init+0x464>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d01f      	beq.n	8001b08 <GPIO_Init+0x348>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4957      	ldr	r1, [pc, #348]	; (8001c28 <GPIO_Init+0x468>)
 8001acc:	428b      	cmp	r3, r1
 8001ace:	d019      	beq.n	8001b04 <GPIO_Init+0x344>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4956      	ldr	r1, [pc, #344]	; (8001c2c <GPIO_Init+0x46c>)
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d013      	beq.n	8001b00 <GPIO_Init+0x340>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4955      	ldr	r1, [pc, #340]	; (8001c30 <GPIO_Init+0x470>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d00d      	beq.n	8001afc <GPIO_Init+0x33c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4954      	ldr	r1, [pc, #336]	; (8001c34 <GPIO_Init+0x474>)
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d007      	beq.n	8001af8 <GPIO_Init+0x338>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4953      	ldr	r1, [pc, #332]	; (8001c38 <GPIO_Init+0x478>)
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d101      	bne.n	8001af4 <GPIO_Init+0x334>
 8001af0:	2305      	movs	r3, #5
 8001af2:	e00a      	b.n	8001b0a <GPIO_Init+0x34a>
 8001af4:	2306      	movs	r3, #6
 8001af6:	e008      	b.n	8001b0a <GPIO_Init+0x34a>
 8001af8:	2304      	movs	r3, #4
 8001afa:	e006      	b.n	8001b0a <GPIO_Init+0x34a>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e004      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e002      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	0089      	lsls	r1, r1, #2
 8001b0e:	408b      	lsls	r3, r1
 8001b10:	4943      	ldr	r1, [pc, #268]	; (8001c20 <GPIO_Init+0x460>)
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3302      	adds	r3, #2
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00a      	beq.n	8001b3e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <GPIO_Init+0x47c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	7efa      	ldrb	r2, [r7, #27]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <GPIO_Init+0x47c>)
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e00a      	b.n	8001b54 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <GPIO_Init+0x47c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	7efa      	ldrb	r2, [r7, #27]
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	43d2      	mvns	r2, r2
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <GPIO_Init+0x47c>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <GPIO_Init+0x47c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	7efa      	ldrb	r2, [r7, #27]
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <GPIO_Init+0x47c>)
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	e00a      	b.n	8001b8c <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <GPIO_Init+0x47c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	7efa      	ldrb	r2, [r7, #27]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	43d2      	mvns	r2, r2
 8001b84:	4611      	mov	r1, r2
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <GPIO_Init+0x47c>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <GPIO_Init+0x47c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	7efa      	ldrb	r2, [r7, #27]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <GPIO_Init+0x47c>)
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]
 8001bac:	e00a      	b.n	8001bc4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <GPIO_Init+0x47c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	7efa      	ldrb	r2, [r7, #27]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	43d2      	mvns	r2, r2
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <GPIO_Init+0x47c>)
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <GPIO_Init+0x47c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	7efa      	ldrb	r2, [r7, #27]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <GPIO_Init+0x47c>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]
 8001be4:	e00a      	b.n	8001bfc <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <GPIO_Init+0x47c>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	7efa      	ldrb	r2, [r7, #27]
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <GPIO_Init+0x47c>)
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001c04:	7efb      	ldrb	r3, [r7, #27]
 8001c06:	3301      	adds	r3, #1
 8001c08:	76fb      	strb	r3, [r7, #27]
 8001c0a:	7efb      	ldrb	r3, [r7, #27]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	f67f ae2b 	bls.w	8001868 <GPIO_Init+0xa8>
	}
}
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40011800 	.word	0x40011800
 8001c38:	40011c00 	.word	0x40011c00
 8001c3c:	40010400 	.word	0x40010400

08001c40 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001c62:	e006      	b.n	8001c72 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001c90:	883b      	ldrh	r3, [r7, #0]
 8001c92:	041a      	lsls	r2, r3, #16
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <GPIO_WritePort>:


void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <GPIO_WriteData>:


void GPIO_WriteData(GPIO_TypeDef *GPIOx, uint16_t Data)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Data;
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60da      	str	r2, [r3, #12]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <EXTI_IRQHandling+0x34>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <EXTI_IRQHandling+0x34>)
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	4905      	ldr	r1, [pc, #20]	; (8001d28 <EXTI_IRQHandling+0x34>)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f004 f939 	bl	8005f90 <EXTI_Callback>
	}
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40010400 	.word	0x40010400

08001d2c <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d011      	beq.n	8001d64 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10c      	bne.n	8001d64 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001d56:	bf00      	nop
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f9      	beq.n	8001d58 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d128      	bne.n	8001dbe <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d105      	bne.n	8001d8e <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d8c:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001db0:	bf00      	nop
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <RCC_OscConfig+0x9c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f9      	beq.n	8001db2 <RCC_OscConfig+0x86>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000

08001dcc <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <RCC_ClockConfig+0x7c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	491a      	ldr	r1, [pc, #104]	; (8001e48 <RCC_ClockConfig+0x7c>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4916      	ldr	r1, [pc, #88]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4911      	ldr	r1, [pc, #68]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 0203 	bic.w	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4908      	ldr	r1, [pc, #32]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001e2e:	bf00      	nop
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <RCC_ClockConfig+0x80>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f9      	beq.n	8001e30 <RCC_ClockConfig+0x64>
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000

08001e50 <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <RCC_GetPLLOutputClock+0x70>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <RCC_GetPLLOutputClock+0x1e>
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <RCC_GetPLLOutputClock+0x70>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e020      	b.n	8001eb4 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <RCC_GetPLLOutputClock+0x70>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <RCC_GetPLLOutputClock+0x74>)
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e001      	b.n	8001e88 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <RCC_GetPLLOutputClock+0x78>)
 8001e86:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <RCC_GetPLLOutputClock+0x70>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001e96:	7abb      	ldrb	r3, [r7, #10]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d102      	bne.n	8001ea2 <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	72fb      	strb	r3, [r7, #11]
 8001ea0:	e002      	b.n	8001ea8 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001ea2:	7abb      	ldrb	r3, [r7, #10]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001ea8:	7afa      	ldrb	r2, [r7, #11]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	003d0900 	.word	0x003d0900

08001ecc <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b08d      	sub	sp, #52	; 0x34
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <RCC_GetPCLKxValue+0x144>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001eee:	4b49      	ldr	r3, [pc, #292]	; (8002014 <RCC_GetPCLKxValue+0x148>)
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef2:	e00d      	b.n	8001f10 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001efc:	4b45      	ldr	r3, [pc, #276]	; (8002014 <RCC_GetPCLKxValue+0x148>)
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f00:	e006      	b.n	8001f10 <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001f02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d102      	bne.n	8001f10 <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001f0a:	f7ff ffa1 	bl	8001e50 <RCC_GetPLLOutputClock>
 8001f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <RCC_GetPCLKxValue+0x14c>)
 8001f12:	f107 0410 	add.w	r4, r7, #16
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	; (8002010 <RCC_GetPCLKxValue+0x144>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d803      	bhi.n	8001f3c <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f3a:	e00a      	b.n	8001f52 <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f40:	3b08      	subs	r3, #8
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f48:	4413      	add	r3, r2
 8001f4a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <RCC_GetPCLKxValue+0x150>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11a      	bne.n	8001f94 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <RCC_GetPCLKxValue+0x144>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d803      	bhi.n	8001f7e <RCC_GetPCLKxValue+0xb2>
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f7c:	e027      	b.n	8001fce <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f82:	3b04      	subs	r3, #4
 8001f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f88:	4413      	add	r3, r2
 8001f8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f92:	e01c      	b.n	8001fce <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d119      	bne.n	8001fce <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <RCC_GetPCLKxValue+0x144>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	0adb      	lsrs	r3, r3, #11
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d803      	bhi.n	8001fba <RCC_GetPCLKxValue+0xee>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001fb8:	e009      	b.n	8001fce <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <RCC_GetPCLKxValue+0x11e>
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe8:	e00c      	b.n	8002004 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d109      	bne.n	8002004 <RCC_GetPCLKxValue+0x138>
 8001ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002006:	4618      	mov	r0, r3
 8002008:	3734      	adds	r7, #52	; 0x34
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	08009760 	.word	0x08009760
 800201c:	08009770 	.word	0x08009770

08002020 <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f002 fa53 	bl	80044d4 <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	ea42 0103 	orr.w	r1, r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0c1a      	lsrs	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 0204 	and.w	r2, r2, #4
 80020ac:	605a      	str	r2, [r3, #4]
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d120      	bne.n	800210c <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <SPI_PeripheralClockControl+0xa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d106      	bne.n	80020e0 <SPI_PeripheralClockControl+0x28>
 80020d2:	4b23      	ldr	r3, [pc, #140]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a22      	ldr	r2, [pc, #136]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 80020de:	e038      	b.n	8002152 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a20      	ldr	r2, [pc, #128]	; (8002164 <SPI_PeripheralClockControl+0xac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d106      	bne.n	80020f6 <SPI_PeripheralClockControl+0x3e>
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 80020ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f2:	61d3      	str	r3, [r2, #28]
}
 80020f4:	e02d      	b.n	8002152 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <SPI_PeripheralClockControl+0xb0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d129      	bne.n	8002152 <SPI_PeripheralClockControl+0x9a>
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002108:	61d3      	str	r3, [r2, #28]
}
 800210a:	e022      	b.n	8002152 <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11f      	bne.n	8002152 <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <SPI_PeripheralClockControl+0xa4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d106      	bne.n	8002128 <SPI_PeripheralClockControl+0x70>
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002124:	6193      	str	r3, [r2, #24]
}
 8002126:	e014      	b.n	8002152 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <SPI_PeripheralClockControl+0xac>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d106      	bne.n	800213e <SPI_PeripheralClockControl+0x86>
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800213a:	61d3      	str	r3, [r2, #28]
}
 800213c:	e009      	b.n	8002152 <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <SPI_PeripheralClockControl+0xb0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <SPI_PeripheralClockControl+0x9a>
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SPI_PeripheralClockControl+0xa8>)
 800214c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002150:	61d3      	str	r3, [r2, #28]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40013000 	.word	0x40013000
 8002160:	40021000 	.word	0x40021000
 8002164:	40003800 	.word	0x40003800
 8002168:	40003c00 	.word	0x40003c00

0800216c <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7f1b      	ldrb	r3, [r3, #28]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 feee 	bl	8003f64 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f81f 	bl	80021cc <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	771a      	strb	r2, [r3, #28]
 8002194:	e000      	b.n	8002198 <TIM_Base_Init+0x2c>
		return;
 8002196:	bf00      	nop
}
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7f1b      	ldrb	r3, [r3, #28]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f001 feef 	bl	8003f94 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f808 	bl	80021cc <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	771a      	strb	r2, [r3, #28]
 80021c2:	e000      	b.n	80021c6 <TIM_PWM_Init+0x28>
		return;
 80021c4:	bf00      	nop
}
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68d2      	ldr	r2, [r2, #12]
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6852      	ldr	r2, [r2, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6952      	ldr	r2, [r2, #20]
 800221c:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	615a      	str	r2, [r3, #20]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	f200 80d3 	bhi.w	80023f2 <TIM_PWM_ConfigChannel+0x1ba>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <TIM_PWM_ConfigChannel+0x1c>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002289 	.word	0x08002289
 8002258:	080023f3 	.word	0x080023f3
 800225c:	080023f3 	.word	0x080023f3
 8002260:	080023f3 	.word	0x080023f3
 8002264:	080022e1 	.word	0x080022e1
 8002268:	080023f3 	.word	0x080023f3
 800226c:	080023f3 	.word	0x080023f3
 8002270:	080023f3 	.word	0x080023f3
 8002274:	0800233d 	.word	0x0800233d
 8002278:	080023f3 	.word	0x080023f3
 800227c:	080023f3 	.word	0x080023f3
 8002280:	080023f3 	.word	0x080023f3
 8002284:	08002397 	.word	0x08002397
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f023 0102 	bic.w	r1, r3, #2
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0208 	orr.w	r2, r2, #8
 80022dc:	619a      	str	r2, [r3, #24]

			break;
 80022de:	e089      	b.n	80023f4 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f023 0120 	bic.w	r1, r3, #32
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	6852      	ldr	r2, [r2, #4]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002338:	619a      	str	r2, [r3, #24]

			break;
 800233a:	e05b      	b.n	80023f4 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234a:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	6852      	ldr	r2, [r2, #4]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	61da      	str	r2, [r3, #28]

			break;
 8002394:	e02e      	b.n	80023f4 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023a4:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	031a      	lsls	r2, r3, #12
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ee:	61da      	str	r2, [r3, #28]

			break;
 80023f0:	e000      	b.n	80023f4 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 80023f2:	bf00      	nop
	}
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d157      	bne.n	80024c2 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <TIM_PeripheralClockControl+0x180>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d106      	bne.n	8002428 <TIM_PeripheralClockControl+0x28>
 800241a:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4a59      	ldr	r2, [pc, #356]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002424:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002426:	e0a6      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d106      	bne.n	800243e <TIM_PeripheralClockControl+0x3e>
 8002430:	4b54      	ldr	r3, [pc, #336]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4a53      	ldr	r2, [pc, #332]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	61d3      	str	r3, [r2, #28]
}
 800243c:	e09b      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a51      	ldr	r2, [pc, #324]	; (8002588 <TIM_PeripheralClockControl+0x188>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d106      	bne.n	8002454 <TIM_PeripheralClockControl+0x54>
 8002446:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	61d3      	str	r3, [r2, #28]
}
 8002452:	e090      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4d      	ldr	r2, [pc, #308]	; (800258c <TIM_PeripheralClockControl+0x18c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d106      	bne.n	800246a <TIM_PeripheralClockControl+0x6a>
 800245c:	4b49      	ldr	r3, [pc, #292]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	61d3      	str	r3, [r2, #28]
}
 8002468:	e085      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <TIM_PeripheralClockControl+0x190>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d106      	bne.n	8002480 <TIM_PeripheralClockControl+0x80>
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a43      	ldr	r2, [pc, #268]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	61d3      	str	r3, [r2, #28]
}
 800247e:	e07a      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a44      	ldr	r2, [pc, #272]	; (8002594 <TIM_PeripheralClockControl+0x194>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <TIM_PeripheralClockControl+0x96>
 8002488:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	61d3      	str	r3, [r2, #28]
}
 8002494:	e06f      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <TIM_PeripheralClockControl+0x198>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d106      	bne.n	80024ac <TIM_PeripheralClockControl+0xac>
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a38      	ldr	r2, [pc, #224]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024a4:	f043 0320 	orr.w	r3, r3, #32
 80024a8:	61d3      	str	r3, [r2, #28]
}
 80024aa:	e064      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3b      	ldr	r2, [pc, #236]	; (800259c <TIM_PeripheralClockControl+0x19c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d160      	bne.n	8002576 <TIM_PeripheralClockControl+0x176>
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a32      	ldr	r2, [pc, #200]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024be:	6193      	str	r3, [r2, #24]
}
 80024c0:	e059      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d156      	bne.n	8002576 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <TIM_PeripheralClockControl+0x180>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d106      	bne.n	80024de <TIM_PeripheralClockControl+0xde>
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024da:	6193      	str	r3, [r2, #24]
}
 80024dc:	e04b      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d106      	bne.n	80024f4 <TIM_PeripheralClockControl+0xf4>
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	61d3      	str	r3, [r2, #28]
}
 80024f2:	e040      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <TIM_PeripheralClockControl+0x188>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <TIM_PeripheralClockControl+0x10a>
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a20      	ldr	r2, [pc, #128]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	61d3      	str	r3, [r2, #28]
}
 8002508:	e035      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <TIM_PeripheralClockControl+0x18c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d106      	bne.n	8002520 <TIM_PeripheralClockControl+0x120>
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	61d3      	str	r3, [r2, #28]
}
 800251e:	e02a      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <TIM_PeripheralClockControl+0x190>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d106      	bne.n	8002536 <TIM_PeripheralClockControl+0x136>
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800252e:	f023 0308 	bic.w	r3, r3, #8
 8002532:	61d3      	str	r3, [r2, #28]
}
 8002534:	e01f      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <TIM_PeripheralClockControl+0x194>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d106      	bne.n	800254c <TIM_PeripheralClockControl+0x14c>
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	61d3      	str	r3, [r2, #28]
}
 800254a:	e014      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <TIM_PeripheralClockControl+0x198>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d106      	bne.n	8002562 <TIM_PeripheralClockControl+0x162>
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800255a:	f023 0320 	bic.w	r3, r3, #32
 800255e:	61d3      	str	r3, [r2, #28]
}
 8002560:	e009      	b.n	8002576 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <TIM_PeripheralClockControl+0x19c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d105      	bne.n	8002576 <TIM_PeripheralClockControl+0x176>
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <TIM_PeripheralClockControl+0x184>)
 8002570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002574:	6193      	str	r3, [r2, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40021000 	.word	0x40021000
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800
 8002590:	40000c00 	.word	0x40000c00
 8002594:	40001000 	.word	0x40001000
 8002598:	40001400 	.word	0x40001400
 800259c:	40013400 	.word	0x40013400

080025a0 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <TIM_PWM_Start+0x22>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	621a      	str	r2, [r3, #32]
 80025c0:	e022      	b.n	8002608 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d108      	bne.n	80025da <TIM_PWM_Start+0x3a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0210 	orr.w	r2, r2, #16
 80025d6:	621a      	str	r2, [r3, #32]
 80025d8:	e016      	b.n	8002608 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d108      	bne.n	80025f2 <TIM_PWM_Start+0x52>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ee:	621a      	str	r2, [r3, #32]
 80025f0:	e00a      	b.n	8002608 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d107      	bne.n	8002608 <TIM_PWM_Start+0x68>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002606:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
	...

08002634 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <TIM_IRQHandling+0x3e>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <TIM_IRQHandling+0x48>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a05      	ldr	r2, [pc, #20]	; (800267c <TIM_IRQHandling+0x48>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f003 fb8f 	bl	8005d90 <TIM_PeriodElapsedCallback>
	}
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40001000 	.word	0x40001000

08002680 <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 fb7f 	bl	8003d90 <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f8db 	bl	8002854 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026be:	f023 030c 	bic.w	r3, r3, #12
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	60d3      	str	r3, [r2, #12]
	config = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
	config = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	430a      	orrs	r2, r1
 800270e:	615a      	str	r2, [r3, #20]
	config = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 f8b6 	bl	8002890 <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f892 	bl	8002854 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d136      	bne.n	80027c0 <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a39      	ldr	r2, [pc, #228]	; (800283c <USART_PeripheralClockControl+0xfc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d106      	bne.n	8002768 <USART_PeripheralClockControl+0x28>
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <USART_PeripheralClockControl+0x100>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4a38      	ldr	r2, [pc, #224]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 8002766:	e064      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a36      	ldr	r2, [pc, #216]	; (8002844 <USART_PeripheralClockControl+0x104>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <USART_PeripheralClockControl+0x3e>
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4a32      	ldr	r2, [pc, #200]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	61d3      	str	r3, [r2, #28]
}
 800277c:	e059      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a31      	ldr	r2, [pc, #196]	; (8002848 <USART_PeripheralClockControl+0x108>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d106      	bne.n	8002794 <USART_PeripheralClockControl+0x54>
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a2d      	ldr	r2, [pc, #180]	; (8002840 <USART_PeripheralClockControl+0x100>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	61d3      	str	r3, [r2, #28]
}
 8002792:	e04e      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2d      	ldr	r2, [pc, #180]	; (800284c <USART_PeripheralClockControl+0x10c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <USART_PeripheralClockControl+0x6a>
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <USART_PeripheralClockControl+0x100>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a6:	61d3      	str	r3, [r2, #28]
}
 80027a8:	e043      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a28      	ldr	r2, [pc, #160]	; (8002850 <USART_PeripheralClockControl+0x110>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13f      	bne.n	8002832 <USART_PeripheralClockControl+0xf2>
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027bc:	61d3      	str	r3, [r2, #28]
}
 80027be:	e038      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d135      	bne.n	8002832 <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <USART_PeripheralClockControl+0xfc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d106      	bne.n	80027dc <USART_PeripheralClockControl+0x9c>
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027d8:	6193      	str	r3, [r2, #24]
}
 80027da:	e02a      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <USART_PeripheralClockControl+0x104>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d106      	bne.n	80027f2 <USART_PeripheralClockControl+0xb2>
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80027ee:	61d3      	str	r3, [r2, #28]
}
 80027f0:	e01f      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a14      	ldr	r2, [pc, #80]	; (8002848 <USART_PeripheralClockControl+0x108>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d106      	bne.n	8002808 <USART_PeripheralClockControl+0xc8>
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <USART_PeripheralClockControl+0x100>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a10      	ldr	r2, [pc, #64]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	61d3      	str	r3, [r2, #28]
}
 8002806:	e014      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <USART_PeripheralClockControl+0x10c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <USART_PeripheralClockControl+0xde>
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002816:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800281a:	61d3      	str	r3, [r2, #28]
}
 800281c:	e009      	b.n	8002832 <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <USART_PeripheralClockControl+0x110>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d105      	bne.n	8002832 <USART_PeripheralClockControl+0xf2>
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <USART_PeripheralClockControl+0x100>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <USART_PeripheralClockControl+0x100>)
 800282c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002830:	61d3      	str	r3, [r2, #28]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40013800 	.word	0x40013800
 8002840:	40021000 	.word	0x40021000
 8002844:	40004400 	.word	0x40004400
 8002848:	40004800 	.word	0x40004800
 800284c:	40004c00 	.word	0x40004c00
 8002850:	40005000 	.word	0x40005000

08002854 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d106      	bne.n	8002874 <USART_PeripheralControl+0x20>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 8002872:	e008      	b.n	8002886 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <USART_PeripheralControl+0x32>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <USART_SetBaudRate+0xbc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d104      	bne.n	80028ac <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff fb12 	bl	8001ecc <RCC_GetPCLKxValue>
 80028a8:	61f8      	str	r0, [r7, #28]
 80028aa:	e003      	b.n	80028b4 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff fb0d 	bl	8001ecc <RCC_GetPCLKxValue>
 80028b2:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 80028b4:	69f8      	ldr	r0, [r7, #28]
 80028b6:	f7fe fa1d 	bl	8000cf4 <__aeabi_ui2f>
 80028ba:	4604      	mov	r4, r0
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fa17 	bl	8000cf4 <__aeabi_ui2f>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4619      	mov	r1, r3
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7fe fb1e 	bl	8000f0c <__aeabi_fdiv>
 80028d0:	4603      	mov	r3, r0
 80028d2:	491f      	ldr	r1, [pc, #124]	; (8002950 <USART_SetBaudRate+0xc0>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fa65 	bl	8000da4 <__aeabi_fmul>
 80028da:	4603      	mov	r3, r0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fc27 	bl	8001130 <__aeabi_f2uiz>
 80028e2:	4603      	mov	r3, r0
 80028e4:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <USART_SetBaudRate+0xc4>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4619      	mov	r1, r3
 80028fc:	0089      	lsls	r1, r1, #2
 80028fe:	440b      	add	r3, r1
 8002900:	4619      	mov	r1, r3
 8002902:	0088      	lsls	r0, r1, #2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	440b      	add	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	3332      	adds	r3, #50	; 0x32
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <USART_SetBaudRate+0xc4>)
 800291a:	fb82 1203 	smull	r1, r2, r2, r3
 800291e:	1152      	asrs	r2, r2, #5
 8002920:	17db      	asrs	r3, r3, #31
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	0119      	lsls	r1, r3, #4
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	430b      	orrs	r3, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3724      	adds	r7, #36	; 0x24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	40013800 	.word	0x40013800
 8002950:	42c80000 	.word	0x42c80000
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f001 fb8f 	bl	8004084 <BLDC_MspInit>

}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800297e:	3b01      	subs	r3, #1
 8002980:	2b05      	cmp	r3, #5
 8002982:	d87b      	bhi.n	8002a7c <BLDC_Drive+0x10c>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <BLDC_Drive+0x1c>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	08002a59 	.word	0x08002a59
 8002990:	080029c9 	.word	0x080029c9
 8002994:	080029a5 	.word	0x080029a5
 8002998:	08002a11 	.word	0x08002a11
 800299c:	08002a35 	.word	0x08002a35
 80029a0:	080029ed 	.word	0x080029ed
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <BLDC_Drive+0x46>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb0a 	bl	8002fc8 <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 80029b4:	e064      	b.n	8002a80 <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d15f      	bne.n	8002a80 <BLDC_Drive+0x110>
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa59 	bl	8002e78 <BLDC_Step2>
			break;
 80029c6:	e05b      	b.n	8002a80 <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <BLDC_Drive+0x6a>
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fac0 	bl	8002f58 <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 80029d8:	e054      	b.n	8002a84 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d14f      	bne.n	8002a84 <BLDC_Drive+0x114>
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa0f 	bl	8002e08 <BLDC_Step1>
			break;
 80029ea:	e04b      	b.n	8002a84 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d103      	bne.n	80029fe <BLDC_Drive+0x8e>
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa76 	bl	8002ee8 <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 80029fc:	e044      	b.n	8002a88 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13f      	bne.n	8002a88 <BLDC_Drive+0x118>
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fb15 	bl	8003038 <BLDC_Step6>
			break;
 8002a0e:	e03b      	b.n	8002a88 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <BLDC_Drive+0xb2>
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa2c 	bl	8002e78 <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002a20:	e034      	b.n	8002a8c <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d12f      	bne.n	8002a8c <BLDC_Drive+0x11c>
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 facb 	bl	8002fc8 <BLDC_Step5>
			break;
 8002a32:	e02b      	b.n	8002a8c <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <BLDC_Drive+0xd6>
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9e2 	bl	8002e08 <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8002a44:	e024      	b.n	8002a90 <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d11f      	bne.n	8002a90 <BLDC_Drive+0x120>
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa81 	bl	8002f58 <BLDC_Step4>
			break;
 8002a56:	e01b      	b.n	8002a90 <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <BLDC_Drive+0xfa>
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fae8 	bl	8003038 <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002a68:	e014      	b.n	8002a94 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10f      	bne.n	8002a94 <BLDC_Drive+0x124>
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fa37 	bl	8002ee8 <BLDC_Step3>
			break;
 8002a7a:	e00b      	b.n	8002a94 <BLDC_Drive+0x124>
		}

		default :
			break;
 8002a7c:	bf00      	nop
 8002a7e:	e00a      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a80:	bf00      	nop
 8002a82:	e008      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a84:	bf00      	nop
 8002a86:	e006      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a88:	bf00      	nop
 8002a8a:	e004      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a8c:	bf00      	nop
 8002a8e:	e002      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a90:	bf00      	nop
 8002a92:	e000      	b.n	8002a96 <BLDC_Drive+0x126>
			break;
 8002a94:	bf00      	nop
	}
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8002ac6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fcaa 	bl	8000424 <__aeabi_i2d>
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <BLDC_Get_Speed+0x94>)
 8002ad6:	f7fd fd0f 	bl	80004f8 <__aeabi_dmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	4625      	mov	r5, r4
 8002ae0:	461c      	mov	r4, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af0:	fb03 f302 	mul.w	r3, r3, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fc95 	bl	8000424 <__aeabi_i2d>
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <BLDC_Get_Speed+0x98>)
 8002b00:	f7fd fcfa 	bl	80004f8 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4620      	mov	r0, r4
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	f7fd fe1e 	bl	800074c <__aeabi_ddiv>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	4618      	mov	r0, r3
 8002b16:	4621      	mov	r1, r4
 8002b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b1c:	f7fd fe16 	bl	800074c <__aeabi_ddiv>
 8002b20:	4603      	mov	r3, r0
 8002b22:	460c      	mov	r4, r1
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	404e0000 	.word	0x404e0000
 8002b38:	40080000 	.word	0x40080000

08002b3c <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	f200 8093 	bhi.w	8002c78 <BLDC_Get_Position+0x13c>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <BLDC_Get_Position+0x1c>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002c4d 	.word	0x08002c4d
 8002b5c:	08002b9d 	.word	0x08002b9d
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002bf5 	.word	0x08002bf5
 8002b68:	08002c21 	.word	0x08002c21
 8002b6c:	08002bc9 	.word	0x08002bc9
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d105      	bne.n	8002b86 <BLDC_Get_Position+0x4a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002b84:	e07a      	b.n	8002c7c <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d175      	bne.n	8002c7c <BLDC_Get_Position+0x140>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002b9a:	e06f      	b.n	8002c7c <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d105      	bne.n	8002bb2 <BLDC_Get_Position+0x76>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002bb0:	e066      	b.n	8002c80 <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d161      	bne.n	8002c80 <BLDC_Get_Position+0x144>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002bc6:	e05b      	b.n	8002c80 <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d105      	bne.n	8002bde <BLDC_Get_Position+0xa2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002bdc:	e052      	b.n	8002c84 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d14d      	bne.n	8002c84 <BLDC_Get_Position+0x148>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002bf2:	e047      	b.n	8002c84 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d105      	bne.n	8002c0a <BLDC_Get_Position+0xce>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002c08:	e03e      	b.n	8002c88 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c10:	2b06      	cmp	r3, #6
 8002c12:	d139      	bne.n	8002c88 <BLDC_Get_Position+0x14c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c1e:	e033      	b.n	8002c88 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <BLDC_Get_Position+0xfa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002c34:	e02a      	b.n	8002c8c <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d125      	bne.n	8002c8c <BLDC_Get_Position+0x150>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c4a:	e01f      	b.n	8002c8c <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d105      	bne.n	8002c62 <BLDC_Get_Position+0x126>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002c60:	e016      	b.n	8002c90 <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d111      	bne.n	8002c90 <BLDC_Get_Position+0x154>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c76:	e00b      	b.n	8002c90 <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002c78:	bf00      	nop
 8002c7a:	e00a      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c7c:	bf00      	nop
 8002c7e:	e008      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c80:	bf00      	nop
 8002c82:	e006      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c84:	bf00      	nop
 8002c86:	e004      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <BLDC_Get_Position+0x156>
			break;
 8002c90:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbc4 	bl	8000424 <__aeabi_i2d>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002ca2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4623      	mov	r3, r4
 8002caa:	f7fd fc25 	bl	80004f8 <__aeabi_dmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}

08002ccc <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6858      	ldr	r0, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fe ffad 	bl	8001c40 <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0210 	bic.w	r2, r2, #16
 8002d0c:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d20:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002d22:	200a      	movs	r0, #10
 8002d24:	f000 ff3e 	bl	8003ba4 <Delay_ms>

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002d28:	f107 0308 	add.w	r3, r7, #8
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 ffe9 	bl	8007d08 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d44:	2301      	movs	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f107 0208 	add.w	r2, r7, #8
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fd34 	bl	80017c0 <GPIO_Init>
	Delay_ms(10);
 8002d58:	200a      	movs	r0, #10
 8002d5a:	f000 ff23 	bl	8003ba4 <Delay_ms>

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6898      	ldr	r0, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fe ff68 	bl	8001c40 <GPIO_WritePin>
	Delay_ms(10);
 8002d70:	200a      	movs	r0, #10
 8002d72:	f000 ff17 	bl	8003ba4 <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6898      	ldr	r0, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fe ff5c 	bl	8001c40 <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 ffb9 	bl	8007d08 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f107 0208 	add.w	r2, r7, #8
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fd04 	bl	80017c0 <GPIO_Init>
	Delay_ms(10);
 8002db8:	200a      	movs	r0, #10
 8002dba:	f000 fef3 	bl	8003ba4 <Delay_ms>

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0210 	orr.w	r2, r2, #16
 8002de4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df8:	621a      	str	r2, [r3, #32]
	Delay_ms(10);
 8002dfa:	200a      	movs	r0, #10
 8002dfc:	f000 fed2 	bl	8003ba4 <Delay_ms>
}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	b299      	uxth	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4313      	orrs	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	4812      	ldr	r0, [pc, #72]	; (8002e74 <BLDC_Step1+0x6c>)
 8002e2a:	f7fe ff27 	bl	8001c7c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e54:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0210 	orr.w	r2, r2, #16
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40010c00 	.word	0x40010c00

08002e78 <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b299      	uxth	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4313      	orrs	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <BLDC_Step2+0x6c>)
 8002e9a:	f7fe feef 	bl	8001c7c <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0210 	orr.w	r2, r2, #16
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40010c00 	.word	0x40010c00

08002ee8 <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4313      	orrs	r3, r2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	4812      	ldr	r0, [pc, #72]	; (8002f54 <BLDC_Step3+0x6c>)
 8002f0a:	f7fe feb7 	bl	8001c7c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0210 	bic.w	r2, r2, #16
 8002f20:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40010c00 	.word	0x40010c00

08002f58 <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	b299      	uxth	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	4812      	ldr	r0, [pc, #72]	; (8002fc4 <BLDC_Step4+0x6c>)
 8002f7a:	f7fe fe7f 	bl	8001c7c <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0210 	bic.w	r2, r2, #16
 8002f90:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40010c00 	.word	0x40010c00

08002fc8 <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4812      	ldr	r0, [pc, #72]	; (8003034 <BLDC_Step5+0x6c>)
 8002fea:	f7fe fe47 	bl	8001c7c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0210 	bic.w	r2, r2, #16
 8003014:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40010c00 	.word	0x40010c00

08003038 <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	b299      	uxth	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b29b      	uxth	r3, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	4812      	ldr	r0, [pc, #72]	; (80030a4 <BLDC_Step6+0x6c>)
 800305a:	f7fe fe0f 	bl	8001c7c <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40010c00 	.word	0x40010c00

080030a8 <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 80030b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030bc:	f7fd f864 	bl	8000188 <__aeabi_dsub>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80030d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030da:	461a      	mov	r2, r3
 80030dc:	4623      	mov	r3, r4
 80030de:	f7fd fa0b 	bl	80004f8 <__aeabi_dmul>
 80030e2:	4603      	mov	r3, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80030fe:	f7fd f9fb 	bl	80004f8 <__aeabi_dmul>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800310e:	f7fd f9f3 	bl	80004f8 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd f837 	bl	800018c <__adddf3>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800313a:	f7fd f825 	bl	8000188 <__aeabi_dsub>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd f9d7 	bl	80004f8 <__aeabi_dmul>
 800314a:	4603      	mov	r3, r0
 800314c:	460c      	mov	r4, r1
 800314e:	4618      	mov	r0, r3
 8003150:	4621      	mov	r1, r4
 8003152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003156:	f7fd faf9 	bl	800074c <__aeabi_ddiv>
 800315a:	4603      	mov	r3, r0
 800315c:	460c      	mov	r4, r1
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8003170:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003174:	461a      	mov	r2, r3
 8003176:	4623      	mov	r3, r4
 8003178:	f7fd f808 	bl	800018c <__adddf3>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
 8003180:	4618      	mov	r0, r3
 8003182:	4621      	mov	r1, r4
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800318a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800318e:	461a      	mov	r2, r3
 8003190:	4623      	mov	r3, r4
 8003192:	f7fc fffb 	bl	800018c <__adddf3>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80031a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}

080031b8 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af04      	add	r7, sp, #16
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80031d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031d8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80031dc:	e9cd 3400 	strd	r3, r4, [sp]
 80031e0:	462a      	mov	r2, r5
 80031e2:	4633      	mov	r3, r6
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff5f 	bl	80030a8 <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f7fd fc04 	bl	8000a04 <__aeabi_dcmpge>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <BLDC_SpeedPID+0x54>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800320a:	e00f      	b.n	800322c <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f7fd fbdf 	bl	80009dc <__aeabi_dcmplt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <BLDC_SpeedPID+0x74>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003232:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003236:	4618      	mov	r0, r3
 8003238:	4621      	mov	r1, r4
 800323a:	f7fd fc0d 	bl	8000a58 <__aeabi_d2iz>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfb8      	it	lt
 8003244:	425b      	neglt	r3, r3
 8003246:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > (3600 * 0.95))		PwmPID_ABS = (3600 * 0.95);
 8003248:	8afb      	ldrh	r3, [r7, #22]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f8ea 	bl	8000424 <__aeabi_i2d>
 8003250:	a309      	add	r3, pc, #36	; (adr r3, 8003278 <BLDC_SpeedPID+0xc0>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd fbdf 	bl	8000a18 <__aeabi_dcmpgt>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <BLDC_SpeedPID+0xae>
 8003260:	f640 535c 	movw	r3, #3420	; 0xd5c
 8003264:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 8003266:	8afb      	ldrh	r3, [r7, #22]
 8003268:	4619      	mov	r1, r3
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f004 fcdb 	bl	8007c26 <SetPwmDuty>
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003278:	00000000 	.word	0x00000000
 800327c:	40aab800 	.word	0x40aab800

08003280 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	b08f      	sub	sp, #60	; 0x3c
 8003286:	af04      	add	r7, sp, #16
 8003288:	6278      	str	r0, [r7, #36]	; 0x24
 800328a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(pBLDCHandle->MotorState == MOTOR_STATE_POSITION)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003294:	2b02      	cmp	r3, #2
 8003296:	d111      	bne.n	80032bc <BLDC_PositionPID+0x3c>
	{
		/* Get PWM duty cycle which is calculated by Error value and PID gain */
		BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	e9d3 561e 	ldrd	r5, r6, [r3, #120]	; 0x78
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80032a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032a8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80032ac:	e9cd 1200 	strd	r1, r2, [sp]
 80032b0:	462a      	mov	r2, r5
 80032b2:	4633      	mov	r3, r6
 80032b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b6:	f7ff fef7 	bl	80030a8 <BLDC_CalculatePID>
 80032ba:	e01a      	b.n	80032f2 <BLDC_PositionPID+0x72>
	}
	else if(pBLDCHandle->MotorState == MOTOR_STATE_POSITION_TRACKING)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d115      	bne.n	80032f2 <BLDC_PositionPID+0x72>
	{
		/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
		BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 80032c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032cc:	f000 f8b2 	bl	8003434 <BLDC_CalculateTrajectoryPosition>

		/* Get PWM duty cycle which is calculated by Error value and PID gain */
		BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80032dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032e0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80032e4:	e9cd 1200 	strd	r1, r2, [sp]
 80032e8:	462a      	mov	r2, r5
 80032ea:	4633      	mov	r3, r6
 80032ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ee:	f7ff fedb 	bl	80030a8 <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <BLDC_PositionPID+0x1ac>)
 80032fa:	cb18      	ldmia	r3, {r3, r4}
 80032fc:	461a      	mov	r2, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	f7fd fb8a 	bl	8000a18 <__aeabi_dcmpgt>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <BLDC_PositionPID+0x96>
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <BLDC_PositionPID+0x1ac>)
 800330c:	cb18      	ldmia	r3, {r3, r4}
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 8003314:	e017      	b.n	8003346 <BLDC_PositionPID+0xc6>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <BLDC_PositionPID+0x1ac>)
 800331e:	cb18      	ldmia	r3, {r3, r4}
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800332c:	f7fd fb56 	bl	80009dc <__aeabi_dcmplt>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <BLDC_PositionPID+0xc6>
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <BLDC_PositionPID+0x1ac>)
 8003338:	cb18      	ldmia	r3, {r3, r4}
 800333a:	469a      	mov	sl, r3
 800333c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	f7fd fb56 	bl	8000a04 <__aeabi_dcmpge>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <BLDC_PositionPID+0x128>
	{
		pBLDCHandle->RotationDir = CW;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <BLDC_PositionPID+0x1b0>)
 800336e:	cb18      	ldmia	r3, {r3, r4}
 8003370:	461a      	mov	r2, r3
 8003372:	4623      	mov	r3, r4
 8003374:	f7fd fb32 	bl	80009dc <__aeabi_dcmplt>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <BLDC_PositionPID+0x108>
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <BLDC_PositionPID+0x1b0>)
 8003380:	cb18      	ldmia	r3, {r3, r4}
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800338e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003392:	4618      	mov	r0, r3
 8003394:	4621      	mov	r1, r4
 8003396:	f7fd fb87 	bl	8000aa8 <__aeabi_d2uiz>
 800339a:	4603      	mov	r3, r0
 800339c:	b29b      	uxth	r3, r3
 800339e:	4619      	mov	r1, r3
 80033a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033a2:	f004 fc40 	bl	8007c26 <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 80033a6:	e03b      	b.n	8003420 <BLDC_PositionPID+0x1a0>
	else if(pBLDCHandle->PwmPID < 0)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f7fd fb11 	bl	80009dc <__aeabi_dcmplt>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d100      	bne.n	80033c2 <BLDC_PositionPID+0x142>
}
 80033c0:	e02e      	b.n	8003420 <BLDC_PositionPID+0x1a0>
		pBLDCHandle->RotationDir = CCW;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <BLDC_PositionPID+0x1b0>)
 80033d2:	cb18      	ldmia	r3, {r3, r4}
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	f7fd fb1a 	bl	8000a18 <__aeabi_dcmpgt>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <BLDC_PositionPID+0x17a>
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <BLDC_PositionPID+0x1b0>)
 80033ec:	cb18      	ldmia	r3, {r3, r4}
 80033ee:	4698      	mov	r8, r3
 80033f0:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003400:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003410:	f7fd fb4a 	bl	8000aa8 <__aeabi_d2uiz>
 8003414:	4603      	mov	r3, r0
 8003416:	b29b      	uxth	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800341c:	f004 fc03 	bl	8007c26 <SetPwmDuty>
}
 8003420:	bf00      	nop
 8003422:	372c      	adds	r7, #44	; 0x2c
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000
 8003430:	200001f8 	.word	0x200001f8

08003434 <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003438:	b091      	sub	sp, #68	; 0x44
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800344e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003452:	461a      	mov	r2, r3
 8003454:	4623      	mov	r3, r4
 8003456:	f7fc fe97 	bl	8000188 <__aeabi_dsub>
 800345a:	4603      	mov	r3, r0
 800345c:	460c      	mov	r4, r1
 800345e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800346e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	f7fd f83f 	bl	80004f8 <__aeabi_dmul>
 800347a:	4603      	mov	r3, r0
 800347c:	460c      	mov	r4, r1
 800347e:	4618      	mov	r0, r3
 8003480:	4621      	mov	r1, r4
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	4bb8      	ldr	r3, [pc, #736]	; (8003768 <BLDC_CalculateTrajectoryPosition+0x334>)
 8003488:	f7fd f836 	bl	80004f8 <__aeabi_dmul>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4618      	mov	r0, r3
 8003492:	4621      	mov	r1, r4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800349a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	f7fd f953 	bl	800074c <__aeabi_ddiv>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80034ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034be:	461a      	mov	r2, r3
 80034c0:	4623      	mov	r3, r4
 80034c2:	f7fc fe61 	bl	8000188 <__aeabi_dsub>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034da:	f7fd fa93 	bl	8000a04 <__aeabi_dcmpge>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <BLDC_CalculateTrajectoryPosition+0xb6>
 80034e4:	2300      	movs	r3, #0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	e00c      	b.n	8003504 <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034f6:	f7fd fa71 	bl	80009dc <__aeabi_dcmplt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <BLDC_CalculateTrajectoryPosition+0xd0>
 8003500:	2301      	movs	r3, #1
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	4b97      	ldr	r3, [pc, #604]	; (8003768 <BLDC_CalculateTrajectoryPosition+0x334>)
 800350a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800350e:	f7fc fff3 	bl	80004f8 <__aeabi_dmul>
 8003512:	4603      	mov	r3, r0
 8003514:	460c      	mov	r4, r1
 8003516:	461a      	mov	r2, r3
 8003518:	4623      	mov	r3, r4
 800351a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800351e:	f7fd fa5d 	bl	80009dc <__aeabi_dcmplt>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d029      	beq.n	800357c <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003534:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003538:	461a      	mov	r2, r3
 800353a:	4623      	mov	r3, r4
 800353c:	f7fc fe24 	bl	8000188 <__aeabi_dsub>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	461a      	mov	r2, r3
 8003546:	4623      	mov	r3, r4
 8003548:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800354c:	f7fd fa64 	bl	8000a18 <__aeabi_dcmpgt>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <BLDC_CalculateTrajectoryPosition+0x128>
 8003556:	2301      	movs	r3, #1
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
 800355a:	e049      	b.n	80035f0 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 800355c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003564:	f7fd fa58 	bl	8000a18 <__aeabi_dcmpgt>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <BLDC_CalculateTrajectoryPosition+0x140>
 800356e:	2300      	movs	r3, #0
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
 8003572:	e03d      	b.n	80035f0 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	63bb      	str	r3, [r7, #56]	; 0x38
 800357a:	e039      	b.n	80035f0 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b79      	ldr	r3, [pc, #484]	; (8003768 <BLDC_CalculateTrajectoryPosition+0x334>)
 8003582:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003586:	f7fc ffb7 	bl	80004f8 <__aeabi_dmul>
 800358a:	4603      	mov	r3, r0
 800358c:	460c      	mov	r4, r1
 800358e:	461a      	mov	r2, r3
 8003590:	4623      	mov	r3, r4
 8003592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003596:	f7fd fa35 	bl	8000a04 <__aeabi_dcmpge>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d027      	beq.n	80035f0 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80035ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	f7fc fde8 	bl	8000188 <__aeabi_dsub>
 80035b8:	4603      	mov	r3, r0
 80035ba:	460c      	mov	r4, r1
 80035bc:	4698      	mov	r8, r3
 80035be:	46a1      	mov	r9, r4
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <BLDC_CalculateTrajectoryPosition+0x334>)
 80035c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035ca:	f7fc ff95 	bl	80004f8 <__aeabi_dmul>
 80035ce:	4603      	mov	r3, r0
 80035d0:	460c      	mov	r4, r1
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	4640      	mov	r0, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	f7fd f9ff 	bl	80009dc <__aeabi_dcmplt>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <BLDC_CalculateTrajectoryPosition+0x1b6>
 80035e4:	2301      	movs	r3, #1
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e8:	e002      	b.n	80035f0 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
	}


	switch (accelDir)
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <BLDC_CalculateTrajectoryPosition+0x1e8>
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d003      	beq.n	8003602 <BLDC_CalculateTrajectoryPosition+0x1ce>
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d015      	beq.n	800362c <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 8003600:	e028      	b.n	8003654 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360c:	f7fc ff74 	bl	80004f8 <__aeabi_dmul>
 8003610:	4603      	mov	r3, r0
 8003612:	460c      	mov	r4, r1
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800361a:	e01b      	b.n	8003654 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	f04f 0400 	mov.w	r4, #0
 8003626:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800362a:	e013      	b.n	8003654 <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003632:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003636:	461d      	mov	r5, r3
 8003638:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800363c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003640:	4628      	mov	r0, r5
 8003642:	4631      	mov	r1, r6
 8003644:	f7fc ff58 	bl	80004f8 <__aeabi_dmul>
 8003648:	4603      	mov	r3, r0
 800364a:	460c      	mov	r4, r1
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003652:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003660:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	f7fc fd90 	bl	800018c <__adddf3>
 800366c:	4603      	mov	r3, r0
 800366e:	460c      	mov	r4, r1
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <BLDC_CalculateTrajectoryPosition+0x24e>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d075      	beq.n	800376c <BLDC_CalculateTrajectoryPosition+0x338>

			break;
		}

		default :
			break;
 8003680:	e0e6      	b.n	8003850 <BLDC_CalculateTrajectoryPosition+0x41c>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800368e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	f7fd f9b5 	bl	8000a04 <__aeabi_dcmpge>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80036c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80036cc:	e0c0      	b.n	8003850 <BLDC_CalculateTrajectoryPosition+0x41c>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <BLDC_CalculateTrajectoryPosition+0x334>)
 80036d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036d8:	f7fc ff0e 	bl	80004f8 <__aeabi_dmul>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	461d      	mov	r5, r3
 80036e2:	4626      	mov	r6, r4
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	f7fc fd4d 	bl	800018c <__adddf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	4618      	mov	r0, r3
 80036f8:	4621      	mov	r1, r4
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003700:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003704:	461a      	mov	r2, r3
 8003706:	4623      	mov	r3, r4
 8003708:	f7fc fd3e 	bl	8000188 <__aeabi_dsub>
 800370c:	4603      	mov	r3, r0
 800370e:	460c      	mov	r4, r1
 8003710:	461a      	mov	r2, r3
 8003712:	4623      	mov	r3, r4
 8003714:	4628      	mov	r0, r5
 8003716:	4631      	mov	r1, r6
 8003718:	f7fc feee 	bl	80004f8 <__aeabi_dmul>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	e9c7 3404 	strd	r3, r4, [r7, #16]
				if(dtTrjPosition >= 0)
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003730:	f7fd f968 	bl	8000a04 <__aeabi_dcmpge>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <BLDC_CalculateTrajectoryPosition+0x320>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003744:	f7fc fd22 	bl	800018c <__adddf3>
 8003748:	4603      	mov	r3, r0
 800374a:	460c      	mov	r4, r1
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003752:	e07d      	b.n	8003850 <BLDC_CalculateTrajectoryPosition+0x41c>
					pBLDCHandle->TrjCurPosition = pBLDCHandle->RefPosition;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800375a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003764:	e074      	b.n	8003850 <BLDC_CalculateTrajectoryPosition+0x41c>
 8003766:	bf00      	nop
 8003768:	3fe00000 	.word	0x3fe00000
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003778:	e9d4 3400 	ldrd	r3, r4, [r4]
 800377c:	461a      	mov	r2, r3
 800377e:	4623      	mov	r3, r4
 8003780:	f7fd f936 	bl	80009f0 <__aeabi_dcmple>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <BLDC_CalculateTrajectoryPosition+0x384>
				pBLDCHandle->TrjCurSpeed = 0;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80037ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80037b6:	e04a      	b.n	800384e <BLDC_CalculateTrajectoryPosition+0x41a>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <BLDC_CalculateTrajectoryPosition+0x428>)
 80037be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c2:	f7fc fe99 	bl	80004f8 <__aeabi_dmul>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	461d      	mov	r5, r3
 80037cc:	4626      	mov	r6, r4
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	f7fc fcd8 	bl	800018c <__adddf3>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80037ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	f7fc fcc9 	bl	8000188 <__aeabi_dsub>
 80037f6:	4603      	mov	r3, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	461a      	mov	r2, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	4631      	mov	r1, r6
 8003802:	f7fc fe79 	bl	80004f8 <__aeabi_dmul>
 8003806:	4603      	mov	r3, r0
 8003808:	460c      	mov	r4, r1
 800380a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				if(dtTrjPosition <= 0)
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800381a:	f7fd f8e9 	bl	80009f0 <__aeabi_dcmple>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <BLDC_CalculateTrajectoryPosition+0x40a>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800382a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382e:	f7fc fcad 	bl	800018c <__adddf3>
 8003832:	4603      	mov	r3, r0
 8003834:	460c      	mov	r4, r1
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800383c:	e007      	b.n	800384e <BLDC_CalculateTrajectoryPosition+0x41a>
					pBLDCHandle->TrjCurPosition = pBLDCHandle->RefPosition;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003844:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 800384e:	bf00      	nop
	}
}
 8003850:	bf00      	nop
 8003852:	3744      	adds	r7, #68	; 0x44
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800385a:	bf00      	nop
 800385c:	3fe00000 	.word	0x3fe00000

08003860 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
 800386a:	460b      	mov	r3, r1
 800386c:	71bb      	strb	r3, [r7, #6]
 800386e:	4613      	mov	r3, r2
 8003870:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 8003872:	797b      	ldrb	r3, [r7, #5]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d115      	bne.n	80038a4 <NVIC_IRQConfig+0x44>
	{
		if(IRQNumber < 32)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	2b1f      	cmp	r3, #31
 800387c:	d806      	bhi.n	800388c <NVIC_IRQConfig+0x2c>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] = (uint32_t)(1UL << (uint32_t)IRQNumber);
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <NVIC_IRQConfig+0x94>)
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e025      	b.n	80038d8 <NVIC_IRQConfig+0x78>
		}
		else if(IRQNumber < 60)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b3b      	cmp	r3, #59	; 0x3b
 8003890:	d822      	bhi.n	80038d8 <NVIC_IRQConfig+0x78>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] = (uint32_t)(1UL << (uint32_t)(IRQNumber % 32));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <NVIC_IRQConfig+0x94>)
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	6053      	str	r3, [r2, #4]
 80038a2:	e019      	b.n	80038d8 <NVIC_IRQConfig+0x78>
		}

	}
	else if(En_or_Di == DISABLE)
 80038a4:	797b      	ldrb	r3, [r7, #5]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <NVIC_IRQConfig+0x78>
	{
		if(IRQNumber < 32)
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b1f      	cmp	r3, #31
 80038ae:	d807      	bhi.n	80038c0 <NVIC_IRQConfig+0x60>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] = (uint32_t)(1UL << (uint32_t)IRQNumber);
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <NVIC_IRQConfig+0x94>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038be:	e00b      	b.n	80038d8 <NVIC_IRQConfig+0x78>
		}
		else if(IRQNumber < 60)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2b3b      	cmp	r3, #59	; 0x3b
 80038c4:	d808      	bhi.n	80038d8 <NVIC_IRQConfig+0x78>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] = (uint32_t)(1UL << (uint32_t)(IRQNumber % 32));
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <NVIC_IRQConfig+0x94>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] = (IRQPriority << 4UL);
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <NVIC_IRQConfig+0x94>)
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	79ba      	ldrb	r2, [r7, #6]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b092      	sub	sp, #72	; 0x48
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	2228      	movs	r2, #40	; 0x28
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f004 f9f9 	bl	8007d08 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	2214      	movs	r2, #20
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f004 f9f2 	bl	8007d08 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8003928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392c:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8003938:	2302      	movs	r3, #2
 800393a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	3b10      	subs	r3, #16
 8003940:	2b38      	cmp	r3, #56	; 0x38
 8003942:	f200 8101 	bhi.w	8003b48 <SystemClock_Config+0x250>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <SystemClock_Config+0x54>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003a31 	.word	0x08003a31
 8003950:	08003b49 	.word	0x08003b49
 8003954:	08003b49 	.word	0x08003b49
 8003958:	08003b49 	.word	0x08003b49
 800395c:	08003b49 	.word	0x08003b49
 8003960:	08003b49 	.word	0x08003b49
 8003964:	08003b49 	.word	0x08003b49
 8003968:	08003b49 	.word	0x08003b49
 800396c:	08003a51 	.word	0x08003a51
 8003970:	08003b49 	.word	0x08003b49
 8003974:	08003b49 	.word	0x08003b49
 8003978:	08003b49 	.word	0x08003b49
 800397c:	08003b49 	.word	0x08003b49
 8003980:	08003b49 	.word	0x08003b49
 8003984:	08003b49 	.word	0x08003b49
 8003988:	08003b49 	.word	0x08003b49
 800398c:	08003a73 	.word	0x08003a73
 8003990:	08003b49 	.word	0x08003b49
 8003994:	08003b49 	.word	0x08003b49
 8003998:	08003b49 	.word	0x08003b49
 800399c:	08003b49 	.word	0x08003b49
 80039a0:	08003b49 	.word	0x08003b49
 80039a4:	08003b49 	.word	0x08003b49
 80039a8:	08003b49 	.word	0x08003b49
 80039ac:	08003a95 	.word	0x08003a95
 80039b0:	08003b49 	.word	0x08003b49
 80039b4:	08003b49 	.word	0x08003b49
 80039b8:	08003b49 	.word	0x08003b49
 80039bc:	08003b49 	.word	0x08003b49
 80039c0:	08003b49 	.word	0x08003b49
 80039c4:	08003b49 	.word	0x08003b49
 80039c8:	08003b49 	.word	0x08003b49
 80039cc:	08003ab9 	.word	0x08003ab9
 80039d0:	08003b49 	.word	0x08003b49
 80039d4:	08003b49 	.word	0x08003b49
 80039d8:	08003b49 	.word	0x08003b49
 80039dc:	08003b49 	.word	0x08003b49
 80039e0:	08003b49 	.word	0x08003b49
 80039e4:	08003b49 	.word	0x08003b49
 80039e8:	08003b49 	.word	0x08003b49
 80039ec:	08003add 	.word	0x08003add
 80039f0:	08003b49 	.word	0x08003b49
 80039f4:	08003b49 	.word	0x08003b49
 80039f8:	08003b49 	.word	0x08003b49
 80039fc:	08003b49 	.word	0x08003b49
 8003a00:	08003b49 	.word	0x08003b49
 8003a04:	08003b49 	.word	0x08003b49
 8003a08:	08003b49 	.word	0x08003b49
 8003a0c:	08003b01 	.word	0x08003b01
 8003a10:	08003b49 	.word	0x08003b49
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003b49 	.word	0x08003b49
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b25 	.word	0x08003b25
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8003a30:	2300      	movs	r3, #0
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a34:	230f      	movs	r3, #15
 8003a36:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a4e:	e07c      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8003a50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a54:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a56:	230f      	movs	r3, #15
 8003a58:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a70:	e06b      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8003a72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a78:	230f      	movs	r3, #15
 8003a7a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a92:	e05a      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8003a94:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003a98:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8003aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aaa:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003ab6:	e048      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8003ab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003abe:	230f      	movs	r3, #15
 8003ac0:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8003aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ace:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003ada:	e036      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003adc:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003afe:	e024      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003b00:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b06:	230f      	movs	r3, #15
 8003b08:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8003b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b16:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b22:	e012      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8003b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b40:	2302      	movs	r3, #2
 8003b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b46:	e000      	b.n	8003b4a <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8003b48:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe f8ec 	bl	8001d2c <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8003b54:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe f934 	bl	8001dcc <RCC_ClockConfig>
}
 8003b64:	bf00      	nop
 8003b66:	3748      	adds	r7, #72	; 0x48
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8003b6c:	b4b0      	push	{r4, r5, r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8003b74:	2400      	movs	r4, #0
 8003b76:	e006      	b.n	8003b86 <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8003b78:	2500      	movs	r5, #0
 8003b7a:	e001      	b.n	8003b80 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8003b7c:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8003b7e:	3501      	adds	r5, #1
 8003b80:	2d4c      	cmp	r5, #76	; 0x4c
 8003b82:	d9fb      	bls.n	8003b7c <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8003b84:	3401      	adds	r4, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <Delay_us+0x34>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d3f1      	bcc.n	8003b78 <Delay_us+0xc>
		}
	}
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bcb0      	pop	{r4, r5, r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	cccccccd 	.word	0xcccccccd

08003ba4 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ffd8 	bl	8003b6c <Delay_us>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <TIM6_IRQHandler+0x10>)
 8003bca:	f7fe fd33 	bl	8002634 <TIM_IRQHandling>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000494 	.word	0x20000494

08003bd8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <EXTI9_5_IRQHandler+0x14>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe f887 	bl	8001cf4 <EXTI_IRQHandling>
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000268 	.word	0x20000268

08003bf0 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART3Handle.hdmatx);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <DMA1_Channel2_IRQHandler+0x14>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd fb23 	bl	8001244 <DMA_IRQ_Handling>
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000360 	.word	0x20000360

08003c08 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_0);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7fe f871 	bl	8001cf4 <EXTI_IRQHandling>
//	}
//	else
//	{
//		Mode_key++;
//	}
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_1);
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	f7fe f86a 	bl	8001cf4 <EXTI_IRQHandling>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_2);
 8003c28:	2004      	movs	r0, #4
 8003c2a:	f7fe f863 	bl	8001cf4 <EXTI_IRQHandling>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_3);
 8003c36:	2008      	movs	r0, #8
 8003c38:	f7fe f85c 	bl	8001cf4 <EXTI_IRQHandling>
//	}
//	else
//	{
//		Start_key++;
//	}
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_4);
 8003c44:	2010      	movs	r0, #16
 8003c46:	f7fe f855 	bl	8001cf4 <EXTI_IRQHandling>
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <main>:

#include "main.h"


int main(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af02      	add	r7, sp, #8
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003c56:	2048      	movs	r0, #72	; 0x48
 8003c58:	f7ff fe4e 	bl	80038f8 <SystemClock_Config>

	Delay_ms(1000);
 8003c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c60:	f7ff ffa0 	bl	8003ba4 <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8003c64:	f003 ff62 	bl	8007b2c <MemsetHandleStructure>

	RCC_AFIO_CLK_ENABLE();
 8003c68:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <main+0x120>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	4a40      	ldr	r2, [pc, #256]	; (8003d70 <main+0x120>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <main+0x124>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	4a3a      	ldr	r2, [pc, #232]	; (8003d74 <main+0x124>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6053      	str	r3, [r2, #4]

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 8003c90:	f002 f812 	bl	8005cb8 <DMA1_Init>
	Key_Init();					// Initialize peripherals related to Button
 8003c94:	f001 fe8c 	bl	80059b0 <Key_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003c98:	f001 feec 	bl	8005a74 <BLDC1_Init>
	UART3_Init();				// Initialize UART2 to transmit data to PC
 8003c9c:	f001 ffb0 	bl	8005c00 <UART3_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8003ca0:	f001 ffd8 	bl	8005c54 <TIM6_Init>
	TFT1_Init();
 8003ca4:	f002 f81a 	bl	8005cdc <TFT1_Init>
	TS1_Init();
 8003ca8:	f002 f844 	bl	8005d34 <TS1_Init>
	SPI_ENABLE(&SPI2Handle);
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <main+0x128>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <main+0x128>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
	Delay_ms(10);
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	f7ff ff71 	bl	8003ba4 <Delay_ms>


	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003cc2:	482e      	ldr	r0, [pc, #184]	; (8003d7c <main+0x12c>)
 8003cc4:	f003 ff6e 	bl	8007ba4 <StartTimerPwm>
	Delay_ms(10);
 8003cc8:	200a      	movs	r0, #10
 8003cca:	f7ff ff6b 	bl	8003ba4 <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003cce:	482b      	ldr	r0, [pc, #172]	; (8003d7c <main+0x12c>)
 8003cd0:	f003 ff82 	bl	8007bd8 <DisableTimerPwmChannel>
	Delay_ms(10);
 8003cd4:	200a      	movs	r0, #10
 8003cd6:	f7ff ff65 	bl	8003ba4 <Delay_ms>
	 * 		Timer PWM CCR value : 0
	 * 		NVIC for EXTI : Disabled
	 * 		Timer PWM channels : Disabled
	 */

	TFT1Handle.foreground = White;
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <main+0x130>)
 8003cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce0:	871a      	strh	r2, [r3, #56]	; 0x38
	TFT1Handle.background = Black;
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <main+0x130>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	875a      	strh	r2, [r3, #58]	; 0x3a

	TFT_String(&TFT1Handle, 9, 10, White, Black, (uint8_t*)"BLDC Motor Controller");
 8003ce8:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <main+0x134>)
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	2109      	movs	r1, #9
 8003cf8:	4821      	ldr	r0, [pc, #132]	; (8003d80 <main+0x130>)
 8003cfa:	f000 ff8a 	bl	8004c12 <TFT_String>
	TFT_String(&TFT1Handle, 7, 15, White, Black, (uint8_t*)"Designed by Ganghyeok Lim");
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <main+0x138>)
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	2300      	movs	r3, #0
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	481c      	ldr	r0, [pc, #112]	; (8003d80 <main+0x130>)
 8003d10:	f000 ff7f 	bl	8004c12 <TFT_String>
	Delay_ms(1000);
 8003d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d18:	f7ff ff44 	bl	8003ba4 <Delay_ms>

	TFT_Clear_Screen(&TFT1Handle);
 8003d1c:	4818      	ldr	r0, [pc, #96]	; (8003d80 <main+0x130>)
 8003d1e:	f000 fe57 	bl	80049d0 <TFT_Clear_Screen>

	State = STATE_MENU;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <main+0x13c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]


	while(1)
	{
		switch (State)
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <main+0x13c>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d81c      	bhi.n	8003d6a <main+0x11a>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <main+0xe8>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d53 	.word	0x08003d53
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d5f 	.word	0x08003d5f
 8003d48:	08003d65 	.word	0x08003d65
		{
			case STATE_MENU :
			{
				State_Menu();
 8003d4c:	f002 f992 	bl	8006074 <State_Menu>
				break;
 8003d50:	e00c      	b.n	8003d6c <main+0x11c>
			}

			case STATE_SPEED :
			{
				State_Speed();
 8003d52:	f002 fa19 	bl	8006188 <State_Speed>
				break;
 8003d56:	e009      	b.n	8003d6c <main+0x11c>
			}

			case STATE_POSITION :
			{
				State_Position();
 8003d58:	f002 fd1a 	bl	8006790 <State_Position>
				break;
 8003d5c:	e006      	b.n	8003d6c <main+0x11c>
			}

			case STATE_POSITION_TRACKING :
			{
				State_Position_Tracking();
 8003d5e:	f002 ffc3 	bl	8006ce8 <State_Position_Tracking>
				break;
 8003d62:	e003      	b.n	8003d6c <main+0x11c>
			}

			case STATE_END :
			{
				State_End();
 8003d64:	f003 fa8c 	bl	8007280 <State_End>
				break;
 8003d68:	e000      	b.n	8003d6c <main+0x11c>
			}

			default :
			{
				break;
 8003d6a:	bf00      	nop
		switch (State)
 8003d6c:	e7dc      	b.n	8003d28 <main+0xd8>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	20000440 	.word	0x20000440
 8003d7c:	20000268 	.word	0x20000268
 8003d80:	2000039c 	.word	0x2000039c
 8003d84:	08009774 	.word	0x08009774
 8003d88:	0800978c 	.word	0x0800978c
 8003d8c:	20000204 	.word	0x20000204

08003d90 <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	2214      	movs	r2, #20
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 ffb1 	bl	8007d08 <memset>

	if(pUARTHandle->Instance == USART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a66      	ldr	r2, [pc, #408]	; (8003f44 <USART_MspInit+0x1b4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d120      	bne.n	8003df2 <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003db0:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <USART_MspInit+0x1b8>)
 8003db2:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dbc:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7fd fcf5 	bl	80017c0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dde:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	f107 030c 	add.w	r3, r7, #12
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fd fce8 	bl	80017c0 <GPIO_Init>
 8003df0:	e09e      	b.n	8003f30 <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a55      	ldr	r2, [pc, #340]	; (8003f4c <USART_MspInit+0x1bc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d149      	bne.n	8003e90 <USART_MspInit+0x100>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8003dfc:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <USART_MspInit+0x1b8>)
 8003dfe:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e00:	2302      	movs	r3, #2
 8003e02:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003e04:	2304      	movs	r3, #4
 8003e06:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fd fcd0 	bl	80017c0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8003e24:	2308      	movs	r3, #8
 8003e26:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7fd fcc4 	bl	80017c0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	4a44      	ldr	r2, [pc, #272]	; (8003f50 <USART_MspInit+0x1c0>)
 8003e3e:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	2210      	movs	r2, #16
 8003e46:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	2200      	movs	r2, #0
 8003e76:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd f977 	bl	8001170 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <USART_MspInit+0x1c4>)
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003e88:	4a32      	ldr	r2, [pc, #200]	; (8003f54 <USART_MspInit+0x1c4>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6253      	str	r3, [r2, #36]	; 0x24
 8003e8e:	e04f      	b.n	8003f30 <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <USART_MspInit+0x1c8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d14a      	bne.n	8003f30 <USART_MspInit+0x1a0>
	{
		/* USART3 GPIO Configuration */

		// USART3 Tx
		GPIOHandle.Instance = GPIOB;
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <USART_MspInit+0x1cc>)
 8003e9c:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea6:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	f107 030c 	add.w	r3, r7, #12
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fd fc80 	bl	80017c0 <GPIO_Init>

		// USART3 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_11;
 8003ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec8:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fd fc73 	bl	80017c0 <GPIO_Init>

		/* USART3 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a20      	ldr	r2, [pc, #128]	; (8003f60 <USART_MspInit+0x1d0>)
 8003ee0:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd f926 	bl	8001170 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <USART_MspInit+0x1c4>)
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <USART_MspInit+0x1c4>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fc02 	bl	8002740 <USART_PeripheralClockControl>
}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40010800 	.word	0x40010800
 8003f4c:	40004400 	.word	0x40004400
 8003f50:	40020080 	.word	0x40020080
 8003f54:	200003fc 	.word	0x200003fc
 8003f58:	40004800 	.word	0x40004800
 8003f5c:	40010c00 	.word	0x40010c00
 8003f60:	4002001c 	.word	0x4002001c

08003f64 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <TIM_Base_MspInit+0x2c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003f74:	2101      	movs	r1, #1
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe fa42 	bl	8002400 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_14, ENABLE);
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	210e      	movs	r1, #14
 8003f80:	2036      	movs	r0, #54	; 0x36
 8003f82:	f7ff fc6d 	bl	8003860 <NVIC_IRQConfig>
	}
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40001000 	.word	0x40001000

08003f94 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a32      	ldr	r2, [pc, #200]	; (800406c <TIM_PWM_MspInit+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d119      	bne.n	8003fda <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	2214      	movs	r2, #20
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f003 feaa 	bl	8007d08 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <TIM_PWM_MspInit+0xdc>)
 8003fb6:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003fb8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003fbc:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f7fd fbf3 	bl	80017c0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <TIM_PWM_MspInit+0xe0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d119      	bne.n	8004018 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2214      	movs	r2, #20
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 fe8b 	bl	8007d08 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 8003ff2:	4b21      	ldr	r3, [pc, #132]	; (8004078 <TIM_PWM_MspInit+0xe4>)
 8003ff4:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8003ff6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003ffa:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004004:	2301      	movs	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fd fbd4 	bl	80017c0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <TIM_PWM_MspInit+0xe8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d119      	bne.n	8004056 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	2214      	movs	r2, #20
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f003 fe6c 	bl	8007d08 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <TIM_PWM_MspInit+0xec>)
 8004032:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004034:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004038:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800403a:	2302      	movs	r3, #2
 800403c:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004042:	2301      	movs	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	f107 030c 	add.w	r3, r7, #12
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fd fbb5 	bl	80017c0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe f9cf 	bl	8002400 <TIM_PeripheralClockControl>
}
 8004062:	bf00      	nop
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40010800 	.word	0x40010800
 8004074:	40000400 	.word	0x40000400
 8004078:	40011000 	.word	0x40011000
 800407c:	40000800 	.word	0x40000800
 8004080:	40010c00 	.word	0x40010c00

08004084 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08e      	sub	sp, #56	; 0x38
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 800408c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004090:	2210      	movs	r2, #16
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fe37 	bl	8007d08 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	f040 80f1 	bne.w	8004286 <BLDC_MspInit+0x202>
	{
		/************************************************************************
		 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
		 ***********************************************************************/
		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 80040a4:	4b7a      	ldr	r3, [pc, #488]	; (8004290 <BLDC_MspInit+0x20c>)
 80040a6:	4a7b      	ldr	r2, [pc, #492]	; (8004294 <BLDC_MspInit+0x210>)
 80040a8:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 80040aa:	4b79      	ldr	r3, [pc, #484]	; (8004290 <BLDC_MspInit+0x20c>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 80040b0:	4b77      	ldr	r3, [pc, #476]	; (8004290 <BLDC_MspInit+0x20c>)
 80040b2:	2202      	movs	r2, #2
 80040b4:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <BLDC_MspInit+0x20c>)
 80040b8:	2204      	movs	r2, #4
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 80040bc:	4b74      	ldr	r3, [pc, #464]	; (8004290 <BLDC_MspInit+0x20c>)
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	4b73      	ldr	r3, [pc, #460]	; (8004290 <BLDC_MspInit+0x20c>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	4b72      	ldr	r3, [pc, #456]	; (8004290 <BLDC_MspInit+0x20c>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	4313      	orrs	r3, r2
 80040cc:	4a70      	ldr	r2, [pc, #448]	; (8004290 <BLDC_MspInit+0x20c>)
 80040ce:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 80040d0:	4b6f      	ldr	r3, [pc, #444]	; (8004290 <BLDC_MspInit+0x20c>)
 80040d2:	4a70      	ldr	r2, [pc, #448]	; (8004294 <BLDC_MspInit+0x210>)
 80040d4:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <BLDC_MspInit+0x20c>)
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 80040dc:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <BLDC_MspInit+0x20c>)
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 80040e2:	4b6b      	ldr	r3, [pc, #428]	; (8004290 <BLDC_MspInit+0x20c>)
 80040e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 80040ea:	4b69      	ldr	r3, [pc, #420]	; (8004290 <BLDC_MspInit+0x20c>)
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	4b68      	ldr	r3, [pc, #416]	; (8004290 <BLDC_MspInit+0x20c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	431a      	orrs	r2, r3
 80040f4:	4b66      	ldr	r3, [pc, #408]	; (8004290 <BLDC_MspInit+0x20c>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <BLDC_MspInit+0x20c>)
 80040fc:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOA;
 80040fe:	4b64      	ldr	r3, [pc, #400]	; (8004290 <BLDC_MspInit+0x20c>)
 8004100:	4a65      	ldr	r2, [pc, #404]	; (8004298 <BLDC_MspInit+0x214>)
 8004102:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_5;
 8004104:	4b62      	ldr	r3, [pc, #392]	; (8004290 <BLDC_MspInit+0x20c>)
 8004106:	2220      	movs	r2, #32
 8004108:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_6;
 800410a:	4b61      	ldr	r3, [pc, #388]	; (8004290 <BLDC_MspInit+0x20c>)
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_7;
 8004110:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <BLDC_MspInit+0x20c>)
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8004116:	4b5e      	ldr	r3, [pc, #376]	; (8004290 <BLDC_MspInit+0x20c>)
 8004118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <BLDC_MspInit+0x20c>)
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	431a      	orrs	r2, r3
 8004120:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <BLDC_MspInit+0x20c>)
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	4313      	orrs	r3, r2
 8004126:	4a5a      	ldr	r2, [pc, #360]	; (8004290 <BLDC_MspInit+0x20c>)
 8004128:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004130:	2301      	movs	r3, #1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004138:	2301      	movs	r3, #1
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd fb3a 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 800414c:	200a      	movs	r0, #10
 800414e:	f7ff fd29 	bl	8003ba4 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6858      	ldr	r0, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	b29b      	uxth	r3, r3
 800415c:	2200      	movs	r2, #0
 800415e:	4619      	mov	r1, r3
 8004160:	f7fd fd6e 	bl	8001c40 <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004172:	2301      	movs	r3, #1
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f7fd fb1d 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004186:	200a      	movs	r0, #10
 8004188:	f7ff fd0c 	bl	8003ba4 <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6898      	ldr	r0, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	b29b      	uxth	r3, r3
 8004196:	2200      	movs	r2, #0
 8004198:	4619      	mov	r1, r3
 800419a:	f7fd fd51 	bl	8001c40 <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 800419e:	200a      	movs	r0, #10
 80041a0:	f7ff fd00 	bl	8003ba4 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6898      	ldr	r0, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fd fd45 	bl	8001c40 <GPIO_WritePin>
		Delay_ms(10);
 80041b6:	200a      	movs	r0, #10
 80041b8:	f7ff fcf4 	bl	8003ba4 <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6898      	ldr	r0, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2200      	movs	r2, #0
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fd fd39 	bl	8001c40 <GPIO_WritePin>

		/********************************************************************
		 *			Low level init EXTI for Hall Sensor interrupt			*
		 ********************************************************************/
		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 80041ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d2:	2210      	movs	r2, #16
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 fd96 	bl	8007d08 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <BLDC_MspInit+0x218>)
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fd fae3 	bl	80017c0 <GPIO_Init>


		/********************************************************************
		 *				Low level init TIM to generate PWM signals			*
		 ********************************************************************/
		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <BLDC_MspInit+0x21c>)
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <BLDC_MspInit+0x220>)
 8004206:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (1-1);	// 72MHz / 1 = 72MHz
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2200      	movs	r2, #0
 800421e:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (3600-1);	// 72MHz / 3600 = 20kHz
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004228:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd ffb5 	bl	800219e <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	221c      	movs	r2, #28
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f003 fd63 	bl	8007d08 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 8004242:	2360      	movs	r3, #96	; 0x60
 8004244:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f107 010c 	add.w	r1, r7, #12
 8004256:	2200      	movs	r2, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd ffed 	bl	8002238 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f107 010c 	add.w	r1, r7, #12
 800426a:	2204      	movs	r2, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fd ffe3 	bl	8002238 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f107 010c 	add.w	r1, r7, #12
 800427e:	2208      	movs	r2, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd ffd9 	bl	8002238 <TIM_PWM_ConfigChannel>
	}
}
 8004286:	bf00      	nop
 8004288:	3738      	adds	r7, #56	; 0x38
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000268 	.word	0x20000268
 8004294:	40010c00 	.word	0x40010c00
 8004298:	40010800 	.word	0x40010800
 800429c:	10310000 	.word	0x10310000
 80042a0:	200003dc 	.word	0x200003dc
 80042a4:	40000800 	.word	0x40000800

080042a8 <TFT_MspInit>:


void TFT_MspInit(TFT_HandleTypeDef *pTFTHandle)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	2210      	movs	r2, #16
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 fd25 	bl	8007d08 <memset>

	if(pTFTHandle->Instance == TFT1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d16c      	bne.n	80043a0 <TFT_MspInit+0xf8>
		/************************************************************************
		 *		  Low level init GPIO of TFT Control pins and Data pins			*
		 ***********************************************************************/

		// 1. Initialize GPIO for Control Pins (nRST, nCS, RS, nWR) to GPIO Output Push-Pull mode
		pTFTHandle->Init.GPIOx_TFT_Control = GPIOA;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <TFT_MspInit+0x100>)
 80042ca:	605a      	str	r2, [r3, #4]
		pTFTHandle->Init.GPIO_Pin_TFT_nRST = GPIO_PIN_8;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d2:	615a      	str	r2, [r3, #20]
		pTFTHandle->Init.GPIO_Pin_TFT_nCS = GPIO_PIN_9;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042da:	619a      	str	r2, [r3, #24]
		pTFTHandle->Init.GPIO_Pin_TFT_RS = GPIO_PIN_10;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042e2:	61da      	str	r2, [r3, #28]
		pTFTHandle->Init.GPIO_Pin_TFT_nWR = GPIO_PIN_11;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ea:	621a      	str	r2, [r3, #32]
		pTFTHandle->Init.GPIO_Pins_TFT_Control = pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS | pTFTHandle->Init.GPIO_Pin_TFT_nWR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Control;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800430c:	2301      	movs	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Control, &GPIOInit);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f107 0208 	add.w	r2, r7, #8
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd fa4c 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004328:	200a      	movs	r0, #10
 800432a:	f7ff fc3b 	bl	8003ba4 <Delay_ms>

		GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_nWR, pTFTHandle->Init.GPIO_Pin_TFT_RS);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6858      	ldr	r0, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b299      	uxth	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	f7fd fc92 	bl	8001c7c <GPIO_ModifyPin>

		// 2. Initialize GPIO for Data Pins (D0 ~ D15) to GPIO Output mode
		pTFTHandle->Init.GPIOx_TFT_Data = GPIOC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a14      	ldr	r2, [pc, #80]	; (80043ac <TFT_MspInit+0x104>)
 800435c:	609a      	str	r2, [r3, #8]
		pTFTHandle->Init.GPIO_Pins_TFT_Data = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004364:	611a      	str	r2, [r3, #16]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Data;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800436c:	2301      	movs	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004374:	2303      	movs	r3, #3
 8004376:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Data, &GPIOInit);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd fa1c 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004388:	200a      	movs	r0, #10
 800438a:	f7ff fc0b 	bl	8003ba4 <Delay_ms>

		GPIO_WritePort(pTFTHandle->Init.GPIOx_TFT_Data, pTFTHandle->Init.GPIO_Pins_TFT_Data, GPIO_PIN_RESET);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6898      	ldr	r0, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	b29b      	uxth	r3, r3
 8004398:	2200      	movs	r2, #0
 800439a:	4619      	mov	r1, r3
 800439c:	f7fd fc88 	bl	8001cb0 <GPIO_WritePort>
	}
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40010800 	.word	0x40010800
 80043ac:	40011000 	.word	0x40011000

080043b0 <TS_MspInit>:


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	2210      	movs	r2, #16
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fca1 	bl	8007d08 <memset>

	if(pTSHandle->Instance == TS1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d178      	bne.n	80044c0 <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <TS_MspInit+0x118>)
 80043d2:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2208      	movs	r2, #8
 80043d8:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2210      	movs	r2, #16
 80043de:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80043e6:	2301      	movs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 80043ea:	2303      	movs	r3, #3
 80043ec:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f107 0208 	add.w	r2, r7, #8
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd f9e1 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 80043fe:	200a      	movs	r0, #10
 8004400:	f7ff fbd0 	bl	8003ba4 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6858      	ldr	r0, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	b29b      	uxth	r3, r3
 800440e:	2201      	movs	r2, #1
 8004410:	4619      	mov	r1, r3
 8004412:	f7fd fc15 	bl	8001c40 <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	2210      	movs	r2, #16
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f003 fc72 	bl	8007d08 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f107 0208 	add.w	r2, r7, #8
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd f9bf 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004442:	200a      	movs	r0, #10
 8004444:	f7ff fbae 	bl	8003ba4 <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6858      	ldr	r0, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	b29b      	uxth	r3, r3
 8004452:	2200      	movs	r2, #0
 8004454:	4619      	mov	r1, r3
 8004456:	f7fd fbf3 	bl	8001c40 <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <TS_MspInit+0x11c>)
 800445e:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <TS_MspInit+0x120>)
 8004466:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004470:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004482:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449c:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2218      	movs	r2, #24
 80044a4:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2200      	movs	r2, #0
 80044ac:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fdb0 	bl	8002020 <SPI_Init>
	}
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40010c00 	.word	0x40010c00
 80044cc:	20000440 	.word	0x20000440
 80044d0:	40003800 	.word	0x40003800

080044d4 <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 80044dc:	f107 030c 	add.w	r3, r7, #12
 80044e0:	2214      	movs	r2, #20
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 fc0f 	bl	8007d08 <memset>

	if(pSPIHandle->Instance == SPI2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <SPI_MspInit+0x88>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d128      	bne.n	8004546 <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <SPI_MspInit+0x8c>)
 80044f6:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 80044f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80044fc:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8004502:	2303      	movs	r3, #3
 8004504:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fd f955 	bl	80017c0 <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	2214      	movs	r2, #20
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f003 fbf2 	bl	8007d08 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <SPI_MspInit+0x8c>)
 8004526:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8004528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800452c:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fd f93d 	bl	80017c0 <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f7fd fdb3 	bl	80020b8 <SPI_PeripheralClockControl>
}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40003800 	.word	0x40003800
 8004560:	40010c00 	.word	0x40010c00

08004564 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <_sbrk+0x50>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <_sbrk+0x16>
		heap_end = &end;
 8004574:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <_sbrk+0x50>)
 8004576:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <_sbrk+0x54>)
 8004578:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <_sbrk+0x50>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <_sbrk+0x50>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	466a      	mov	r2, sp
 800458a:	4293      	cmp	r3, r2
 800458c:	d907      	bls.n	800459e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800458e:	f003 fb91 	bl	8007cb4 <__errno>
 8004592:	4602      	mov	r2, r0
 8004594:	230c      	movs	r3, #12
 8004596:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	e006      	b.n	80045ac <_sbrk+0x48>
	}

	heap_end += incr;
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <_sbrk+0x50>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <_sbrk+0x50>)
 80045a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000200 	.word	0x20000200
 80045b8:	200004b8 	.word	0x200004b8

080045bc <TFT_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TFT_Init(TFT_HandleTypeDef *pTFTHandle)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of TFT LCD : GPIO
	TFT_MspInit(pTFTHandle);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fe6f 	bl	80042a8 <TFT_MspInit>

	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_RESET);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6858      	ldr	r0, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	4619      	mov	r1, r3
 80045d8:	f7fd fb32 	bl	8001c40 <GPIO_WritePin>
	Delay_ms(1);
 80045dc:	2001      	movs	r0, #1
 80045de:	f7ff fae1 	bl	8003ba4 <Delay_ms>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_SET);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6858      	ldr	r0, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2201      	movs	r2, #1
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fd fb26 	bl	8001c40 <GPIO_WritePin>
	Delay_ms(120);
 80045f4:	2078      	movs	r0, #120	; 0x78
 80045f6:	f7ff fad5 	bl	8003ba4 <Delay_ms>

	TFT_Write(pTFTHandle, 0x02, 0x0000);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2102      	movs	r1, #2
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f9d0 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 8004604:	2200      	movs	r2, #0
 8004606:	2103      	movs	r1, #3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f9cb 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 800460e:	2201      	movs	r2, #1
 8004610:	2104      	movs	r1, #4
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9c6 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	2105      	movs	r1, #5
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9c1 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004622:	2200      	movs	r2, #0
 8004624:	2106      	movs	r1, #6
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9bc 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 800462c:	2200      	movs	r2, #0
 800462e:	2107      	movs	r1, #7
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9b7 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8004636:	2200      	movs	r2, #0
 8004638:	2108      	movs	r1, #8
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9b2 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 8004640:	22ef      	movs	r2, #239	; 0xef
 8004642:	2109      	movs	r1, #9
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9ad 	bl	80049a4 <TFT_Write>

	TFT_Write(pTFTHandle, 0x01, 0x0006);
 800464a:	2206      	movs	r2, #6
 800464c:	2101      	movs	r1, #1
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9a8 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x16, 0x0068);
 8004654:	2268      	movs	r2, #104	; 0x68
 8004656:	2116      	movs	r1, #22
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9a3 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x18, 0x0000);
 800465e:	2200      	movs	r2, #0
 8004660:	2118      	movs	r1, #24
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f99e 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x70, 0x0065);
 8004668:	2265      	movs	r2, #101	; 0x65
 800466a:	2170      	movs	r1, #112	; 0x70
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f999 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x23, 0x0095);
 8004672:	2295      	movs	r2, #149	; 0x95
 8004674:	2123      	movs	r1, #35	; 0x23
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f994 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x24, 0x0095);
 800467c:	2295      	movs	r2, #149	; 0x95
 800467e:	2124      	movs	r1, #36	; 0x24
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f98f 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x25, 0x00FF);
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	2125      	movs	r1, #37	; 0x25
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f98a 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x27, 0x0002);
 8004690:	2202      	movs	r2, #2
 8004692:	2127      	movs	r1, #39	; 0x27
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f985 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x28, 0x0002);
 800469a:	2202      	movs	r2, #2
 800469c:	2128      	movs	r1, #40	; 0x28
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f980 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x29, 0x0002);
 80046a4:	2202      	movs	r2, #2
 80046a6:	2129      	movs	r1, #41	; 0x29
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f97b 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2A, 0x0002);
 80046ae:	2202      	movs	r2, #2
 80046b0:	212a      	movs	r1, #42	; 0x2a
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f976 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2C, 0x0002);
 80046b8:	2202      	movs	r2, #2
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f971 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2D, 0x0002);
 80046c2:	2202      	movs	r2, #2
 80046c4:	212d      	movs	r1, #45	; 0x2d
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f96c 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3A, 0x0001);
 80046cc:	2201      	movs	r2, #1
 80046ce:	213a      	movs	r1, #58	; 0x3a
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f967 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3B, 0x0001);
 80046d6:	2201      	movs	r2, #1
 80046d8:	213b      	movs	r1, #59	; 0x3b
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f962 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3C, 0x00F0);
 80046e0:	22f0      	movs	r2, #240	; 0xf0
 80046e2:	213c      	movs	r1, #60	; 0x3c
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f95d 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3D, 0x0000);
 80046ea:	2200      	movs	r2, #0
 80046ec:	213d      	movs	r1, #61	; 0x3d
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f958 	bl	80049a4 <TFT_Write>
	Delay_ms(20);
 80046f4:	2014      	movs	r0, #20
 80046f6:	f7ff fa55 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x35, 0x0038);
 80046fa:	2238      	movs	r2, #56	; 0x38
 80046fc:	2135      	movs	r1, #53	; 0x35
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f950 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x36, 0x0078);
 8004704:	2278      	movs	r2, #120	; 0x78
 8004706:	2136      	movs	r1, #54	; 0x36
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f94b 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3E, 0x0038);
 800470e:	2238      	movs	r2, #56	; 0x38
 8004710:	213e      	movs	r1, #62	; 0x3e
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f946 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x40, 0x000F);
 8004718:	220f      	movs	r2, #15
 800471a:	2140      	movs	r1, #64	; 0x40
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f941 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x41, 0x00F0);
 8004722:	22f0      	movs	r2, #240	; 0xf0
 8004724:	2141      	movs	r1, #65	; 0x41
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f93c 	bl	80049a4 <TFT_Write>

	TFT_Write(pTFTHandle, 0x19, 0x0049);
 800472c:	2249      	movs	r2, #73	; 0x49
 800472e:	2119      	movs	r1, #25
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f937 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x93, 0x000F);
 8004736:	220f      	movs	r2, #15
 8004738:	2193      	movs	r1, #147	; 0x93
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f932 	bl	80049a4 <TFT_Write>
	Delay_ms(10);
 8004740:	200a      	movs	r0, #10
 8004742:	f7ff fa2f 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x20, 0x0040);
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	2120      	movs	r1, #32
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f92a 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1D, 0x0007);
 8004750:	2207      	movs	r2, #7
 8004752:	211d      	movs	r1, #29
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f925 	bl	80049a4 <TFT_Write>
	Delay_ms(10);
 800475a:	200a      	movs	r0, #10
 800475c:	f7ff fa22 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1E, 0x0000);
 8004760:	2200      	movs	r2, #0
 8004762:	211e      	movs	r1, #30
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f91d 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1F, 0x0004);
 800476a:	2204      	movs	r2, #4
 800476c:	211f      	movs	r1, #31
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f918 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x44, 0x0040);
 8004774:	2240      	movs	r2, #64	; 0x40
 8004776:	2144      	movs	r1, #68	; 0x44
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f913 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x45, 0x0012);
 800477e:	2212      	movs	r2, #18
 8004780:	2145      	movs	r1, #69	; 0x45
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f90e 	bl	80049a4 <TFT_Write>
	Delay_ms(10);
 8004788:	200a      	movs	r0, #10
 800478a:	f7ff fa0b 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1C, 0x0004);
 800478e:	2204      	movs	r2, #4
 8004790:	211c      	movs	r1, #28
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f906 	bl	80049a4 <TFT_Write>
	Delay_ms(20);
 8004798:	2014      	movs	r0, #20
 800479a:	f7ff fa03 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x43, 0x0080);
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	2143      	movs	r1, #67	; 0x43
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8fe 	bl	80049a4 <TFT_Write>
	Delay_ms(5);
 80047a8:	2005      	movs	r0, #5
 80047aa:	f7ff f9fb 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0018);
 80047ae:	2218      	movs	r2, #24
 80047b0:	211b      	movs	r1, #27
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8f6 	bl	80049a4 <TFT_Write>
	Delay_ms(40);
 80047b8:	2028      	movs	r0, #40	; 0x28
 80047ba:	f7ff f9f3 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0010);
 80047be:	2210      	movs	r2, #16
 80047c0:	211b      	movs	r1, #27
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8ee 	bl	80049a4 <TFT_Write>
	Delay_ms(40);
 80047c8:	2028      	movs	r0, #40	; 0x28
 80047ca:	f7ff f9eb 	bl	8003ba4 <Delay_ms>

	TFT_Write(pTFTHandle, 0x46, 0x00A4);
 80047ce:	22a4      	movs	r2, #164	; 0xa4
 80047d0:	2146      	movs	r1, #70	; 0x46
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8e6 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x47, 0x0053);
 80047d8:	2253      	movs	r2, #83	; 0x53
 80047da:	2147      	movs	r1, #71	; 0x47
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8e1 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x48, 0x0010);
 80047e2:	2210      	movs	r2, #16
 80047e4:	2148      	movs	r1, #72	; 0x48
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8dc 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x49, 0x005F);
 80047ec:	225f      	movs	r2, #95	; 0x5f
 80047ee:	2149      	movs	r1, #73	; 0x49
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f8d7 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4A, 0x0004);
 80047f6:	2204      	movs	r2, #4
 80047f8:	214a      	movs	r1, #74	; 0x4a
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8d2 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4B, 0x003F);
 8004800:	223f      	movs	r2, #63	; 0x3f
 8004802:	214b      	movs	r1, #75	; 0x4b
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8cd 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4C, 0x0002);
 800480a:	2202      	movs	r2, #2
 800480c:	214c      	movs	r1, #76	; 0x4c
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f8c8 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4D, 0x00F6);
 8004814:	22f6      	movs	r2, #246	; 0xf6
 8004816:	214d      	movs	r1, #77	; 0x4d
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8c3 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4E, 0x0012);
 800481e:	2212      	movs	r2, #18
 8004820:	214e      	movs	r1, #78	; 0x4e
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8be 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4F, 0x004C);
 8004828:	224c      	movs	r2, #76	; 0x4c
 800482a:	214f      	movs	r1, #79	; 0x4f
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8b9 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x50, 0x0046);
 8004832:	2246      	movs	r2, #70	; 0x46
 8004834:	2150      	movs	r1, #80	; 0x50
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8b4 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x51, 0x0044);
 800483c:	2244      	movs	r2, #68	; 0x44
 800483e:	2151      	movs	r1, #81	; 0x51
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8af 	bl	80049a4 <TFT_Write>

	TFT_Write(pTFTHandle, 0x90, 0x007F);
 8004846:	227f      	movs	r2, #127	; 0x7f
 8004848:	2190      	movs	r1, #144	; 0x90
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8aa 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x0004);
 8004850:	2204      	movs	r2, #4
 8004852:	2126      	movs	r1, #38	; 0x26
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8a5 	bl	80049a4 <TFT_Write>
	Delay_ms(40);
 800485a:	2028      	movs	r0, #40	; 0x28
 800485c:	f7ff f9a2 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x0024);
 8004860:	2224      	movs	r2, #36	; 0x24
 8004862:	2126      	movs	r1, #38	; 0x26
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f89d 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x002C);
 800486a:	222c      	movs	r2, #44	; 0x2c
 800486c:	2126      	movs	r1, #38	; 0x26
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f898 	bl	80049a4 <TFT_Write>
	Delay_ms(40);
 8004874:	2028      	movs	r0, #40	; 0x28
 8004876:	f7ff f995 	bl	8003ba4 <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x003C);
 800487a:	223c      	movs	r2, #60	; 0x3c
 800487c:	2126      	movs	r1, #38	; 0x26
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f890 	bl	80049a4 <TFT_Write>

	TFT_Write(pTFTHandle, 0x57, 0x0002);
 8004884:	2202      	movs	r2, #2
 8004886:	2157      	movs	r1, #87	; 0x57
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f88b 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x55, 0x0000);
 800488e:	2200      	movs	r2, #0
 8004890:	2155      	movs	r1, #85	; 0x55
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f886 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0xFE, 0x005A);
 8004898:	225a      	movs	r2, #90	; 0x5a
 800489a:	21fe      	movs	r1, #254	; 0xfe
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f881 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x57, 0x0000);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2157      	movs	r1, #87	; 0x57
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f87c 	bl	80049a4 <TFT_Write>

	TFT_Clear_Screen(pTFTHandle);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f88f 	bl	80049d0 <TFT_Clear_Screen>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <TFT_Command>:
	 */
}


void TFT_Command(TFT_HandleTypeDef *pTFTHandle, uint16_t indexRegister)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	807b      	strh	r3, [r7, #2]
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS, GPIO_PIN_RESET);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6858      	ldr	r0, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2200      	movs	r2, #0
 80048dc:	4619      	mov	r1, r3
 80048de:	f7fd f9af 	bl	8001c40 <GPIO_WritePin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, indexRegister);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	887a      	ldrh	r2, [r7, #2]
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd f9f4 	bl	8001cd8 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6858      	ldr	r0, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2200      	movs	r2, #0
 80048fc:	4619      	mov	r1, r3
 80048fe:	f7fd f99f 	bl	8001c40 <GPIO_WritePin>
	asm("NOP");
 8004902:	bf00      	nop
	asm("NOP");
 8004904:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6858      	ldr	r0, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	b29b      	uxth	r3, r3
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	f7fd f994 	bl	8001c40 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6858      	ldr	r0, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	b29b      	uxth	r3, r3
 8004922:	2201      	movs	r2, #1
 8004924:	4619      	mov	r1, r3
 8004926:	f7fd f98b 	bl	8001c40 <GPIO_WritePin>
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <TFT_Data>:


void TFT_Data(TFT_HandleTypeDef *pTFTHandle, uint16_t data)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	807b      	strh	r3, [r7, #2]
	GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_RS, pTFTHandle->Init.GPIO_Pin_TFT_nCS);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6858      	ldr	r0, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	b299      	uxth	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	f7fd f994 	bl	8001c7c <GPIO_ModifyPin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, data);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	887a      	ldrh	r2, [r7, #2]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd f9bb 	bl	8001cd8 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6858      	ldr	r0, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	b29b      	uxth	r3, r3
 800496c:	2200      	movs	r2, #0
 800496e:	4619      	mov	r1, r3
 8004970:	f7fd f966 	bl	8001c40 <GPIO_WritePin>
	asm("NOP");
 8004974:	bf00      	nop
	asm("NOP");
 8004976:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6858      	ldr	r0, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	b29b      	uxth	r3, r3
 8004982:	2201      	movs	r2, #1
 8004984:	4619      	mov	r1, r3
 8004986:	f7fd f95b 	bl	8001c40 <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6858      	ldr	r0, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	b29b      	uxth	r3, r3
 8004994:	2201      	movs	r2, #1
 8004996:	4619      	mov	r1, r3
 8004998:	f7fd f952 	bl	8001c40 <GPIO_WritePin>
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <TFT_Write>:


void TFT_Write(TFT_HandleTypeDef *pTFTHandle, uint16_t reg, uint16_t val)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
 80049b0:	4613      	mov	r3, r2
 80049b2:	803b      	strh	r3, [r7, #0]
	TFT_Command(pTFTHandle, reg);
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff7e 	bl	80048ba <TFT_Command>
	TFT_Data(pTFTHandle, val);
 80049be:	883b      	ldrh	r3, [r7, #0]
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffb5 	bl	8004932 <TFT_Data>
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <TFT_Clear_Screen>:




void TFT_Clear_Screen(TFT_HandleTypeDef *pTFTHandle)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	TFT_Color_Screen(pTFTHandle, Black);
 80049d8:	2100      	movs	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f804 	bl	80049e8 <TFT_Color_Screen>
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <TFT_Color_Screen>:


void TFT_Color_Screen(TFT_HandleTypeDef *pTFTHandle, uint16_t color)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
	uint16_t i, j;

	TFT_GRAM_Address(pTFTHandle, 0, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f81c 	bl	8004a36 <TFT_GRAM_Address>

	for(i = 0; i < 320; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	e010      	b.n	8004a26 <TFT_Color_Screen+0x3e>
	{
		for(j = 0; j < 240; j++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	81bb      	strh	r3, [r7, #12]
 8004a08:	e007      	b.n	8004a1a <TFT_Color_Screen+0x32>
		{
			TFT_Data(pTFTHandle, color);
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff8f 	bl	8004932 <TFT_Data>
		for(j = 0; j < 240; j++)
 8004a14:	89bb      	ldrh	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	81bb      	strh	r3, [r7, #12]
 8004a1a:	89bb      	ldrh	r3, [r7, #12]
 8004a1c:	2bef      	cmp	r3, #239	; 0xef
 8004a1e:	d9f4      	bls.n	8004a0a <TFT_Color_Screen+0x22>
	for(i = 0; i < 320; i++)
 8004a20:	89fb      	ldrh	r3, [r7, #14]
 8004a22:	3301      	adds	r3, #1
 8004a24:	81fb      	strh	r3, [r7, #14]
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a2c:	d3ea      	bcc.n	8004a04 <TFT_Color_Screen+0x1c>
		}
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <TFT_GRAM_Address>:


void TFT_GRAM_Address(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	807b      	strh	r3, [r7, #2]
 8004a42:	4613      	mov	r3, r2
 8004a44:	803b      	strh	r3, [r7, #0]
	if(pTFTHandle->ScreenMode == 'L')
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a4c:	2b4c      	cmp	r3, #76	; 0x4c
 8004a4e:	d122      	bne.n	8004a96 <TFT_GRAM_Address+0x60>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a56:	d245      	bcs.n	8004ae4 <TFT_GRAM_Address+0xae>
 8004a58:	883b      	ldrh	r3, [r7, #0]
 8004a5a:	2bef      	cmp	r3, #239	; 0xef
 8004a5c:	d842      	bhi.n	8004ae4 <TFT_GRAM_Address+0xae>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	2102      	movs	r1, #2
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff9b 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	2103      	movs	r1, #3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff93 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2106      	movs	r1, #6
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff8e 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004a88:	883b      	ldrh	r3, [r7, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2107      	movs	r1, #7
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ff88 	bl	80049a4 <TFT_Write>
 8004a94:	e021      	b.n	8004ada <TFT_GRAM_Address+0xa4>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	2bef      	cmp	r3, #239	; 0xef
 8004a9a:	d825      	bhi.n	8004ae8 <TFT_GRAM_Address+0xb2>
 8004a9c:	883b      	ldrh	r3, [r7, #0]
 8004a9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004aa2:	d221      	bcs.n	8004ae8 <TFT_GRAM_Address+0xb2>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff7b 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff75 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004aba:	883b      	ldrh	r3, [r7, #0]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2106      	movs	r1, #6
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ff6d 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004aca:	883b      	ldrh	r3, [r7, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2107      	movs	r1, #7
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff65 	bl	80049a4 <TFT_Write>
	}

	TFT_Command(pTFTHandle, 0x22);
 8004ada:	2122      	movs	r1, #34	; 0x22
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff feec 	bl	80048ba <TFT_Command>
 8004ae2:	e002      	b.n	8004aea <TFT_GRAM_Address+0xb4>
		if((xPos > 319) || (yPos > 239))	return;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <TFT_GRAM_Address+0xb4>
		if((xPos > 239) || (yPos > 319))	return;
 8004ae8:	bf00      	nop
}
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <TFT_xy>:


void TFT_xy(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
 8004afc:	4613      	mov	r3, r2
 8004afe:	70bb      	strb	r3, [r7, #2]
	pTFTHandle->Xcharacter = xChar;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	78ba      	ldrb	r2, [r7, #2]
 8004b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <TFT_Color>:


void TFT_Color(TFT_HandleTypeDef *pTFTHandle, uint16_t colorfore, uint16_t colorback)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	807b      	strh	r3, [r7, #2]
 8004b26:	4613      	mov	r3, r2
 8004b28:	803b      	strh	r3, [r7, #0]
	pTFTHandle->foreground = colorfore;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	871a      	strh	r2, [r3, #56]	; 0x38
	pTFTHandle->background = colorback;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	883a      	ldrh	r2, [r7, #0]
 8004b34:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <TFT_Pixel>:


void TFT_Pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos, uint16_t color)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
	if(pTFTHandle->ScreenMode == 'L')
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b60:	2b4c      	cmp	r3, #76	; 0x4c
 8004b62:	d122      	bne.n	8004baa <TFT_Pixel+0x6a>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b6a:	d24c      	bcs.n	8004c06 <TFT_Pixel+0xc6>
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	2bef      	cmp	r3, #239	; 0xef
 8004b70:	d849      	bhi.n	8004c06 <TFT_Pixel+0xc6>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004b72:	897b      	ldrh	r3, [r7, #10]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff ff11 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff09 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004b92:	2200      	movs	r2, #0
 8004b94:	2106      	movs	r1, #6
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff04 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2107      	movs	r1, #7
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fefe 	bl	80049a4 <TFT_Write>
 8004ba8:	e021      	b.n	8004bee <TFT_Pixel+0xae>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	2bef      	cmp	r3, #239	; 0xef
 8004bae:	d82c      	bhi.n	8004c0a <TFT_Pixel+0xca>
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004bb6:	d228      	bcs.n	8004c0a <TFT_Pixel+0xca>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2102      	movs	r1, #2
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fef1 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004bc2:	897b      	ldrh	r3, [r7, #10]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2103      	movs	r1, #3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff feeb 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2106      	movs	r1, #6
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fee3 	bl	80049a4 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004bde:	893b      	ldrh	r3, [r7, #8]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	2107      	movs	r1, #7
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff fedb 	bl	80049a4 <TFT_Write>
	}

	if(color != Transparent)	TFT_Write(pTFTHandle, 0x22, color);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f640 0221 	movw	r2, #2081	; 0x821
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <TFT_Pixel+0xcc>
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2122      	movs	r1, #34	; 0x22
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff fed0 	bl	80049a4 <TFT_Write>
 8004c04:	e002      	b.n	8004c0c <TFT_Pixel+0xcc>
		if((xPos > 319) || (yPos > 239))	return;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <TFT_Pixel+0xcc>
		if((xPos > 239) || (yPos > 319))	return;
 8004c0a:	bf00      	nop
}
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <TFT_String>:
	}
}


void TFT_String(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar, uint16_t colorfore, uint16_t colorback, uint8_t *str)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	70fb      	strb	r3, [r7, #3]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70bb      	strb	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	803b      	strh	r3, [r7, #0]
	uint8_t ch1;

	pTFTHandle->Xcharacter = xChar;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pTFTHandle->Ycharacter = yChar;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	78ba      	ldrb	r2, [r7, #2]
 8004c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	pTFTHandle->foreground = colorfore;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	883a      	ldrh	r2, [r7, #0]
 8004c40:	871a      	strh	r2, [r3, #56]	; 0x38
	pTFTHandle->background = colorback;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8b3a      	ldrh	r2, [r7, #24]
 8004c46:	875a      	strh	r2, [r3, #58]	; 0x3a

	pTFTHandle->nextline_flag = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	while(*str)
 8004c50:	e00e      	b.n	8004c70 <TFT_String+0x5e>
	{
		ch1 = *str;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	73fb      	strb	r3, [r7, #15]
		str++;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]

		if(ch1 < 0x80)
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	db04      	blt.n	8004c70 <TFT_String+0x5e>
		{
			TFT_English(pTFTHandle, ch1);
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f808 	bl	8004c80 <TFT_English>
	while(*str)
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ec      	bne.n	8004c52 <TFT_String+0x40>
		}
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <TFT_English>:


void TFT_English(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b0c8      	sub	sp, #288	; 0x120
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	6018      	str	r0, [r3, #0]
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	1cfb      	adds	r3, r7, #3
 8004c8e:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 8; x++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004c96:	e044      	b.n	8004d22 <TFT_English+0xa2>
	{
		data = E_font[code][x];
 8004c98:	1cfb      	adds	r3, r7, #3
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ca0:	497f      	ldr	r1, [pc, #508]	; (8004ea0 <TFT_English+0x220>)
 8004ca2:	0112      	lsls	r2, r2, #4
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004cb4:	e02c      	b.n	8004d10 <TFT_English+0x90>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8004cb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00e      	beq.n	8004ce0 <TFT_English+0x60>
 8004cc2:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004cc6:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	0109      	lsls	r1, r1, #4
 8004cd6:	440a      	add	r2, r1
 8004cd8:	4601      	mov	r1, r0
 8004cda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004cde:	e00d      	b.n	8004cfc <TFT_English+0x7c>
			else				pixel[x][y] = pTFTHandle->background;
 8004ce0:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004ce4:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004cee:	f107 030c 	add.w	r3, r7, #12
 8004cf2:	0109      	lsls	r1, r1, #4
 8004cf4:	440a      	add	r2, r1
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004d06:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004d10:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004d14:	2b07      	cmp	r3, #7
 8004d16:	d9ce      	bls.n	8004cb6 <TFT_English+0x36>
	for(x = 0; x < 8; x++)
 8004d18:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004d22:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d26:	2b07      	cmp	r3, #7
 8004d28:	d9b6      	bls.n	8004c98 <TFT_English+0x18>
		}
	}

	for(x = 0; x < 8; x++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004d30:	e049      	b.n	8004dc6 <TFT_English+0x146>
	{
		data = E_font[code][x+8];
 8004d32:	1cfb      	adds	r3, r7, #3
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	4958      	ldr	r1, [pc, #352]	; (8004ea0 <TFT_English+0x220>)
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	440a      	add	r2, r1
 8004d42:	4413      	add	r3, r2
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004d50:	e030      	b.n	8004db4 <TFT_English+0x134>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8004d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <TFT_English+0x100>
 8004d5e:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004d62:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004d66:	f103 0208 	add.w	r2, r3, #8
 8004d6a:	1d3b      	adds	r3, r7, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	0109      	lsls	r1, r1, #4
 8004d76:	440a      	add	r2, r1
 8004d78:	4601      	mov	r1, r0
 8004d7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004d7e:	e00f      	b.n	8004da0 <TFT_English+0x120>
			else				pixel[x][y+8] = pTFTHandle->background;
 8004d80:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004d84:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004d88:	f103 0208 	add.w	r2, r3, #8
 8004d8c:	1d3b      	adds	r3, r7, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	0109      	lsls	r1, r1, #4
 8004d98:	440a      	add	r2, r1
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004da0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004daa:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004dae:	3301      	adds	r3, #1
 8004db0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004db4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d9ca      	bls.n	8004d52 <TFT_English+0xd2>
	for(x = 0; x < 8; x++)
 8004dbc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004dc6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	d9b1      	bls.n	8004d32 <TFT_English+0xb2>
		}
	}

	if(pTFTHandle->outline_flag == 1)
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	f040 80ed 	bne.w	8004fb6 <TFT_English+0x336>
	{
		for(x = 0; x < 8; x++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004de2:	e0e3      	b.n	8004fac <TFT_English+0x32c>
		{
			dot0 = E_font[code][x] + E_font[code][x+8]*256;
 8004de4:	1cfb      	adds	r3, r7, #3
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004dec:	492c      	ldr	r1, [pc, #176]	; (8004ea0 <TFT_English+0x220>)
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	440a      	add	r2, r1
 8004df2:	4413      	add	r3, r2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	1cfb      	adds	r3, r7, #3
 8004dfa:	7819      	ldrb	r1, [r3, #0]
 8004dfc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e00:	3308      	adds	r3, #8
 8004e02:	4827      	ldr	r0, [pc, #156]	; (8004ea0 <TFT_English+0x220>)
 8004e04:	0109      	lsls	r1, r1, #4
 8004e06:	4401      	add	r1, r0
 8004e08:	440b      	add	r3, r1
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			dot1 = dot0 >> 1;
 8004e18:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			dot2 = dot0;
 8004e22:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004e26:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			dot3 = E_font[code][x+1] + E_font[code][x+9]*256;
 8004e2a:	1cfb      	adds	r3, r7, #3
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e32:	3301      	adds	r3, #1
 8004e34:	491a      	ldr	r1, [pc, #104]	; (8004ea0 <TFT_English+0x220>)
 8004e36:	0112      	lsls	r2, r2, #4
 8004e38:	440a      	add	r2, r1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	1cfb      	adds	r3, r7, #3
 8004e42:	7819      	ldrb	r1, [r3, #0]
 8004e44:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e48:	3309      	adds	r3, #9
 8004e4a:	4815      	ldr	r0, [pc, #84]	; (8004ea0 <TFT_English+0x220>)
 8004e4c:	0109      	lsls	r1, r1, #4
 8004e4e:	4401      	add	r1, r0
 8004e50:	440b      	add	r3, r1
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			dot4 = E_font[code][x-1] + E_font[code][x+7]*256;
 8004e60:	1cfb      	adds	r3, r7, #3
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <TFT_English+0x220>)
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	440a      	add	r2, r1
 8004e70:	4413      	add	r3, r2
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	1cfb      	adds	r3, r7, #3
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e7e:	3307      	adds	r3, #7
 8004e80:	4807      	ldr	r0, [pc, #28]	; (8004ea0 <TFT_English+0x220>)
 8004e82:	0109      	lsls	r1, r1, #4
 8004e84:	4401      	add	r1, r0
 8004e86:	440b      	add	r3, r1
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for(y = 0; y < 15; y++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004e9c:	e07d      	b.n	8004f9a <TFT_English+0x31a>
 8004e9e:	bf00      	nop
 8004ea0:	08009878 	.word	0x08009878
			{
				if(!(dot0 & 0x0001))
 8004ea4:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <TFT_English+0x2e0>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004eb0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <TFT_English+0x258>
 8004ebc:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004ec0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004eca:	f107 030c 	add.w	r3, r7, #12
 8004ece:	0109      	lsls	r1, r1, #4
 8004ed0:	440a      	add	r2, r1
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004ed8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <TFT_English+0x280>
 8004ee4:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004ee8:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004ef2:	f107 030c 	add.w	r3, r7, #12
 8004ef6:	0109      	lsls	r1, r1, #4
 8004ef8:	440a      	add	r2, r1
 8004efa:	4601      	mov	r1, r0
 8004efc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot3 & 0x0001) && (x < 7))		pixel[x][y] = pTFTHandle->outline;
 8004f00:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <TFT_English+0x2b0>
 8004f0c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d80d      	bhi.n	8004f30 <TFT_English+0x2b0>
 8004f14:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004f18:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	0109      	lsls	r1, r1, #4
 8004f28:	440a      	add	r2, r1
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 8004f30:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d011      	beq.n	8004f60 <TFT_English+0x2e0>
 8004f3c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <TFT_English+0x2e0>
 8004f44:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004f48:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8004f52:	f107 030c 	add.w	r3, r7, #12
 8004f56:	0109      	lsls	r1, r1, #4
 8004f58:	440a      	add	r2, r1
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}

				dot1 >>= 1;
 8004f60:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				dot2 = dot0;
 8004f6a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004f6e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				dot0 >>= 1;
 8004f72:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
				dot3 >>= 1;
 8004f7c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				dot4 >>= 1;
 8004f86:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			for(y = 0; y < 15; y++)
 8004f90:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f94:	3301      	adds	r3, #1
 8004f96:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004f9a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004f9e:	2b0e      	cmp	r3, #14
 8004fa0:	d980      	bls.n	8004ea4 <TFT_English+0x224>
		for(x = 0; x < 8; x++)
 8004fa2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004fac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	f67f af17 	bls.w	8004de4 <TFT_English+0x164>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit)
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004fbe:	1d3b      	adds	r3, r7, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d324      	bcc.n	8005014 <TFT_English+0x394>
	{
		pTFTHandle->nextline_flag = 1;
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		pTFTHandle->Xcharacter = 0;
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		pTFTHandle->Ycharacter += 2;
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fe6:	3302      	adds	r3, #2
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit - 1))		pTFTHandle->Ycharacter = 0;
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005004:	3b01      	subs	r3, #1
 8005006:	429a      	cmp	r2, r3
 8005008:	db04      	blt.n	8005014 <TFT_English+0x394>
 800500a:	1d3b      	adds	r3, r7, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if(pTFTHandle->underscore_flag == 1)
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800501c:	2b01      	cmp	r3, #1
 800501e:	d118      	bne.n	8005052 <TFT_English+0x3d2>
	{
		for(x = 0; x < 8; x++)
 8005020:	2300      	movs	r3, #0
 8005022:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005026:	e010      	b.n	800504a <TFT_English+0x3ca>
		{
			pixel[x][15] = pTFTHandle->underscore;
 8005028:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800502c:	1d3a      	adds	r2, r7, #4
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8005032:	f107 020c 	add.w	r2, r7, #12
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	4413      	add	r3, r2
 800503a:	331e      	adds	r3, #30
 800503c:	460a      	mov	r2, r1
 800503e:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8005040:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005044:	3301      	adds	r3, #1
 8005046:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800504a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800504e:	2b07      	cmp	r3, #7
 8005050:	d9ea      	bls.n	8005028 <TFT_English+0x3a8>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d138      	bne.n	80050d0 <TFT_English+0x450>
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800506e:	429a      	cmp	r2, r3
 8005070:	d12e      	bne.n	80050d0 <TFT_English+0x450>
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005082:	429a      	cmp	r2, r3
 8005084:	d124      	bne.n	80050d0 <TFT_English+0x450>
	{
		for(x = 0; x < 8; x++)
 8005086:	2300      	movs	r3, #0
 8005088:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800508c:	e01c      	b.n	80050c8 <TFT_English+0x448>
		{
			pixel[x][14] = pTFTHandle->cursor;
 800508e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005092:	1d3a      	adds	r2, r7, #4
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8005098:	f107 020c 	add.w	r2, r7, #12
 800509c:	015b      	lsls	r3, r3, #5
 800509e:	4413      	add	r3, r2
 80050a0:	331c      	adds	r3, #28
 80050a2:	460a      	mov	r2, r1
 80050a4:	801a      	strh	r2, [r3, #0]
			pixel[x][15] = pTFTHandle->cursor;
 80050a6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80050b0:	f107 020c 	add.w	r2, r7, #12
 80050b4:	015b      	lsls	r3, r3, #5
 80050b6:	4413      	add	r3, r2
 80050b8:	331e      	adds	r3, #30
 80050ba:	460a      	mov	r2, r1
 80050bc:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 80050be:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80050c2:	3301      	adds	r3, #1
 80050c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80050c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80050cc:	2b07      	cmp	r3, #7
 80050ce:	d9de      	bls.n	800508e <TFT_English+0x40e>
		}
	}

	if((pTFTHandle->nextline_flag == 1) && (pTFTHandle->Xcharacter == 0) && (code == ' '))
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10a      	bne.n	80050f2 <TFT_English+0x472>
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <TFT_English+0x472>
 80050e8:	1cfb      	adds	r3, r7, #3
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	f000 8122 	beq.w	8005336 <TFT_English+0x6b6>
	{
		return;
	}
	else if(pTFTHandle->background != Transparent)
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80050f8:	f640 0221 	movw	r2, #2081	; 0x821
 80050fc:	4293      	cmp	r3, r2
 80050fe:	f000 80cd 	beq.w	800529c <TFT_English+0x61c>
	{
		xPos = pTFTHandle->Xcharacter * 8;
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800510a:	b29b      	uxth	r3, r3
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

		for(y = 0; y < 16; y++)
 8005112:	2300      	movs	r3, #0
 8005114:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005118:	e0ba      	b.n	8005290 <TFT_English+0x610>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005122:	b29b      	uxth	r3, r3
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	b29a      	uxth	r2, r3
 8005128:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800512c:	b29b      	uxth	r3, r3
 800512e:	4413      	add	r3, r2
 8005130:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			if(pTFTHandle->ScreenMode == 'L')
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800513c:	2b4c      	cmp	r3, #76	; 0x4c
 800513e:	d11f      	bne.n	8005180 <TFT_English+0x500>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8005140:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005144:	0a1b      	lsrs	r3, r3, #8
 8005146:	b29a      	uxth	r2, r3
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	2102      	movs	r1, #2
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f7ff fc29 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8005152:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005156:	b2db      	uxtb	r3, r3
 8005158:	b29a      	uxth	r2, r3
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	2103      	movs	r1, #3
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f7ff fc20 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	2200      	movs	r2, #0
 8005168:	2106      	movs	r1, #6
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	f7ff fc1a 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 8005170:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	2107      	movs	r1, #7
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	f7ff fc13 	bl	80049a4 <TFT_Write>
 800517e:	e01e      	b.n	80051be <TFT_English+0x53e>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	2200      	movs	r2, #0
 8005184:	2102      	movs	r1, #2
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	f7ff fc0c 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 800518c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	2103      	movs	r1, #3
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f7ff fc05 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 800519a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	2106      	movs	r1, #6
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	f7ff fbfc 	bl	80049a4 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 80051ac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	2107      	movs	r1, #7
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f7ff fbf3 	bl	80049a4 <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	2122      	movs	r1, #34	; 0x22
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	f7ff fb79 	bl	80048ba <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 80051c8:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	4611      	mov	r1, r2
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	f7ff fbaa 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 80051de:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	3210      	adds	r2, #16
 80051e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4611      	mov	r1, r2
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	f7ff fb9e 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 80051f6:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	3220      	adds	r2, #32
 8005200:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	4611      	mov	r1, r2
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f7ff fb92 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 800520e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005212:	f107 030c 	add.w	r3, r7, #12
 8005216:	3230      	adds	r2, #48	; 0x30
 8005218:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	4611      	mov	r1, r2
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	f7ff fb86 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 8005226:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	3240      	adds	r2, #64	; 0x40
 8005230:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	4611      	mov	r1, r2
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f7ff fb7a 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 800523e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005242:	f107 030c 	add.w	r3, r7, #12
 8005246:	3250      	adds	r2, #80	; 0x50
 8005248:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	4611      	mov	r1, r2
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f7ff fb6e 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 8005256:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800525a:	f107 030c 	add.w	r3, r7, #12
 800525e:	3260      	adds	r2, #96	; 0x60
 8005260:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	4611      	mov	r1, r2
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	f7ff fb62 	bl	8004932 <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 800526e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	3270      	adds	r2, #112	; 0x70
 8005278:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	4611      	mov	r1, r2
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f7ff fb56 	bl	8004932 <TFT_Data>
		for(y = 0; y < 16; y++)
 8005286:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800528a:	3301      	adds	r3, #1
 800528c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005290:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005294:	2b0f      	cmp	r3, #15
 8005296:	f67f af40 	bls.w	800511a <TFT_English+0x49a>
 800529a:	e041      	b.n	8005320 <TFT_English+0x6a0>
		}
	}
	else
	{
		for(y = 0; y < 16; y++)
 800529c:	2300      	movs	r3, #0
 800529e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80052a2:	e039      	b.n	8005318 <TFT_English+0x698>
		{
			for(x = 0; x < 8; x++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80052aa:	e02c      	b.n	8005306 <TFT_English+0x686>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 8 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	b29c      	uxth	r4, r3
 80052c4:	1d3b      	adds	r3, r7, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4413      	add	r3, r2
 80052da:	b29d      	uxth	r5, r3
 80052dc:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80052e0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	0109      	lsls	r1, r1, #4
 80052ea:	440a      	add	r2, r1
 80052ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80052f0:	1d38      	adds	r0, r7, #4
 80052f2:	462a      	mov	r2, r5
 80052f4:	4621      	mov	r1, r4
 80052f6:	6800      	ldr	r0, [r0, #0]
 80052f8:	f7ff fc22 	bl	8004b40 <TFT_Pixel>
			for(x = 0; x < 8; x++)
 80052fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005300:	3301      	adds	r3, #1
 8005302:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005306:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800530a:	2b07      	cmp	r3, #7
 800530c:	d9ce      	bls.n	80052ac <TFT_English+0x62c>
		for(y = 0; y < 16; y++)
 800530e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005312:	3301      	adds	r3, #1
 8005314:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005318:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800531c:	2b0f      	cmp	r3, #15
 800531e:	d9c1      	bls.n	80052a4 <TFT_English+0x624>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005328:	3301      	adds	r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8005334:	e000      	b.n	8005338 <TFT_English+0x6b8>
		return;
 8005336:	bf00      	nop
}
 8005338:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800533c:	46bd      	mov	sp, r7
 800533e:	bdb0      	pop	{r4, r5, r7, pc}

08005340 <TFT_English_pixel>:


void TFT_English_pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t Xpixel, uint16_t Ypixel, uint8_t code)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	b0c6      	sub	sp, #280	; 0x118
 8005344:	af00      	add	r7, sp, #0
 8005346:	f107 040c 	add.w	r4, r7, #12
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	460c      	mov	r4, r1
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	f107 030a 	add.w	r3, r7, #10
 8005356:	4622      	mov	r2, r4
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	4602      	mov	r2, r0
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	1dfb      	adds	r3, r7, #7
 8005364:	460a      	mov	r2, r1
 8005366:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];

	for(x = 0; x < 8; x++)
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800536e:	e046      	b.n	80053fe <TFT_English_pixel+0xbe>
	{
		data = E_font[code][x];
 8005370:	1dfb      	adds	r3, r7, #7
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005378:	496d      	ldr	r1, [pc, #436]	; (8005530 <TFT_English_pixel+0x1f0>)
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	440a      	add	r2, r1
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		for(y = 0; y < 8; y++)
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800538c:	e02e      	b.n	80053ec <TFT_English_pixel+0xac>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 800538e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00f      	beq.n	80053ba <TFT_English_pixel+0x7a>
 800539a:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 800539e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 80053aa:	f107 0314 	add.w	r3, r7, #20
 80053ae:	0109      	lsls	r1, r1, #4
 80053b0:	440a      	add	r2, r1
 80053b2:	4601      	mov	r1, r0
 80053b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80053b8:	e00e      	b.n	80053d8 <TFT_English_pixel+0x98>
			else				pixel[x][y] = pTFTHandle->background;
 80053ba:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 80053be:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 80053ca:	f107 0314 	add.w	r3, r7, #20
 80053ce:	0109      	lsls	r1, r1, #4
 80053d0:	440a      	add	r2, r1
 80053d2:	4601      	mov	r1, r0
 80053d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 80053d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for(y = 0; y < 8; y++)
 80053e2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80053e6:	3301      	adds	r3, #1
 80053e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80053ec:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d9cc      	bls.n	800538e <TFT_English_pixel+0x4e>
	for(x = 0; x < 8; x++)
 80053f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80053f8:	3301      	adds	r3, #1
 80053fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80053fe:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005402:	2b07      	cmp	r3, #7
 8005404:	d9b4      	bls.n	8005370 <TFT_English_pixel+0x30>
		}
	}

	for(x = 0; x < 8; x++)
 8005406:	2300      	movs	r3, #0
 8005408:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800540c:	e04b      	b.n	80054a6 <TFT_English_pixel+0x166>
	{
		data = E_font[code][x+8];
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005416:	3308      	adds	r3, #8
 8005418:	4945      	ldr	r1, [pc, #276]	; (8005530 <TFT_English_pixel+0x1f0>)
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	440a      	add	r2, r1
 800541e:	4413      	add	r3, r2
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		for(y = 0; y < 8; y++)
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800542c:	e032      	b.n	8005494 <TFT_English_pixel+0x154>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 800542e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <TFT_English_pixel+0x11e>
 800543a:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 800543e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005442:	f103 0208 	add.w	r2, r3, #8
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	0109      	lsls	r1, r1, #4
 8005454:	440a      	add	r2, r1
 8005456:	4601      	mov	r1, r0
 8005458:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800545c:	e010      	b.n	8005480 <TFT_English_pixel+0x140>
			else				pixel[x][y+8] = pTFTHandle->background;
 800545e:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8005462:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005466:	f103 0208 	add.w	r2, r3, #8
 800546a:	f107 030c 	add.w	r3, r7, #12
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	0109      	lsls	r1, r1, #4
 8005478:	440a      	add	r2, r1
 800547a:	4601      	mov	r1, r0
 800547c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8005480:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for(y = 0; y < 8; y++)
 800548a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800548e:	3301      	adds	r3, #1
 8005490:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8005494:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005498:	2b07      	cmp	r3, #7
 800549a:	d9c8      	bls.n	800542e <TFT_English_pixel+0xee>
	for(x = 0; x < 8; x++)
 800549c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80054a0:	3301      	adds	r3, #1
 80054a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80054a6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	d9af      	bls.n	800540e <TFT_English_pixel+0xce>
		}
	}

	for(y = 0; y < 16; y++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80054b4:	e032      	b.n	800551c <TFT_English_pixel+0x1dc>
	{
		for(x = 0; x < 8; x++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80054bc:	e025      	b.n	800550a <TFT_English_pixel+0x1ca>
		{
			TFT_Pixel(pTFTHandle, Xpixel + x, Ypixel + y, pixel[x][y]);
 80054be:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f107 030a 	add.w	r3, r7, #10
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	b29c      	uxth	r4, r3
 80054ce:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	4413      	add	r3, r2
 80054dc:	b29d      	uxth	r5, r3
 80054de:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 80054e2:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80054e6:	f107 0314 	add.w	r3, r7, #20
 80054ea:	0109      	lsls	r1, r1, #4
 80054ec:	440a      	add	r2, r1
 80054ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80054f2:	f107 000c 	add.w	r0, r7, #12
 80054f6:	462a      	mov	r2, r5
 80054f8:	4621      	mov	r1, r4
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f7ff fb20 	bl	8004b40 <TFT_Pixel>
		for(x = 0; x < 8; x++)
 8005500:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005504:	3301      	adds	r3, #1
 8005506:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800550a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800550e:	2b07      	cmp	r3, #7
 8005510:	d9d5      	bls.n	80054be <TFT_English_pixel+0x17e>
	for(y = 0; y < 16; y++)
 8005512:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005516:	3301      	adds	r3, #1
 8005518:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800551c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005520:	2b0f      	cmp	r3, #15
 8005522:	d9c8      	bls.n	80054b6 <TFT_English_pixel+0x176>
		}
	}
}
 8005524:	bf00      	nop
 8005526:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800552a:	46bd      	mov	sp, r7
 800552c:	bdb0      	pop	{r4, r5, r7, pc}
 800552e:	bf00      	nop
 8005530:	08009878 	.word	0x08009878

08005534 <TFT_Unsigned_decimal>:
	}
}


void TFT_Unsigned_decimal(TFT_HandleTypeDef *pTFTHandle, uint32_t number, uint8_t zerofill, uint8_t digit)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4611      	mov	r1, r2
 8005540:	461a      	mov	r2, r3
 8005542:	460b      	mov	r3, r1
 8005544:	71fb      	strb	r3, [r7, #7]
 8005546:	4613      	mov	r3, r2
 8005548:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, character;
	uint32_t div;

	if((digit == 0) || (digit > 9))		return ;
 800554a:	79bb      	ldrb	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d046      	beq.n	80055de <TFT_Unsigned_decimal+0xaa>
 8005550:	79bb      	ldrb	r3, [r7, #6]
 8005552:	2b09      	cmp	r3, #9
 8005554:	d843      	bhi.n	80055de <TFT_Unsigned_decimal+0xaa>

	div = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61bb      	str	r3, [r7, #24]
	while(--digit)		div *= 10;
 800555a:	e005      	b.n	8005568 <TFT_Unsigned_decimal+0x34>
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	79bb      	ldrb	r3, [r7, #6]
 800556a:	3b01      	subs	r3, #1
 800556c:	71bb      	strb	r3, [r7, #6]
 800556e:	79bb      	ldrb	r3, [r7, #6]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f3      	bne.n	800555c <TFT_Unsigned_decimal+0x28>

	zero_flag = zerofill;
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	77fb      	strb	r3, [r7, #31]

	while(div > 0)
 8005578:	e02d      	b.n	80055d6 <TFT_Unsigned_decimal+0xa2>
	{
		character = number / div;
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	75fb      	strb	r3, [r7, #23]

		if((character == 0) && (zero_flag == 0) && (div != 1))
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <TFT_Unsigned_decimal+0x72>
 800558a:	7ffb      	ldrb	r3, [r7, #31]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <TFT_Unsigned_decimal+0x72>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d007      	beq.n	80055a6 <TFT_Unsigned_decimal+0x72>
		{
			TFT_English(pTFTHandle, character + ' ');
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	3320      	adds	r3, #32
 800559a:	b2db      	uxtb	r3, r3
 800559c:	4619      	mov	r1, r3
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff fb6e 	bl	8004c80 <TFT_English>
 80055a4:	e008      	b.n	80055b8 <TFT_Unsigned_decimal+0x84>
		}
		else
		{
			zero_flag = 1;
 80055a6:	2301      	movs	r3, #1
 80055a8:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character + '0');
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	3330      	adds	r3, #48	; 0x30
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fb64 	bl	8004c80 <TFT_English>
		}

		number %= div;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	fb01 f202 	mul.w	r2, r1, r2
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
		div /= 10;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4a06      	ldr	r2, [pc, #24]	; (80055e8 <TFT_Unsigned_decimal+0xb4>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	61bb      	str	r3, [r7, #24]
	while(div > 0)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ce      	bne.n	800557a <TFT_Unsigned_decimal+0x46>
 80055dc:	e000      	b.n	80055e0 <TFT_Unsigned_decimal+0xac>
	if((digit == 0) || (digit > 9))		return ;
 80055de:	bf00      	nop
	}
}
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	cccccccd 	.word	0xcccccccd

080055ec <TFT_Signed_float>:
	}
}


void TFT_Signed_float(TFT_HandleTypeDef *pTFTHandle, float number, uint8_t integral, uint8_t fractional)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4611      	mov	r1, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	460b      	mov	r3, r1
 80055fc:	71fb      	strb	r3, [r7, #7]
 80055fe:	4613      	mov	r3, r2
 8005600:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, digit, character;
	uint32_t div, integer;

	digit = integral + fractional;
 8005602:	79fa      	ldrb	r2, [r7, #7]
 8005604:	79bb      	ldrb	r3, [r7, #6]
 8005606:	4413      	add	r3, r2
 8005608:	77bb      	strb	r3, [r7, #30]

	if((integral == 0) || (fractional == 0) || (digit > 9))		return;
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 808b 	beq.w	8005728 <TFT_Signed_float+0x13c>
 8005612:	79bb      	ldrb	r3, [r7, #6]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8087 	beq.w	8005728 <TFT_Signed_float+0x13c>
 800561a:	7fbb      	ldrb	r3, [r7, #30]
 800561c:	2b09      	cmp	r3, #9
 800561e:	f200 8083 	bhi.w	8005728 <TFT_Signed_float+0x13c>

	if(number >= 0)
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	68b8      	ldr	r0, [r7, #8]
 8005628:	f7fb fd6e 	bl	8001108 <__aeabi_fcmpge>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <TFT_Signed_float+0x50>
	{
		TFT_English(pTFTHandle, '+');
 8005632:	212b      	movs	r1, #43	; 0x2b
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff fb23 	bl	8004c80 <TFT_English>
 800563a:	e007      	b.n	800564c <TFT_Signed_float+0x60>
	}
	else
	{
		TFT_English(pTFTHandle, '-');
 800563c:	212d      	movs	r1, #45	; 0x2d
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fb1e 	bl	8004c80 <TFT_English>
		number = (-1)*number;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800564a:	60bb      	str	r3, [r7, #8]
	}

	div = 1;
 800564c:	2301      	movs	r3, #1
 800564e:	61bb      	str	r3, [r7, #24]

	while(--digit)		div *= 10;
 8005650:	e005      	b.n	800565e <TFT_Signed_float+0x72>
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	7fbb      	ldrb	r3, [r7, #30]
 8005660:	3b01      	subs	r3, #1
 8005662:	77bb      	strb	r3, [r7, #30]
 8005664:	7fbb      	ldrb	r3, [r7, #30]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f3      	bne.n	8005652 <TFT_Signed_float+0x66>

	while(fractional--)	number *= 10.;
 800566a:	e005      	b.n	8005678 <TFT_Signed_float+0x8c>
 800566c:	4930      	ldr	r1, [pc, #192]	; (8005730 <TFT_Signed_float+0x144>)
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f7fb fb98 	bl	8000da4 <__aeabi_fmul>
 8005674:	4603      	mov	r3, r0
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	79bb      	ldrb	r3, [r7, #6]
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	71ba      	strb	r2, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f4      	bne.n	800566c <TFT_Signed_float+0x80>

	integer = (uint32_t)(number + 0.5);
 8005682:	68b8      	ldr	r0, [r7, #8]
 8005684:	f7fa fee0 	bl	8000448 <__aeabi_f2d>
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <TFT_Signed_float+0x148>)
 800568e:	f7fa fd7d 	bl	800018c <__adddf3>
 8005692:	4603      	mov	r3, r0
 8005694:	460c      	mov	r4, r1
 8005696:	4618      	mov	r0, r3
 8005698:	4621      	mov	r1, r4
 800569a:	f7fb fa05 	bl	8000aa8 <__aeabi_d2uiz>
 800569e:	4603      	mov	r3, r0
 80056a0:	617b      	str	r3, [r7, #20]

	zero_flag = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	77fb      	strb	r3, [r7, #31]

	digit = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	77bb      	strb	r3, [r7, #30]

	while(div > 0)
 80056aa:	e039      	b.n	8005720 <TFT_Signed_float+0x134>
	{
		character = integer / div;
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	74fb      	strb	r3, [r7, #19]

		if((character == 0) && (zero_flag == 0) && (digit != integral))
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10e      	bne.n	80056da <TFT_Signed_float+0xee>
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <TFT_Signed_float+0xee>
 80056c2:	7fba      	ldrb	r2, [r7, #30]
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d007      	beq.n	80056da <TFT_Signed_float+0xee>
		{
			TFT_English(pTFTHandle, character + ' ');
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	3320      	adds	r3, #32
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fad4 	bl	8004c80 <TFT_English>
 80056d8:	e008      	b.n	80056ec <TFT_Signed_float+0x100>
		}
		else
		{
			zero_flag = 1;
 80056da:	2301      	movs	r3, #1
 80056dc:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character + '0');
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	3330      	adds	r3, #48	; 0x30
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	4619      	mov	r1, r3
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff faca 	bl	8004c80 <TFT_English>
		}

		integer %= div;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80056f4:	69b9      	ldr	r1, [r7, #24]
 80056f6:	fb01 f202 	mul.w	r2, r1, r2
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
		div /= 10;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	4a0d      	ldr	r2, [pc, #52]	; (8005738 <TFT_Signed_float+0x14c>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	61bb      	str	r3, [r7, #24]

		if(digit == integral)		TFT_English(pTFTHandle, '.');
 800570a:	7fba      	ldrb	r2, [r7, #30]
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	429a      	cmp	r2, r3
 8005710:	d103      	bne.n	800571a <TFT_Signed_float+0x12e>
 8005712:	212e      	movs	r1, #46	; 0x2e
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fab3 	bl	8004c80 <TFT_English>

		digit++;
 800571a:	7fbb      	ldrb	r3, [r7, #30]
 800571c:	3301      	adds	r3, #1
 800571e:	77bb      	strb	r3, [r7, #30]
	while(div > 0)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c2      	bne.n	80056ac <TFT_Signed_float+0xc0>
 8005726:	e000      	b.n	800572a <TFT_Signed_float+0x13e>
	if((integral == 0) || (fractional == 0) || (digit > 9))		return;
 8005728:	bf00      	nop
	}
}
 800572a:	3724      	adds	r7, #36	; 0x24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}
 8005730:	41200000 	.word	0x41200000
 8005734:	3fe00000 	.word	0x3fe00000
 8005738:	cccccccd 	.word	0xcccccccd

0800573c <TFT_Line>:


void TFT_Line(TFT_HandleTypeDef *pTFTHandle, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	4608      	mov	r0, r1
 8005746:	4611      	mov	r1, r2
 8005748:	461a      	mov	r2, r3
 800574a:	4603      	mov	r3, r0
 800574c:	817b      	strh	r3, [r7, #10]
 800574e:	460b      	mov	r3, r1
 8005750:	813b      	strh	r3, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
	int16_t x, y;

	if((x1 == x2) && (y1 == y2))
 8005756:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800575a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575e:	429a      	cmp	r2, r3
 8005760:	d10c      	bne.n	800577c <TFT_Line+0x40>
 8005762:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005766:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800576a:	429a      	cmp	r2, r3
 800576c:	d106      	bne.n	800577c <TFT_Line+0x40>
	{
		TFT_Pixel(pTFTHandle, x1, y1, color);
 800576e:	8979      	ldrh	r1, [r7, #10]
 8005770:	893a      	ldrh	r2, [r7, #8]
 8005772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff f9e3 	bl	8004b40 <TFT_Pixel>
 800577a:	e109      	b.n	8005990 <TFT_Line+0x254>
	}
	else
	{
		if(x1 < x2)		x = x2 - x1;
 800577c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005784:	429a      	cmp	r2, r3
 8005786:	da05      	bge.n	8005794 <TFT_Line+0x58>
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	897b      	ldrh	r3, [r7, #10]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	82fb      	strh	r3, [r7, #22]
 8005792:	e004      	b.n	800579e <TFT_Line+0x62>
		else			x = x1 - x2;
 8005794:	897a      	ldrh	r2, [r7, #10]
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	b29b      	uxth	r3, r3
 800579c:	82fb      	strh	r3, [r7, #22]

		if(y1 < y2)		y = y2 - y1;
 800579e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80057a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	da05      	bge.n	80057b6 <TFT_Line+0x7a>
 80057aa:	8c3a      	ldrh	r2, [r7, #32]
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	82bb      	strh	r3, [r7, #20]
 80057b4:	e004      	b.n	80057c0 <TFT_Line+0x84>
		else			y = y1 - y2;
 80057b6:	893a      	ldrh	r2, [r7, #8]
 80057b8:	8c3b      	ldrh	r3, [r7, #32]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	82bb      	strh	r3, [r7, #20]

		if((x >= y) && (x1 <= x2))
 80057c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	db33      	blt.n	8005834 <TFT_Line+0xf8>
 80057cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80057d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	dc2d      	bgt.n	8005834 <TFT_Line+0xf8>
		{
			for(x = x1; x <= x2; x++)
 80057d8:	897b      	ldrh	r3, [r7, #10]
 80057da:	82fb      	strh	r3, [r7, #22]
 80057dc:	e023      	b.n	8005826 <TFT_Line+0xea>
			{
				y = y1 + (int32_t)(x - x1) * (int32_t)(y2 - y1) / (x2 - x1);
 80057de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80057ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80057f0:	1a8a      	subs	r2, r1, r2
 80057f2:	fb02 f203 	mul.w	r2, r2, r3
 80057f6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80057fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057fe:	1acb      	subs	r3, r1, r3
 8005800:	fb92 f3f3 	sdiv	r3, r2, r3
 8005804:	b29a      	uxth	r2, r3
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	4413      	add	r3, r2
 800580a:	b29b      	uxth	r3, r3
 800580c:	82bb      	strh	r3, [r7, #20]
				TFT_Pixel(pTFTHandle, x, y, color);
 800580e:	8af9      	ldrh	r1, [r7, #22]
 8005810:	8aba      	ldrh	r2, [r7, #20]
 8005812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff f993 	bl	8004b40 <TFT_Pixel>
			for(x = x1; x <= x2; x++)
 800581a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800581e:	b29b      	uxth	r3, r3
 8005820:	3301      	adds	r3, #1
 8005822:	b29b      	uxth	r3, r3
 8005824:	82fb      	strh	r3, [r7, #22]
 8005826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800582a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582e:	429a      	cmp	r2, r3
 8005830:	ddd5      	ble.n	80057de <TFT_Line+0xa2>
		if((x >= y) && (x1 <= x2))
 8005832:	e0ad      	b.n	8005990 <TFT_Line+0x254>
			}
		}
		else if((x >= y) && (x1 > x2))
 8005834:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005838:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800583c:	429a      	cmp	r2, r3
 800583e:	db33      	blt.n	80058a8 <TFT_Line+0x16c>
 8005840:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005848:	429a      	cmp	r2, r3
 800584a:	dd2d      	ble.n	80058a8 <TFT_Line+0x16c>
		{
			for(x = x1; x >= x2; x--)
 800584c:	897b      	ldrh	r3, [r7, #10]
 800584e:	82fb      	strh	r3, [r7, #22]
 8005850:	e023      	b.n	800589a <TFT_Line+0x15e>
			{
				y = y1 + (int32_t)(x - x1) * (int32_t)(y2 - y1) / (x2 - x1);
 8005852:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005856:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8005860:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005864:	1a8a      	subs	r2, r1, r2
 8005866:	fb02 f203 	mul.w	r2, r2, r3
 800586a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800586e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005872:	1acb      	subs	r3, r1, r3
 8005874:	fb92 f3f3 	sdiv	r3, r2, r3
 8005878:	b29a      	uxth	r2, r3
 800587a:	893b      	ldrh	r3, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	82bb      	strh	r3, [r7, #20]
				TFT_Pixel(pTFTHandle, x, y, color);
 8005882:	8af9      	ldrh	r1, [r7, #22]
 8005884:	8aba      	ldrh	r2, [r7, #20]
 8005886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff f959 	bl	8004b40 <TFT_Pixel>
			for(x = x1; x >= x2; x--)
 800588e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	82fb      	strh	r3, [r7, #22]
 800589a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800589e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	dad5      	bge.n	8005852 <TFT_Line+0x116>
		else if((x >= y) && (x1 > x2))
 80058a6:	e073      	b.n	8005990 <TFT_Line+0x254>
			}
		}
		else if((x < y) && (y1 <= y2))
 80058a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80058ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	da33      	bge.n	800591c <TFT_Line+0x1e0>
 80058b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80058b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80058bc:	429a      	cmp	r2, r3
 80058be:	dc2d      	bgt.n	800591c <TFT_Line+0x1e0>
		{
			for(y = y1; y <= y2; y++)
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	82bb      	strh	r3, [r7, #20]
 80058c4:	e023      	b.n	800590e <TFT_Line+0x1d2>
			{
				x = x1 + (int32_t)(y - y1) * (int32_t)(x2 - x1) / (y2 - y1);
 80058c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80058ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80058d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80058d8:	1a8a      	subs	r2, r1, r2
 80058da:	fb02 f203 	mul.w	r2, r2, r3
 80058de:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80058e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	897b      	ldrh	r3, [r7, #10]
 80058f0:	4413      	add	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	82fb      	strh	r3, [r7, #22]
				TFT_Pixel(pTFTHandle, x, y, color);
 80058f6:	8af9      	ldrh	r1, [r7, #22]
 80058f8:	8aba      	ldrh	r2, [r7, #20]
 80058fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff f91f 	bl	8004b40 <TFT_Pixel>
			for(y = y1; y <= y2; y++)
 8005902:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005906:	b29b      	uxth	r3, r3
 8005908:	3301      	adds	r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	82bb      	strh	r3, [r7, #20]
 800590e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005916:	429a      	cmp	r2, r3
 8005918:	ddd5      	ble.n	80058c6 <TFT_Line+0x18a>
		else if((x < y) && (y1 <= y2))
 800591a:	e039      	b.n	8005990 <TFT_Line+0x254>
			}
		}
		else if((x < y) && (y1 > y2))
 800591c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005920:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005924:	429a      	cmp	r2, r3
 8005926:	da33      	bge.n	8005990 <TFT_Line+0x254>
 8005928:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800592c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005930:	429a      	cmp	r2, r3
 8005932:	dd2d      	ble.n	8005990 <TFT_Line+0x254>
		{
			for(y = y1; y >= y2; y--)
 8005934:	893b      	ldrh	r3, [r7, #8]
 8005936:	82bb      	strh	r3, [r7, #20]
 8005938:	e023      	b.n	8005982 <TFT_Line+0x246>
			{
				x = x1 + (int32_t)(y - y1) * (int32_t)(x2 - x1) / (y2 - y1);
 800593a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800593e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005948:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800594c:	1a8a      	subs	r2, r1, r2
 800594e:	fb02 f203 	mul.w	r2, r2, r3
 8005952:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8005956:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800595a:	1acb      	subs	r3, r1, r3
 800595c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	4413      	add	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	82fb      	strh	r3, [r7, #22]
				TFT_Pixel(pTFTHandle, x, y, color);
 800596a:	8af9      	ldrh	r1, [r7, #22]
 800596c:	8aba      	ldrh	r2, [r7, #20]
 800596e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff f8e5 	bl	8004b40 <TFT_Pixel>
			for(y = y1; y >= y2; y--)
 8005976:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	82bb      	strh	r3, [r7, #20]
 8005982:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005986:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800598a:	429a      	cmp	r2, r3
 800598c:	dad5      	bge.n	800593a <TFT_Line+0x1fe>
			}
		}
	}
}
 800598e:	e7ff      	b.n	8005990 <TFT_Line+0x254>
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fe fd05 	bl	80043b0 <TS_MspInit>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <Key_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Key_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80059b6:	463b      	mov	r3, r7
 80059b8:	2210      	movs	r2, #16
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 f9a3 	bl	8007d08 <memset>

	/* Init GPIO of MODE Button */
	GPIOInit.Pin = GPIO_PIN_0;
 80059c2:	2301      	movs	r3, #1
 80059c4:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <Key_Init+0xbc>)
 80059c8:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 80059ce:	463b      	mov	r3, r7
 80059d0:	4619      	mov	r1, r3
 80059d2:	4827      	ldr	r0, [pc, #156]	; (8005a70 <Key_Init+0xc0>)
 80059d4:	f7fb fef4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI0, NVIC_PRIOR_15, ENABLE);
 80059d8:	2201      	movs	r2, #1
 80059da:	210f      	movs	r1, #15
 80059dc:	2006      	movs	r0, #6
 80059de:	f7fd ff3f 	bl	8003860 <NVIC_IRQConfig>

	/* Init GPIO of Up Button */
	GPIOInit.Pin = GPIO_PIN_1;
 80059e2:	2302      	movs	r3, #2
 80059e4:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 80059e6:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <Key_Init+0xbc>)
 80059e8:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 80059ea:	2301      	movs	r3, #1
 80059ec:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 80059ee:	463b      	mov	r3, r7
 80059f0:	4619      	mov	r1, r3
 80059f2:	481f      	ldr	r0, [pc, #124]	; (8005a70 <Key_Init+0xc0>)
 80059f4:	f7fb fee4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI1, NVIC_PRIOR_15, ENABLE);
 80059f8:	2201      	movs	r2, #1
 80059fa:	210f      	movs	r1, #15
 80059fc:	2007      	movs	r0, #7
 80059fe:	f7fd ff2f 	bl	8003860 <NVIC_IRQConfig>

	/* Init GPIO of Down Button */
	GPIOInit.Pin = GPIO_PIN_2;
 8005a02:	2304      	movs	r3, #4
 8005a04:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 8005a06:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <Key_Init+0xbc>)
 8005a08:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005a0e:	463b      	mov	r3, r7
 8005a10:	4619      	mov	r1, r3
 8005a12:	4817      	ldr	r0, [pc, #92]	; (8005a70 <Key_Init+0xc0>)
 8005a14:	f7fb fed4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI2, NVIC_PRIOR_15, ENABLE);
 8005a18:	2201      	movs	r2, #1
 8005a1a:	210f      	movs	r1, #15
 8005a1c:	2008      	movs	r0, #8
 8005a1e:	f7fd ff1f 	bl	8003860 <NVIC_IRQConfig>

	/* Init GPIO of START/STOP Button */
	GPIOInit.Pin = GPIO_PIN_3;
 8005a22:	2308      	movs	r3, #8
 8005a24:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <Key_Init+0xbc>)
 8005a28:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005a2e:	463b      	mov	r3, r7
 8005a30:	4619      	mov	r1, r3
 8005a32:	480f      	ldr	r0, [pc, #60]	; (8005a70 <Key_Init+0xc0>)
 8005a34:	f7fb fec4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI3, NVIC_PRIOR_15, ENABLE);
 8005a38:	2201      	movs	r2, #1
 8005a3a:	210f      	movs	r1, #15
 8005a3c:	2009      	movs	r0, #9
 8005a3e:	f7fd ff0f 	bl	8003860 <NVIC_IRQConfig>

	/* Init GPIO of EMERGENCY STOP Button */
	GPIOInit.Pin = GPIO_PIN_4;
 8005a42:	2310      	movs	r3, #16
 8005a44:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <Key_Init+0xbc>)
 8005a48:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 8005a4e:	463b      	mov	r3, r7
 8005a50:	4619      	mov	r1, r3
 8005a52:	4807      	ldr	r0, [pc, #28]	; (8005a70 <Key_Init+0xc0>)
 8005a54:	f7fb feb4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI4, NVIC_PRIOR_15, ENABLE);
 8005a58:	2201      	movs	r2, #1
 8005a5a:	210f      	movs	r1, #15
 8005a5c:	200a      	movs	r0, #10
 8005a5e:	f7fd feff 	bl	8003860 <NVIC_IRQConfig>
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	10210000 	.word	0x10210000
 8005a70:	40010800 	.word	0x40010800

08005a74 <BLDC1_Init>:


void BLDC1_Init(void)
{
 8005a74:	b598      	push	{r3, r4, r7, lr}
 8005a76:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 8005a78:	4b5e      	ldr	r3, [pc, #376]	; (8005bf4 <BLDC1_Init+0x180>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 8005a7e:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <BLDC1_Init+0x180>)
 8005a80:	2208      	movs	r2, #8
 8005a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 8005a86:	4b5b      	ldr	r3, [pc, #364]	; (8005bf4 <BLDC1_Init+0x180>)
 8005a88:	2204      	movs	r2, #4
 8005a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 8005a8e:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <BLDC1_Init+0x180>)
 8005a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fa fcc3 	bl	8000424 <__aeabi_i2d>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f04f 0000 	mov.w	r0, #0
 8005aaa:	4953      	ldr	r1, [pc, #332]	; (8005bf8 <BLDC1_Init+0x184>)
 8005aac:	f7fa fe4e 	bl	800074c <__aeabi_ddiv>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <BLDC1_Init+0x188>)
 8005abe:	f7fa fe45 	bl	800074c <__aeabi_ddiv>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4a4b      	ldr	r2, [pc, #300]	; (8005bf4 <BLDC1_Init+0x180>)
 8005ac8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <BLDC1_Init+0x180>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8005ad4:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <BLDC1_Init+0x180>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8005ada:	4b46      	ldr	r3, [pc, #280]	; (8005bf4 <BLDC1_Init+0x180>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8005ae0:	4a44      	ldr	r2, [pc, #272]	; (8005bf4 <BLDC1_Init+0x180>)
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 8005aee:	4a41      	ldr	r2, [pc, #260]	; (8005bf4 <BLDC1_Init+0x180>)
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 8005afc:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <BLDC1_Init+0x180>)
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	f04f 0400 	mov.w	r4, #0
 8005b06:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8005b18:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	f04f 0400 	mov.w	r4, #0
 8005b22:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 8005b26:	4a33      	ldr	r2, [pc, #204]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	f04f 0400 	mov.w	r4, #0
 8005b30:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8005b34:	4a2f      	ldr	r2, [pc, #188]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	f04f 0400 	mov.w	r4, #0
 8005b3e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 8005b42:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	f04f 0400 	mov.w	r4, #0
 8005b4c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8005b50:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	f04f 0400 	mov.w	r4, #0
 8005b5a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 8005b5e:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	f04f 0400 	mov.w	r4, #0
 8005b68:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 8005b6c:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	f04f 0400 	mov.w	r4, #0
 8005b76:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 8005b7a:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	f04f 0400 	mov.w	r4, #0
 8005b92:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <BLDC1_Init+0x180>)
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <BLDC1_Init+0x180>)
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	f04f 0400 	mov.w	r4, #0
 8005bae:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 8005bb2:	4a10      	ldr	r2, [pc, #64]	; (8005bf4 <BLDC1_Init+0x180>)
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	f04f 0400 	mov.w	r4, #0
 8005bbc:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <BLDC1_Init+0x180>)
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <BLDC1_Init+0x180>)
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 8005bdc:	4a05      	ldr	r2, [pc, #20]	; (8005bf4 <BLDC1_Init+0x180>)
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 8005bea:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <BLDC1_Init+0x180>)
 8005bec:	f7fc feb4 	bl	8002958 <BLDC_Init>
}
 8005bf0:	bf00      	nop
 8005bf2:	bd98      	pop	{r3, r4, r7, pc}
 8005bf4:	20000268 	.word	0x20000268
 8005bf8:	404e0000 	.word	0x404e0000
 8005bfc:	40100000 	.word	0x40100000

08005c00 <UART3_Init>:


void UART3_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
	UART3Handle.Instance = USART3;
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <UART3_Init+0x48>)
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <UART3_Init+0x4c>)
 8005c08:	601a      	str	r2, [r3, #0]
	UART3Handle.Init.Mode = UART_MODE_TX;
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <UART3_Init+0x48>)
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	615a      	str	r2, [r3, #20]
	UART3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <UART3_Init+0x48>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	61da      	str	r2, [r3, #28]
	UART3Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <UART3_Init+0x48>)
 8005c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c1c:	605a      	str	r2, [r3, #4]
	UART3Handle.Init.Parity = UART_PARITY_NONE;
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <UART3_Init+0x48>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	611a      	str	r2, [r3, #16]
	UART3Handle.Init.StopBits = UART_STOPBITS_1;
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <UART3_Init+0x48>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	60da      	str	r2, [r3, #12]
	UART3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <UART3_Init+0x48>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	619a      	str	r2, [r3, #24]
	UART3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <UART3_Init+0x48>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	609a      	str	r2, [r3, #8]
	UART3Handle.hdmatx = &DMA1Handle;
 8005c36:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <UART3_Init+0x48>)
 8005c38:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <UART3_Init+0x50>)
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART3Handle);
 8005c3c:	4802      	ldr	r0, [pc, #8]	; (8005c48 <UART3_Init+0x48>)
 8005c3e:	f7fc fd1f 	bl	8002680 <USART_Init>
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000360 	.word	0x20000360
 8005c4c:	40004800 	.word	0x40004800
 8005c50:	200003fc 	.word	0x200003fc

08005c54 <TIM6_Init>:


void TIM6_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <TIM6_Init+0x60>)
 8005c5c:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c6a:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c6c:	2280      	movs	r2, #128	; 0x80
 8005c6e:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c72:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005c76:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c7a:	2209      	movs	r2, #9
 8005c7c:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8005c84:	480a      	ldr	r0, [pc, #40]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c86:	f7fc fa71 	bl	800216c <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <TIM6_Init+0x5c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <TIM6_Init+0x5c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
}
 8005caa:	bf00      	nop
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000494 	.word	0x20000494
 8005cb4:	40001000 	.word	0x40001000

08005cb8 <DMA1_Init>:


void DMA1_Init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <DMA1_Init+0x20>)
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <DMA1_Init+0x20>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL2, NVIC_PRIOR_15, ENABLE);
 8005cc8:	2201      	movs	r2, #1
 8005cca:	210f      	movs	r1, #15
 8005ccc:	200c      	movs	r0, #12
 8005cce:	f7fd fdc7 	bl	8003860 <NVIC_IRQConfig>
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000

08005cdc <TFT1_Init>:


void TFT1_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
	TFT1Handle.Instance = TFT1;
 8005ce0:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <TFT1_Init+0x54>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
	TFT1Handle.ScreenMode = 'L';
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <TFT1_Init+0x54>)
 8005ce8:	224c      	movs	r2, #76	; 0x4c
 8005cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TFT1Handle.XcharacterLimit = 40;
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <TFT1_Init+0x54>)
 8005cf0:	2228      	movs	r2, #40	; 0x28
 8005cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	TFT1Handle.YcharacterLimit = 30;
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <TFT1_Init+0x54>)
 8005cf8:	221e      	movs	r2, #30
 8005cfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	TFT1Handle.nextline_flag = 0;
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <TFT1_Init+0x54>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	TFT1Handle.cursor_flag = 0;
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <TFT1_Init+0x54>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	TFT1Handle.underscore_flag = 0;
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <TFT1_Init+0x54>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	TFT1Handle.outline_flag = 0;
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <TFT1_Init+0x54>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	TFT1Handle.Kfont_type = 'M';
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <TFT1_Init+0x54>)
 8005d20:	224d      	movs	r2, #77	; 0x4d
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	TFT_Init(&TFT1Handle);
 8005d26:	4802      	ldr	r0, [pc, #8]	; (8005d30 <TFT1_Init+0x54>)
 8005d28:	f7fe fc48 	bl	80045bc <TFT_Init>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	2000039c 	.word	0x2000039c

08005d34 <TS1_Init>:


void TS1_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 8005d38:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <TS1_Init+0x58>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <TS1_Init+0x58>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <TS1_Init+0x58>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <TS1_Init+0x58>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8005d50:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <TS1_Init+0x58>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <TS1_Init+0x58>)
 8005d58:	22fa      	movs	r2, #250	; 0xfa
 8005d5a:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <TS1_Init+0x58>)
 8005d5e:	f640 6274 	movw	r2, #3700	; 0xe74
 8005d62:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <TS1_Init+0x58>)
 8005d66:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005d6a:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 8005d6c:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <TS1_Init+0x58>)
 8005d6e:	f640 62a6 	movw	r2, #3750	; 0xea6
 8005d72:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <TS1_Init+0x58>)
 8005d76:	22d0      	movs	r2, #208	; 0xd0
 8005d78:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <TS1_Init+0x58>)
 8005d7c:	2290      	movs	r2, #144	; 0x90
 8005d7e:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 8005d80:	4802      	ldr	r0, [pc, #8]	; (8005d8c <TS1_Init+0x58>)
 8005d82:	f7ff fe09 	bl	8005998 <TS_Init>
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000238 	.word	0x20000238

08005d90 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8005d90:	b5b0      	push	{r4, r5, r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	/* This Callback function is executed every 1ms by TIM6 */
	static int count = 0;


	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a70      	ldr	r2, [pc, #448]	; (8005f60 <TIM_PeriodElapsedCallback+0x1d0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f040 80d0 	bne.w	8005f44 <TIM_PeriodElapsedCallback+0x1b4>
	{
		/* Motor State is SPEED */
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 8005da4:	4b6f      	ldr	r3, [pc, #444]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d161      	bne.n	8005e72 <TIM_PeriodElapsedCallback+0xe2>
		{
			if(count >= 100)
 8005dae:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b63      	cmp	r3, #99	; 0x63
 8005db4:	f340 80c1 	ble.w	8005f3a <TIM_PeriodElapsedCallback+0x1aa>
			{
				/* Calculate the Current Speed of BLDC Motor */
				BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8005db8:	a365      	add	r3, pc, #404	; (adr r3, 8005f50 <TIM_PeriodElapsedCallback+0x1c0>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	4869      	ldr	r0, [pc, #420]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005dc0:	f7fc fe6e 	bl	8002aa0 <BLDC_Get_Speed>

				/* Set PWM duty cycle by Speed PID calculation */
				BLDC_SpeedPID(&BLDC1Handle, 0.1);
 8005dc4:	a362      	add	r3, pc, #392	; (adr r3, 8005f50 <TIM_PeriodElapsedCallback+0x1c0>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	4866      	ldr	r0, [pc, #408]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005dcc:	f7fd f9f4 	bl	80031b8 <BLDC_SpeedPID>


				/* Calculate the Pixel corresponding to the Speed value */
				if( (GraphClear_flag == FLAG_RESET) || (GraphDraw_flag == FLAG_RESET) )
 8005dd0:	4b66      	ldr	r3, [pc, #408]	; (8005f6c <TIM_PeriodElapsedCallback+0x1dc>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <TIM_PeriodElapsedCallback+0x50>
 8005dd8:	4b65      	ldr	r3, [pc, #404]	; (8005f70 <TIM_PeriodElapsedCallback+0x1e0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d144      	bne.n	8005e6a <TIM_PeriodElapsedCallback+0xda>
				{
					y = (uint16_t)((200. * BLDC1Handle.CurSpeed) / (BLDC1Handle.RefSpeed * 4. / 3.));
 8005de0:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005de2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <TIM_PeriodElapsedCallback+0x1e4>)
 8005dec:	f7fa fb84 	bl	80004f8 <__aeabi_dmul>
 8005df0:	4603      	mov	r3, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	4625      	mov	r5, r4
 8005df6:	461c      	mov	r4, r3
 8005df8:	4b5a      	ldr	r3, [pc, #360]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005dfa:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	4b5d      	ldr	r3, [pc, #372]	; (8005f78 <TIM_PeriodElapsedCallback+0x1e8>)
 8005e04:	f7fa fb78 	bl	80004f8 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <TIM_PeriodElapsedCallback+0x1ec>)
 8005e16:	f7fa fc99 	bl	800074c <__aeabi_ddiv>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f7fa fc93 	bl	800074c <__aeabi_ddiv>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	f7fa fe3b 	bl	8000aa8 <__aeabi_d2uiz>
 8005e32:	4603      	mov	r3, r0
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	4b52      	ldr	r3, [pc, #328]	; (8005f80 <TIM_PeriodElapsedCallback+0x1f0>)
 8005e38:	801a      	strh	r2, [r3, #0]

					x_prv = x;
 8005e3a:	4b52      	ldr	r3, [pc, #328]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	4b52      	ldr	r3, [pc, #328]	; (8005f88 <TIM_PeriodElapsedCallback+0x1f8>)
 8005e40:	801a      	strh	r2, [r3, #0]
					y_prv = y;
 8005e42:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <TIM_PeriodElapsedCallback+0x1f0>)
 8005e44:	881a      	ldrh	r2, [r3, #0]
 8005e46:	4b51      	ldr	r3, [pc, #324]	; (8005f8c <TIM_PeriodElapsedCallback+0x1fc>)
 8005e48:	801a      	strh	r2, [r3, #0]

					x++;
 8005e4a:	4b4e      	ldr	r3, [pc, #312]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	4b4c      	ldr	r3, [pc, #304]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005e54:	801a      	strh	r2, [r3, #0]

					GraphDraw_flag = FLAG_SET;
 8005e56:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <TIM_PeriodElapsedCallback+0x1e0>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]

					if(x >= 250)
 8005e5c:	4b49      	ldr	r3, [pc, #292]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	2bf9      	cmp	r3, #249	; 0xf9
 8005e62:	d902      	bls.n	8005e6a <TIM_PeriodElapsedCallback+0xda>
					{
						GraphClear_flag = FLAG_SET;
 8005e64:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <TIM_PeriodElapsedCallback+0x1dc>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
//				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
//				MotorSpeedStr[5] = '\n';
//
//				UART_Transmit_DMA(&UART3Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));

				count = 0;
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e063      	b.n	8005f3a <TIM_PeriodElapsedCallback+0x1aa>
			}
		}


		/* If Motor State is POSITION or POSITION_TRACKING */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION) || (BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING) )
 8005e72:	4b3c      	ldr	r3, [pc, #240]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d004      	beq.n	8005e86 <TIM_PeriodElapsedCallback+0xf6>
 8005e7c:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d159      	bne.n	8005f3a <TIM_PeriodElapsedCallback+0x1aa>
		{
			/* Set PWM duty cycle by Position PID calculation */
			BLDC_PositionPID(&BLDC1Handle, 0.001);
 8005e86:	a334      	add	r3, pc, #208	; (adr r3, 8005f58 <TIM_PeriodElapsedCallback+0x1c8>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	4835      	ldr	r0, [pc, #212]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005e8e:	f7fd f9f7 	bl	8003280 <BLDC_PositionPID>

			if(count >= 10)
 8005e92:	4b35      	ldr	r3, [pc, #212]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	dd4f      	ble.n	8005f3a <TIM_PeriodElapsedCallback+0x1aa>
			{
				/* Calculate the Pixel corresponding to the Speed value */
				if( (GraphClear_flag == FLAG_RESET) || (GraphDraw_flag == FLAG_RESET) )
 8005e9a:	4b34      	ldr	r3, [pc, #208]	; (8005f6c <TIM_PeriodElapsedCallback+0x1dc>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <TIM_PeriodElapsedCallback+0x11a>
 8005ea2:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <TIM_PeriodElapsedCallback+0x1e0>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d144      	bne.n	8005f34 <TIM_PeriodElapsedCallback+0x1a4>
				{
					y = (uint16_t)((200. * BLDC1Handle.CurPosition) / (BLDC1Handle.RefPosition * 4. / 3.));
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005eac:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <TIM_PeriodElapsedCallback+0x1e4>)
 8005eb6:	f7fa fb1f 	bl	80004f8 <__aeabi_dmul>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4625      	mov	r5, r4
 8005ec0:	461c      	mov	r4, r3
 8005ec2:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <TIM_PeriodElapsedCallback+0x1d4>)
 8005ec4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	4b2a      	ldr	r3, [pc, #168]	; (8005f78 <TIM_PeriodElapsedCallback+0x1e8>)
 8005ece:	f7fa fb13 	bl	80004f8 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <TIM_PeriodElapsedCallback+0x1ec>)
 8005ee0:	f7fa fc34 	bl	800074c <__aeabi_ddiv>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa fc2e 	bl	800074c <__aeabi_ddiv>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	f7fa fdd6 	bl	8000aa8 <__aeabi_d2uiz>
 8005efc:	4603      	mov	r3, r0
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <TIM_PeriodElapsedCallback+0x1f0>)
 8005f02:	801a      	strh	r2, [r3, #0]

					x_prv = x;
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <TIM_PeriodElapsedCallback+0x1f8>)
 8005f0a:	801a      	strh	r2, [r3, #0]
					y_prv = y;
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <TIM_PeriodElapsedCallback+0x1f0>)
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <TIM_PeriodElapsedCallback+0x1fc>)
 8005f12:	801a      	strh	r2, [r3, #0]

					x++;
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005f1e:	801a      	strh	r2, [r3, #0]

					GraphDraw_flag = FLAG_SET;
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <TIM_PeriodElapsedCallback+0x1e0>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]

					if(x >= 250)
 8005f26:	4b17      	ldr	r3, [pc, #92]	; (8005f84 <TIM_PeriodElapsedCallback+0x1f4>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	2bf9      	cmp	r3, #249	; 0xf9
 8005f2c:	d902      	bls.n	8005f34 <TIM_PeriodElapsedCallback+0x1a4>
					{
						GraphClear_flag = FLAG_SET;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <TIM_PeriodElapsedCallback+0x1dc>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
					}
				}

				count = 0;
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
//				count = 0;
//			}
		}


		count++;
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <TIM_PeriodElapsedCallback+0x1d8>)
 8005f42:	6013      	str	r3, [r2, #0]
	}
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f4c:	f3af 8000 	nop.w
 8005f50:	9999999a 	.word	0x9999999a
 8005f54:	3fb99999 	.word	0x3fb99999
 8005f58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005f5c:	3f50624d 	.word	0x3f50624d
 8005f60:	40001000 	.word	0x40001000
 8005f64:	20000268 	.word	0x20000268
 8005f68:	20000228 	.word	0x20000228
 8005f6c:	20000225 	.word	0x20000225
 8005f70:	20000224 	.word	0x20000224
 8005f74:	40690000 	.word	0x40690000
 8005f78:	40100000 	.word	0x40100000
 8005f7c:	40080000 	.word	0x40080000
 8005f80:	2000021e 	.word	0x2000021e
 8005f84:	2000021c 	.word	0x2000021c
 8005f88:	20000220 	.word	0x20000220
 8005f8c:	20000222 	.word	0x20000222

08005f90 <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	if(GPIO_Pin & BLDC1Handle.Init.GPIO_Pins_Hall)
 8005f98:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <EXTI_Callback+0xc8>)
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <EXTI_Callback+0x36>
	{
		// 1. Detect current HallPhase location
		BLDC1Handle.HallPhase = (READ_BIT(GPIOA->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 5U;
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <EXTI_Callback+0xcc>)
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <EXTI_Callback+0xc8>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	4b29      	ldr	r3, [pc, #164]	; (8006058 <EXTI_Callback+0xc8>)
 8005fb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		// 2. Get current position value
		BLDC_Get_Position(&BLDC1Handle);
 8005fb8:	4827      	ldr	r0, [pc, #156]	; (8006058 <EXTI_Callback+0xc8>)
 8005fba:	f7fc fdbf 	bl	8002b3c <BLDC_Get_Position>

		// 3. Drive BLDC motor according to HallPhase location
		BLDC_Drive(&BLDC1Handle);
 8005fbe:	4826      	ldr	r0, [pc, #152]	; (8006058 <EXTI_Callback+0xc8>)
 8005fc0:	f7fc fcd6 	bl	8002970 <BLDC_Drive>
			EmergencyStop_key++;
		}
	}

	UNUSED(GPIO_Pin);
}
 8005fc4:	e043      	b.n	800604e <EXTI_Callback+0xbe>
	else if(GPIO_Pin == GPIO_PIN_0)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10d      	bne.n	8005fe8 <EXTI_Callback+0x58>
		if(Mode_key >= 3)
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <EXTI_Callback+0xd0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	dd03      	ble.n	8005fdc <EXTI_Callback+0x4c>
			Mode_key = 0;
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <EXTI_Callback+0xd0>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	e038      	b.n	800604e <EXTI_Callback+0xbe>
			Mode_key++;
 8005fdc:	4b20      	ldr	r3, [pc, #128]	; (8006060 <EXTI_Callback+0xd0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <EXTI_Callback+0xd0>)
 8005fe4:	6013      	str	r3, [r2, #0]
}
 8005fe6:	e032      	b.n	800604e <EXTI_Callback+0xbe>
	else if(GPIO_Pin == GPIO_PIN_1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d105      	bne.n	8005ffa <EXTI_Callback+0x6a>
		Up_key++;
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <EXTI_Callback+0xd4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <EXTI_Callback+0xd4>)
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	e029      	b.n	800604e <EXTI_Callback+0xbe>
	else if(GPIO_Pin == GPIO_PIN_2)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d105      	bne.n	800600c <EXTI_Callback+0x7c>
		Down_key++;
 8006000:	4b19      	ldr	r3, [pc, #100]	; (8006068 <EXTI_Callback+0xd8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a18      	ldr	r2, [pc, #96]	; (8006068 <EXTI_Callback+0xd8>)
 8006008:	6013      	str	r3, [r2, #0]
}
 800600a:	e020      	b.n	800604e <EXTI_Callback+0xbe>
	else if(GPIO_Pin == GPIO_PIN_3)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d10d      	bne.n	800602e <EXTI_Callback+0x9e>
		if(Start_key >= 1)
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <EXTI_Callback+0xdc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dd03      	ble.n	8006022 <EXTI_Callback+0x92>
			Start_key = 0;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <EXTI_Callback+0xdc>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	e015      	b.n	800604e <EXTI_Callback+0xbe>
			Start_key++;
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <EXTI_Callback+0xdc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	4a10      	ldr	r2, [pc, #64]	; (800606c <EXTI_Callback+0xdc>)
 800602a:	6013      	str	r3, [r2, #0]
}
 800602c:	e00f      	b.n	800604e <EXTI_Callback+0xbe>
	else if(GPIO_Pin == GPIO_PIN_4)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b10      	cmp	r3, #16
 8006032:	d10c      	bne.n	800604e <EXTI_Callback+0xbe>
		if(EmergencyStop_key >= 1)
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <EXTI_Callback+0xe0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dd03      	ble.n	8006044 <EXTI_Callback+0xb4>
			EmergencyStop_key = 0;
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <EXTI_Callback+0xe0>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	e004      	b.n	800604e <EXTI_Callback+0xbe>
			EmergencyStop_key++;
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <EXTI_Callback+0xe0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	4a09      	ldr	r2, [pc, #36]	; (8006070 <EXTI_Callback+0xe0>)
 800604c:	6013      	str	r3, [r2, #0]
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000268 	.word	0x20000268
 800605c:	40010800 	.word	0x40010800
 8006060:	20000208 	.word	0x20000208
 8006064:	2000020c 	.word	0x2000020c
 8006068:	20000210 	.word	0x20000210
 800606c:	20000214 	.word	0x20000214
 8006070:	20000218 	.word	0x20000218

08006074 <State_Menu>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void State_Menu(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af02      	add	r7, sp, #8
	// Reset variables (structure members, global variables)
	Reset_All_Variables();
 800607a:	f001 f929 	bl	80072d0 <Reset_All_Variables>

	TFT_Clear_Screen(&TFT1Handle);
 800607e:	4839      	ldr	r0, [pc, #228]	; (8006164 <State_Menu+0xf0>)
 8006080:	f7fe fca6 	bl	80049d0 <TFT_Clear_Screen>
	Delay_ms(200);
 8006084:	20c8      	movs	r0, #200	; 0xc8
 8006086:	f7fd fd8d 	bl	8003ba4 <Delay_ms>

	TFT_String(&TFT1Handle, 10, 10, White, Black, (uint8_t*)"Option : ");
 800608a:	4b37      	ldr	r3, [pc, #220]	; (8006168 <State_Menu+0xf4>)
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	2300      	movs	r3, #0
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006096:	220a      	movs	r2, #10
 8006098:	210a      	movs	r1, #10
 800609a:	4832      	ldr	r0, [pc, #200]	; (8006164 <State_Menu+0xf0>)
 800609c:	f7fe fdb9 	bl	8004c12 <TFT_String>
	Delay_ms(10);
 80060a0:	200a      	movs	r0, #10
 80060a2:	f7fd fd7f 	bl	8003ba4 <Delay_ms>

	Mode_key = 0;
 80060a6:	4b31      	ldr	r3, [pc, #196]	; (800616c <State_Menu+0xf8>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

	while(1)
	{
		switch (Mode_key)
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <State_Menu+0xf8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d847      	bhi.n	8006144 <State_Menu+0xd0>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <State_Menu+0x48>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006127 	.word	0x08006127
		{
			/* Option : Speed Mode */
			case 0 :
			{
				TFT_String(&TFT1Handle, 8, 20, White, Black, (uint8_t*)"      Speed Mode      ");
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <State_Menu+0xfc>)
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060d8:	2214      	movs	r2, #20
 80060da:	2108      	movs	r1, #8
 80060dc:	4821      	ldr	r0, [pc, #132]	; (8006164 <State_Menu+0xf0>)
 80060de:	f7fe fd98 	bl	8004c12 <TFT_String>
				State = STATE_SPEED;
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <State_Menu+0x100>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]

				break;
 80060e8:	e02d      	b.n	8006146 <State_Menu+0xd2>
			}

			/* Option : Position Mode */
			case 1 :
			{
				TFT_String(&TFT1Handle, 8, 20, White, Black, (uint8_t*)"     Position Mode    ");
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <State_Menu+0x104>)
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060f6:	2214      	movs	r2, #20
 80060f8:	2108      	movs	r1, #8
 80060fa:	481a      	ldr	r0, [pc, #104]	; (8006164 <State_Menu+0xf0>)
 80060fc:	f7fe fd89 	bl	8004c12 <TFT_String>
				State = STATE_POSITION;
 8006100:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <State_Menu+0x100>)
 8006102:	2202      	movs	r2, #2
 8006104:	701a      	strb	r2, [r3, #0]

				break;
 8006106:	e01e      	b.n	8006146 <State_Menu+0xd2>
			}

			/* Option : Position Tracking Mode */
			case 2 :
			{
				TFT_String(&TFT1Handle, 8, 20, White, Black, (uint8_t*)"Position Tracking Mode");
 8006108:	4b1c      	ldr	r3, [pc, #112]	; (800617c <State_Menu+0x108>)
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	2300      	movs	r3, #0
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006114:	2214      	movs	r2, #20
 8006116:	2108      	movs	r1, #8
 8006118:	4812      	ldr	r0, [pc, #72]	; (8006164 <State_Menu+0xf0>)
 800611a:	f7fe fd7a 	bl	8004c12 <TFT_String>
				State = STATE_POSITION_TRACKING;
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <State_Menu+0x100>)
 8006120:	2203      	movs	r2, #3
 8006122:	701a      	strb	r2, [r3, #0]

				break;
 8006124:	e00f      	b.n	8006146 <State_Menu+0xd2>
			}

			/* Option : End Mode */
			case 3 :
			{
				TFT_String(&TFT1Handle, 8, 20, White, Black, (uint8_t*)"        End Mode      ");
 8006126:	4b16      	ldr	r3, [pc, #88]	; (8006180 <State_Menu+0x10c>)
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006132:	2214      	movs	r2, #20
 8006134:	2108      	movs	r1, #8
 8006136:	480b      	ldr	r0, [pc, #44]	; (8006164 <State_Menu+0xf0>)
 8006138:	f7fe fd6b 	bl	8004c12 <TFT_String>
				State = STATE_END;
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <State_Menu+0x100>)
 800613e:	2204      	movs	r2, #4
 8006140:	701a      	strb	r2, [r3, #0]

				break;
 8006142:	e000      	b.n	8006146 <State_Menu+0xd2>
			}

			default :
			{
				break;
 8006144:	bf00      	nop
			}
		}

		Delay_ms(100);
 8006146:	2064      	movs	r0, #100	; 0x64
 8006148:	f7fd fd2c 	bl	8003ba4 <Delay_ms>

		if(Start_key >= 1)
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <State_Menu+0x110>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	ddab      	ble.n	80060ac <State_Menu+0x38>
		{
			Start_key = 0;
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <State_Menu+0x110>)
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
			break;
 800615a:	bf00      	nop
		}
	}
}
 800615c:	bf00      	nop
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	2000039c 	.word	0x2000039c
 8006168:	080097a8 	.word	0x080097a8
 800616c:	20000208 	.word	0x20000208
 8006170:	080097b4 	.word	0x080097b4
 8006174:	20000204 	.word	0x20000204
 8006178:	080097cc 	.word	0x080097cc
 800617c:	080097e4 	.word	0x080097e4
 8006180:	080097fc 	.word	0x080097fc
 8006184:	20000214 	.word	0x20000214

08006188 <State_Speed>:


void State_Speed(void)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b083      	sub	sp, #12
 800618c:	af02      	add	r7, sp, #8
	TFT_Clear_Screen(&TFT1Handle);
 800618e:	48ba      	ldr	r0, [pc, #744]	; (8006478 <State_Speed+0x2f0>)
 8006190:	f7fe fc1e 	bl	80049d0 <TFT_Clear_Screen>
	Delay_ms(100);
 8006194:	2064      	movs	r0, #100	; 0x64
 8006196:	f7fd fd05 	bl	8003ba4 <Delay_ms>
	Mode_key = FLAG_RESET;
 800619a:	4bb8      	ldr	r3, [pc, #736]	; (800647c <State_Speed+0x2f4>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

	Draw_axis(&TFT1Handle, State);
 80061a0:	4bb7      	ldr	r3, [pc, #732]	; (8006480 <State_Speed+0x2f8>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	48b4      	ldr	r0, [pc, #720]	; (8006478 <State_Speed+0x2f0>)
 80061a8:	f001 fa5a 	bl	8007660 <Draw_axis>
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 80061ac:	4bb5      	ldr	r3, [pc, #724]	; (8006484 <State_Speed+0x2fc>)
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b8:	2214      	movs	r2, #20
 80061ba:	2119      	movs	r1, #25
 80061bc:	48ae      	ldr	r0, [pc, #696]	; (8006478 <State_Speed+0x2f0>)
 80061be:	f7fe fd28 	bl	8004c12 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 80061c2:	4bb1      	ldr	r3, [pc, #708]	; (8006488 <State_Speed+0x300>)
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061ce:	2216      	movs	r2, #22
 80061d0:	2119      	movs	r1, #25
 80061d2:	48a9      	ldr	r0, [pc, #676]	; (8006478 <State_Speed+0x2f0>)
 80061d4:	f7fe fd1d 	bl	8004c12 <TFT_String>
	Delay_ms(100);
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	f7fd fce3 	bl	8003ba4 <Delay_ms>

	while(1)
	{
		// Display Reference Speed value
		TFT_xy(&TFT1Handle, 31, 20);
 80061de:	2214      	movs	r2, #20
 80061e0:	211f      	movs	r1, #31
 80061e2:	48a5      	ldr	r0, [pc, #660]	; (8006478 <State_Speed+0x2f0>)
 80061e4:	f7fe fc84 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefSpeed, 4, 1);
 80061e8:	4ba8      	ldr	r3, [pc, #672]	; (800648c <State_Speed+0x304>)
 80061ea:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80061ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	4621      	mov	r1, r4
 80061f6:	f7fa fc77 	bl	8000ae8 <__aeabi_d2f>
 80061fa:	4601      	mov	r1, r0
 80061fc:	2301      	movs	r3, #1
 80061fe:	2204      	movs	r2, #4
 8006200:	489d      	ldr	r0, [pc, #628]	; (8006478 <State_Speed+0x2f0>)
 8006202:	f7ff f9f3 	bl	80055ec <TFT_Signed_float>

		// Display Current Speed value
		TFT_xy(&TFT1Handle, 31, 22);
 8006206:	2216      	movs	r2, #22
 8006208:	211f      	movs	r1, #31
 800620a:	489b      	ldr	r0, [pc, #620]	; (8006478 <State_Speed+0x2f0>)
 800620c:	f7fe fc70 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurSpeed, 4, 1);
 8006210:	4b9e      	ldr	r3, [pc, #632]	; (800648c <State_Speed+0x304>)
 8006212:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8006216:	e9d4 3400 	ldrd	r3, r4, [r4]
 800621a:	4618      	mov	r0, r3
 800621c:	4621      	mov	r1, r4
 800621e:	f7fa fc63 	bl	8000ae8 <__aeabi_d2f>
 8006222:	4601      	mov	r1, r0
 8006224:	2301      	movs	r3, #1
 8006226:	2204      	movs	r2, #4
 8006228:	4893      	ldr	r0, [pc, #588]	; (8006478 <State_Speed+0x2f0>)
 800622a:	f7ff f9df 	bl	80055ec <TFT_Signed_float>


		if(GraphClear_flag == FLAG_SET)
 800622e:	4b98      	ldr	r3, [pc, #608]	; (8006490 <State_Speed+0x308>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d125      	bne.n	8006282 <State_Speed+0xfa>
		{
			// Erase Graph of Current Position
			Clear_Graph(&TFT1Handle);
 8006236:	4890      	ldr	r0, [pc, #576]	; (8006478 <State_Speed+0x2f0>)
 8006238:	f001 fc02 	bl	8007a40 <Clear_Graph>

			x = 0;
 800623c:	4b95      	ldr	r3, [pc, #596]	; (8006494 <State_Speed+0x30c>)
 800623e:	2200      	movs	r2, #0
 8006240:	801a      	strh	r2, [r3, #0]
			x_prv = 0;
 8006242:	4b95      	ldr	r3, [pc, #596]	; (8006498 <State_Speed+0x310>)
 8006244:	2200      	movs	r2, #0
 8006246:	801a      	strh	r2, [r3, #0]
			y_prv = 0;
 8006248:	4b94      	ldr	r3, [pc, #592]	; (800649c <State_Speed+0x314>)
 800624a:	2200      	movs	r2, #0
 800624c:	801a      	strh	r2, [r3, #0]

			GraphClear_flag = FLAG_RESET;
 800624e:	4b90      	ldr	r3, [pc, #576]	; (8006490 <State_Speed+0x308>)
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]

			TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8006254:	4b8b      	ldr	r3, [pc, #556]	; (8006484 <State_Speed+0x2fc>)
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	2300      	movs	r3, #0
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006260:	2214      	movs	r2, #20
 8006262:	2119      	movs	r1, #25
 8006264:	4884      	ldr	r0, [pc, #528]	; (8006478 <State_Speed+0x2f0>)
 8006266:	f7fe fcd4 	bl	8004c12 <TFT_String>
			TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 800626a:	4b87      	ldr	r3, [pc, #540]	; (8006488 <State_Speed+0x300>)
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006276:	2216      	movs	r2, #22
 8006278:	2119      	movs	r1, #25
 800627a:	487f      	ldr	r0, [pc, #508]	; (8006478 <State_Speed+0x2f0>)
 800627c:	f7fe fcc9 	bl	8004c12 <TFT_String>
 8006280:	e025      	b.n	80062ce <State_Speed+0x146>
		}
		else if(GraphDraw_flag == FLAG_SET)
 8006282:	4b87      	ldr	r3, [pc, #540]	; (80064a0 <State_Speed+0x318>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d121      	bne.n	80062ce <State_Speed+0x146>
		{
			// Draw Graph of Current Position
			TFT_Line(&TFT1Handle, 50+x_prv, 215-y_prv, 50+x, 215-y, Magenta);
 800628a:	4b83      	ldr	r3, [pc, #524]	; (8006498 <State_Speed+0x310>)
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	3332      	adds	r3, #50	; 0x32
 8006290:	b29b      	uxth	r3, r3
 8006292:	b219      	sxth	r1, r3
 8006294:	4b81      	ldr	r3, [pc, #516]	; (800649c <State_Speed+0x314>)
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 800629c:	b29b      	uxth	r3, r3
 800629e:	b218      	sxth	r0, r3
 80062a0:	4b7c      	ldr	r3, [pc, #496]	; (8006494 <State_Speed+0x30c>)
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	3332      	adds	r3, #50	; 0x32
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	b21c      	sxth	r4, r3
 80062aa:	4b7e      	ldr	r3, [pc, #504]	; (80064a4 <State_Speed+0x31c>)
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	b21b      	sxth	r3, r3
 80062b6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80062ba:	9201      	str	r2, [sp, #4]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	4623      	mov	r3, r4
 80062c0:	4602      	mov	r2, r0
 80062c2:	486d      	ldr	r0, [pc, #436]	; (8006478 <State_Speed+0x2f0>)
 80062c4:	f7ff fa3a 	bl	800573c <TFT_Line>
			GraphDraw_flag = FLAG_RESET;
 80062c8:	4b75      	ldr	r3, [pc, #468]	; (80064a0 <State_Speed+0x318>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
		}




		if(Start_key >= FLAG_SET)
 80062ce:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <State_Speed+0x320>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f340 8225 	ble.w	8006722 <State_Speed+0x59a>
		{
			Delay_ms(200);		// to Avoid Key chattering
 80062d8:	20c8      	movs	r0, #200	; 0xc8
 80062da:	f7fd fc63 	bl	8003ba4 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 80062de:	4b6b      	ldr	r3, [pc, #428]	; (800648c <State_Speed+0x304>)
 80062e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 81a7 	bne.w	8006638 <State_Speed+0x4b0>
			{
				Clear_Graph(&TFT1Handle);
 80062ea:	4863      	ldr	r0, [pc, #396]	; (8006478 <State_Speed+0x2f0>)
 80062ec:	f001 fba8 	bl	8007a40 <Clear_Graph>
				Delay_ms(10);
 80062f0:	200a      	movs	r0, #10
 80062f2:	f7fd fc57 	bl	8003ba4 <Delay_ms>
				Draw_axis(&TFT1Handle, State);
 80062f6:	4b62      	ldr	r3, [pc, #392]	; (8006480 <State_Speed+0x2f8>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	485e      	ldr	r0, [pc, #376]	; (8006478 <State_Speed+0x2f0>)
 80062fe:	f001 f9af 	bl	8007660 <Draw_axis>
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8006302:	4b60      	ldr	r3, [pc, #384]	; (8006484 <State_Speed+0x2fc>)
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800630e:	2214      	movs	r2, #20
 8006310:	2119      	movs	r1, #25
 8006312:	4859      	ldr	r0, [pc, #356]	; (8006478 <State_Speed+0x2f0>)
 8006314:	f7fe fc7d 	bl	8004c12 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006318:	4b5b      	ldr	r3, [pc, #364]	; (8006488 <State_Speed+0x300>)
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	2300      	movs	r3, #0
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006324:	2216      	movs	r2, #22
 8006326:	2119      	movs	r1, #25
 8006328:	4853      	ldr	r0, [pc, #332]	; (8006478 <State_Speed+0x2f0>)
 800632a:	f7fe fc72 	bl	8004c12 <TFT_String>

				// 1. Set Reference Speed
				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 500);
 800632e:	4a57      	ldr	r2, [pc, #348]	; (800648c <State_Speed+0x304>)
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	4c5d      	ldr	r4, [pc, #372]	; (80064ac <State_Speed+0x324>)
 8006336:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

				// Draw axis value
				TFT_Color(&TFT1Handle, Cyan, Black);
 800633a:	2200      	movs	r2, #0
 800633c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006340:	484d      	ldr	r0, [pc, #308]	; (8006478 <State_Speed+0x2f0>)
 8006342:	f7fe fbea 	bl	8004b1a <TFT_Color>
				TFT_xy(&TFT1Handle, 0, 1);
 8006346:	2201      	movs	r2, #1
 8006348:	2100      	movs	r1, #0
 800634a:	484b      	ldr	r0, [pc, #300]	; (8006478 <State_Speed+0x2f0>)
 800634c:	f7fe fbd0 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefSpeed * 4 / 3), 0, 5);
 8006350:	4b4e      	ldr	r3, [pc, #312]	; (800648c <State_Speed+0x304>)
 8006352:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	4b55      	ldr	r3, [pc, #340]	; (80064b0 <State_Speed+0x328>)
 800635c:	f7fa f8cc 	bl	80004f8 <__aeabi_dmul>
 8006360:	4603      	mov	r3, r0
 8006362:	460c      	mov	r4, r1
 8006364:	4618      	mov	r0, r3
 8006366:	4621      	mov	r1, r4
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <State_Speed+0x32c>)
 800636e:	f7fa f9ed 	bl	800074c <__aeabi_ddiv>
 8006372:	4603      	mov	r3, r0
 8006374:	460c      	mov	r4, r1
 8006376:	4618      	mov	r0, r3
 8006378:	4621      	mov	r1, r4
 800637a:	f7fa fb95 	bl	8000aa8 <__aeabi_d2uiz>
 800637e:	4601      	mov	r1, r0
 8006380:	2305      	movs	r3, #5
 8006382:	2200      	movs	r2, #0
 8006384:	483c      	ldr	r0, [pc, #240]	; (8006478 <State_Speed+0x2f0>)
 8006386:	f7ff f8d5 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 7);
 800638a:	2207      	movs	r2, #7
 800638c:	2100      	movs	r1, #0
 800638e:	483a      	ldr	r0, [pc, #232]	; (8006478 <State_Speed+0x2f0>)
 8006390:	f7fe fbae 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)BLDC1Handle.RefSpeed, 0, 5);
 8006394:	4b3d      	ldr	r3, [pc, #244]	; (800648c <State_Speed+0x304>)
 8006396:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800639a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800639e:	4618      	mov	r0, r3
 80063a0:	4621      	mov	r1, r4
 80063a2:	f7fa fb81 	bl	8000aa8 <__aeabi_d2uiz>
 80063a6:	4601      	mov	r1, r0
 80063a8:	2305      	movs	r3, #5
 80063aa:	2200      	movs	r2, #0
 80063ac:	4832      	ldr	r0, [pc, #200]	; (8006478 <State_Speed+0x2f0>)
 80063ae:	f7ff f8c1 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 13);
 80063b2:	220d      	movs	r2, #13
 80063b4:	2100      	movs	r1, #0
 80063b6:	4830      	ldr	r0, [pc, #192]	; (8006478 <State_Speed+0x2f0>)
 80063b8:	f7fe fb9a 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefSpeed * 2 / 3), 0, 5);
 80063bc:	4b33      	ldr	r3, [pc, #204]	; (800648c <State_Speed+0x304>)
 80063be:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	f7f9 fee1 	bl	800018c <__adddf3>
 80063ca:	4603      	mov	r3, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	4618      	mov	r0, r3
 80063d0:	4621      	mov	r1, r4
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	4b37      	ldr	r3, [pc, #220]	; (80064b4 <State_Speed+0x32c>)
 80063d8:	f7fa f9b8 	bl	800074c <__aeabi_ddiv>
 80063dc:	4603      	mov	r3, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	4618      	mov	r0, r3
 80063e2:	4621      	mov	r1, r4
 80063e4:	f7fa fb60 	bl	8000aa8 <__aeabi_d2uiz>
 80063e8:	4601      	mov	r1, r0
 80063ea:	2305      	movs	r3, #5
 80063ec:	2200      	movs	r2, #0
 80063ee:	4822      	ldr	r0, [pc, #136]	; (8006478 <State_Speed+0x2f0>)
 80063f0:	f7ff f8a0 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 20);
 80063f4:	2214      	movs	r2, #20
 80063f6:	2100      	movs	r1, #0
 80063f8:	481f      	ldr	r0, [pc, #124]	; (8006478 <State_Speed+0x2f0>)
 80063fa:	f7fe fb79 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefSpeed * 1 / 3), 0, 5);
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <State_Speed+0x304>)
 8006400:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <State_Speed+0x32c>)
 800640a:	f7fa f99f 	bl	800074c <__aeabi_ddiv>
 800640e:	4603      	mov	r3, r0
 8006410:	460c      	mov	r4, r1
 8006412:	4618      	mov	r0, r3
 8006414:	4621      	mov	r1, r4
 8006416:	f7fa fb47 	bl	8000aa8 <__aeabi_d2uiz>
 800641a:	4601      	mov	r1, r0
 800641c:	2305      	movs	r3, #5
 800641e:	2200      	movs	r2, #0
 8006420:	4815      	ldr	r0, [pc, #84]	; (8006478 <State_Speed+0x2f0>)
 8006422:	f7ff f887 	bl	8005534 <TFT_Unsigned_decimal>

				// 2. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 0.02, 8, 0);
 8006426:	4a19      	ldr	r2, [pc, #100]	; (800648c <State_Speed+0x304>)
 8006428:	a411      	add	r4, pc, #68	; (adr r4, 8006470 <State_Speed+0x2e8>)
 800642a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800642e:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8006432:	4a16      	ldr	r2, [pc, #88]	; (800648c <State_Speed+0x304>)
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	4c1f      	ldr	r4, [pc, #124]	; (80064b8 <State_Speed+0x330>)
 800643a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <State_Speed+0x304>)
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	f04f 0400 	mov.w	r4, #0
 8006448:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 3. Set Direction of Rotation
				if(BLDC1Handle.RefSpeed >= 0)			BLDC1Handle.RotationDir = CW;
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <State_Speed+0x304>)
 800644e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	f7fa fad3 	bl	8000a04 <__aeabi_dcmpge>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02b      	beq.n	80064bc <State_Speed+0x334>
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <State_Speed+0x304>)
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800646c:	e036      	b.n	80064dc <State_Speed+0x354>
 800646e:	bf00      	nop
 8006470:	47ae147b 	.word	0x47ae147b
 8006474:	3f947ae1 	.word	0x3f947ae1
 8006478:	2000039c 	.word	0x2000039c
 800647c:	20000208 	.word	0x20000208
 8006480:	20000204 	.word	0x20000204
 8006484:	08009814 	.word	0x08009814
 8006488:	0800981c 	.word	0x0800981c
 800648c:	20000268 	.word	0x20000268
 8006490:	20000225 	.word	0x20000225
 8006494:	2000021c 	.word	0x2000021c
 8006498:	20000220 	.word	0x20000220
 800649c:	20000222 	.word	0x20000222
 80064a0:	20000224 	.word	0x20000224
 80064a4:	2000021e 	.word	0x2000021e
 80064a8:	20000214 	.word	0x20000214
 80064ac:	407f4000 	.word	0x407f4000
 80064b0:	40100000 	.word	0x40100000
 80064b4:	40080000 	.word	0x40080000
 80064b8:	40200000 	.word	0x40200000
				else if(BLDC1Handle.RefSpeed < 0)		BLDC1Handle.RotationDir = CCW;
 80064bc:	4bab      	ldr	r3, [pc, #684]	; (800676c <State_Speed+0x5e4>)
 80064be:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	f7fa fa87 	bl	80009dc <__aeabi_dcmplt>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <State_Speed+0x354>
 80064d4:	4ba5      	ldr	r3, [pc, #660]	; (800676c <State_Speed+0x5e4>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 4. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 80064dc:	4ba4      	ldr	r3, [pc, #656]	; (8006770 <State_Speed+0x5e8>)
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	4ba2      	ldr	r3, [pc, #648]	; (800676c <State_Speed+0x5e4>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	4013      	ands	r3, r2
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	4ba0      	ldr	r3, [pc, #640]	; (800676c <State_Speed+0x5e4>)
 80064ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80064f0:	4b9e      	ldr	r3, [pc, #632]	; (800676c <State_Speed+0x5e4>)
 80064f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064f6:	3b01      	subs	r3, #1
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	f200 8086 	bhi.w	800660a <State_Speed+0x482>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <State_Speed+0x37c>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	080065e5 	.word	0x080065e5
 8006508:	08006545 	.word	0x08006545
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006595 	.word	0x08006595
 8006514:	080065bd 	.word	0x080065bd
 8006518:	0800656d 	.word	0x0800656d
 800651c:	4b93      	ldr	r3, [pc, #588]	; (800676c <State_Speed+0x5e4>)
 800651e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <State_Speed+0x3a8>
 8006526:	4b91      	ldr	r3, [pc, #580]	; (800676c <State_Speed+0x5e4>)
 8006528:	2202      	movs	r2, #2
 800652a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800652e:	e06c      	b.n	800660a <State_Speed+0x482>
 8006530:	4b8e      	ldr	r3, [pc, #568]	; (800676c <State_Speed+0x5e4>)
 8006532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006536:	2b01      	cmp	r3, #1
 8006538:	d167      	bne.n	800660a <State_Speed+0x482>
 800653a:	4b8c      	ldr	r3, [pc, #560]	; (800676c <State_Speed+0x5e4>)
 800653c:	2201      	movs	r2, #1
 800653e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006542:	e062      	b.n	800660a <State_Speed+0x482>
 8006544:	4b89      	ldr	r3, [pc, #548]	; (800676c <State_Speed+0x5e4>)
 8006546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <State_Speed+0x3d0>
 800654e:	4b87      	ldr	r3, [pc, #540]	; (800676c <State_Speed+0x5e4>)
 8006550:	2206      	movs	r2, #6
 8006552:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006556:	e058      	b.n	800660a <State_Speed+0x482>
 8006558:	4b84      	ldr	r3, [pc, #528]	; (800676c <State_Speed+0x5e4>)
 800655a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800655e:	2b01      	cmp	r3, #1
 8006560:	d153      	bne.n	800660a <State_Speed+0x482>
 8006562:	4b82      	ldr	r3, [pc, #520]	; (800676c <State_Speed+0x5e4>)
 8006564:	2203      	movs	r2, #3
 8006566:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800656a:	e04e      	b.n	800660a <State_Speed+0x482>
 800656c:	4b7f      	ldr	r3, [pc, #508]	; (800676c <State_Speed+0x5e4>)
 800656e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <State_Speed+0x3f8>
 8006576:	4b7d      	ldr	r3, [pc, #500]	; (800676c <State_Speed+0x5e4>)
 8006578:	2204      	movs	r2, #4
 800657a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800657e:	e044      	b.n	800660a <State_Speed+0x482>
 8006580:	4b7a      	ldr	r3, [pc, #488]	; (800676c <State_Speed+0x5e4>)
 8006582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006586:	2b01      	cmp	r3, #1
 8006588:	d13f      	bne.n	800660a <State_Speed+0x482>
 800658a:	4b78      	ldr	r3, [pc, #480]	; (800676c <State_Speed+0x5e4>)
 800658c:	2202      	movs	r2, #2
 800658e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006592:	e03a      	b.n	800660a <State_Speed+0x482>
 8006594:	4b75      	ldr	r3, [pc, #468]	; (800676c <State_Speed+0x5e4>)
 8006596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <State_Speed+0x420>
 800659e:	4b73      	ldr	r3, [pc, #460]	; (800676c <State_Speed+0x5e4>)
 80065a0:	2205      	movs	r2, #5
 80065a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80065a6:	e030      	b.n	800660a <State_Speed+0x482>
 80065a8:	4b70      	ldr	r3, [pc, #448]	; (800676c <State_Speed+0x5e4>)
 80065aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d12b      	bne.n	800660a <State_Speed+0x482>
 80065b2:	4b6e      	ldr	r3, [pc, #440]	; (800676c <State_Speed+0x5e4>)
 80065b4:	2206      	movs	r2, #6
 80065b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80065ba:	e026      	b.n	800660a <State_Speed+0x482>
 80065bc:	4b6b      	ldr	r3, [pc, #428]	; (800676c <State_Speed+0x5e4>)
 80065be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <State_Speed+0x448>
 80065c6:	4b69      	ldr	r3, [pc, #420]	; (800676c <State_Speed+0x5e4>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80065ce:	e01c      	b.n	800660a <State_Speed+0x482>
 80065d0:	4b66      	ldr	r3, [pc, #408]	; (800676c <State_Speed+0x5e4>)
 80065d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d117      	bne.n	800660a <State_Speed+0x482>
 80065da:	4b64      	ldr	r3, [pc, #400]	; (800676c <State_Speed+0x5e4>)
 80065dc:	2204      	movs	r2, #4
 80065de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80065e2:	e012      	b.n	800660a <State_Speed+0x482>
 80065e4:	4b61      	ldr	r3, [pc, #388]	; (800676c <State_Speed+0x5e4>)
 80065e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <State_Speed+0x470>
 80065ee:	4b5f      	ldr	r3, [pc, #380]	; (800676c <State_Speed+0x5e4>)
 80065f0:	2203      	movs	r2, #3
 80065f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80065f6:	e008      	b.n	800660a <State_Speed+0x482>
 80065f8:	4b5c      	ldr	r3, [pc, #368]	; (800676c <State_Speed+0x5e4>)
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d103      	bne.n	800660a <State_Speed+0x482>
 8006602:	4b5a      	ldr	r3, [pc, #360]	; (800676c <State_Speed+0x5e4>)
 8006604:	2205      	movs	r2, #5
 8006606:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800660a:	bf00      	nop

				// 5. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 800660c:	4857      	ldr	r0, [pc, #348]	; (800676c <State_Speed+0x5e4>)
 800660e:	f7fc fb5d 	bl	8002ccc <BLDC_BootstrapCap_Charge>

				// 6. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8006612:	2201      	movs	r2, #1
 8006614:	2108      	movs	r1, #8
 8006616:	2017      	movs	r0, #23
 8006618:	f7fd f922 	bl	8003860 <NVIC_IRQConfig>

				// 7. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);		// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 800661c:	4b55      	ldr	r3, [pc, #340]	; (8006774 <State_Speed+0x5ec>)
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	4a54      	ldr	r2, [pc, #336]	; (8006774 <State_Speed+0x5ec>)
 8006622:	f043 0320 	orr.w	r3, r3, #32
 8006626:	6113      	str	r3, [r2, #16]

				// 8. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 8006628:	4b50      	ldr	r3, [pc, #320]	; (800676c <State_Speed+0x5e4>)
 800662a:	2200      	movs	r2, #0
 800662c:	659a      	str	r2, [r3, #88]	; 0x58

				// 9. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_SPEED
				BLDC1Handle.MotorState = MOTOR_STATE_SPEED;
 800662e:	4b4f      	ldr	r3, [pc, #316]	; (800676c <State_Speed+0x5e4>)
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006636:	e071      	b.n	800671c <State_Speed+0x594>
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 8006638:	4b4c      	ldr	r3, [pc, #304]	; (800676c <State_Speed+0x5e4>)
 800663a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800663e:	2b01      	cmp	r3, #1
 8006640:	d16c      	bne.n	800671c <State_Speed+0x594>
			{
				// 1. Set Reference Speed to 0
				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 0);
 8006642:	4a4a      	ldr	r2, [pc, #296]	; (800676c <State_Speed+0x5e4>)
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	f04f 0400 	mov.w	r4, #0
 800664c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

				// 2. Wait until the Motor stops
				while( ((int16_t)BLDC1Handle.CurSpeed) != 0 )
 8006650:	e03d      	b.n	80066ce <State_Speed+0x546>
				{
					TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8006652:	4b49      	ldr	r3, [pc, #292]	; (8006778 <State_Speed+0x5f0>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800665e:	2214      	movs	r2, #20
 8006660:	2119      	movs	r1, #25
 8006662:	4846      	ldr	r0, [pc, #280]	; (800677c <State_Speed+0x5f4>)
 8006664:	f7fe fad5 	bl	8004c12 <TFT_String>
					TFT_xy(&TFT1Handle, 31, 20);
 8006668:	2214      	movs	r2, #20
 800666a:	211f      	movs	r1, #31
 800666c:	4843      	ldr	r0, [pc, #268]	; (800677c <State_Speed+0x5f4>)
 800666e:	f7fe fa3f 	bl	8004af0 <TFT_xy>
					TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefSpeed, 4, 1);
 8006672:	4b3e      	ldr	r3, [pc, #248]	; (800676c <State_Speed+0x5e4>)
 8006674:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8006678:	e9d4 3400 	ldrd	r3, r4, [r4]
 800667c:	4618      	mov	r0, r3
 800667e:	4621      	mov	r1, r4
 8006680:	f7fa fa32 	bl	8000ae8 <__aeabi_d2f>
 8006684:	4601      	mov	r1, r0
 8006686:	2301      	movs	r3, #1
 8006688:	2204      	movs	r2, #4
 800668a:	483c      	ldr	r0, [pc, #240]	; (800677c <State_Speed+0x5f4>)
 800668c:	f7fe ffae 	bl	80055ec <TFT_Signed_float>

					TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006690:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <State_Speed+0x5f8>)
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	2300      	movs	r3, #0
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800669c:	2216      	movs	r2, #22
 800669e:	2119      	movs	r1, #25
 80066a0:	4836      	ldr	r0, [pc, #216]	; (800677c <State_Speed+0x5f4>)
 80066a2:	f7fe fab6 	bl	8004c12 <TFT_String>
					TFT_xy(&TFT1Handle, 31, 22);
 80066a6:	2216      	movs	r2, #22
 80066a8:	211f      	movs	r1, #31
 80066aa:	4834      	ldr	r0, [pc, #208]	; (800677c <State_Speed+0x5f4>)
 80066ac:	f7fe fa20 	bl	8004af0 <TFT_xy>
					TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurSpeed, 4, 1);
 80066b0:	4b2e      	ldr	r3, [pc, #184]	; (800676c <State_Speed+0x5e4>)
 80066b2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80066b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	4621      	mov	r1, r4
 80066be:	f7fa fa13 	bl	8000ae8 <__aeabi_d2f>
 80066c2:	4601      	mov	r1, r0
 80066c4:	2301      	movs	r3, #1
 80066c6:	2204      	movs	r2, #4
 80066c8:	482c      	ldr	r0, [pc, #176]	; (800677c <State_Speed+0x5f4>)
 80066ca:	f7fe ff8f 	bl	80055ec <TFT_Signed_float>
				while( ((int16_t)BLDC1Handle.CurSpeed) != 0 )
 80066ce:	4b27      	ldr	r3, [pc, #156]	; (800676c <State_Speed+0x5e4>)
 80066d0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80066d4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80066d8:	4618      	mov	r0, r3
 80066da:	4621      	mov	r1, r4
 80066dc:	f7fa f9bc 	bl	8000a58 <__aeabi_d2iz>
 80066e0:	4603      	mov	r3, r0
 80066e2:	b21b      	sxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1b4      	bne.n	8006652 <State_Speed+0x4ca>
				}
				Delay_ms(100);
 80066e8:	2064      	movs	r0, #100	; 0x64
 80066ea:	f7fd fa5b 	bl	8003ba4 <Delay_ms>

				// 3. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 80066ee:	2200      	movs	r2, #0
 80066f0:	2108      	movs	r1, #8
 80066f2:	2017      	movs	r0, #23
 80066f4:	f7fd f8b4 	bl	8003860 <NVIC_IRQConfig>

				// 4. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <State_Speed+0x5e4>)
 80066fa:	6858      	ldr	r0, [r3, #4]
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <State_Speed+0x5e4>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	b29b      	uxth	r3, r3
 8006702:	2200      	movs	r2, #0
 8006704:	4619      	mov	r1, r3
 8006706:	f7fb fa9b 	bl	8001c40 <GPIO_WritePin>

				// 5. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 800670a:	4818      	ldr	r0, [pc, #96]	; (800676c <State_Speed+0x5e4>)
 800670c:	f001 fa64 	bl	8007bd8 <DisableTimerPwmChannel>

				// 6. Change MotorState from MOTOR_STATE_SPEED to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8006710:	4b16      	ldr	r3, [pc, #88]	; (800676c <State_Speed+0x5e4>)
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 7. Reset variables
				Reset_Speed_Variables();
 8006718:	f000 fe8c 	bl	8007434 <Reset_Speed_Variables>
			}

			Start_key = FLAG_RESET;
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <State_Speed+0x5fc>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_SPEED) && (Mode_key >= FLAG_SET) )
 8006722:	4b12      	ldr	r3, [pc, #72]	; (800676c <State_Speed+0x5e4>)
 8006724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006728:	2b01      	cmp	r3, #1
 800672a:	d107      	bne.n	800673c <State_Speed+0x5b4>
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <State_Speed+0x600>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd03      	ble.n	800673c <State_Speed+0x5b4>
		{
			Mode_key = FLAG_RESET;
 8006734:	4b14      	ldr	r3, [pc, #80]	; (8006788 <State_Speed+0x600>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e011      	b.n	8006760 <State_Speed+0x5d8>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <State_Speed+0x5e4>)
 800673e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006742:	2b00      	cmp	r3, #0
 8006744:	f47f ad4b 	bne.w	80061de <State_Speed+0x56>
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <State_Speed+0x600>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f77f ad46 	ble.w	80061de <State_Speed+0x56>
		{
			State = STATE_MENU;
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <State_Speed+0x604>)
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <State_Speed+0x600>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
			break;
 800675e:	e000      	b.n	8006762 <State_Speed+0x5da>
		TFT_xy(&TFT1Handle, 31, 20);
 8006760:	e53d      	b.n	80061de <State_Speed+0x56>
		}
	}
}
 8006762:	bf00      	nop
 8006764:	3704      	adds	r7, #4
 8006766:	46bd      	mov	sp, r7
 8006768:	bd90      	pop	{r4, r7, pc}
 800676a:	bf00      	nop
 800676c:	20000268 	.word	0x20000268
 8006770:	40011000 	.word	0x40011000
 8006774:	40010400 	.word	0x40010400
 8006778:	08009814 	.word	0x08009814
 800677c:	2000039c 	.word	0x2000039c
 8006780:	0800981c 	.word	0x0800981c
 8006784:	20000214 	.word	0x20000214
 8006788:	20000208 	.word	0x20000208
 800678c:	20000204 	.word	0x20000204

08006790 <State_Position>:


void State_Position(void)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b083      	sub	sp, #12
 8006794:	af02      	add	r7, sp, #8
	TFT_Clear_Screen(&TFT1Handle);
 8006796:	48bc      	ldr	r0, [pc, #752]	; (8006a88 <State_Position+0x2f8>)
 8006798:	f7fe f91a 	bl	80049d0 <TFT_Clear_Screen>
	Delay_ms(100);
 800679c:	2064      	movs	r0, #100	; 0x64
 800679e:	f7fd fa01 	bl	8003ba4 <Delay_ms>
	Mode_key = FLAG_RESET;
 80067a2:	4bba      	ldr	r3, [pc, #744]	; (8006a8c <State_Position+0x2fc>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]

	Draw_axis(&TFT1Handle, State);
 80067a8:	4bb9      	ldr	r3, [pc, #740]	; (8006a90 <State_Position+0x300>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	4619      	mov	r1, r3
 80067ae:	48b6      	ldr	r0, [pc, #728]	; (8006a88 <State_Position+0x2f8>)
 80067b0:	f000 ff56 	bl	8007660 <Draw_axis>
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 80067b4:	4bb7      	ldr	r3, [pc, #732]	; (8006a94 <State_Position+0x304>)
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	2300      	movs	r3, #0
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067c0:	2214      	movs	r2, #20
 80067c2:	2119      	movs	r1, #25
 80067c4:	48b0      	ldr	r0, [pc, #704]	; (8006a88 <State_Position+0x2f8>)
 80067c6:	f7fe fa24 	bl	8004c12 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 80067ca:	4bb3      	ldr	r3, [pc, #716]	; (8006a98 <State_Position+0x308>)
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d6:	2216      	movs	r2, #22
 80067d8:	2119      	movs	r1, #25
 80067da:	48ab      	ldr	r0, [pc, #684]	; (8006a88 <State_Position+0x2f8>)
 80067dc:	f7fe fa19 	bl	8004c12 <TFT_String>
	Delay_ms(100);
 80067e0:	2064      	movs	r0, #100	; 0x64
 80067e2:	f7fd f9df 	bl	8003ba4 <Delay_ms>


	while(1)
	{
		// Display Reference Position value
		TFT_xy(&TFT1Handle, 31, 20);
 80067e6:	2214      	movs	r2, #20
 80067e8:	211f      	movs	r1, #31
 80067ea:	48a7      	ldr	r0, [pc, #668]	; (8006a88 <State_Position+0x2f8>)
 80067ec:	f7fe f980 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefPosition, 5, 1);
 80067f0:	4baa      	ldr	r3, [pc, #680]	; (8006a9c <State_Position+0x30c>)
 80067f2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80067f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80067fa:	4618      	mov	r0, r3
 80067fc:	4621      	mov	r1, r4
 80067fe:	f7fa f973 	bl	8000ae8 <__aeabi_d2f>
 8006802:	4601      	mov	r1, r0
 8006804:	2301      	movs	r3, #1
 8006806:	2205      	movs	r2, #5
 8006808:	489f      	ldr	r0, [pc, #636]	; (8006a88 <State_Position+0x2f8>)
 800680a:	f7fe feef 	bl	80055ec <TFT_Signed_float>

		// Display Current Position value
		TFT_xy(&TFT1Handle, 31, 22);
 800680e:	2216      	movs	r2, #22
 8006810:	211f      	movs	r1, #31
 8006812:	489d      	ldr	r0, [pc, #628]	; (8006a88 <State_Position+0x2f8>)
 8006814:	f7fe f96c 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurPosition, 5, 1);
 8006818:	4ba0      	ldr	r3, [pc, #640]	; (8006a9c <State_Position+0x30c>)
 800681a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800681e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006822:	4618      	mov	r0, r3
 8006824:	4621      	mov	r1, r4
 8006826:	f7fa f95f 	bl	8000ae8 <__aeabi_d2f>
 800682a:	4601      	mov	r1, r0
 800682c:	2301      	movs	r3, #1
 800682e:	2205      	movs	r2, #5
 8006830:	4895      	ldr	r0, [pc, #596]	; (8006a88 <State_Position+0x2f8>)
 8006832:	f7fe fedb 	bl	80055ec <TFT_Signed_float>


		if(GraphClear_flag == FLAG_SET)
 8006836:	4b9a      	ldr	r3, [pc, #616]	; (8006aa0 <State_Position+0x310>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d125      	bne.n	800688a <State_Position+0xfa>
		{
			// Erase Graph of Current Position
			Clear_Graph(&TFT1Handle);
 800683e:	4892      	ldr	r0, [pc, #584]	; (8006a88 <State_Position+0x2f8>)
 8006840:	f001 f8fe 	bl	8007a40 <Clear_Graph>

			x = 0;
 8006844:	4b97      	ldr	r3, [pc, #604]	; (8006aa4 <State_Position+0x314>)
 8006846:	2200      	movs	r2, #0
 8006848:	801a      	strh	r2, [r3, #0]
			x_prv = 0;
 800684a:	4b97      	ldr	r3, [pc, #604]	; (8006aa8 <State_Position+0x318>)
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]
			y_prv = 0;
 8006850:	4b96      	ldr	r3, [pc, #600]	; (8006aac <State_Position+0x31c>)
 8006852:	2200      	movs	r2, #0
 8006854:	801a      	strh	r2, [r3, #0]

			GraphClear_flag = FLAG_RESET;
 8006856:	4b92      	ldr	r3, [pc, #584]	; (8006aa0 <State_Position+0x310>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]

			TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 800685c:	4b8d      	ldr	r3, [pc, #564]	; (8006a94 <State_Position+0x304>)
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	2300      	movs	r3, #0
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006868:	2214      	movs	r2, #20
 800686a:	2119      	movs	r1, #25
 800686c:	4886      	ldr	r0, [pc, #536]	; (8006a88 <State_Position+0x2f8>)
 800686e:	f7fe f9d0 	bl	8004c12 <TFT_String>
			TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006872:	4b89      	ldr	r3, [pc, #548]	; (8006a98 <State_Position+0x308>)
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	2300      	movs	r3, #0
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800687e:	2216      	movs	r2, #22
 8006880:	2119      	movs	r1, #25
 8006882:	4881      	ldr	r0, [pc, #516]	; (8006a88 <State_Position+0x2f8>)
 8006884:	f7fe f9c5 	bl	8004c12 <TFT_String>
 8006888:	e025      	b.n	80068d6 <State_Position+0x146>
		}
		else if(GraphDraw_flag == FLAG_SET)
 800688a:	4b89      	ldr	r3, [pc, #548]	; (8006ab0 <State_Position+0x320>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d121      	bne.n	80068d6 <State_Position+0x146>
		{
			// Draw Graph of Current Position
			TFT_Line(&TFT1Handle, 50+x_prv, 215-y_prv, 50+x, 215-y, Magenta);
 8006892:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <State_Position+0x318>)
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	3332      	adds	r3, #50	; 0x32
 8006898:	b29b      	uxth	r3, r3
 800689a:	b219      	sxth	r1, r3
 800689c:	4b83      	ldr	r3, [pc, #524]	; (8006aac <State_Position+0x31c>)
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	b218      	sxth	r0, r3
 80068a8:	4b7e      	ldr	r3, [pc, #504]	; (8006aa4 <State_Position+0x314>)
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	b21c      	sxth	r4, r3
 80068b2:	4b80      	ldr	r3, [pc, #512]	; (8006ab4 <State_Position+0x324>)
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	b21b      	sxth	r3, r3
 80068be:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80068c2:	9201      	str	r2, [sp, #4]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4623      	mov	r3, r4
 80068c8:	4602      	mov	r2, r0
 80068ca:	486f      	ldr	r0, [pc, #444]	; (8006a88 <State_Position+0x2f8>)
 80068cc:	f7fe ff36 	bl	800573c <TFT_Line>
			GraphDraw_flag = FLAG_RESET;
 80068d0:	4b77      	ldr	r3, [pc, #476]	; (8006ab0 <State_Position+0x320>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
		}



		if(Start_key >= FLAG_SET)
 80068d6:	4b78      	ldr	r3, [pc, #480]	; (8006ab8 <State_Position+0x328>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f340 81d1 	ble.w	8006c82 <State_Position+0x4f2>
		{
			Delay_ms(200);		// to Avoid Key chattering
 80068e0:	20c8      	movs	r0, #200	; 0xc8
 80068e2:	f7fd f95f 	bl	8003ba4 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 80068e6:	4b6d      	ldr	r3, [pc, #436]	; (8006a9c <State_Position+0x30c>)
 80068e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 81a9 	bne.w	8006c44 <State_Position+0x4b4>
			{
				Clear_Graph(&TFT1Handle);
 80068f2:	4865      	ldr	r0, [pc, #404]	; (8006a88 <State_Position+0x2f8>)
 80068f4:	f001 f8a4 	bl	8007a40 <Clear_Graph>
				Delay_ms(10);
 80068f8:	200a      	movs	r0, #10
 80068fa:	f7fd f953 	bl	8003ba4 <Delay_ms>
				Draw_axis(&TFT1Handle, State);
 80068fe:	4b64      	ldr	r3, [pc, #400]	; (8006a90 <State_Position+0x300>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	4860      	ldr	r0, [pc, #384]	; (8006a88 <State_Position+0x2f8>)
 8006906:	f000 feab 	bl	8007660 <Draw_axis>
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 800690a:	4b62      	ldr	r3, [pc, #392]	; (8006a94 <State_Position+0x304>)
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	2300      	movs	r3, #0
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006916:	2214      	movs	r2, #20
 8006918:	2119      	movs	r1, #25
 800691a:	485b      	ldr	r0, [pc, #364]	; (8006a88 <State_Position+0x2f8>)
 800691c:	f7fe f979 	bl	8004c12 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006920:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <State_Position+0x308>)
 8006922:	9301      	str	r3, [sp, #4]
 8006924:	2300      	movs	r3, #0
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800692c:	2216      	movs	r2, #22
 800692e:	2119      	movs	r1, #25
 8006930:	4855      	ldr	r0, [pc, #340]	; (8006a88 <State_Position+0x2f8>)
 8006932:	f7fe f96e 	bl	8004c12 <TFT_String>

				// 1. Set Reference Position and PID gain
				BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, 36000);
 8006936:	4a59      	ldr	r2, [pc, #356]	; (8006a9c <State_Position+0x30c>)
 8006938:	a44f      	add	r4, pc, #316	; (adr r4, 8006a78 <State_Position+0x2e8>)
 800693a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800693e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

				// Draw axis value
				TFT_Color(&TFT1Handle, Cyan, Black);
 8006942:	2200      	movs	r2, #0
 8006944:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006948:	484f      	ldr	r0, [pc, #316]	; (8006a88 <State_Position+0x2f8>)
 800694a:	f7fe f8e6 	bl	8004b1a <TFT_Color>
				TFT_xy(&TFT1Handle, 0, 1);
 800694e:	2201      	movs	r2, #1
 8006950:	2100      	movs	r1, #0
 8006952:	484d      	ldr	r0, [pc, #308]	; (8006a88 <State_Position+0x2f8>)
 8006954:	f7fe f8cc 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 4 / 3), 0, 5);
 8006958:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <State_Position+0x30c>)
 800695a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	4b56      	ldr	r3, [pc, #344]	; (8006abc <State_Position+0x32c>)
 8006964:	f7f9 fdc8 	bl	80004f8 <__aeabi_dmul>
 8006968:	4603      	mov	r3, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4618      	mov	r0, r3
 800696e:	4621      	mov	r1, r4
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	4b52      	ldr	r3, [pc, #328]	; (8006ac0 <State_Position+0x330>)
 8006976:	f7f9 fee9 	bl	800074c <__aeabi_ddiv>
 800697a:	4603      	mov	r3, r0
 800697c:	460c      	mov	r4, r1
 800697e:	4618      	mov	r0, r3
 8006980:	4621      	mov	r1, r4
 8006982:	f7fa f891 	bl	8000aa8 <__aeabi_d2uiz>
 8006986:	4601      	mov	r1, r0
 8006988:	2305      	movs	r3, #5
 800698a:	2200      	movs	r2, #0
 800698c:	483e      	ldr	r0, [pc, #248]	; (8006a88 <State_Position+0x2f8>)
 800698e:	f7fe fdd1 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 7);
 8006992:	2207      	movs	r2, #7
 8006994:	2100      	movs	r1, #0
 8006996:	483c      	ldr	r0, [pc, #240]	; (8006a88 <State_Position+0x2f8>)
 8006998:	f7fe f8aa 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)BLDC1Handle.RefPosition, 0, 5);
 800699c:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <State_Position+0x30c>)
 800699e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80069a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	4621      	mov	r1, r4
 80069aa:	f7fa f87d 	bl	8000aa8 <__aeabi_d2uiz>
 80069ae:	4601      	mov	r1, r0
 80069b0:	2305      	movs	r3, #5
 80069b2:	2200      	movs	r2, #0
 80069b4:	4834      	ldr	r0, [pc, #208]	; (8006a88 <State_Position+0x2f8>)
 80069b6:	f7fe fdbd 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 13);
 80069ba:	220d      	movs	r2, #13
 80069bc:	2100      	movs	r1, #0
 80069be:	4832      	ldr	r0, [pc, #200]	; (8006a88 <State_Position+0x2f8>)
 80069c0:	f7fe f896 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 2 / 3), 0, 5);
 80069c4:	4b35      	ldr	r3, [pc, #212]	; (8006a9c <State_Position+0x30c>)
 80069c6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	f7f9 fbdd 	bl	800018c <__adddf3>
 80069d2:	4603      	mov	r3, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	4618      	mov	r0, r3
 80069d8:	4621      	mov	r1, r4
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	4b38      	ldr	r3, [pc, #224]	; (8006ac0 <State_Position+0x330>)
 80069e0:	f7f9 feb4 	bl	800074c <__aeabi_ddiv>
 80069e4:	4603      	mov	r3, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4618      	mov	r0, r3
 80069ea:	4621      	mov	r1, r4
 80069ec:	f7fa f85c 	bl	8000aa8 <__aeabi_d2uiz>
 80069f0:	4601      	mov	r1, r0
 80069f2:	2305      	movs	r3, #5
 80069f4:	2200      	movs	r2, #0
 80069f6:	4824      	ldr	r0, [pc, #144]	; (8006a88 <State_Position+0x2f8>)
 80069f8:	f7fe fd9c 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 20);
 80069fc:	2214      	movs	r2, #20
 80069fe:	2100      	movs	r1, #0
 8006a00:	4821      	ldr	r0, [pc, #132]	; (8006a88 <State_Position+0x2f8>)
 8006a02:	f7fe f875 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 1 / 3), 0, 5);
 8006a06:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <State_Position+0x30c>)
 8006a08:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <State_Position+0x330>)
 8006a12:	f7f9 fe9b 	bl	800074c <__aeabi_ddiv>
 8006a16:	4603      	mov	r3, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f7fa f843 	bl	8000aa8 <__aeabi_d2uiz>
 8006a22:	4601      	mov	r1, r0
 8006a24:	2305      	movs	r3, #5
 8006a26:	2200      	movs	r2, #0
 8006a28:	4817      	ldr	r0, [pc, #92]	; (8006a88 <State_Position+0x2f8>)
 8006a2a:	f7fe fd83 	bl	8005534 <TFT_Unsigned_decimal>

				// 2. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 15, 0, 0.01);
 8006a2e:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <State_Position+0x30c>)
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	4c23      	ldr	r4, [pc, #140]	; (8006ac4 <State_Position+0x334>)
 8006a36:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8006a3a:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <State_Position+0x30c>)
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	f04f 0400 	mov.w	r4, #0
 8006a44:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8006a48:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <State_Position+0x30c>)
 8006a4a:	a40d      	add	r4, pc, #52	; (adr r4, 8006a80 <State_Position+0x2f0>)
 8006a4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006a50:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 3. Set Direction of Rotation
				if(BLDC1Handle.RefPosition >= 0)			BLDC1Handle.RotationDir = CW;
 8006a54:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <State_Position+0x30c>)
 8006a56:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	f7f9 ffcf 	bl	8000a04 <__aeabi_dcmpge>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d02d      	beq.n	8006ac8 <State_Position+0x338>
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <State_Position+0x30c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006a74:	e038      	b.n	8006ae8 <State_Position+0x358>
 8006a76:	bf00      	nop
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	40e19400 	.word	0x40e19400
 8006a80:	47ae147b 	.word	0x47ae147b
 8006a84:	3f847ae1 	.word	0x3f847ae1
 8006a88:	2000039c 	.word	0x2000039c
 8006a8c:	20000208 	.word	0x20000208
 8006a90:	20000204 	.word	0x20000204
 8006a94:	08009814 	.word	0x08009814
 8006a98:	0800981c 	.word	0x0800981c
 8006a9c:	20000268 	.word	0x20000268
 8006aa0:	20000225 	.word	0x20000225
 8006aa4:	2000021c 	.word	0x2000021c
 8006aa8:	20000220 	.word	0x20000220
 8006aac:	20000222 	.word	0x20000222
 8006ab0:	20000224 	.word	0x20000224
 8006ab4:	2000021e 	.word	0x2000021e
 8006ab8:	20000214 	.word	0x20000214
 8006abc:	40100000 	.word	0x40100000
 8006ac0:	40080000 	.word	0x40080000
 8006ac4:	402e0000 	.word	0x402e0000
				else if(BLDC1Handle.RefPosition < 0)		BLDC1Handle.RotationDir = CCW;
 8006ac8:	4b80      	ldr	r3, [pc, #512]	; (8006ccc <State_Position+0x53c>)
 8006aca:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	f7f9 ff81 	bl	80009dc <__aeabi_dcmplt>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <State_Position+0x358>
 8006ae0:	4b7a      	ldr	r3, [pc, #488]	; (8006ccc <State_Position+0x53c>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 4. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8006ae8:	4b79      	ldr	r3, [pc, #484]	; (8006cd0 <State_Position+0x540>)
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	4b77      	ldr	r3, [pc, #476]	; (8006ccc <State_Position+0x53c>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	4b75      	ldr	r3, [pc, #468]	; (8006ccc <State_Position+0x53c>)
 8006af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8006afc:	4b73      	ldr	r3, [pc, #460]	; (8006ccc <State_Position+0x53c>)
 8006afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	f200 8086 	bhi.w	8006c16 <State_Position+0x486>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <State_Position+0x380>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006bf1 	.word	0x08006bf1
 8006b14:	08006b51 	.word	0x08006b51
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006ba1 	.word	0x08006ba1
 8006b20:	08006bc9 	.word	0x08006bc9
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	4b68      	ldr	r3, [pc, #416]	; (8006ccc <State_Position+0x53c>)
 8006b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <State_Position+0x3ac>
 8006b32:	4b66      	ldr	r3, [pc, #408]	; (8006ccc <State_Position+0x53c>)
 8006b34:	2202      	movs	r2, #2
 8006b36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b3a:	e06c      	b.n	8006c16 <State_Position+0x486>
 8006b3c:	4b63      	ldr	r3, [pc, #396]	; (8006ccc <State_Position+0x53c>)
 8006b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d167      	bne.n	8006c16 <State_Position+0x486>
 8006b46:	4b61      	ldr	r3, [pc, #388]	; (8006ccc <State_Position+0x53c>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b4e:	e062      	b.n	8006c16 <State_Position+0x486>
 8006b50:	4b5e      	ldr	r3, [pc, #376]	; (8006ccc <State_Position+0x53c>)
 8006b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <State_Position+0x3d4>
 8006b5a:	4b5c      	ldr	r3, [pc, #368]	; (8006ccc <State_Position+0x53c>)
 8006b5c:	2206      	movs	r2, #6
 8006b5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b62:	e058      	b.n	8006c16 <State_Position+0x486>
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <State_Position+0x53c>)
 8006b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d153      	bne.n	8006c16 <State_Position+0x486>
 8006b6e:	4b57      	ldr	r3, [pc, #348]	; (8006ccc <State_Position+0x53c>)
 8006b70:	2203      	movs	r2, #3
 8006b72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b76:	e04e      	b.n	8006c16 <State_Position+0x486>
 8006b78:	4b54      	ldr	r3, [pc, #336]	; (8006ccc <State_Position+0x53c>)
 8006b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <State_Position+0x3fc>
 8006b82:	4b52      	ldr	r3, [pc, #328]	; (8006ccc <State_Position+0x53c>)
 8006b84:	2204      	movs	r2, #4
 8006b86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b8a:	e044      	b.n	8006c16 <State_Position+0x486>
 8006b8c:	4b4f      	ldr	r3, [pc, #316]	; (8006ccc <State_Position+0x53c>)
 8006b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d13f      	bne.n	8006c16 <State_Position+0x486>
 8006b96:	4b4d      	ldr	r3, [pc, #308]	; (8006ccc <State_Position+0x53c>)
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006b9e:	e03a      	b.n	8006c16 <State_Position+0x486>
 8006ba0:	4b4a      	ldr	r3, [pc, #296]	; (8006ccc <State_Position+0x53c>)
 8006ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <State_Position+0x424>
 8006baa:	4b48      	ldr	r3, [pc, #288]	; (8006ccc <State_Position+0x53c>)
 8006bac:	2205      	movs	r2, #5
 8006bae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006bb2:	e030      	b.n	8006c16 <State_Position+0x486>
 8006bb4:	4b45      	ldr	r3, [pc, #276]	; (8006ccc <State_Position+0x53c>)
 8006bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d12b      	bne.n	8006c16 <State_Position+0x486>
 8006bbe:	4b43      	ldr	r3, [pc, #268]	; (8006ccc <State_Position+0x53c>)
 8006bc0:	2206      	movs	r2, #6
 8006bc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006bc6:	e026      	b.n	8006c16 <State_Position+0x486>
 8006bc8:	4b40      	ldr	r3, [pc, #256]	; (8006ccc <State_Position+0x53c>)
 8006bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <State_Position+0x44c>
 8006bd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ccc <State_Position+0x53c>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006bda:	e01c      	b.n	8006c16 <State_Position+0x486>
 8006bdc:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <State_Position+0x53c>)
 8006bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d117      	bne.n	8006c16 <State_Position+0x486>
 8006be6:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <State_Position+0x53c>)
 8006be8:	2204      	movs	r2, #4
 8006bea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006bee:	e012      	b.n	8006c16 <State_Position+0x486>
 8006bf0:	4b36      	ldr	r3, [pc, #216]	; (8006ccc <State_Position+0x53c>)
 8006bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <State_Position+0x474>
 8006bfa:	4b34      	ldr	r3, [pc, #208]	; (8006ccc <State_Position+0x53c>)
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006c02:	e008      	b.n	8006c16 <State_Position+0x486>
 8006c04:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <State_Position+0x53c>)
 8006c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d103      	bne.n	8006c16 <State_Position+0x486>
 8006c0e:	4b2f      	ldr	r3, [pc, #188]	; (8006ccc <State_Position+0x53c>)
 8006c10:	2205      	movs	r2, #5
 8006c12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006c16:	bf00      	nop

				// 5. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8006c18:	482c      	ldr	r0, [pc, #176]	; (8006ccc <State_Position+0x53c>)
 8006c1a:	f7fc f857 	bl	8002ccc <BLDC_BootstrapCap_Charge>

				// 6. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8006c1e:	2201      	movs	r2, #1
 8006c20:	2108      	movs	r1, #8
 8006c22:	2017      	movs	r0, #23
 8006c24:	f7fc fe1c 	bl	8003860 <NVIC_IRQConfig>

				// 7. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);		// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 8006c28:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <State_Position+0x544>)
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	4a29      	ldr	r2, [pc, #164]	; (8006cd4 <State_Position+0x544>)
 8006c2e:	f043 0320 	orr.w	r3, r3, #32
 8006c32:	6113      	str	r3, [r2, #16]

				// 8. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 8006c34:	4b25      	ldr	r3, [pc, #148]	; (8006ccc <State_Position+0x53c>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	659a      	str	r2, [r3, #88]	; 0x58

				// 9. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION;
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <State_Position+0x53c>)
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006c42:	e01b      	b.n	8006c7c <State_Position+0x4ec>
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <State_Position+0x53c>)
 8006c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d116      	bne.n	8006c7c <State_Position+0x4ec>
			{
				// 1. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2108      	movs	r1, #8
 8006c52:	2017      	movs	r0, #23
 8006c54:	f7fc fe04 	bl	8003860 <NVIC_IRQConfig>

				// 2. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <State_Position+0x53c>)
 8006c5a:	6858      	ldr	r0, [r3, #4]
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <State_Position+0x53c>)
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fa ffeb 	bl	8001c40 <GPIO_WritePin>

				// 3. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8006c6a:	4818      	ldr	r0, [pc, #96]	; (8006ccc <State_Position+0x53c>)
 8006c6c:	f000 ffb4 	bl	8007bd8 <DisableTimerPwmChannel>

				// 4. Change MotorState from MOTOR_STATE_POSITION to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8006c70:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <State_Position+0x53c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 5. Reset variables
				Reset_Position_Variables();
 8006c78:	f000 fc52 	bl	8007520 <Reset_Position_Variables>
			}

			Start_key = FLAG_RESET;
 8006c7c:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <State_Position+0x548>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION) && (Mode_key >= FLAG_SET) )
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <State_Position+0x53c>)
 8006c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d107      	bne.n	8006c9c <State_Position+0x50c>
 8006c8c:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <State_Position+0x54c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd03      	ble.n	8006c9c <State_Position+0x50c>
		{
			Mode_key = FLAG_RESET;
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <State_Position+0x54c>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e011      	b.n	8006cc0 <State_Position+0x530>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <State_Position+0x53c>)
 8006c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f47f ad9f 	bne.w	80067e6 <State_Position+0x56>
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <State_Position+0x54c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f77f ad9a 	ble.w	80067e6 <State_Position+0x56>
		{
			State = STATE_MENU;
 8006cb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <State_Position+0x550>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 8006cb8:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <State_Position+0x54c>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
			break;
 8006cbe:	e000      	b.n	8006cc2 <State_Position+0x532>
		TFT_xy(&TFT1Handle, 31, 20);
 8006cc0:	e591      	b.n	80067e6 <State_Position+0x56>
		}
	}
}
 8006cc2:	bf00      	nop
 8006cc4:	3704      	adds	r7, #4
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000268 	.word	0x20000268
 8006cd0:	40011000 	.word	0x40011000
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	20000214 	.word	0x20000214
 8006cdc:	20000208 	.word	0x20000208
 8006ce0:	20000204 	.word	0x20000204
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <State_Position_Tracking>:


void State_Position_Tracking(void)
{
 8006ce8:	b590      	push	{r4, r7, lr}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af02      	add	r7, sp, #8
	TFT_Clear_Screen(&TFT1Handle);
 8006cee:	483d      	ldr	r0, [pc, #244]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006cf0:	f7fd fe6e 	bl	80049d0 <TFT_Clear_Screen>
	Delay_ms(100);
 8006cf4:	2064      	movs	r0, #100	; 0x64
 8006cf6:	f7fc ff55 	bl	8003ba4 <Delay_ms>
	Mode_key = FLAG_RESET;
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <State_Position_Tracking+0x100>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

	Draw_axis(&TFT1Handle, State);
 8006d00:	4b3a      	ldr	r3, [pc, #232]	; (8006dec <State_Position_Tracking+0x104>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	4837      	ldr	r0, [pc, #220]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d08:	f000 fcaa 	bl	8007660 <Draw_axis>
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 8006d0c:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <State_Position_Tracking+0x108>)
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d18:	2214      	movs	r2, #20
 8006d1a:	2119      	movs	r1, #25
 8006d1c:	4831      	ldr	r0, [pc, #196]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d1e:	f7fd ff78 	bl	8004c12 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006d22:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <State_Position_Tracking+0x10c>)
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	2300      	movs	r3, #0
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d2e:	2216      	movs	r2, #22
 8006d30:	2119      	movs	r1, #25
 8006d32:	482c      	ldr	r0, [pc, #176]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d34:	f7fd ff6d 	bl	8004c12 <TFT_String>
	Delay_ms(100);
 8006d38:	2064      	movs	r0, #100	; 0x64
 8006d3a:	f7fc ff33 	bl	8003ba4 <Delay_ms>

	while(1)
	{
		// Display Trajectory Current Position value
		TFT_xy(&TFT1Handle, 31, 20);
 8006d3e:	2214      	movs	r2, #20
 8006d40:	211f      	movs	r1, #31
 8006d42:	4828      	ldr	r0, [pc, #160]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d44:	f7fd fed4 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.TrjCurPosition, 5, 1);
 8006d48:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <State_Position_Tracking+0x110>)
 8006d4a:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8006d4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	4621      	mov	r1, r4
 8006d56:	f7f9 fec7 	bl	8000ae8 <__aeabi_d2f>
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	2205      	movs	r2, #5
 8006d60:	4820      	ldr	r0, [pc, #128]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d62:	f7fe fc43 	bl	80055ec <TFT_Signed_float>

		// Display Current Position value
		TFT_xy(&TFT1Handle, 31, 22);
 8006d66:	2216      	movs	r2, #22
 8006d68:	211f      	movs	r1, #31
 8006d6a:	481e      	ldr	r0, [pc, #120]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d6c:	f7fd fec0 	bl	8004af0 <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurPosition, 5, 1);
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <State_Position_Tracking+0x110>)
 8006d72:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8006d76:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	f7f9 feb3 	bl	8000ae8 <__aeabi_d2f>
 8006d82:	4601      	mov	r1, r0
 8006d84:	2301      	movs	r3, #1
 8006d86:	2205      	movs	r2, #5
 8006d88:	4816      	ldr	r0, [pc, #88]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d8a:	f7fe fc2f 	bl	80055ec <TFT_Signed_float>


		if(GraphClear_flag == FLAG_SET)
 8006d8e:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <State_Position_Tracking+0x114>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d13a      	bne.n	8006e0c <State_Position_Tracking+0x124>
		{
			// Erase Graph of Current Position
			Clear_Graph(&TFT1Handle);
 8006d96:	4813      	ldr	r0, [pc, #76]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006d98:	f000 fe52 	bl	8007a40 <Clear_Graph>

			x = 0;
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <State_Position_Tracking+0x118>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	801a      	strh	r2, [r3, #0]
			x_prv = 0;
 8006da2:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <State_Position_Tracking+0x11c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	801a      	strh	r2, [r3, #0]
			y_prv = 0;
 8006da8:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <State_Position_Tracking+0x120>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	801a      	strh	r2, [r3, #0]

			GraphClear_flag = FLAG_RESET;
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <State_Position_Tracking+0x114>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]

			TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <State_Position_Tracking+0x108>)
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dc0:	2214      	movs	r2, #20
 8006dc2:	2119      	movs	r1, #25
 8006dc4:	4807      	ldr	r0, [pc, #28]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006dc6:	f7fd ff24 	bl	8004c12 <TFT_String>
			TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <State_Position_Tracking+0x10c>)
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd6:	2216      	movs	r2, #22
 8006dd8:	2119      	movs	r1, #25
 8006dda:	4802      	ldr	r0, [pc, #8]	; (8006de4 <State_Position_Tracking+0xfc>)
 8006ddc:	f7fd ff19 	bl	8004c12 <TFT_String>
 8006de0:	e03a      	b.n	8006e58 <State_Position_Tracking+0x170>
 8006de2:	bf00      	nop
 8006de4:	2000039c 	.word	0x2000039c
 8006de8:	20000208 	.word	0x20000208
 8006dec:	20000204 	.word	0x20000204
 8006df0:	08009824 	.word	0x08009824
 8006df4:	0800981c 	.word	0x0800981c
 8006df8:	20000268 	.word	0x20000268
 8006dfc:	20000225 	.word	0x20000225
 8006e00:	2000021c 	.word	0x2000021c
 8006e04:	20000220 	.word	0x20000220
 8006e08:	20000222 	.word	0x20000222
		}
		else if(GraphDraw_flag == FLAG_SET)
 8006e0c:	4bbc      	ldr	r3, [pc, #752]	; (8007100 <State_Position_Tracking+0x418>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d121      	bne.n	8006e58 <State_Position_Tracking+0x170>
		{
			// Draw Graph of Current Position
			TFT_Line(&TFT1Handle, 50+x_prv, 215-y_prv, 50+x, 215-y, Magenta);
 8006e14:	4bbb      	ldr	r3, [pc, #748]	; (8007104 <State_Position_Tracking+0x41c>)
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	3332      	adds	r3, #50	; 0x32
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	b219      	sxth	r1, r3
 8006e1e:	4bba      	ldr	r3, [pc, #744]	; (8007108 <State_Position_Tracking+0x420>)
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	b218      	sxth	r0, r3
 8006e2a:	4bb8      	ldr	r3, [pc, #736]	; (800710c <State_Position_Tracking+0x424>)
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	3332      	adds	r3, #50	; 0x32
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	b21c      	sxth	r4, r3
 8006e34:	4bb6      	ldr	r3, [pc, #728]	; (8007110 <State_Position_Tracking+0x428>)
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8006e44:	9201      	str	r2, [sp, #4]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4623      	mov	r3, r4
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	48b1      	ldr	r0, [pc, #708]	; (8007114 <State_Position_Tracking+0x42c>)
 8006e4e:	f7fe fc75 	bl	800573c <TFT_Line>
			GraphDraw_flag = FLAG_RESET;
 8006e52:	4bab      	ldr	r3, [pc, #684]	; (8007100 <State_Position_Tracking+0x418>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
		}


		if(Start_key >= FLAG_SET)
 8006e58:	4baf      	ldr	r3, [pc, #700]	; (8007118 <State_Position_Tracking+0x430>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f340 81e0 	ble.w	8007222 <State_Position_Tracking+0x53a>
		{
			Delay_ms(200);		// to Avoid Key chattering
 8006e62:	20c8      	movs	r0, #200	; 0xc8
 8006e64:	f7fc fe9e 	bl	8003ba4 <Delay_ms>

			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8006e68:	4bac      	ldr	r3, [pc, #688]	; (800711c <State_Position_Tracking+0x434>)
 8006e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 81b8 	bne.w	80071e4 <State_Position_Tracking+0x4fc>
			{
				Clear_Graph(&TFT1Handle);
 8006e74:	48a7      	ldr	r0, [pc, #668]	; (8007114 <State_Position_Tracking+0x42c>)
 8006e76:	f000 fde3 	bl	8007a40 <Clear_Graph>
				Delay_ms(10);
 8006e7a:	200a      	movs	r0, #10
 8006e7c:	f7fc fe92 	bl	8003ba4 <Delay_ms>
				Draw_axis(&TFT1Handle, State);
 8006e80:	4ba7      	ldr	r3, [pc, #668]	; (8007120 <State_Position_Tracking+0x438>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	48a3      	ldr	r0, [pc, #652]	; (8007114 <State_Position_Tracking+0x42c>)
 8006e88:	f000 fbea 	bl	8007660 <Draw_axis>
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 8006e8c:	4ba5      	ldr	r3, [pc, #660]	; (8007124 <State_Position_Tracking+0x43c>)
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	2300      	movs	r3, #0
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e98:	2214      	movs	r2, #20
 8006e9a:	2119      	movs	r1, #25
 8006e9c:	489d      	ldr	r0, [pc, #628]	; (8007114 <State_Position_Tracking+0x42c>)
 8006e9e:	f7fd feb8 	bl	8004c12 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8006ea2:	4ba1      	ldr	r3, [pc, #644]	; (8007128 <State_Position_Tracking+0x440>)
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eae:	2216      	movs	r2, #22
 8006eb0:	2119      	movs	r1, #25
 8006eb2:	4898      	ldr	r0, [pc, #608]	; (8007114 <State_Position_Tracking+0x42c>)
 8006eb4:	f7fd fead 	bl	8004c12 <TFT_String>


				// 1. Set Reference Position and PID gain
				BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, 36000);
 8006eb8:	4a98      	ldr	r2, [pc, #608]	; (800711c <State_Position_Tracking+0x434>)
 8006eba:	a48d      	add	r4, pc, #564	; (adr r4, 80070f0 <State_Position_Tracking+0x408>)
 8006ebc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006ec0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
				BLDC1Handle.TrjRefMaxSpeed = 7500;
 8006ec4:	4a95      	ldr	r2, [pc, #596]	; (800711c <State_Position_Tracking+0x434>)
 8006ec6:	a48c      	add	r4, pc, #560	; (adr r4, 80070f8 <State_Position_Tracking+0x410>)
 8006ec8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006ecc:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
				BLDC1Handle.TrjRefAcceleration = 2000;
 8006ed0:	4a92      	ldr	r2, [pc, #584]	; (800711c <State_Position_Tracking+0x434>)
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	4c95      	ldr	r4, [pc, #596]	; (800712c <State_Position_Tracking+0x444>)
 8006ed8:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

				// Draw axis value
				TFT_Color(&TFT1Handle, Cyan, Black);
 8006edc:	2200      	movs	r2, #0
 8006ede:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006ee2:	488c      	ldr	r0, [pc, #560]	; (8007114 <State_Position_Tracking+0x42c>)
 8006ee4:	f7fd fe19 	bl	8004b1a <TFT_Color>
				TFT_xy(&TFT1Handle, 0, 1);
 8006ee8:	2201      	movs	r2, #1
 8006eea:	2100      	movs	r1, #0
 8006eec:	4889      	ldr	r0, [pc, #548]	; (8007114 <State_Position_Tracking+0x42c>)
 8006eee:	f7fd fdff 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 4 / 3), 0, 5);
 8006ef2:	4b8a      	ldr	r3, [pc, #552]	; (800711c <State_Position_Tracking+0x434>)
 8006ef4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	4b8c      	ldr	r3, [pc, #560]	; (8007130 <State_Position_Tracking+0x448>)
 8006efe:	f7f9 fafb 	bl	80004f8 <__aeabi_dmul>
 8006f02:	4603      	mov	r3, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	4618      	mov	r0, r3
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	4b89      	ldr	r3, [pc, #548]	; (8007134 <State_Position_Tracking+0x44c>)
 8006f10:	f7f9 fc1c 	bl	800074c <__aeabi_ddiv>
 8006f14:	4603      	mov	r3, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	4618      	mov	r0, r3
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f7f9 fdc4 	bl	8000aa8 <__aeabi_d2uiz>
 8006f20:	4601      	mov	r1, r0
 8006f22:	2305      	movs	r3, #5
 8006f24:	2200      	movs	r2, #0
 8006f26:	487b      	ldr	r0, [pc, #492]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f28:	f7fe fb04 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 7);
 8006f2c:	2207      	movs	r2, #7
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4878      	ldr	r0, [pc, #480]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f32:	f7fd fddd 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)BLDC1Handle.RefPosition, 0, 5);
 8006f36:	4b79      	ldr	r3, [pc, #484]	; (800711c <State_Position_Tracking+0x434>)
 8006f38:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8006f3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f40:	4618      	mov	r0, r3
 8006f42:	4621      	mov	r1, r4
 8006f44:	f7f9 fdb0 	bl	8000aa8 <__aeabi_d2uiz>
 8006f48:	4601      	mov	r1, r0
 8006f4a:	2305      	movs	r3, #5
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4871      	ldr	r0, [pc, #452]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f50:	f7fe faf0 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 13);
 8006f54:	220d      	movs	r2, #13
 8006f56:	2100      	movs	r1, #0
 8006f58:	486e      	ldr	r0, [pc, #440]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f5a:	f7fd fdc9 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 2 / 3), 0, 5);
 8006f5e:	4b6f      	ldr	r3, [pc, #444]	; (800711c <State_Position_Tracking+0x434>)
 8006f60:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	f7f9 f910 	bl	800018c <__adddf3>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4618      	mov	r0, r3
 8006f72:	4621      	mov	r1, r4
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	4b6e      	ldr	r3, [pc, #440]	; (8007134 <State_Position_Tracking+0x44c>)
 8006f7a:	f7f9 fbe7 	bl	800074c <__aeabi_ddiv>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	4618      	mov	r0, r3
 8006f84:	4621      	mov	r1, r4
 8006f86:	f7f9 fd8f 	bl	8000aa8 <__aeabi_d2uiz>
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	2305      	movs	r3, #5
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4860      	ldr	r0, [pc, #384]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f92:	f7fe facf 	bl	8005534 <TFT_Unsigned_decimal>
				TFT_xy(&TFT1Handle, 0, 20);
 8006f96:	2214      	movs	r2, #20
 8006f98:	2100      	movs	r1, #0
 8006f9a:	485e      	ldr	r0, [pc, #376]	; (8007114 <State_Position_Tracking+0x42c>)
 8006f9c:	f7fd fda8 	bl	8004af0 <TFT_xy>
				TFT_Unsigned_decimal(&TFT1Handle, (uint32_t)(BLDC1Handle.RefPosition * 1 / 3), 0, 5);
 8006fa0:	4b5e      	ldr	r3, [pc, #376]	; (800711c <State_Position_Tracking+0x434>)
 8006fa2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	4b62      	ldr	r3, [pc, #392]	; (8007134 <State_Position_Tracking+0x44c>)
 8006fac:	f7f9 fbce 	bl	800074c <__aeabi_ddiv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	f7f9 fd76 	bl	8000aa8 <__aeabi_d2uiz>
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	2305      	movs	r3, #5
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4854      	ldr	r0, [pc, #336]	; (8007114 <State_Position_Tracking+0x42c>)
 8006fc4:	f7fe fab6 	bl	8005534 <TFT_Unsigned_decimal>

				// 2. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 25, 4, 0);
 8006fc8:	4a54      	ldr	r2, [pc, #336]	; (800711c <State_Position_Tracking+0x434>)
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	4c5a      	ldr	r4, [pc, #360]	; (8007138 <State_Position_Tracking+0x450>)
 8006fd0:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8006fd4:	4a51      	ldr	r2, [pc, #324]	; (800711c <State_Position_Tracking+0x434>)
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	4c55      	ldr	r4, [pc, #340]	; (8007130 <State_Position_Tracking+0x448>)
 8006fdc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8006fe0:	4a4e      	ldr	r2, [pc, #312]	; (800711c <State_Position_Tracking+0x434>)
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	f04f 0400 	mov.w	r4, #0
 8006fea:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 3. Set Direction of Rotation
				if(BLDC1Handle.RefPosition >= 0)			BLDC1Handle.RotationDir = CW;
 8006fee:	4b4b      	ldr	r3, [pc, #300]	; (800711c <State_Position_Tracking+0x434>)
 8006ff0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	f7f9 fd02 	bl	8000a04 <__aeabi_dcmpge>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <State_Position_Tracking+0x328>
 8007006:	4b45      	ldr	r3, [pc, #276]	; (800711c <State_Position_Tracking+0x434>)
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800700e:	e00f      	b.n	8007030 <State_Position_Tracking+0x348>
				else if(BLDC1Handle.RefPosition < 0)		BLDC1Handle.RotationDir = CCW;
 8007010:	4b42      	ldr	r3, [pc, #264]	; (800711c <State_Position_Tracking+0x434>)
 8007012:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f7f9 fcdd 	bl	80009dc <__aeabi_dcmplt>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <State_Position_Tracking+0x348>
 8007028:	4b3c      	ldr	r3, [pc, #240]	; (800711c <State_Position_Tracking+0x434>)
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 4. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8007030:	4b42      	ldr	r3, [pc, #264]	; (800713c <State_Position_Tracking+0x454>)
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	4b39      	ldr	r3, [pc, #228]	; (800711c <State_Position_Tracking+0x434>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	4013      	ands	r3, r2
 800703a:	099b      	lsrs	r3, r3, #6
 800703c:	b29a      	uxth	r2, r3
 800703e:	4b37      	ldr	r3, [pc, #220]	; (800711c <State_Position_Tracking+0x434>)
 8007040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8007044:	4b35      	ldr	r3, [pc, #212]	; (800711c <State_Position_Tracking+0x434>)
 8007046:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800704a:	3b01      	subs	r3, #1
 800704c:	2b05      	cmp	r3, #5
 800704e:	f200 80b2 	bhi.w	80071b6 <State_Position_Tracking+0x4ce>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <State_Position_Tracking+0x370>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007191 	.word	0x08007191
 800705c:	0800709b 	.word	0x0800709b
 8007060:	08007071 	.word	0x08007071
 8007064:	08007141 	.word	0x08007141
 8007068:	08007169 	.word	0x08007169
 800706c:	080070c3 	.word	0x080070c3
 8007070:	4b2a      	ldr	r3, [pc, #168]	; (800711c <State_Position_Tracking+0x434>)
 8007072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <State_Position_Tracking+0x39c>
 800707a:	4b28      	ldr	r3, [pc, #160]	; (800711c <State_Position_Tracking+0x434>)
 800707c:	2202      	movs	r2, #2
 800707e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007082:	e098      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <State_Position_Tracking+0x434>)
 8007086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800708a:	2b01      	cmp	r3, #1
 800708c:	f040 8093 	bne.w	80071b6 <State_Position_Tracking+0x4ce>
 8007090:	4b22      	ldr	r3, [pc, #136]	; (800711c <State_Position_Tracking+0x434>)
 8007092:	2201      	movs	r2, #1
 8007094:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007098:	e08d      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 800709a:	4b20      	ldr	r3, [pc, #128]	; (800711c <State_Position_Tracking+0x434>)
 800709c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <State_Position_Tracking+0x3c6>
 80070a4:	4b1d      	ldr	r3, [pc, #116]	; (800711c <State_Position_Tracking+0x434>)
 80070a6:	2206      	movs	r2, #6
 80070a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80070ac:	e083      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 80070ae:	4b1b      	ldr	r3, [pc, #108]	; (800711c <State_Position_Tracking+0x434>)
 80070b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d17e      	bne.n	80071b6 <State_Position_Tracking+0x4ce>
 80070b8:	4b18      	ldr	r3, [pc, #96]	; (800711c <State_Position_Tracking+0x434>)
 80070ba:	2203      	movs	r2, #3
 80070bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80070c0:	e079      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <State_Position_Tracking+0x434>)
 80070c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <State_Position_Tracking+0x3ee>
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <State_Position_Tracking+0x434>)
 80070ce:	2204      	movs	r2, #4
 80070d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80070d4:	e06f      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <State_Position_Tracking+0x434>)
 80070d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d16a      	bne.n	80071b6 <State_Position_Tracking+0x4ce>
 80070e0:	4b0e      	ldr	r3, [pc, #56]	; (800711c <State_Position_Tracking+0x434>)
 80070e2:	2202      	movs	r2, #2
 80070e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80070e8:	e065      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w
 80070f0:	00000000 	.word	0x00000000
 80070f4:	40e19400 	.word	0x40e19400
 80070f8:	00000000 	.word	0x00000000
 80070fc:	40bd4c00 	.word	0x40bd4c00
 8007100:	20000224 	.word	0x20000224
 8007104:	20000220 	.word	0x20000220
 8007108:	20000222 	.word	0x20000222
 800710c:	2000021c 	.word	0x2000021c
 8007110:	2000021e 	.word	0x2000021e
 8007114:	2000039c 	.word	0x2000039c
 8007118:	20000214 	.word	0x20000214
 800711c:	20000268 	.word	0x20000268
 8007120:	20000204 	.word	0x20000204
 8007124:	08009824 	.word	0x08009824
 8007128:	0800981c 	.word	0x0800981c
 800712c:	409f4000 	.word	0x409f4000
 8007130:	40100000 	.word	0x40100000
 8007134:	40080000 	.word	0x40080000
 8007138:	40390000 	.word	0x40390000
 800713c:	40011000 	.word	0x40011000
 8007140:	4b4a      	ldr	r3, [pc, #296]	; (800726c <State_Position_Tracking+0x584>)
 8007142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <State_Position_Tracking+0x46c>
 800714a:	4b48      	ldr	r3, [pc, #288]	; (800726c <State_Position_Tracking+0x584>)
 800714c:	2205      	movs	r2, #5
 800714e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007152:	e030      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 8007154:	4b45      	ldr	r3, [pc, #276]	; (800726c <State_Position_Tracking+0x584>)
 8007156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800715a:	2b01      	cmp	r3, #1
 800715c:	d12b      	bne.n	80071b6 <State_Position_Tracking+0x4ce>
 800715e:	4b43      	ldr	r3, [pc, #268]	; (800726c <State_Position_Tracking+0x584>)
 8007160:	2206      	movs	r2, #6
 8007162:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007166:	e026      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 8007168:	4b40      	ldr	r3, [pc, #256]	; (800726c <State_Position_Tracking+0x584>)
 800716a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <State_Position_Tracking+0x494>
 8007172:	4b3e      	ldr	r3, [pc, #248]	; (800726c <State_Position_Tracking+0x584>)
 8007174:	2201      	movs	r2, #1
 8007176:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800717a:	e01c      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 800717c:	4b3b      	ldr	r3, [pc, #236]	; (800726c <State_Position_Tracking+0x584>)
 800717e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007182:	2b01      	cmp	r3, #1
 8007184:	d117      	bne.n	80071b6 <State_Position_Tracking+0x4ce>
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <State_Position_Tracking+0x584>)
 8007188:	2204      	movs	r2, #4
 800718a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800718e:	e012      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 8007190:	4b36      	ldr	r3, [pc, #216]	; (800726c <State_Position_Tracking+0x584>)
 8007192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <State_Position_Tracking+0x4bc>
 800719a:	4b34      	ldr	r3, [pc, #208]	; (800726c <State_Position_Tracking+0x584>)
 800719c:	2203      	movs	r2, #3
 800719e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80071a2:	e008      	b.n	80071b6 <State_Position_Tracking+0x4ce>
 80071a4:	4b31      	ldr	r3, [pc, #196]	; (800726c <State_Position_Tracking+0x584>)
 80071a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d103      	bne.n	80071b6 <State_Position_Tracking+0x4ce>
 80071ae:	4b2f      	ldr	r3, [pc, #188]	; (800726c <State_Position_Tracking+0x584>)
 80071b0:	2205      	movs	r2, #5
 80071b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80071b6:	bf00      	nop

				// 5. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 80071b8:	482c      	ldr	r0, [pc, #176]	; (800726c <State_Position_Tracking+0x584>)
 80071ba:	f7fb fd87 	bl	8002ccc <BLDC_BootstrapCap_Charge>

				// 6. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 80071be:	2201      	movs	r2, #1
 80071c0:	2108      	movs	r1, #8
 80071c2:	2017      	movs	r0, #23
 80071c4:	f7fc fb4c 	bl	8003860 <NVIC_IRQConfig>

				// 7. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);		// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 80071c8:	4b29      	ldr	r3, [pc, #164]	; (8007270 <State_Position_Tracking+0x588>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	4a28      	ldr	r2, [pc, #160]	; (8007270 <State_Position_Tracking+0x588>)
 80071ce:	f043 0320 	orr.w	r3, r3, #32
 80071d2:	6113      	str	r3, [r2, #16]

				// 8. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 80071d4:	4b25      	ldr	r3, [pc, #148]	; (800726c <State_Position_Tracking+0x584>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	659a      	str	r2, [r3, #88]	; 0x58

				// 9. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION_TRACKING
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION_TRACKING;
 80071da:	4b24      	ldr	r3, [pc, #144]	; (800726c <State_Position_Tracking+0x584>)
 80071dc:	2203      	movs	r2, #3
 80071de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80071e2:	e01b      	b.n	800721c <State_Position_Tracking+0x534>
			}

			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING)
 80071e4:	4b21      	ldr	r3, [pc, #132]	; (800726c <State_Position_Tracking+0x584>)
 80071e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d116      	bne.n	800721c <State_Position_Tracking+0x534>
			{
				// 1. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 80071ee:	2200      	movs	r2, #0
 80071f0:	2108      	movs	r1, #8
 80071f2:	2017      	movs	r0, #23
 80071f4:	f7fc fb34 	bl	8003860 <NVIC_IRQConfig>

				// 2. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <State_Position_Tracking+0x584>)
 80071fa:	6858      	ldr	r0, [r3, #4]
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <State_Position_Tracking+0x584>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	b29b      	uxth	r3, r3
 8007202:	2200      	movs	r2, #0
 8007204:	4619      	mov	r1, r3
 8007206:	f7fa fd1b 	bl	8001c40 <GPIO_WritePin>

				// 3. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 800720a:	4818      	ldr	r0, [pc, #96]	; (800726c <State_Position_Tracking+0x584>)
 800720c:	f000 fce4 	bl	8007bd8 <DisableTimerPwmChannel>

				// 4. Change MotorState from MOTOR_STATE_POSITION_TRACKING to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8007210:	4b16      	ldr	r3, [pc, #88]	; (800726c <State_Position_Tracking+0x584>)
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 5. Reset variables
				Reset_Position_Variables();
 8007218:	f000 f982 	bl	8007520 <Reset_Position_Variables>
			}

			Start_key = FLAG_RESET;
 800721c:	4b15      	ldr	r3, [pc, #84]	; (8007274 <State_Position_Tracking+0x58c>)
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING) && (Mode_key >= FLAG_SET) )
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <State_Position_Tracking+0x584>)
 8007224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007228:	2b03      	cmp	r3, #3
 800722a:	d107      	bne.n	800723c <State_Position_Tracking+0x554>
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <State_Position_Tracking+0x590>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	dd03      	ble.n	800723c <State_Position_Tracking+0x554>
		{
			Mode_key = FLAG_RESET;
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <State_Position_Tracking+0x590>)
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e011      	b.n	8007260 <State_Position_Tracking+0x578>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <State_Position_Tracking+0x584>)
 800723e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007242:	2b00      	cmp	r3, #0
 8007244:	f47f ad7b 	bne.w	8006d3e <State_Position_Tracking+0x56>
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <State_Position_Tracking+0x590>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f77f ad76 	ble.w	8006d3e <State_Position_Tracking+0x56>
		{
			State = STATE_MENU;
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <State_Position_Tracking+0x594>)
 8007254:	2200      	movs	r2, #0
 8007256:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 8007258:	4b07      	ldr	r3, [pc, #28]	; (8007278 <State_Position_Tracking+0x590>)
 800725a:	2200      	movs	r2, #0
 800725c:	601a      	str	r2, [r3, #0]
			break;
 800725e:	e000      	b.n	8007262 <State_Position_Tracking+0x57a>
		TFT_xy(&TFT1Handle, 31, 20);
 8007260:	e56d      	b.n	8006d3e <State_Position_Tracking+0x56>
		}
	}
}
 8007262:	bf00      	nop
 8007264:	3704      	adds	r7, #4
 8007266:	46bd      	mov	sp, r7
 8007268:	bd90      	pop	{r4, r7, pc}
 800726a:	bf00      	nop
 800726c:	20000268 	.word	0x20000268
 8007270:	40010400 	.word	0x40010400
 8007274:	20000214 	.word	0x20000214
 8007278:	20000208 	.word	0x20000208
 800727c:	20000204 	.word	0x20000204

08007280 <State_End>:


void State_End(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af02      	add	r7, sp, #8
	TFT_String(&TFT1Handle, 5, 15, White, Black, (uint8_t*)"End mode is selected");
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <State_End+0x40>)
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	2300      	movs	r3, #0
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007292:	220f      	movs	r2, #15
 8007294:	2105      	movs	r1, #5
 8007296:	480b      	ldr	r0, [pc, #44]	; (80072c4 <State_End+0x44>)
 8007298:	f7fd fcbb 	bl	8004c12 <TFT_String>
	Delay_ms(100);
 800729c:	2064      	movs	r0, #100	; 0x64
 800729e:	f7fc fc81 	bl	8003ba4 <Delay_ms>

	while(1)
	{
		if(Start_key >= 1)
 80072a2:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <State_End+0x48>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	ddfb      	ble.n	80072a2 <State_End+0x22>
		{
			State = STATE_MENU;
 80072aa:	4b08      	ldr	r3, [pc, #32]	; (80072cc <State_End+0x4c>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
			Start_key = 0;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <State_End+0x48>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
			break;
 80072b6:	bf00      	nop
		}
	}
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	0800982c 	.word	0x0800982c
 80072c4:	2000039c 	.word	0x2000039c
 80072c8:	20000214 	.word	0x20000214
 80072cc:	20000204 	.word	0x20000204

080072d0 <Reset_All_Variables>:


void Reset_All_Variables(void)
{
 80072d0:	b598      	push	{r3, r4, r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 80072d4:	4b51      	ldr	r3, [pc, #324]	; (800741c <Reset_All_Variables+0x14c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 80072dc:	4b4f      	ldr	r3, [pc, #316]	; (800741c <Reset_All_Variables+0x14c>)
 80072de:	2200      	movs	r2, #0
 80072e0:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 80072e2:	4b4e      	ldr	r3, [pc, #312]	; (800741c <Reset_All_Variables+0x14c>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 80072e8:	4a4c      	ldr	r2, [pc, #304]	; (800741c <Reset_All_Variables+0x14c>)
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	f04f 0400 	mov.w	r4, #0
 80072f2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 80072f6:	4a49      	ldr	r2, [pc, #292]	; (800741c <Reset_All_Variables+0x14c>)
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 8007304:	4a45      	ldr	r2, [pc, #276]	; (800741c <Reset_All_Variables+0x14c>)
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	f04f 0400 	mov.w	r4, #0
 800730e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 8007312:	4a42      	ldr	r2, [pc, #264]	; (800741c <Reset_All_Variables+0x14c>)
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	f04f 0400 	mov.w	r4, #0
 800731c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8007320:	4a3e      	ldr	r2, [pc, #248]	; (800741c <Reset_All_Variables+0x14c>)
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	f04f 0400 	mov.w	r4, #0
 800732a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	BLDC1Handle.TrjCurPosition = 0;
 800732e:	4a3b      	ldr	r2, [pc, #236]	; (800741c <Reset_All_Variables+0x14c>)
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	f04f 0400 	mov.w	r4, #0
 8007338:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 800733c:	4a37      	ldr	r2, [pc, #220]	; (800741c <Reset_All_Variables+0x14c>)
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	f04f 0400 	mov.w	r4, #0
 8007346:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 800734a:	4a34      	ldr	r2, [pc, #208]	; (800741c <Reset_All_Variables+0x14c>)
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	f04f 0400 	mov.w	r4, #0
 8007354:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8007358:	4a30      	ldr	r2, [pc, #192]	; (800741c <Reset_All_Variables+0x14c>)
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	f04f 0400 	mov.w	r4, #0
 8007362:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 8007366:	4a2d      	ldr	r2, [pc, #180]	; (800741c <Reset_All_Variables+0x14c>)
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	f04f 0400 	mov.w	r4, #0
 8007370:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	BLDC1Handle.Kp = 0;
 8007374:	4a29      	ldr	r2, [pc, #164]	; (800741c <Reset_All_Variables+0x14c>)
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	f04f 0400 	mov.w	r4, #0
 800737e:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 8007382:	4a26      	ldr	r2, [pc, #152]	; (800741c <Reset_All_Variables+0x14c>)
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	f04f 0400 	mov.w	r4, #0
 800738c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8007390:	4a22      	ldr	r2, [pc, #136]	; (800741c <Reset_All_Variables+0x14c>)
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	f04f 0400 	mov.w	r4, #0
 800739a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 800739e:	4a1f      	ldr	r2, [pc, #124]	; (800741c <Reset_All_Variables+0x14c>)
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	f04f 0400 	mov.w	r4, #0
 80073a8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <Reset_All_Variables+0x14c>)
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	f04f 0400 	mov.w	r4, #0
 80073b6:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80073ba:	4a18      	ldr	r2, [pc, #96]	; (800741c <Reset_All_Variables+0x14c>)
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	f04f 0400 	mov.w	r4, #0
 80073c4:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80073c8:	4a14      	ldr	r2, [pc, #80]	; (800741c <Reset_All_Variables+0x14c>)
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	f04f 0400 	mov.w	r4, #0
 80073d2:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 80073d6:	4a11      	ldr	r2, [pc, #68]	; (800741c <Reset_All_Variables+0x14c>)
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	f04f 0400 	mov.w	r4, #0
 80073e0:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80073e4:	4a0d      	ldr	r2, [pc, #52]	; (800741c <Reset_All_Variables+0x14c>)
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	f04f 0400 	mov.w	r4, #0
 80073ee:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	/* Graph variables */
	TFT_Color(&TFT1Handle, White, Black);
 80073f2:	2200      	movs	r2, #0
 80073f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <Reset_All_Variables+0x150>)
 80073fa:	f7fd fb8e 	bl	8004b1a <TFT_Color>
	x = 0;
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <Reset_All_Variables+0x154>)
 8007400:	2200      	movs	r2, #0
 8007402:	801a      	strh	r2, [r3, #0]
	y = 0;
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <Reset_All_Variables+0x158>)
 8007406:	2200      	movs	r2, #0
 8007408:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <Reset_All_Variables+0x15c>)
 800740c:	2200      	movs	r2, #0
 800740e:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <Reset_All_Variables+0x160>)
 8007412:	2200      	movs	r2, #0
 8007414:	801a      	strh	r2, [r3, #0]
}
 8007416:	bf00      	nop
 8007418:	bd98      	pop	{r3, r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	20000268 	.word	0x20000268
 8007420:	2000039c 	.word	0x2000039c
 8007424:	2000021c 	.word	0x2000021c
 8007428:	2000021e 	.word	0x2000021e
 800742c:	20000220 	.word	0x20000220
 8007430:	20000222 	.word	0x20000222

08007434 <Reset_Speed_Variables>:


void Reset_Speed_Variables(void)
{
 8007434:	b598      	push	{r3, r4, r7, lr}
 8007436:	af00      	add	r7, sp, #0
	BLDC1Handle.HallCount = 0;
 8007438:	4b33      	ldr	r3, [pc, #204]	; (8007508 <Reset_Speed_Variables+0xd4>)
 800743a:	2200      	movs	r2, #0
 800743c:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 800743e:	4b32      	ldr	r3, [pc, #200]	; (8007508 <Reset_Speed_Variables+0xd4>)
 8007440:	2200      	movs	r2, #0
 8007442:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8007444:	4a30      	ldr	r2, [pc, #192]	; (8007508 <Reset_Speed_Variables+0xd4>)
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	f04f 0400 	mov.w	r4, #0
 800744e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 8007452:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <Reset_Speed_Variables+0xd4>)
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	f04f 0400 	mov.w	r4, #0
 800745c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.Kp = 0;
 8007460:	4a29      	ldr	r2, [pc, #164]	; (8007508 <Reset_Speed_Variables+0xd4>)
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	f04f 0400 	mov.w	r4, #0
 800746a:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 800746e:	4a26      	ldr	r2, [pc, #152]	; (8007508 <Reset_Speed_Variables+0xd4>)
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	f04f 0400 	mov.w	r4, #0
 8007478:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 800747c:	4a22      	ldr	r2, [pc, #136]	; (8007508 <Reset_Speed_Variables+0xd4>)
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	f04f 0400 	mov.w	r4, #0
 8007486:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 800748a:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <Reset_Speed_Variables+0xd4>)
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	f04f 0400 	mov.w	r4, #0
 8007494:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8007498:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <Reset_Speed_Variables+0xd4>)
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	f04f 0400 	mov.w	r4, #0
 80074a2:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <Reset_Speed_Variables+0xd4>)
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	f04f 0400 	mov.w	r4, #0
 80074b0:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80074b4:	4a14      	ldr	r2, [pc, #80]	; (8007508 <Reset_Speed_Variables+0xd4>)
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	f04f 0400 	mov.w	r4, #0
 80074be:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 80074c2:	4a11      	ldr	r2, [pc, #68]	; (8007508 <Reset_Speed_Variables+0xd4>)
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	f04f 0400 	mov.w	r4, #0
 80074cc:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80074d0:	4a0d      	ldr	r2, [pc, #52]	; (8007508 <Reset_Speed_Variables+0xd4>)
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	f04f 0400 	mov.w	r4, #0
 80074da:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	/* Graph variables */
	TFT_Color(&TFT1Handle, White, Black);
 80074de:	2200      	movs	r2, #0
 80074e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80074e4:	4809      	ldr	r0, [pc, #36]	; (800750c <Reset_Speed_Variables+0xd8>)
 80074e6:	f7fd fb18 	bl	8004b1a <TFT_Color>
	x = 0;
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <Reset_Speed_Variables+0xdc>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	801a      	strh	r2, [r3, #0]
	y = 0;
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <Reset_Speed_Variables+0xe0>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 80074f6:	4b08      	ldr	r3, [pc, #32]	; (8007518 <Reset_Speed_Variables+0xe4>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <Reset_Speed_Variables+0xe8>)
 80074fe:	2200      	movs	r2, #0
 8007500:	801a      	strh	r2, [r3, #0]
}
 8007502:	bf00      	nop
 8007504:	bd98      	pop	{r3, r4, r7, pc}
 8007506:	bf00      	nop
 8007508:	20000268 	.word	0x20000268
 800750c:	2000039c 	.word	0x2000039c
 8007510:	2000021c 	.word	0x2000021c
 8007514:	2000021e 	.word	0x2000021e
 8007518:	20000220 	.word	0x20000220
 800751c:	20000222 	.word	0x20000222

08007520 <Reset_Position_Variables>:


void Reset_Position_Variables(void)
{
 8007520:	b598      	push	{r3, r4, r7, lr}
 8007522:	af00      	add	r7, sp, #0
	BLDC1Handle.HallCount = 0;
 8007524:	4b48      	ldr	r3, [pc, #288]	; (8007648 <Reset_Position_Variables+0x128>)
 8007526:	2200      	movs	r2, #0
 8007528:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 800752a:	4b47      	ldr	r3, [pc, #284]	; (8007648 <Reset_Position_Variables+0x128>)
 800752c:	2200      	movs	r2, #0
 800752e:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurPosition = 0;
 8007530:	4a45      	ldr	r2, [pc, #276]	; (8007648 <Reset_Position_Variables+0x128>)
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 800753e:	4a42      	ldr	r2, [pc, #264]	; (8007648 <Reset_Position_Variables+0x128>)
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	f04f 0400 	mov.w	r4, #0
 8007548:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 800754c:	4a3e      	ldr	r2, [pc, #248]	; (8007648 <Reset_Position_Variables+0x128>)
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	f04f 0400 	mov.w	r4, #0
 8007556:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	BLDC1Handle.TrjCurPosition = 0;
 800755a:	4a3b      	ldr	r2, [pc, #236]	; (8007648 <Reset_Position_Variables+0x128>)
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	f04f 0400 	mov.w	r4, #0
 8007564:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8007568:	4a37      	ldr	r2, [pc, #220]	; (8007648 <Reset_Position_Variables+0x128>)
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	f04f 0400 	mov.w	r4, #0
 8007572:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 8007576:	4a34      	ldr	r2, [pc, #208]	; (8007648 <Reset_Position_Variables+0x128>)
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	f04f 0400 	mov.w	r4, #0
 8007580:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8007584:	4a30      	ldr	r2, [pc, #192]	; (8007648 <Reset_Position_Variables+0x128>)
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	f04f 0400 	mov.w	r4, #0
 800758e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 8007592:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <Reset_Position_Variables+0x128>)
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	f04f 0400 	mov.w	r4, #0
 800759c:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	BLDC1Handle.Kp = 0;
 80075a0:	4a29      	ldr	r2, [pc, #164]	; (8007648 <Reset_Position_Variables+0x128>)
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	f04f 0400 	mov.w	r4, #0
 80075aa:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 80075ae:	4a26      	ldr	r2, [pc, #152]	; (8007648 <Reset_Position_Variables+0x128>)
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	f04f 0400 	mov.w	r4, #0
 80075b8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 80075bc:	4a22      	ldr	r2, [pc, #136]	; (8007648 <Reset_Position_Variables+0x128>)
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	f04f 0400 	mov.w	r4, #0
 80075c6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <Reset_Position_Variables+0x128>)
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	f04f 0400 	mov.w	r4, #0
 80075d4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <Reset_Position_Variables+0x128>)
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	f04f 0400 	mov.w	r4, #0
 80075e2:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80075e6:	4a18      	ldr	r2, [pc, #96]	; (8007648 <Reset_Position_Variables+0x128>)
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	f04f 0400 	mov.w	r4, #0
 80075f0:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80075f4:	4a14      	ldr	r2, [pc, #80]	; (8007648 <Reset_Position_Variables+0x128>)
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	f04f 0400 	mov.w	r4, #0
 80075fe:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 8007602:	4a11      	ldr	r2, [pc, #68]	; (8007648 <Reset_Position_Variables+0x128>)
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	f04f 0400 	mov.w	r4, #0
 800760c:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 8007610:	4a0d      	ldr	r2, [pc, #52]	; (8007648 <Reset_Position_Variables+0x128>)
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	f04f 0400 	mov.w	r4, #0
 800761a:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	/* Graph variables */
	TFT_Color(&TFT1Handle, White, Black);
 800761e:	2200      	movs	r2, #0
 8007620:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007624:	4809      	ldr	r0, [pc, #36]	; (800764c <Reset_Position_Variables+0x12c>)
 8007626:	f7fd fa78 	bl	8004b1a <TFT_Color>
	x = 0;
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <Reset_Position_Variables+0x130>)
 800762c:	2200      	movs	r2, #0
 800762e:	801a      	strh	r2, [r3, #0]
	y = 0;
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <Reset_Position_Variables+0x134>)
 8007632:	2200      	movs	r2, #0
 8007634:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 8007636:	4b08      	ldr	r3, [pc, #32]	; (8007658 <Reset_Position_Variables+0x138>)
 8007638:	2200      	movs	r2, #0
 800763a:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <Reset_Position_Variables+0x13c>)
 800763e:	2200      	movs	r2, #0
 8007640:	801a      	strh	r2, [r3, #0]
}
 8007642:	bf00      	nop
 8007644:	bd98      	pop	{r3, r4, r7, pc}
 8007646:	bf00      	nop
 8007648:	20000268 	.word	0x20000268
 800764c:	2000039c 	.word	0x2000039c
 8007650:	2000021c 	.word	0x2000021c
 8007654:	2000021e 	.word	0x2000021e
 8007658:	20000220 	.word	0x20000220
 800765c:	20000222 	.word	0x20000222

08007660 <Draw_axis>:


void Draw_axis(TFT_HandleTypeDef *pTFTHandle, uint8_t state)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af02      	add	r7, sp, #8
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
	// Draw X-axis
	TFT_Line(pTFTHandle, 50, 216, 310, 216, White);
 800766c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	23d8      	movs	r3, #216	; 0xd8
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	f44f 739b 	mov.w	r3, #310	; 0x136
 800767a:	22d8      	movs	r2, #216	; 0xd8
 800767c:	2132      	movs	r1, #50	; 0x32
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fe f85c 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 305, 211, 310, 211, White);
 8007684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	23d3      	movs	r3, #211	; 0xd3
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007692:	22d3      	movs	r2, #211	; 0xd3
 8007694:	f240 1131 	movw	r1, #305	; 0x131
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fe f84f 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 305, 221, 310, 216, White);
 800769e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	23d8      	movs	r3, #216	; 0xd8
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	f44f 739b 	mov.w	r3, #310	; 0x136
 80076ac:	22dd      	movs	r2, #221	; 0xdd
 80076ae:	f240 1131 	movw	r1, #305	; 0x131
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7fe f842 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 100, 216, 100, 220, White);
 80076b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	23dc      	movs	r3, #220	; 0xdc
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2364      	movs	r3, #100	; 0x64
 80076c4:	22d8      	movs	r2, #216	; 0xd8
 80076c6:	2164      	movs	r1, #100	; 0x64
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe f837 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 150, 216, 150, 220, White);
 80076ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	23dc      	movs	r3, #220	; 0xdc
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2396      	movs	r3, #150	; 0x96
 80076da:	22d8      	movs	r2, #216	; 0xd8
 80076dc:	2196      	movs	r1, #150	; 0x96
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fe f82c 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 200, 216, 200, 220, White);
 80076e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	23dc      	movs	r3, #220	; 0xdc
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	23c8      	movs	r3, #200	; 0xc8
 80076f0:	22d8      	movs	r2, #216	; 0xd8
 80076f2:	21c8      	movs	r1, #200	; 0xc8
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fe f821 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 250, 216, 250, 220, White);
 80076fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	23dc      	movs	r3, #220	; 0xdc
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	23fa      	movs	r3, #250	; 0xfa
 8007706:	22d8      	movs	r2, #216	; 0xd8
 8007708:	21fa      	movs	r1, #250	; 0xfa
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe f816 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 300, 216, 300, 220, White);
 8007710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	23dc      	movs	r3, #220	; 0xdc
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800771e:	22d8      	movs	r2, #216	; 0xd8
 8007720:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fe f809 	bl	800573c <TFT_Line>

	if(state == STATE_SPEED)
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d14f      	bne.n	80077d0 <Draw_axis+0x170>
	{
		TFT_String(pTFTHandle, 16, 0, White, Blue, (uint8_t *)"Speed Graph");
 8007730:	4bc0      	ldr	r3, [pc, #768]	; (8007a34 <Draw_axis+0x3d4>)
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	231f      	movs	r3, #31
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800773c:	2200      	movs	r2, #0
 800773e:	2110      	movs	r1, #16
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fd fa66 	bl	8004c12 <TFT_String>

		TFT_Color(pTFTHandle, Cyan, Black);
 8007746:	2200      	movs	r2, #0
 8007748:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fd f9e4 	bl	8004b1a <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');
 8007752:	2330      	movs	r3, #48	; 0x30
 8007754:	22de      	movs	r2, #222	; 0xde
 8007756:	2123      	movs	r1, #35	; 0x23
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fd fdf1 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 97, 222, '5');
 800775e:	2335      	movs	r3, #53	; 0x35
 8007760:	22de      	movs	r2, #222	; 0xde
 8007762:	2161      	movs	r1, #97	; 0x61
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7fd fdeb 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 143, 222, '1');
 800776a:	2331      	movs	r3, #49	; 0x31
 800776c:	22de      	movs	r2, #222	; 0xde
 800776e:	218f      	movs	r1, #143	; 0x8f
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fd fde5 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 151, 222, '0');
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	22de      	movs	r2, #222	; 0xde
 800777a:	2197      	movs	r1, #151	; 0x97
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fd fddf 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 193, 222, '1');
 8007782:	2331      	movs	r3, #49	; 0x31
 8007784:	22de      	movs	r2, #222	; 0xde
 8007786:	21c1      	movs	r1, #193	; 0xc1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fd fdd9 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 201, 222, '5');
 800778e:	2335      	movs	r3, #53	; 0x35
 8007790:	22de      	movs	r2, #222	; 0xde
 8007792:	21c9      	movs	r1, #201	; 0xc9
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fd fdd3 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 243, 222, '2');
 800779a:	2332      	movs	r3, #50	; 0x32
 800779c:	22de      	movs	r2, #222	; 0xde
 800779e:	21f3      	movs	r1, #243	; 0xf3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fd fdcd 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 251, 222, '0');
 80077a6:	2330      	movs	r3, #48	; 0x30
 80077a8:	22de      	movs	r2, #222	; 0xde
 80077aa:	21fb      	movs	r1, #251	; 0xfb
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fd fdc7 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 293, 222, '2');
 80077b2:	2332      	movs	r3, #50	; 0x32
 80077b4:	22de      	movs	r2, #222	; 0xde
 80077b6:	f240 1125 	movw	r1, #293	; 0x125
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fd fdc0 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 301, 222, '5');
 80077c0:	2335      	movs	r3, #53	; 0x35
 80077c2:	22de      	movs	r2, #222	; 0xde
 80077c4:	f240 112d 	movw	r1, #301	; 0x12d
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7fd fdb9 	bl	8005340 <TFT_English_pixel>
 80077ce:	e0c4      	b.n	800795a <Draw_axis+0x2fa>
	}
	else if(state == STATE_POSITION)
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d15f      	bne.n	8007896 <Draw_axis+0x236>
	{
		TFT_String(pTFTHandle, 14, 0, White, Blue, (uint8_t *)"Position Graph");
 80077d6:	4b98      	ldr	r3, [pc, #608]	; (8007a38 <Draw_axis+0x3d8>)
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	231f      	movs	r3, #31
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077e2:	2200      	movs	r2, #0
 80077e4:	210e      	movs	r1, #14
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fd fa13 	bl	8004c12 <TFT_String>

		TFT_Color(pTFTHandle, Cyan, Black);
 80077ec:	2200      	movs	r2, #0
 80077ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fd f991 	bl	8004b1a <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');
 80077f8:	2330      	movs	r3, #48	; 0x30
 80077fa:	22de      	movs	r2, #222	; 0xde
 80077fc:	2123      	movs	r1, #35	; 0x23
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fd fd9e 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 89, 222, '0');
 8007804:	2330      	movs	r3, #48	; 0x30
 8007806:	22de      	movs	r2, #222	; 0xde
 8007808:	2159      	movs	r1, #89	; 0x59
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fd fd98 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 97, 222, '.');
 8007810:	232e      	movs	r3, #46	; 0x2e
 8007812:	22de      	movs	r2, #222	; 0xde
 8007814:	2161      	movs	r1, #97	; 0x61
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fd fd92 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 105, 222, '6');
 800781c:	2336      	movs	r3, #54	; 0x36
 800781e:	22de      	movs	r2, #222	; 0xde
 8007820:	2169      	movs	r1, #105	; 0x69
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fd fd8c 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 139, 222, '1');
 8007828:	2331      	movs	r3, #49	; 0x31
 800782a:	22de      	movs	r2, #222	; 0xde
 800782c:	218b      	movs	r1, #139	; 0x8b
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fd fd86 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 147, 222, '.');
 8007834:	232e      	movs	r3, #46	; 0x2e
 8007836:	22de      	movs	r2, #222	; 0xde
 8007838:	2193      	movs	r1, #147	; 0x93
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fd fd80 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 155, 222, '2');
 8007840:	2332      	movs	r3, #50	; 0x32
 8007842:	22de      	movs	r2, #222	; 0xde
 8007844:	219b      	movs	r1, #155	; 0x9b
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fd fd7a 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 189, 222, '1');
 800784c:	2331      	movs	r3, #49	; 0x31
 800784e:	22de      	movs	r2, #222	; 0xde
 8007850:	21bd      	movs	r1, #189	; 0xbd
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fd fd74 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 197, 222, '.');
 8007858:	232e      	movs	r3, #46	; 0x2e
 800785a:	22de      	movs	r2, #222	; 0xde
 800785c:	21c5      	movs	r1, #197	; 0xc5
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fd fd6e 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 206, 222, '9');
 8007864:	2339      	movs	r3, #57	; 0x39
 8007866:	22de      	movs	r2, #222	; 0xde
 8007868:	21ce      	movs	r1, #206	; 0xce
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fd fd68 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 239, 222, '2');
 8007870:	2332      	movs	r3, #50	; 0x32
 8007872:	22de      	movs	r2, #222	; 0xde
 8007874:	21ef      	movs	r1, #239	; 0xef
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fd fd62 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 247, 222, '.');
 800787c:	232e      	movs	r3, #46	; 0x2e
 800787e:	22de      	movs	r2, #222	; 0xde
 8007880:	21f7      	movs	r1, #247	; 0xf7
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fd fd5c 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 255, 222, '5');
 8007888:	2335      	movs	r3, #53	; 0x35
 800788a:	22de      	movs	r2, #222	; 0xde
 800788c:	21ff      	movs	r1, #255	; 0xff
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7fd fd56 	bl	8005340 <TFT_English_pixel>
 8007894:	e061      	b.n	800795a <Draw_axis+0x2fa>
	}
	else if(state == STATE_POSITION_TRACKING)
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d15e      	bne.n	800795a <Draw_axis+0x2fa>
	{
		TFT_String(pTFTHandle, 10, 0, White, Blue, (uint8_t *)"Position Tracking Graph");
 800789c:	4b67      	ldr	r3, [pc, #412]	; (8007a3c <Draw_axis+0x3dc>)
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	231f      	movs	r3, #31
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078a8:	2200      	movs	r2, #0
 80078aa:	210a      	movs	r1, #10
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fd f9b0 	bl	8004c12 <TFT_String>

		TFT_Color(pTFTHandle, Cyan, Black);
 80078b2:	2200      	movs	r2, #0
 80078b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fd f92e 	bl	8004b1a <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');
 80078be:	2330      	movs	r3, #48	; 0x30
 80078c0:	22de      	movs	r2, #222	; 0xde
 80078c2:	2123      	movs	r1, #35	; 0x23
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fd fd3b 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 89, 222, '0');
 80078ca:	2330      	movs	r3, #48	; 0x30
 80078cc:	22de      	movs	r2, #222	; 0xde
 80078ce:	2159      	movs	r1, #89	; 0x59
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fd fd35 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 97, 222, '.');
 80078d6:	232e      	movs	r3, #46	; 0x2e
 80078d8:	22de      	movs	r2, #222	; 0xde
 80078da:	2161      	movs	r1, #97	; 0x61
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fd fd2f 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 105, 222, '6');
 80078e2:	2336      	movs	r3, #54	; 0x36
 80078e4:	22de      	movs	r2, #222	; 0xde
 80078e6:	2169      	movs	r1, #105	; 0x69
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7fd fd29 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 139, 222, '1');
 80078ee:	2331      	movs	r3, #49	; 0x31
 80078f0:	22de      	movs	r2, #222	; 0xde
 80078f2:	218b      	movs	r1, #139	; 0x8b
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fd fd23 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 147, 222, '.');
 80078fa:	232e      	movs	r3, #46	; 0x2e
 80078fc:	22de      	movs	r2, #222	; 0xde
 80078fe:	2193      	movs	r1, #147	; 0x93
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fd fd1d 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 155, 222, '2');
 8007906:	2332      	movs	r3, #50	; 0x32
 8007908:	22de      	movs	r2, #222	; 0xde
 800790a:	219b      	movs	r1, #155	; 0x9b
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fd fd17 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 189, 222, '1');
 8007912:	2331      	movs	r3, #49	; 0x31
 8007914:	22de      	movs	r2, #222	; 0xde
 8007916:	21bd      	movs	r1, #189	; 0xbd
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fd fd11 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 197, 222, '.');
 800791e:	232e      	movs	r3, #46	; 0x2e
 8007920:	22de      	movs	r2, #222	; 0xde
 8007922:	21c5      	movs	r1, #197	; 0xc5
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fd fd0b 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 206, 222, '9');
 800792a:	2339      	movs	r3, #57	; 0x39
 800792c:	22de      	movs	r2, #222	; 0xde
 800792e:	21ce      	movs	r1, #206	; 0xce
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fd fd05 	bl	8005340 <TFT_English_pixel>

		TFT_English_pixel(pTFTHandle, 239, 222, '2');
 8007936:	2332      	movs	r3, #50	; 0x32
 8007938:	22de      	movs	r2, #222	; 0xde
 800793a:	21ef      	movs	r1, #239	; 0xef
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fd fcff 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 247, 222, '.');
 8007942:	232e      	movs	r3, #46	; 0x2e
 8007944:	22de      	movs	r2, #222	; 0xde
 8007946:	21f7      	movs	r1, #247	; 0xf7
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fd fcf9 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 255, 222, '5');
 800794e:	2335      	movs	r3, #53	; 0x35
 8007950:	22de      	movs	r2, #222	; 0xde
 8007952:	21ff      	movs	r1, #255	; 0xff
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fd fcf3 	bl	8005340 <TFT_English_pixel>
	//	TFT_English_pixel(pTFTHandle, 97, 222, '1');
	//	TFT_English_pixel(pTFTHandle, 147, 222, '2');
	//	TFT_English_pixel(pTFTHandle, 197, 222, '3');
	//	TFT_English_pixel(pTFTHandle, 247, 222, '4');
	//	TFT_English_pixel(pTFTHandle, 297, 222, '5');
		TFT_Color(pTFTHandle, Magenta, Black);
 800795a:	2200      	movs	r2, #0
 800795c:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fd f8da 	bl	8004b1a <TFT_Color>
		TFT_English_pixel(pTFTHandle, 288, 222, '[');
 8007966:	235b      	movs	r3, #91	; 0x5b
 8007968:	22de      	movs	r2, #222	; 0xde
 800796a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fd fce6 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 296, 222, 's');
 8007974:	2373      	movs	r3, #115	; 0x73
 8007976:	22de      	movs	r2, #222	; 0xde
 8007978:	f44f 7194 	mov.w	r1, #296	; 0x128
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fd fcdf 	bl	8005340 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 304, 222, ']');
 8007982:	235d      	movs	r3, #93	; 0x5d
 8007984:	22de      	movs	r2, #222	; 0xde
 8007986:	f44f 7198 	mov.w	r1, #304	; 0x130
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fd fcd8 	bl	8005340 <TFT_English_pixel>


	// Draw Y-axis
	TFT_Line(pTFTHandle, 49, 215, 49, 5, White);
 8007990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	2305      	movs	r3, #5
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2331      	movs	r3, #49	; 0x31
 800799c:	22d7      	movs	r2, #215	; 0xd7
 800799e:	2131      	movs	r1, #49	; 0x31
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fd fecb 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 44, 10, 49, 5, White);
 80079a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	2305      	movs	r3, #5
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2331      	movs	r3, #49	; 0x31
 80079b2:	220a      	movs	r2, #10
 80079b4:	212c      	movs	r1, #44	; 0x2c
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fd fec0 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 54, 10, 49, 5, White);
 80079bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	2305      	movs	r3, #5
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	2331      	movs	r3, #49	; 0x31
 80079c8:	220a      	movs	r2, #10
 80079ca:	2136      	movs	r1, #54	; 0x36
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fd feb5 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 45, 165, 49, 165, White);
 80079d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	23a5      	movs	r3, #165	; 0xa5
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	2331      	movs	r3, #49	; 0x31
 80079de:	22a5      	movs	r2, #165	; 0xa5
 80079e0:	212d      	movs	r1, #45	; 0x2d
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fd feaa 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 45, 115, 49, 115, White);
 80079e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	2373      	movs	r3, #115	; 0x73
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	2331      	movs	r3, #49	; 0x31
 80079f4:	2273      	movs	r2, #115	; 0x73
 80079f6:	212d      	movs	r1, #45	; 0x2d
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fd fe9f 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 45, 65, 49, 65, White);
 80079fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	2341      	movs	r3, #65	; 0x41
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	2331      	movs	r3, #49	; 0x31
 8007a0a:	2241      	movs	r2, #65	; 0x41
 8007a0c:	212d      	movs	r1, #45	; 0x2d
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fd fe94 	bl	800573c <TFT_Line>
	TFT_Line(pTFTHandle, 45, 15, 49, 15, White);
 8007a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	230f      	movs	r3, #15
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	2331      	movs	r3, #49	; 0x31
 8007a20:	220f      	movs	r2, #15
 8007a22:	212d      	movs	r1, #45	; 0x2d
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fd fe89 	bl	800573c <TFT_Line>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	08009844 	.word	0x08009844
 8007a38:	08009850 	.word	0x08009850
 8007a3c:	08009860 	.word	0x08009860

08007a40 <Clear_Graph>:

}


void Clear_Graph(TFT_HandleTypeDef *pTFTHandle)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	TFT_Write(pTFTHandle, 0x02, 50U >> 8);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fc ffa9 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 50U & 0x00FF);
 8007a52:	2232      	movs	r2, #50	; 0x32
 8007a54:	2103      	movs	r1, #3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fc ffa4 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 300U >> 8);
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	2104      	movs	r1, #4
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fc ff9f 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 300U & 0x00FF);
 8007a66:	222c      	movs	r2, #44	; 0x2c
 8007a68:	2105      	movs	r1, #5
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fc ff9a 	bl	80049a4 <TFT_Write>

	TFT_Write(pTFTHandle, 0x06, 0x0000);
 8007a70:	2200      	movs	r2, #0
 8007a72:	2106      	movs	r1, #6
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fc ff95 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 15U);
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	2107      	movs	r1, #7
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fc ff90 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8007a84:	2200      	movs	r2, #0
 8007a86:	2108      	movs	r1, #8
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7fc ff8b 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 215U);
 8007a8e:	22d7      	movs	r2, #215	; 0xd7
 8007a90:	2109      	movs	r1, #9
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fc ff86 	bl	80049a4 <TFT_Write>

	TFT_Command(pTFTHandle, 0x22);
 8007a98:	2122      	movs	r1, #34	; 0x22
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fc ff0d 	bl	80048ba <TFT_Command>

	for(uint16_t i = 0; i < 251; i++)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	81fb      	strh	r3, [r7, #14]
 8007aa4:	e00f      	b.n	8007ac6 <Clear_Graph+0x86>
	{
		for(uint16_t j = 0; j < 201; j++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81bb      	strh	r3, [r7, #12]
 8007aaa:	e006      	b.n	8007aba <Clear_Graph+0x7a>
		{
			TFT_Data(pTFTHandle, Black);
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fc ff3f 	bl	8004932 <TFT_Data>
		for(uint16_t j = 0; j < 201; j++)
 8007ab4:	89bb      	ldrh	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	81bb      	strh	r3, [r7, #12]
 8007aba:	89bb      	ldrh	r3, [r7, #12]
 8007abc:	2bc8      	cmp	r3, #200	; 0xc8
 8007abe:	d9f5      	bls.n	8007aac <Clear_Graph+0x6c>
	for(uint16_t i = 0; i < 251; i++)
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	81fb      	strh	r3, [r7, #14]
 8007ac6:	89fb      	ldrh	r3, [r7, #14]
 8007ac8:	2bfa      	cmp	r3, #250	; 0xfa
 8007aca:	d9ec      	bls.n	8007aa6 <Clear_Graph+0x66>
		}
	}

	/* Reset Content of Address registers to initial value  */
	TFT_Write(pTFTHandle, 0x02, 0x0000);
 8007acc:	2200      	movs	r2, #0
 8007ace:	2102      	movs	r1, #2
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fc ff67 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2103      	movs	r1, #3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fc ff62 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fc ff5d 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8007aea:	223f      	movs	r2, #63	; 0x3f
 8007aec:	2105      	movs	r1, #5
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fc ff58 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 8007af4:	2200      	movs	r2, #0
 8007af6:	2106      	movs	r1, #6
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7fc ff53 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2107      	movs	r1, #7
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fc ff4e 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2108      	movs	r1, #8
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fc ff49 	bl	80049a4 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 8007b12:	22ef      	movs	r2, #239	; 0xef
 8007b14:	2109      	movs	r1, #9
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fc ff44 	bl	80049a4 <TFT_Write>

	TFT_Command(pTFTHandle, 0x22);
 8007b1c:	2122      	movs	r1, #34	; 0x22
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fc fecb 	bl	80048ba <TFT_Command>
}
 8007b24:	bf00      	nop
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <MemsetHandleStructure>:


void MemsetHandleStructure(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8007b30:	2220      	movs	r2, #32
 8007b32:	2100      	movs	r1, #0
 8007b34:	4813      	ldr	r0, [pc, #76]	; (8007b84 <MemsetHandleStructure+0x58>)
 8007b36:	f000 f8e7 	bl	8007d08 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4812      	ldr	r0, [pc, #72]	; (8007b88 <MemsetHandleStructure+0x5c>)
 8007b40:	f000 f8e2 	bl	8007d08 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 8007b44:	22f8      	movs	r2, #248	; 0xf8
 8007b46:	2100      	movs	r1, #0
 8007b48:	4810      	ldr	r0, [pc, #64]	; (8007b8c <MemsetHandleStructure+0x60>)
 8007b4a:	f000 f8dd 	bl	8007d08 <memset>
	memset(&UART3Handle, 0, sizeof(UART3Handle));
 8007b4e:	223c      	movs	r2, #60	; 0x3c
 8007b50:	2100      	movs	r1, #0
 8007b52:	480f      	ldr	r0, [pc, #60]	; (8007b90 <MemsetHandleStructure+0x64>)
 8007b54:	f000 f8d8 	bl	8007d08 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8007b58:	2244      	movs	r2, #68	; 0x44
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	480d      	ldr	r0, [pc, #52]	; (8007b94 <MemsetHandleStructure+0x68>)
 8007b5e:	f000 f8d3 	bl	8007d08 <memset>
	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8007b62:	2240      	movs	r2, #64	; 0x40
 8007b64:	2100      	movs	r1, #0
 8007b66:	480c      	ldr	r0, [pc, #48]	; (8007b98 <MemsetHandleStructure+0x6c>)
 8007b68:	f000 f8ce 	bl	8007d08 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8007b6c:	2230      	movs	r2, #48	; 0x30
 8007b6e:	2100      	movs	r1, #0
 8007b70:	480a      	ldr	r0, [pc, #40]	; (8007b9c <MemsetHandleStructure+0x70>)
 8007b72:	f000 f8c9 	bl	8007d08 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8007b76:	2254      	movs	r2, #84	; 0x54
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4809      	ldr	r0, [pc, #36]	; (8007ba0 <MemsetHandleStructure+0x74>)
 8007b7c:	f000 f8c4 	bl	8007d08 <memset>
}
 8007b80:	bf00      	nop
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000494 	.word	0x20000494
 8007b88:	200003dc 	.word	0x200003dc
 8007b8c:	20000268 	.word	0x20000268
 8007b90:	20000360 	.word	0x20000360
 8007b94:	200003fc 	.word	0x200003fc
 8007b98:	2000039c 	.word	0x2000039c
 8007b9c:	20000238 	.word	0x20000238
 8007ba0:	20000440 	.word	0x20000440

08007ba4 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fa fcf4 	bl	80025a0 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fa fcee 	bl	80025a0 <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	2108      	movs	r1, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fa fce8 	bl	80025a0 <TIM_PWM_Start>
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a1a      	ldr	r2, [r3, #32]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0201 	bic.w	r2, r2, #1
 8007bf2:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0210 	bic.w	r2, r2, #16
 8007c06:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
	...

08007c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007c60:	480d      	ldr	r0, [pc, #52]	; (8007c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007c62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007c64:	480d      	ldr	r0, [pc, #52]	; (8007c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8007c66:	490e      	ldr	r1, [pc, #56]	; (8007ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007c68:	4a0e      	ldr	r2, [pc, #56]	; (8007ca4 <LoopForever+0xe>)
  movs r3, #0
 8007c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c6c:	e002      	b.n	8007c74 <LoopCopyDataInit>

08007c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c72:	3304      	adds	r3, #4

08007c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c78:	d3f9      	bcc.n	8007c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c7a:	4a0b      	ldr	r2, [pc, #44]	; (8007ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007c7c:	4c0b      	ldr	r4, [pc, #44]	; (8007cac <LoopForever+0x16>)
  movs r3, #0
 8007c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c80:	e001      	b.n	8007c86 <LoopFillZerobss>

08007c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c84:	3204      	adds	r2, #4

08007c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c88:	d3fb      	bcc.n	8007c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007c8a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8007c8e:	f000 f817 	bl	8007cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007c92:	f7fb ffdd 	bl	8003c50 <main>

08007c96 <LoopForever>:

LoopForever:
    b LoopForever
 8007c96:	e7fe      	b.n	8007c96 <LoopForever>
  ldr   r0, =_estack
 8007c98:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8007c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ca0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007ca4:	0800a2a8 	.word	0x0800a2a8
  ldr r2, =_sbss
 8007ca8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007cac:	200004b8 	.word	0x200004b8

08007cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007cb0:	e7fe      	b.n	8007cb0 <ADC1_2_IRQHandler>
	...

08007cb4 <__errno>:
 8007cb4:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <__errno+0x8>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20000008 	.word	0x20000008

08007cc0 <__libc_init_array>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	2500      	movs	r5, #0
 8007cc4:	4e0c      	ldr	r6, [pc, #48]	; (8007cf8 <__libc_init_array+0x38>)
 8007cc6:	4c0d      	ldr	r4, [pc, #52]	; (8007cfc <__libc_init_array+0x3c>)
 8007cc8:	1ba4      	subs	r4, r4, r6
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	42a5      	cmp	r5, r4
 8007cce:	d109      	bne.n	8007ce4 <__libc_init_array+0x24>
 8007cd0:	f001 fd3a 	bl	8009748 <_init>
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	4e0a      	ldr	r6, [pc, #40]	; (8007d00 <__libc_init_array+0x40>)
 8007cd8:	4c0a      	ldr	r4, [pc, #40]	; (8007d04 <__libc_init_array+0x44>)
 8007cda:	1ba4      	subs	r4, r4, r6
 8007cdc:	10a4      	asrs	r4, r4, #2
 8007cde:	42a5      	cmp	r5, r4
 8007ce0:	d105      	bne.n	8007cee <__libc_init_array+0x2e>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ce8:	4798      	blx	r3
 8007cea:	3501      	adds	r5, #1
 8007cec:	e7ee      	b.n	8007ccc <__libc_init_array+0xc>
 8007cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cf2:	4798      	blx	r3
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	e7f2      	b.n	8007cde <__libc_init_array+0x1e>
 8007cf8:	0800a2a0 	.word	0x0800a2a0
 8007cfc:	0800a2a0 	.word	0x0800a2a0
 8007d00:	0800a2a0 	.word	0x0800a2a0
 8007d04:	0800a2a4 	.word	0x0800a2a4

08007d08 <memset>:
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4402      	add	r2, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <__cvt>:
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1e:	461e      	mov	r6, r3
 8007d20:	bfbb      	ittet	lt
 8007d22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007d26:	461e      	movlt	r6, r3
 8007d28:	2300      	movge	r3, #0
 8007d2a:	232d      	movlt	r3, #45	; 0x2d
 8007d2c:	b088      	sub	sp, #32
 8007d2e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d30:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007d34:	f027 0720 	bic.w	r7, r7, #32
 8007d38:	2f46      	cmp	r7, #70	; 0x46
 8007d3a:	4614      	mov	r4, r2
 8007d3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007d3e:	700b      	strb	r3, [r1, #0]
 8007d40:	d004      	beq.n	8007d4c <__cvt+0x34>
 8007d42:	2f45      	cmp	r7, #69	; 0x45
 8007d44:	d100      	bne.n	8007d48 <__cvt+0x30>
 8007d46:	3501      	adds	r5, #1
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e000      	b.n	8007d4e <__cvt+0x36>
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	aa07      	add	r2, sp, #28
 8007d50:	9204      	str	r2, [sp, #16]
 8007d52:	aa06      	add	r2, sp, #24
 8007d54:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007d58:	e9cd 3500 	strd	r3, r5, [sp]
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4633      	mov	r3, r6
 8007d60:	f000 fba6 	bl	80084b0 <_dtoa_r>
 8007d64:	2f47      	cmp	r7, #71	; 0x47
 8007d66:	4680      	mov	r8, r0
 8007d68:	d102      	bne.n	8007d70 <__cvt+0x58>
 8007d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d6c:	07db      	lsls	r3, r3, #31
 8007d6e:	d526      	bpl.n	8007dbe <__cvt+0xa6>
 8007d70:	2f46      	cmp	r7, #70	; 0x46
 8007d72:	eb08 0905 	add.w	r9, r8, r5
 8007d76:	d111      	bne.n	8007d9c <__cvt+0x84>
 8007d78:	f898 3000 	ldrb.w	r3, [r8]
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d10a      	bne.n	8007d96 <__cvt+0x7e>
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	4620      	mov	r0, r4
 8007d86:	4631      	mov	r1, r6
 8007d88:	f7f8 fe1e 	bl	80009c8 <__aeabi_dcmpeq>
 8007d8c:	b918      	cbnz	r0, 8007d96 <__cvt+0x7e>
 8007d8e:	f1c5 0501 	rsb	r5, r5, #1
 8007d92:	f8ca 5000 	str.w	r5, [sl]
 8007d96:	f8da 3000 	ldr.w	r3, [sl]
 8007d9a:	4499      	add	r9, r3
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4620      	mov	r0, r4
 8007da2:	4631      	mov	r1, r6
 8007da4:	f7f8 fe10 	bl	80009c8 <__aeabi_dcmpeq>
 8007da8:	b938      	cbnz	r0, 8007dba <__cvt+0xa2>
 8007daa:	2230      	movs	r2, #48	; 0x30
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	454b      	cmp	r3, r9
 8007db0:	d205      	bcs.n	8007dbe <__cvt+0xa6>
 8007db2:	1c59      	adds	r1, r3, #1
 8007db4:	9107      	str	r1, [sp, #28]
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e7f8      	b.n	8007dac <__cvt+0x94>
 8007dba:	f8cd 901c 	str.w	r9, [sp, #28]
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	9b07      	ldr	r3, [sp, #28]
 8007dc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007dc4:	eba3 0308 	sub.w	r3, r3, r8
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	b008      	add	sp, #32
 8007dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007dd0 <__exponent>:
 8007dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dd2:	2900      	cmp	r1, #0
 8007dd4:	bfb4      	ite	lt
 8007dd6:	232d      	movlt	r3, #45	; 0x2d
 8007dd8:	232b      	movge	r3, #43	; 0x2b
 8007dda:	4604      	mov	r4, r0
 8007ddc:	bfb8      	it	lt
 8007dde:	4249      	neglt	r1, r1
 8007de0:	2909      	cmp	r1, #9
 8007de2:	f804 2b02 	strb.w	r2, [r4], #2
 8007de6:	7043      	strb	r3, [r0, #1]
 8007de8:	dd21      	ble.n	8007e2e <__exponent+0x5e>
 8007dea:	f10d 0307 	add.w	r3, sp, #7
 8007dee:	461f      	mov	r7, r3
 8007df0:	260a      	movs	r6, #10
 8007df2:	fb91 f5f6 	sdiv	r5, r1, r6
 8007df6:	fb06 1115 	mls	r1, r6, r5, r1
 8007dfa:	2d09      	cmp	r5, #9
 8007dfc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007e00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e04:	f103 32ff 	add.w	r2, r3, #4294967295
 8007e08:	4629      	mov	r1, r5
 8007e0a:	dc09      	bgt.n	8007e20 <__exponent+0x50>
 8007e0c:	3130      	adds	r1, #48	; 0x30
 8007e0e:	3b02      	subs	r3, #2
 8007e10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e14:	42bb      	cmp	r3, r7
 8007e16:	4622      	mov	r2, r4
 8007e18:	d304      	bcc.n	8007e24 <__exponent+0x54>
 8007e1a:	1a10      	subs	r0, r2, r0
 8007e1c:	b003      	add	sp, #12
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	4613      	mov	r3, r2
 8007e22:	e7e6      	b.n	8007df2 <__exponent+0x22>
 8007e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e28:	f804 2b01 	strb.w	r2, [r4], #1
 8007e2c:	e7f2      	b.n	8007e14 <__exponent+0x44>
 8007e2e:	2330      	movs	r3, #48	; 0x30
 8007e30:	4419      	add	r1, r3
 8007e32:	7083      	strb	r3, [r0, #2]
 8007e34:	1d02      	adds	r2, r0, #4
 8007e36:	70c1      	strb	r1, [r0, #3]
 8007e38:	e7ef      	b.n	8007e1a <__exponent+0x4a>
	...

08007e3c <_printf_float>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	b091      	sub	sp, #68	; 0x44
 8007e42:	460c      	mov	r4, r1
 8007e44:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007e46:	4693      	mov	fp, r2
 8007e48:	461e      	mov	r6, r3
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	f001 f8e4 	bl	8009018 <_localeconv_r>
 8007e50:	6803      	ldr	r3, [r0, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	f7f8 f98b 	bl	8000170 <strlen>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	900a      	str	r0, [sp, #40]	; 0x28
 8007e62:	3307      	adds	r3, #7
 8007e64:	f023 0307 	bic.w	r3, r3, #7
 8007e68:	f103 0208 	add.w	r2, r3, #8
 8007e6c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007e70:	f8d4 a000 	ldr.w	sl, [r4]
 8007e74:	603a      	str	r2, [r7, #0]
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e7e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	4ba6      	ldr	r3, [pc, #664]	; (8008128 <_printf_float+0x2ec>)
 8007e8e:	4638      	mov	r0, r7
 8007e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e92:	f7f8 fdcb 	bl	8000a2c <__aeabi_dcmpun>
 8007e96:	bb68      	cbnz	r0, 8007ef4 <_printf_float+0xb8>
 8007e98:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9c:	4ba2      	ldr	r3, [pc, #648]	; (8008128 <_printf_float+0x2ec>)
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ea2:	f7f8 fda5 	bl	80009f0 <__aeabi_dcmple>
 8007ea6:	bb28      	cbnz	r0, 8007ef4 <_printf_float+0xb8>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4638      	mov	r0, r7
 8007eae:	4649      	mov	r1, r9
 8007eb0:	f7f8 fd94 	bl	80009dc <__aeabi_dcmplt>
 8007eb4:	b110      	cbz	r0, 8007ebc <_printf_float+0x80>
 8007eb6:	232d      	movs	r3, #45	; 0x2d
 8007eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebc:	4f9b      	ldr	r7, [pc, #620]	; (800812c <_printf_float+0x2f0>)
 8007ebe:	4b9c      	ldr	r3, [pc, #624]	; (8008130 <_printf_float+0x2f4>)
 8007ec0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ec4:	bf98      	it	ls
 8007ec6:	461f      	movls	r7, r3
 8007ec8:	2303      	movs	r3, #3
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f02a 0304 	bic.w	r3, sl, #4
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	9600      	str	r6, [sp, #0]
 8007ed8:	465b      	mov	r3, fp
 8007eda:	aa0f      	add	r2, sp, #60	; 0x3c
 8007edc:	4621      	mov	r1, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 f9e2 	bl	80082a8 <_printf_common>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f040 8090 	bne.w	800800a <_printf_float+0x1ce>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b011      	add	sp, #68	; 0x44
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	4638      	mov	r0, r7
 8007efa:	4649      	mov	r1, r9
 8007efc:	f7f8 fd96 	bl	8000a2c <__aeabi_dcmpun>
 8007f00:	b110      	cbz	r0, 8007f08 <_printf_float+0xcc>
 8007f02:	4f8c      	ldr	r7, [pc, #560]	; (8008134 <_printf_float+0x2f8>)
 8007f04:	4b8c      	ldr	r3, [pc, #560]	; (8008138 <_printf_float+0x2fc>)
 8007f06:	e7db      	b.n	8007ec0 <_printf_float+0x84>
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007f0e:	1c59      	adds	r1, r3, #1
 8007f10:	a80d      	add	r0, sp, #52	; 0x34
 8007f12:	a90e      	add	r1, sp, #56	; 0x38
 8007f14:	d140      	bne.n	8007f98 <_printf_float+0x15c>
 8007f16:	2306      	movs	r3, #6
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	f04f 0c00 	mov.w	ip, #0
 8007f1e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007f22:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	463a      	mov	r2, r7
 8007f32:	464b      	mov	r3, r9
 8007f34:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7ff feed 	bl	8007d18 <__cvt>
 8007f3e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007f42:	2b47      	cmp	r3, #71	; 0x47
 8007f44:	4607      	mov	r7, r0
 8007f46:	d109      	bne.n	8007f5c <_printf_float+0x120>
 8007f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f4a:	1cd8      	adds	r0, r3, #3
 8007f4c:	db02      	blt.n	8007f54 <_printf_float+0x118>
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	dd47      	ble.n	8007fe4 <_printf_float+0x1a8>
 8007f54:	f1a8 0802 	sub.w	r8, r8, #2
 8007f58:	fa5f f888 	uxtb.w	r8, r8
 8007f5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007f60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f62:	d824      	bhi.n	8007fae <_printf_float+0x172>
 8007f64:	3901      	subs	r1, #1
 8007f66:	4642      	mov	r2, r8
 8007f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f6c:	910d      	str	r1, [sp, #52]	; 0x34
 8007f6e:	f7ff ff2f 	bl	8007dd0 <__exponent>
 8007f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f74:	4681      	mov	r9, r0
 8007f76:	1813      	adds	r3, r2, r0
 8007f78:	2a01      	cmp	r2, #1
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	dc02      	bgt.n	8007f84 <_printf_float+0x148>
 8007f7e:	6822      	ldr	r2, [r4, #0]
 8007f80:	07d1      	lsls	r1, r2, #31
 8007f82:	d501      	bpl.n	8007f88 <_printf_float+0x14c>
 8007f84:	3301      	adds	r3, #1
 8007f86:	6123      	str	r3, [r4, #16]
 8007f88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0a2      	beq.n	8007ed6 <_printf_float+0x9a>
 8007f90:	232d      	movs	r3, #45	; 0x2d
 8007f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f96:	e79e      	b.n	8007ed6 <_printf_float+0x9a>
 8007f98:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007f9c:	f000 816e 	beq.w	800827c <_printf_float+0x440>
 8007fa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fa4:	d1b9      	bne.n	8007f1a <_printf_float+0xde>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1b7      	bne.n	8007f1a <_printf_float+0xde>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e7b4      	b.n	8007f18 <_printf_float+0xdc>
 8007fae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007fb2:	d119      	bne.n	8007fe8 <_printf_float+0x1ac>
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	dd0c      	ble.n	8007fd4 <_printf_float+0x198>
 8007fba:	6121      	str	r1, [r4, #16]
 8007fbc:	b913      	cbnz	r3, 8007fc4 <_printf_float+0x188>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	07d2      	lsls	r2, r2, #31
 8007fc2:	d502      	bpl.n	8007fca <_printf_float+0x18e>
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	440b      	add	r3, r1
 8007fc8:	6123      	str	r3, [r4, #16]
 8007fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fcc:	f04f 0900 	mov.w	r9, #0
 8007fd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fd2:	e7d9      	b.n	8007f88 <_printf_float+0x14c>
 8007fd4:	b913      	cbnz	r3, 8007fdc <_printf_float+0x1a0>
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d501      	bpl.n	8007fe0 <_printf_float+0x1a4>
 8007fdc:	3302      	adds	r3, #2
 8007fde:	e7f3      	b.n	8007fc8 <_printf_float+0x18c>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f1      	b.n	8007fc8 <_printf_float+0x18c>
 8007fe4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007fe8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007fec:	4293      	cmp	r3, r2
 8007fee:	db05      	blt.n	8007ffc <_printf_float+0x1c0>
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	07d1      	lsls	r1, r2, #31
 8007ff6:	d5e8      	bpl.n	8007fca <_printf_float+0x18e>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	e7e5      	b.n	8007fc8 <_printf_float+0x18c>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfcc      	ite	gt
 8008000:	2301      	movgt	r3, #1
 8008002:	f1c3 0302 	rsble	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	e7de      	b.n	8007fc8 <_printf_float+0x18c>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	055a      	lsls	r2, r3, #21
 800800e:	d407      	bmi.n	8008020 <_printf_float+0x1e4>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	463a      	mov	r2, r7
 8008014:	4659      	mov	r1, fp
 8008016:	4628      	mov	r0, r5
 8008018:	47b0      	blx	r6
 800801a:	3001      	adds	r0, #1
 800801c:	d129      	bne.n	8008072 <_printf_float+0x236>
 800801e:	e764      	b.n	8007eea <_printf_float+0xae>
 8008020:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008024:	f240 80d7 	bls.w	80081d6 <_printf_float+0x39a>
 8008028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	f7f8 fcca 	bl	80009c8 <__aeabi_dcmpeq>
 8008034:	b388      	cbz	r0, 800809a <_printf_float+0x25e>
 8008036:	2301      	movs	r3, #1
 8008038:	4a40      	ldr	r2, [pc, #256]	; (800813c <_printf_float+0x300>)
 800803a:	4659      	mov	r1, fp
 800803c:	4628      	mov	r0, r5
 800803e:	47b0      	blx	r6
 8008040:	3001      	adds	r0, #1
 8008042:	f43f af52 	beq.w	8007eea <_printf_float+0xae>
 8008046:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800804a:	429a      	cmp	r2, r3
 800804c:	db02      	blt.n	8008054 <_printf_float+0x218>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	07d8      	lsls	r0, r3, #31
 8008052:	d50e      	bpl.n	8008072 <_printf_float+0x236>
 8008054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008058:	4659      	mov	r1, fp
 800805a:	4628      	mov	r0, r5
 800805c:	47b0      	blx	r6
 800805e:	3001      	adds	r0, #1
 8008060:	f43f af43 	beq.w	8007eea <_printf_float+0xae>
 8008064:	2700      	movs	r7, #0
 8008066:	f104 081a 	add.w	r8, r4, #26
 800806a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800806c:	3b01      	subs	r3, #1
 800806e:	42bb      	cmp	r3, r7
 8008070:	dc09      	bgt.n	8008086 <_printf_float+0x24a>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	079f      	lsls	r7, r3, #30
 8008076:	f100 80fd 	bmi.w	8008274 <_printf_float+0x438>
 800807a:	68e0      	ldr	r0, [r4, #12]
 800807c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800807e:	4298      	cmp	r0, r3
 8008080:	bfb8      	it	lt
 8008082:	4618      	movlt	r0, r3
 8008084:	e733      	b.n	8007eee <_printf_float+0xb2>
 8008086:	2301      	movs	r3, #1
 8008088:	4642      	mov	r2, r8
 800808a:	4659      	mov	r1, fp
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	3001      	adds	r0, #1
 8008092:	f43f af2a 	beq.w	8007eea <_printf_float+0xae>
 8008096:	3701      	adds	r7, #1
 8008098:	e7e7      	b.n	800806a <_printf_float+0x22e>
 800809a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800809c:	2b00      	cmp	r3, #0
 800809e:	dc2b      	bgt.n	80080f8 <_printf_float+0x2bc>
 80080a0:	2301      	movs	r3, #1
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <_printf_float+0x300>)
 80080a4:	4659      	mov	r1, fp
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b0      	blx	r6
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af1d 	beq.w	8007eea <_printf_float+0xae>
 80080b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b2:	b923      	cbnz	r3, 80080be <_printf_float+0x282>
 80080b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080b6:	b913      	cbnz	r3, 80080be <_printf_float+0x282>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d5d9      	bpl.n	8008072 <_printf_float+0x236>
 80080be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c2:	4659      	mov	r1, fp
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b0      	blx	r6
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f af0e 	beq.w	8007eea <_printf_float+0xae>
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	f104 091a 	add.w	r9, r4, #26
 80080d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d8:	425b      	negs	r3, r3
 80080da:	4543      	cmp	r3, r8
 80080dc:	dc01      	bgt.n	80080e2 <_printf_float+0x2a6>
 80080de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e0:	e797      	b.n	8008012 <_printf_float+0x1d6>
 80080e2:	2301      	movs	r3, #1
 80080e4:	464a      	mov	r2, r9
 80080e6:	4659      	mov	r1, fp
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b0      	blx	r6
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f aefc 	beq.w	8007eea <_printf_float+0xae>
 80080f2:	f108 0801 	add.w	r8, r8, #1
 80080f6:	e7ee      	b.n	80080d6 <_printf_float+0x29a>
 80080f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080fc:	429a      	cmp	r2, r3
 80080fe:	bfa8      	it	ge
 8008100:	461a      	movge	r2, r3
 8008102:	2a00      	cmp	r2, #0
 8008104:	4690      	mov	r8, r2
 8008106:	dd07      	ble.n	8008118 <_printf_float+0x2dc>
 8008108:	4613      	mov	r3, r2
 800810a:	4659      	mov	r1, fp
 800810c:	463a      	mov	r2, r7
 800810e:	4628      	mov	r0, r5
 8008110:	47b0      	blx	r6
 8008112:	3001      	adds	r0, #1
 8008114:	f43f aee9 	beq.w	8007eea <_printf_float+0xae>
 8008118:	f104 031a 	add.w	r3, r4, #26
 800811c:	f04f 0a00 	mov.w	sl, #0
 8008120:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008124:	930b      	str	r3, [sp, #44]	; 0x2c
 8008126:	e015      	b.n	8008154 <_printf_float+0x318>
 8008128:	7fefffff 	.word	0x7fefffff
 800812c:	0800a07c 	.word	0x0800a07c
 8008130:	0800a078 	.word	0x0800a078
 8008134:	0800a084 	.word	0x0800a084
 8008138:	0800a080 	.word	0x0800a080
 800813c:	0800a088 	.word	0x0800a088
 8008140:	2301      	movs	r3, #1
 8008142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008144:	4659      	mov	r1, fp
 8008146:	4628      	mov	r0, r5
 8008148:	47b0      	blx	r6
 800814a:	3001      	adds	r0, #1
 800814c:	f43f aecd 	beq.w	8007eea <_printf_float+0xae>
 8008150:	f10a 0a01 	add.w	sl, sl, #1
 8008154:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008158:	eba9 0308 	sub.w	r3, r9, r8
 800815c:	4553      	cmp	r3, sl
 800815e:	dcef      	bgt.n	8008140 <_printf_float+0x304>
 8008160:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008164:	429a      	cmp	r2, r3
 8008166:	444f      	add	r7, r9
 8008168:	db14      	blt.n	8008194 <_printf_float+0x358>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	07da      	lsls	r2, r3, #31
 800816e:	d411      	bmi.n	8008194 <_printf_float+0x358>
 8008170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008172:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008174:	eba3 0209 	sub.w	r2, r3, r9
 8008178:	eba3 0901 	sub.w	r9, r3, r1
 800817c:	4591      	cmp	r9, r2
 800817e:	bfa8      	it	ge
 8008180:	4691      	movge	r9, r2
 8008182:	f1b9 0f00 	cmp.w	r9, #0
 8008186:	dc0d      	bgt.n	80081a4 <_printf_float+0x368>
 8008188:	2700      	movs	r7, #0
 800818a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800818e:	f104 081a 	add.w	r8, r4, #26
 8008192:	e018      	b.n	80081c6 <_printf_float+0x38a>
 8008194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008198:	4659      	mov	r1, fp
 800819a:	4628      	mov	r0, r5
 800819c:	47b0      	blx	r6
 800819e:	3001      	adds	r0, #1
 80081a0:	d1e6      	bne.n	8008170 <_printf_float+0x334>
 80081a2:	e6a2      	b.n	8007eea <_printf_float+0xae>
 80081a4:	464b      	mov	r3, r9
 80081a6:	463a      	mov	r2, r7
 80081a8:	4659      	mov	r1, fp
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b0      	blx	r6
 80081ae:	3001      	adds	r0, #1
 80081b0:	d1ea      	bne.n	8008188 <_printf_float+0x34c>
 80081b2:	e69a      	b.n	8007eea <_printf_float+0xae>
 80081b4:	2301      	movs	r3, #1
 80081b6:	4642      	mov	r2, r8
 80081b8:	4659      	mov	r1, fp
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b0      	blx	r6
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f ae93 	beq.w	8007eea <_printf_float+0xae>
 80081c4:	3701      	adds	r7, #1
 80081c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	eba3 0309 	sub.w	r3, r3, r9
 80081d0:	42bb      	cmp	r3, r7
 80081d2:	dcef      	bgt.n	80081b4 <_printf_float+0x378>
 80081d4:	e74d      	b.n	8008072 <_printf_float+0x236>
 80081d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081d8:	2a01      	cmp	r2, #1
 80081da:	dc01      	bgt.n	80081e0 <_printf_float+0x3a4>
 80081dc:	07db      	lsls	r3, r3, #31
 80081de:	d538      	bpl.n	8008252 <_printf_float+0x416>
 80081e0:	2301      	movs	r3, #1
 80081e2:	463a      	mov	r2, r7
 80081e4:	4659      	mov	r1, fp
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b0      	blx	r6
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f ae7d 	beq.w	8007eea <_printf_float+0xae>
 80081f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081f4:	4659      	mov	r1, fp
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b0      	blx	r6
 80081fa:	3001      	adds	r0, #1
 80081fc:	f107 0701 	add.w	r7, r7, #1
 8008200:	f43f ae73 	beq.w	8007eea <_printf_float+0xae>
 8008204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800820a:	2200      	movs	r2, #0
 800820c:	f103 38ff 	add.w	r8, r3, #4294967295
 8008210:	2300      	movs	r3, #0
 8008212:	f7f8 fbd9 	bl	80009c8 <__aeabi_dcmpeq>
 8008216:	b9c0      	cbnz	r0, 800824a <_printf_float+0x40e>
 8008218:	4643      	mov	r3, r8
 800821a:	463a      	mov	r2, r7
 800821c:	4659      	mov	r1, fp
 800821e:	4628      	mov	r0, r5
 8008220:	47b0      	blx	r6
 8008222:	3001      	adds	r0, #1
 8008224:	d10d      	bne.n	8008242 <_printf_float+0x406>
 8008226:	e660      	b.n	8007eea <_printf_float+0xae>
 8008228:	2301      	movs	r3, #1
 800822a:	4642      	mov	r2, r8
 800822c:	4659      	mov	r1, fp
 800822e:	4628      	mov	r0, r5
 8008230:	47b0      	blx	r6
 8008232:	3001      	adds	r0, #1
 8008234:	f43f ae59 	beq.w	8007eea <_printf_float+0xae>
 8008238:	3701      	adds	r7, #1
 800823a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800823c:	3b01      	subs	r3, #1
 800823e:	42bb      	cmp	r3, r7
 8008240:	dcf2      	bgt.n	8008228 <_printf_float+0x3ec>
 8008242:	464b      	mov	r3, r9
 8008244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008248:	e6e4      	b.n	8008014 <_printf_float+0x1d8>
 800824a:	2700      	movs	r7, #0
 800824c:	f104 081a 	add.w	r8, r4, #26
 8008250:	e7f3      	b.n	800823a <_printf_float+0x3fe>
 8008252:	2301      	movs	r3, #1
 8008254:	e7e1      	b.n	800821a <_printf_float+0x3de>
 8008256:	2301      	movs	r3, #1
 8008258:	4642      	mov	r2, r8
 800825a:	4659      	mov	r1, fp
 800825c:	4628      	mov	r0, r5
 800825e:	47b0      	blx	r6
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae42 	beq.w	8007eea <_printf_float+0xae>
 8008266:	3701      	adds	r7, #1
 8008268:	68e3      	ldr	r3, [r4, #12]
 800826a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	42bb      	cmp	r3, r7
 8008270:	dcf1      	bgt.n	8008256 <_printf_float+0x41a>
 8008272:	e702      	b.n	800807a <_printf_float+0x23e>
 8008274:	2700      	movs	r7, #0
 8008276:	f104 0819 	add.w	r8, r4, #25
 800827a:	e7f5      	b.n	8008268 <_printf_float+0x42c>
 800827c:	2b00      	cmp	r3, #0
 800827e:	f43f ae94 	beq.w	8007faa <_printf_float+0x16e>
 8008282:	f04f 0c00 	mov.w	ip, #0
 8008286:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800828a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800828e:	6022      	str	r2, [r4, #0]
 8008290:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008294:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	463a      	mov	r2, r7
 800829c:	464b      	mov	r3, r9
 800829e:	4628      	mov	r0, r5
 80082a0:	f7ff fd3a 	bl	8007d18 <__cvt>
 80082a4:	4607      	mov	r7, r0
 80082a6:	e64f      	b.n	8007f48 <_printf_float+0x10c>

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4691      	mov	r9, r2
 80082ae:	461f      	mov	r7, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	4606      	mov	r6, r0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bfb8      	it	lt
 80082ba:	4613      	movlt	r3, r2
 80082bc:	f8c9 3000 	str.w	r3, [r9]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c4:	460c      	mov	r4, r1
 80082c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082ca:	b112      	cbz	r2, 80082d2 <_printf_common+0x2a>
 80082cc:	3301      	adds	r3, #1
 80082ce:	f8c9 3000 	str.w	r3, [r9]
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	0699      	lsls	r1, r3, #26
 80082d6:	bf42      	ittt	mi
 80082d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082dc:	3302      	addmi	r3, #2
 80082de:	f8c9 3000 	strmi.w	r3, [r9]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d107      	bne.n	80082fa <_printf_common+0x52>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	f8d9 2000 	ldr.w	r2, [r9]
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	42ab      	cmp	r3, r5
 80082f8:	dc29      	bgt.n	800834e <_printf_common+0xa6>
 80082fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	3300      	adds	r3, #0
 8008302:	bf18      	it	ne
 8008304:	2301      	movne	r3, #1
 8008306:	0692      	lsls	r2, r2, #26
 8008308:	d42e      	bmi.n	8008368 <_printf_common+0xc0>
 800830a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800830e:	4639      	mov	r1, r7
 8008310:	4630      	mov	r0, r6
 8008312:	47c0      	blx	r8
 8008314:	3001      	adds	r0, #1
 8008316:	d021      	beq.n	800835c <_printf_common+0xb4>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	68e5      	ldr	r5, [r4, #12]
 800831c:	f003 0306 	and.w	r3, r3, #6
 8008320:	2b04      	cmp	r3, #4
 8008322:	bf18      	it	ne
 8008324:	2500      	movne	r5, #0
 8008326:	f8d9 2000 	ldr.w	r2, [r9]
 800832a:	f04f 0900 	mov.w	r9, #0
 800832e:	bf08      	it	eq
 8008330:	1aad      	subeq	r5, r5, r2
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	bf08      	it	eq
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	4293      	cmp	r3, r2
 800833e:	bfc4      	itt	gt
 8008340:	1a9b      	subgt	r3, r3, r2
 8008342:	18ed      	addgt	r5, r5, r3
 8008344:	341a      	adds	r4, #26
 8008346:	454d      	cmp	r5, r9
 8008348:	d11a      	bne.n	8008380 <_printf_common+0xd8>
 800834a:	2000      	movs	r0, #0
 800834c:	e008      	b.n	8008360 <_printf_common+0xb8>
 800834e:	2301      	movs	r3, #1
 8008350:	4652      	mov	r2, sl
 8008352:	4639      	mov	r1, r7
 8008354:	4630      	mov	r0, r6
 8008356:	47c0      	blx	r8
 8008358:	3001      	adds	r0, #1
 800835a:	d103      	bne.n	8008364 <_printf_common+0xbc>
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	3501      	adds	r5, #1
 8008366:	e7c2      	b.n	80082ee <_printf_common+0x46>
 8008368:	2030      	movs	r0, #48	; 0x30
 800836a:	18e1      	adds	r1, r4, r3
 800836c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008376:	4422      	add	r2, r4
 8008378:	3302      	adds	r3, #2
 800837a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800837e:	e7c4      	b.n	800830a <_printf_common+0x62>
 8008380:	2301      	movs	r3, #1
 8008382:	4622      	mov	r2, r4
 8008384:	4639      	mov	r1, r7
 8008386:	4630      	mov	r0, r6
 8008388:	47c0      	blx	r8
 800838a:	3001      	adds	r0, #1
 800838c:	d0e6      	beq.n	800835c <_printf_common+0xb4>
 800838e:	f109 0901 	add.w	r9, r9, #1
 8008392:	e7d8      	b.n	8008346 <_printf_common+0x9e>

08008394 <quorem>:
 8008394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	6903      	ldr	r3, [r0, #16]
 800839a:	690c      	ldr	r4, [r1, #16]
 800839c:	4680      	mov	r8, r0
 800839e:	42a3      	cmp	r3, r4
 80083a0:	f2c0 8084 	blt.w	80084ac <quorem+0x118>
 80083a4:	3c01      	subs	r4, #1
 80083a6:	f101 0714 	add.w	r7, r1, #20
 80083aa:	f100 0614 	add.w	r6, r0, #20
 80083ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80083b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80083b6:	3501      	adds	r5, #1
 80083b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80083bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083c0:	eb06 030c 	add.w	r3, r6, ip
 80083c4:	eb07 090c 	add.w	r9, r7, ip
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	b39d      	cbz	r5, 8008434 <quorem+0xa0>
 80083cc:	f04f 0a00 	mov.w	sl, #0
 80083d0:	4638      	mov	r0, r7
 80083d2:	46b6      	mov	lr, r6
 80083d4:	46d3      	mov	fp, sl
 80083d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80083da:	b293      	uxth	r3, r2
 80083dc:	fb05 a303 	mla	r3, r5, r3, sl
 80083e0:	0c12      	lsrs	r2, r2, #16
 80083e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083e6:	fb05 a202 	mla	r2, r5, r2, sl
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	ebab 0303 	sub.w	r3, fp, r3
 80083f0:	f8de b000 	ldr.w	fp, [lr]
 80083f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80083f8:	fa1f fb8b 	uxth.w	fp, fp
 80083fc:	445b      	add	r3, fp
 80083fe:	fa1f fb82 	uxth.w	fp, r2
 8008402:	f8de 2000 	ldr.w	r2, [lr]
 8008406:	4581      	cmp	r9, r0
 8008408:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800840c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008416:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800841a:	f84e 3b04 	str.w	r3, [lr], #4
 800841e:	d2da      	bcs.n	80083d6 <quorem+0x42>
 8008420:	f856 300c 	ldr.w	r3, [r6, ip]
 8008424:	b933      	cbnz	r3, 8008434 <quorem+0xa0>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	3b04      	subs	r3, #4
 800842a:	429e      	cmp	r6, r3
 800842c:	461a      	mov	r2, r3
 800842e:	d331      	bcc.n	8008494 <quorem+0x100>
 8008430:	f8c8 4010 	str.w	r4, [r8, #16]
 8008434:	4640      	mov	r0, r8
 8008436:	f001 f825 	bl	8009484 <__mcmp>
 800843a:	2800      	cmp	r0, #0
 800843c:	db26      	blt.n	800848c <quorem+0xf8>
 800843e:	4630      	mov	r0, r6
 8008440:	f04f 0c00 	mov.w	ip, #0
 8008444:	3501      	adds	r5, #1
 8008446:	f857 1b04 	ldr.w	r1, [r7], #4
 800844a:	f8d0 e000 	ldr.w	lr, [r0]
 800844e:	b28b      	uxth	r3, r1
 8008450:	ebac 0303 	sub.w	r3, ip, r3
 8008454:	fa1f f28e 	uxth.w	r2, lr
 8008458:	4413      	add	r3, r2
 800845a:	0c0a      	lsrs	r2, r1, #16
 800845c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008464:	b29b      	uxth	r3, r3
 8008466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800846a:	45b9      	cmp	r9, r7
 800846c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008470:	f840 3b04 	str.w	r3, [r0], #4
 8008474:	d2e7      	bcs.n	8008446 <quorem+0xb2>
 8008476:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800847a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800847e:	b92a      	cbnz	r2, 800848c <quorem+0xf8>
 8008480:	3b04      	subs	r3, #4
 8008482:	429e      	cmp	r6, r3
 8008484:	461a      	mov	r2, r3
 8008486:	d30b      	bcc.n	80084a0 <quorem+0x10c>
 8008488:	f8c8 4010 	str.w	r4, [r8, #16]
 800848c:	4628      	mov	r0, r5
 800848e:	b003      	add	sp, #12
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	3b04      	subs	r3, #4
 8008498:	2a00      	cmp	r2, #0
 800849a:	d1c9      	bne.n	8008430 <quorem+0x9c>
 800849c:	3c01      	subs	r4, #1
 800849e:	e7c4      	b.n	800842a <quorem+0x96>
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	d1ef      	bne.n	8008488 <quorem+0xf4>
 80084a8:	3c01      	subs	r4, #1
 80084aa:	e7ea      	b.n	8008482 <quorem+0xee>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7ee      	b.n	800848e <quorem+0xfa>

080084b0 <_dtoa_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	4616      	mov	r6, r2
 80084b6:	461f      	mov	r7, r3
 80084b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084ba:	b095      	sub	sp, #84	; 0x54
 80084bc:	4604      	mov	r4, r0
 80084be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80084c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80084c6:	b93d      	cbnz	r5, 80084d8 <_dtoa_r+0x28>
 80084c8:	2010      	movs	r0, #16
 80084ca:	f000 fdb3 	bl	8009034 <malloc>
 80084ce:	6260      	str	r0, [r4, #36]	; 0x24
 80084d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084d4:	6005      	str	r5, [r0, #0]
 80084d6:	60c5      	str	r5, [r0, #12]
 80084d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084da:	6819      	ldr	r1, [r3, #0]
 80084dc:	b151      	cbz	r1, 80084f4 <_dtoa_r+0x44>
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	2301      	movs	r3, #1
 80084e2:	4093      	lsls	r3, r2
 80084e4:	604a      	str	r2, [r1, #4]
 80084e6:	608b      	str	r3, [r1, #8]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fdea 	bl	80090c2 <_Bfree>
 80084ee:	2200      	movs	r2, #0
 80084f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	1e3b      	subs	r3, r7, #0
 80084f6:	bfaf      	iteee	ge
 80084f8:	2300      	movge	r3, #0
 80084fa:	2201      	movlt	r2, #1
 80084fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008500:	9303      	strlt	r3, [sp, #12]
 8008502:	bfac      	ite	ge
 8008504:	f8c8 3000 	strge.w	r3, [r8]
 8008508:	f8c8 2000 	strlt.w	r2, [r8]
 800850c:	4bae      	ldr	r3, [pc, #696]	; (80087c8 <_dtoa_r+0x318>)
 800850e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008512:	ea33 0308 	bics.w	r3, r3, r8
 8008516:	d11b      	bne.n	8008550 <_dtoa_r+0xa0>
 8008518:	f242 730f 	movw	r3, #9999	; 0x270f
 800851c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	b923      	cbnz	r3, 800852e <_dtoa_r+0x7e>
 8008524:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008528:	2800      	cmp	r0, #0
 800852a:	f000 8545 	beq.w	8008fb8 <_dtoa_r+0xb08>
 800852e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008530:	b953      	cbnz	r3, 8008548 <_dtoa_r+0x98>
 8008532:	4ba6      	ldr	r3, [pc, #664]	; (80087cc <_dtoa_r+0x31c>)
 8008534:	e021      	b.n	800857a <_dtoa_r+0xca>
 8008536:	4ba6      	ldr	r3, [pc, #664]	; (80087d0 <_dtoa_r+0x320>)
 8008538:	9306      	str	r3, [sp, #24]
 800853a:	3308      	adds	r3, #8
 800853c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	9806      	ldr	r0, [sp, #24]
 8008542:	b015      	add	sp, #84	; 0x54
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	4ba0      	ldr	r3, [pc, #640]	; (80087cc <_dtoa_r+0x31c>)
 800854a:	9306      	str	r3, [sp, #24]
 800854c:	3303      	adds	r3, #3
 800854e:	e7f5      	b.n	800853c <_dtoa_r+0x8c>
 8008550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	2300      	movs	r3, #0
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fa34 	bl	80009c8 <__aeabi_dcmpeq>
 8008560:	4682      	mov	sl, r0
 8008562:	b160      	cbz	r0, 800857e <_dtoa_r+0xce>
 8008564:	2301      	movs	r3, #1
 8008566:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8520 	beq.w	8008fb2 <_dtoa_r+0xb02>
 8008572:	4b98      	ldr	r3, [pc, #608]	; (80087d4 <_dtoa_r+0x324>)
 8008574:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	3b01      	subs	r3, #1
 800857a:	9306      	str	r3, [sp, #24]
 800857c:	e7e0      	b.n	8008540 <_dtoa_r+0x90>
 800857e:	ab12      	add	r3, sp, #72	; 0x48
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	ab13      	add	r3, sp, #76	; 0x4c
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fff2 	bl	8009574 <__d2b>
 8008590:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008594:	4683      	mov	fp, r0
 8008596:	2d00      	cmp	r5, #0
 8008598:	d07d      	beq.n	8008696 <_dtoa_r+0x1e6>
 800859a:	46b0      	mov	r8, r6
 800859c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80085a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80085a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80085b0:	2200      	movs	r2, #0
 80085b2:	4b89      	ldr	r3, [pc, #548]	; (80087d8 <_dtoa_r+0x328>)
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f7 fde6 	bl	8000188 <__aeabi_dsub>
 80085bc:	a37c      	add	r3, pc, #496	; (adr r3, 80087b0 <_dtoa_r+0x300>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 ff99 	bl	80004f8 <__aeabi_dmul>
 80085c6:	a37c      	add	r3, pc, #496	; (adr r3, 80087b8 <_dtoa_r+0x308>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fdde 	bl	800018c <__adddf3>
 80085d0:	4606      	mov	r6, r0
 80085d2:	4628      	mov	r0, r5
 80085d4:	460f      	mov	r7, r1
 80085d6:	f7f7 ff25 	bl	8000424 <__aeabi_i2d>
 80085da:	a379      	add	r3, pc, #484	; (adr r3, 80087c0 <_dtoa_r+0x310>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 ff8a 	bl	80004f8 <__aeabi_dmul>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f7 fdce 	bl	800018c <__adddf3>
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	f7f8 fa30 	bl	8000a58 <__aeabi_d2iz>
 80085f8:	2200      	movs	r2, #0
 80085fa:	4682      	mov	sl, r0
 80085fc:	2300      	movs	r3, #0
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f8 f9eb 	bl	80009dc <__aeabi_dcmplt>
 8008606:	b148      	cbz	r0, 800861c <_dtoa_r+0x16c>
 8008608:	4650      	mov	r0, sl
 800860a:	f7f7 ff0b 	bl	8000424 <__aeabi_i2d>
 800860e:	4632      	mov	r2, r6
 8008610:	463b      	mov	r3, r7
 8008612:	f7f8 f9d9 	bl	80009c8 <__aeabi_dcmpeq>
 8008616:	b908      	cbnz	r0, 800861c <_dtoa_r+0x16c>
 8008618:	f10a 3aff 	add.w	sl, sl, #4294967295
 800861c:	f1ba 0f16 	cmp.w	sl, #22
 8008620:	d85a      	bhi.n	80086d8 <_dtoa_r+0x228>
 8008622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008626:	496d      	ldr	r1, [pc, #436]	; (80087dc <_dtoa_r+0x32c>)
 8008628:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800862c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008630:	f7f8 f9f2 	bl	8000a18 <__aeabi_dcmpgt>
 8008634:	2800      	cmp	r0, #0
 8008636:	d051      	beq.n	80086dc <_dtoa_r+0x22c>
 8008638:	2300      	movs	r3, #0
 800863a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863e:	930d      	str	r3, [sp, #52]	; 0x34
 8008640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008642:	1b5d      	subs	r5, r3, r5
 8008644:	1e6b      	subs	r3, r5, #1
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	bf43      	ittte	mi
 800864a:	2300      	movmi	r3, #0
 800864c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008650:	9307      	strmi	r3, [sp, #28]
 8008652:	f04f 0900 	movpl.w	r9, #0
 8008656:	f1ba 0f00 	cmp.w	sl, #0
 800865a:	db41      	blt.n	80086e0 <_dtoa_r+0x230>
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008662:	4453      	add	r3, sl
 8008664:	9307      	str	r3, [sp, #28]
 8008666:	2300      	movs	r3, #0
 8008668:	9308      	str	r3, [sp, #32]
 800866a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800866c:	2b09      	cmp	r3, #9
 800866e:	f200 808f 	bhi.w	8008790 <_dtoa_r+0x2e0>
 8008672:	2b05      	cmp	r3, #5
 8008674:	bfc4      	itt	gt
 8008676:	3b04      	subgt	r3, #4
 8008678:	931e      	strgt	r3, [sp, #120]	; 0x78
 800867a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800867c:	bfc8      	it	gt
 800867e:	2500      	movgt	r5, #0
 8008680:	f1a3 0302 	sub.w	r3, r3, #2
 8008684:	bfd8      	it	le
 8008686:	2501      	movle	r5, #1
 8008688:	2b03      	cmp	r3, #3
 800868a:	f200 808d 	bhi.w	80087a8 <_dtoa_r+0x2f8>
 800868e:	e8df f003 	tbb	[pc, r3]
 8008692:	7d7b      	.short	0x7d7b
 8008694:	6f2f      	.short	0x6f2f
 8008696:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800869a:	441d      	add	r5, r3
 800869c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80086a0:	2820      	cmp	r0, #32
 80086a2:	dd13      	ble.n	80086cc <_dtoa_r+0x21c>
 80086a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	fa08 f800 	lsl.w	r8, r8, r0
 80086ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80086b2:	fa23 f000 	lsr.w	r0, r3, r0
 80086b6:	ea48 0000 	orr.w	r0, r8, r0
 80086ba:	f7f7 fea3 	bl	8000404 <__aeabi_ui2d>
 80086be:	2301      	movs	r3, #1
 80086c0:	4680      	mov	r8, r0
 80086c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80086c6:	3d01      	subs	r5, #1
 80086c8:	9310      	str	r3, [sp, #64]	; 0x40
 80086ca:	e771      	b.n	80085b0 <_dtoa_r+0x100>
 80086cc:	9b02      	ldr	r3, [sp, #8]
 80086ce:	f1c0 0020 	rsb	r0, r0, #32
 80086d2:	fa03 f000 	lsl.w	r0, r3, r0
 80086d6:	e7f0      	b.n	80086ba <_dtoa_r+0x20a>
 80086d8:	2301      	movs	r3, #1
 80086da:	e7b0      	b.n	800863e <_dtoa_r+0x18e>
 80086dc:	900d      	str	r0, [sp, #52]	; 0x34
 80086de:	e7af      	b.n	8008640 <_dtoa_r+0x190>
 80086e0:	f1ca 0300 	rsb	r3, sl, #0
 80086e4:	9308      	str	r3, [sp, #32]
 80086e6:	2300      	movs	r3, #0
 80086e8:	eba9 090a 	sub.w	r9, r9, sl
 80086ec:	930c      	str	r3, [sp, #48]	; 0x30
 80086ee:	e7bc      	b.n	800866a <_dtoa_r+0x1ba>
 80086f0:	2301      	movs	r3, #1
 80086f2:	9309      	str	r3, [sp, #36]	; 0x24
 80086f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd74      	ble.n	80087e4 <_dtoa_r+0x334>
 80086fa:	4698      	mov	r8, r3
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	2200      	movs	r2, #0
 8008700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008702:	6072      	str	r2, [r6, #4]
 8008704:	2204      	movs	r2, #4
 8008706:	f102 0014 	add.w	r0, r2, #20
 800870a:	4298      	cmp	r0, r3
 800870c:	6871      	ldr	r1, [r6, #4]
 800870e:	d96e      	bls.n	80087ee <_dtoa_r+0x33e>
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fca2 	bl	800905a <_Balloc>
 8008716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f1b8 0f0e 	cmp.w	r8, #14
 8008720:	9306      	str	r3, [sp, #24]
 8008722:	f200 80ed 	bhi.w	8008900 <_dtoa_r+0x450>
 8008726:	2d00      	cmp	r5, #0
 8008728:	f000 80ea 	beq.w	8008900 <_dtoa_r+0x450>
 800872c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008730:	f1ba 0f00 	cmp.w	sl, #0
 8008734:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008738:	dd77      	ble.n	800882a <_dtoa_r+0x37a>
 800873a:	4a28      	ldr	r2, [pc, #160]	; (80087dc <_dtoa_r+0x32c>)
 800873c:	f00a 030f 	and.w	r3, sl, #15
 8008740:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008748:	06f0      	lsls	r0, r6, #27
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008752:	d568      	bpl.n	8008826 <_dtoa_r+0x376>
 8008754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008758:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <_dtoa_r+0x330>)
 800875a:	2503      	movs	r5, #3
 800875c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008760:	f7f7 fff4 	bl	800074c <__aeabi_ddiv>
 8008764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008768:	f006 060f 	and.w	r6, r6, #15
 800876c:	4f1c      	ldr	r7, [pc, #112]	; (80087e0 <_dtoa_r+0x330>)
 800876e:	e04f      	b.n	8008810 <_dtoa_r+0x360>
 8008770:	2301      	movs	r3, #1
 8008772:	9309      	str	r3, [sp, #36]	; 0x24
 8008774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008776:	4453      	add	r3, sl
 8008778:	f103 0801 	add.w	r8, r3, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	4643      	mov	r3, r8
 8008780:	2b01      	cmp	r3, #1
 8008782:	bfb8      	it	lt
 8008784:	2301      	movlt	r3, #1
 8008786:	e7ba      	b.n	80086fe <_dtoa_r+0x24e>
 8008788:	2300      	movs	r3, #0
 800878a:	e7b2      	b.n	80086f2 <_dtoa_r+0x242>
 800878c:	2300      	movs	r3, #0
 800878e:	e7f0      	b.n	8008772 <_dtoa_r+0x2c2>
 8008790:	2501      	movs	r5, #1
 8008792:	2300      	movs	r3, #0
 8008794:	9509      	str	r5, [sp, #36]	; 0x24
 8008796:	931e      	str	r3, [sp, #120]	; 0x78
 8008798:	f04f 33ff 	mov.w	r3, #4294967295
 800879c:	2200      	movs	r2, #0
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	4698      	mov	r8, r3
 80087a2:	2312      	movs	r3, #18
 80087a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80087a6:	e7aa      	b.n	80086fe <_dtoa_r+0x24e>
 80087a8:	2301      	movs	r3, #1
 80087aa:	9309      	str	r3, [sp, #36]	; 0x24
 80087ac:	e7f4      	b.n	8008798 <_dtoa_r+0x2e8>
 80087ae:	bf00      	nop
 80087b0:	636f4361 	.word	0x636f4361
 80087b4:	3fd287a7 	.word	0x3fd287a7
 80087b8:	8b60c8b3 	.word	0x8b60c8b3
 80087bc:	3fc68a28 	.word	0x3fc68a28
 80087c0:	509f79fb 	.word	0x509f79fb
 80087c4:	3fd34413 	.word	0x3fd34413
 80087c8:	7ff00000 	.word	0x7ff00000
 80087cc:	0800a093 	.word	0x0800a093
 80087d0:	0800a08a 	.word	0x0800a08a
 80087d4:	0800a089 	.word	0x0800a089
 80087d8:	3ff80000 	.word	0x3ff80000
 80087dc:	0800a0c0 	.word	0x0800a0c0
 80087e0:	0800a098 	.word	0x0800a098
 80087e4:	2301      	movs	r3, #1
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	4698      	mov	r8, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	e7da      	b.n	80087a4 <_dtoa_r+0x2f4>
 80087ee:	3101      	adds	r1, #1
 80087f0:	6071      	str	r1, [r6, #4]
 80087f2:	0052      	lsls	r2, r2, #1
 80087f4:	e787      	b.n	8008706 <_dtoa_r+0x256>
 80087f6:	07f1      	lsls	r1, r6, #31
 80087f8:	d508      	bpl.n	800880c <_dtoa_r+0x35c>
 80087fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008802:	f7f7 fe79 	bl	80004f8 <__aeabi_dmul>
 8008806:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800880a:	3501      	adds	r5, #1
 800880c:	1076      	asrs	r6, r6, #1
 800880e:	3708      	adds	r7, #8
 8008810:	2e00      	cmp	r6, #0
 8008812:	d1f0      	bne.n	80087f6 <_dtoa_r+0x346>
 8008814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881c:	f7f7 ff96 	bl	800074c <__aeabi_ddiv>
 8008820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008824:	e01b      	b.n	800885e <_dtoa_r+0x3ae>
 8008826:	2502      	movs	r5, #2
 8008828:	e7a0      	b.n	800876c <_dtoa_r+0x2bc>
 800882a:	f000 80a4 	beq.w	8008976 <_dtoa_r+0x4c6>
 800882e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008832:	f1ca 0600 	rsb	r6, sl, #0
 8008836:	4ba0      	ldr	r3, [pc, #640]	; (8008ab8 <_dtoa_r+0x608>)
 8008838:	f006 020f 	and.w	r2, r6, #15
 800883c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f7 fe58 	bl	80004f8 <__aeabi_dmul>
 8008848:	2502      	movs	r5, #2
 800884a:	2300      	movs	r3, #0
 800884c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008850:	4f9a      	ldr	r7, [pc, #616]	; (8008abc <_dtoa_r+0x60c>)
 8008852:	1136      	asrs	r6, r6, #4
 8008854:	2e00      	cmp	r6, #0
 8008856:	f040 8083 	bne.w	8008960 <_dtoa_r+0x4b0>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e0      	bne.n	8008820 <_dtoa_r+0x370>
 800885e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 808a 	beq.w	800897a <_dtoa_r+0x4ca>
 8008866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800886a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800886e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008872:	2200      	movs	r2, #0
 8008874:	4b92      	ldr	r3, [pc, #584]	; (8008ac0 <_dtoa_r+0x610>)
 8008876:	f7f8 f8b1 	bl	80009dc <__aeabi_dcmplt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d07d      	beq.n	800897a <_dtoa_r+0x4ca>
 800887e:	f1b8 0f00 	cmp.w	r8, #0
 8008882:	d07a      	beq.n	800897a <_dtoa_r+0x4ca>
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd36      	ble.n	80088f8 <_dtoa_r+0x448>
 800888a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800888e:	2200      	movs	r2, #0
 8008890:	4b8c      	ldr	r3, [pc, #560]	; (8008ac4 <_dtoa_r+0x614>)
 8008892:	f7f7 fe31 	bl	80004f8 <__aeabi_dmul>
 8008896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800889a:	9e04      	ldr	r6, [sp, #16]
 800889c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80088a0:	3501      	adds	r5, #1
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7f7 fdbe 	bl	8000424 <__aeabi_i2d>
 80088a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ac:	f7f7 fe24 	bl	80004f8 <__aeabi_dmul>
 80088b0:	2200      	movs	r2, #0
 80088b2:	4b85      	ldr	r3, [pc, #532]	; (8008ac8 <_dtoa_r+0x618>)
 80088b4:	f7f7 fc6a 	bl	800018c <__adddf3>
 80088b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80088bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80088c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	d15c      	bne.n	8008980 <_dtoa_r+0x4d0>
 80088c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	4b7f      	ldr	r3, [pc, #508]	; (8008acc <_dtoa_r+0x61c>)
 80088ce:	f7f7 fc5b 	bl	8000188 <__aeabi_dsub>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	462b      	mov	r3, r5
 80088d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088da:	f7f8 f89d 	bl	8000a18 <__aeabi_dcmpgt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f040 8281 	bne.w	8008de6 <_dtoa_r+0x936>
 80088e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80088ee:	f7f8 f875 	bl	80009dc <__aeabi_dcmplt>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f040 8275 	bne.w	8008de2 <_dtoa_r+0x932>
 80088f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80088fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008902:	2b00      	cmp	r3, #0
 8008904:	f2c0 814b 	blt.w	8008b9e <_dtoa_r+0x6ee>
 8008908:	f1ba 0f0e 	cmp.w	sl, #14
 800890c:	f300 8147 	bgt.w	8008b9e <_dtoa_r+0x6ee>
 8008910:	4b69      	ldr	r3, [pc, #420]	; (8008ab8 <_dtoa_r+0x608>)
 8008912:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800891e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008920:	2b00      	cmp	r3, #0
 8008922:	f280 80d7 	bge.w	8008ad4 <_dtoa_r+0x624>
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	f300 80d3 	bgt.w	8008ad4 <_dtoa_r+0x624>
 800892e:	f040 8257 	bne.w	8008de0 <_dtoa_r+0x930>
 8008932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008936:	2200      	movs	r2, #0
 8008938:	4b64      	ldr	r3, [pc, #400]	; (8008acc <_dtoa_r+0x61c>)
 800893a:	f7f7 fddd 	bl	80004f8 <__aeabi_dmul>
 800893e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008942:	f7f8 f85f 	bl	8000a04 <__aeabi_dcmpge>
 8008946:	4646      	mov	r6, r8
 8008948:	4647      	mov	r7, r8
 800894a:	2800      	cmp	r0, #0
 800894c:	f040 822d 	bne.w	8008daa <_dtoa_r+0x8fa>
 8008950:	9b06      	ldr	r3, [sp, #24]
 8008952:	9a06      	ldr	r2, [sp, #24]
 8008954:	1c5d      	adds	r5, r3, #1
 8008956:	2331      	movs	r3, #49	; 0x31
 8008958:	f10a 0a01 	add.w	sl, sl, #1
 800895c:	7013      	strb	r3, [r2, #0]
 800895e:	e228      	b.n	8008db2 <_dtoa_r+0x902>
 8008960:	07f2      	lsls	r2, r6, #31
 8008962:	d505      	bpl.n	8008970 <_dtoa_r+0x4c0>
 8008964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008968:	f7f7 fdc6 	bl	80004f8 <__aeabi_dmul>
 800896c:	2301      	movs	r3, #1
 800896e:	3501      	adds	r5, #1
 8008970:	1076      	asrs	r6, r6, #1
 8008972:	3708      	adds	r7, #8
 8008974:	e76e      	b.n	8008854 <_dtoa_r+0x3a4>
 8008976:	2502      	movs	r5, #2
 8008978:	e771      	b.n	800885e <_dtoa_r+0x3ae>
 800897a:	4657      	mov	r7, sl
 800897c:	4646      	mov	r6, r8
 800897e:	e790      	b.n	80088a2 <_dtoa_r+0x3f2>
 8008980:	4b4d      	ldr	r3, [pc, #308]	; (8008ab8 <_dtoa_r+0x608>)
 8008982:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008986:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800898a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d048      	beq.n	8008a22 <_dtoa_r+0x572>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	2000      	movs	r0, #0
 8008996:	494e      	ldr	r1, [pc, #312]	; (8008ad0 <_dtoa_r+0x620>)
 8008998:	f7f7 fed8 	bl	800074c <__aeabi_ddiv>
 800899c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089a0:	f7f7 fbf2 	bl	8000188 <__aeabi_dsub>
 80089a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089a8:	9d06      	ldr	r5, [sp, #24]
 80089aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ae:	f7f8 f853 	bl	8000a58 <__aeabi_d2iz>
 80089b2:	9011      	str	r0, [sp, #68]	; 0x44
 80089b4:	f7f7 fd36 	bl	8000424 <__aeabi_i2d>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c0:	f7f7 fbe2 	bl	8000188 <__aeabi_dsub>
 80089c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ca:	3330      	adds	r3, #48	; 0x30
 80089cc:	f805 3b01 	strb.w	r3, [r5], #1
 80089d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089d4:	f7f8 f802 	bl	80009dc <__aeabi_dcmplt>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d163      	bne.n	8008aa4 <_dtoa_r+0x5f4>
 80089dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089e0:	2000      	movs	r0, #0
 80089e2:	4937      	ldr	r1, [pc, #220]	; (8008ac0 <_dtoa_r+0x610>)
 80089e4:	f7f7 fbd0 	bl	8000188 <__aeabi_dsub>
 80089e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089ec:	f7f7 fff6 	bl	80009dc <__aeabi_dcmplt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f040 80b5 	bne.w	8008b60 <_dtoa_r+0x6b0>
 80089f6:	9b06      	ldr	r3, [sp, #24]
 80089f8:	1aeb      	subs	r3, r5, r3
 80089fa:	429e      	cmp	r6, r3
 80089fc:	f77f af7c 	ble.w	80088f8 <_dtoa_r+0x448>
 8008a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a04:	2200      	movs	r2, #0
 8008a06:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <_dtoa_r+0x614>)
 8008a08:	f7f7 fd76 	bl	80004f8 <__aeabi_dmul>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a16:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <_dtoa_r+0x614>)
 8008a18:	f7f7 fd6e 	bl	80004f8 <__aeabi_dmul>
 8008a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a20:	e7c3      	b.n	80089aa <_dtoa_r+0x4fa>
 8008a22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a26:	f7f7 fd67 	bl	80004f8 <__aeabi_dmul>
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a30:	199d      	adds	r5, r3, r6
 8008a32:	461e      	mov	r6, r3
 8008a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a38:	f7f8 f80e 	bl	8000a58 <__aeabi_d2iz>
 8008a3c:	9011      	str	r0, [sp, #68]	; 0x44
 8008a3e:	f7f7 fcf1 	bl	8000424 <__aeabi_i2d>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4a:	f7f7 fb9d 	bl	8000188 <__aeabi_dsub>
 8008a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a54:	3330      	adds	r3, #48	; 0x30
 8008a56:	f806 3b01 	strb.w	r3, [r6], #1
 8008a5a:	42ae      	cmp	r6, r5
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	d124      	bne.n	8008aac <_dtoa_r+0x5fc>
 8008a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <_dtoa_r+0x620>)
 8008a68:	f7f7 fb90 	bl	800018c <__adddf3>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a74:	f7f7 ffd0 	bl	8000a18 <__aeabi_dcmpgt>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d171      	bne.n	8008b60 <_dtoa_r+0x6b0>
 8008a7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a80:	2000      	movs	r0, #0
 8008a82:	4913      	ldr	r1, [pc, #76]	; (8008ad0 <_dtoa_r+0x620>)
 8008a84:	f7f7 fb80 	bl	8000188 <__aeabi_dsub>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	f7f7 ffa4 	bl	80009dc <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f af2f 	beq.w	80088f8 <_dtoa_r+0x448>
 8008a9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a9e:	1e6a      	subs	r2, r5, #1
 8008aa0:	2b30      	cmp	r3, #48	; 0x30
 8008aa2:	d001      	beq.n	8008aa8 <_dtoa_r+0x5f8>
 8008aa4:	46ba      	mov	sl, r7
 8008aa6:	e04a      	b.n	8008b3e <_dtoa_r+0x68e>
 8008aa8:	4615      	mov	r5, r2
 8008aaa:	e7f6      	b.n	8008a9a <_dtoa_r+0x5ea>
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <_dtoa_r+0x614>)
 8008aae:	f7f7 fd23 	bl	80004f8 <__aeabi_dmul>
 8008ab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab6:	e7bd      	b.n	8008a34 <_dtoa_r+0x584>
 8008ab8:	0800a0c0 	.word	0x0800a0c0
 8008abc:	0800a098 	.word	0x0800a098
 8008ac0:	3ff00000 	.word	0x3ff00000
 8008ac4:	40240000 	.word	0x40240000
 8008ac8:	401c0000 	.word	0x401c0000
 8008acc:	40140000 	.word	0x40140000
 8008ad0:	3fe00000 	.word	0x3fe00000
 8008ad4:	9d06      	ldr	r5, [sp, #24]
 8008ad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fe33 	bl	800074c <__aeabi_ddiv>
 8008ae6:	f7f7 ffb7 	bl	8000a58 <__aeabi_d2iz>
 8008aea:	4681      	mov	r9, r0
 8008aec:	f7f7 fc9a 	bl	8000424 <__aeabi_i2d>
 8008af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008af4:	f7f7 fd00 	bl	80004f8 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7f7 fb42 	bl	8000188 <__aeabi_dsub>
 8008b04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9e06      	ldr	r6, [sp, #24]
 8008b0e:	4602      	mov	r2, r0
 8008b10:	1bae      	subs	r6, r5, r6
 8008b12:	45b0      	cmp	r8, r6
 8008b14:	460b      	mov	r3, r1
 8008b16:	d135      	bne.n	8008b84 <_dtoa_r+0x6d4>
 8008b18:	f7f7 fb38 	bl	800018c <__adddf3>
 8008b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b20:	4606      	mov	r6, r0
 8008b22:	460f      	mov	r7, r1
 8008b24:	f7f7 ff78 	bl	8000a18 <__aeabi_dcmpgt>
 8008b28:	b9c8      	cbnz	r0, 8008b5e <_dtoa_r+0x6ae>
 8008b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 ff49 	bl	80009c8 <__aeabi_dcmpeq>
 8008b36:	b110      	cbz	r0, 8008b3e <_dtoa_r+0x68e>
 8008b38:	f019 0f01 	tst.w	r9, #1
 8008b3c:	d10f      	bne.n	8008b5e <_dtoa_r+0x6ae>
 8008b3e:	4659      	mov	r1, fp
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fabe 	bl	80090c2 <_Bfree>
 8008b46:	2300      	movs	r3, #0
 8008b48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b4a:	702b      	strb	r3, [r5, #0]
 8008b4c:	f10a 0301 	add.w	r3, sl, #1
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f43f acf3 	beq.w	8008540 <_dtoa_r+0x90>
 8008b5a:	601d      	str	r5, [r3, #0]
 8008b5c:	e4f0      	b.n	8008540 <_dtoa_r+0x90>
 8008b5e:	4657      	mov	r7, sl
 8008b60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b64:	1e6b      	subs	r3, r5, #1
 8008b66:	2a39      	cmp	r2, #57	; 0x39
 8008b68:	d106      	bne.n	8008b78 <_dtoa_r+0x6c8>
 8008b6a:	9a06      	ldr	r2, [sp, #24]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d107      	bne.n	8008b80 <_dtoa_r+0x6d0>
 8008b70:	2330      	movs	r3, #48	; 0x30
 8008b72:	7013      	strb	r3, [r2, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	3701      	adds	r7, #1
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	3201      	adds	r2, #1
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	e791      	b.n	8008aa4 <_dtoa_r+0x5f4>
 8008b80:	461d      	mov	r5, r3
 8008b82:	e7ed      	b.n	8008b60 <_dtoa_r+0x6b0>
 8008b84:	2200      	movs	r2, #0
 8008b86:	4b99      	ldr	r3, [pc, #612]	; (8008dec <_dtoa_r+0x93c>)
 8008b88:	f7f7 fcb6 	bl	80004f8 <__aeabi_dmul>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4606      	mov	r6, r0
 8008b92:	460f      	mov	r7, r1
 8008b94:	f7f7 ff18 	bl	80009c8 <__aeabi_dcmpeq>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d09e      	beq.n	8008ada <_dtoa_r+0x62a>
 8008b9c:	e7cf      	b.n	8008b3e <_dtoa_r+0x68e>
 8008b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	f000 8088 	beq.w	8008cb6 <_dtoa_r+0x806>
 8008ba6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ba8:	2a01      	cmp	r2, #1
 8008baa:	dc6d      	bgt.n	8008c88 <_dtoa_r+0x7d8>
 8008bac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	d066      	beq.n	8008c80 <_dtoa_r+0x7d0>
 8008bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bb6:	464d      	mov	r5, r9
 8008bb8:	9e08      	ldr	r6, [sp, #32]
 8008bba:	9a07      	ldr	r2, [sp, #28]
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	441a      	add	r2, r3
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4499      	add	r9, r3
 8008bc4:	9207      	str	r2, [sp, #28]
 8008bc6:	f000 fb1c 	bl	8009202 <__i2b>
 8008bca:	4607      	mov	r7, r0
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	dd0b      	ble.n	8008be8 <_dtoa_r+0x738>
 8008bd0:	9b07      	ldr	r3, [sp, #28]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dd08      	ble.n	8008be8 <_dtoa_r+0x738>
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	bfa8      	it	ge
 8008bda:	462b      	movge	r3, r5
 8008bdc:	9a07      	ldr	r2, [sp, #28]
 8008bde:	eba9 0903 	sub.w	r9, r9, r3
 8008be2:	1aed      	subs	r5, r5, r3
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	9307      	str	r3, [sp, #28]
 8008be8:	9b08      	ldr	r3, [sp, #32]
 8008bea:	b1eb      	cbz	r3, 8008c28 <_dtoa_r+0x778>
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d065      	beq.n	8008cbe <_dtoa_r+0x80e>
 8008bf2:	b18e      	cbz	r6, 8008c18 <_dtoa_r+0x768>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fba1 	bl	8009340 <__pow5mult>
 8008bfe:	465a      	mov	r2, fp
 8008c00:	4601      	mov	r1, r0
 8008c02:	4607      	mov	r7, r0
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fb05 	bl	8009214 <__multiply>
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	900a      	str	r0, [sp, #40]	; 0x28
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 fa57 	bl	80090c2 <_Bfree>
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	469b      	mov	fp, r3
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	1b9a      	subs	r2, r3, r6
 8008c1c:	d004      	beq.n	8008c28 <_dtoa_r+0x778>
 8008c1e:	4659      	mov	r1, fp
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fb8d 	bl	8009340 <__pow5mult>
 8008c26:	4683      	mov	fp, r0
 8008c28:	2101      	movs	r1, #1
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fae9 	bl	8009202 <__i2b>
 8008c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c32:	4606      	mov	r6, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 81c6 	beq.w	8008fc6 <_dtoa_r+0xb16>
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fb7e 	bl	8009340 <__pow5mult>
 8008c44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c46:	4606      	mov	r6, r0
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	dc3e      	bgt.n	8008cca <_dtoa_r+0x81a>
 8008c4c:	9b02      	ldr	r3, [sp, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d137      	bne.n	8008cc2 <_dtoa_r+0x812>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d134      	bne.n	8008cc6 <_dtoa_r+0x816>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	b12b      	cbz	r3, 8008c74 <_dtoa_r+0x7c4>
 8008c68:	9b07      	ldr	r3, [sp, #28]
 8008c6a:	f109 0901 	add.w	r9, r9, #1
 8008c6e:	3301      	adds	r3, #1
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	2301      	movs	r3, #1
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d128      	bne.n	8008cce <_dtoa_r+0x81e>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e02e      	b.n	8008cde <_dtoa_r+0x82e>
 8008c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c86:	e796      	b.n	8008bb6 <_dtoa_r+0x706>
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8008c8e:	42b3      	cmp	r3, r6
 8008c90:	bfb7      	itett	lt
 8008c92:	9b08      	ldrlt	r3, [sp, #32]
 8008c94:	1b9e      	subge	r6, r3, r6
 8008c96:	1af2      	sublt	r2, r6, r3
 8008c98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008c9a:	bfbf      	itttt	lt
 8008c9c:	9608      	strlt	r6, [sp, #32]
 8008c9e:	189b      	addlt	r3, r3, r2
 8008ca0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008ca2:	2600      	movlt	r6, #0
 8008ca4:	f1b8 0f00 	cmp.w	r8, #0
 8008ca8:	bfb9      	ittee	lt
 8008caa:	eba9 0508 	sublt.w	r5, r9, r8
 8008cae:	2300      	movlt	r3, #0
 8008cb0:	464d      	movge	r5, r9
 8008cb2:	4643      	movge	r3, r8
 8008cb4:	e781      	b.n	8008bba <_dtoa_r+0x70a>
 8008cb6:	9e08      	ldr	r6, [sp, #32]
 8008cb8:	464d      	mov	r5, r9
 8008cba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cbc:	e786      	b.n	8008bcc <_dtoa_r+0x71c>
 8008cbe:	9a08      	ldr	r2, [sp, #32]
 8008cc0:	e7ad      	b.n	8008c1e <_dtoa_r+0x76e>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e7d6      	b.n	8008c74 <_dtoa_r+0x7c4>
 8008cc6:	9b02      	ldr	r3, [sp, #8]
 8008cc8:	e7d4      	b.n	8008c74 <_dtoa_r+0x7c4>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9308      	str	r3, [sp, #32]
 8008cce:	6933      	ldr	r3, [r6, #16]
 8008cd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008cd4:	6918      	ldr	r0, [r3, #16]
 8008cd6:	f000 fa46 	bl	8009166 <__hi0bits>
 8008cda:	f1c0 0020 	rsb	r0, r0, #32
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	4418      	add	r0, r3
 8008ce2:	f010 001f 	ands.w	r0, r0, #31
 8008ce6:	d047      	beq.n	8008d78 <_dtoa_r+0x8c8>
 8008ce8:	f1c0 0320 	rsb	r3, r0, #32
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	dd3b      	ble.n	8008d68 <_dtoa_r+0x8b8>
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	f1c0 001c 	rsb	r0, r0, #28
 8008cf6:	4481      	add	r9, r0
 8008cf8:	4405      	add	r5, r0
 8008cfa:	4403      	add	r3, r0
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	f1b9 0f00 	cmp.w	r9, #0
 8008d02:	dd05      	ble.n	8008d10 <_dtoa_r+0x860>
 8008d04:	4659      	mov	r1, fp
 8008d06:	464a      	mov	r2, r9
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fb67 	bl	80093dc <__lshift>
 8008d0e:	4683      	mov	fp, r0
 8008d10:	9b07      	ldr	r3, [sp, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd05      	ble.n	8008d22 <_dtoa_r+0x872>
 8008d16:	4631      	mov	r1, r6
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fb5e 	bl	80093dc <__lshift>
 8008d20:	4606      	mov	r6, r0
 8008d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d24:	b353      	cbz	r3, 8008d7c <_dtoa_r+0x8cc>
 8008d26:	4631      	mov	r1, r6
 8008d28:	4658      	mov	r0, fp
 8008d2a:	f000 fbab 	bl	8009484 <__mcmp>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	da24      	bge.n	8008d7c <_dtoa_r+0x8cc>
 8008d32:	2300      	movs	r3, #0
 8008d34:	4659      	mov	r1, fp
 8008d36:	220a      	movs	r2, #10
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 f9d9 	bl	80090f0 <__multadd>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d44:	4683      	mov	fp, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8144 	beq.w	8008fd4 <_dtoa_r+0xb24>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4639      	mov	r1, r7
 8008d50:	220a      	movs	r2, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 f9cc 	bl	80090f0 <__multadd>
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dc4d      	bgt.n	8008dfc <_dtoa_r+0x94c>
 8008d60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	dd4a      	ble.n	8008dfc <_dtoa_r+0x94c>
 8008d66:	e011      	b.n	8008d8c <_dtoa_r+0x8dc>
 8008d68:	d0c9      	beq.n	8008cfe <_dtoa_r+0x84e>
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	331c      	adds	r3, #28
 8008d6e:	441a      	add	r2, r3
 8008d70:	4499      	add	r9, r3
 8008d72:	441d      	add	r5, r3
 8008d74:	4613      	mov	r3, r2
 8008d76:	e7c1      	b.n	8008cfc <_dtoa_r+0x84c>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	e7f6      	b.n	8008d6a <_dtoa_r+0x8ba>
 8008d7c:	f1b8 0f00 	cmp.w	r8, #0
 8008d80:	dc36      	bgt.n	8008df0 <_dtoa_r+0x940>
 8008d82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	dd33      	ble.n	8008df0 <_dtoa_r+0x940>
 8008d88:	f8cd 8010 	str.w	r8, [sp, #16]
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	b963      	cbnz	r3, 8008daa <_dtoa_r+0x8fa>
 8008d90:	4631      	mov	r1, r6
 8008d92:	2205      	movs	r2, #5
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 f9ab 	bl	80090f0 <__multadd>
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f000 fb70 	bl	8009484 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f73f add3 	bgt.w	8008950 <_dtoa_r+0x4a0>
 8008daa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008dac:	9d06      	ldr	r5, [sp, #24]
 8008dae:	ea6f 0a03 	mvn.w	sl, r3
 8008db2:	f04f 0900 	mov.w	r9, #0
 8008db6:	4631      	mov	r1, r6
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f982 	bl	80090c2 <_Bfree>
 8008dbe:	2f00      	cmp	r7, #0
 8008dc0:	f43f aebd 	beq.w	8008b3e <_dtoa_r+0x68e>
 8008dc4:	f1b9 0f00 	cmp.w	r9, #0
 8008dc8:	d005      	beq.n	8008dd6 <_dtoa_r+0x926>
 8008dca:	45b9      	cmp	r9, r7
 8008dcc:	d003      	beq.n	8008dd6 <_dtoa_r+0x926>
 8008dce:	4649      	mov	r1, r9
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 f976 	bl	80090c2 <_Bfree>
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 f972 	bl	80090c2 <_Bfree>
 8008dde:	e6ae      	b.n	8008b3e <_dtoa_r+0x68e>
 8008de0:	2600      	movs	r6, #0
 8008de2:	4637      	mov	r7, r6
 8008de4:	e7e1      	b.n	8008daa <_dtoa_r+0x8fa>
 8008de6:	46ba      	mov	sl, r7
 8008de8:	4637      	mov	r7, r6
 8008dea:	e5b1      	b.n	8008950 <_dtoa_r+0x4a0>
 8008dec:	40240000 	.word	0x40240000
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80f3 	beq.w	8008fe2 <_dtoa_r+0xb32>
 8008dfc:	2d00      	cmp	r5, #0
 8008dfe:	dd05      	ble.n	8008e0c <_dtoa_r+0x95c>
 8008e00:	4639      	mov	r1, r7
 8008e02:	462a      	mov	r2, r5
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fae9 	bl	80093dc <__lshift>
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	9b08      	ldr	r3, [sp, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04c      	beq.n	8008eac <_dtoa_r+0x9fc>
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f920 	bl	800905a <_Balloc>
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	f107 010c 	add.w	r1, r7, #12
 8008e22:	3202      	adds	r2, #2
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	300c      	adds	r0, #12
 8008e28:	f000 f90c 	bl	8009044 <memcpy>
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fad3 	bl	80093dc <__lshift>
 8008e36:	46b9      	mov	r9, r7
 8008e38:	4607      	mov	r7, r0
 8008e3a:	9b06      	ldr	r3, [sp, #24]
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	9b02      	ldr	r3, [sp, #8]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	4631      	mov	r1, r6
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f7ff faa3 	bl	8008394 <quorem>
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4605      	mov	r5, r0
 8008e52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e56:	4658      	mov	r0, fp
 8008e58:	f000 fb14 	bl	8009484 <__mcmp>
 8008e5c:	463a      	mov	r2, r7
 8008e5e:	9002      	str	r0, [sp, #8]
 8008e60:	4631      	mov	r1, r6
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fb28 	bl	80094b8 <__mdiff>
 8008e68:	68c3      	ldr	r3, [r0, #12]
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	bb03      	cbnz	r3, 8008eb0 <_dtoa_r+0xa00>
 8008e6e:	4601      	mov	r1, r0
 8008e70:	9009      	str	r0, [sp, #36]	; 0x24
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 fb06 	bl	8009484 <__mcmp>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4620      	mov	r0, r4
 8008e80:	9309      	str	r3, [sp, #36]	; 0x24
 8008e82:	f000 f91e 	bl	80090c2 <_Bfree>
 8008e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e88:	b9a3      	cbnz	r3, 8008eb4 <_dtoa_r+0xa04>
 8008e8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e8c:	b992      	cbnz	r2, 8008eb4 <_dtoa_r+0xa04>
 8008e8e:	9a08      	ldr	r2, [sp, #32]
 8008e90:	b982      	cbnz	r2, 8008eb4 <_dtoa_r+0xa04>
 8008e92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008e96:	d029      	beq.n	8008eec <_dtoa_r+0xa3c>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dd01      	ble.n	8008ea2 <_dtoa_r+0x9f2>
 8008e9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	1c5d      	adds	r5, r3, #1
 8008ea6:	f883 8000 	strb.w	r8, [r3]
 8008eaa:	e784      	b.n	8008db6 <_dtoa_r+0x906>
 8008eac:	4638      	mov	r0, r7
 8008eae:	e7c2      	b.n	8008e36 <_dtoa_r+0x986>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e7e3      	b.n	8008e7c <_dtoa_r+0x9cc>
 8008eb4:	9a02      	ldr	r2, [sp, #8]
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	db04      	blt.n	8008ec4 <_dtoa_r+0xa14>
 8008eba:	d123      	bne.n	8008f04 <_dtoa_r+0xa54>
 8008ebc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ebe:	bb0a      	cbnz	r2, 8008f04 <_dtoa_r+0xa54>
 8008ec0:	9a08      	ldr	r2, [sp, #32]
 8008ec2:	b9fa      	cbnz	r2, 8008f04 <_dtoa_r+0xa54>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	ddec      	ble.n	8008ea2 <_dtoa_r+0x9f2>
 8008ec8:	4659      	mov	r1, fp
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 fa85 	bl	80093dc <__lshift>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4683      	mov	fp, r0
 8008ed6:	f000 fad5 	bl	8009484 <__mcmp>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	dc03      	bgt.n	8008ee6 <_dtoa_r+0xa36>
 8008ede:	d1e0      	bne.n	8008ea2 <_dtoa_r+0x9f2>
 8008ee0:	f018 0f01 	tst.w	r8, #1
 8008ee4:	d0dd      	beq.n	8008ea2 <_dtoa_r+0x9f2>
 8008ee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008eea:	d1d8      	bne.n	8008e9e <_dtoa_r+0x9ee>
 8008eec:	9b07      	ldr	r3, [sp, #28]
 8008eee:	9a07      	ldr	r2, [sp, #28]
 8008ef0:	1c5d      	adds	r5, r3, #1
 8008ef2:	2339      	movs	r3, #57	; 0x39
 8008ef4:	7013      	strb	r3, [r2, #0]
 8008ef6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008efa:	1e6a      	subs	r2, r5, #1
 8008efc:	2b39      	cmp	r3, #57	; 0x39
 8008efe:	d04d      	beq.n	8008f9c <_dtoa_r+0xaec>
 8008f00:	3301      	adds	r3, #1
 8008f02:	e052      	b.n	8008faa <_dtoa_r+0xafa>
 8008f04:	9a07      	ldr	r2, [sp, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f102 0501 	add.w	r5, r2, #1
 8008f0c:	dd06      	ble.n	8008f1c <_dtoa_r+0xa6c>
 8008f0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f12:	d0eb      	beq.n	8008eec <_dtoa_r+0xa3c>
 8008f14:	f108 0801 	add.w	r8, r8, #1
 8008f18:	9b07      	ldr	r3, [sp, #28]
 8008f1a:	e7c4      	b.n	8008ea6 <_dtoa_r+0x9f6>
 8008f1c:	9b06      	ldr	r3, [sp, #24]
 8008f1e:	9a04      	ldr	r2, [sp, #16]
 8008f20:	1aeb      	subs	r3, r5, r3
 8008f22:	4293      	cmp	r3, r2
 8008f24:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008f28:	d021      	beq.n	8008f6e <_dtoa_r+0xabe>
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	220a      	movs	r2, #10
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 f8dd 	bl	80090f0 <__multadd>
 8008f36:	45b9      	cmp	r9, r7
 8008f38:	4683      	mov	fp, r0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	f04f 020a 	mov.w	r2, #10
 8008f42:	4649      	mov	r1, r9
 8008f44:	4620      	mov	r0, r4
 8008f46:	d105      	bne.n	8008f54 <_dtoa_r+0xaa4>
 8008f48:	f000 f8d2 	bl	80090f0 <__multadd>
 8008f4c:	4681      	mov	r9, r0
 8008f4e:	4607      	mov	r7, r0
 8008f50:	9507      	str	r5, [sp, #28]
 8008f52:	e778      	b.n	8008e46 <_dtoa_r+0x996>
 8008f54:	f000 f8cc 	bl	80090f0 <__multadd>
 8008f58:	4639      	mov	r1, r7
 8008f5a:	4681      	mov	r9, r0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	220a      	movs	r2, #10
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 f8c5 	bl	80090f0 <__multadd>
 8008f66:	4607      	mov	r7, r0
 8008f68:	e7f2      	b.n	8008f50 <_dtoa_r+0xaa0>
 8008f6a:	f04f 0900 	mov.w	r9, #0
 8008f6e:	4659      	mov	r1, fp
 8008f70:	2201      	movs	r2, #1
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fa32 	bl	80093dc <__lshift>
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4683      	mov	fp, r0
 8008f7c:	f000 fa82 	bl	8009484 <__mcmp>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	dcb8      	bgt.n	8008ef6 <_dtoa_r+0xa46>
 8008f84:	d102      	bne.n	8008f8c <_dtoa_r+0xadc>
 8008f86:	f018 0f01 	tst.w	r8, #1
 8008f8a:	d1b4      	bne.n	8008ef6 <_dtoa_r+0xa46>
 8008f8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f90:	1e6a      	subs	r2, r5, #1
 8008f92:	2b30      	cmp	r3, #48	; 0x30
 8008f94:	f47f af0f 	bne.w	8008db6 <_dtoa_r+0x906>
 8008f98:	4615      	mov	r5, r2
 8008f9a:	e7f7      	b.n	8008f8c <_dtoa_r+0xadc>
 8008f9c:	9b06      	ldr	r3, [sp, #24]
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d105      	bne.n	8008fae <_dtoa_r+0xafe>
 8008fa2:	2331      	movs	r3, #49	; 0x31
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	f10a 0a01 	add.w	sl, sl, #1
 8008faa:	7013      	strb	r3, [r2, #0]
 8008fac:	e703      	b.n	8008db6 <_dtoa_r+0x906>
 8008fae:	4615      	mov	r5, r2
 8008fb0:	e7a1      	b.n	8008ef6 <_dtoa_r+0xa46>
 8008fb2:	4b17      	ldr	r3, [pc, #92]	; (8009010 <_dtoa_r+0xb60>)
 8008fb4:	f7ff bae1 	b.w	800857a <_dtoa_r+0xca>
 8008fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f47f aabb 	bne.w	8008536 <_dtoa_r+0x86>
 8008fc0:	4b14      	ldr	r3, [pc, #80]	; (8009014 <_dtoa_r+0xb64>)
 8008fc2:	f7ff bada 	b.w	800857a <_dtoa_r+0xca>
 8008fc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	f77f ae3f 	ble.w	8008c4c <_dtoa_r+0x79c>
 8008fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	e653      	b.n	8008c7c <_dtoa_r+0x7cc>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc03      	bgt.n	8008fe2 <_dtoa_r+0xb32>
 8008fda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	f73f aed5 	bgt.w	8008d8c <_dtoa_r+0x8dc>
 8008fe2:	9d06      	ldr	r5, [sp, #24]
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	f7ff f9d4 	bl	8008394 <quorem>
 8008fec:	9b06      	ldr	r3, [sp, #24]
 8008fee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ff2:	f805 8b01 	strb.w	r8, [r5], #1
 8008ff6:	9a04      	ldr	r2, [sp, #16]
 8008ff8:	1aeb      	subs	r3, r5, r3
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	ddb5      	ble.n	8008f6a <_dtoa_r+0xaba>
 8008ffe:	4659      	mov	r1, fp
 8009000:	2300      	movs	r3, #0
 8009002:	220a      	movs	r2, #10
 8009004:	4620      	mov	r0, r4
 8009006:	f000 f873 	bl	80090f0 <__multadd>
 800900a:	4683      	mov	fp, r0
 800900c:	e7ea      	b.n	8008fe4 <_dtoa_r+0xb34>
 800900e:	bf00      	nop
 8009010:	0800a088 	.word	0x0800a088
 8009014:	0800a08a 	.word	0x0800a08a

08009018 <_localeconv_r>:
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <_localeconv_r+0x14>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6a18      	ldr	r0, [r3, #32]
 800901e:	4b04      	ldr	r3, [pc, #16]	; (8009030 <_localeconv_r+0x18>)
 8009020:	2800      	cmp	r0, #0
 8009022:	bf08      	it	eq
 8009024:	4618      	moveq	r0, r3
 8009026:	30f0      	adds	r0, #240	; 0xf0
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000008 	.word	0x20000008
 8009030:	2000006c 	.word	0x2000006c

08009034 <malloc>:
 8009034:	4b02      	ldr	r3, [pc, #8]	; (8009040 <malloc+0xc>)
 8009036:	4601      	mov	r1, r0
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	f000 baf9 	b.w	8009630 <_malloc_r>
 800903e:	bf00      	nop
 8009040:	20000008 	.word	0x20000008

08009044 <memcpy>:
 8009044:	b510      	push	{r4, lr}
 8009046:	1e43      	subs	r3, r0, #1
 8009048:	440a      	add	r2, r1
 800904a:	4291      	cmp	r1, r2
 800904c:	d100      	bne.n	8009050 <memcpy+0xc>
 800904e:	bd10      	pop	{r4, pc}
 8009050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009058:	e7f7      	b.n	800904a <memcpy+0x6>

0800905a <_Balloc>:
 800905a:	b570      	push	{r4, r5, r6, lr}
 800905c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800905e:	4604      	mov	r4, r0
 8009060:	460e      	mov	r6, r1
 8009062:	b93d      	cbnz	r5, 8009074 <_Balloc+0x1a>
 8009064:	2010      	movs	r0, #16
 8009066:	f7ff ffe5 	bl	8009034 <malloc>
 800906a:	6260      	str	r0, [r4, #36]	; 0x24
 800906c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009070:	6005      	str	r5, [r0, #0]
 8009072:	60c5      	str	r5, [r0, #12]
 8009074:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009076:	68eb      	ldr	r3, [r5, #12]
 8009078:	b183      	cbz	r3, 800909c <_Balloc+0x42>
 800907a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009082:	b9b8      	cbnz	r0, 80090b4 <_Balloc+0x5a>
 8009084:	2101      	movs	r1, #1
 8009086:	fa01 f506 	lsl.w	r5, r1, r6
 800908a:	1d6a      	adds	r2, r5, #5
 800908c:	0092      	lsls	r2, r2, #2
 800908e:	4620      	mov	r0, r4
 8009090:	f000 fabf 	bl	8009612 <_calloc_r>
 8009094:	b160      	cbz	r0, 80090b0 <_Balloc+0x56>
 8009096:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800909a:	e00e      	b.n	80090ba <_Balloc+0x60>
 800909c:	2221      	movs	r2, #33	; 0x21
 800909e:	2104      	movs	r1, #4
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fab6 	bl	8009612 <_calloc_r>
 80090a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a8:	60e8      	str	r0, [r5, #12]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e4      	bne.n	800907a <_Balloc+0x20>
 80090b0:	2000      	movs	r0, #0
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	6802      	ldr	r2, [r0, #0]
 80090b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80090ba:	2300      	movs	r3, #0
 80090bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090c0:	e7f7      	b.n	80090b2 <_Balloc+0x58>

080090c2 <_Bfree>:
 80090c2:	b570      	push	{r4, r5, r6, lr}
 80090c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090c6:	4606      	mov	r6, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	b93c      	cbnz	r4, 80090dc <_Bfree+0x1a>
 80090cc:	2010      	movs	r0, #16
 80090ce:	f7ff ffb1 	bl	8009034 <malloc>
 80090d2:	6270      	str	r0, [r6, #36]	; 0x24
 80090d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	60c4      	str	r4, [r0, #12]
 80090dc:	b13d      	cbz	r5, 80090ee <_Bfree+0x2c>
 80090de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090e0:	686a      	ldr	r2, [r5, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090e8:	6029      	str	r1, [r5, #0]
 80090ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80090ee:	bd70      	pop	{r4, r5, r6, pc}

080090f0 <__multadd>:
 80090f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f4:	461f      	mov	r7, r3
 80090f6:	4606      	mov	r6, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	2300      	movs	r3, #0
 80090fc:	690d      	ldr	r5, [r1, #16]
 80090fe:	f101 0c14 	add.w	ip, r1, #20
 8009102:	f8dc 0000 	ldr.w	r0, [ip]
 8009106:	3301      	adds	r3, #1
 8009108:	b281      	uxth	r1, r0
 800910a:	fb02 7101 	mla	r1, r2, r1, r7
 800910e:	0c00      	lsrs	r0, r0, #16
 8009110:	0c0f      	lsrs	r7, r1, #16
 8009112:	fb02 7000 	mla	r0, r2, r0, r7
 8009116:	b289      	uxth	r1, r1
 8009118:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800911c:	429d      	cmp	r5, r3
 800911e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009122:	f84c 1b04 	str.w	r1, [ip], #4
 8009126:	dcec      	bgt.n	8009102 <__multadd+0x12>
 8009128:	b1d7      	cbz	r7, 8009160 <__multadd+0x70>
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	42ab      	cmp	r3, r5
 800912e:	dc12      	bgt.n	8009156 <__multadd+0x66>
 8009130:	6861      	ldr	r1, [r4, #4]
 8009132:	4630      	mov	r0, r6
 8009134:	3101      	adds	r1, #1
 8009136:	f7ff ff90 	bl	800905a <_Balloc>
 800913a:	4680      	mov	r8, r0
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	f104 010c 	add.w	r1, r4, #12
 8009142:	3202      	adds	r2, #2
 8009144:	0092      	lsls	r2, r2, #2
 8009146:	300c      	adds	r0, #12
 8009148:	f7ff ff7c 	bl	8009044 <memcpy>
 800914c:	4621      	mov	r1, r4
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ffb7 	bl	80090c2 <_Bfree>
 8009154:	4644      	mov	r4, r8
 8009156:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800915a:	3501      	adds	r5, #1
 800915c:	615f      	str	r7, [r3, #20]
 800915e:	6125      	str	r5, [r4, #16]
 8009160:	4620      	mov	r0, r4
 8009162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009166 <__hi0bits>:
 8009166:	0c02      	lsrs	r2, r0, #16
 8009168:	0412      	lsls	r2, r2, #16
 800916a:	4603      	mov	r3, r0
 800916c:	b9b2      	cbnz	r2, 800919c <__hi0bits+0x36>
 800916e:	0403      	lsls	r3, r0, #16
 8009170:	2010      	movs	r0, #16
 8009172:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009176:	bf04      	itt	eq
 8009178:	021b      	lsleq	r3, r3, #8
 800917a:	3008      	addeq	r0, #8
 800917c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009180:	bf04      	itt	eq
 8009182:	011b      	lsleq	r3, r3, #4
 8009184:	3004      	addeq	r0, #4
 8009186:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800918a:	bf04      	itt	eq
 800918c:	009b      	lsleq	r3, r3, #2
 800918e:	3002      	addeq	r0, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	db06      	blt.n	80091a2 <__hi0bits+0x3c>
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	d503      	bpl.n	80091a0 <__hi0bits+0x3a>
 8009198:	3001      	adds	r0, #1
 800919a:	4770      	bx	lr
 800919c:	2000      	movs	r0, #0
 800919e:	e7e8      	b.n	8009172 <__hi0bits+0xc>
 80091a0:	2020      	movs	r0, #32
 80091a2:	4770      	bx	lr

080091a4 <__lo0bits>:
 80091a4:	6803      	ldr	r3, [r0, #0]
 80091a6:	4601      	mov	r1, r0
 80091a8:	f013 0207 	ands.w	r2, r3, #7
 80091ac:	d00b      	beq.n	80091c6 <__lo0bits+0x22>
 80091ae:	07da      	lsls	r2, r3, #31
 80091b0:	d423      	bmi.n	80091fa <__lo0bits+0x56>
 80091b2:	0798      	lsls	r0, r3, #30
 80091b4:	bf49      	itett	mi
 80091b6:	085b      	lsrmi	r3, r3, #1
 80091b8:	089b      	lsrpl	r3, r3, #2
 80091ba:	2001      	movmi	r0, #1
 80091bc:	600b      	strmi	r3, [r1, #0]
 80091be:	bf5c      	itt	pl
 80091c0:	600b      	strpl	r3, [r1, #0]
 80091c2:	2002      	movpl	r0, #2
 80091c4:	4770      	bx	lr
 80091c6:	b298      	uxth	r0, r3
 80091c8:	b9a8      	cbnz	r0, 80091f6 <__lo0bits+0x52>
 80091ca:	2010      	movs	r0, #16
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091d2:	bf04      	itt	eq
 80091d4:	0a1b      	lsreq	r3, r3, #8
 80091d6:	3008      	addeq	r0, #8
 80091d8:	071a      	lsls	r2, r3, #28
 80091da:	bf04      	itt	eq
 80091dc:	091b      	lsreq	r3, r3, #4
 80091de:	3004      	addeq	r0, #4
 80091e0:	079a      	lsls	r2, r3, #30
 80091e2:	bf04      	itt	eq
 80091e4:	089b      	lsreq	r3, r3, #2
 80091e6:	3002      	addeq	r0, #2
 80091e8:	07da      	lsls	r2, r3, #31
 80091ea:	d402      	bmi.n	80091f2 <__lo0bits+0x4e>
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	d006      	beq.n	80091fe <__lo0bits+0x5a>
 80091f0:	3001      	adds	r0, #1
 80091f2:	600b      	str	r3, [r1, #0]
 80091f4:	4770      	bx	lr
 80091f6:	4610      	mov	r0, r2
 80091f8:	e7e9      	b.n	80091ce <__lo0bits+0x2a>
 80091fa:	2000      	movs	r0, #0
 80091fc:	4770      	bx	lr
 80091fe:	2020      	movs	r0, #32
 8009200:	4770      	bx	lr

08009202 <__i2b>:
 8009202:	b510      	push	{r4, lr}
 8009204:	460c      	mov	r4, r1
 8009206:	2101      	movs	r1, #1
 8009208:	f7ff ff27 	bl	800905a <_Balloc>
 800920c:	2201      	movs	r2, #1
 800920e:	6144      	str	r4, [r0, #20]
 8009210:	6102      	str	r2, [r0, #16]
 8009212:	bd10      	pop	{r4, pc}

08009214 <__multiply>:
 8009214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4614      	mov	r4, r2
 800921a:	690a      	ldr	r2, [r1, #16]
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	4688      	mov	r8, r1
 8009220:	429a      	cmp	r2, r3
 8009222:	bfbe      	ittt	lt
 8009224:	460b      	movlt	r3, r1
 8009226:	46a0      	movlt	r8, r4
 8009228:	461c      	movlt	r4, r3
 800922a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800922e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009236:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800923a:	eb07 0609 	add.w	r6, r7, r9
 800923e:	42b3      	cmp	r3, r6
 8009240:	bfb8      	it	lt
 8009242:	3101      	addlt	r1, #1
 8009244:	f7ff ff09 	bl	800905a <_Balloc>
 8009248:	f100 0514 	add.w	r5, r0, #20
 800924c:	462b      	mov	r3, r5
 800924e:	2200      	movs	r2, #0
 8009250:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009254:	4573      	cmp	r3, lr
 8009256:	d316      	bcc.n	8009286 <__multiply+0x72>
 8009258:	f104 0214 	add.w	r2, r4, #20
 800925c:	f108 0114 	add.w	r1, r8, #20
 8009260:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009264:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	9201      	str	r2, [sp, #4]
 800926e:	4293      	cmp	r3, r2
 8009270:	d80c      	bhi.n	800928c <__multiply+0x78>
 8009272:	2e00      	cmp	r6, #0
 8009274:	dd03      	ble.n	800927e <__multiply+0x6a>
 8009276:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800927a:	2b00      	cmp	r3, #0
 800927c:	d05d      	beq.n	800933a <__multiply+0x126>
 800927e:	6106      	str	r6, [r0, #16]
 8009280:	b003      	add	sp, #12
 8009282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009286:	f843 2b04 	str.w	r2, [r3], #4
 800928a:	e7e3      	b.n	8009254 <__multiply+0x40>
 800928c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009290:	f1bb 0f00 	cmp.w	fp, #0
 8009294:	d023      	beq.n	80092de <__multiply+0xca>
 8009296:	4689      	mov	r9, r1
 8009298:	46ac      	mov	ip, r5
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	f859 4b04 	ldr.w	r4, [r9], #4
 80092a2:	f8dc a000 	ldr.w	sl, [ip]
 80092a6:	b2a3      	uxth	r3, r4
 80092a8:	fa1f fa8a 	uxth.w	sl, sl
 80092ac:	fb0b a303 	mla	r3, fp, r3, sl
 80092b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092b4:	f8dc 4000 	ldr.w	r4, [ip]
 80092b8:	4443      	add	r3, r8
 80092ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092be:	fb0b 840a 	mla	r4, fp, sl, r8
 80092c2:	46e2      	mov	sl, ip
 80092c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092ce:	454f      	cmp	r7, r9
 80092d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092d4:	f84a 3b04 	str.w	r3, [sl], #4
 80092d8:	d82b      	bhi.n	8009332 <__multiply+0x11e>
 80092da:	f8cc 8004 	str.w	r8, [ip, #4]
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	3204      	adds	r2, #4
 80092e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80092e6:	f1ba 0f00 	cmp.w	sl, #0
 80092ea:	d020      	beq.n	800932e <__multiply+0x11a>
 80092ec:	4689      	mov	r9, r1
 80092ee:	46a8      	mov	r8, r5
 80092f0:	f04f 0b00 	mov.w	fp, #0
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80092fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	fb0a 440c 	mla	r4, sl, ip, r4
 8009304:	46c4      	mov	ip, r8
 8009306:	445c      	add	r4, fp
 8009308:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800930c:	f84c 3b04 	str.w	r3, [ip], #4
 8009310:	f859 3b04 	ldr.w	r3, [r9], #4
 8009314:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	fb0a b303 	mla	r3, sl, r3, fp
 800931e:	454f      	cmp	r7, r9
 8009320:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009324:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009328:	d805      	bhi.n	8009336 <__multiply+0x122>
 800932a:	f8c8 3004 	str.w	r3, [r8, #4]
 800932e:	3504      	adds	r5, #4
 8009330:	e79b      	b.n	800926a <__multiply+0x56>
 8009332:	46d4      	mov	ip, sl
 8009334:	e7b3      	b.n	800929e <__multiply+0x8a>
 8009336:	46e0      	mov	r8, ip
 8009338:	e7dd      	b.n	80092f6 <__multiply+0xe2>
 800933a:	3e01      	subs	r6, #1
 800933c:	e799      	b.n	8009272 <__multiply+0x5e>
	...

08009340 <__pow5mult>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4615      	mov	r5, r2
 8009346:	f012 0203 	ands.w	r2, r2, #3
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	d007      	beq.n	8009360 <__pow5mult+0x20>
 8009350:	4c21      	ldr	r4, [pc, #132]	; (80093d8 <__pow5mult+0x98>)
 8009352:	3a01      	subs	r2, #1
 8009354:	2300      	movs	r3, #0
 8009356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800935a:	f7ff fec9 	bl	80090f0 <__multadd>
 800935e:	4607      	mov	r7, r0
 8009360:	10ad      	asrs	r5, r5, #2
 8009362:	d035      	beq.n	80093d0 <__pow5mult+0x90>
 8009364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009366:	b93c      	cbnz	r4, 8009378 <__pow5mult+0x38>
 8009368:	2010      	movs	r0, #16
 800936a:	f7ff fe63 	bl	8009034 <malloc>
 800936e:	6270      	str	r0, [r6, #36]	; 0x24
 8009370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009374:	6004      	str	r4, [r0, #0]
 8009376:	60c4      	str	r4, [r0, #12]
 8009378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800937c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009380:	b94c      	cbnz	r4, 8009396 <__pow5mult+0x56>
 8009382:	f240 2171 	movw	r1, #625	; 0x271
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff3b 	bl	8009202 <__i2b>
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	f8c8 0008 	str.w	r0, [r8, #8]
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	07eb      	lsls	r3, r5, #31
 800939c:	d50a      	bpl.n	80093b4 <__pow5mult+0x74>
 800939e:	4639      	mov	r1, r7
 80093a0:	4622      	mov	r2, r4
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ff36 	bl	8009214 <__multiply>
 80093a8:	4681      	mov	r9, r0
 80093aa:	4639      	mov	r1, r7
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff fe88 	bl	80090c2 <_Bfree>
 80093b2:	464f      	mov	r7, r9
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	d00b      	beq.n	80093d0 <__pow5mult+0x90>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	b938      	cbnz	r0, 80093cc <__pow5mult+0x8c>
 80093bc:	4622      	mov	r2, r4
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff ff27 	bl	8009214 <__multiply>
 80093c6:	6020      	str	r0, [r4, #0]
 80093c8:	f8c0 8000 	str.w	r8, [r0]
 80093cc:	4604      	mov	r4, r0
 80093ce:	e7e4      	b.n	800939a <__pow5mult+0x5a>
 80093d0:	4638      	mov	r0, r7
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	bf00      	nop
 80093d8:	0800a188 	.word	0x0800a188

080093dc <__lshift>:
 80093dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	4607      	mov	r7, r0
 80093e4:	4616      	mov	r6, r2
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093ec:	eb0a 0903 	add.w	r9, sl, r3
 80093f0:	6849      	ldr	r1, [r1, #4]
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	f109 0501 	add.w	r5, r9, #1
 80093f8:	42ab      	cmp	r3, r5
 80093fa:	db32      	blt.n	8009462 <__lshift+0x86>
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff fe2c 	bl	800905a <_Balloc>
 8009402:	2300      	movs	r3, #0
 8009404:	4680      	mov	r8, r0
 8009406:	461a      	mov	r2, r3
 8009408:	f100 0114 	add.w	r1, r0, #20
 800940c:	4553      	cmp	r3, sl
 800940e:	db2b      	blt.n	8009468 <__lshift+0x8c>
 8009410:	6920      	ldr	r0, [r4, #16]
 8009412:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009416:	f104 0314 	add.w	r3, r4, #20
 800941a:	f016 021f 	ands.w	r2, r6, #31
 800941e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009422:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009426:	d025      	beq.n	8009474 <__lshift+0x98>
 8009428:	2000      	movs	r0, #0
 800942a:	f1c2 0e20 	rsb	lr, r2, #32
 800942e:	468a      	mov	sl, r1
 8009430:	681e      	ldr	r6, [r3, #0]
 8009432:	4096      	lsls	r6, r2
 8009434:	4330      	orrs	r0, r6
 8009436:	f84a 0b04 	str.w	r0, [sl], #4
 800943a:	f853 0b04 	ldr.w	r0, [r3], #4
 800943e:	459c      	cmp	ip, r3
 8009440:	fa20 f00e 	lsr.w	r0, r0, lr
 8009444:	d814      	bhi.n	8009470 <__lshift+0x94>
 8009446:	6048      	str	r0, [r1, #4]
 8009448:	b108      	cbz	r0, 800944e <__lshift+0x72>
 800944a:	f109 0502 	add.w	r5, r9, #2
 800944e:	3d01      	subs	r5, #1
 8009450:	4638      	mov	r0, r7
 8009452:	f8c8 5010 	str.w	r5, [r8, #16]
 8009456:	4621      	mov	r1, r4
 8009458:	f7ff fe33 	bl	80090c2 <_Bfree>
 800945c:	4640      	mov	r0, r8
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009462:	3101      	adds	r1, #1
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	e7c7      	b.n	80093f8 <__lshift+0x1c>
 8009468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800946c:	3301      	adds	r3, #1
 800946e:	e7cd      	b.n	800940c <__lshift+0x30>
 8009470:	4651      	mov	r1, sl
 8009472:	e7dc      	b.n	800942e <__lshift+0x52>
 8009474:	3904      	subs	r1, #4
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	459c      	cmp	ip, r3
 800947c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009480:	d8f9      	bhi.n	8009476 <__lshift+0x9a>
 8009482:	e7e4      	b.n	800944e <__lshift+0x72>

08009484 <__mcmp>:
 8009484:	6903      	ldr	r3, [r0, #16]
 8009486:	690a      	ldr	r2, [r1, #16]
 8009488:	b530      	push	{r4, r5, lr}
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	d10c      	bne.n	80094a8 <__mcmp+0x24>
 800948e:	0092      	lsls	r2, r2, #2
 8009490:	3014      	adds	r0, #20
 8009492:	3114      	adds	r1, #20
 8009494:	1884      	adds	r4, r0, r2
 8009496:	4411      	add	r1, r2
 8009498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800949c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094a0:	4295      	cmp	r5, r2
 80094a2:	d003      	beq.n	80094ac <__mcmp+0x28>
 80094a4:	d305      	bcc.n	80094b2 <__mcmp+0x2e>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	bd30      	pop	{r4, r5, pc}
 80094ac:	42a0      	cmp	r0, r4
 80094ae:	d3f3      	bcc.n	8009498 <__mcmp+0x14>
 80094b0:	e7fa      	b.n	80094a8 <__mcmp+0x24>
 80094b2:	f04f 33ff 	mov.w	r3, #4294967295
 80094b6:	e7f7      	b.n	80094a8 <__mcmp+0x24>

080094b8 <__mdiff>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	460d      	mov	r5, r1
 80094be:	4607      	mov	r7, r0
 80094c0:	4611      	mov	r1, r2
 80094c2:	4628      	mov	r0, r5
 80094c4:	4614      	mov	r4, r2
 80094c6:	f7ff ffdd 	bl	8009484 <__mcmp>
 80094ca:	1e06      	subs	r6, r0, #0
 80094cc:	d108      	bne.n	80094e0 <__mdiff+0x28>
 80094ce:	4631      	mov	r1, r6
 80094d0:	4638      	mov	r0, r7
 80094d2:	f7ff fdc2 	bl	800905a <_Balloc>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	bfa4      	itt	ge
 80094e2:	4623      	movge	r3, r4
 80094e4:	462c      	movge	r4, r5
 80094e6:	4638      	mov	r0, r7
 80094e8:	6861      	ldr	r1, [r4, #4]
 80094ea:	bfa6      	itte	ge
 80094ec:	461d      	movge	r5, r3
 80094ee:	2600      	movge	r6, #0
 80094f0:	2601      	movlt	r6, #1
 80094f2:	f7ff fdb2 	bl	800905a <_Balloc>
 80094f6:	f04f 0e00 	mov.w	lr, #0
 80094fa:	60c6      	str	r6, [r0, #12]
 80094fc:	692b      	ldr	r3, [r5, #16]
 80094fe:	6926      	ldr	r6, [r4, #16]
 8009500:	f104 0214 	add.w	r2, r4, #20
 8009504:	f105 0914 	add.w	r9, r5, #20
 8009508:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800950c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009510:	f100 0114 	add.w	r1, r0, #20
 8009514:	f852 ab04 	ldr.w	sl, [r2], #4
 8009518:	f859 5b04 	ldr.w	r5, [r9], #4
 800951c:	fa1f f38a 	uxth.w	r3, sl
 8009520:	4473      	add	r3, lr
 8009522:	b2ac      	uxth	r4, r5
 8009524:	1b1b      	subs	r3, r3, r4
 8009526:	0c2c      	lsrs	r4, r5, #16
 8009528:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800952c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009530:	b29b      	uxth	r3, r3
 8009532:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009536:	45c8      	cmp	r8, r9
 8009538:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800953c:	4694      	mov	ip, r2
 800953e:	f841 4b04 	str.w	r4, [r1], #4
 8009542:	d8e7      	bhi.n	8009514 <__mdiff+0x5c>
 8009544:	45bc      	cmp	ip, r7
 8009546:	d304      	bcc.n	8009552 <__mdiff+0x9a>
 8009548:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800954c:	b183      	cbz	r3, 8009570 <__mdiff+0xb8>
 800954e:	6106      	str	r6, [r0, #16]
 8009550:	e7c4      	b.n	80094dc <__mdiff+0x24>
 8009552:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009556:	b2a2      	uxth	r2, r4
 8009558:	4472      	add	r2, lr
 800955a:	1413      	asrs	r3, r2, #16
 800955c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009560:	b292      	uxth	r2, r2
 8009562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009566:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800956a:	f841 2b04 	str.w	r2, [r1], #4
 800956e:	e7e9      	b.n	8009544 <__mdiff+0x8c>
 8009570:	3e01      	subs	r6, #1
 8009572:	e7e9      	b.n	8009548 <__mdiff+0x90>

08009574 <__d2b>:
 8009574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009578:	461c      	mov	r4, r3
 800957a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800957e:	2101      	movs	r1, #1
 8009580:	4690      	mov	r8, r2
 8009582:	f7ff fd6a 	bl	800905a <_Balloc>
 8009586:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800958a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800958e:	4607      	mov	r7, r0
 8009590:	bb34      	cbnz	r4, 80095e0 <__d2b+0x6c>
 8009592:	9201      	str	r2, [sp, #4]
 8009594:	f1b8 0200 	subs.w	r2, r8, #0
 8009598:	d027      	beq.n	80095ea <__d2b+0x76>
 800959a:	a802      	add	r0, sp, #8
 800959c:	f840 2d08 	str.w	r2, [r0, #-8]!
 80095a0:	f7ff fe00 	bl	80091a4 <__lo0bits>
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	b1f0      	cbz	r0, 80095e6 <__d2b+0x72>
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	f1c0 0320 	rsb	r3, r0, #32
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	430b      	orrs	r3, r1
 80095b4:	40c2      	lsrs	r2, r0
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	9b01      	ldr	r3, [sp, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bf14      	ite	ne
 80095c0:	2102      	movne	r1, #2
 80095c2:	2101      	moveq	r1, #1
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	6139      	str	r1, [r7, #16]
 80095c8:	b1c4      	cbz	r4, 80095fc <__d2b+0x88>
 80095ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095ce:	4404      	add	r4, r0
 80095d0:	6034      	str	r4, [r6, #0]
 80095d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095d6:	6028      	str	r0, [r5, #0]
 80095d8:	4638      	mov	r0, r7
 80095da:	b002      	add	sp, #8
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80095e4:	e7d5      	b.n	8009592 <__d2b+0x1e>
 80095e6:	6179      	str	r1, [r7, #20]
 80095e8:	e7e7      	b.n	80095ba <__d2b+0x46>
 80095ea:	a801      	add	r0, sp, #4
 80095ec:	f7ff fdda 	bl	80091a4 <__lo0bits>
 80095f0:	2101      	movs	r1, #1
 80095f2:	9b01      	ldr	r3, [sp, #4]
 80095f4:	6139      	str	r1, [r7, #16]
 80095f6:	617b      	str	r3, [r7, #20]
 80095f8:	3020      	adds	r0, #32
 80095fa:	e7e5      	b.n	80095c8 <__d2b+0x54>
 80095fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009600:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009604:	6030      	str	r0, [r6, #0]
 8009606:	6918      	ldr	r0, [r3, #16]
 8009608:	f7ff fdad 	bl	8009166 <__hi0bits>
 800960c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009610:	e7e1      	b.n	80095d6 <__d2b+0x62>

08009612 <_calloc_r>:
 8009612:	b538      	push	{r3, r4, r5, lr}
 8009614:	fb02 f401 	mul.w	r4, r2, r1
 8009618:	4621      	mov	r1, r4
 800961a:	f000 f809 	bl	8009630 <_malloc_r>
 800961e:	4605      	mov	r5, r0
 8009620:	b118      	cbz	r0, 800962a <_calloc_r+0x18>
 8009622:	4622      	mov	r2, r4
 8009624:	2100      	movs	r1, #0
 8009626:	f7fe fb6f 	bl	8007d08 <memset>
 800962a:	4628      	mov	r0, r5
 800962c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009630 <_malloc_r>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	1ccd      	adds	r5, r1, #3
 8009634:	f025 0503 	bic.w	r5, r5, #3
 8009638:	3508      	adds	r5, #8
 800963a:	2d0c      	cmp	r5, #12
 800963c:	bf38      	it	cc
 800963e:	250c      	movcc	r5, #12
 8009640:	2d00      	cmp	r5, #0
 8009642:	4606      	mov	r6, r0
 8009644:	db01      	blt.n	800964a <_malloc_r+0x1a>
 8009646:	42a9      	cmp	r1, r5
 8009648:	d903      	bls.n	8009652 <_malloc_r+0x22>
 800964a:	230c      	movs	r3, #12
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	2000      	movs	r0, #0
 8009650:	bd70      	pop	{r4, r5, r6, pc}
 8009652:	f000 f869 	bl	8009728 <__malloc_lock>
 8009656:	4a21      	ldr	r2, [pc, #132]	; (80096dc <_malloc_r+0xac>)
 8009658:	6814      	ldr	r4, [r2, #0]
 800965a:	4621      	mov	r1, r4
 800965c:	b991      	cbnz	r1, 8009684 <_malloc_r+0x54>
 800965e:	4c20      	ldr	r4, [pc, #128]	; (80096e0 <_malloc_r+0xb0>)
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	b91b      	cbnz	r3, 800966c <_malloc_r+0x3c>
 8009664:	4630      	mov	r0, r6
 8009666:	f000 f83d 	bl	80096e4 <_sbrk_r>
 800966a:	6020      	str	r0, [r4, #0]
 800966c:	4629      	mov	r1, r5
 800966e:	4630      	mov	r0, r6
 8009670:	f000 f838 	bl	80096e4 <_sbrk_r>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d124      	bne.n	80096c2 <_malloc_r+0x92>
 8009678:	230c      	movs	r3, #12
 800967a:	4630      	mov	r0, r6
 800967c:	6033      	str	r3, [r6, #0]
 800967e:	f000 f854 	bl	800972a <__malloc_unlock>
 8009682:	e7e4      	b.n	800964e <_malloc_r+0x1e>
 8009684:	680b      	ldr	r3, [r1, #0]
 8009686:	1b5b      	subs	r3, r3, r5
 8009688:	d418      	bmi.n	80096bc <_malloc_r+0x8c>
 800968a:	2b0b      	cmp	r3, #11
 800968c:	d90f      	bls.n	80096ae <_malloc_r+0x7e>
 800968e:	600b      	str	r3, [r1, #0]
 8009690:	18cc      	adds	r4, r1, r3
 8009692:	50cd      	str	r5, [r1, r3]
 8009694:	4630      	mov	r0, r6
 8009696:	f000 f848 	bl	800972a <__malloc_unlock>
 800969a:	f104 000b 	add.w	r0, r4, #11
 800969e:	1d23      	adds	r3, r4, #4
 80096a0:	f020 0007 	bic.w	r0, r0, #7
 80096a4:	1ac3      	subs	r3, r0, r3
 80096a6:	d0d3      	beq.n	8009650 <_malloc_r+0x20>
 80096a8:	425a      	negs	r2, r3
 80096aa:	50e2      	str	r2, [r4, r3]
 80096ac:	e7d0      	b.n	8009650 <_malloc_r+0x20>
 80096ae:	684b      	ldr	r3, [r1, #4]
 80096b0:	428c      	cmp	r4, r1
 80096b2:	bf16      	itet	ne
 80096b4:	6063      	strne	r3, [r4, #4]
 80096b6:	6013      	streq	r3, [r2, #0]
 80096b8:	460c      	movne	r4, r1
 80096ba:	e7eb      	b.n	8009694 <_malloc_r+0x64>
 80096bc:	460c      	mov	r4, r1
 80096be:	6849      	ldr	r1, [r1, #4]
 80096c0:	e7cc      	b.n	800965c <_malloc_r+0x2c>
 80096c2:	1cc4      	adds	r4, r0, #3
 80096c4:	f024 0403 	bic.w	r4, r4, #3
 80096c8:	42a0      	cmp	r0, r4
 80096ca:	d005      	beq.n	80096d8 <_malloc_r+0xa8>
 80096cc:	1a21      	subs	r1, r4, r0
 80096ce:	4630      	mov	r0, r6
 80096d0:	f000 f808 	bl	80096e4 <_sbrk_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d0cf      	beq.n	8009678 <_malloc_r+0x48>
 80096d8:	6025      	str	r5, [r4, #0]
 80096da:	e7db      	b.n	8009694 <_malloc_r+0x64>
 80096dc:	2000022c 	.word	0x2000022c
 80096e0:	20000230 	.word	0x20000230

080096e4 <_sbrk_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	2300      	movs	r3, #0
 80096e8:	4c05      	ldr	r4, [pc, #20]	; (8009700 <_sbrk_r+0x1c>)
 80096ea:	4605      	mov	r5, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	f7fa ff38 	bl	8004564 <_sbrk>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_sbrk_r+0x1a>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_sbrk_r+0x1a>
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200004b4 	.word	0x200004b4

08009704 <__ascii_mbtowc>:
 8009704:	b082      	sub	sp, #8
 8009706:	b901      	cbnz	r1, 800970a <__ascii_mbtowc+0x6>
 8009708:	a901      	add	r1, sp, #4
 800970a:	b142      	cbz	r2, 800971e <__ascii_mbtowc+0x1a>
 800970c:	b14b      	cbz	r3, 8009722 <__ascii_mbtowc+0x1e>
 800970e:	7813      	ldrb	r3, [r2, #0]
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	1c10      	adds	r0, r2, #0
 8009716:	bf18      	it	ne
 8009718:	2001      	movne	r0, #1
 800971a:	b002      	add	sp, #8
 800971c:	4770      	bx	lr
 800971e:	4610      	mov	r0, r2
 8009720:	e7fb      	b.n	800971a <__ascii_mbtowc+0x16>
 8009722:	f06f 0001 	mvn.w	r0, #1
 8009726:	e7f8      	b.n	800971a <__ascii_mbtowc+0x16>

08009728 <__malloc_lock>:
 8009728:	4770      	bx	lr

0800972a <__malloc_unlock>:
 800972a:	4770      	bx	lr

0800972c <__ascii_wctomb>:
 800972c:	b149      	cbz	r1, 8009742 <__ascii_wctomb+0x16>
 800972e:	2aff      	cmp	r2, #255	; 0xff
 8009730:	bf8b      	itete	hi
 8009732:	238a      	movhi	r3, #138	; 0x8a
 8009734:	700a      	strbls	r2, [r1, #0]
 8009736:	6003      	strhi	r3, [r0, #0]
 8009738:	2001      	movls	r0, #1
 800973a:	bf88      	it	hi
 800973c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009740:	4770      	bx	lr
 8009742:	4608      	mov	r0, r1
 8009744:	4770      	bx	lr
	...

08009748 <_init>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr

08009754 <_fini>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr
