
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001788  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080018b8  080018c0  000118c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080018b8  080018b8  000118c0  2**0
                  CONTENTS
  4 .ARM          00000000  080018b8  080018b8  000118c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018b8  080018c0  000118c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018b8  080018b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000118c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  080018c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080018c0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b34  00000000  00000000  000118e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f4a  00000000  00000000  0001841d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  00019368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000220  00000000  00000000  00019610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006e70  00000000  00000000  00019830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003846  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00021e36  00000000  00000000  00023ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00045d1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008b4  00000000  00000000  00045d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080018a0 	.word	0x080018a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080018a0 	.word	0x080018a0

08000170 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000170:	b480      	push	{r7}
 8000172:	b089      	sub	sp, #36	; 0x24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 800017a:	2300      	movs	r3, #0
 800017c:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a96      	ldr	r2, [pc, #600]	; (80003e0 <GPIO_Init+0x270>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIO_Init+0x28>
 800018a:	4b96      	ldr	r3, [pc, #600]	; (80003e4 <GPIO_Init+0x274>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a95      	ldr	r2, [pc, #596]	; (80003e4 <GPIO_Init+0x274>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
 8000196:	e03c      	b.n	8000212 <GPIO_Init+0xa2>
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a93      	ldr	r2, [pc, #588]	; (80003e8 <GPIO_Init+0x278>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIO_Init+0x3e>
 80001a0:	4b90      	ldr	r3, [pc, #576]	; (80003e4 <GPIO_Init+0x274>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a8f      	ldr	r2, [pc, #572]	; (80003e4 <GPIO_Init+0x274>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	e031      	b.n	8000212 <GPIO_Init+0xa2>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a8e      	ldr	r2, [pc, #568]	; (80003ec <GPIO_Init+0x27c>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d106      	bne.n	80001c4 <GPIO_Init+0x54>
 80001b6:	4b8b      	ldr	r3, [pc, #556]	; (80003e4 <GPIO_Init+0x274>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a8a      	ldr	r2, [pc, #552]	; (80003e4 <GPIO_Init+0x274>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
 80001c2:	e026      	b.n	8000212 <GPIO_Init+0xa2>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a8a      	ldr	r2, [pc, #552]	; (80003f0 <GPIO_Init+0x280>)
 80001c8:	4293      	cmp	r3, r2
 80001ca:	d106      	bne.n	80001da <GPIO_Init+0x6a>
 80001cc:	4b85      	ldr	r3, [pc, #532]	; (80003e4 <GPIO_Init+0x274>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a84      	ldr	r2, [pc, #528]	; (80003e4 <GPIO_Init+0x274>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	e01b      	b.n	8000212 <GPIO_Init+0xa2>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a85      	ldr	r2, [pc, #532]	; (80003f4 <GPIO_Init+0x284>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_Init+0x80>
 80001e2:	4b80      	ldr	r3, [pc, #512]	; (80003e4 <GPIO_Init+0x274>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a7f      	ldr	r2, [pc, #508]	; (80003e4 <GPIO_Init+0x274>)
 80001e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ec:	6193      	str	r3, [r2, #24]
 80001ee:	e010      	b.n	8000212 <GPIO_Init+0xa2>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a81      	ldr	r2, [pc, #516]	; (80003f8 <GPIO_Init+0x288>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_Init+0x96>
 80001f8:	4b7a      	ldr	r3, [pc, #488]	; (80003e4 <GPIO_Init+0x274>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a79      	ldr	r2, [pc, #484]	; (80003e4 <GPIO_Init+0x274>)
 80001fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	e005      	b.n	8000212 <GPIO_Init+0xa2>
 8000206:	4b77      	ldr	r3, [pc, #476]	; (80003e4 <GPIO_Init+0x274>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a76      	ldr	r2, [pc, #472]	; (80003e4 <GPIO_Init+0x274>)
 800020c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000210:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8000212:	2300      	movs	r3, #0
 8000214:	76fb      	strb	r3, [r7, #27]
 8000216:	e1d0      	b.n	80005ba <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	7efa      	ldrb	r2, [r7, #27]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	4013      	ands	r3, r2
 8000226:	2b00      	cmp	r3, #0
 8000228:	f000 81c0 	beq.w	80005ac <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	2b11      	cmp	r3, #17
 8000232:	d039      	beq.n	80002a8 <GPIO_Init+0x138>
 8000234:	2b11      	cmp	r3, #17
 8000236:	d807      	bhi.n	8000248 <GPIO_Init+0xd8>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d016      	beq.n	800026a <GPIO_Init+0xfa>
 800023c:	2b01      	cmp	r3, #1
 800023e:	f0c0 8090 	bcc.w	8000362 <GPIO_Init+0x1f2>
 8000242:	2b02      	cmp	r3, #2
 8000244:	d04f      	beq.n	80002e6 <GPIO_Init+0x176>
 8000246:	e0bd      	b.n	80003c4 <GPIO_Init+0x254>
 8000248:	4a6c      	ldr	r2, [pc, #432]	; (80003fc <GPIO_Init+0x28c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	f000 8089 	beq.w	8000362 <GPIO_Init+0x1f2>
 8000250:	4a6a      	ldr	r2, [pc, #424]	; (80003fc <GPIO_Init+0x28c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d802      	bhi.n	800025c <GPIO_Init+0xec>
 8000256:	2b12      	cmp	r3, #18
 8000258:	d064      	beq.n	8000324 <GPIO_Init+0x1b4>
 800025a:	e0b3      	b.n	80003c4 <GPIO_Init+0x254>
 800025c:	4a68      	ldr	r2, [pc, #416]	; (8000400 <GPIO_Init+0x290>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d07f      	beq.n	8000362 <GPIO_Init+0x1f2>
 8000262:	4a68      	ldr	r2, [pc, #416]	; (8000404 <GPIO_Init+0x294>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d07c      	beq.n	8000362 <GPIO_Init+0x1f2>
 8000268:	e0ac      	b.n	80003c4 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	2b02      	cmp	r3, #2
 8000270:	d104      	bne.n	800027c <GPIO_Init+0x10c>
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	61fb      	str	r3, [r7, #28]
 800027a:	e010      	b.n	800029e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d104      	bne.n	800028e <GPIO_Init+0x11e>
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	61fb      	str	r3, [r7, #28]
 800028c:	e007      	b.n	800029e <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d103      	bne.n	800029e <GPIO_Init+0x12e>
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	f043 0303 	orr.w	r3, r3, #3
 800029c:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	f023 030c 	bic.w	r3, r3, #12
 80002a4:	61fb      	str	r3, [r7, #28]


					break;
 80002a6:	e08d      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d104      	bne.n	80002ba <GPIO_Init+0x14a>
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	61fb      	str	r3, [r7, #28]
 80002b8:	e010      	b.n	80002dc <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d104      	bne.n	80002cc <GPIO_Init+0x15c>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	61fb      	str	r3, [r7, #28]
 80002ca:	e007      	b.n	80002dc <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d103      	bne.n	80002dc <GPIO_Init+0x16c>
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	f043 0303 	orr.w	r3, r3, #3
 80002da:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	61fb      	str	r3, [r7, #28]

					break;
 80002e4:	e06e      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d104      	bne.n	80002f8 <GPIO_Init+0x188>
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
 80002f6:	e010      	b.n	800031a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d104      	bne.n	800030a <GPIO_Init+0x19a>
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
 8000308:	e007      	b.n	800031a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	2b03      	cmp	r3, #3
 8000310:	d103      	bne.n	800031a <GPIO_Init+0x1aa>
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	f043 0303 	orr.w	r3, r3, #3
 8000318:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	f043 0308 	orr.w	r3, r3, #8
 8000320:	61fb      	str	r3, [r7, #28]

					break;
 8000322:	e04f      	b.n	80003c4 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d104      	bne.n	8000336 <GPIO_Init+0x1c6>
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
 8000334:	e010      	b.n	8000358 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d104      	bne.n	8000348 <GPIO_Init+0x1d8>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	61fb      	str	r3, [r7, #28]
 8000346:	e007      	b.n	8000358 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	2b03      	cmp	r3, #3
 800034e:	d103      	bne.n	8000358 <GPIO_Init+0x1e8>
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f043 0303 	orr.w	r3, r3, #3
 8000356:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f043 030c 	orr.w	r3, r3, #12
 800035e:	61fb      	str	r3, [r7, #28]

					break;
 8000360:	e030      	b.n	80003c4 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	f023 0303 	bic.w	r3, r3, #3
 8000368:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d104      	bne.n	800037c <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 800037a:	e022      	b.n	80003c2 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10d      	bne.n	80003a0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	7efa      	ldrb	r2, [r7, #27]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	431a      	orrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	611a      	str	r2, [r3, #16]
					break;
 800039e:	e010      	b.n	80003c2 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d10c      	bne.n	80003c2 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	7efa      	ldrb	r2, [r7, #27]
 80003b6:	2101      	movs	r1, #1
 80003b8:	fa01 f202 	lsl.w	r2, r1, r2
 80003bc:	431a      	orrs	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	615a      	str	r2, [r3, #20]
					break;
 80003c2:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 80003c4:	7efb      	ldrb	r3, [r7, #27]
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d801      	bhi.n	80003ce <GPIO_Init+0x25e>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	e001      	b.n	80003d2 <GPIO_Init+0x262>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3304      	adds	r3, #4
 80003d2:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 80003d4:	7efb      	ldrb	r3, [r7, #27]
 80003d6:	2b07      	cmp	r3, #7
 80003d8:	d816      	bhi.n	8000408 <GPIO_Init+0x298>
 80003da:	7efb      	ldrb	r3, [r7, #27]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	e016      	b.n	800040e <GPIO_Init+0x29e>
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40011400 	.word	0x40011400
 80003f4:	40011800 	.word	0x40011800
 80003f8:	40011c00 	.word	0x40011c00
 80003fc:	10110000 	.word	0x10110000
 8000400:	10210000 	.word	0x10210000
 8000404:	10310000 	.word	0x10310000
 8000408:	7efb      	ldrb	r3, [r7, #27]
 800040a:	3b08      	subs	r3, #8
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	210f      	movs	r1, #15
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	69f9      	ldr	r1, [r7, #28]
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	431a      	orrs	r2, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	2b00      	cmp	r3, #0
 8000438:	f000 80b8 	beq.w	80005ac <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 800043c:	4b63      	ldr	r3, [pc, #396]	; (80005cc <GPIO_Init+0x45c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a62      	ldr	r2, [pc, #392]	; (80005cc <GPIO_Init+0x45c>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8000448:	7efb      	ldrb	r3, [r7, #27]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8000450:	7efb      	ldrb	r3, [r7, #27]
 8000452:	f003 0303 	and.w	r3, r3, #3
 8000456:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8000458:	4a5d      	ldr	r2, [pc, #372]	; (80005d0 <GPIO_Init+0x460>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3302      	adds	r3, #2
 800045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	210f      	movs	r1, #15
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4958      	ldr	r1, [pc, #352]	; (80005d4 <GPIO_Init+0x464>)
 8000474:	428b      	cmp	r3, r1
 8000476:	d01f      	beq.n	80004b8 <GPIO_Init+0x348>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4957      	ldr	r1, [pc, #348]	; (80005d8 <GPIO_Init+0x468>)
 800047c:	428b      	cmp	r3, r1
 800047e:	d019      	beq.n	80004b4 <GPIO_Init+0x344>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4956      	ldr	r1, [pc, #344]	; (80005dc <GPIO_Init+0x46c>)
 8000484:	428b      	cmp	r3, r1
 8000486:	d013      	beq.n	80004b0 <GPIO_Init+0x340>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4955      	ldr	r1, [pc, #340]	; (80005e0 <GPIO_Init+0x470>)
 800048c:	428b      	cmp	r3, r1
 800048e:	d00d      	beq.n	80004ac <GPIO_Init+0x33c>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4954      	ldr	r1, [pc, #336]	; (80005e4 <GPIO_Init+0x474>)
 8000494:	428b      	cmp	r3, r1
 8000496:	d007      	beq.n	80004a8 <GPIO_Init+0x338>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4953      	ldr	r1, [pc, #332]	; (80005e8 <GPIO_Init+0x478>)
 800049c:	428b      	cmp	r3, r1
 800049e:	d101      	bne.n	80004a4 <GPIO_Init+0x334>
 80004a0:	2305      	movs	r3, #5
 80004a2:	e00a      	b.n	80004ba <GPIO_Init+0x34a>
 80004a4:	2306      	movs	r3, #6
 80004a6:	e008      	b.n	80004ba <GPIO_Init+0x34a>
 80004a8:	2304      	movs	r3, #4
 80004aa:	e006      	b.n	80004ba <GPIO_Init+0x34a>
 80004ac:	2303      	movs	r3, #3
 80004ae:	e004      	b.n	80004ba <GPIO_Init+0x34a>
 80004b0:	2302      	movs	r3, #2
 80004b2:	e002      	b.n	80004ba <GPIO_Init+0x34a>
 80004b4:	2301      	movs	r3, #1
 80004b6:	e000      	b.n	80004ba <GPIO_Init+0x34a>
 80004b8:	2300      	movs	r3, #0
 80004ba:	68b9      	ldr	r1, [r7, #8]
 80004bc:	0089      	lsls	r1, r1, #2
 80004be:	408b      	lsls	r3, r1
 80004c0:	4943      	ldr	r1, [pc, #268]	; (80005d0 <GPIO_Init+0x460>)
 80004c2:	431a      	orrs	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3302      	adds	r3, #2
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00a      	beq.n	80004ee <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 80004d8:	4b44      	ldr	r3, [pc, #272]	; (80005ec <GPIO_Init+0x47c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	7efa      	ldrb	r2, [r7, #27]
 80004de:	2101      	movs	r1, #1
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a41      	ldr	r2, [pc, #260]	; (80005ec <GPIO_Init+0x47c>)
 80004e8:	430b      	orrs	r3, r1
 80004ea:	6013      	str	r3, [r2, #0]
 80004ec:	e00a      	b.n	8000504 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <GPIO_Init+0x47c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	7efa      	ldrb	r2, [r7, #27]
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a3b      	ldr	r2, [pc, #236]	; (80005ec <GPIO_Init+0x47c>)
 8000500:	400b      	ands	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00a      	beq.n	8000526 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8000510:	4b36      	ldr	r3, [pc, #216]	; (80005ec <GPIO_Init+0x47c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	7efa      	ldrb	r2, [r7, #27]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a33      	ldr	r2, [pc, #204]	; (80005ec <GPIO_Init+0x47c>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6053      	str	r3, [r2, #4]
 8000524:	e00a      	b.n	800053c <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8000526:	4b31      	ldr	r3, [pc, #196]	; (80005ec <GPIO_Init+0x47c>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	7efa      	ldrb	r2, [r7, #27]
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	43d2      	mvns	r2, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a2d      	ldr	r2, [pc, #180]	; (80005ec <GPIO_Init+0x47c>)
 8000538:	400b      	ands	r3, r1
 800053a:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00a      	beq.n	800055e <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <GPIO_Init+0x47c>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	7efa      	ldrb	r2, [r7, #27]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a25      	ldr	r2, [pc, #148]	; (80005ec <GPIO_Init+0x47c>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6093      	str	r3, [r2, #8]
 800055c:	e00a      	b.n	8000574 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <GPIO_Init+0x47c>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	7efa      	ldrb	r2, [r7, #27]
 8000564:	2101      	movs	r1, #1
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <GPIO_Init+0x47c>)
 8000570:	400b      	ands	r3, r1
 8000572:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00a      	beq.n	8000596 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <GPIO_Init+0x47c>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	7efa      	ldrb	r2, [r7, #27]
 8000586:	2101      	movs	r1, #1
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <GPIO_Init+0x47c>)
 8000590:	430b      	orrs	r3, r1
 8000592:	60d3      	str	r3, [r2, #12]
 8000594:	e00a      	b.n	80005ac <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <GPIO_Init+0x47c>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	7efa      	ldrb	r2, [r7, #27]
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a11      	ldr	r2, [pc, #68]	; (80005ec <GPIO_Init+0x47c>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 80005b4:	7efb      	ldrb	r3, [r7, #27]
 80005b6:	3301      	adds	r3, #1
 80005b8:	76fb      	strb	r3, [r7, #27]
 80005ba:	7efb      	ldrb	r3, [r7, #27]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	f67f ae2b 	bls.w	8000218 <GPIO_Init+0xa8>
	}
}
 80005c2:	bf00      	nop
 80005c4:	3724      	adds	r7, #36	; 0x24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010000 	.word	0x40010000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	40011000 	.word	0x40011000
 80005e0:	40011400 	.word	0x40011400
 80005e4:	40011800 	.word	0x40011800
 80005e8:	40011c00 	.word	0x40011c00
 80005ec:	40010400 	.word	0x40010400

080005f0 <GPIO_WritePin>:
	else									return GPIO_PIN_RESET;
}


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
 80005fc:	4613      	mov	r3, r2
 80005fe:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8000600:	787b      	ldrb	r3, [r7, #1]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d106      	bne.n	8000614 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691a      	ldr	r2, [r3, #16]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8000612:	e006      	b.n	8000622 <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691a      	ldr	r2, [r3, #16]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	041b      	lsls	r3, r3, #16
 800061c:	431a      	orrs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	611a      	str	r2, [r3, #16]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
 8000638:	4613      	mov	r3, r2
 800063a:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | GPIO_Pin_To_Set;
 8000640:	883b      	ldrh	r3, [r7, #0]
 8000642:	041a      	lsls	r2, r3, #16
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	4313      	orrs	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	691a      	ldr	r2, [r3, #16]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	611a      	str	r2, [r3, #16]
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <GPIO_TogglePin>:
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
}


void GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
	if( (GPIOx->ODR & GPIO_Pin) )
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	4013      	ands	r3, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d007      	beq.n	8000688 <GPIO_TogglePin+0x28>
	{
		// State of pin was LOW
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691a      	ldr	r2, [r3, #16]
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	041b      	lsls	r3, r3, #16
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	611a      	str	r2, [r3, #16]
	else
	{
		// State of pin was HIGH
		GPIOx->BSRR |= GPIO_Pin;
	}
}
 8000686:	e005      	b.n	8000694 <GPIO_TogglePin+0x34>
		GPIOx->BSRR |= GPIO_Pin;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691a      	ldr	r2, [r3, #16]
 800068c:	887b      	ldrh	r3, [r7, #2]
 800068e:	431a      	orrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	611a      	str	r2, [r3, #16]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
	...

080006a0 <EXTI_IRQHandling>:


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <EXTI_IRQHandling+0x34>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4013      	ands	r3, r2
 80006b0:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <EXTI_IRQHandling+0x34>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	4905      	ldr	r1, [pc, #20]	; (80006d4 <EXTI_IRQHandling+0x34>)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f001 f85d 	bl	8001784 <EXTI_Callback>
	}
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010400 	.word	0x40010400

080006d8 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d011      	beq.n	8000710 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f4:	d10c      	bne.n	8000710 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <RCC_OscConfig+0x9c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <RCC_OscConfig+0x9c>)
 80006fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000700:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8000702:	bf00      	nop
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <RCC_OscConfig+0x9c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0f9      	beq.n	8000704 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d128      	bne.n	800076a <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <RCC_OscConfig+0x9c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <RCC_OscConfig+0x9c>)
 800071e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000722:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800072c:	d105      	bne.n	800073a <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <RCC_OscConfig+0x9c>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <RCC_OscConfig+0x9c>)
 8000734:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000738:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <RCC_OscConfig+0x9c>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4313      	orrs	r3, r2
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <RCC_OscConfig+0x9c>)
 800074a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074e:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <RCC_OscConfig+0x9c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <RCC_OscConfig+0x9c>)
 8000756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800075a:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 800075c:	bf00      	nop
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <RCC_OscConfig+0x9c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <RCC_OscConfig+0x86>
	}
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <RCC_ClockConfig+0x7c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f023 0207 	bic.w	r2, r3, #7
 800078a:	491a      	ldr	r1, [pc, #104]	; (80007f4 <RCC_ClockConfig+0x7c>)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4313      	orrs	r3, r2
 8000790:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <RCC_ClockConfig+0x80>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4916      	ldr	r1, [pc, #88]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007a0:	4313      	orrs	r3, r2
 80007a2:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4911      	ldr	r1, [pc, #68]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007c4:	4313      	orrs	r3, r2
 80007c6:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f023 0203 	bic.w	r2, r3, #3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4908      	ldr	r1, [pc, #32]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007d6:	4313      	orrs	r3, r2
 80007d8:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 80007da:	bf00      	nop
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <RCC_ClockConfig+0x80>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f9      	beq.n	80007dc <RCC_ClockConfig+0x64>
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000
 80007f8:	40021000 	.word	0x40021000

080007fc <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7f1b      	ldrb	r3, [r3, #28]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10b      	bne.n	8000826 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc8e 	bl	8001134 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f81f 	bl	800085c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	771a      	strb	r2, [r3, #28]
 8000824:	e000      	b.n	8000828 <TIM_Base_Init+0x2c>
		return;
 8000826:	bf00      	nop
}
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7f1b      	ldrb	r3, [r3, #28]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d109      	bne.n	8000854 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 fc8f 	bl	8001164 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f808 	bl	800085c <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	771a      	strb	r2, [r3, #28]
 8000852:	e000      	b.n	8000856 <TIM_PWM_Init+0x28>
		return;
 8000854:	bf00      	nop
}
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4313      	orrs	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	430a      	orrs	r2, r1
 800088e:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	68d2      	ldr	r2, [r2, #12]
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6852      	ldr	r2, [r2, #4]
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6952      	ldr	r2, [r2, #20]
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f042 0201 	orr.w	r2, r2, #1
 80008bc:	615a      	str	r2, [r3, #20]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	switch (Channel)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0c      	cmp	r3, #12
 80008d8:	f200 80d3 	bhi.w	8000a82 <TIM_PWM_ConfigChannel+0x1ba>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <TIM_PWM_ConfigChannel+0x1c>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	08000919 	.word	0x08000919
 80008e8:	08000a83 	.word	0x08000a83
 80008ec:	08000a83 	.word	0x08000a83
 80008f0:	08000a83 	.word	0x08000a83
 80008f4:	08000971 	.word	0x08000971
 80008f8:	08000a83 	.word	0x08000a83
 80008fc:	08000a83 	.word	0x08000a83
 8000900:	08000a83 	.word	0x08000a83
 8000904:	080009cd 	.word	0x080009cd
 8000908:	08000a83 	.word	0x08000a83
 800090c:	08000a83 	.word	0x08000a83
 8000910:	08000a83 	.word	0x08000a83
 8000914:	08000a27 	.word	0x08000a27
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6a1a      	ldr	r2, [r3, #32]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0201 	bic.w	r2, r2, #1
 8000926:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a1b      	ldr	r3, [r3, #32]
 8000944:	f023 0102 	bic.w	r1, r3, #2
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	430a      	orrs	r2, r1
 8000952:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	6852      	ldr	r2, [r2, #4]
 800095c:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0208 	orr.w	r2, r2, #8
 800096c:	619a      	str	r2, [r3, #24]

			break;
 800096e:	e089      	b.n	8000a84 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0210 	bic.w	r2, r2, #16
 800097e:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	021a      	lsls	r2, r3, #8
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f023 0120 	bic.w	r1, r3, #32
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	011a      	lsls	r2, r3, #4
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c8:	619a      	str	r2, [r3, #24]

			break;
 80009ca:	e05b      	b.n	8000a84 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6a1a      	ldr	r2, [r3, #32]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009da:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	430a      	orrs	r2, r1
 80009f0:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	021a      	lsls	r2, r3, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	6852      	ldr	r2, [r2, #4]
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0208 	orr.w	r2, r2, #8
 8000a22:	61da      	str	r2, [r3, #28]

			break;
 8000a24:	e02e      	b.n	8000a84 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6a1a      	ldr	r2, [r3, #32]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a34:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	021a      	lsls	r2, r3, #8
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	031a      	lsls	r2, r3, #12
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	6852      	ldr	r2, [r2, #4]
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	69da      	ldr	r2, [r3, #28]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a7e:	61da      	str	r2, [r3, #28]

			break;
 8000a80:	e000      	b.n	8000a84 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 8000a82:	bf00      	nop
	}
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d157      	bne.n	8000b52 <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a5a      	ldr	r2, [pc, #360]	; (8000c10 <TIM_PeripheralClockControl+0x180>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d106      	bne.n	8000ab8 <TIM_PeripheralClockControl+0x28>
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a59      	ldr	r2, [pc, #356]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab4:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8000ab6:	e0a6      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abe:	d106      	bne.n	8000ace <TIM_PeripheralClockControl+0x3e>
 8000ac0:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	61d3      	str	r3, [r2, #28]
}
 8000acc:	e09b      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a51      	ldr	r2, [pc, #324]	; (8000c18 <TIM_PeripheralClockControl+0x188>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <TIM_PeripheralClockControl+0x54>
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	61d3      	str	r3, [r2, #28]
}
 8000ae2:	e090      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a4d      	ldr	r2, [pc, #308]	; (8000c1c <TIM_PeripheralClockControl+0x18c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <TIM_PeripheralClockControl+0x6a>
 8000aec:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	61d3      	str	r3, [r2, #28]
}
 8000af8:	e085      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a48      	ldr	r2, [pc, #288]	; (8000c20 <TIM_PeripheralClockControl+0x190>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <TIM_PeripheralClockControl+0x80>
 8000b02:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	61d3      	str	r3, [r2, #28]
}
 8000b0e:	e07a      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <TIM_PeripheralClockControl+0x194>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <TIM_PeripheralClockControl+0x96>
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	4a3d      	ldr	r2, [pc, #244]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	61d3      	str	r3, [r2, #28]
}
 8000b24:	e06f      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a3f      	ldr	r2, [pc, #252]	; (8000c28 <TIM_PeripheralClockControl+0x198>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <TIM_PeripheralClockControl+0xac>
 8000b2e:	4b39      	ldr	r3, [pc, #228]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	61d3      	str	r3, [r2, #28]
}
 8000b3a:	e064      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <TIM_PeripheralClockControl+0x19c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d160      	bne.n	8000c06 <TIM_PeripheralClockControl+0x176>
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b4e:	6193      	str	r3, [r2, #24]
}
 8000b50:	e059      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d156      	bne.n	8000c06 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <TIM_PeripheralClockControl+0x180>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d106      	bne.n	8000b6e <TIM_PeripheralClockControl+0xde>
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b6a:	6193      	str	r3, [r2, #24]
}
 8000b6c:	e04b      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d106      	bne.n	8000b84 <TIM_PeripheralClockControl+0xf4>
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b7c:	f023 0301 	bic.w	r3, r3, #1
 8000b80:	61d3      	str	r3, [r2, #28]
}
 8000b82:	e040      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <TIM_PeripheralClockControl+0x188>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <TIM_PeripheralClockControl+0x10a>
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	61d3      	str	r3, [r2, #28]
}
 8000b98:	e035      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <TIM_PeripheralClockControl+0x18c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <TIM_PeripheralClockControl+0x120>
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	61d3      	str	r3, [r2, #28]
}
 8000bae:	e02a      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <TIM_PeripheralClockControl+0x190>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d106      	bne.n	8000bc6 <TIM_PeripheralClockControl+0x136>
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bbe:	f023 0308 	bic.w	r3, r3, #8
 8000bc2:	61d3      	str	r3, [r2, #28]
}
 8000bc4:	e01f      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <TIM_PeripheralClockControl+0x194>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <TIM_PeripheralClockControl+0x14c>
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bd4:	f023 0310 	bic.w	r3, r3, #16
 8000bd8:	61d3      	str	r3, [r2, #28]
}
 8000bda:	e014      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <TIM_PeripheralClockControl+0x198>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <TIM_PeripheralClockControl+0x162>
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bea:	f023 0320 	bic.w	r3, r3, #32
 8000bee:	61d3      	str	r3, [r2, #28]
}
 8000bf0:	e009      	b.n	8000c06 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <TIM_PeripheralClockControl+0x19c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d105      	bne.n	8000c06 <TIM_PeripheralClockControl+0x176>
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <TIM_PeripheralClockControl+0x184>)
 8000c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c04:	6193      	str	r3, [r2, #24]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40012c00 	.word	0x40012c00
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40000800 	.word	0x40000800
 8000c20:	40000c00 	.word	0x40000c00
 8000c24:	40001000 	.word	0x40001000
 8000c28:	40001400 	.word	0x40001400
 8000c2c:	40013400 	.word	0x40013400

08000c30 <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d108      	bne.n	8000c52 <TIM_PWM_Start+0x22>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6a1a      	ldr	r2, [r3, #32]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0201 	orr.w	r2, r2, #1
 8000c4e:	621a      	str	r2, [r3, #32]
 8000c50:	e022      	b.n	8000c98 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d108      	bne.n	8000c6a <TIM_PWM_Start+0x3a>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f042 0210 	orr.w	r2, r2, #16
 8000c66:	621a      	str	r2, [r3, #32]
 8000c68:	e016      	b.n	8000c98 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d108      	bne.n	8000c82 <TIM_PWM_Start+0x52>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c7e:	621a      	str	r2, [r3, #32]
 8000c80:	e00a      	b.n	8000c98 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b0c      	cmp	r3, #12
 8000c86:	d107      	bne.n	8000c98 <TIM_PWM_Start+0x68>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c96:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ca6:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 0201 	orr.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
	...

08000cc4 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <TIM_IRQHandling+0x3e>
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d008      	beq.n	8000d02 <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event

		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <TIM_IRQHandling+0x48>)
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <TIM_IRQHandling+0x48>)
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fd05 	bl	800170c <TIM_PeriodElapsedCallback>
	}
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40001000 	.word	0x40001000

08000d10 <BLDC_BootstrapCap_Charge>:
/*																						*/
/*									BLDC Motor APIs										*/
/*																						*/
/****************************************************************************************/
void BLDC_BootstrapCap_Charge(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
/* Disable All PWM channels */
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a1a      	ldr	r2, [r3, #32]
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a1a      	ldr	r2, [r3, #32]
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0210 	bic.w	r2, r2, #16
 8000d34:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a1a      	ldr	r2, [r3, #32]
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d44:	621a      	str	r2, [r3, #32]

/* Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode */

	GPIO_InitTypeDef GPIOInit;
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8000d46:	463b      	mov	r3, r7
 8000d48:	2210      	movs	r2, #16
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fd9f 	bl	8001890 <memset>

	// 1. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000d52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d56:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIOInit);
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4824      	ldr	r0, [pc, #144]	; (8000dfc <BLDC_BootstrapCap_Charge+0xec>)
 8000d6a:	f7ff fa01 	bl	8000170 <GPIO_Init>

/* Charge Bootstrap Capacitor for 1ms */
	GPIO_WritePin(GPIOB, (GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15), GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d74:	4822      	ldr	r0, [pc, #136]	; (8000e00 <BLDC_BootstrapCap_Charge+0xf0>)
 8000d76:	f7ff fc3b 	bl	80005f0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA, (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10), GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d80:	481e      	ldr	r0, [pc, #120]	; (8000dfc <BLDC_BootstrapCap_Charge+0xec>)
 8000d82:	f7ff fc35 	bl	80005f0 <GPIO_WritePin>
	Delay_ms(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fbfe 	bl	8001588 <Delay_ms>
	GPIO_WritePin(GPIOA, (GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10), GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d92:	481a      	ldr	r0, [pc, #104]	; (8000dfc <BLDC_BootstrapCap_Charge+0xec>)
 8000d94:	f7ff fc2c 	bl	80005f0 <GPIO_WritePin>

/* Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels */
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fd76 	bl	8001890 <memset>
	GPIOInit.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000da4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000da8:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIOInit);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <BLDC_BootstrapCap_Charge+0xec>)
 8000dbc:	f7ff f9d8 	bl	8000170 <GPIO_Init>

/* Enable All PWM channels */
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a1a      	ldr	r2, [r3, #32]
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0210 	orr.w	r2, r2, #16
 8000dde:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <BLDC_BootstrapCap_Charge+0xe8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dee:	621a      	str	r2, [r3, #32]
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000030 	.word	0x20000030
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <BLDC_Step1>:


void BLDC_Step1(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	// 1. UT Logic On (PB13)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_13, GPIO_PIN_14 | GPIO_PIN_15);
 8000e08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <BLDC_Step1+0x48>)
 8000e12:	f7ff fc0b 	bl	800062c <GPIO_ModifyPin>

	// 2. VB PWM On (PA9)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a1a      	ldr	r2, [r3, #32]
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0201 	bic.w	r2, r2, #1
 8000e24:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e34:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <BLDC_Step1+0x4c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0210 	orr.w	r2, r2, #16
 8000e44:	621a      	str	r2, [r3, #32]
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	20000030 	.word	0x20000030

08000e54 <BLDC_Step2>:

void BLDC_Step2(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	// 1. WT Logic On (PB15)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_15, GPIO_PIN_13 | GPIO_PIN_14);
 8000e58:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <BLDC_Step2+0x48>)
 8000e62:	f7ff fbe3 	bl	800062c <GPIO_ModifyPin>

	// 2. VB PWM On (PA9)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e84:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a1a      	ldr	r2, [r3, #32]
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <BLDC_Step2+0x4c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0210 	orr.w	r2, r2, #16
 8000e94:	621a      	str	r2, [r3, #32]
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	20000030 	.word	0x20000030

08000ea4 <BLDC_Step3>:

void BLDC_Step3(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	// 1. WT Logic On (PB15)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_15, GPIO_PIN_13 | GPIO_PIN_14);
 8000ea8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb0:	480e      	ldr	r0, [pc, #56]	; (8000eec <BLDC_Step3+0x48>)
 8000eb2:	f7ff fbbb 	bl	800062c <GPIO_ModifyPin>

	// 2. UB PWM On (PA8)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a1a      	ldr	r2, [r3, #32]
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a1a      	ldr	r2, [r3, #32]
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <BLDC_Step3+0x4c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	621a      	str	r2, [r3, #32]
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	20000030 	.word	0x20000030

08000ef4 <BLDC_Step4>:

void BLDC_Step4(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	// 1. VT Logic On (PB14)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_14, GPIO_PIN_13 | GPIO_PIN_15);
 8000ef8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <BLDC_Step4+0x48>)
 8000f02:	f7ff fb93 	bl	800062c <GPIO_ModifyPin>

	// 2. UB PWM On (PA8)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0210 	bic.w	r2, r2, #16
 8000f14:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f24:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <BLDC_Step4+0x4c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	621a      	str	r2, [r3, #32]
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	20000030 	.word	0x20000030

08000f44 <BLDC_Step5>:

void BLDC_Step5(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	// 1. VT Logic On (PB14)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_14, GPIO_PIN_13 | GPIO_PIN_15);
 8000f48:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <BLDC_Step5+0x48>)
 8000f52:	f7ff fb6b 	bl	800062c <GPIO_ModifyPin>

	// 2. WB PWM On (PA10)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0210 	bic.w	r2, r2, #16
 8000f74:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <BLDC_Step5+0x4c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f84:	621a      	str	r2, [r3, #32]
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	20000030 	.word	0x20000030

08000f94 <BLDC_Step6>:

void BLDC_Step6(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	// 1. UT Logic On (PB13)
	GPIO_ModifyPin(GPIOB, GPIO_PIN_13, GPIO_PIN_14 | GPIO_PIN_15);
 8000f98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa0:	480e      	ldr	r0, [pc, #56]	; (8000fdc <BLDC_Step6+0x48>)
 8000fa2:	f7ff fb43 	bl	800062c <GPIO_ModifyPin>

	// 2. WB PWM On (PA10)
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a1a      	ldr	r2, [r3, #32]
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0210 	bic.w	r2, r2, #16
 8000fc4:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <BLDC_Step6+0x4c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd4:	621a      	str	r2, [r3, #32]
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	20000030 	.word	0x20000030

08000fe4 <USART1_IRQHandler>:

#include "main.h"


void USART1_IRQHandler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <TIM6_IRQHandler>:


void TIM6_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM6_IRQHandler+0x10>)
 8000ff6:	f7ff fe65 	bl	8000cc4 <TIM_IRQHandling>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000050 	.word	0x20000050

08001004 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8);
 8001008:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 800100c:	f7ff fb48 	bl	80006a0 <EXTI_IRQHandling>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	EXTI->PR |= GPIO_PIN_0;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <EXTI0_IRQHandler+0x1c>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <EXTI0_IRQHandler+0x1c>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]

	GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001024:	2102      	movs	r1, #2
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <EXTI0_IRQHandler+0x20>)
 8001028:	f7ff fb1a 	bl	8000660 <GPIO_TogglePin>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40010400 	.word	0x40010400
 8001034:	40010800 	.word	0x40010800

08001038 <main>:

void GPIO_TestInit(void);


int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	Delay_ms(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f000 faa2 	bl	8001588 <Delay_ms>

	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8001044:	2048      	movs	r0, #72	; 0x48
 8001046:	f000 f949 	bl	80012dc <SystemClock_Config>

	// 2. Clear All members of Handle structures to 0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4828      	ldr	r0, [pc, #160]	; (80010f0 <main+0xb8>)
 8001050:	f000 fc1e 	bl	8001890 <memset>
	memset(&TIM1Handle, 0, sizeof(TIM1Handle));
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4826      	ldr	r0, [pc, #152]	; (80010f4 <main+0xbc>)
 800105a:	f000 fc19 	bl	8001890 <memset>
	memset(&EXTIHandle, 0, sizeof(EXTIHandle));
 800105e:	2214      	movs	r2, #20
 8001060:	2100      	movs	r1, #0
 8001062:	4825      	ldr	r0, [pc, #148]	; (80010f8 <main+0xc0>)
 8001064:	f000 fc14 	bl	8001890 <memset>

	// 3. Initialize peripherals
	GPIO_BLDC_Init();			// GPIO init for U/V/W
 8001068:	f000 fa9e 	bl	80015a8 <GPIO_BLDC_Init>
	EXTI_Init(&EXTIHandle);		// EXTI init for Interrupt triggered by Hallphase change
 800106c:	4822      	ldr	r0, [pc, #136]	; (80010f8 <main+0xc0>)
 800106e:	f000 fb63 	bl	8001738 <EXTI_Init>
	TIM6_Init(&TIM6Handle);		// TIM6 init for 1ms period of time base
 8001072:	481f      	ldr	r0, [pc, #124]	; (80010f0 <main+0xb8>)
 8001074:	f000 fad2 	bl	800161c <TIM6_Init>
	TIM1_Init(&TIM1Handle);		// TIM1 init for PWM generation to drive BLDC motor
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <main+0xbc>)
 800107a:	f000 fb05 	bl	8001688 <TIM1_Init>

	// 4. Charge Bootstrap Capacitor
	BLDC_BootstrapCap_Charge();
 800107e:	f7ff fe47 	bl	8000d10 <BLDC_BootstrapCap_Charge>

	// 5. Start PWM for UB, VB, WB
	TIM_PWM_Start(&TIM1Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8001082:	2100      	movs	r1, #0
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <main+0xbc>)
 8001086:	f7ff fdd3 	bl	8000c30 <TIM_PWM_Start>
	TIM_PWM_Start(&TIM1Handle, TIM_CHANNEL_2);			// Start PWM for VB
 800108a:	2104      	movs	r1, #4
 800108c:	4819      	ldr	r0, [pc, #100]	; (80010f4 <main+0xbc>)
 800108e:	f7ff fdcf 	bl	8000c30 <TIM_PWM_Start>
	TIM_PWM_Start(&TIM1Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8001092:	2108      	movs	r1, #8
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <main+0xbc>)
 8001096:	f7ff fdcb 	bl	8000c30 <TIM_PWM_Start>

	// 6. Disable All PWM channels
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_1);
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <main+0xbc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a1a      	ldr	r2, [r3, #32]
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <main+0xbc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_2);
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <main+0xbc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <main+0xbc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0210 	bic.w	r2, r2, #16
 80010b8:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(&TIM1Handle, TIM_CHANNEL_3);
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <main+0xbc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <main+0xbc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c8:	621a      	str	r2, [r3, #32]

	// 7. Set PWM duty to 10%
	TIM_SET_COMPARE(&TIM1Handle, TIM_CHANNEL_1, 80);	// 80% duty
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <main+0xbc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2250      	movs	r2, #80	; 0x50
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(&TIM1Handle, TIM_CHANNEL_2, 80);	// 80% duty
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <main+0xbc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2250      	movs	r2, #80	; 0x50
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(&TIM1Handle, TIM_CHANNEL_3, 80);	// 80% duty
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <main+0xbc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2250      	movs	r2, #80	; 0x50
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

	Delay_ms(1000);
 80010e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e6:	f000 fa4f 	bl	8001588 <Delay_ms>

	GPIO_TestInit();
 80010ea:	f000 f807 	bl	80010fc <GPIO_TestInit>

	while(1)
 80010ee:	e7fe      	b.n	80010ee <main+0xb6>
 80010f0:	20000050 	.word	0x20000050
 80010f4:	20000030 	.word	0x20000030
 80010f8:	2000001c 	.word	0x2000001c

080010fc <GPIO_TestInit>:
	}
}


void GPIO_TestInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8001102:	463b      	mov	r3, r7
 8001104:	2210      	movs	r2, #16
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fbc1 	bl	8001890 <memset>

	GPIOInit.Pin = GPIO_PIN_1;
 800110e:	2302      	movs	r3, #2
 8001110:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIOInit);
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <GPIO_TestInit+0x34>)
 8001124:	f7ff f824 	bl	8000170 <GPIO_Init>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010800 	.word	0x40010800

08001134 <TIM_Base_MspInit>:
	USART_PeripheralClockControl(USARTx, ENABLE);
}


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <TIM_Base_MspInit+0x2c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d108      	bne.n	8001156 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fca2 	bl	8000a90 <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_15, ENABLE);
 800114c:	2201      	movs	r2, #1
 800114e:	210f      	movs	r1, #15
 8001150:	2036      	movs	r0, #54	; 0x36
 8001152:	f000 f85b 	bl	800120c <NVIC_IRQConfig>
	}

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40001000 	.word	0x40001000

08001164 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <TIM_PWM_MspInit+0x98>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d119      	bne.n	80011aa <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2214      	movs	r2, #20
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fb86 	bl	8001890 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <TIM_PWM_MspInit+0x9c>)
 8001186:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8001188:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800118c:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	3304      	adds	r3, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f7fe ffe3 	bl	8000170 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <TIM_PWM_MspInit+0xa0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d119      	bne.n	80011e8 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2214      	movs	r2, #20
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fb67 	bl	8001890 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <TIM_PWM_MspInit+0xa4>)
 80011c4:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80011c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011ca:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	3304      	adds	r3, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7fe ffc4 	bl	8000170 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc4e 	bl	8000a90 <TIM_PeripheralClockControl>
}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40010800 	.word	0x40010800
 8001204:	40000400 	.word	0x40000400
 8001208:	40011000 	.word	0x40011000

0800120c <NVIC_IRQConfig>:

#include "main.h"


void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	460b      	mov	r3, r1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d11d      	bne.n	8001260 <NVIC_IRQConfig+0x54>
	{
		if(IRQNumber < 32)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b1f      	cmp	r3, #31
 8001228:	d80a      	bhi.n	8001240 <NVIC_IRQConfig+0x34>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] |= (1 << IRQNumber);
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	4611      	mov	r1, r2
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800123a:	430b      	orrs	r3, r1
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e033      	b.n	80012a8 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3b      	cmp	r3, #59	; 0x3b
 8001244:	d830      	bhi.n	80012a8 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] |= (1 << (IRQNumber % 32));
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	f002 021f 	and.w	r2, r2, #31
 8001250:	2101      	movs	r1, #1
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	4611      	mov	r1, r2
 8001258:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800125a:	430b      	orrs	r3, r1
 800125c:	6053      	str	r3, [r2, #4]
 800125e:	e023      	b.n	80012a8 <NVIC_IRQConfig+0x9c>
		}

	}
	else if(En_or_Di == DISABLE)
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d120      	bne.n	80012a8 <NVIC_IRQConfig+0x9c>
	{
		if(IRQNumber < 32)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b1f      	cmp	r3, #31
 800126a:	d80c      	bhi.n	8001286 <NVIC_IRQConfig+0x7a>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] |= (1 << IRQNumber);
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800126e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001272:	79fa      	ldrb	r2, [r7, #7]
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4611      	mov	r1, r2
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800127e:	430b      	orrs	r3, r1
 8001280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001284:	e010      	b.n	80012a8 <NVIC_IRQConfig+0x9c>
		}
		else if(IRQNumber < 60)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b3b      	cmp	r3, #59	; 0x3b
 800128a:	d80d      	bhi.n	80012a8 <NVIC_IRQConfig+0x9c>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] |= (1 << (IRQNumber % 32));
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 800128e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4611      	mov	r1, r2
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 80012a2:	430b      	orrs	r3, r1
 80012a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] |= (IRQPriority << 4);
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4413      	add	r3, r2
 80012ae:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b259      	sxtb	r1, r3
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <NVIC_IRQConfig+0xcc>)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	4413      	add	r3, r2
 80012c8:	460a      	mov	r2, r1
 80012ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100

080012dc <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b092      	sub	sp, #72	; 0x48
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2228      	movs	r2, #40	; 0x28
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 facb 	bl	8001890 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fac4 	bl	8001890 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001310:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3b10      	subs	r3, #16
 8001324:	2b38      	cmp	r3, #56	; 0x38
 8001326:	f200 8101 	bhi.w	800152c <SystemClock_Config+0x250>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <SystemClock_Config+0x54>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001415 	.word	0x08001415
 8001334:	0800152d 	.word	0x0800152d
 8001338:	0800152d 	.word	0x0800152d
 800133c:	0800152d 	.word	0x0800152d
 8001340:	0800152d 	.word	0x0800152d
 8001344:	0800152d 	.word	0x0800152d
 8001348:	0800152d 	.word	0x0800152d
 800134c:	0800152d 	.word	0x0800152d
 8001350:	08001435 	.word	0x08001435
 8001354:	0800152d 	.word	0x0800152d
 8001358:	0800152d 	.word	0x0800152d
 800135c:	0800152d 	.word	0x0800152d
 8001360:	0800152d 	.word	0x0800152d
 8001364:	0800152d 	.word	0x0800152d
 8001368:	0800152d 	.word	0x0800152d
 800136c:	0800152d 	.word	0x0800152d
 8001370:	08001457 	.word	0x08001457
 8001374:	0800152d 	.word	0x0800152d
 8001378:	0800152d 	.word	0x0800152d
 800137c:	0800152d 	.word	0x0800152d
 8001380:	0800152d 	.word	0x0800152d
 8001384:	0800152d 	.word	0x0800152d
 8001388:	0800152d 	.word	0x0800152d
 800138c:	0800152d 	.word	0x0800152d
 8001390:	08001479 	.word	0x08001479
 8001394:	0800152d 	.word	0x0800152d
 8001398:	0800152d 	.word	0x0800152d
 800139c:	0800152d 	.word	0x0800152d
 80013a0:	0800152d 	.word	0x0800152d
 80013a4:	0800152d 	.word	0x0800152d
 80013a8:	0800152d 	.word	0x0800152d
 80013ac:	0800152d 	.word	0x0800152d
 80013b0:	0800149d 	.word	0x0800149d
 80013b4:	0800152d 	.word	0x0800152d
 80013b8:	0800152d 	.word	0x0800152d
 80013bc:	0800152d 	.word	0x0800152d
 80013c0:	0800152d 	.word	0x0800152d
 80013c4:	0800152d 	.word	0x0800152d
 80013c8:	0800152d 	.word	0x0800152d
 80013cc:	0800152d 	.word	0x0800152d
 80013d0:	080014c1 	.word	0x080014c1
 80013d4:	0800152d 	.word	0x0800152d
 80013d8:	0800152d 	.word	0x0800152d
 80013dc:	0800152d 	.word	0x0800152d
 80013e0:	0800152d 	.word	0x0800152d
 80013e4:	0800152d 	.word	0x0800152d
 80013e8:	0800152d 	.word	0x0800152d
 80013ec:	0800152d 	.word	0x0800152d
 80013f0:	080014e5 	.word	0x080014e5
 80013f4:	0800152d 	.word	0x0800152d
 80013f8:	0800152d 	.word	0x0800152d
 80013fc:	0800152d 	.word	0x0800152d
 8001400:	0800152d 	.word	0x0800152d
 8001404:	0800152d 	.word	0x0800152d
 8001408:	0800152d 	.word	0x0800152d
 800140c:	0800152d 	.word	0x0800152d
 8001410:	08001509 	.word	0x08001509
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8001414:	2300      	movs	r3, #0
 8001416:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001418:	230f      	movs	r3, #15
 800141a:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001432:	e07c      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8001434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001438:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800143a:	230f      	movs	r3, #15
 800143c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2302      	movs	r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001454:	e06b      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8001456:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800145a:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145c:	230f      	movs	r3, #15
 800145e:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2302      	movs	r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001476:	e05a      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8001478:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800147c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800147e:	230f      	movs	r3, #15
 8001480:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800149a:	e048      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 800149c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a2:	230f      	movs	r3, #15
 80014a4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a6:	2302      	movs	r3, #2
 80014a8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80014be:	e036      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 80014c0:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014c6:	230f      	movs	r3, #15
 80014c8:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 80014d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 80014dc:	2302      	movs	r3, #2
 80014de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 80014e2:	e024      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 80014e4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80014e8:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ea:	230f      	movs	r3, #15
 80014ec:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8001500:	2302      	movs	r3, #2
 8001502:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001506:	e012      	b.n	800152e <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8001508:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800150c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800150e:	230f      	movs	r3, #15
 8001510:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8001524:	2302      	movs	r3, #2
 8001526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 800152a:	e000      	b.n	800152e <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 800152c:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f8d0 	bl	80006d8 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8001538:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f918 	bl	8000778 <RCC_ClockConfig>
}
 8001548:	bf00      	nop
 800154a:	3748      	adds	r7, #72	; 0x48
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8001550:	b4b0      	push	{r4, r5, r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8001558:	2400      	movs	r4, #0
 800155a:	e006      	b.n	800156a <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 800155c:	2500      	movs	r5, #0
 800155e:	e001      	b.n	8001564 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8001560:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8001562:	3501      	adds	r5, #1
 8001564:	2d4c      	cmp	r5, #76	; 0x4c
 8001566:	d9fb      	bls.n	8001560 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8001568:	3401      	adds	r4, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <Delay_us+0x34>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	429c      	cmp	r4, r3
 8001576:	d3f1      	bcc.n	800155c <Delay_us+0xc>
		}
	}
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bcb0      	pop	{r4, r5, r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	cccccccd 	.word	0xcccccccd

08001588 <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffd8 	bl	8001550 <Delay_us>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <GPIO_BLDC_Init>:


void GPIO_BLDC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80015ae:	463b      	mov	r3, r7
 80015b0:	2210      	movs	r2, #16
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f96b 	bl	8001890 <memset>

	// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
	GPIOInit.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80015ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015be:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015c8:	2301      	movs	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOB, &GPIOInit);
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4810      	ldr	r0, [pc, #64]	; (8001614 <GPIO_BLDC_Init+0x6c>)
 80015d2:	f7fe fdcd 	bl	8000170 <GPIO_Init>

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80015d6:	463b      	mov	r3, r7
 80015d8:	2210      	movs	r2, #16
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f957 	bl	8001890 <memset>

	// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
	GPIOInit.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80015e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015e6:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015f0:	2301      	movs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
	GPIO_Init(GPIOA, &GPIOInit);
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <GPIO_BLDC_Init+0x70>)
 80015fa:	f7fe fdb9 	bl	8000170 <GPIO_Init>

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80015fe:	463b      	mov	r3, r7
 8001600:	2210      	movs	r2, #16
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f943 	bl	8001890 <memset>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40010800 	.word	0x40010800

0800161c <TIM6_Init>:
	USART_Init(pUARTHandle);
}


void TIM6_Init(TIM_HandleTypeDef *pTIMHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	// Init TIM6 Base
	pTIMHandle->Instance = TIM6;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <TIM6_Init+0x64>)
 8001628:	601a      	str	r2, [r3, #0]
	pTIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
	pTIMHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
	pTIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	619a      	str	r2, [r3, #24]
	pTIMHandle->Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001642:	605a      	str	r2, [r3, #4]
	pTIMHandle->Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2209      	movs	r2, #9
 8001648:	60da      	str	r2, [r3, #12]
	pTIMHandle->Init.RepetitionCounter = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(pTIMHandle);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff f8d3 	bl	80007fc <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <TIM6_Init+0x68>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <TIM6_Init+0x68>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <TIM6_Init+0x68>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <TIM6_Init+0x68>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40001000 	.word	0x40001000
 8001684:	20000050 	.word	0x20000050

08001688 <TIM1_Init>:


void TIM1_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	pTIMHandle->Instance = TIM1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <TIM1_Init+0x80>)
 8001694:	601a      	str	r2, [r3, #0]
	pTIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
	pTIMHandle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
	pTIMHandle->Init.Prescaler = (36-1);	//   72MHz / 36 = 2MHz
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2223      	movs	r2, #35	; 0x23
 80016a6:	605a      	str	r2, [r3, #4]
	pTIMHandle->Init.Period = (100-1);		//   2MHz / 100 = 10kHz
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2263      	movs	r2, #99	; 0x63
 80016ac:	60da      	str	r2, [r3, #12]
	TIM_PWM_Init(pTIMHandle);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff f8bd 	bl	800082e <TIM_PWM_Init>

	TIM_OC_InitTypeDef TIM1_PWMConfig;

	memset(&TIM1_PWMConfig, 0, sizeof(TIM1_PWMConfig));
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	221c      	movs	r2, #28
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f8e7 	bl	8001890 <memset>

	TIM1_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	60fb      	str	r3, [r7, #12]
	TIM1_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

	TIM1_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
	TIM_PWM_ConfigChannel(pTIMHandle, &TIM1_PWMConfig, TIM_CHANNEL_1);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff f8f6 	bl	80008c8 <TIM_PWM_ConfigChannel>

	TIM1_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
	TIM_PWM_ConfigChannel(pTIMHandle, &TIM1_PWMConfig, TIM_CHANNEL_2);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2204      	movs	r2, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff f8ed 	bl	80008c8 <TIM_PWM_ConfigChannel>

	TIM1_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
	TIM_PWM_ConfigChannel(pTIMHandle, &TIM1_PWMConfig, TIM_CHANNEL_3);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2208      	movs	r2, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff f8e4 	bl	80008c8 <TIM_PWM_ConfigChannel>
}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40012c00 	.word	0x40012c00

0800170c <TIM_PeriodElapsedCallback>:
	TIM_PWM_ConfigChannel(pTIMHandle, &TIM1_PWMConfig, TIM_CHANNEL_4);
}


void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(pTIMHandle->Instance == TIM6)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <TIM_PeriodElapsedCallback+0x24>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d103      	bne.n	8001726 <TIM_PeriodElapsedCallback+0x1a>
	{
		GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800171e:	2102      	movs	r1, #2
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <TIM_PeriodElapsedCallback+0x28>)
 8001722:	f7fe ff9d 	bl	8000660 <GPIO_TogglePin>
	}
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40001000 	.word	0x40001000
 8001734:	40010800 	.word	0x40010800

08001738 <EXTI_Init>:


void EXTI_Init(GPIO_HandleTypeDef *GPIOHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	GPIOHandle->Instance = GPIOC;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <EXTI_Init+0x44>)
 8001744:	601a      	str	r2, [r3, #0]
	GPIOHandle->Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800174c:	605a      	str	r2, [r3, #4]
	GPIOHandle->Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <EXTI_Init+0x48>)
 8001752:	609a      	str	r2, [r3, #8]
	GPIOHandle->Init.Pull = GPIO_NOPULL;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
	GPIO_Init(GPIOHandle->Instance, &GPIOHandle->Init);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7fe fd03 	bl	8000170 <GPIO_Init>
//	GPIOHandle->Init.Pin = GPIO_PIN_0;
//	GPIOHandle->Init.Mode = GPIO_MODE_IT_RISING_FALLING;
//	GPIOHandle->Init.Pull = GPIO_PULLUP;
//	GPIO_Init(GPIOHandle->Instance, &GPIOHandle->Init);

	NVIC_IRQConfig(IRQ_NO_EXTI9_5, NVIC_PRIOR_8, ENABLE);
 800176a:	2201      	movs	r2, #1
 800176c:	2108      	movs	r1, #8
 800176e:	2017      	movs	r0, #23
 8001770:	f7ff fd4c 	bl	800120c <NVIC_IRQConfig>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40011000 	.word	0x40011000
 8001780:	10310000 	.word	0x10310000

08001784 <EXTI_Callback>:


void EXTI_Callback(uint32_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	UNUSED(GPIO_Pin);

	uint32_t HallPhase;

	HallPhase = (READ_BIT(GPIOC->IDR, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8)) >> 6U;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <EXTI_Callback+0x6c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

	switch (HallPhase)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	2b05      	cmp	r3, #5
 800179e:	d821      	bhi.n	80017e4 <EXTI_Callback+0x60>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <EXTI_Callback+0x24>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017df 	.word	0x080017df
 80017ac:	080017c7 	.word	0x080017c7
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	080017d3 	.word	0x080017d3
 80017b8:	080017d9 	.word	0x080017d9
 80017bc:	080017cd 	.word	0x080017cd
	{
		case Phase1:
		{
			BLDC_Step2();
 80017c0:	f7ff fb48 	bl	8000e54 <BLDC_Step2>
			break;
 80017c4:	e00f      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		case Phase2:
		{
			BLDC_Step1();
 80017c6:	f7ff fb1d 	bl	8000e04 <BLDC_Step1>
			break;
 80017ca:	e00c      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		case Phase3:
		{
			BLDC_Step6();
 80017cc:	f7ff fbe2 	bl	8000f94 <BLDC_Step6>
			break;
 80017d0:	e009      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		case Phase4:
		{
			BLDC_Step5();
 80017d2:	f7ff fbb7 	bl	8000f44 <BLDC_Step5>
			break;
 80017d6:	e006      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		case Phase5:
		{
			BLDC_Step4();
 80017d8:	f7ff fb8c 	bl	8000ef4 <BLDC_Step4>
			break;
 80017dc:	e003      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		case Phase6:
		{
			BLDC_Step3();
 80017de:	f7ff fb61 	bl	8000ea4 <BLDC_Step3>
			break;
 80017e2:	e000      	b.n	80017e6 <EXTI_Callback+0x62>
		}

		default :
			break;
 80017e4:	bf00      	nop
	}
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40011000 	.word	0x40011000

080017f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800181e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001822:	f000 f811 	bl	8001848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fc07 	bl	8001038 <main>

0800182a <LoopForever>:

LoopForever:
    b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   r0, =_estack
 800182c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001838:	080018c0 	.word	0x080018c0
  ldr r2, =_sbss
 800183c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001840:	20000070 	.word	0x20000070

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>
	...

08001848 <__libc_init_array>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	2500      	movs	r5, #0
 800184c:	4e0c      	ldr	r6, [pc, #48]	; (8001880 <__libc_init_array+0x38>)
 800184e:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <__libc_init_array+0x3c>)
 8001850:	1ba4      	subs	r4, r4, r6
 8001852:	10a4      	asrs	r4, r4, #2
 8001854:	42a5      	cmp	r5, r4
 8001856:	d109      	bne.n	800186c <__libc_init_array+0x24>
 8001858:	f000 f822 	bl	80018a0 <_init>
 800185c:	2500      	movs	r5, #0
 800185e:	4e0a      	ldr	r6, [pc, #40]	; (8001888 <__libc_init_array+0x40>)
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <__libc_init_array+0x44>)
 8001862:	1ba4      	subs	r4, r4, r6
 8001864:	10a4      	asrs	r4, r4, #2
 8001866:	42a5      	cmp	r5, r4
 8001868:	d105      	bne.n	8001876 <__libc_init_array+0x2e>
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001870:	4798      	blx	r3
 8001872:	3501      	adds	r5, #1
 8001874:	e7ee      	b.n	8001854 <__libc_init_array+0xc>
 8001876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800187a:	4798      	blx	r3
 800187c:	3501      	adds	r5, #1
 800187e:	e7f2      	b.n	8001866 <__libc_init_array+0x1e>
 8001880:	080018b8 	.word	0x080018b8
 8001884:	080018b8 	.word	0x080018b8
 8001888:	080018b8 	.word	0x080018b8
 800188c:	080018bc 	.word	0x080018bc

08001890 <memset>:
 8001890:	4603      	mov	r3, r0
 8001892:	4402      	add	r2, r0
 8001894:	4293      	cmp	r3, r2
 8001896:	d100      	bne.n	800189a <memset+0xa>
 8001898:	4770      	bx	lr
 800189a:	f803 1b01 	strb.w	r1, [r3], #1
 800189e:	e7f9      	b.n	8001894 <memset+0x4>

080018a0 <_init>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	bf00      	nop
 80018a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a6:	bc08      	pop	{r3}
 80018a8:	469e      	mov	lr, r3
 80018aa:	4770      	bx	lr

080018ac <_fini>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	bf00      	nop
 80018b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b2:	bc08      	pop	{r3}
 80018b4:	469e      	mov	lr, r3
 80018b6:	4770      	bx	lr
