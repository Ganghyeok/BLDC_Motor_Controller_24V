
BLDC_Motor_Controller_24V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  0800bdc8  0800bdc8  0001bdc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db30  0800db30  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800db30  0800db30  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db30  0800db30  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800db38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e0  0800dd14  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800dd14  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ac9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000208b  00000000  00000000  00032cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  00034d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  000353d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a331  00000000  00000000  00035988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090b2  00000000  00000000  0003fcb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002b1d6  00000000  00000000  00048d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00073f41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  00073fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e0 	.word	0x200001e0
 800014c:	00000000 	.word	0x00000000
 8000150:	0800bdac 	.word	0x0800bdac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e4 	.word	0x200001e4
 800016c:	0800bdac 	.word	0x0800bdac

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	d1ed      	bne.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <DMA_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void DMA_Init(DMA_HandleTypeDef *pDMAHandle)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint32_t config = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]

	// 1. Calculate the channel index
	if ((uint32_t)(pDMAHandle->Instance) < (uint32_t)(DMA2_Channel1))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <DMA_Init+0xbc>)
 8001184:	429a      	cmp	r2, r3
 8001186:	d80f      	bhi.n	80011a8 <DMA_Init+0x38>
	{
		/* DMA1 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <DMA_Init+0xc0>)
 8001190:	4413      	add	r3, r2
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <DMA_Init+0xc4>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <DMA_Init+0xc8>)
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a6:	e00e      	b.n	80011c6 <DMA_Init+0x56>
	}
	else
	{
		/* DMA2 */
		pDMAHandle->ChannelIndex = (((uint32_t)pDMAHandle->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <DMA_Init+0xcc>)
 80011b0:	4413      	add	r3, r2
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <DMA_Init+0xc4>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	009a      	lsls	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
		pDMAHandle->DmaBaseAddress = DMA2;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <DMA_Init+0xd0>)
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// 2. Change DMA peripheral state
	pDMAHandle->State = DMA_STATE_BUSY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]

	// 3. Get the CR register value
	config = pDMAHandle->Instance->CCR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]

	// 4. Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits
	config &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011e0:	60fb      	str	r3, [r7, #12]
	                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
	                      DMA_CCR_DIR));

	// 5. Prepare the DMA Channel configuration
	config |=  pDMAHandle->Init.Direction		   |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
	config |=  pDMAHandle->Init.Direction		   |
 80011ea:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
				pDMAHandle->Init.PeriphInc           | pDMAHandle->Init.MemInc           |
 80011f6:	431a      	orrs	r2, r3
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
				pDMAHandle->Init.PeriphDataAlignment | pDMAHandle->Init.MemDataAlignment |
 8001202:	431a      	orrs	r2, r3
				pDMAHandle->Init.Mode                | pDMAHandle->Init.Priority;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4313      	orrs	r3, r2
	config |=  pDMAHandle->Init.Direction		   |
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

	// 6. Write to DMA Channel CR register
	pDMAHandle->Instance->CCR = config;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]

	// 7. Initialize the DMA state
	pDMAHandle->State = DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40020407 	.word	0x40020407
 8001230:	bffdfff8 	.word	0xbffdfff8
 8001234:	cccccccd 	.word	0xcccccccd
 8001238:	40020000 	.word	0x40020000
 800123c:	bffdfbf8 	.word	0xbffdfbf8
 8001240:	40020400 	.word	0x40020400

08001244 <DMA_IRQ_Handling>:
	ENABLE_DMA(pDMAHandle);
}


void DMA_IRQ_Handling(DMA_HandleTypeDef *pDMAHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for DMA */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Half transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_HT1 << pDMAHandle->ChannelIndex));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	2104      	movs	r1, #4
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_HT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80bf 	beq.w	80013f2 <DMA_IRQ_Handling+0x1ae>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80bb 	beq.w	80013f2 <DMA_IRQ_Handling+0x1ae>
	{
		// 1. Clear the half transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_HT_FLAG_INDEX(pDMAHandle));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b99      	ldr	r3, [pc, #612]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001284:	429a      	cmp	r2, r3
 8001286:	d958      	bls.n	800133a <DMA_IRQ_Handling+0xf6>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a97      	ldr	r2, [pc, #604]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d04f      	beq.n	8001332 <DMA_IRQ_Handling+0xee>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a96      	ldr	r2, [pc, #600]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d048      	beq.n	800132e <DMA_IRQ_Handling+0xea>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a94      	ldr	r2, [pc, #592]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d040      	beq.n	8001328 <DMA_IRQ_Handling+0xe4>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d038      	beq.n	8001322 <DMA_IRQ_Handling+0xde>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a91      	ldr	r2, [pc, #580]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d030      	beq.n	800131c <DMA_IRQ_Handling+0xd8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a90      	ldr	r2, [pc, #576]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d028      	beq.n	8001316 <DMA_IRQ_Handling+0xd2>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d020      	beq.n	8001310 <DMA_IRQ_Handling+0xcc>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8c      	ldr	r2, [pc, #560]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <DMA_IRQ_Handling+0xc8>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d012      	beq.n	8001308 <DMA_IRQ_Handling+0xc4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a89      	ldr	r2, [pc, #548]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00a      	beq.n	8001302 <DMA_IRQ_Handling+0xbe>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a87      	ldr	r2, [pc, #540]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d102      	bne.n	80012fc <DMA_IRQ_Handling+0xb8>
 80012f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fa:	e01b      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 80012fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001300:	e018      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	e015      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	e013      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800130c:	2304      	movs	r3, #4
 800130e:	e011      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001310:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001314:	e00e      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	e00b      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800131c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001320:	e008      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	e005      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132c:	e002      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	e000      	b.n	8001334 <DMA_IRQ_Handling+0xf0>
 8001332:	2304      	movs	r3, #4
 8001334:	4a77      	ldr	r2, [pc, #476]	; (8001514 <DMA_IRQ_Handling+0x2d0>)
 8001336:	6053      	str	r3, [r2, #4]
 8001338:	e057      	b.n	80013ea <DMA_IRQ_Handling+0x1a6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6b      	ldr	r2, [pc, #428]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d04f      	beq.n	80013e4 <DMA_IRQ_Handling+0x1a0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d048      	beq.n	80013e0 <DMA_IRQ_Handling+0x19c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a68      	ldr	r2, [pc, #416]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d040      	beq.n	80013da <DMA_IRQ_Handling+0x196>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d038      	beq.n	80013d4 <DMA_IRQ_Handling+0x190>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d030      	beq.n	80013ce <DMA_IRQ_Handling+0x18a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a63      	ldr	r2, [pc, #396]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d028      	beq.n	80013c8 <DMA_IRQ_Handling+0x184>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d020      	beq.n	80013c2 <DMA_IRQ_Handling+0x17e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <DMA_IRQ_Handling+0x17a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d012      	beq.n	80013ba <DMA_IRQ_Handling+0x176>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a5c      	ldr	r2, [pc, #368]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00a      	beq.n	80013b4 <DMA_IRQ_Handling+0x170>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d102      	bne.n	80013ae <DMA_IRQ_Handling+0x16a>
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	e01b      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013b2:	e018      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	e015      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	e013      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013be:	2304      	movs	r3, #4
 80013c0:	e011      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c6:	e00e      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013cc:	e00b      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013d2:	e008      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d8:	e005      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013de:	e002      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	e000      	b.n	80013e6 <DMA_IRQ_Handling+0x1a2>
 80013e4:	2304      	movs	r3, #4
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <DMA_IRQ_Handling+0x2d4>)
 80013e8:	6053      	str	r3, [r2, #4]

		// 2. Call Half transfer complete Callback
		pDMAHandle->XferHalfCpltCallback(pDMAHandle);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
	}

	// 2. Handle for interrupt generated by Full transfer complete
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TC1 << pDMAHandle->ChannelIndex));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2102      	movs	r1, #2
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80dd 	beq.w	80015d4 <DMA_IRQ_Handling+0x390>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80d9 	beq.w	80015d4 <DMA_IRQ_Handling+0x390>
	{
		// 1. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

		// 2. Clear the transfer complete flag
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_TC_FLAG_INDEX(pDMAHandle));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d972      	bls.n	800151c <DMA_IRQ_Handling+0x2d8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <DMA_IRQ_Handling+0x2a8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d04f      	beq.n	80014e0 <DMA_IRQ_Handling+0x29c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <DMA_IRQ_Handling+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d048      	beq.n	80014dc <DMA_IRQ_Handling+0x298>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <DMA_IRQ_Handling+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d040      	beq.n	80014d6 <DMA_IRQ_Handling+0x292>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <DMA_IRQ_Handling+0x2b4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d038      	beq.n	80014d0 <DMA_IRQ_Handling+0x28c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a26      	ldr	r2, [pc, #152]	; (80014fc <DMA_IRQ_Handling+0x2b8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d030      	beq.n	80014ca <DMA_IRQ_Handling+0x286>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <DMA_IRQ_Handling+0x2bc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d028      	beq.n	80014c4 <DMA_IRQ_Handling+0x280>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <DMA_IRQ_Handling+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d020      	beq.n	80014be <DMA_IRQ_Handling+0x27a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <DMA_IRQ_Handling+0x2c0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <DMA_IRQ_Handling+0x276>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <DMA_IRQ_Handling+0x2c4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d012      	beq.n	80014b6 <DMA_IRQ_Handling+0x272>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <DMA_IRQ_Handling+0x2c8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00a      	beq.n	80014b0 <DMA_IRQ_Handling+0x26c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <DMA_IRQ_Handling+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d102      	bne.n	80014aa <DMA_IRQ_Handling+0x266>
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	e01b      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ae:	e018      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	e015      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014b6:	2320      	movs	r3, #32
 80014b8:	e013      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e011      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	e00e      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014c8:	e00b      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ce:	e008      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	e005      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014da:	e002      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014dc:	2320      	movs	r3, #32
 80014de:	e000      	b.n	80014e2 <DMA_IRQ_Handling+0x29e>
 80014e0:	2302      	movs	r3, #2
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <DMA_IRQ_Handling+0x2d0>)
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	e071      	b.n	80015cc <DMA_IRQ_Handling+0x388>
 80014e8:	40020080 	.word	0x40020080
 80014ec:	40020008 	.word	0x40020008
 80014f0:	4002001c 	.word	0x4002001c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	40020044 	.word	0x40020044
 80014fc:	40020058 	.word	0x40020058
 8001500:	4002006c 	.word	0x4002006c
 8001504:	40020408 	.word	0x40020408
 8001508:	4002041c 	.word	0x4002041c
 800150c:	40020430 	.word	0x40020430
 8001510:	40020444 	.word	0x40020444
 8001514:	40020400 	.word	0x40020400
 8001518:	40020000 	.word	0x40020000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9a      	ldr	r2, [pc, #616]	; (800178c <DMA_IRQ_Handling+0x548>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d04f      	beq.n	80015c6 <DMA_IRQ_Handling+0x382>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a99      	ldr	r2, [pc, #612]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d048      	beq.n	80015c2 <DMA_IRQ_Handling+0x37e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a97      	ldr	r2, [pc, #604]	; (8001794 <DMA_IRQ_Handling+0x550>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d040      	beq.n	80015bc <DMA_IRQ_Handling+0x378>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a96      	ldr	r2, [pc, #600]	; (8001798 <DMA_IRQ_Handling+0x554>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d038      	beq.n	80015b6 <DMA_IRQ_Handling+0x372>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a94      	ldr	r2, [pc, #592]	; (800179c <DMA_IRQ_Handling+0x558>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d030      	beq.n	80015b0 <DMA_IRQ_Handling+0x36c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a93      	ldr	r2, [pc, #588]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d028      	beq.n	80015aa <DMA_IRQ_Handling+0x366>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d020      	beq.n	80015a4 <DMA_IRQ_Handling+0x360>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d019      	beq.n	80015a0 <DMA_IRQ_Handling+0x35c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a8e      	ldr	r2, [pc, #568]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d012      	beq.n	800159c <DMA_IRQ_Handling+0x358>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8d      	ldr	r2, [pc, #564]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00a      	beq.n	8001596 <DMA_IRQ_Handling+0x352>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a8b      	ldr	r2, [pc, #556]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d102      	bne.n	8001590 <DMA_IRQ_Handling+0x34c>
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	e01b      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 8001590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001594:	e018      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	e015      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 800159c:	2320      	movs	r3, #32
 800159e:	e013      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e011      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a8:	e00e      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015ae:	e00b      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b4:	e008      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	e005      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c0:	e002      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015c2:	2320      	movs	r3, #32
 80015c4:	e000      	b.n	80015c8 <DMA_IRQ_Handling+0x384>
 80015c6:	2302      	movs	r3, #2
 80015c8:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <DMA_IRQ_Handling+0x574>)
 80015ca:	6053      	str	r3, [r2, #4]

		// 3. Call Full transfer complete Callback
		pDMAHandle->XferCpltCallback(pDMAHandle);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
	}

	// 3. Handle for interrupt generated by Transfer error
	temp1 = (pDMAHandle->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << pDMAHandle->ChannelIndex));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2108      	movs	r1, #8
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
	temp2 = (pDMAHandle->Instance->CCR & DMA_IT_TE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60bb      	str	r3, [r7, #8]

	if((temp1 != RESET) && (temp2 != RESET))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c3 	beq.w	8001782 <DMA_IRQ_Handling+0x53e>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80bf 	beq.w	8001782 <DMA_IRQ_Handling+0x53e>
	{
		// 1. Clear all flags
		DMA_CLEAR_FLAG(pDMAHandle, DMA_GET_GI_FLAG_INDEX(pDMAHandle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d958      	bls.n	80016c2 <DMA_IRQ_Handling+0x47e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5d      	ldr	r2, [pc, #372]	; (800178c <DMA_IRQ_Handling+0x548>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d04f      	beq.n	80016ba <DMA_IRQ_Handling+0x476>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5c      	ldr	r2, [pc, #368]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d048      	beq.n	80016b6 <DMA_IRQ_Handling+0x472>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <DMA_IRQ_Handling+0x550>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d040      	beq.n	80016b0 <DMA_IRQ_Handling+0x46c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a59      	ldr	r2, [pc, #356]	; (8001798 <DMA_IRQ_Handling+0x554>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d038      	beq.n	80016aa <DMA_IRQ_Handling+0x466>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <DMA_IRQ_Handling+0x558>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d030      	beq.n	80016a4 <DMA_IRQ_Handling+0x460>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d028      	beq.n	800169e <DMA_IRQ_Handling+0x45a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d020      	beq.n	8001698 <DMA_IRQ_Handling+0x454>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a53      	ldr	r2, [pc, #332]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d019      	beq.n	8001694 <DMA_IRQ_Handling+0x450>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d012      	beq.n	8001690 <DMA_IRQ_Handling+0x44c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00a      	beq.n	800168a <DMA_IRQ_Handling+0x446>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d102      	bne.n	8001684 <DMA_IRQ_Handling+0x440>
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	e01b      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	e018      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	e015      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001690:	2310      	movs	r3, #16
 8001692:	e013      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001694:	2301      	movs	r3, #1
 8001696:	e011      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 8001698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169c:	e00e      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 800169e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016a2:	e00b      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	e008      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	e005      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	e002      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016b6:	2310      	movs	r3, #16
 80016b8:	e000      	b.n	80016bc <DMA_IRQ_Handling+0x478>
 80016ba:	2301      	movs	r3, #1
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <DMA_IRQ_Handling+0x578>)
 80016be:	6053      	str	r3, [r2, #4]
 80016c0:	e057      	b.n	8001772 <DMA_IRQ_Handling+0x52e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <DMA_IRQ_Handling+0x548>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04f      	beq.n	800176c <DMA_IRQ_Handling+0x528>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <DMA_IRQ_Handling+0x54c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d048      	beq.n	8001768 <DMA_IRQ_Handling+0x524>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <DMA_IRQ_Handling+0x550>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d040      	beq.n	8001762 <DMA_IRQ_Handling+0x51e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <DMA_IRQ_Handling+0x554>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d038      	beq.n	800175c <DMA_IRQ_Handling+0x518>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <DMA_IRQ_Handling+0x558>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d030      	beq.n	8001756 <DMA_IRQ_Handling+0x512>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <DMA_IRQ_Handling+0x55c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d028      	beq.n	8001750 <DMA_IRQ_Handling+0x50c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <DMA_IRQ_Handling+0x560>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d020      	beq.n	800174a <DMA_IRQ_Handling+0x506>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <DMA_IRQ_Handling+0x564>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <DMA_IRQ_Handling+0x502>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a25      	ldr	r2, [pc, #148]	; (80017ac <DMA_IRQ_Handling+0x568>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d012      	beq.n	8001742 <DMA_IRQ_Handling+0x4fe>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <DMA_IRQ_Handling+0x56c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00a      	beq.n	800173c <DMA_IRQ_Handling+0x4f8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <DMA_IRQ_Handling+0x570>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d102      	bne.n	8001736 <DMA_IRQ_Handling+0x4f2>
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	e01b      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	e018      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	e015      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001742:	2310      	movs	r3, #16
 8001744:	e013      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001746:	2301      	movs	r3, #1
 8001748:	e011      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800174a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174e:	e00e      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001754:	e00b      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	e008      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	e005      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	e002      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 8001768:	2310      	movs	r3, #16
 800176a:	e000      	b.n	800176e <DMA_IRQ_Handling+0x52a>
 800176c:	2301      	movs	r3, #1
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <DMA_IRQ_Handling+0x574>)
 8001770:	6053      	str	r3, [r2, #4]

		// 2. Change the DMA state
		pDMAHandle->State = DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2020 	strb.w	r2, [r3, #32]

		// 3. Call Transfer error Callback
		pDMAHandle->XferErrorCallback(pDMAHandle);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
	}
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020008 	.word	0x40020008
 8001790:	4002001c 	.word	0x4002001c
 8001794:	40020030 	.word	0x40020030
 8001798:	40020044 	.word	0x40020044
 800179c:	40020058 	.word	0x40020058
 80017a0:	4002006c 	.word	0x4002006c
 80017a4:	40020080 	.word	0x40020080
 80017a8:	40020408 	.word	0x40020408
 80017ac:	4002041c 	.word	0x4002041c
 80017b0:	40020430 	.word	0x40020430
 80017b4:	40020444 	.word	0x40020444
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400

080017c0 <GPIO_Init>:
 * 									  																		  *
 **************************************************************************************************************/

/* Initialization and de-initialization functions *****************************/
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	uint32_t config = 0x0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *configRegister;
	uint32_t registerOffset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]

	// GPIO Clock enable
	GPIOx_ClockEnable(GPIOx);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a96      	ldr	r2, [pc, #600]	; (8001a30 <GPIO_Init+0x270>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d106      	bne.n	80017e8 <GPIO_Init+0x28>
 80017da:	4b96      	ldr	r3, [pc, #600]	; (8001a34 <GPIO_Init+0x274>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a95      	ldr	r2, [pc, #596]	; (8001a34 <GPIO_Init+0x274>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	e03c      	b.n	8001862 <GPIO_Init+0xa2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a93      	ldr	r2, [pc, #588]	; (8001a38 <GPIO_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d106      	bne.n	80017fe <GPIO_Init+0x3e>
 80017f0:	4b90      	ldr	r3, [pc, #576]	; (8001a34 <GPIO_Init+0x274>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a8f      	ldr	r2, [pc, #572]	; (8001a34 <GPIO_Init+0x274>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	e031      	b.n	8001862 <GPIO_Init+0xa2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a8e      	ldr	r2, [pc, #568]	; (8001a3c <GPIO_Init+0x27c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d106      	bne.n	8001814 <GPIO_Init+0x54>
 8001806:	4b8b      	ldr	r3, [pc, #556]	; (8001a34 <GPIO_Init+0x274>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a8a      	ldr	r2, [pc, #552]	; (8001a34 <GPIO_Init+0x274>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	e026      	b.n	8001862 <GPIO_Init+0xa2>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <GPIO_Init+0x280>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d106      	bne.n	800182a <GPIO_Init+0x6a>
 800181c:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <GPIO_Init+0x274>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a84      	ldr	r2, [pc, #528]	; (8001a34 <GPIO_Init+0x274>)
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	e01b      	b.n	8001862 <GPIO_Init+0xa2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a85      	ldr	r2, [pc, #532]	; (8001a44 <GPIO_Init+0x284>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d106      	bne.n	8001840 <GPIO_Init+0x80>
 8001832:	4b80      	ldr	r3, [pc, #512]	; (8001a34 <GPIO_Init+0x274>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a7f      	ldr	r2, [pc, #508]	; (8001a34 <GPIO_Init+0x274>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	e010      	b.n	8001862 <GPIO_Init+0xa2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <GPIO_Init+0x288>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d106      	bne.n	8001856 <GPIO_Init+0x96>
 8001848:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <GPIO_Init+0x274>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a79      	ldr	r2, [pc, #484]	; (8001a34 <GPIO_Init+0x274>)
 800184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	e005      	b.n	8001862 <GPIO_Init+0xa2>
 8001856:	4b77      	ldr	r3, [pc, #476]	; (8001a34 <GPIO_Init+0x274>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a76      	ldr	r2, [pc, #472]	; (8001a34 <GPIO_Init+0x274>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6193      	str	r3, [r2, #24]

	for(uint8_t position = 0; position < 16; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	76fb      	strb	r3, [r7, #27]
 8001866:	e1d0      	b.n	8001c0a <GPIO_Init+0x44a>
	{
		if( GPIO_Init->Pin & (1 << position) )
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	7efa      	ldrb	r2, [r7, #27]
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 81c0 	beq.w	8001bfc <GPIO_Init+0x43c>
		{
			/*------------------------- GPIO Port Configuration --------------------*/

			switch(GPIO_Init->Mode)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b11      	cmp	r3, #17
 8001882:	d039      	beq.n	80018f8 <GPIO_Init+0x138>
 8001884:	2b11      	cmp	r3, #17
 8001886:	d807      	bhi.n	8001898 <GPIO_Init+0xd8>
 8001888:	2b01      	cmp	r3, #1
 800188a:	d016      	beq.n	80018ba <GPIO_Init+0xfa>
 800188c:	2b01      	cmp	r3, #1
 800188e:	f0c0 8090 	bcc.w	80019b2 <GPIO_Init+0x1f2>
 8001892:	2b02      	cmp	r3, #2
 8001894:	d04f      	beq.n	8001936 <GPIO_Init+0x176>
 8001896:	e0bd      	b.n	8001a14 <GPIO_Init+0x254>
 8001898:	4a6c      	ldr	r2, [pc, #432]	; (8001a4c <GPIO_Init+0x28c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f000 8089 	beq.w	80019b2 <GPIO_Init+0x1f2>
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <GPIO_Init+0x28c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d802      	bhi.n	80018ac <GPIO_Init+0xec>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d064      	beq.n	8001974 <GPIO_Init+0x1b4>
 80018aa:	e0b3      	b.n	8001a14 <GPIO_Init+0x254>
 80018ac:	4a68      	ldr	r2, [pc, #416]	; (8001a50 <GPIO_Init+0x290>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d07f      	beq.n	80019b2 <GPIO_Init+0x1f2>
 80018b2:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <GPIO_Init+0x294>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d07c      	beq.n	80019b2 <GPIO_Init+0x1f2>
 80018b8:	e0ac      	b.n	8001a14 <GPIO_Init+0x254>
			{
				case GPIO_MODE_OUTPUT_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d104      	bne.n	80018cc <GPIO_Init+0x10c>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e010      	b.n	80018ee <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d104      	bne.n	80018de <GPIO_Init+0x11e>
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	e007      	b.n	80018ee <GPIO_Init+0x12e>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d103      	bne.n	80018ee <GPIO_Init+0x12e>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f043 0303 	orr.w	r3, r3, #3
 80018ec:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output push-pull
					config &= ~(0x3 << 2);
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f023 030c 	bic.w	r3, r3, #12
 80018f4:	61fb      	str	r3, [r7, #28]


					break;
 80018f6:	e08d      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_OUTPUT_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d104      	bne.n	800190a <GPIO_Init+0x14a>
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	e010      	b.n	800192c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d104      	bne.n	800191c <GPIO_Init+0x15c>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e007      	b.n	800192c <GPIO_Init+0x16c>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d103      	bne.n	800192c <GPIO_Init+0x16c>
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f043 0303 	orr.w	r3, r3, #3
 800192a:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to general purpose output open-drain
					config |= (0x1 << 2);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	61fb      	str	r3, [r7, #28]

					break;
 8001934:	e06e      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_PP :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d104      	bne.n	8001948 <GPIO_Init+0x188>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e010      	b.n	800196a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d104      	bne.n	800195a <GPIO_Init+0x19a>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e007      	b.n	800196a <GPIO_Init+0x1aa>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d103      	bne.n	800196a <GPIO_Init+0x1aa>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f043 0303 	orr.w	r3, r3, #3
 8001968:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output push-pull
					config |= (0x1 << 3);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	61fb      	str	r3, [r7, #28]

					break;
 8001972:	e04f      	b.n	8001a14 <GPIO_Init+0x254>
				}

				case GPIO_MODE_AF_OD :
				{
					// Configure MODE field to output mode with max speed
					if(GPIO_Init->Speed == GPIO_SPEED_FREQ_LOW)				config |= (0x1 << 1);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <GPIO_Init+0x1c6>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e010      	b.n	80019a8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_MEDIUM)		config |= (0x1 << 0);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d104      	bne.n	8001998 <GPIO_Init+0x1d8>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e007      	b.n	80019a8 <GPIO_Init+0x1e8>
					else if(GPIO_Init->Speed == GPIO_SPEED_FREQ_HIGH)		config |= (0x3 << 0);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d103      	bne.n	80019a8 <GPIO_Init+0x1e8>
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f043 0303 	orr.w	r3, r3, #3
 80019a6:	61fb      	str	r3, [r7, #28]

					// Configure CNF field to alternate function output open-drain
					config |= (0x3 << 2);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f043 030c 	orr.w	r3, r3, #12
 80019ae:	61fb      	str	r3, [r7, #28]

					break;
 80019b0:	e030      	b.n	8001a14 <GPIO_Init+0x254>
				case GPIO_MODE_IT_RISING :
				case GPIO_MODE_IT_FALLING :
				case GPIO_MODE_IT_RISING_FALLING :
				{
					// Configure MODE field to input mode
					config &= ~(0x3 << 0);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f023 0303 	bic.w	r3, r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]

					if(GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d104      	bne.n	80019cc <GPIO_Init+0x20c>
					{
						config |= (0x1 << 2);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	61fb      	str	r3, [r7, #28]
					{
						config |= (0x1 << 3);
						GPIOx->BRR |= (0x1 << position);
					}

					break;
 80019ca:	e022      	b.n	8001a12 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10d      	bne.n	80019f0 <GPIO_Init+0x230>
						config |= (0x1 << 3);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f043 0308 	orr.w	r3, r3, #8
 80019da:	61fb      	str	r3, [r7, #28]
						GPIOx->BSRR |= (0x1 << position);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	7efa      	ldrb	r2, [r7, #27]
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
					break;
 80019ee:	e010      	b.n	8001a12 <GPIO_Init+0x252>
					else if(GPIO_Init->Pull == GPIO_PULLDOWN)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10c      	bne.n	8001a12 <GPIO_Init+0x252>
						config |= (0x1 << 3);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	61fb      	str	r3, [r7, #28]
						GPIOx->BRR |= (0x1 << position);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	7efa      	ldrb	r2, [r7, #27]
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	615a      	str	r2, [r3, #20]
					break;
 8001a12:	bf00      	nop
				}

			}


			configRegister = (position < 8) ? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001a14:	7efb      	ldrb	r3, [r7, #27]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d801      	bhi.n	8001a1e <GPIO_Init+0x25e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	e001      	b.n	8001a22 <GPIO_Init+0x262>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3304      	adds	r3, #4
 8001a22:	613b      	str	r3, [r7, #16]
			registerOffset = (position < 8) ? (4 * position) : (4 * (position - 8));
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d816      	bhi.n	8001a58 <GPIO_Init+0x298>
 8001a2a:	7efb      	ldrb	r3, [r7, #27]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	e016      	b.n	8001a5e <GPIO_Init+0x29e>
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40011800 	.word	0x40011800
 8001a48:	40011c00 	.word	0x40011c00
 8001a4c:	10110000 	.word	0x10110000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10310000 	.word	0x10310000
 8001a58:	7efb      	ldrb	r3, [r7, #27]
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]

			MODIFY_REG( (*configRegister), (0xF << registerOffset), (config << registerOffset) );
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	43d2      	mvns	r2, r2
 8001a6e:	401a      	ands	r2, r3
 8001a70:	69f9      	ldr	r1, [r7, #28]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]


			/*------------------------- EXTI Mode Configuration --------------------*/
			if( (GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE )
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80b8 	beq.w	8001bfc <GPIO_Init+0x43c>
			{
				RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <GPIO_Init+0x45c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a62      	ldr	r2, [pc, #392]	; (8001c1c <GPIO_Init+0x45c>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]

				int exti_sel, exti_pos;
				exti_sel = position / 4;
 8001a98:	7efb      	ldrb	r3, [r7, #27]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
				exti_pos = position % 4;
 8001aa0:	7efb      	ldrb	r3, [r7, #27]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	60bb      	str	r3, [r7, #8]

				MODIFY_REG(AFIO->EXTICR[exti_sel], (0xF << (4 * exti_pos)), (GET_GPIOCODE(GPIOx) << (4 * exti_pos)));
 8001aa8:	4a5d      	ldr	r2, [pc, #372]	; (8001c20 <GPIO_Init+0x460>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	43d2      	mvns	r2, r2
 8001abe:	401a      	ands	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4958      	ldr	r1, [pc, #352]	; (8001c24 <GPIO_Init+0x464>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d01f      	beq.n	8001b08 <GPIO_Init+0x348>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4957      	ldr	r1, [pc, #348]	; (8001c28 <GPIO_Init+0x468>)
 8001acc:	428b      	cmp	r3, r1
 8001ace:	d019      	beq.n	8001b04 <GPIO_Init+0x344>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4956      	ldr	r1, [pc, #344]	; (8001c2c <GPIO_Init+0x46c>)
 8001ad4:	428b      	cmp	r3, r1
 8001ad6:	d013      	beq.n	8001b00 <GPIO_Init+0x340>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4955      	ldr	r1, [pc, #340]	; (8001c30 <GPIO_Init+0x470>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d00d      	beq.n	8001afc <GPIO_Init+0x33c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4954      	ldr	r1, [pc, #336]	; (8001c34 <GPIO_Init+0x474>)
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d007      	beq.n	8001af8 <GPIO_Init+0x338>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4953      	ldr	r1, [pc, #332]	; (8001c38 <GPIO_Init+0x478>)
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d101      	bne.n	8001af4 <GPIO_Init+0x334>
 8001af0:	2305      	movs	r3, #5
 8001af2:	e00a      	b.n	8001b0a <GPIO_Init+0x34a>
 8001af4:	2306      	movs	r3, #6
 8001af6:	e008      	b.n	8001b0a <GPIO_Init+0x34a>
 8001af8:	2304      	movs	r3, #4
 8001afa:	e006      	b.n	8001b0a <GPIO_Init+0x34a>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e004      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e002      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <GPIO_Init+0x34a>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	0089      	lsls	r1, r1, #2
 8001b0e:	408b      	lsls	r3, r1
 8001b10:	4943      	ldr	r1, [pc, #268]	; (8001c20 <GPIO_Init+0x460>)
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3302      	adds	r3, #2
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if( (GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT )
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00a      	beq.n	8001b3e <GPIO_Init+0x37e>
				{
					SET_BIT(EXTI->IMR, (1 << position));
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <GPIO_Init+0x47c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	7efa      	ldrb	r2, [r7, #27]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <GPIO_Init+0x47c>)
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e00a      	b.n	8001b54 <GPIO_Init+0x394>
				}
				else
				{
					CLEAR_BIT(EXTI->IMR, (1 << position));
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <GPIO_Init+0x47c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	7efa      	ldrb	r2, [r7, #27]
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	43d2      	mvns	r2, r2
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <GPIO_Init+0x47c>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	6013      	str	r3, [r2, #0]
				}

				/* Configure the event mask */
				if( (GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT )
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <GPIO_Init+0x3b6>
				{
					SET_BIT(EXTI->EMR, (1 << position));
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <GPIO_Init+0x47c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	7efa      	ldrb	r2, [r7, #27]
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <GPIO_Init+0x47c>)
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	e00a      	b.n	8001b8c <GPIO_Init+0x3cc>
				}
				else
				{
					CLEAR_BIT(EXTI->EMR, (1 << position));
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <GPIO_Init+0x47c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	7efa      	ldrb	r2, [r7, #27]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	43d2      	mvns	r2, r2
 8001b84:	4611      	mov	r1, r2
 8001b86:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <GPIO_Init+0x47c>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	6053      	str	r3, [r2, #4]
				}

				/* Enable or disable the rising trigger */
				if( (GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE )
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <GPIO_Init+0x3ee>
				{
					SET_BIT(EXTI->RTSR, (1 << position));
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <GPIO_Init+0x47c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	7efa      	ldrb	r2, [r7, #27]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <GPIO_Init+0x47c>)
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]
 8001bac:	e00a      	b.n	8001bc4 <GPIO_Init+0x404>
				}
				else
				{
					CLEAR_BIT(EXTI->RTSR, (1 << position));
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <GPIO_Init+0x47c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	7efa      	ldrb	r2, [r7, #27]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	43d2      	mvns	r2, r2
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <GPIO_Init+0x47c>)
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
				}

				/* Enable or disable the falling trigger */
				if( (GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE )
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <GPIO_Init+0x426>
				{
					SET_BIT(EXTI->FTSR, (1 << position));
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <GPIO_Init+0x47c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	7efa      	ldrb	r2, [r7, #27]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <GPIO_Init+0x47c>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]
 8001be4:	e00a      	b.n	8001bfc <GPIO_Init+0x43c>
				}
				else
				{
					CLEAR_BIT(EXTI->FTSR, (1 << position));
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <GPIO_Init+0x47c>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	7efa      	ldrb	r2, [r7, #27]
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <GPIO_Init+0x47c>)
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]

			}

		}

		config = 0x0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
		registerOffset = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
	for(uint8_t position = 0; position < 16; position++)
 8001c04:	7efb      	ldrb	r3, [r7, #27]
 8001c06:	3301      	adds	r3, #1
 8001c08:	76fb      	strb	r3, [r7, #27]
 8001c0a:	7efb      	ldrb	r3, [r7, #27]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	f67f ae2b 	bls.w	8001868 <GPIO_Init+0xa8>
	}
}
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40011800 	.word	0x40011800
 8001c38:	40011c00 	.word	0x40011c00
 8001c3c:	40010400 	.word	0x40010400

08001c40 <GPIO_ReadPin>:



/* IO operation functions *****************************************************/
uint8_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
	if((uint16_t)GPIOx->IDR & GPIO_Pin)		return GPIO_PIN_SET;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <GPIO_ReadPin+0x20>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <GPIO_ReadPin+0x22>
	else									return GPIO_PIN_RESET;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <GPIO_WritePin>:


void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
	if(PinState == GPIO_PIN_SET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <GPIO_WritePin+0x24>
	{
		GPIOx->BSRR |= GPIO_Pin;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
	}
}
 8001c8e:	e006      	b.n	8001c9e <GPIO_WritePin+0x32>
		GPIOx->BSRR |= ((uint32_t)GPIO_Pin << 16);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <GPIO_ModifyPin>:


void GPIO_ModifyPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_To_Set, uint16_t GPIO_Pin_To_Reset)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	803b      	strh	r3, [r7, #0]
	uint32_t config = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]

	config = ((uint32_t)GPIO_Pin_To_Reset << 16U) | (GPIO_Pin_To_Set);
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	041a      	lsls	r2, r3, #16
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR |= config;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <GPIO_WritePort>:


void GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
	GPIOx->BSRR = (((0xFFFFU & ~(GPIO_Pin)) << 16U) | (GPIO_Pin));
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <GPIO_WriteData>:


void GPIO_WriteData(GPIO_TypeDef *GPIOx, uint16_t Data)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t)Data;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <EXTI_IRQHandling>:
	}
}


void EXTI_IRQHandling(uint32_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for EXTI */
	uint32_t extiSrcPin;

	extiSrcPin = EXTI->PR & GPIO_Pin;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <EXTI_IRQHandling+0x34>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

	if(extiSrcPin != 0)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <EXTI_IRQHandling+0x2a>
	{
		EXTI->PR |= extiSrcPin;		// Clear the pending event from EXTI line
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <EXTI_IRQHandling+0x34>)
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	4905      	ldr	r1, [pc, #20]	; (8001d54 <EXTI_IRQHandling+0x34>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	614b      	str	r3, [r1, #20]
		EXTI_Callback(extiSrcPin);		// Call EXTI_Callback function
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f005 f9dd 	bl	8007104 <EXTI_Callback>
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40010400 	.word	0x40010400

08001d58 <RCC_OscConfig>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d011      	beq.n	8001d90 <RCC_OscConfig+0x38>
	{
		if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d10c      	bne.n	8001d90 <RCC_OscConfig+0x38>
		{
			SET_BIT(RCC->CR, RCC_CR_HSEON);				// Enable HSE
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
			WAIT_FLAG_SET(RCC->CR, RCC_CR_HSERDY);		// Wait until HSERDY flag is set
 8001d82:	bf00      	nop
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f9      	beq.n	8001d84 <RCC_OscConfig+0x2c>
		}
	}

	/*-------------------------------- PLL Configuration -----------------------*/
	if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d128      	bne.n	8001dea <RCC_OscConfig+0x92>
	{
		// 1. Disable PLL
		CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

		// 2. Check whether PLLSOURCE is HSE or not
		if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d105      	bne.n	8001dba <RCC_OscConfig+0x62>
		{
			// Configure HSEPredivValue
			CLEAR_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE);
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001db4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001db8:	6053      	str	r3, [r2, #4]
		}

		// 3. Configure PLL source and PLL multiplication factor
		MODIFY_REG( RCC->CFGR, ( (RCC_CFGR_PLLSRC) | (RCC_CFGR_PLLMULL) ), ( (RCC_PLLSOURCE_HSE) | (RCC_OscInitStruct->PLL.PLLMUL) ) );
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6053      	str	r3, [r2, #4]

		// 4. Enable PLL
		SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

		// 5. Wait until PLL is ready
		WAIT_FLAG_SET(RCC->CR, RCC_CR_PLLRDY);
 8001ddc:	bf00      	nop
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <RCC_OscConfig+0x9c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f9      	beq.n	8001dde <RCC_OscConfig+0x86>
	}
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000

08001df8 <RCC_ClockConfig>:



void RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	// 1. Configure FLASH Latency
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLatency);
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <RCC_ClockConfig+0x7c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	491a      	ldr	r1, [pc, #104]	; (8001e74 <RCC_ClockConfig+0x7c>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

	// 2. Configure APB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4916      	ldr	r1, [pc, #88]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4911      	ldr	r1, [pc, #68]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]

	// 3. Configure AHB prescaler
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

	// 4. Configure SYSCLK
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 0203 	bic.w	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4908      	ldr	r1, [pc, #32]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]

	// 5. Wait until SYSCLK is PLLCLK
	WAIT_FLAG_SET(RCC->CFGR, RCC_CFGR_SWS_PLL);
 8001e5a:	bf00      	nop
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <RCC_ClockConfig+0x80>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f9      	beq.n	8001e5c <RCC_ClockConfig+0x64>
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40021000 	.word	0x40021000

08001e7c <RCC_GetPLLOutputClock>:
}



uint32_t RCC_GetPLLOutputClock(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
	uint8_t PLLMulFactor;
	uint8_t tmp;
	uint32_t PLLOutputClock;

	// 1. Check PLL On
	if( !((RCC->CR & RCC_CR_PLLON) && (RCC->CR & RCC_CR_PLLRDY)) )
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <RCC_GetPLLOutputClock+0x70>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <RCC_GetPLLOutputClock+0x1e>
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <RCC_GetPLLOutputClock+0x70>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <RCC_GetPLLOutputClock+0x22>
	{
		// When PLL is Off
		return 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e020      	b.n	8001ee0 <RCC_GetPLLOutputClock+0x64>
	}

	// 2. Check PLL source
	if( RCC->CFGR & RCC_CFGR_PLLSRC )
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <RCC_GetPLLOutputClock+0x70>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <RCC_GetPLLOutputClock+0x34>
	{
		// PLL source is HSE oscillator clock
		PLLInputClock = 8000000U;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <RCC_GetPLLOutputClock+0x74>)
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e001      	b.n	8001eb4 <RCC_GetPLLOutputClock+0x38>
	}
	else
	{
		// PLL source is HSI oscillator clock / 2
		PLLInputClock = (8000000U / 2);
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <RCC_GetPLLOutputClock+0x78>)
 8001eb2:	60fb      	str	r3, [r7, #12]
	}

	// 3. Check PLL multiplication factor
	tmp = (RCC->CFGR & RCC_CFGR_PLLMULL) >> 18;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <RCC_GetPLLOutputClock+0x70>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	72bb      	strb	r3, [r7, #10]

	if(tmp == 0xF)
 8001ec2:	7abb      	ldrb	r3, [r7, #10]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d102      	bne.n	8001ece <RCC_GetPLLOutputClock+0x52>
	{
		PLLMulFactor = 16;
 8001ec8:	2310      	movs	r3, #16
 8001eca:	72fb      	strb	r3, [r7, #11]
 8001ecc:	e002      	b.n	8001ed4 <RCC_GetPLLOutputClock+0x58>
	}
	else
	{
		PLLMulFactor = tmp + 2;
 8001ece:	7abb      	ldrb	r3, [r7, #10]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	72fb      	strb	r3, [r7, #11]
	}

	// 4. Calculate PLL output clock
	PLLOutputClock = PLLInputClock * PLLMulFactor;
 8001ed4:	7afa      	ldrb	r2, [r7, #11]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	607b      	str	r3, [r7, #4]


	return PLLOutputClock;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	003d0900 	.word	0x003d0900

08001ef8 <RCC_GetPCLKxValue>:



uint32_t RCC_GetPCLKxValue(uint8_t pclkType)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b08d      	sub	sp, #52	; 0x34
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	uint8_t sysclkSrcType;
	uint32_t sysclkValue;
	uint32_t pclkValue;

	// 1. Check current system clock
	sysclkSrcType = (RCC->CFGR >> 2) & 0x3;
 8001f02:	4b4e      	ldr	r3, [pc, #312]	; (800203c <RCC_GetPCLKxValue+0x144>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(sysclkSrcType == 0)
 8001f12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <RCC_GetPCLKxValue+0x28>
	{
		// System clock source is HSI
		sysclkValue = 8000000;
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <RCC_GetPCLKxValue+0x148>)
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1e:	e00d      	b.n	8001f3c <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 1)
 8001f20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <RCC_GetPCLKxValue+0x36>
	{
		// System clock source is HSE
		sysclkValue = 8000000;
 8001f28:	4b45      	ldr	r3, [pc, #276]	; (8002040 <RCC_GetPCLKxValue+0x148>)
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2c:	e006      	b.n	8001f3c <RCC_GetPCLKxValue+0x44>
	}
	else if(sysclkSrcType == 2)
 8001f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d102      	bne.n	8001f3c <RCC_GetPCLKxValue+0x44>
	{
		// System clock source is PLL output
		sysclkValue = RCC_GetPLLOutputClock();
 8001f36:	f7ff ffa1 	bl	8001e7c <RCC_GetPLLOutputClock>
 8001f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	// 2. Check AHB prescaler value
	uint8_t ahbPrsc;
	uint16_t ahbPrscTable[8] = {2, 4, 8, 16, 64, 128, 256, 512};
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <RCC_GetPCLKxValue+0x14c>)
 8001f3e:	f107 0410 	add.w	r4, r7, #16
 8001f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;

	tmp = (RCC->CFGR >> 4) & 0xF;
 8001f48:	4b3c      	ldr	r3, [pc, #240]	; (800203c <RCC_GetPCLKxValue+0x144>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(tmp < 8)
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f5c:	2b07      	cmp	r3, #7
 8001f5e:	d803      	bhi.n	8001f68 <RCC_GetPCLKxValue+0x70>
	{
		ahbPrsc = 1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f66:	e00a      	b.n	8001f7e <RCC_GetPCLKxValue+0x86>
	}
	else
	{
		ahbPrsc = ahbPrscTable[(tmp-8)];
 8001f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f6c:	3b08      	subs	r3, #8
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f74:	4413      	add	r3, r2
 8001f76:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	// 3. Check APB prescaler value
	uint8_t apb1Prsc, apb2Prsc;
	uint8_t apbPrscTable[4] = {2, 4, 8, 16};
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <RCC_GetPCLKxValue+0x150>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

	if(pclkType == PCLK1)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11a      	bne.n	8001fc0 <RCC_GetPCLKxValue+0xc8>
	{
		tmp = (RCC->CFGR >> 8) & 0x7;
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <RCC_GetPCLKxValue+0x144>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb1Prsc = 1;
 8001f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d803      	bhi.n	8001faa <RCC_GetPCLKxValue+0xb2>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fa8:	e027      	b.n	8001ffa <RCC_GetPCLKxValue+0x102>
		else			apb1Prsc = apbPrscTable[(tmp - 4)];
 8001faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fbe:	e01c      	b.n	8001ffa <RCC_GetPCLKxValue+0x102>
	}
	else if(pclkType == PCLK2)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d119      	bne.n	8001ffa <RCC_GetPCLKxValue+0x102>
	{
		tmp = (RCC->CFGR >> 11) & 0x7;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <RCC_GetPCLKxValue+0x144>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if(tmp < 4)		apb2Prsc = 1;
 8001fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d803      	bhi.n	8001fe6 <RCC_GetPCLKxValue+0xee>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001fe4:	e009      	b.n	8001ffa <RCC_GetPCLKxValue+0x102>
		else			apb2Prsc = apbPrscTable[(tmp - 4)];
 8001fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fea:	3b04      	subs	r3, #4
 8001fec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	}

	// 4. Calculate System clock value
	if(pclkType == PCLK1)			pclkValue = (sysclkValue / ahbPrsc) / apb1Prsc;
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <RCC_GetPCLKxValue+0x11e>
 8002000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002006:	fbb2 f2f3 	udiv	r2, r2, r3
 800200a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
 8002014:	e00c      	b.n	8002030 <RCC_GetPCLKxValue+0x138>
	else if(pclkType == PCLK2)		pclkValue = (sysclkValue / ahbPrsc) / apb2Prsc;
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d109      	bne.n	8002030 <RCC_GetPCLKxValue+0x138>
 800201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002022:	fbb2 f2f3 	udiv	r2, r2, r3
 8002026:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28


	return pclkValue; // [MHz]
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002032:	4618      	mov	r0, r3
 8002034:	3734      	adds	r7, #52	; 0x34
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	0800bdc8 	.word	0x0800bdc8
 8002048:	0800bdd8 	.word	0x0800bdd8

0800204c <SPI_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void SPI_Init(SPI_HandleTypeDef *pSPIHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	SPI_MspInit(pSPIHandle);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f002 fa5b 	bl	8004510 <SPI_MspInit>

	SPI_DISABLE(pSPIHandle);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002068:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	Communication speed, First bit and CRC calculation state */
	WRITE_REG(pSPIHandle->Instance->CR1, ((pSPIHandle->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	ea42 0103 	orr.w	r1, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
											 (pSPIHandle->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
											 (pSPIHandle->Init.FirstBit  & SPI_CR1_LSBFIRST) |
											 (pSPIHandle->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(pSPIHandle->Instance->CR2, ((pSPIHandle->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	0c1a      	lsrs	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f002 0204 	and.w	r2, r2, #4
 80020d8:	605a      	str	r2, [r3, #4]
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <SPI_PeripheralClockControl>:
   */
}


void SPI_PeripheralClockControl(SPI_TypeDef *SPIx, uint8_t En_or_Di)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d120      	bne.n	8002138 <SPI_PeripheralClockControl+0x54>
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_ENABLE();
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <SPI_PeripheralClockControl+0xa4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d106      	bne.n	800210c <SPI_PeripheralClockControl+0x28>
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002108:	6193      	str	r3, [r2, #24]
	{
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
	}
}
 800210a:	e038      	b.n	800217e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_ENABLE();
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <SPI_PeripheralClockControl+0xac>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d106      	bne.n	8002122 <SPI_PeripheralClockControl+0x3e>
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 800211a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211e:	61d3      	str	r3, [r2, #28]
}
 8002120:	e02d      	b.n	800217e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_ENABLE();
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <SPI_PeripheralClockControl+0xb0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d129      	bne.n	800217e <SPI_PeripheralClockControl+0x9a>
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002134:	61d3      	str	r3, [r2, #28]
}
 8002136:	e022      	b.n	800217e <SPI_PeripheralClockControl+0x9a>
	else if(En_or_Di == DISABLE)
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11f      	bne.n	800217e <SPI_PeripheralClockControl+0x9a>
		if(SPIx == SPI1)		RCC_SPI1_CLK_DISABLE();
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a11      	ldr	r2, [pc, #68]	; (8002188 <SPI_PeripheralClockControl+0xa4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d106      	bne.n	8002154 <SPI_PeripheralClockControl+0x70>
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 800214c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002150:	6193      	str	r3, [r2, #24]
}
 8002152:	e014      	b.n	800217e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI2)	RCC_SPI2_CLK_DISABLE();
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <SPI_PeripheralClockControl+0xac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d106      	bne.n	800216a <SPI_PeripheralClockControl+0x86>
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002166:	61d3      	str	r3, [r2, #28]
}
 8002168:	e009      	b.n	800217e <SPI_PeripheralClockControl+0x9a>
		else if(SPIx == SPI3)	RCC_SPI3_CLK_DISABLE();
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <SPI_PeripheralClockControl+0xb0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d105      	bne.n	800217e <SPI_PeripheralClockControl+0x9a>
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <SPI_PeripheralClockControl+0xa8>)
 8002178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800217c:	61d3      	str	r3, [r2, #28]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40013000 	.word	0x40013000
 800218c:	40021000 	.word	0x40021000
 8002190:	40003800 	.word	0x40003800
 8002194:	40003c00 	.word	0x40003c00

08002198 <TIM_Base_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TIM_Base_Init(TIM_HandleTypeDef *pTIMHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7f1b      	ldrb	r3, [r3, #28]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <TIM_Base_Init+0x2a>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_Base_MspInit(pTIMHandle->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fef6 	bl	8003fa0 <TIM_Base_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f81f 	bl	80021f8 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]
 80021c0:	e000      	b.n	80021c4 <TIM_Base_Init+0x2c>
		return;
 80021c2:	bf00      	nop
}
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <TIM_PWM_Init>:
}



void TIM_PWM_Init(TIM_HandleTypeDef *pTIMHandle)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	// 1. Check state of TIMx is RESET
	if(pTIMHandle->State != TIM_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f1b      	ldrb	r3, [r3, #28]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <TIM_PWM_Init+0x26>
		// State of TIMx is not RESET
		return;
	}

	// 2. Init Low level hardware of TIM : GPIO, CLOCK
	TIM_PWM_MspInit(pTIMHandle);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fef7 	bl	8003fd0 <TIM_PWM_MspInit>

	// 3. Set the Time Base configuration
	TIM_Base_SetConfig(pTIMHandle);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f808 	bl	80021f8 <TIM_Base_SetConfig>

	// 4. Init the TIM state
	pTIMHandle->State = TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	771a      	strb	r2, [r3, #28]
 80021ee:	e000      	b.n	80021f2 <TIM_PWM_Init+0x28>
		return;
 80021f0:	bf00      	nop
}
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <TIM_Base_SetConfig>:
	 */
}


void TIM_Base_SetConfig(TIM_HandleTypeDef *pTIMHandle)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

	// 1. Configure counter mode
	temp |= pTIMHandle->Init.CounterMode;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

	// 2. Decide the use of Auto-reload preload
	temp |= pTIMHandle->Init.AutoReloadPreload;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

	MODIFY_REG(pTIMHandle->Instance->CR1, (TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_ARPE), temp);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

	// 3. Configure ARR value
	pTIMHandle->Instance->ARR = (uint32_t)pTIMHandle->Init.Period;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68d2      	ldr	r2, [r2, #12]
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c

	// 4. Configure Prescaler value
	pTIMHandle->Instance->PSC = pTIMHandle->Init.Prescaler;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

	// 5. Configure Repetition counter value
	pTIMHandle->Instance->RCR = pTIMHandle->Init.RepetitionCounter;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6952      	ldr	r2, [r2, #20]
 8002248:	631a      	str	r2, [r3, #48]	; 0x30

	// 6. Generate update event to reload some registers
	pTIMHandle->Instance->EGR |= TIM_EGR_UG;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *pTIMHandle, TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	switch (Channel)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	f200 80d3 	bhi.w	800241e <TIM_PWM_ConfigChannel+0x1ba>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <TIM_PWM_ConfigChannel+0x1c>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	080022b5 	.word	0x080022b5
 8002284:	0800241f 	.word	0x0800241f
 8002288:	0800241f 	.word	0x0800241f
 800228c:	0800241f 	.word	0x0800241f
 8002290:	0800230d 	.word	0x0800230d
 8002294:	0800241f 	.word	0x0800241f
 8002298:	0800241f 	.word	0x0800241f
 800229c:	0800241f 	.word	0x0800241f
 80022a0:	08002369 	.word	0x08002369
 80022a4:	0800241f 	.word	0x0800241f
 80022a8:	0800241f 	.word	0x0800241f
 80022ac:	0800241f 	.word	0x0800241f
 80022b0:	080023c3 	.word	0x080023c3
	{
		case TIM_CHANNEL_1:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC1E;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC1S | TIM_CCMR1_OC1M), sConfig->OCMode);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC1P, sConfig->OCPolarity);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f023 0102 	bic.w	r1, r3, #2
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR1 = sConfig->Pulse;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	6852      	ldr	r2, [r2, #4]
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0208 	orr.w	r2, r2, #8
 8002308:	619a      	str	r2, [r3, #24]

			break;
 800230a:	e089      	b.n	8002420 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_2:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC2E;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0210 	bic.w	r2, r2, #16
 800231a:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR1, (TIM_CCMR1_CC2S | TIM_CCMR1_OC2M), (sConfig->OCMode << 8U));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	619a      	str	r2, [r3, #24]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC2P, (sConfig->OCPolarity << 4U));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f023 0120 	bic.w	r1, r3, #32
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	011a      	lsls	r2, r3, #4
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR2 = sConfig->Pulse;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	6852      	ldr	r2, [r2, #4]
 8002354:	639a      	str	r2, [r3, #56]	; 0x38

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002364:	619a      	str	r2, [r3, #24]

			break;
 8002366:	e05b      	b.n	8002420 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_3:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC3E;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002376:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC3S | TIM_CCMR2_OC3M), sConfig->OCMode);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC3P, (sConfig->OCPolarity << 8U));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR3 = sConfig->Pulse;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	6852      	ldr	r2, [r2, #4]
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0208 	orr.w	r2, r2, #8
 80023be:	61da      	str	r2, [r3, #28]

			break;
 80023c0:	e02e      	b.n	8002420 <TIM_PWM_ConfigChannel+0x1bc>
		}

		case TIM_CHANNEL_4:
		{
			// 1. Disable the channel
			pTIMHandle->Instance->CCER &= ~TIM_CCER_CC4E;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d0:	621a      	str	r2, [r3, #32]

			// 2. Reset the output compare mode bits and Select the Output Compare Mode
			MODIFY_REG(pTIMHandle->Instance->CCMR2, (TIM_CCMR2_CC4S | TIM_CCMR2_OC4M), (sConfig->OCMode << 8U));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f423 41e6 	bic.w	r1, r3, #29440	; 0x7300
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	61da      	str	r2, [r3, #28]

			// 3. Reset the Output Polarity level and Set the Output Compare Polarity
			MODIFY_REG(pTIMHandle->Instance->CCER, TIM_CCER_CC4P, (sConfig->OCPolarity << 12U));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	031a      	lsls	r2, r3, #12
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	621a      	str	r2, [r3, #32]

			// 4. Set the Capture Compare Register value
			pTIMHandle->Instance->CCR4 = sConfig->Pulse;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	6852      	ldr	r2, [r2, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

			// 5. Set the Preload enable bit for channel1
			pTIMHandle->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241a:	61da      	str	r2, [r3, #28]

			break;
 800241c:	e000      	b.n	8002420 <TIM_PWM_ConfigChannel+0x1bc>
		}
		default :
			break;
 800241e:	bf00      	nop
	}
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <TIM_PeripheralClockControl>:


void TIM_PeripheralClockControl(TIM_TypeDef *TIMx, uint8_t En_or_Di)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d157      	bne.n	80024ee <TIM_PeripheralClockControl+0xc2>
	{
		if(TIMx == TIM1)		RCC_TIM1_CLK_ENABLE();
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a5a      	ldr	r2, [pc, #360]	; (80025ac <TIM_PeripheralClockControl+0x180>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d106      	bne.n	8002454 <TIM_PeripheralClockControl+0x28>
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4a59      	ldr	r2, [pc, #356]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800244c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002450:	6193      	str	r3, [r2, #24]
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
	}
}
 8002452:	e0a6      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_ENABLE();
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d106      	bne.n	800246a <TIM_PeripheralClockControl+0x3e>
 800245c:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a53      	ldr	r2, [pc, #332]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	61d3      	str	r3, [r2, #28]
}
 8002468:	e09b      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_ENABLE();
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <TIM_PeripheralClockControl+0x188>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d106      	bne.n	8002480 <TIM_PeripheralClockControl+0x54>
 8002472:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	61d3      	str	r3, [r2, #28]
}
 800247e:	e090      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_ENABLE();
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <TIM_PeripheralClockControl+0x18c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <TIM_PeripheralClockControl+0x6a>
 8002488:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	61d3      	str	r3, [r2, #28]
}
 8002494:	e085      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_ENABLE();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <TIM_PeripheralClockControl+0x190>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d106      	bne.n	80024ac <TIM_PeripheralClockControl+0x80>
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a43      	ldr	r2, [pc, #268]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	61d3      	str	r3, [r2, #28]
}
 80024aa:	e07a      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_ENABLE();
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a44      	ldr	r2, [pc, #272]	; (80025c0 <TIM_PeripheralClockControl+0x194>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d106      	bne.n	80024c2 <TIM_PeripheralClockControl+0x96>
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	61d3      	str	r3, [r2, #28]
}
 80024c0:	e06f      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_ENABLE();
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <TIM_PeripheralClockControl+0x198>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d106      	bne.n	80024d8 <TIM_PeripheralClockControl+0xac>
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024d0:	f043 0320 	orr.w	r3, r3, #32
 80024d4:	61d3      	str	r3, [r2, #28]
}
 80024d6:	e064      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_ENABLE();
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <TIM_PeripheralClockControl+0x19c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d160      	bne.n	80025a2 <TIM_PeripheralClockControl+0x176>
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ea:	6193      	str	r3, [r2, #24]
}
 80024ec:	e059      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
	else if(En_or_Di == DISABLE)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d156      	bne.n	80025a2 <TIM_PeripheralClockControl+0x176>
		if(TIMx == TIM1)		RCC_TIM1_CLK_DISABLE();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <TIM_PeripheralClockControl+0x180>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <TIM_PeripheralClockControl+0xde>
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002506:	6193      	str	r3, [r2, #24]
}
 8002508:	e04b      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM2)	RCC_TIM2_CLK_DISABLE();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d106      	bne.n	8002520 <TIM_PeripheralClockControl+0xf4>
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	61d3      	str	r3, [r2, #28]
}
 800251e:	e040      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM3)	RCC_TIM3_CLK_DISABLE();
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <TIM_PeripheralClockControl+0x188>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d106      	bne.n	8002536 <TIM_PeripheralClockControl+0x10a>
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	61d3      	str	r3, [r2, #28]
}
 8002534:	e035      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM4)	RCC_TIM4_CLK_DISABLE();
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <TIM_PeripheralClockControl+0x18c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d106      	bne.n	800254c <TIM_PeripheralClockControl+0x120>
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	61d3      	str	r3, [r2, #28]
}
 800254a:	e02a      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM5)	RCC_TIM5_CLK_DISABLE();
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <TIM_PeripheralClockControl+0x190>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d106      	bne.n	8002562 <TIM_PeripheralClockControl+0x136>
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800255a:	f023 0308 	bic.w	r3, r3, #8
 800255e:	61d3      	str	r3, [r2, #28]
}
 8002560:	e01f      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM6)	RCC_TIM6_CLK_DISABLE();
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <TIM_PeripheralClockControl+0x194>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d106      	bne.n	8002578 <TIM_PeripheralClockControl+0x14c>
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002570:	f023 0310 	bic.w	r3, r3, #16
 8002574:	61d3      	str	r3, [r2, #28]
}
 8002576:	e014      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM7)	RCC_TIM7_CLK_DISABLE();
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <TIM_PeripheralClockControl+0x198>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d106      	bne.n	800258e <TIM_PeripheralClockControl+0x162>
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002586:	f023 0320 	bic.w	r3, r3, #32
 800258a:	61d3      	str	r3, [r2, #28]
}
 800258c:	e009      	b.n	80025a2 <TIM_PeripheralClockControl+0x176>
		else if(TIMx == TIM8)	RCC_TIM8_CLK_DISABLE();
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <TIM_PeripheralClockControl+0x19c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d105      	bne.n	80025a2 <TIM_PeripheralClockControl+0x176>
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <TIM_PeripheralClockControl+0x184>)
 800259c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a0:	6193      	str	r3, [r2, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40001000 	.word	0x40001000
 80025c4:	40001400 	.word	0x40001400
 80025c8:	40013400 	.word	0x40013400

080025cc <TIM_PWM_Start>:


void TIM_PWM_Start(TIM_HandleTypeDef *pTIMHandle, uint32_t Channel)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
	// Enable the channel
	if(Channel == TIM_CHANNEL_1)		pTIMHandle->Instance->CCER |= TIM_CCER_CC1E;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <TIM_PWM_Start+0x22>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e022      	b.n	8002634 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_2)	pTIMHandle->Instance->CCER |= TIM_CCER_CC2E;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d108      	bne.n	8002606 <TIM_PWM_Start+0x3a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0210 	orr.w	r2, r2, #16
 8002602:	621a      	str	r2, [r3, #32]
 8002604:	e016      	b.n	8002634 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_3)	pTIMHandle->Instance->CCER |= TIM_CCER_CC3E;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d108      	bne.n	800261e <TIM_PWM_Start+0x52>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a1a      	ldr	r2, [r3, #32]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e00a      	b.n	8002634 <TIM_PWM_Start+0x68>
	else if(Channel == TIM_CHANNEL_4)	pTIMHandle->Instance->CCER |= TIM_CCER_CC4E;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d107      	bne.n	8002634 <TIM_PWM_Start+0x68>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002632:	621a      	str	r2, [r3, #32]

	// Enable the Main output
	pTIMHandle->Instance->BDTR |= TIM_BDTR_MOE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002642:	645a      	str	r2, [r3, #68]	; 0x44

	// Enable the TIM1
	pTIMHandle->Instance->CR1 |= TIM_CR1_CEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <TIM_IRQHandling>:



void TIM_IRQHandling(TIM_HandleTypeDef *pTIMHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for TIM */

	uint32_t temp1, temp2;

	// 1. Handle for interrupt generated by Update Event
	temp1 = READ_BIT(pTIMHandle->Instance->SR, TIM_SR_UIF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
	temp2 = READ_BIT(pTIMHandle->Instance->DIER, TIM_DIER_UIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <TIM_IRQHandling+0x3e>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <TIM_IRQHandling+0x3e>
	{
		// This interrupt is generated by Update Event
		CLEAR_FLAG(TIM6->SR, TIM_SR_UIF);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <TIM_IRQHandling+0x48>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <TIM_IRQHandling+0x48>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6113      	str	r3, [r2, #16]

		TIM_PeriodElapsedCallback(pTIMHandle);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f004 fa4b 	bl	8006b34 <TIM_PeriodElapsedCallback>
	}
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40001000 	.word	0x40001000

080026ac <USART_Init>:
static void UART_DMAError(DMA_HandleTypeDef *pDMAHandle);



void USART_Init(UART_HandleTypeDef *pUSARTHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	// Temporary register for USART configuration
	uint32_t config = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

	// Init the Low level hardware of USART : GPIO, CLOCK
	USART_MspInit(pUSARTHandle);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 fb87 	bl	8003dcc <USART_MspInit>

	// USARTx Disable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, DISABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f8db 	bl	8002880 <USART_PeripheralControl>

	/* --------------------- USART_CR1 configuration --------------------- */

	// 1. Enable USART Tx and Rx engines according to the Mode configuration item
	config |= (uint32_t)pUSARTHandle->Init.Mode | pUSARTHandle->Init.WordLength | pUSARTHandle->Init.Parity;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE | USART_CR1_M | USART_CR1_PCE | USART_CR1_PS), config);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026ea:	f023 030c 	bic.w	r3, r3, #12
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	60d3      	str	r3, [r2, #12]
	config = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR2 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.StopBits;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR2, (uint32_t)USART_CR2_STOP, config);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
	config = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_CR3 configuration --------------------- */
	config |= (uint32_t)pUSARTHandle->Init.HwFlowCtl;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(pUSARTHandle->Instance->CR3, (uint32_t)(USART_CR3_CTSE | USART_CR3_RTSE), config);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	430a      	orrs	r2, r1
 800273a:	615a      	str	r2, [r3, #20]
	config = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]

	/* --------------------- USART_BRR configuration --------------------- */
	USART_SetBaudRate(pUSARTHandle->Instance, pUSARTHandle->Init.BaudRate);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 f8b6 	bl	80028bc <USART_SetBaudRate>


	// USARTx Enable for configuration
	USART_PeripheralControl(pUSARTHandle->Instance, ENABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f892 	bl	8002880 <USART_PeripheralControl>

	// Init the USART state
	pUSARTHandle->State = USART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <USART_PeripheralClockControl>:
}



void USART_PeripheralClockControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d136      	bne.n	80027ec <USART_PeripheralClockControl+0x80>
	{
		if(USARTx == USART1)		RCC_USART1_CLK_ENABLE();
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a39      	ldr	r2, [pc, #228]	; (8002868 <USART_PeripheralClockControl+0xfc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d106      	bne.n	8002794 <USART_PeripheralClockControl+0x28>
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a38      	ldr	r2, [pc, #224]	; (800286c <USART_PeripheralClockControl+0x100>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6193      	str	r3, [r2, #24]
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
	}
}
 8002792:	e064      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_ENABLE();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a36      	ldr	r2, [pc, #216]	; (8002870 <USART_PeripheralClockControl+0x104>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <USART_PeripheralClockControl+0x3e>
 800279c:	4b33      	ldr	r3, [pc, #204]	; (800286c <USART_PeripheralClockControl+0x100>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a32      	ldr	r2, [pc, #200]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a6:	61d3      	str	r3, [r2, #28]
}
 80027a8:	e059      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_ENABLE();
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a31      	ldr	r2, [pc, #196]	; (8002874 <USART_PeripheralClockControl+0x108>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d106      	bne.n	80027c0 <USART_PeripheralClockControl+0x54>
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027bc:	61d3      	str	r3, [r2, #28]
}
 80027be:	e04e      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_ENABLE();
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <USART_PeripheralClockControl+0x10c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d106      	bne.n	80027d6 <USART_PeripheralClockControl+0x6a>
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027d2:	61d3      	str	r3, [r2, #28]
}
 80027d4:	e043      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_ENABLE();
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a28      	ldr	r2, [pc, #160]	; (800287c <USART_PeripheralClockControl+0x110>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d13f      	bne.n	800285e <USART_PeripheralClockControl+0xf2>
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e8:	61d3      	str	r3, [r2, #28]
}
 80027ea:	e038      	b.n	800285e <USART_PeripheralClockControl+0xf2>
	else if(En_or_Di == DISABLE)
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d135      	bne.n	800285e <USART_PeripheralClockControl+0xf2>
		if(USARTx == USART1)		RCC_USART1_CLK_DISABLE();
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <USART_PeripheralClockControl+0xfc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d106      	bne.n	8002808 <USART_PeripheralClockControl+0x9c>
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <USART_PeripheralClockControl+0x100>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a1b      	ldr	r2, [pc, #108]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002804:	6193      	str	r3, [r2, #24]
}
 8002806:	e02a      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART2)	RCC_USART2_CLK_DISABLE();
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a19      	ldr	r2, [pc, #100]	; (8002870 <USART_PeripheralClockControl+0x104>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <USART_PeripheralClockControl+0xb2>
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002816:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800281a:	61d3      	str	r3, [r2, #28]
}
 800281c:	e01f      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == USART3)	RCC_USART3_CLK_DISABLE();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <USART_PeripheralClockControl+0x108>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d106      	bne.n	8002834 <USART_PeripheralClockControl+0xc8>
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <USART_PeripheralClockControl+0x100>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002830:	61d3      	str	r3, [r2, #28]
}
 8002832:	e014      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART4)	RCC_UART4_CLK_DISABLE();
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <USART_PeripheralClockControl+0x10c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <USART_PeripheralClockControl+0xde>
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <USART_PeripheralClockControl+0x100>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002842:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002846:	61d3      	str	r3, [r2, #28]
}
 8002848:	e009      	b.n	800285e <USART_PeripheralClockControl+0xf2>
		else if(USARTx == UART5)	RCC_UART5_CLK_DISABLE();
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <USART_PeripheralClockControl+0x110>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d105      	bne.n	800285e <USART_PeripheralClockControl+0xf2>
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <USART_PeripheralClockControl+0x100>)
 8002858:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800285c:	61d3      	str	r3, [r2, #28]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	40004400 	.word	0x40004400
 8002874:	40004800 	.word	0x40004800
 8002878:	40004c00 	.word	0x40004c00
 800287c:	40005000 	.word	0x40005000

08002880 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_TypeDef *USARTx, uint8_t En_or_Di)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)				SET_BIT(USARTx->CR1, USART_CR1_UE);
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <USART_PeripheralControl+0x20>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60da      	str	r2, [r3, #12]
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
}
 800289e:	e008      	b.n	80028b2 <USART_PeripheralControl+0x32>
	else if(En_or_Di == DISABLE)		CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <USART_PeripheralControl+0x32>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <USART_SetBaudRate>:


void USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t BaudRate)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	uint32_t usartDiv;
	uint32_t mantissa, fraction;
	uint8_t tmp;

	// 1. Get PCLK of USARTx
	if(USARTx == USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <USART_SetBaudRate+0xbc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d104      	bne.n	80028d8 <USART_SetBaudRate+0x1c>
	{
		// Case of USART1
		pclk = RCC_GetPCLKxValue(PCLK2);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff fb12 	bl	8001ef8 <RCC_GetPCLKxValue>
 80028d4:	61f8      	str	r0, [r7, #28]
 80028d6:	e003      	b.n	80028e0 <USART_SetBaudRate+0x24>
	}
	else
	{
		// Case of USART2/3/4/5
		pclk = RCC_GetPCLKxValue(PCLK1);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff fb0d 	bl	8001ef8 <RCC_GetPCLKxValue>
 80028de:	61f8      	str	r0, [r7, #28]
	}

	// 2. Calculate USARTDIV vlaue by given PCLK, BaudRate
	usartDiv = ((float)pclk / (16 * BaudRate)) * 100;
 80028e0:	69f8      	ldr	r0, [r7, #28]
 80028e2:	f7fe fa07 	bl	8000cf4 <__aeabi_ui2f>
 80028e6:	4604      	mov	r4, r0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fa01 	bl	8000cf4 <__aeabi_ui2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe fb08 	bl	8000f0c <__aeabi_fdiv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	491f      	ldr	r1, [pc, #124]	; (800297c <USART_SetBaudRate+0xc0>)
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fa4f 	bl	8000da4 <__aeabi_fmul>
 8002906:	4603      	mov	r3, r0
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fc11 	bl	8001130 <__aeabi_f2uiz>
 800290e:	4603      	mov	r3, r0
 8002910:	61bb      	str	r3, [r7, #24]

	// 3. Extract Mantissa part from USARTDIV
	mantissa = usartDiv / 100;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <USART_SetBaudRate+0xc4>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	617b      	str	r3, [r7, #20]

	// 4. Extract Fraction part from USARTDIV
	tmp = usartDiv - (mantissa * 100);
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	0089      	lsls	r1, r1, #2
 800292a:	440b      	add	r3, r1
 800292c:	4619      	mov	r1, r3
 800292e:	0088      	lsls	r0, r1, #2
 8002930:	4619      	mov	r1, r3
 8002932:	4603      	mov	r3, r0
 8002934:	440b      	add	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	b2db      	uxtb	r3, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	74fb      	strb	r3, [r7, #19]

	fraction = (uint8_t)((((tmp * 16) + 50) / 100) & 0xF);
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	3332      	adds	r3, #50	; 0x32
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <USART_SetBaudRate+0xc4>)
 8002946:	fb82 1203 	smull	r1, r2, r2, r3
 800294a:	1152      	asrs	r2, r2, #5
 800294c:	17db      	asrs	r3, r3, #31
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	60fb      	str	r3, [r7, #12]

	// 5. Write Mantissa part and Fraction part value to USART_BRR
	CLEAR_REG(USARTx->BRR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]

	USARTx->BRR |= ((mantissa << 4) | fraction);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	0119      	lsls	r1, r3, #4
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	430b      	orrs	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	3724      	adds	r7, #36	; 0x24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	40013800 	.word	0x40013800
 800297c:	42c80000 	.word	0x42c80000
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <BLDC_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void BLDC_Init(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of BLDC : GPIO, EXTI, TIMER
	BLDC_MspInit(pBLDCHandle);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 fb97 	bl	80040c0 <BLDC_MspInit>

}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <BLDC_Drive>:
	 */
}


void BLDC_Drive(BLDC_HandleTypeDef *pBLDCHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029aa:	3b01      	subs	r3, #1
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d87b      	bhi.n	8002aa8 <BLDC_Drive+0x10c>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <BLDC_Drive+0x1c>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	08002a85 	.word	0x08002a85
 80029bc:	080029f5 	.word	0x080029f5
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	08002a3d 	.word	0x08002a3d
 80029c8:	08002a61 	.word	0x08002a61
 80029cc:	08002a19 	.word	0x08002a19
	{
		case Phase1:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step5(pBLDCHandle);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <BLDC_Drive+0x46>
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fafe 	bl	8002fdc <BLDC_Step5>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
			break;
 80029e0:	e064      	b.n	8002aac <BLDC_Drive+0x110>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step2(pBLDCHandle);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d15f      	bne.n	8002aac <BLDC_Drive+0x110>
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa4d 	bl	8002e8c <BLDC_Step2>
			break;
 80029f2:	e05b      	b.n	8002aac <BLDC_Drive+0x110>
		}

		case Phase2:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step4(pBLDCHandle);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <BLDC_Drive+0x6a>
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fab4 	bl	8002f6c <BLDC_Step4>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
			break;
 8002a04:	e054      	b.n	8002ab0 <BLDC_Drive+0x114>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step1(pBLDCHandle);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d14f      	bne.n	8002ab0 <BLDC_Drive+0x114>
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa03 	bl	8002e1c <BLDC_Step1>
			break;
 8002a16:	e04b      	b.n	8002ab0 <BLDC_Drive+0x114>
		}

		case Phase3:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step3(pBLDCHandle);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <BLDC_Drive+0x8e>
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa6a 	bl	8002efc <BLDC_Step3>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
			break;
 8002a28:	e044      	b.n	8002ab4 <BLDC_Drive+0x118>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step6(pBLDCHandle);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d13f      	bne.n	8002ab4 <BLDC_Drive+0x118>
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fb09 	bl	800304c <BLDC_Step6>
			break;
 8002a3a:	e03b      	b.n	8002ab4 <BLDC_Drive+0x118>
		}

		case Phase4:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step2(pBLDCHandle);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <BLDC_Drive+0xb2>
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa20 	bl	8002e8c <BLDC_Step2>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
			break;
 8002a4c:	e034      	b.n	8002ab8 <BLDC_Drive+0x11c>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step5(pBLDCHandle);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d12f      	bne.n	8002ab8 <BLDC_Drive+0x11c>
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fabf 	bl	8002fdc <BLDC_Step5>
			break;
 8002a5e:	e02b      	b.n	8002ab8 <BLDC_Drive+0x11c>
		}

		case Phase5:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step1(pBLDCHandle);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <BLDC_Drive+0xd6>
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9d6 	bl	8002e1c <BLDC_Step1>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
			break;
 8002a70:	e024      	b.n	8002abc <BLDC_Drive+0x120>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step4(pBLDCHandle);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d11f      	bne.n	8002abc <BLDC_Drive+0x120>
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fa75 	bl	8002f6c <BLDC_Step4>
			break;
 8002a82:	e01b      	b.n	8002abc <BLDC_Drive+0x120>
		}

		case Phase6:
		{
			if(pBLDCHandle->RotationDir == CW)				BLDC_Step6(pBLDCHandle);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <BLDC_Drive+0xfa>
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fadc 	bl	800304c <BLDC_Step6>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
			break;
 8002a94:	e014      	b.n	8002ac0 <BLDC_Drive+0x124>
			else if(pBLDCHandle->RotationDir == CCW)		BLDC_Step3(pBLDCHandle);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10f      	bne.n	8002ac0 <BLDC_Drive+0x124>
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fa2b 	bl	8002efc <BLDC_Step3>
			break;
 8002aa6:	e00b      	b.n	8002ac0 <BLDC_Drive+0x124>
		}

		default :
			break;
 8002aa8:	bf00      	nop
 8002aaa:	e00a      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002aac:	bf00      	nop
 8002aae:	e008      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002ab0:	bf00      	nop
 8002ab2:	e006      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002ab4:	bf00      	nop
 8002ab6:	e004      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002ab8:	bf00      	nop
 8002aba:	e002      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <BLDC_Drive+0x126>
			break;
 8002ac0:	bf00      	nop
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <BLDC_Get_Speed>:


void BLDC_Get_Speed(BLDC_HandleTypeDef *pBLDCHandle, double Ts)
{
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	e9c7 2300 	strd	r2, r3, [r7]
	int16_t deltaHallCount;

	deltaHallCount = pBLDCHandle->HallCount - pBLDCHandle->OldHallCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	82fb      	strh	r3, [r7, #22]
	pBLDCHandle->OldHallCount = pBLDCHandle->HallCount;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c

	pBLDCHandle->CurSpeed = 60. * (double)deltaHallCount / (pBLDCHandle->MotorPoleNum * pBLDCHandle->MotorGearRatio * 3.) / Ts;
 8002af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fc94 	bl	8000424 <__aeabi_i2d>
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <BLDC_Get_Speed+0x94>)
 8002b02:	f7fd fcf9 	bl	80004f8 <__aeabi_dmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	4625      	mov	r5, r4
 8002b0c:	461c      	mov	r4, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1c:	fb03 f302 	mul.w	r3, r3, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fc7f 	bl	8000424 <__aeabi_i2d>
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <BLDC_Get_Speed+0x98>)
 8002b2c:	f7fd fce4 	bl	80004f8 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fe08 	bl	800074c <__aeabi_ddiv>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	460c      	mov	r4, r1
 8002b40:	4618      	mov	r0, r3
 8002b42:	4621      	mov	r1, r4
 8002b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b48:	f7fd fe00 	bl	800074c <__aeabi_ddiv>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	404e0000 	.word	0x404e0000
 8002b64:	40080000 	.word	0x40080000

08002b68 <BLDC_Get_Position>:


void BLDC_Get_Position(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	switch(pBLDCHandle->HallPhase)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b76:	3b01      	subs	r3, #1
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	f200 8093 	bhi.w	8002ca4 <BLDC_Get_Position+0x13c>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <BLDC_Get_Position+0x1c>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002c79 	.word	0x08002c79
 8002b88:	08002bc9 	.word	0x08002bc9
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002c21 	.word	0x08002c21
 8002b94:	08002c4d 	.word	0x08002c4d
 8002b98:	08002bf5 	.word	0x08002bf5
	{
		case Phase1:
		{
			if(pBLDCHandle->OldHallPhase == Phase2)				pBLDCHandle->HallCount++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d105      	bne.n	8002bb2 <BLDC_Get_Position+0x4a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
			break;
 8002bb0:	e07a      	b.n	8002ca8 <BLDC_Get_Position+0x140>
			else if(pBLDCHandle->OldHallPhase == Phase6)		pBLDCHandle->HallCount--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d175      	bne.n	8002ca8 <BLDC_Get_Position+0x140>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002bc6:	e06f      	b.n	8002ca8 <BLDC_Get_Position+0x140>
		}
		case Phase2:
		{
			if(pBLDCHandle->OldHallPhase == Phase3)				pBLDCHandle->HallCount++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d105      	bne.n	8002bde <BLDC_Get_Position+0x76>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
			break;
 8002bdc:	e066      	b.n	8002cac <BLDC_Get_Position+0x144>
			else if(pBLDCHandle->OldHallPhase == Phase1)		pBLDCHandle->HallCount--;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d161      	bne.n	8002cac <BLDC_Get_Position+0x144>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002bf2:	e05b      	b.n	8002cac <BLDC_Get_Position+0x144>
		}
		case Phase3:
		{
			if(pBLDCHandle->OldHallPhase == Phase4)				pBLDCHandle->HallCount++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d105      	bne.n	8002c0a <BLDC_Get_Position+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
			break;
 8002c08:	e052      	b.n	8002cb0 <BLDC_Get_Position+0x148>
			else if(pBLDCHandle->OldHallPhase == Phase2)		pBLDCHandle->HallCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d14d      	bne.n	8002cb0 <BLDC_Get_Position+0x148>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c1e:	e047      	b.n	8002cb0 <BLDC_Get_Position+0x148>
		}
		case Phase4:
		{
			if(pBLDCHandle->OldHallPhase == Phase5)				pBLDCHandle->HallCount++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d105      	bne.n	8002c36 <BLDC_Get_Position+0xce>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
			break;
 8002c34:	e03e      	b.n	8002cb4 <BLDC_Get_Position+0x14c>
			else if(pBLDCHandle->OldHallPhase == Phase3)		pBLDCHandle->HallCount--;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d139      	bne.n	8002cb4 <BLDC_Get_Position+0x14c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c4a:	e033      	b.n	8002cb4 <BLDC_Get_Position+0x14c>
		}
		case Phase5:
		{
			if(pBLDCHandle->OldHallPhase == Phase6)				pBLDCHandle->HallCount++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <BLDC_Get_Position+0xfa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
			break;
 8002c60:	e02a      	b.n	8002cb8 <BLDC_Get_Position+0x150>
			else if(pBLDCHandle->OldHallPhase == Phase4)		pBLDCHandle->HallCount--;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d125      	bne.n	8002cb8 <BLDC_Get_Position+0x150>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002c76:	e01f      	b.n	8002cb8 <BLDC_Get_Position+0x150>
		}
		case Phase6:
		{
			if(pBLDCHandle->OldHallPhase == Phase1)				pBLDCHandle->HallCount++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d105      	bne.n	8002c8e <BLDC_Get_Position+0x126>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	659a      	str	r2, [r3, #88]	; 0x58
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
			break;
 8002c8c:	e016      	b.n	8002cbc <BLDC_Get_Position+0x154>
			else if(pBLDCHandle->OldHallPhase == Phase5)		pBLDCHandle->HallCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d111      	bne.n	8002cbc <BLDC_Get_Position+0x154>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 8002ca2:	e00b      	b.n	8002cbc <BLDC_Get_Position+0x154>
		}
		default :
			break;
 8002ca4:	bf00      	nop
 8002ca6:	e00a      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002ca8:	bf00      	nop
 8002caa:	e008      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002cac:	bf00      	nop
 8002cae:	e006      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <BLDC_Get_Position+0x156>
			break;
 8002cbc:	bf00      	nop
	}

	pBLDCHandle->CurPosition = (pBLDCHandle->HallCount) * (pBLDCHandle->MotorResolution);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbae 	bl	8000424 <__aeabi_i2d>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002cce:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	f7fd fc0f 	bl	80004f8 <__aeabi_dmul>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pBLDCHandle->OldHallPhase = pBLDCHandle->HallPhase;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}

08002cf8 <BLDC_BootstrapCap_Charge>:


void BLDC_BootstrapCap_Charge(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	// 1. Clear GPIO pin of Top side(UT, VT, WT) and Disable All PWM channels
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6858      	ldr	r0, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fe ffad 	bl	8001c6c <GPIO_WritePin>
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0210 	bic.w	r2, r2, #16
 8002d38:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d4c:	621a      	str	r2, [r3, #32]
	//Delay_ms(10);

	// 2. Re-initialize GPIO pins from TIM PWM channels to GPIO Output mode
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2210      	movs	r2, #16
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 ffe4 	bl	8009d24 <memset>

	// 3. Re-initialize GPIO pins to GPIO Output mode
	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f107 0208 	add.w	r2, r7, #8
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fd21 	bl	80017c0 <GPIO_Init>
	//Delay_ms(10);

	// 4. Charge Bootstrap Capacitor for 10ms
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6898      	ldr	r0, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fe ff6e 	bl	8001c6c <GPIO_WritePin>
	Delay_ms(1);
 8002d90:	2001      	movs	r0, #1
 8002d92:	f000 ff1b 	bl	8003bcc <Delay_ms>
	GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6898      	ldr	r0, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fe ff62 	bl	8001c6c <GPIO_WritePin>

	// 5. Re-initialize GPIO pins from GPIO Output mode to TIM PWM channels
	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	2210      	movs	r2, #16
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f006 ffb7 	bl	8009d24 <memset>

	GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	60bb      	str	r3, [r7, #8]
	GPIOInit.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
	GPIOInit.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
	GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
	GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f107 0208 	add.w	r2, r7, #8
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fcf4 	bl	80017c0 <GPIO_Init>
	//Delay_ms(10);

	// 6. Enable All PWM channels
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0210 	orr.w	r2, r2, #16
 8002dfe:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e12:	621a      	str	r2, [r3, #32]
	//Delay_ms(10);
}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <BLDC_Step1>:


void BLDC_Step1(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	b299      	uxth	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4812      	ldr	r0, [pc, #72]	; (8002e88 <BLDC_Step1+0x6c>)
 8002e3e:	f7fe ff33 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e68:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0210 	orr.w	r2, r2, #16
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40010c00 	.word	0x40010c00

08002e8c <BLDC_Step2>:


void BLDC_Step2(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b299      	uxth	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4812      	ldr	r0, [pc, #72]	; (8002ef8 <BLDC_Step2+0x6c>)
 8002eae:	f7fe fefb 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. VB PWM On (PB7)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0210 	orr.w	r2, r2, #16
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40010c00 	.word	0x40010c00

08002efc <BLDC_Step3>:


void BLDC_Step3(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	// 1. WT Logic On (PB2)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_WT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_VT));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b299      	uxth	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4812      	ldr	r0, [pc, #72]	; (8002f68 <BLDC_Step3+0x6c>)
 8002f1e:	f7fe fec3 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0210 	bic.w	r2, r2, #16
 8002f34:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40010c00 	.word	0x40010c00

08002f6c <BLDC_Step4>:


void BLDC_Step4(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4812      	ldr	r0, [pc, #72]	; (8002fd8 <BLDC_Step4+0x6c>)
 8002f8e:	f7fe fe8b 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. UB PWM On (PB6)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb8:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40010c00 	.word	0x40010c00

08002fdc <BLDC_Step5>:


void BLDC_Step5(BLDC_HandleTypeDef *pBLDCHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	// 1. VT Logic On (PB1)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_VT, (pBLDCHandle->Init.GPIO_Pin_UT | pBLDCHandle->Init.GPIO_Pin_WT));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	b299      	uxth	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4812      	ldr	r0, [pc, #72]	; (8003048 <BLDC_Step5+0x6c>)
 8002ffe:	f7fe fe53 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a1a      	ldr	r2, [r3, #32]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0210 	bic.w	r2, r2, #16
 8003028:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40010c00 	.word	0x40010c00

0800304c <BLDC_Step6>:


void BLDC_Step6(BLDC_HandleTypeDef *pBLDCHandle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	// 1. UT Logic On (PB0)
	GPIO_ModifyPin(GPIOB, pBLDCHandle->Init.GPIO_Pin_UT, (pBLDCHandle->Init.GPIO_Pin_VT | pBLDCHandle->Init.GPIO_Pin_WT));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	b299      	uxth	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	b29b      	uxth	r3, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	4812      	ldr	r0, [pc, #72]	; (80030b8 <BLDC_Step6+0x6c>)
 800306e:	f7fe fe1b 	bl	8001ca8 <GPIO_ModifyPin>

	// 2. WB PWM On (PB8)
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0210 	bic.w	r2, r2, #16
 8003098:	621a      	str	r2, [r3, #32]
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40010c00 	.word	0x40010c00

080030bc <BLDC_CalculatePID>:
 * 										   BLDC APIs related to PID control									  *
 * 										   																	  *
 **************************************************************************************************************/

void BLDC_CalculatePID(BLDC_HandleTypeDef *pBLDCHandle, double refValue, double curValue, double dt)
{
 80030bc:	b5b0      	push	{r4, r5, r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	e9c7 2300 	strd	r2, r3, [r7]
	pBLDCHandle->Error = refValue - curValue;
 80030c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030d0:	f7fd f85a 	bl	8000188 <__aeabi_dsub>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8

	pBLDCHandle->P_term = pBLDCHandle->Kp * pBLDCHandle->Error;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80030ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4623      	mov	r3, r4
 80030f2:	f7fd fa01 	bl	80004f8 <__aeabi_dmul>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	pBLDCHandle->I_term += pBLDCHandle->Ki * pBLDCHandle->Error * dt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	e9d3 4538 	ldrd	r4, r5, [r3, #224]	; 0xe0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8003112:	f7fd f9f1 	bl	80004f8 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003122:	f7fd f9e9 	bl	80004f8 <__aeabi_dmul>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4620      	mov	r0, r4
 800312c:	4629      	mov	r1, r5
 800312e:	f7fd f82d 	bl	800018c <__adddf3>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	pBLDCHandle->D_term = pBLDCHandle->Kd * (pBLDCHandle->Error - pBLDCHandle->PrvError) / dt;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800314e:	f7fd f81b 	bl	8000188 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f7fd f9cd 	bl	80004f8 <__aeabi_dmul>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	4618      	mov	r0, r3
 8003164:	4621      	mov	r1, r4
 8003166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800316a:	f7fd faef 	bl	800074c <__aeabi_ddiv>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

	pBLDCHandle->PwmPID = pBLDCHandle->P_term + pBLDCHandle->I_term + pBLDCHandle->D_term;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8003184:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003188:	461a      	mov	r2, r3
 800318a:	4623      	mov	r3, r4
 800318c:	f7fc fffe 	bl	800018c <__adddf3>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	4618      	mov	r0, r3
 8003196:	4621      	mov	r1, r4
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800319e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7fc fff1 	bl	800018c <__adddf3>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	pBLDCHandle->PrvError = pBLDCHandle->Error;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80031ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bdb0      	pop	{r4, r5, r7, pc}
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <BLDC_SpeedPID>:



void BLDC_SpeedPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b08b      	sub	sp, #44	; 0x2c
 80031d4:	af04      	add	r7, sp, #16
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	e9c7 2300 	strd	r2, r3, [r7]
	/* Get PWM duty cycle which is calculated by Error value and PID gain */
	BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefSpeed, pBLDCHandle->CurSpeed, dt);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	e9d3 561a 	ldrd	r5, r6, [r3, #104]	; 0x68
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80031e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031f0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80031f4:	e9cd 3400 	strd	r3, r4, [sp]
 80031f8:	462a      	mov	r2, r5
 80031fa:	4633      	mov	r3, r6
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff5d 	bl	80030bc <BLDC_CalculatePID>

	/* Figure out Rotation direction */
	if(pBLDCHandle->PwmPID >= 0)		pBLDCHandle->RotationDir = CW;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f7fd fbf8 	bl	8000a04 <__aeabi_dcmpge>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <BLDC_SpeedPID+0x54>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003222:	e00f      	b.n	8003244 <BLDC_SpeedPID+0x74>
	else if(pBLDCHandle->PwmPID < 0)	pBLDCHandle->RotationDir = CCW;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	f7fd fbd3 	bl	80009dc <__aeabi_dcmplt>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <BLDC_SpeedPID+0x74>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Saturate PWM duty if it exceeds the limit of PWM duty value */
	uint16_t PwmPID_ABS = (uint16_t)(abs(pBLDCHandle->PwmPID));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800324a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800324e:	4618      	mov	r0, r3
 8003250:	4621      	mov	r1, r4
 8003252:	f7fd fc01 	bl	8000a58 <__aeabi_d2iz>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	bfb8      	it	lt
 800325c:	425b      	neglt	r3, r3
 800325e:	82fb      	strh	r3, [r7, #22]

	if(PwmPID_ABS > (3600 * 0.95))		PwmPID_ABS = (3600 * 0.95);
 8003260:	8afb      	ldrh	r3, [r7, #22]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f8de 	bl	8000424 <__aeabi_i2d>
 8003268:	a309      	add	r3, pc, #36	; (adr r3, 8003290 <BLDC_SpeedPID+0xc0>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fd fbd3 	bl	8000a18 <__aeabi_dcmpgt>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <BLDC_SpeedPID+0xae>
 8003278:	f640 535c 	movw	r3, #3420	; 0xd5c
 800327c:	82fb      	strh	r3, [r7, #22]

	SetPwmDuty(pBLDCHandle, PwmPID_ABS);
 800327e:	8afb      	ldrh	r3, [r7, #22]
 8003280:	4619      	mov	r1, r3
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f006 fcdd 	bl	8009c42 <SetPwmDuty>
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003290:	00000000 	.word	0x00000000
 8003294:	40aab800 	.word	0x40aab800

08003298 <BLDC_PositionPID>:


void BLDC_PositionPID(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	b08f      	sub	sp, #60	; 0x3c
 800329e:	af04      	add	r7, sp, #16
 80032a0:	6278      	str	r0, [r7, #36]	; 0x24
 80032a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(pBLDCHandle->MotorState == MOTOR_STATE_POSITION)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d111      	bne.n	80032d4 <BLDC_PositionPID+0x3c>
	{
		/* Get PWM duty cycle which is calculated by Error value and PID gain */
		BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->RefPosition, pBLDCHandle->CurPosition, dt);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	e9d3 561e 	ldrd	r5, r6, [r3, #120]	; 0x78
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80032bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80032c4:	e9cd 1200 	strd	r1, r2, [sp]
 80032c8:	462a      	mov	r2, r5
 80032ca:	4633      	mov	r3, r6
 80032cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ce:	f7ff fef5 	bl	80030bc <BLDC_CalculatePID>
 80032d2:	e01a      	b.n	800330a <BLDC_PositionPID+0x72>
	}
	else if(pBLDCHandle->MotorState == MOTOR_STATE_POSITION_TRACKING)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d115      	bne.n	800330a <BLDC_PositionPID+0x72>
	{
		/* Calculate Trajectory Position for given Reference position, Current position, Vmax, Acceleration values  */
		BLDC_CalculateTrajectoryPosition(pBLDCHandle, dt);
 80032de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e4:	f000 f8b2 	bl	800344c <BLDC_CalculateTrajectoryPosition>

		/* Get PWM duty cycle which is calculated by Error value and PID gain */
		BLDC_CalculatePID(pBLDCHandle, pBLDCHandle->TrjCurPosition, pBLDCHandle->CurPosition, dt);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	e9d3 5622 	ldrd	r5, r6, [r3, #136]	; 0x88
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
 80032f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80032fc:	e9cd 1200 	strd	r1, r2, [sp]
 8003300:	462a      	mov	r2, r5
 8003302:	4633      	mov	r3, r6
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f7ff fed9 	bl	80030bc <BLDC_CalculatePID>

	static double maxPidLimit = 3600.;
	static double minPidLimit = (3600 * 0.00);

	/* Limit the PID control output */
	if(pBLDCHandle->PwmPID > maxPidLimit)					pBLDCHandle->PwmPID = maxPidLimit;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <BLDC_PositionPID+0x1ac>)
 8003312:	cb18      	ldmia	r3, {r3, r4}
 8003314:	461a      	mov	r2, r3
 8003316:	4623      	mov	r3, r4
 8003318:	f7fd fb7e 	bl	8000a18 <__aeabi_dcmpgt>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <BLDC_PositionPID+0x96>
 8003322:	4b48      	ldr	r3, [pc, #288]	; (8003444 <BLDC_PositionPID+0x1ac>)
 8003324:	cb18      	ldmia	r3, {r3, r4}
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 800332c:	e017      	b.n	800335e <BLDC_PositionPID+0xc6>
	else if(pBLDCHandle->PwmPID < (-1) * maxPidLimit)		pBLDCHandle->PwmPID = (-1) * maxPidLimit;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <BLDC_PositionPID+0x1ac>)
 8003336:	cb18      	ldmia	r3, {r3, r4}
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003344:	f7fd fb4a 	bl	80009dc <__aeabi_dcmplt>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <BLDC_PositionPID+0xc6>
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <BLDC_PositionPID+0x1ac>)
 8003350:	cb18      	ldmia	r3, {r3, r4}
 8003352:	469a      	mov	sl, r3
 8003354:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	e9c3 ab3c 	strd	sl, fp, [r3, #240]	; 0xf0


	if(pBLDCHandle->PwmPID >= 0)
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	f7fd fb4a 	bl	8000a04 <__aeabi_dcmpge>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d024      	beq.n	80033c0 <BLDC_PositionPID+0x128>
	{
		pBLDCHandle->RotationDir = CW;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		if(pBLDCHandle->PwmPID < minPidLimit)			pBLDCHandle->PwmPID = minPidLimit;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003384:	4b30      	ldr	r3, [pc, #192]	; (8003448 <BLDC_PositionPID+0x1b0>)
 8003386:	cb18      	ldmia	r3, {r3, r4}
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	f7fd fb26 	bl	80009dc <__aeabi_dcmplt>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <BLDC_PositionPID+0x108>
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <BLDC_PositionPID+0x1b0>)
 8003398:	cb18      	ldmia	r3, {r3, r4}
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

		SetPwmDuty(pBLDCHandle, (uint16_t)(pBLDCHandle->PwmPID));	// 5% 여유 필요한가
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80033a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033aa:	4618      	mov	r0, r3
 80033ac:	4621      	mov	r1, r4
 80033ae:	f7fd fb7b 	bl	8000aa8 <__aeabi_d2uiz>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ba:	f006 fc42 	bl	8009c42 <SetPwmDuty>

		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;

		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
	}
}
 80033be:	e03b      	b.n	8003438 <BLDC_PositionPID+0x1a0>
	else if(pBLDCHandle->PwmPID < 0)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f7fd fb05 	bl	80009dc <__aeabi_dcmplt>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <BLDC_PositionPID+0x142>
}
 80033d8:	e02e      	b.n	8003438 <BLDC_PositionPID+0x1a0>
		pBLDCHandle->RotationDir = CCW;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		if(pBLDCHandle->PwmPID > (-1) * minPidLimit)	pBLDCHandle->PwmPID = (-1) * minPidLimit;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <BLDC_PositionPID+0x1b0>)
 80033ea:	cb18      	ldmia	r3, {r3, r4}
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f8:	f7fd fb0e 	bl	8000a18 <__aeabi_dcmpgt>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <BLDC_PositionPID+0x17a>
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <BLDC_PositionPID+0x1b0>)
 8003404:	cb18      	ldmia	r3, {r3, r4}
 8003406:	4698      	mov	r8, r3
 8003408:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
		SetPwmDuty(pBLDCHandle, (uint16_t)((-1) * pBLDCHandle->PwmPID));
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8003418:	e9d4 3400 	ldrd	r3, r4, [r4]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003428:	f7fd fb3e 	bl	8000aa8 <__aeabi_d2uiz>
 800342c:	4603      	mov	r3, r0
 800342e:	b29b      	uxth	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003434:	f006 fc05 	bl	8009c42 <SetPwmDuty>
}
 8003438:	bf00      	nop
 800343a:	372c      	adds	r7, #44	; 0x2c
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000
 8003448:	20000200 	.word	0x20000200

0800344c <BLDC_CalculateTrajectoryPosition>:


void BLDC_CalculateTrajectoryPosition(BLDC_HandleTypeDef *pBLDCHandle, double dt)
{
 800344c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003450:	b091      	sub	sp, #68	; 0x44
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	e9c7 2300 	strd	r2, r3, [r7]
	double remainingPos;
	int rotationDir;
	int accelDir;

	/* Calculate the Total Reference Position value to Move */
	deltaRefPos = pBLDCHandle->RefPosition - pBLDCHandle->PrvRefPosition;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8003466:	e9d4 3400 	ldrd	r3, r4, [r4]
 800346a:	461a      	mov	r2, r3
 800346c:	4623      	mov	r3, r4
 800346e:	f7fc fe8b 	bl	8000188 <__aeabi_dsub>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	/* Calculate the Position value to Move in Acceleration interval */
	accelIntervalPos = (0.5) * (pBLDCHandle->TrjRefMaxSpeed * pBLDCHandle->TrjRefMaxSpeed) / pBLDCHandle->TrjRefAcceleration;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8003486:	e9d4 3400 	ldrd	r3, r4, [r4]
 800348a:	461a      	mov	r2, r3
 800348c:	4623      	mov	r3, r4
 800348e:	f7fd f833 	bl	80004f8 <__aeabi_dmul>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	4618      	mov	r0, r3
 8003498:	4621      	mov	r1, r4
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4bb4      	ldr	r3, [pc, #720]	; (8003770 <BLDC_CalculateTrajectoryPosition+0x324>)
 80034a0:	f7fd f82a 	bl	80004f8 <__aeabi_dmul>
 80034a4:	4603      	mov	r3, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	4618      	mov	r0, r3
 80034aa:	4621      	mov	r1, r4
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80034b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4623      	mov	r3, r4
 80034ba:	f7fd f947 	bl	800074c <__aeabi_ddiv>
 80034be:	4603      	mov	r3, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	/* Calculate the Remaining Position value */
	remainingPos = pBLDCHandle->RefPosition - pBLDCHandle->CurPosition;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80034d2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	f7fc fe55 	bl	8000188 <__aeabi_dsub>
 80034de:	4603      	mov	r3, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	e9c7 3408 	strd	r3, r4, [r7, #32]

	/* Figure out the Direction to Rotate */
	if(remainingPos >= 0)			rotationDir = CW;
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034f2:	f7fd fa87 	bl	8000a04 <__aeabi_dcmpge>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <BLDC_CalculateTrajectoryPosition+0xb6>
 80034fc:	2300      	movs	r3, #0
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003500:	e00c      	b.n	800351c <BLDC_CalculateTrajectoryPosition+0xd0>
	else if(remainingPos < 0)		rotationDir = CCW;
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800350e:	f7fd fa65 	bl	80009dc <__aeabi_dcmplt>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <BLDC_CalculateTrajectoryPosition+0xd0>
 8003518:	2301      	movs	r3, #1
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c


	/* When the Speed profile is Trapezoidal */
	if( accelIntervalPos < (0.5 * deltaRefPos) )
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	4b93      	ldr	r3, [pc, #588]	; (8003770 <BLDC_CalculateTrajectoryPosition+0x324>)
 8003522:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003526:	f7fc ffe7 	bl	80004f8 <__aeabi_dmul>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003536:	f7fd fa51 	bl	80009dc <__aeabi_dcmplt>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d029      	beq.n	8003594 <BLDC_CalculateTrajectoryPosition+0x148>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < accelIntervalPos )			accelDir = 1;		// Motor is in Acceleration interval
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800354c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003550:	461a      	mov	r2, r3
 8003552:	4623      	mov	r3, r4
 8003554:	f7fc fe18 	bl	8000188 <__aeabi_dsub>
 8003558:	4603      	mov	r3, r0
 800355a:	460c      	mov	r4, r1
 800355c:	461a      	mov	r2, r3
 800355e:	4623      	mov	r3, r4
 8003560:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003564:	f7fd fa58 	bl	8000a18 <__aeabi_dcmpgt>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <BLDC_CalculateTrajectoryPosition+0x128>
 800356e:	2301      	movs	r3, #1
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
 8003572:	e049      	b.n	8003608 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else if( remainingPos > accelIntervalPos )													accelDir = 0;		// Motor is in Constant Velocity interval
 8003574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003578:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800357c:	f7fd fa4c 	bl	8000a18 <__aeabi_dcmpgt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <BLDC_CalculateTrajectoryPosition+0x140>
 8003586:	2300      	movs	r3, #0
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
 800358a:	e03d      	b.n	8003608 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;		// Motor is in Deceleration interval
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
 8003592:	e039      	b.n	8003608 <BLDC_CalculateTrajectoryPosition+0x1bc>
	}
	/* When the Speed profile is Isosceles triangle */
	else if( accelIntervalPos >= (0.5 * deltaRefPos) )
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	4b75      	ldr	r3, [pc, #468]	; (8003770 <BLDC_CalculateTrajectoryPosition+0x324>)
 800359a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800359e:	f7fc ffab 	bl	80004f8 <__aeabi_dmul>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ae:	f7fd fa29 	bl	8000a04 <__aeabi_dcmpge>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d027      	beq.n	8003608 <BLDC_CalculateTrajectoryPosition+0x1bc>
	{
		if( (pBLDCHandle->CurPosition - pBLDCHandle->PrvRefPosition) < (0.5 * deltaRefPos) )		accelDir = 1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80035c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	f7fc fddc 	bl	8000188 <__aeabi_dsub>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4698      	mov	r8, r3
 80035d6:	46a1      	mov	r9, r4
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <BLDC_CalculateTrajectoryPosition+0x324>)
 80035de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035e2:	f7fc ff89 	bl	80004f8 <__aeabi_dmul>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	461a      	mov	r2, r3
 80035ec:	4623      	mov	r3, r4
 80035ee:	4640      	mov	r0, r8
 80035f0:	4649      	mov	r1, r9
 80035f2:	f7fd f9f3 	bl	80009dc <__aeabi_dcmplt>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <BLDC_CalculateTrajectoryPosition+0x1b6>
 80035fc:	2301      	movs	r3, #1
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003600:	e002      	b.n	8003608 <BLDC_CalculateTrajectoryPosition+0x1bc>
		else																						accelDir = -1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
	}


	switch (accelDir)
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <BLDC_CalculateTrajectoryPosition+0x1e8>
 800360e:	2b01      	cmp	r3, #1
 8003610:	d003      	beq.n	800361a <BLDC_CalculateTrajectoryPosition+0x1ce>
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d015      	beq.n	8003644 <BLDC_CalculateTrajectoryPosition+0x1f8>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
			break;
		}

		default :
			break;
 8003618:	e028      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = pBLDCHandle->TrjRefAcceleration * dt;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003624:	f7fc ff68 	bl	80004f8 <__aeabi_dmul>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003632:	e01b      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = 0;
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	f04f 0400 	mov.w	r4, #0
 800363e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 8003642:	e013      	b.n	800366c <BLDC_CalculateTrajectoryPosition+0x220>
			pBLDCHandle->TrjDtAcceleration = (-1) * pBLDCHandle->TrjRefAcceleration * dt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800364a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800364e:	461d      	mov	r5, r3
 8003650:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8003654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003658:	4628      	mov	r0, r5
 800365a:	4631      	mov	r1, r6
 800365c:	f7fc ff4c 	bl	80004f8 <__aeabi_dmul>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
			break;
 800366a:	bf00      	nop
	}


	pBLDCHandle->TrjCurSpeed += pBLDCHandle->TrjDtAcceleration;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003678:	e9d4 3400 	ldrd	r3, r4, [r4]
 800367c:	461a      	mov	r2, r3
 800367e:	4623      	mov	r3, r4
 8003680:	f7fc fd84 	bl	800018c <__adddf3>
 8003684:	4603      	mov	r3, r0
 8003686:	460c      	mov	r4, r1
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90


	switch (rotationDir)
 800368e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <BLDC_CalculateTrajectoryPosition+0x24e>
 8003694:	2b01      	cmp	r3, #1
 8003696:	d07d      	beq.n	8003794 <BLDC_CalculateTrajectoryPosition+0x348>

			break;
		}

		default :
			break;
 8003698:	e0ee      	b.n	8003878 <BLDC_CalculateTrajectoryPosition+0x42c>
			if(pBLDCHandle->TrjCurPosition >= pBLDCHandle->RefPosition)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80036a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4623      	mov	r3, r4
 80036ae:	f7fd f9a9 	bl	8000a04 <__aeabi_dcmpge>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <BLDC_CalculateTrajectoryPosition+0x29a>
				pBLDCHandle->TrjCurSpeed = 0;
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	f04f 0400 	mov.w	r4, #0
 80036c2:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80036da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80036e4:	e0c8      	b.n	8003878 <BLDC_CalculateTrajectoryPosition+0x42c>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <BLDC_CalculateTrajectoryPosition+0x324>)
 80036ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f0:	f7fc ff02 	bl	80004f8 <__aeabi_dmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	461d      	mov	r5, r3
 80036fa:	4626      	mov	r6, r4
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	f7fc fd41 	bl	800018c <__adddf3>
 800370a:	4603      	mov	r3, r0
 800370c:	460c      	mov	r4, r1
 800370e:	4618      	mov	r0, r3
 8003710:	4621      	mov	r1, r4
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003718:	e9d4 3400 	ldrd	r3, r4, [r4]
 800371c:	461a      	mov	r2, r3
 800371e:	4623      	mov	r3, r4
 8003720:	f7fc fd32 	bl	8000188 <__aeabi_dsub>
 8003724:	4603      	mov	r3, r0
 8003726:	460c      	mov	r4, r1
 8003728:	461a      	mov	r2, r3
 800372a:	4623      	mov	r3, r4
 800372c:	4628      	mov	r0, r5
 800372e:	4631      	mov	r1, r6
 8003730:	f7fc fee2 	bl	80004f8 <__aeabi_dmul>
 8003734:	4603      	mov	r3, r0
 8003736:	460c      	mov	r4, r1
 8003738:	e9c7 3404 	strd	r3, r4, [r7, #16]
				pBLDCHandle->TrjCurPosition += dtTrjPosition;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003742:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003746:	f7fc fd21 	bl	800018c <__adddf3>
 800374a:	4603      	mov	r3, r0
 800374c:	460c      	mov	r4, r1
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
				if(pBLDCHandle->TrjCurSpeed < 0)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f7fd f93b 	bl	80009dc <__aeabi_dcmplt>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <BLDC_CalculateTrajectoryPosition+0x328>
			break;
 800376c:	e084      	b.n	8003878 <BLDC_CalculateTrajectoryPosition+0x42c>
 800376e:	bf00      	nop
 8003770:	3fe00000 	.word	0x3fe00000
					pBLDCHandle->TrjCurSpeed = 0;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
					pBLDCHandle->TrjCurPosition = pBLDCHandle->RefPosition;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003788:	e9d4 3400 	ldrd	r3, r4, [r4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003792:	e071      	b.n	8003878 <BLDC_CalculateTrajectoryPosition+0x42c>
			if(pBLDCHandle->TrjCurPosition <= pBLDCHandle->RefPosition)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80037a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	f7fd f922 	bl	80009f0 <__aeabi_dcmple>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <BLDC_CalculateTrajectoryPosition+0x394>
				pBLDCHandle->TrjCurSpeed = 0;
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f04f 0400 	mov.w	r4, #0
 80037bc:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
				pBLDCHandle->TrjDtAcceleration = 0;
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
				pBLDCHandle->PrvRefPosition = pBLDCHandle->RefPosition;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80037d4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
			break;
 80037de:	e04a      	b.n	8003876 <BLDC_CalculateTrajectoryPosition+0x42a>
				dtTrjPosition = (0.5) * dt * ((2 * pBLDCHandle->TrjCurSpeed) - pBLDCHandle->TrjDtAcceleration);
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <BLDC_CalculateTrajectoryPosition+0x438>)
 80037e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037ea:	f7fc fe85 	bl	80004f8 <__aeabi_dmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	461d      	mov	r5, r3
 80037f4:	4626      	mov	r6, r4
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	f7fc fcc4 	bl	800018c <__adddf3>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4618      	mov	r0, r3
 800380a:	4621      	mov	r1, r4
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003812:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003816:	461a      	mov	r2, r3
 8003818:	4623      	mov	r3, r4
 800381a:	f7fc fcb5 	bl	8000188 <__aeabi_dsub>
 800381e:	4603      	mov	r3, r0
 8003820:	460c      	mov	r4, r1
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	4628      	mov	r0, r5
 8003828:	4631      	mov	r1, r6
 800382a:	f7fc fe65 	bl	80004f8 <__aeabi_dmul>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	e9c7 3406 	strd	r3, r4, [r7, #24]
				if(dtTrjPosition <= 0)
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003842:	f7fd f8d5 	bl	80009f0 <__aeabi_dcmple>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00c      	beq.n	8003866 <BLDC_CalculateTrajectoryPosition+0x41a>
					pBLDCHandle->TrjCurPosition += dtTrjPosition;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8003852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003856:	f7fc fc99 	bl	800018c <__adddf3>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003864:	e007      	b.n	8003876 <BLDC_CalculateTrajectoryPosition+0x42a>
					pBLDCHandle->TrjCurPosition = pBLDCHandle->RefPosition;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800386c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
			break;
 8003876:	bf00      	nop
	}
}
 8003878:	bf00      	nop
 800387a:	3744      	adds	r7, #68	; 0x44
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003882:	bf00      	nop
 8003884:	3fe00000 	.word	0x3fe00000

08003888 <NVIC_IRQConfig>:
 *												User Common Function												*
 * 																											  		*
 ********************************************************************************************************************/

void NVIC_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t En_or_Di)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
 8003892:	460b      	mov	r3, r1
 8003894:	71bb      	strb	r3, [r7, #6]
 8003896:	4613      	mov	r3, r2
 8003898:	717b      	strb	r3, [r7, #5]
	if(En_or_Di == ENABLE)
 800389a:	797b      	ldrb	r3, [r7, #5]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d115      	bne.n	80038cc <NVIC_IRQConfig+0x44>
	{
		if(IRQNumber < 32)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b1f      	cmp	r3, #31
 80038a4:	d806      	bhi.n	80038b4 <NVIC_IRQConfig+0x2c>
		{
			// IRQ0 ~ IRQ31
			NVIC->ISER[0] = (uint32_t)(1UL << (uint32_t)IRQNumber);
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <NVIC_IRQConfig+0x94>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e025      	b.n	8003900 <NVIC_IRQConfig+0x78>
		}
		else if(IRQNumber < 60)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	2b3b      	cmp	r3, #59	; 0x3b
 80038b8:	d822      	bhi.n	8003900 <NVIC_IRQConfig+0x78>
		{
			// IRQ32 ~ IRQ63
			NVIC->ISER[1] = (uint32_t)(1UL << (uint32_t)(IRQNumber % 32));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <NVIC_IRQConfig+0x94>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	6053      	str	r3, [r2, #4]
 80038ca:	e019      	b.n	8003900 <NVIC_IRQConfig+0x78>
		}

	}
	else if(En_or_Di == DISABLE)
 80038cc:	797b      	ldrb	r3, [r7, #5]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <NVIC_IRQConfig+0x78>
	{
		if(IRQNumber < 32)
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b1f      	cmp	r3, #31
 80038d6:	d807      	bhi.n	80038e8 <NVIC_IRQConfig+0x60>
		{
			// IRQ0 ~ IRQ31
			NVIC->ICER[0] = (uint32_t)(1UL << (uint32_t)IRQNumber);
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <NVIC_IRQConfig+0x94>)
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038e6:	e00b      	b.n	8003900 <NVIC_IRQConfig+0x78>
		}
		else if(IRQNumber < 60)
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	2b3b      	cmp	r3, #59	; 0x3b
 80038ec:	d808      	bhi.n	8003900 <NVIC_IRQConfig+0x78>
		{
			// IRQ32 ~ IRQ63
			NVIC->ICER[1] = (uint32_t)(1UL << (uint32_t)(IRQNumber % 32));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <NVIC_IRQConfig+0x94>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}

	// IRQ Priority configuration
	NVIC->IPR[IRQNumber] = (IRQPriority << 4UL);
 8003900:	4906      	ldr	r1, [pc, #24]	; (800391c <NVIC_IRQConfig+0x94>)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	79ba      	ldrb	r2, [r7, #6]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100

08003920 <SystemClock_Config>:


void SystemClock_Config(uint8_t clockFreq)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b092      	sub	sp, #72	; 0x48
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef oscInit;
	RCC_ClkInitTypeDef clkInit;

	uint8_t FLatency = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	memset(&oscInit, 0, sizeof(oscInit));
 8003930:	f107 031c 	add.w	r3, r7, #28
 8003934:	2228      	movs	r2, #40	; 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f006 f9f3 	bl	8009d24 <memset>
	memset(&clkInit, 0, sizeof(clkInit));
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	2214      	movs	r2, #20
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f006 f9ec 	bl	8009d24 <memset>

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
	oscInit.HSEState = RCC_HSE_ON;
 8003950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003954:	623b      	str	r3, [r7, #32]
	oscInit.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800395a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 8003960:	2302      	movs	r3, #2
 8003962:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clockFreq)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	3b10      	subs	r3, #16
 8003968:	2b38      	cmp	r3, #56	; 0x38
 800396a:	f200 8101 	bhi.w	8003b70 <SystemClock_Config+0x250>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <SystemClock_Config+0x54>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003a59 	.word	0x08003a59
 8003978:	08003b71 	.word	0x08003b71
 800397c:	08003b71 	.word	0x08003b71
 8003980:	08003b71 	.word	0x08003b71
 8003984:	08003b71 	.word	0x08003b71
 8003988:	08003b71 	.word	0x08003b71
 800398c:	08003b71 	.word	0x08003b71
 8003990:	08003b71 	.word	0x08003b71
 8003994:	08003a79 	.word	0x08003a79
 8003998:	08003b71 	.word	0x08003b71
 800399c:	08003b71 	.word	0x08003b71
 80039a0:	08003b71 	.word	0x08003b71
 80039a4:	08003b71 	.word	0x08003b71
 80039a8:	08003b71 	.word	0x08003b71
 80039ac:	08003b71 	.word	0x08003b71
 80039b0:	08003b71 	.word	0x08003b71
 80039b4:	08003a9b 	.word	0x08003a9b
 80039b8:	08003b71 	.word	0x08003b71
 80039bc:	08003b71 	.word	0x08003b71
 80039c0:	08003b71 	.word	0x08003b71
 80039c4:	08003b71 	.word	0x08003b71
 80039c8:	08003b71 	.word	0x08003b71
 80039cc:	08003b71 	.word	0x08003b71
 80039d0:	08003b71 	.word	0x08003b71
 80039d4:	08003abd 	.word	0x08003abd
 80039d8:	08003b71 	.word	0x08003b71
 80039dc:	08003b71 	.word	0x08003b71
 80039e0:	08003b71 	.word	0x08003b71
 80039e4:	08003b71 	.word	0x08003b71
 80039e8:	08003b71 	.word	0x08003b71
 80039ec:	08003b71 	.word	0x08003b71
 80039f0:	08003b71 	.word	0x08003b71
 80039f4:	08003ae1 	.word	0x08003ae1
 80039f8:	08003b71 	.word	0x08003b71
 80039fc:	08003b71 	.word	0x08003b71
 8003a00:	08003b71 	.word	0x08003b71
 8003a04:	08003b71 	.word	0x08003b71
 8003a08:	08003b71 	.word	0x08003b71
 8003a0c:	08003b71 	.word	0x08003b71
 8003a10:	08003b71 	.word	0x08003b71
 8003a14:	08003b05 	.word	0x08003b05
 8003a18:	08003b71 	.word	0x08003b71
 8003a1c:	08003b71 	.word	0x08003b71
 8003a20:	08003b71 	.word	0x08003b71
 8003a24:	08003b71 	.word	0x08003b71
 8003a28:	08003b71 	.word	0x08003b71
 8003a2c:	08003b71 	.word	0x08003b71
 8003a30:	08003b71 	.word	0x08003b71
 8003a34:	08003b29 	.word	0x08003b29
 8003a38:	08003b71 	.word	0x08003b71
 8003a3c:	08003b71 	.word	0x08003b71
 8003a40:	08003b71 	.word	0x08003b71
 8003a44:	08003b71 	.word	0x08003b71
 8003a48:	08003b71 	.word	0x08003b71
 8003a4c:	08003b71 	.word	0x08003b71
 8003a50:	08003b71 	.word	0x08003b71
 8003a54:	08003b4d 	.word	0x08003b4d
	{
		case SYSCLK_FREQ_16MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL2;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a5c:	230f      	movs	r3, #15
 8003a5e:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a60:	2302      	movs	r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 16MHz
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 16MHz
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a76:	e07c      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_24MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL3;
 8003a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7e:	230f      	movs	r3, #15
 8003a80:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a82:	2302      	movs	r3, #2
 8003a84:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 24MHz
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 24MHz
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003a98:	e06b      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_32MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL4;
 8003a9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa0:	230f      	movs	r3, #15
 8003aa2:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 32MHz
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 32MHz
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003aba:	e05a      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_40MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL5;
 8003abc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ac2:	230f      	movs	r3, #15
 8003ac4:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 40MHz
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 20MHz
 8003ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad2:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 40MHz
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003ade:	e048      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_48MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL6;
 8003ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae4:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ae6:	230f      	movs	r3, #15
 8003ae8:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aea:	2302      	movs	r3, #2
 8003aec:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 48MHz
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 24MHz
 8003af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af6:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 48MHz
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_1;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b02:	e036      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_56MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL7;
 8003b04:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8003b08:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 56MHz
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 28MHz
 8003b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b1a:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 56MHz
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b26:	e024      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_64MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL8;
 8003b28:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003b2c:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b32:	2302      	movs	r3, #2
 8003b34:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 64MHz
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 32MHz
 8003b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3e:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 64MHz
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b4a:	e012      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		case SYSCLK_FREQ_72MHZ :
		{
			oscInit.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40

			clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b52:	230f      	movs	r3, #15
 8003b54:	60bb      	str	r3, [r7, #8]
			clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b56:	2302      	movs	r3, #2
 8003b58:	60fb      	str	r3, [r7, #12]
			clkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;	// 72MHz
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
			clkInit.APB1CLKDivider = RCC_HCLK_DIV2;		// 36MHz
 8003b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b62:	617b      	str	r3, [r7, #20]
			clkInit.APB2CLKDivider = RCC_HCLK_DIV1;		// 72MHz
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

			FLatency = FLASH_LATENCY_2;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8003b6e:	e000      	b.n	8003b72 <SystemClock_Config+0x252>
		}

		default :
		{
			break;
 8003b70:	bf00      	nop
		}

	}

	RCC_OscConfig(&oscInit);
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe f8ee 	bl	8001d58 <RCC_OscConfig>

	RCC_ClockConfig(&clkInit, (uint32_t)FLatency);
 8003b7c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f936 	bl	8001df8 <RCC_ClockConfig>
}
 8003b8c:	bf00      	nop
 8003b8e:	3748      	adds	r7, #72	; 0x48
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <Delay_us>:


void Delay_us(uint32_t time_us)
{
 8003b94:	b4b0      	push	{r4, r5, r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	register uint32_t i, j;

	for(i = 0; i < (time_us / 10); i++)
 8003b9c:	2400      	movs	r4, #0
 8003b9e:	e006      	b.n	8003bae <Delay_us+0x1a>
	{
		for(j = 0; j < 0x4D; j++)
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	e001      	b.n	8003ba8 <Delay_us+0x14>
		{
			asm volatile ("NOP");
 8003ba4:	bf00      	nop
		for(j = 0; j < 0x4D; j++)
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	2d4c      	cmp	r5, #76	; 0x4c
 8003baa:	d9fb      	bls.n	8003ba4 <Delay_us+0x10>
	for(i = 0; i < (time_us / 10); i++)
 8003bac:	3401      	adds	r4, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <Delay_us+0x34>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	08db      	lsrs	r3, r3, #3
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	d3f1      	bcc.n	8003ba0 <Delay_us+0xc>
		}
	}
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bcb0      	pop	{r4, r5, r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	cccccccd 	.word	0xcccccccd

08003bcc <Delay_ms>:


void Delay_ms(uint32_t time_ms)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	Delay_us(time_ms * 1000);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffd8 	bl	8003b94 <Delay_us>
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <TIM6_IRQHandler>:

#include "main.h"


void TIM6_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
	TIM_IRQHandling(&TIM6Handle);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <TIM6_IRQHandler+0x10>)
 8003bf2:	f7fe fd35 	bl	8002660 <TIM_IRQHandling>
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200004d4 	.word	0x200004d4

08003c00 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(BLDC1Handle.Init.GPIO_Pins_Hall);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <EXTI9_5_IRQHandler+0x14>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe f889 	bl	8001d20 <EXTI_IRQHandling>
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200002a8 	.word	0x200002a8

08003c18 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	DMA_IRQ_Handling(UART3Handle.hdmatx);
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <DMA1_Channel2_IRQHandler+0x14>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd fb0f 	bl	8001244 <DMA_IRQ_Handling>
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200003a0 	.word	0x200003a0

08003c30 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_0);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7fe f873 	bl	8001d20 <EXTI_IRQHandling>
//	}
//	else
//	{
//		Mode_key++;
//	}
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_1);
 8003c42:	2002      	movs	r0, #2
 8003c44:	f7fe f86c 	bl	8001d20 <EXTI_IRQHandling>
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_2);
 8003c50:	2004      	movs	r0, #4
 8003c52:	f7fe f865 	bl	8001d20 <EXTI_IRQHandling>
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_3);
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7fe f85e 	bl	8001d20 <EXTI_IRQHandling>
//	}
//	else
//	{
//		Start_key++;
//	}
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	EXTI_IRQHandling(GPIO_PIN_4);
 8003c6c:	2010      	movs	r0, #16
 8003c6e:	f7fe f857 	bl	8001d20 <EXTI_IRQHandling>
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <main>:

#include "main.h"


int main(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af02      	add	r7, sp, #8
	// 1. System Clock configuration to 72MHz
	SystemClock_Config(SYSCLK_FREQ_72MHZ);
 8003c7e:	2048      	movs	r0, #72	; 0x48
 8003c80:	f7ff fe4e 	bl	8003920 <SystemClock_Config>
	Delay_ms(1000);
 8003c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c88:	f7ff ffa0 	bl	8003bcc <Delay_ms>

	// 2. Clear All members of Handle structures to 0
	MemsetHandleStructure();
 8003c8c:	f005 ff5c 	bl	8009b48 <MemsetHandleStructure>

	RCC_AFIO_CLK_ENABLE();
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <main+0x134>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a45      	ldr	r2, [pc, #276]	; (8003dac <main+0x134>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6193      	str	r3, [r2, #24]
	AFIO_REMAP_SWJ_NOJTAG();
 8003c9c:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <main+0x138>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <main+0x138>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6053      	str	r3, [r2, #4]

	// 3. Initialize peripherals
	DMA1_Init();				// Initialize DMA1
 8003cb8:	f002 febe 	bl	8006a38 <DMA1_Init>
	Key_Init();					// Initialize peripherals related to Button
 8003cbc:	f002 fd48 	bl	8006750 <Key_Init>
	BLDC1_Init();				// Initialize peripherals related to BLDC motor
 8003cc0:	f002 fd98 	bl	80067f4 <BLDC1_Init>
	UART3_Init();				// Initialize UART2 to transmit data to PC
 8003cc4:	f002 fe5c 	bl	8006980 <UART3_Init>
	TIM6_Init();				// Initialize TIM6 to generate interrupt of 1ms period
 8003cc8:	f002 fe84 	bl	80069d4 <TIM6_Init>
	TFT1_Init();
 8003ccc:	f002 fec6 	bl	8006a5c <TFT1_Init>
	TS1_Init();
 8003cd0:	f002 fef8 	bl	8006ac4 <TS1_Init>
	Delay_ms(10);
 8003cd4:	200a      	movs	r0, #10
 8003cd6:	f7ff ff79 	bl	8003bcc <Delay_ms>

	// 4. Start PWM for UB, VB, WB
	StartTimerPwm(&BLDC1Handle);
 8003cda:	4836      	ldr	r0, [pc, #216]	; (8003db4 <main+0x13c>)
 8003cdc:	f005 ff70 	bl	8009bc0 <StartTimerPwm>
	Delay_ms(10);
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f7ff ff73 	bl	8003bcc <Delay_ms>

	// 5. Disable All PWM channels
	DisableTimerPwmChannel(&BLDC1Handle);
 8003ce6:	4833      	ldr	r0, [pc, #204]	; (8003db4 <main+0x13c>)
 8003ce8:	f005 ff84 	bl	8009bf4 <DisableTimerPwmChannel>
	Delay_ms(10);
 8003cec:	200a      	movs	r0, #10
 8003cee:	f7ff ff6d 	bl	8003bcc <Delay_ms>
	 * 		Timer PWM CCR value : 0
	 * 		NVIC for EXTI : Disabled
	 * 		Timer PWM channels : Disabled
	 */

	TFT1Handle.foreground = White;
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <main+0x140>)
 8003cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf8:	875a      	strh	r2, [r3, #58]	; 0x3a
	TFT1Handle.background = Black;
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <main+0x140>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	879a      	strh	r2, [r3, #60]	; 0x3c

	TFT_Cursor(&TFT1Handle, Green);
 8003d00:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8003d04:	482c      	ldr	r0, [pc, #176]	; (8003db8 <main+0x140>)
 8003d06:	f000 ffa2 	bl	8004c4e <TFT_Cursor>
	TFT1Handle.Xcursor = 9;
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <main+0x140>)
 8003d0c:	2209      	movs	r2, #9
 8003d0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	TFT1Handle.Ycursor = 25;
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <main+0x140>)
 8003d14:	2219      	movs	r2, #25
 8003d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	TFT_String_Large(&TFT1Handle, 3, 10, White, Black, (uint8_t*)"BLDC Motor Controller");	// 9, 10
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <main+0x144>)
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d26:	220a      	movs	r2, #10
 8003d28:	2103      	movs	r1, #3
 8003d2a:	4823      	ldr	r0, [pc, #140]	; (8003db8 <main+0x140>)
 8003d2c:	f000 ffe2 	bl	8004cf4 <TFT_String_Large>
	TFT_String_Large(&TFT1Handle, 9, 15, White, Black, (uint8_t*)"Ver 2.0A");
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <main+0x148>)
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	2109      	movs	r1, #9
 8003d40:	481d      	ldr	r0, [pc, #116]	; (8003db8 <main+0x140>)
 8003d42:	f000 ffd7 	bl	8004cf4 <TFT_String_Large>
	TFT_String(&TFT1Handle, 7, 25, White, Black, (uint8_t*)"Designed by Ganghyeok Lim");	// 7, 15
 8003d46:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <main+0x14c>)
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d52:	2219      	movs	r2, #25
 8003d54:	2107      	movs	r1, #7
 8003d56:	4818      	ldr	r0, [pc, #96]	; (8003db8 <main+0x140>)
 8003d58:	f000 ff95 	bl	8004c86 <TFT_String>
	Delay_ms(1000);
 8003d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d60:	f7ff ff34 	bl	8003bcc <Delay_ms>

	TFT_Clear_Screen(&TFT1Handle);
 8003d64:	4814      	ldr	r0, [pc, #80]	; (8003db8 <main+0x140>)
 8003d66:	f000 fe51 	bl	8004a0c <TFT_Clear_Screen>

	State = STATE_MENU;
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <main+0x150>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]


	while(1)
	{
		switch (State)
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <main+0x150>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d817      	bhi.n	8003da8 <main+0x130>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <main+0x108>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003d97 	.word	0x08003d97
 8003d88:	08003d9d 	.word	0x08003d9d
 8003d8c:	08003da3 	.word	0x08003da3
		{
			case STATE_MENU :
			{
				State_Menu();
 8003d90:	f003 f9fe 	bl	8007190 <State_Menu>
				break;
 8003d94:	e009      	b.n	8003daa <main+0x132>
			}

			case STATE_SPEED :
			{
				State_Speed();
 8003d96:	f003 fb4b 	bl	8007430 <State_Speed>
				break;
 8003d9a:	e006      	b.n	8003daa <main+0x132>
			}

			case STATE_POSITION :
			{
				State_Position();
 8003d9c:	f003 fdd0 	bl	8007940 <State_Position>
				break;
 8003da0:	e003      	b.n	8003daa <main+0x132>
			}

			case STATE_POSITION_TRACKING :
			{
				State_Position_Tracking();
 8003da2:	f004 f805 	bl	8007db0 <State_Position_Tracking>
				break;
 8003da6:	e000      	b.n	8003daa <main+0x132>
			}

			default :
			{
				break;
 8003da8:	bf00      	nop
		switch (State)
 8003daa:	e7e1      	b.n	8003d70 <main+0xf8>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40010000 	.word	0x40010000
 8003db4:	200002a8 	.word	0x200002a8
 8003db8:	200003dc 	.word	0x200003dc
 8003dbc:	0800bddc 	.word	0x0800bddc
 8003dc0:	0800bdf4 	.word	0x0800bdf4
 8003dc4:	0800be00 	.word	0x0800be00
 8003dc8:	2000020c 	.word	0x2000020c

08003dcc <USART_MspInit>:

#include "main.h"


void USART_MspInit(UART_HandleTypeDef *pUARTHandle)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for USART
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	2214      	movs	r2, #20
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 ffa1 	bl	8009d24 <memset>

	if(pUARTHandle->Instance == USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <USART_MspInit+0x1b4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d120      	bne.n	8003e2e <USART_MspInit+0x62>
	{
		// USART1 Tx
		GPIOHandle.Instance = GPIOA;
 8003dec:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <USART_MspInit+0x1b8>)
 8003dee:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_9;
 8003df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df8:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	f107 030c 	add.w	r3, r7, #12
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f7fd fcd7 	bl	80017c0 <GPIO_Init>

		// USART1 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1a:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	f107 030c 	add.w	r3, r7, #12
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7fd fcca 	bl	80017c0 <GPIO_Init>
 8003e2c:	e09e      	b.n	8003f6c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a55      	ldr	r2, [pc, #340]	; (8003f88 <USART_MspInit+0x1bc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d149      	bne.n	8003ecc <USART_MspInit+0x100>
	{
		/* USART2 GPIO Configuration */

		// USART2 Tx
		GPIOHandle.Instance = GPIOA;
 8003e38:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <USART_MspInit+0x1b8>)
 8003e3a:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_2;
 8003e40:	2304      	movs	r3, #4
 8003e42:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003e44:	2301      	movs	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fd fcb2 	bl	80017c0 <GPIO_Init>

		// USART2 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_3;
 8003e60:	2308      	movs	r3, #8
 8003e62:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	f107 030c 	add.w	r3, r7, #12
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f7fd fca6 	bl	80017c0 <GPIO_Init>

		/* USART2 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel7;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a44      	ldr	r2, [pc, #272]	; (8003f8c <USART_MspInit+0x1c0>)
 8003e7a:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	2210      	movs	r2, #16
 8003e82:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f959 	bl	8001170 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a33      	ldr	r2, [pc, #204]	; (8003f90 <USART_MspInit+0x1c4>)
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003ec4:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <USART_MspInit+0x1c4>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8003eca:	e04f      	b.n	8003f6c <USART_MspInit+0x1a0>
	}
	else if(pUARTHandle->Instance == USART3)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	; (8003f94 <USART_MspInit+0x1c8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d14a      	bne.n	8003f6c <USART_MspInit+0x1a0>
	{
		/* USART3 GPIO Configuration */

		// USART3 Tx
		GPIOHandle.Instance = GPIOB;
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <USART_MspInit+0x1cc>)
 8003ed8:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_10;
 8003ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Pull = GPIO_PULLUP;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7fd fc62 	bl	80017c0 <GPIO_Init>

		// USART3 Rx
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pin = GPIO_PIN_11;
 8003f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f04:	613b      	str	r3, [r7, #16]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fd fc55 	bl	80017c0 <GPIO_Init>

		/* USART3 DMA Configuration */
		pUARTHandle->hdmatx->Instance = DMA1_Channel2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <USART_MspInit+0x1d0>)
 8003f1c:	601a      	str	r2, [r3, #0]
		pUARTHandle->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	2210      	movs	r2, #16
 8003f24:	605a      	str	r2, [r3, #4]
		pUARTHandle->hdmatx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
		pUARTHandle->hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	60da      	str	r2, [r3, #12]
		pUARTHandle->hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
		pUARTHandle->hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	615a      	str	r2, [r3, #20]
		pUARTHandle->hdmatx->Init.Mode = DMA_NORMAL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]
		pUARTHandle->hdmatx->Init.Priority = DMA_PRIORITY_LOW;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
		DMA_Init(pUARTHandle->hdmatx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd f908 	bl	8001170 <DMA_Init>


		pUARTHandle->hdmatx = &DMA1Handle;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <USART_MspInit+0x1c4>)
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
		DMA1Handle.Parent = pUARTHandle;
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <USART_MspInit+0x1c4>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6253      	str	r3, [r2, #36]	; 0x24
	}

	// 2. Configure CLOCK for USART
	USART_PeripheralClockControl(pUARTHandle->Instance, ENABLE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fbfa 	bl	800276c <USART_PeripheralClockControl>
}
 8003f78:	bf00      	nop
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40013800 	.word	0x40013800
 8003f84:	40010800 	.word	0x40010800
 8003f88:	40004400 	.word	0x40004400
 8003f8c:	40020080 	.word	0x40020080
 8003f90:	2000043c 	.word	0x2000043c
 8003f94:	40004800 	.word	0x40004800
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	4002001c 	.word	0x4002001c

08003fa0 <TIM_Base_MspInit>:


void TIM_Base_MspInit(TIM_TypeDef *TIMx)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM6)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <TIM_Base_MspInit+0x2c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d108      	bne.n	8003fc2 <TIM_Base_MspInit+0x22>
	{
		// 1. Configure GPIO for TIM
		// TIM6 is used for just time base generation so that GPIO config is not needed

		// 2. Configure CLOCK for TIM
		TIM_PeripheralClockControl(TIMx, ENABLE);
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe fa3a 	bl	800242c <TIM_PeripheralClockControl>

		// 3. Configure NVIC for TIM
		NVIC_IRQConfig(IRQ_NO_TIM6, NVIC_PRIOR_14, ENABLE);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	210e      	movs	r1, #14
 8003fbc:	2036      	movs	r0, #54	; 0x36
 8003fbe:	f7ff fc63 	bl	8003888 <NVIC_IRQConfig>
	}
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40001000 	.word	0x40001000

08003fd0 <TIM_PWM_MspInit>:


void TIM_PWM_MspInit(TIM_HandleTypeDef *pTIMHandle)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	// 1. Configure the GPIO for TIM
	GPIO_HandleTypeDef TIMx_GPIOHandle;

	if(pTIMHandle->Instance == TIM1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a32      	ldr	r2, [pc, #200]	; (80040a8 <TIM_PWM_MspInit+0xd8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d119      	bne.n	8004016 <TIM_PWM_MspInit+0x46>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	2214      	movs	r2, #20
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f005 fe9a 	bl	8009d24 <memset>

		TIMx_GPIOHandle.Instance = GPIOA;
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <TIM_PWM_MspInit+0xdc>)
 8003ff2:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8003ff4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003ff8:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004002:	2301      	movs	r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	3304      	adds	r3, #4
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7fd fbd5 	bl	80017c0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM3)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <TIM_PWM_MspInit+0xe0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d119      	bne.n	8004054 <TIM_PWM_MspInit+0x84>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	2214      	movs	r2, #20
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f005 fe7b 	bl	8009d24 <memset>

		TIMx_GPIOHandle.Instance = GPIOC;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <TIM_PWM_MspInit+0xe4>)
 8004030:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004032:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004036:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004040:	2301      	movs	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f107 030c 	add.w	r3, r7, #12
 800404a:	3304      	adds	r3, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7fd fbb6 	bl	80017c0 <GPIO_Init>
	}

	if(pTIMHandle->Instance == TIM4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <TIM_PWM_MspInit+0xe8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d119      	bne.n	8004092 <TIM_PWM_MspInit+0xc2>
	{
		memset(&TIMx_GPIOHandle, 0, sizeof(TIMx_GPIOHandle));
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	2214      	movs	r2, #20
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f005 fe5c 	bl	8009d24 <memset>

		TIMx_GPIOHandle.Instance = GPIOB;
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <TIM_PWM_MspInit+0xec>)
 800406e:	60fb      	str	r3, [r7, #12]
		TIMx_GPIOHandle.Init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8004070:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004074:	613b      	str	r3, [r7, #16]
		TIMx_GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	617b      	str	r3, [r7, #20]
		TIMx_GPIOHandle.Init.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
		TIMx_GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800407e:	2301      	movs	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
		GPIO_Init(TIMx_GPIOHandle.Instance, &TIMx_GPIOHandle.Init);
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fd fb97 	bl	80017c0 <GPIO_Init>
	}

	// 2. Configure CLOCK for TIM
	TIM_PeripheralClockControl(pTIMHandle->Instance, ENABLE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe f9c7 	bl	800242c <TIM_PeripheralClockControl>
}
 800409e:	bf00      	nop
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40010800 	.word	0x40010800
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40010c00 	.word	0x40010c00

080040c0 <BLDC_MspInit>:


void BLDC_MspInit(BLDC_HandleTypeDef *pBLDCHandle)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08e      	sub	sp, #56	; 0x38
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80040c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040cc:	2210      	movs	r2, #16
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 fe27 	bl	8009d24 <memset>

	if(pBLDCHandle->Instance == BLDC1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 80f1 	bne.w	80042c2 <BLDC_MspInit+0x202>
	{
		/************************************************************************
		 *			Low level init GPIO of UT/VT/WT, UB/VB/WB, HA/HB/HC			*
		 ***********************************************************************/
		BLDC1Handle.Init.GPIOx_Top = GPIOB;
 80040e0:	4b7a      	ldr	r3, [pc, #488]	; (80042cc <BLDC_MspInit+0x20c>)
 80040e2:	4a7b      	ldr	r2, [pc, #492]	; (80042d0 <BLDC_MspInit+0x210>)
 80040e4:	605a      	str	r2, [r3, #4]
		BLDC1Handle.Init.GPIO_Pin_UT = GPIO_PIN_0;
 80040e6:	4b79      	ldr	r3, [pc, #484]	; (80042cc <BLDC_MspInit+0x20c>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	61da      	str	r2, [r3, #28]
		BLDC1Handle.Init.GPIO_Pin_VT = GPIO_PIN_1;
 80040ec:	4b77      	ldr	r3, [pc, #476]	; (80042cc <BLDC_MspInit+0x20c>)
 80040ee:	2202      	movs	r2, #2
 80040f0:	621a      	str	r2, [r3, #32]
		BLDC1Handle.Init.GPIO_Pin_WT = GPIO_PIN_2;
 80040f2:	4b76      	ldr	r3, [pc, #472]	; (80042cc <BLDC_MspInit+0x20c>)
 80040f4:	2204      	movs	r2, #4
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
		BLDC1Handle.Init.GPIO_Pins_Top = BLDC1Handle.Init.GPIO_Pin_UT | BLDC1Handle.Init.GPIO_Pin_VT | BLDC1Handle.Init.GPIO_Pin_WT;
 80040f8:	4b74      	ldr	r3, [pc, #464]	; (80042cc <BLDC_MspInit+0x20c>)
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <BLDC_MspInit+0x20c>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	431a      	orrs	r2, r3
 8004102:	4b72      	ldr	r3, [pc, #456]	; (80042cc <BLDC_MspInit+0x20c>)
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	4313      	orrs	r3, r2
 8004108:	4a70      	ldr	r2, [pc, #448]	; (80042cc <BLDC_MspInit+0x20c>)
 800410a:	6113      	str	r3, [r2, #16]

		BLDC1Handle.Init.GPIOx_Bottom = GPIOB;
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <BLDC_MspInit+0x20c>)
 800410e:	4a70      	ldr	r2, [pc, #448]	; (80042d0 <BLDC_MspInit+0x210>)
 8004110:	609a      	str	r2, [r3, #8]
		BLDC1Handle.Init.GPIO_Pin_UB = GPIO_PIN_6;
 8004112:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <BLDC_MspInit+0x20c>)
 8004114:	2240      	movs	r2, #64	; 0x40
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
		BLDC1Handle.Init.GPIO_Pin_VB = GPIO_PIN_7;
 8004118:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <BLDC_MspInit+0x20c>)
 800411a:	2280      	movs	r2, #128	; 0x80
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
		BLDC1Handle.Init.GPIO_Pin_WB = GPIO_PIN_8;
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <BLDC_MspInit+0x20c>)
 8004120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
		BLDC1Handle.Init.GPIO_Pins_Bottom = BLDC1Handle.Init.GPIO_Pin_UB | BLDC1Handle.Init.GPIO_Pin_VB | BLDC1Handle.Init.GPIO_Pin_WB;
 8004126:	4b69      	ldr	r3, [pc, #420]	; (80042cc <BLDC_MspInit+0x20c>)
 8004128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412a:	4b68      	ldr	r3, [pc, #416]	; (80042cc <BLDC_MspInit+0x20c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	431a      	orrs	r2, r3
 8004130:	4b66      	ldr	r3, [pc, #408]	; (80042cc <BLDC_MspInit+0x20c>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4313      	orrs	r3, r2
 8004136:	4a65      	ldr	r2, [pc, #404]	; (80042cc <BLDC_MspInit+0x20c>)
 8004138:	6153      	str	r3, [r2, #20]

		BLDC1Handle.Init.GPIOx_Hall = GPIOA;
 800413a:	4b64      	ldr	r3, [pc, #400]	; (80042cc <BLDC_MspInit+0x20c>)
 800413c:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <BLDC_MspInit+0x214>)
 800413e:	60da      	str	r2, [r3, #12]
		BLDC1Handle.Init.GPIO_Pin_HA = GPIO_PIN_5;
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <BLDC_MspInit+0x20c>)
 8004142:	2220      	movs	r2, #32
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
		BLDC1Handle.Init.GPIO_Pin_HB = GPIO_PIN_6;
 8004146:	4b61      	ldr	r3, [pc, #388]	; (80042cc <BLDC_MspInit+0x20c>)
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
		BLDC1Handle.Init.GPIO_Pin_HC = GPIO_PIN_7;
 800414c:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <BLDC_MspInit+0x20c>)
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c
		BLDC1Handle.Init.GPIO_Pins_Hall = BLDC1Handle.Init.GPIO_Pin_HA | BLDC1Handle.Init.GPIO_Pin_HB | BLDC1Handle.Init.GPIO_Pin_HC;
 8004152:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <BLDC_MspInit+0x20c>)
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <BLDC_MspInit+0x20c>)
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	431a      	orrs	r2, r3
 800415c:	4b5b      	ldr	r3, [pc, #364]	; (80042cc <BLDC_MspInit+0x20c>)
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	4313      	orrs	r3, r2
 8004162:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <BLDC_MspInit+0x20c>)
 8004164:	6193      	str	r3, [r2, #24]


		// 1. Initialize GPIO for UT, VT, WT to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Top;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 800416c:	2301      	movs	r3, #1
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004174:	2301      	movs	r3, #1
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Top, &GPIOInit);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd fb1c 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004188:	200a      	movs	r0, #10
 800418a:	f7ff fd1f 	bl	8003bcc <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Top, pBLDCHandle->Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6858      	ldr	r0, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	b29b      	uxth	r3, r3
 8004198:	2200      	movs	r2, #0
 800419a:	4619      	mov	r1, r3
 800419c:	f7fd fd66 	bl	8001c6c <GPIO_WritePin>


		// 2. Initialize GPIO for UB, VB, WB to GPIO Output mode
		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Bottom;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80041a6:	2301      	movs	r3, #1
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
		GPIOInit.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80041ae:	2301      	movs	r3, #1
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_Init(pBLDCHandle->Init.GPIOx_Bottom, &GPIOInit);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd faff 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 80041c2:	200a      	movs	r0, #10
 80041c4:	f7ff fd02 	bl	8003bcc <Delay_ms>

		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6898      	ldr	r0, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2200      	movs	r2, #0
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7fd fd49 	bl	8001c6c <GPIO_WritePin>


		// 3. Charge Bootstrap Capacitor for 10ms
		Delay_ms(10);
 80041da:	200a      	movs	r0, #10
 80041dc:	f7ff fcf6 	bl	8003bcc <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_SET);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6898      	ldr	r0, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2201      	movs	r2, #1
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fd fd3d 	bl	8001c6c <GPIO_WritePin>
		Delay_ms(10);
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7ff fcea 	bl	8003bcc <Delay_ms>
		GPIO_WritePin(pBLDCHandle->Init.GPIOx_Bottom, pBLDCHandle->Init.GPIO_Pins_Bottom, GPIO_PIN_RESET);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6898      	ldr	r0, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	b29b      	uxth	r3, r3
 8004202:	2200      	movs	r2, #0
 8004204:	4619      	mov	r1, r3
 8004206:	f7fd fd31 	bl	8001c6c <GPIO_WritePin>

		/********************************************************************
		 *			Low level init EXTI for Hall Sensor interrupt			*
		 ********************************************************************/
		// 1. Configure GPIO of EXTI
		memset(&GPIOInit, 0, sizeof(GPIOInit));
 800420a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800420e:	2210      	movs	r2, #16
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f005 fd86 	bl	8009d24 <memset>

		GPIOInit.Pin = pBLDCHandle->Init.GPIO_Pins_Hall;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIOInit.Mode = GPIO_MODE_IT_RISING_FALLING;
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <BLDC_MspInit+0x218>)
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIOInit.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_Init(pBLDCHandle->Init.GPIOx_Hall, &GPIOInit);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fac5 	bl	80017c0 <GPIO_Init>


		/********************************************************************
		 *				Low level init TIM to generate PWM signals			*
		 ********************************************************************/
		pBLDCHandle->Init.TIM_Handle = &TIM4Handle;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <BLDC_MspInit+0x21c>)
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
		pBLDCHandle->Init.TIM_Handle->Instance = TIM4;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <BLDC_MspInit+0x220>)
 8004242:	601a      	str	r2, [r3, #0]
		pBLDCHandle->Init.TIM_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	2200      	movs	r2, #0
 800424a:	609a      	str	r2, [r3, #8]
		pBLDCHandle->Init.TIM_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
		pBLDCHandle->Init.TIM_Handle->Init.Prescaler = (1-1);	// 72MHz / 1 = 72MHz
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
		pBLDCHandle->Init.TIM_Handle->Init.Period = (3600-1);	// 72MHz / 3600 = 20kHz
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004264:	60da      	str	r2, [r3, #12]
		TIM_PWM_Init(pBLDCHandle->Init.TIM_Handle);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd ffad 	bl	80021ca <TIM_PWM_Init>

		TIM_OC_InitTypeDef TIM4_PWMConfig;

		memset(&TIM4_PWMConfig, 0, sizeof(TIM4_PWMConfig));
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	221c      	movs	r2, #28
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f005 fd53 	bl	8009d24 <memset>

		TIM4_PWMConfig.OCMode = TIM_OCMODE_PWM1;
 800427e:	2360      	movs	r3, #96	; 0x60
 8004280:	60fb      	str	r3, [r7, #12]
		TIM4_PWMConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f107 010c 	add.w	r1, r7, #12
 8004292:	2200      	movs	r2, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd ffe5 	bl	8002264 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_2);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f107 010c 	add.w	r1, r7, #12
 80042a6:	2204      	movs	r2, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd ffdb 	bl	8002264 <TIM_PWM_ConfigChannel>

		TIM4_PWMConfig.Pulse = 0;	// Initially, 0% duty
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
		TIM_PWM_ConfigChannel(pBLDCHandle->Init.TIM_Handle, &TIM4_PWMConfig, TIM_CHANNEL_3);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f107 010c 	add.w	r1, r7, #12
 80042ba:	2208      	movs	r2, #8
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd ffd1 	bl	8002264 <TIM_PWM_ConfigChannel>
	}
}
 80042c2:	bf00      	nop
 80042c4:	3738      	adds	r7, #56	; 0x38
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200002a8 	.word	0x200002a8
 80042d0:	40010c00 	.word	0x40010c00
 80042d4:	40010800 	.word	0x40010800
 80042d8:	10310000 	.word	0x10310000
 80042dc:	2000041c 	.word	0x2000041c
 80042e0:	40000800 	.word	0x40000800

080042e4 <TFT_MspInit>:


void TFT_MspInit(TFT_HandleTypeDef *pTFTHandle)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	2210      	movs	r2, #16
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f005 fd15 	bl	8009d24 <memset>

	if(pTFTHandle->Instance == TFT1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d16c      	bne.n	80043dc <TFT_MspInit+0xf8>
		/************************************************************************
		 *		  Low level init GPIO of TFT Control pins and Data pins			*
		 ***********************************************************************/

		// 1. Initialize GPIO for Control Pins (nRST, nCS, RS, nWR) to GPIO Output Push-Pull mode
		pTFTHandle->Init.GPIOx_TFT_Control = GPIOA;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a37      	ldr	r2, [pc, #220]	; (80043e4 <TFT_MspInit+0x100>)
 8004306:	605a      	str	r2, [r3, #4]
		pTFTHandle->Init.GPIO_Pin_TFT_nRST = GPIO_PIN_8;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430e:	615a      	str	r2, [r3, #20]
		pTFTHandle->Init.GPIO_Pin_TFT_nCS = GPIO_PIN_9;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004316:	619a      	str	r2, [r3, #24]
		pTFTHandle->Init.GPIO_Pin_TFT_RS = GPIO_PIN_10;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800431e:	61da      	str	r2, [r3, #28]
		pTFTHandle->Init.GPIO_Pin_TFT_nWR = GPIO_PIN_11;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004326:	621a      	str	r2, [r3, #32]
		pTFTHandle->Init.GPIO_Pins_TFT_Control = pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS | pTFTHandle->Init.GPIO_Pin_TFT_nWR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Control;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004348:	2301      	movs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004350:	2303      	movs	r3, #3
 8004352:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Control, &GPIOInit);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f107 0208 	add.w	r2, r7, #8
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fa2e 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 8004364:	200a      	movs	r0, #10
 8004366:	f7ff fc31 	bl	8003bcc <Delay_ms>

		GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST | pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_nWR, pTFTHandle->Init.GPIO_Pin_TFT_RS);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6858      	ldr	r0, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	b29b      	uxth	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	b29b      	uxth	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b299      	uxth	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	f7fd fc8a 	bl	8001ca8 <GPIO_ModifyPin>

		// 2. Initialize GPIO for Data Pins (D0 ~ D15) to GPIO Output mode
		pTFTHandle->Init.GPIOx_TFT_Data = GPIOC;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <TFT_MspInit+0x104>)
 8004398:	609a      	str	r2, [r3, #8]
		pTFTHandle->Init.GPIO_Pins_TFT_Data = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a0:	611a      	str	r2, [r3, #16]

		GPIOInit.Pin = pTFTHandle->Init.GPIO_Pins_TFT_Data;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 80043a8:	2301      	movs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTFTHandle->Init.GPIOx_TFT_Data, &GPIOInit);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f107 0208 	add.w	r2, r7, #8
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd f9fe 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 80043c4:	200a      	movs	r0, #10
 80043c6:	f7ff fc01 	bl	8003bcc <Delay_ms>

		GPIO_WritePort(pTFTHandle->Init.GPIOx_TFT_Data, pTFTHandle->Init.GPIO_Pins_TFT_Data, GPIO_PIN_RESET);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6898      	ldr	r0, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2200      	movs	r2, #0
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fd fc80 	bl	8001cdc <GPIO_WritePort>
	}
}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40010800 	.word	0x40010800
 80043e8:	40011000 	.word	0x40011000

080043ec <TS_MspInit>:


void TS_MspInit(TS_HandleTypeDef *pTSHandle)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	2210      	movs	r2, #16
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 fc91 	bl	8009d24 <memset>

	if(pTSHandle->Instance == TS1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d178      	bne.n	80044fc <TS_MspInit+0x110>
	{
		/************************************************************************
		 *					Low level init GPIO of TS_nCS, TS_nINT				*
		 ***********************************************************************/
		pTSHandle->Init.GPIOx_TS_Control = GPIOB;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <TS_MspInit+0x118>)
 800440e:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.GPIO_Pin_TS_nCS = GPIO_PIN_3;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2208      	movs	r2, #8
 8004414:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.GPIO_Pin_TS_nINT = GPIO_PIN_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2210      	movs	r2, #16
 800441a:	60da      	str	r2, [r3, #12]

		// Initialize GPIO for TS_nCS to GPIO Output mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nCS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_OUTPUT_PP;
 8004422:	2301      	movs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
		GPIOInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	617b      	str	r3, [r7, #20]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd f9c3 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 800443a:	200a      	movs	r0, #10
 800443c:	f7ff fbc6 	bl	8003bcc <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nCS, GPIO_PIN_SET); // Initially, TS_nCS = SET
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6858      	ldr	r0, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	b29b      	uxth	r3, r3
 800444a:	2201      	movs	r2, #1
 800444c:	4619      	mov	r1, r3
 800444e:	f7fd fc0d 	bl	8001c6c <GPIO_WritePin>

		memset(&GPIOInit, 0, sizeof(GPIOInit));
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	2210      	movs	r2, #16
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f005 fc62 	bl	8009d24 <memset>

		// Initialize GPIO for TS_nINT to GPIO Input floating mode
		GPIOInit.Pin = pTSHandle->Init.GPIO_Pin_TS_nINT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
		GPIOInit.Mode = GPIO_MODE_INPUT;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
		GPIOInit.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
		GPIO_Init(pTSHandle->Init.GPIOx_TS_Control, &GPIOInit);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f107 0208 	add.w	r2, r7, #8
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd f9a1 	bl	80017c0 <GPIO_Init>
		Delay_ms(10);
 800447e:	200a      	movs	r0, #10
 8004480:	f7ff fba4 	bl	8003bcc <Delay_ms>

		GPIO_WritePin(pTSHandle->Init.GPIOx_TS_Control, pTSHandle->Init.GPIO_Pin_TS_nINT, GPIO_PIN_RESET);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6858      	ldr	r0, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	b29b      	uxth	r3, r3
 800448e:	2200      	movs	r2, #0
 8004490:	4619      	mov	r1, r3
 8004492:	f7fd fbeb 	bl	8001c6c <GPIO_WritePin>


		/********************************************************************
		 *			Low level init SPI to get Touch Screen coordinates		*
		 ********************************************************************/
		pTSHandle->Init.SPI_Handle = &SPI2Handle;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <TS_MspInit+0x11c>)
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
		pTSHandle->Init.SPI_Handle->Instance = SPI2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <TS_MspInit+0x120>)
 80044a2:	601a      	str	r2, [r3, #0]
		pTSHandle->Init.SPI_Handle->Init.Mode = SPI_MODE_MASTER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044ac:	605a      	str	r2, [r3, #4]
		pTSHandle->Init.SPI_Handle->Init.Direction = SPI_DIRECTION_2LINES;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
		pTSHandle->Init.SPI_Handle->Init.DataSize = SPI_DATASIZE_16BIT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044be:	60da      	str	r2, [r3, #12]
		pTSHandle->Init.SPI_Handle->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
		pTSHandle->Init.SPI_Handle->Init.CLKPhase = SPI_PHASE_1EDGE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2200      	movs	r2, #0
 80044ce:	615a      	str	r2, [r3, #20]
		pTSHandle->Init.SPI_Handle->Init.NSS = SPI_NSS_SOFT;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d8:	619a      	str	r2, [r3, #24]
		pTSHandle->Init.SPI_Handle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2218      	movs	r2, #24
 80044e0:	61da      	str	r2, [r3, #28]
		pTSHandle->Init.SPI_Handle->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2200      	movs	r2, #0
 80044e8:	621a      	str	r2, [r3, #32]
		pTSHandle->Init.SPI_Handle->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2200      	movs	r2, #0
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28

		SPI_Init(pTSHandle->Init.SPI_Handle);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd fda8 	bl	800204c <SPI_Init>
	}
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010c00 	.word	0x40010c00
 8004508:	20000480 	.word	0x20000480
 800450c:	40003800 	.word	0x40003800

08004510 <SPI_MspInit>:


void SPI_MspInit(SPI_HandleTypeDef *pSPIHandle)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO for SPI
	GPIO_HandleTypeDef GPIOHandle;

	memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	2214      	movs	r2, #20
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f005 fbff 	bl	8009d24 <memset>

	if(pSPIHandle->Instance == SPI2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <SPI_MspInit+0x88>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d128      	bne.n	8004582 <SPI_MspInit+0x72>
	{
		// SPI2_SCK, SPI2_MOSI
		GPIOHandle.Instance = GPIOB;
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <SPI_MspInit+0x8c>)
 8004532:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 8004534:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004538:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Speed = GPIO_SPEED_FREQ_HIGH;
 800453e:	2303      	movs	r3, #3
 8004540:	61fb      	str	r3, [r7, #28]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7fd f937 	bl	80017c0 <GPIO_Init>

		memset(&GPIOHandle, 0, sizeof(GPIOHandle));
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	2214      	movs	r2, #20
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f005 fbe2 	bl	8009d24 <memset>

		// SPI2_MISO
		GPIOHandle.Instance = GPIOB;
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <SPI_MspInit+0x8c>)
 8004562:	60fb      	str	r3, [r7, #12]
		GPIOHandle.Init.Pin = GPIO_PIN_14;
 8004564:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004568:	613b      	str	r3, [r7, #16]
		GPIOHandle.Init.Mode = GPIO_MODE_INPUT;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
		GPIOHandle.Init.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]

		GPIO_Init(GPIOHandle.Instance, &GPIOHandle.Init);
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f7fd f91f 	bl	80017c0 <GPIO_Init>
	}

	// 2. Configure CLOCK for SPI
	SPI_PeripheralClockControl(pSPIHandle->Instance, ENABLE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fdab 	bl	80020e4 <SPI_PeripheralClockControl>
}
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40003800 	.word	0x40003800
 800459c:	40010c00 	.word	0x40010c00

080045a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <_sbrk+0x50>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <_sbrk+0x16>
		heap_end = &end;
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <_sbrk+0x50>)
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <_sbrk+0x54>)
 80045b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <_sbrk+0x50>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <_sbrk+0x50>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	466a      	mov	r2, sp
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d907      	bls.n	80045da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80045ca:	f005 fb81 	bl	8009cd0 <__errno>
 80045ce:	4602      	mov	r2, r0
 80045d0:	230c      	movs	r3, #12
 80045d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295
 80045d8:	e006      	b.n	80045e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_sbrk+0x50>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <_sbrk+0x50>)
 80045e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000208 	.word	0x20000208
 80045f4:	200004f8 	.word	0x200004f8

080045f8 <TFT_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TFT_Init(TFT_HandleTypeDef *pTFTHandle)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of TFT LCD : GPIO
	TFT_MspInit(pTFTHandle);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fe6f 	bl	80042e4 <TFT_MspInit>

	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_RESET);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6858      	ldr	r0, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	b29b      	uxth	r3, r3
 8004610:	2200      	movs	r2, #0
 8004612:	4619      	mov	r1, r3
 8004614:	f7fd fb2a 	bl	8001c6c <GPIO_WritePin>
	Delay_ms(1);
 8004618:	2001      	movs	r0, #1
 800461a:	f7ff fad7 	bl	8003bcc <Delay_ms>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nRST, GPIO_PIN_SET);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6858      	ldr	r0, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	b29b      	uxth	r3, r3
 8004628:	2201      	movs	r2, #1
 800462a:	4619      	mov	r1, r3
 800462c:	f7fd fb1e 	bl	8001c6c <GPIO_WritePin>
	Delay_ms(120);
 8004630:	2078      	movs	r0, #120	; 0x78
 8004632:	f7ff facb 	bl	8003bcc <Delay_ms>

	TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004636:	2200      	movs	r2, #0
 8004638:	2102      	movs	r1, #2
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9d0 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 8004640:	2200      	movs	r2, #0
 8004642:	2103      	movs	r1, #3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9cb 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 800464a:	2201      	movs	r2, #1
 800464c:	2104      	movs	r1, #4
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9c6 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8004654:	223f      	movs	r2, #63	; 0x3f
 8004656:	2105      	movs	r1, #5
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9c1 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 800465e:	2200      	movs	r2, #0
 8004660:	2106      	movs	r1, #6
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9bc 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 8004668:	2200      	movs	r2, #0
 800466a:	2107      	movs	r1, #7
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9b7 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8004672:	2200      	movs	r2, #0
 8004674:	2108      	movs	r1, #8
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9b2 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 800467c:	22ef      	movs	r2, #239	; 0xef
 800467e:	2109      	movs	r1, #9
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9ad 	bl	80049e0 <TFT_Write>

	TFT_Write(pTFTHandle, 0x01, 0x0006);
 8004686:	2206      	movs	r2, #6
 8004688:	2101      	movs	r1, #1
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9a8 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x16, 0x0068);
 8004690:	2268      	movs	r2, #104	; 0x68
 8004692:	2116      	movs	r1, #22
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f9a3 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x18, 0x0000);
 800469a:	2200      	movs	r2, #0
 800469c:	2118      	movs	r1, #24
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f99e 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x70, 0x0065);
 80046a4:	2265      	movs	r2, #101	; 0x65
 80046a6:	2170      	movs	r1, #112	; 0x70
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f999 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x23, 0x0095);
 80046ae:	2295      	movs	r2, #149	; 0x95
 80046b0:	2123      	movs	r1, #35	; 0x23
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f994 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x24, 0x0095);
 80046b8:	2295      	movs	r2, #149	; 0x95
 80046ba:	2124      	movs	r1, #36	; 0x24
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f98f 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x25, 0x00FF);
 80046c2:	22ff      	movs	r2, #255	; 0xff
 80046c4:	2125      	movs	r1, #37	; 0x25
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f98a 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x27, 0x0002);
 80046cc:	2202      	movs	r2, #2
 80046ce:	2127      	movs	r1, #39	; 0x27
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f985 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x28, 0x0002);
 80046d6:	2202      	movs	r2, #2
 80046d8:	2128      	movs	r1, #40	; 0x28
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f980 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x29, 0x0002);
 80046e0:	2202      	movs	r2, #2
 80046e2:	2129      	movs	r1, #41	; 0x29
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f97b 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2A, 0x0002);
 80046ea:	2202      	movs	r2, #2
 80046ec:	212a      	movs	r1, #42	; 0x2a
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f976 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2C, 0x0002);
 80046f4:	2202      	movs	r2, #2
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f971 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x2D, 0x0002);
 80046fe:	2202      	movs	r2, #2
 8004700:	212d      	movs	r1, #45	; 0x2d
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f96c 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3A, 0x0001);
 8004708:	2201      	movs	r2, #1
 800470a:	213a      	movs	r1, #58	; 0x3a
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f967 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3B, 0x0001);
 8004712:	2201      	movs	r2, #1
 8004714:	213b      	movs	r1, #59	; 0x3b
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f962 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3C, 0x00F0);
 800471c:	22f0      	movs	r2, #240	; 0xf0
 800471e:	213c      	movs	r1, #60	; 0x3c
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f95d 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3D, 0x0000);
 8004726:	2200      	movs	r2, #0
 8004728:	213d      	movs	r1, #61	; 0x3d
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f958 	bl	80049e0 <TFT_Write>
	Delay_ms(20);
 8004730:	2014      	movs	r0, #20
 8004732:	f7ff fa4b 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x35, 0x0038);
 8004736:	2238      	movs	r2, #56	; 0x38
 8004738:	2135      	movs	r1, #53	; 0x35
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f950 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x36, 0x0078);
 8004740:	2278      	movs	r2, #120	; 0x78
 8004742:	2136      	movs	r1, #54	; 0x36
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f94b 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x3E, 0x0038);
 800474a:	2238      	movs	r2, #56	; 0x38
 800474c:	213e      	movs	r1, #62	; 0x3e
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f946 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x40, 0x000F);
 8004754:	220f      	movs	r2, #15
 8004756:	2140      	movs	r1, #64	; 0x40
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f941 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x41, 0x00F0);
 800475e:	22f0      	movs	r2, #240	; 0xf0
 8004760:	2141      	movs	r1, #65	; 0x41
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f93c 	bl	80049e0 <TFT_Write>

	TFT_Write(pTFTHandle, 0x19, 0x0049);
 8004768:	2249      	movs	r2, #73	; 0x49
 800476a:	2119      	movs	r1, #25
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f937 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x93, 0x000F);
 8004772:	220f      	movs	r2, #15
 8004774:	2193      	movs	r1, #147	; 0x93
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f932 	bl	80049e0 <TFT_Write>
	Delay_ms(10);
 800477c:	200a      	movs	r0, #10
 800477e:	f7ff fa25 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x20, 0x0040);
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	2120      	movs	r1, #32
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f92a 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1D, 0x0007);
 800478c:	2207      	movs	r2, #7
 800478e:	211d      	movs	r1, #29
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f925 	bl	80049e0 <TFT_Write>
	Delay_ms(10);
 8004796:	200a      	movs	r0, #10
 8004798:	f7ff fa18 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x1E, 0x0000);
 800479c:	2200      	movs	r2, #0
 800479e:	211e      	movs	r1, #30
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f91d 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x1F, 0x0004);
 80047a6:	2204      	movs	r2, #4
 80047a8:	211f      	movs	r1, #31
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f918 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x44, 0x0040);
 80047b0:	2240      	movs	r2, #64	; 0x40
 80047b2:	2144      	movs	r1, #68	; 0x44
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f913 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x45, 0x0012);
 80047ba:	2212      	movs	r2, #18
 80047bc:	2145      	movs	r1, #69	; 0x45
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f90e 	bl	80049e0 <TFT_Write>
	Delay_ms(10);
 80047c4:	200a      	movs	r0, #10
 80047c6:	f7ff fa01 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x1C, 0x0004);
 80047ca:	2204      	movs	r2, #4
 80047cc:	211c      	movs	r1, #28
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f906 	bl	80049e0 <TFT_Write>
	Delay_ms(20);
 80047d4:	2014      	movs	r0, #20
 80047d6:	f7ff f9f9 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x43, 0x0080);
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	2143      	movs	r1, #67	; 0x43
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8fe 	bl	80049e0 <TFT_Write>
	Delay_ms(5);
 80047e4:	2005      	movs	r0, #5
 80047e6:	f7ff f9f1 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0018);
 80047ea:	2218      	movs	r2, #24
 80047ec:	211b      	movs	r1, #27
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8f6 	bl	80049e0 <TFT_Write>
	Delay_ms(40);
 80047f4:	2028      	movs	r0, #40	; 0x28
 80047f6:	f7ff f9e9 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x1B, 0x0010);
 80047fa:	2210      	movs	r2, #16
 80047fc:	211b      	movs	r1, #27
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8ee 	bl	80049e0 <TFT_Write>
	Delay_ms(40);
 8004804:	2028      	movs	r0, #40	; 0x28
 8004806:	f7ff f9e1 	bl	8003bcc <Delay_ms>

	TFT_Write(pTFTHandle, 0x46, 0x00A4);
 800480a:	22a4      	movs	r2, #164	; 0xa4
 800480c:	2146      	movs	r1, #70	; 0x46
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f8e6 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x47, 0x0053);
 8004814:	2253      	movs	r2, #83	; 0x53
 8004816:	2147      	movs	r1, #71	; 0x47
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8e1 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x48, 0x0010);
 800481e:	2210      	movs	r2, #16
 8004820:	2148      	movs	r1, #72	; 0x48
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8dc 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x49, 0x005F);
 8004828:	225f      	movs	r2, #95	; 0x5f
 800482a:	2149      	movs	r1, #73	; 0x49
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8d7 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4A, 0x0004);
 8004832:	2204      	movs	r2, #4
 8004834:	214a      	movs	r1, #74	; 0x4a
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8d2 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4B, 0x003F);
 800483c:	223f      	movs	r2, #63	; 0x3f
 800483e:	214b      	movs	r1, #75	; 0x4b
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8cd 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4C, 0x0002);
 8004846:	2202      	movs	r2, #2
 8004848:	214c      	movs	r1, #76	; 0x4c
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8c8 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4D, 0x00F6);
 8004850:	22f6      	movs	r2, #246	; 0xf6
 8004852:	214d      	movs	r1, #77	; 0x4d
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8c3 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4E, 0x0012);
 800485a:	2212      	movs	r2, #18
 800485c:	214e      	movs	r1, #78	; 0x4e
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8be 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x4F, 0x004C);
 8004864:	224c      	movs	r2, #76	; 0x4c
 8004866:	214f      	movs	r1, #79	; 0x4f
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8b9 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x50, 0x0046);
 800486e:	2246      	movs	r2, #70	; 0x46
 8004870:	2150      	movs	r1, #80	; 0x50
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8b4 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x51, 0x0044);
 8004878:	2244      	movs	r2, #68	; 0x44
 800487a:	2151      	movs	r1, #81	; 0x51
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8af 	bl	80049e0 <TFT_Write>

	TFT_Write(pTFTHandle, 0x90, 0x007F);
 8004882:	227f      	movs	r2, #127	; 0x7f
 8004884:	2190      	movs	r1, #144	; 0x90
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8aa 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x0004);
 800488c:	2204      	movs	r2, #4
 800488e:	2126      	movs	r1, #38	; 0x26
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8a5 	bl	80049e0 <TFT_Write>
	Delay_ms(40);
 8004896:	2028      	movs	r0, #40	; 0x28
 8004898:	f7ff f998 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x0024);
 800489c:	2224      	movs	r2, #36	; 0x24
 800489e:	2126      	movs	r1, #38	; 0x26
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f89d 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x26, 0x002C);
 80048a6:	222c      	movs	r2, #44	; 0x2c
 80048a8:	2126      	movs	r1, #38	; 0x26
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f898 	bl	80049e0 <TFT_Write>
	Delay_ms(40);
 80048b0:	2028      	movs	r0, #40	; 0x28
 80048b2:	f7ff f98b 	bl	8003bcc <Delay_ms>
	TFT_Write(pTFTHandle, 0x26, 0x003C);
 80048b6:	223c      	movs	r2, #60	; 0x3c
 80048b8:	2126      	movs	r1, #38	; 0x26
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f890 	bl	80049e0 <TFT_Write>

	TFT_Write(pTFTHandle, 0x57, 0x0002);
 80048c0:	2202      	movs	r2, #2
 80048c2:	2157      	movs	r1, #87	; 0x57
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f88b 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x55, 0x0000);
 80048ca:	2200      	movs	r2, #0
 80048cc:	2155      	movs	r1, #85	; 0x55
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f886 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0xFE, 0x005A);
 80048d4:	225a      	movs	r2, #90	; 0x5a
 80048d6:	21fe      	movs	r1, #254	; 0xfe
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f881 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x57, 0x0000);
 80048de:	2200      	movs	r2, #0
 80048e0:	2157      	movs	r1, #87	; 0x57
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f87c 	bl	80049e0 <TFT_Write>

	TFT_Clear_Screen(pTFTHandle);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f88f 	bl	8004a0c <TFT_Clear_Screen>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <TFT_Command>:
	 */
}


void TFT_Command(TFT_HandleTypeDef *pTFTHandle, uint16_t indexRegister)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	807b      	strh	r3, [r7, #2]
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS | pTFTHandle->Init.GPIO_Pin_TFT_RS, GPIO_PIN_RESET);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6858      	ldr	r0, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	b29b      	uxth	r3, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2200      	movs	r2, #0
 8004918:	4619      	mov	r1, r3
 800491a:	f7fd f9a7 	bl	8001c6c <GPIO_WritePin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, indexRegister);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd f9ec 	bl	8001d04 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6858      	ldr	r0, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	b29b      	uxth	r3, r3
 8004936:	2200      	movs	r2, #0
 8004938:	4619      	mov	r1, r3
 800493a:	f7fd f997 	bl	8001c6c <GPIO_WritePin>
	asm("NOP");
 800493e:	bf00      	nop
	asm("NOP");
 8004940:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6858      	ldr	r0, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	b29b      	uxth	r3, r3
 800494c:	2201      	movs	r2, #1
 800494e:	4619      	mov	r1, r3
 8004950:	f7fd f98c 	bl	8001c6c <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6858      	ldr	r0, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	b29b      	uxth	r3, r3
 800495e:	2201      	movs	r2, #1
 8004960:	4619      	mov	r1, r3
 8004962:	f7fd f983 	bl	8001c6c <GPIO_WritePin>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <TFT_Data>:


void TFT_Data(TFT_HandleTypeDef *pTFTHandle, uint16_t data)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	807b      	strh	r3, [r7, #2]
	GPIO_ModifyPin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_RS, pTFTHandle->Init.GPIO_Pin_TFT_nCS);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6858      	ldr	r0, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	b299      	uxth	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	b29b      	uxth	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	f7fd f98c 	bl	8001ca8 <GPIO_ModifyPin>
	GPIO_WriteData(pTFTHandle->Init.GPIOx_TFT_Data, data);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	887a      	ldrh	r2, [r7, #2]
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd f9b3 	bl	8001d04 <GPIO_WriteData>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_RESET);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6858      	ldr	r0, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	4619      	mov	r1, r3
 80049ac:	f7fd f95e 	bl	8001c6c <GPIO_WritePin>
	asm("NOP");
 80049b0:	bf00      	nop
	asm("NOP");
 80049b2:	bf00      	nop
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nWR, GPIO_PIN_SET);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6858      	ldr	r0, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2201      	movs	r2, #1
 80049c0:	4619      	mov	r1, r3
 80049c2:	f7fd f953 	bl	8001c6c <GPIO_WritePin>
	GPIO_WritePin(pTFTHandle->Init.GPIOx_TFT_Control, pTFTHandle->Init.GPIO_Pin_TFT_nCS, GPIO_PIN_SET);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6858      	ldr	r0, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2201      	movs	r2, #1
 80049d2:	4619      	mov	r1, r3
 80049d4:	f7fd f94a 	bl	8001c6c <GPIO_WritePin>
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <TFT_Write>:


void TFT_Write(TFT_HandleTypeDef *pTFTHandle, uint16_t reg, uint16_t val)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	803b      	strh	r3, [r7, #0]
	TFT_Command(pTFTHandle, reg);
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff7e 	bl	80048f6 <TFT_Command>
	TFT_Data(pTFTHandle, val);
 80049fa:	883b      	ldrh	r3, [r7, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ffb5 	bl	800496e <TFT_Data>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <TFT_Clear_Screen>:


void TFT_Clear_Screen(TFT_HandleTypeDef *pTFTHandle)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	TFT_Color_Screen(pTFTHandle, Black);
 8004a14:	2100      	movs	r1, #0
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f804 	bl	8004a24 <TFT_Color_Screen>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <TFT_Color_Screen>:


void TFT_Color_Screen(TFT_HandleTypeDef *pTFTHandle, uint16_t color)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
	uint16_t i, j;

	TFT_GRAM_Address(pTFTHandle, 0, 0);
 8004a30:	2200      	movs	r2, #0
 8004a32:	2100      	movs	r1, #0
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f81c 	bl	8004a72 <TFT_GRAM_Address>

	for(i = 0; i < 320; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	81fb      	strh	r3, [r7, #14]
 8004a3e:	e010      	b.n	8004a62 <TFT_Color_Screen+0x3e>
	{
		for(j = 0; j < 240; j++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	81bb      	strh	r3, [r7, #12]
 8004a44:	e007      	b.n	8004a56 <TFT_Color_Screen+0x32>
		{
			TFT_Data(pTFTHandle, color);
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ff8f 	bl	800496e <TFT_Data>
		for(j = 0; j < 240; j++)
 8004a50:	89bb      	ldrh	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	81bb      	strh	r3, [r7, #12]
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	2bef      	cmp	r3, #239	; 0xef
 8004a5a:	d9f4      	bls.n	8004a46 <TFT_Color_Screen+0x22>
	for(i = 0; i < 320; i++)
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	81fb      	strh	r3, [r7, #14]
 8004a62:	89fb      	ldrh	r3, [r7, #14]
 8004a64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a68:	d3ea      	bcc.n	8004a40 <TFT_Color_Screen+0x1c>
		}
	}
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <TFT_GRAM_Address>:


void TFT_GRAM_Address(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	807b      	strh	r3, [r7, #2]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	803b      	strh	r3, [r7, #0]
	if(pTFTHandle->ScreenMode == 'L')
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a88:	2b4c      	cmp	r3, #76	; 0x4c
 8004a8a:	d122      	bne.n	8004ad2 <TFT_GRAM_Address+0x60>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a92:	d245      	bcs.n	8004b20 <TFT_GRAM_Address+0xae>
 8004a94:	883b      	ldrh	r3, [r7, #0]
 8004a96:	2bef      	cmp	r3, #239	; 0xef
 8004a98:	d842      	bhi.n	8004b20 <TFT_GRAM_Address+0xae>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff9b 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004aaa:	887b      	ldrh	r3, [r7, #2]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff ff93 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2106      	movs	r1, #6
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff8e 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004ac4:	883b      	ldrh	r3, [r7, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2107      	movs	r1, #7
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff88 	bl	80049e0 <TFT_Write>
 8004ad0:	e021      	b.n	8004b16 <TFT_GRAM_Address+0xa4>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	2bef      	cmp	r3, #239	; 0xef
 8004ad6:	d825      	bhi.n	8004b24 <TFT_GRAM_Address+0xb2>
 8004ad8:	883b      	ldrh	r3, [r7, #0]
 8004ada:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ade:	d221      	bcs.n	8004b24 <TFT_GRAM_Address+0xb2>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ff7b 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	461a      	mov	r2, r3
 8004aee:	2103      	movs	r1, #3
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff75 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004af6:	883b      	ldrh	r3, [r7, #0]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	2106      	movs	r1, #6
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff6d 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004b06:	883b      	ldrh	r3, [r7, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2107      	movs	r1, #7
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff65 	bl	80049e0 <TFT_Write>
	}

	TFT_Command(pTFTHandle, 0x22);
 8004b16:	2122      	movs	r1, #34	; 0x22
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff feec 	bl	80048f6 <TFT_Command>
 8004b1e:	e002      	b.n	8004b26 <TFT_GRAM_Address+0xb4>
		if((xPos > 319) || (yPos > 239))	return;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <TFT_GRAM_Address+0xb4>
		if((xPos > 239) || (yPos > 319))	return;
 8004b24:	bf00      	nop
}
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <TFT_xy>:


void TFT_xy(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	70bb      	strb	r3, [r7, #2]
	pTFTHandle->Xcharacter = xChar;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pTFTHandle->Ycharacter = yChar;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	78ba      	ldrb	r2, [r7, #2]
 8004b48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <TFT_Color>:


void TFT_Color(TFT_HandleTypeDef *pTFTHandle, uint16_t colorfore, uint16_t colorback)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	807b      	strh	r3, [r7, #2]
 8004b62:	4613      	mov	r3, r2
 8004b64:	803b      	strh	r3, [r7, #0]
	pTFTHandle->foreground = colorfore;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	875a      	strh	r2, [r3, #58]	; 0x3a
	pTFTHandle->background = colorback;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	883a      	ldrh	r2, [r7, #0]
 8004b70:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <TFT_Pixel>:


void TFT_Pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t xPos, uint16_t yPos, uint16_t color)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	813b      	strh	r3, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
	if(pTFTHandle->ScreenMode == 'L')
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b9c:	2b4c      	cmp	r3, #76	; 0x4c
 8004b9e:	d122      	bne.n	8004be6 <TFT_Pixel+0x6a>
	{
		if((xPos > 319) || (yPos > 239))	return;
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ba6:	d24c      	bcs.n	8004c42 <TFT_Pixel+0xc6>
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	2bef      	cmp	r3, #239	; 0xef
 8004bac:	d849      	bhi.n	8004c42 <TFT_Pixel+0xc6>

		TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff11 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2103      	movs	r1, #3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff09 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, 0x0000);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2106      	movs	r1, #6
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff ff04 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos);
 8004bd8:	893b      	ldrh	r3, [r7, #8]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2107      	movs	r1, #7
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fefe 	bl	80049e0 <TFT_Write>
 8004be4:	e021      	b.n	8004c2a <TFT_Pixel+0xae>
	}
	else
	{
		if((xPos > 239) || (yPos > 319))	return;
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	2bef      	cmp	r3, #239	; 0xef
 8004bea:	d82c      	bhi.n	8004c46 <TFT_Pixel+0xca>
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004bf2:	d228      	bcs.n	8004c46 <TFT_Pixel+0xca>

		TFT_Write(pTFTHandle, 0x02, 0x0000);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fef1 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x03, xPos);
 8004bfe:	897b      	ldrh	r3, [r7, #10]
 8004c00:	461a      	mov	r2, r3
 8004c02:	2103      	movs	r1, #3
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff feeb 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	2106      	movs	r1, #6
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff fee3 	bl	80049e0 <TFT_Write>
		TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	2107      	movs	r1, #7
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fedb 	bl	80049e0 <TFT_Write>
	}

	if(color != Transparent)	TFT_Write(pTFTHandle, 0x22, color);
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	f640 0221 	movw	r2, #2081	; 0x821
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <TFT_Pixel+0xcc>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	461a      	mov	r2, r3
 8004c38:	2122      	movs	r1, #34	; 0x22
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff fed0 	bl	80049e0 <TFT_Write>
 8004c40:	e002      	b.n	8004c48 <TFT_Pixel+0xcc>
		if((xPos > 319) || (yPos > 239))	return;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <TFT_Pixel+0xcc>
		if((xPos > 239) || (yPos > 319))	return;
 8004c46:	bf00      	nop
}
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <TFT_Cursor>:
	pTFTHandle->ScreenMode = 'P';
}


void TFT_Cursor(TFT_HandleTypeDef *pTFTHandle, uint16_t cursor_color)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
	if(cursor_color == Transparent)
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	f640 0221 	movw	r2, #2081	; 0x821
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d104      	bne.n	8004c6e <TFT_Cursor+0x20>
	{
		pTFTHandle->cursor_flag = 0;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	{
		pTFTHandle->cursor_flag = 1;
		pTFTHandle->cursor = cursor_color;
	}

}
 8004c6c:	e006      	b.n	8004c7c <TFT_Cursor+0x2e>
		pTFTHandle->cursor_flag = 1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		pTFTHandle->cursor = cursor_color;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	887a      	ldrh	r2, [r7, #2]
 8004c7a:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <TFT_String>:
	}
}


void TFT_String(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar, uint16_t colorfore, uint16_t colorback, uint8_t *str)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	4608      	mov	r0, r1
 8004c90:	4611      	mov	r1, r2
 8004c92:	461a      	mov	r2, r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	70fb      	strb	r3, [r7, #3]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70bb      	strb	r3, [r7, #2]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	803b      	strh	r3, [r7, #0]
	uint8_t ch1;

	pTFTHandle->Xcharacter = xChar;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pTFTHandle->Ycharacter = yChar;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	78ba      	ldrb	r2, [r7, #2]
 8004cac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	pTFTHandle->foreground = colorfore;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	883a      	ldrh	r2, [r7, #0]
 8004cb4:	875a      	strh	r2, [r3, #58]	; 0x3a
	pTFTHandle->background = colorback;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8b3a      	ldrh	r2, [r7, #24]
 8004cba:	879a      	strh	r2, [r3, #60]	; 0x3c

	pTFTHandle->nextline_flag = 0;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	while(*str)
 8004cc4:	e00e      	b.n	8004ce4 <TFT_String+0x5e>
	{
		ch1 = *str;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	73fb      	strb	r3, [r7, #15]
		str++;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]

		if(ch1 < 0x80)
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	db04      	blt.n	8004ce4 <TFT_String+0x5e>
		{
			TFT_English(pTFTHandle, ch1);
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f840 	bl	8004d64 <TFT_English>
	while(*str)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1ec      	bne.n	8004cc6 <TFT_String+0x40>
		}
	}
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <TFT_String_Large>:


void TFT_String_Large(TFT_HandleTypeDef *pTFTHandle, uint8_t xChar, uint8_t yChar, uint16_t colorfore, uint16_t colorback, uint8_t *str)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	70fb      	strb	r3, [r7, #3]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70bb      	strb	r3, [r7, #2]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	803b      	strh	r3, [r7, #0]
	uint8_t ch1;

	pTFTHandle->Xcharacter = xChar;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pTFTHandle->Ycharacter = yChar;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	78ba      	ldrb	r2, [r7, #2]
 8004d1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	pTFTHandle->foreground = colorfore;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	883a      	ldrh	r2, [r7, #0]
 8004d22:	875a      	strh	r2, [r3, #58]	; 0x3a
	pTFTHandle->background = colorback;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8b3a      	ldrh	r2, [r7, #24]
 8004d28:	879a      	strh	r2, [r3, #60]	; 0x3c

	pTFTHandle->nextline_flag = 0;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	while(*str)
 8004d32:	e00e      	b.n	8004d52 <TFT_String_Large+0x5e>
	{
		ch1 = *str;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	73fb      	strb	r3, [r7, #15]
		str++;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]

		if(ch1 < 0x80)
 8004d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	db04      	blt.n	8004d52 <TFT_String_Large+0x5e>
		{
			TFT_English_Large(pTFTHandle, ch1);
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fb69 	bl	8005424 <TFT_English_Large>
	while(*str)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1ec      	bne.n	8004d34 <TFT_String_Large+0x40>
		}
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <TFT_English>:


void TFT_English(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b0c8      	sub	sp, #288	; 0x120
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	1d3b      	adds	r3, r7, #4
 8004d6c:	6018      	str	r0, [r3, #0]
 8004d6e:	460a      	mov	r2, r1
 8004d70:	1cfb      	adds	r3, r7, #3
 8004d72:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 8; x++)
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004d7a:	e044      	b.n	8004e06 <TFT_English+0xa2>
	{
		data = E_font[code][x];
 8004d7c:	1cfb      	adds	r3, r7, #3
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d84:	497f      	ldr	r1, [pc, #508]	; (8004f84 <TFT_English+0x220>)
 8004d86:	0112      	lsls	r2, r2, #4
 8004d88:	440a      	add	r2, r1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004d98:	e02c      	b.n	8004df4 <TFT_English+0x90>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8004d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00e      	beq.n	8004dc4 <TFT_English+0x60>
 8004da6:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004daa:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	0109      	lsls	r1, r1, #4
 8004dba:	440a      	add	r2, r1
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004dc2:	e00d      	b.n	8004de0 <TFT_English+0x7c>
			else				pixel[x][y] = pTFTHandle->background;
 8004dc4:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004dc8:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004dcc:	1d3b      	adds	r3, r7, #4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8004dd2:	f107 030c 	add.w	r3, r7, #12
 8004dd6:	0109      	lsls	r1, r1, #4
 8004dd8:	440a      	add	r2, r1
 8004dda:	4601      	mov	r1, r0
 8004ddc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004de0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004dea:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004dee:	3301      	adds	r3, #1
 8004df0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004df4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004df8:	2b07      	cmp	r3, #7
 8004dfa:	d9ce      	bls.n	8004d9a <TFT_English+0x36>
	for(x = 0; x < 8; x++)
 8004dfc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e00:	3301      	adds	r3, #1
 8004e02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004e06:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e0a:	2b07      	cmp	r3, #7
 8004e0c:	d9b6      	bls.n	8004d7c <TFT_English+0x18>
		}
	}

	for(x = 0; x < 8; x++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004e14:	e049      	b.n	8004eaa <TFT_English+0x146>
	{
		data = E_font[code][x+8];
 8004e16:	1cfb      	adds	r3, r7, #3
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e1e:	3308      	adds	r3, #8
 8004e20:	4958      	ldr	r1, [pc, #352]	; (8004f84 <TFT_English+0x220>)
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	440a      	add	r2, r1
 8004e26:	4413      	add	r3, r2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		for(y = 0; y < 8; y++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004e34:	e030      	b.n	8004e98 <TFT_English+0x134>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8004e36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <TFT_English+0x100>
 8004e42:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004e46:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e4a:	f103 0208 	add.w	r2, r3, #8
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	0109      	lsls	r1, r1, #4
 8004e5a:	440a      	add	r2, r1
 8004e5c:	4601      	mov	r1, r0
 8004e5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8004e62:	e00f      	b.n	8004e84 <TFT_English+0x120>
			else				pixel[x][y+8] = pTFTHandle->background;
 8004e64:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004e68:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e6c:	f103 0208 	add.w	r2, r3, #8
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	0109      	lsls	r1, r1, #4
 8004e7c:	440a      	add	r2, r1
 8004e7e:	4601      	mov	r1, r0
 8004e80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8004e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		for(y = 0; y < 8; y++)
 8004e8e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e92:	3301      	adds	r3, #1
 8004e94:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004e98:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004e9c:	2b07      	cmp	r3, #7
 8004e9e:	d9ca      	bls.n	8004e36 <TFT_English+0xd2>
	for(x = 0; x < 8; x++)
 8004ea0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004eaa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004eae:	2b07      	cmp	r3, #7
 8004eb0:	d9b1      	bls.n	8004e16 <TFT_English+0xb2>
		}
	}

	if(pTFTHandle->outline_flag == 1)
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	f040 80ed 	bne.w	800509a <TFT_English+0x336>
	{
		for(x = 0; x < 8; x++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004ec6:	e0e3      	b.n	8005090 <TFT_English+0x32c>
		{
			dot0 = E_font[code][x] + E_font[code][x+8]*256;
 8004ec8:	1cfb      	adds	r3, r7, #3
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ed0:	492c      	ldr	r1, [pc, #176]	; (8004f84 <TFT_English+0x220>)
 8004ed2:	0112      	lsls	r2, r2, #4
 8004ed4:	440a      	add	r2, r1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	1cfb      	adds	r3, r7, #3
 8004ede:	7819      	ldrb	r1, [r3, #0]
 8004ee0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	4827      	ldr	r0, [pc, #156]	; (8004f84 <TFT_English+0x220>)
 8004ee8:	0109      	lsls	r1, r1, #4
 8004eea:	4401      	add	r1, r0
 8004eec:	440b      	add	r3, r1
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
			dot1 = dot0 >> 1;
 8004efc:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			dot2 = dot0;
 8004f06:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004f0a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			dot3 = E_font[code][x+1] + E_font[code][x+9]*256;
 8004f0e:	1cfb      	adds	r3, r7, #3
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f16:	3301      	adds	r3, #1
 8004f18:	491a      	ldr	r1, [pc, #104]	; (8004f84 <TFT_English+0x220>)
 8004f1a:	0112      	lsls	r2, r2, #4
 8004f1c:	440a      	add	r2, r1
 8004f1e:	4413      	add	r3, r2
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	1cfb      	adds	r3, r7, #3
 8004f26:	7819      	ldrb	r1, [r3, #0]
 8004f28:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f2c:	3309      	adds	r3, #9
 8004f2e:	4815      	ldr	r0, [pc, #84]	; (8004f84 <TFT_English+0x220>)
 8004f30:	0109      	lsls	r1, r1, #4
 8004f32:	4401      	add	r1, r0
 8004f34:	440b      	add	r3, r1
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
			dot4 = E_font[code][x-1] + E_font[code][x+7]*256;
 8004f44:	1cfb      	adds	r3, r7, #3
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	490d      	ldr	r1, [pc, #52]	; (8004f84 <TFT_English+0x220>)
 8004f50:	0112      	lsls	r2, r2, #4
 8004f52:	440a      	add	r2, r1
 8004f54:	4413      	add	r3, r2
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	1cfb      	adds	r3, r7, #3
 8004f5c:	7819      	ldrb	r1, [r3, #0]
 8004f5e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f62:	3307      	adds	r3, #7
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <TFT_English+0x220>)
 8004f66:	0109      	lsls	r1, r1, #4
 8004f68:	4401      	add	r1, r0
 8004f6a:	440b      	add	r3, r1
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for(y = 0; y < 15; y++)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8004f80:	e07d      	b.n	800507e <TFT_English+0x31a>
 8004f82:	bf00      	nop
 8004f84:	0800bed4 	.word	0x0800bed4
			{
				if(!(dot0 & 0x0001))
 8004f88:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <TFT_English+0x2e0>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004f94:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <TFT_English+0x258>
 8004fa0:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004fa4:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004fae:	f107 030c 	add.w	r3, r7, #12
 8004fb2:	0109      	lsls	r1, r1, #4
 8004fb4:	440a      	add	r2, r1
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 8004fbc:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <TFT_English+0x280>
 8004fc8:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004fcc:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8004fd6:	f107 030c 	add.w	r3, r7, #12
 8004fda:	0109      	lsls	r1, r1, #4
 8004fdc:	440a      	add	r2, r1
 8004fde:	4601      	mov	r1, r0
 8004fe0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot3 & 0x0001) && (x < 7))		pixel[x][y] = pTFTHandle->outline;
 8004fe4:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <TFT_English+0x2b0>
 8004ff0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d80d      	bhi.n	8005014 <TFT_English+0x2b0>
 8004ff8:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 8004ffc:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8005006:	f107 030c 	add.w	r3, r7, #12
 800500a:	0109      	lsls	r1, r1, #4
 800500c:	440a      	add	r2, r1
 800500e:	4601      	mov	r1, r0
 8005010:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 8005014:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <TFT_English+0x2e0>
 8005020:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <TFT_English+0x2e0>
 8005028:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 800502c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8005036:	f107 030c 	add.w	r3, r7, #12
 800503a:	0109      	lsls	r1, r1, #4
 800503c:	440a      	add	r2, r1
 800503e:	4601      	mov	r1, r0
 8005040:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				}

				dot1 >>= 1;
 8005044:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
				dot2 = dot0;
 800504e:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8005052:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
				dot0 >>= 1;
 8005056:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
				dot3 >>= 1;
 8005060:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				dot4 >>= 1;
 800506a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			for(y = 0; y < 15; y++)
 8005074:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005078:	3301      	adds	r3, #1
 800507a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800507e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005082:	2b0e      	cmp	r3, #14
 8005084:	d980      	bls.n	8004f88 <TFT_English+0x224>
		for(x = 0; x < 8; x++)
 8005086:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800508a:	3301      	adds	r3, #1
 800508c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005090:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005094:	2b07      	cmp	r3, #7
 8005096:	f67f af17 	bls.w	8004ec8 <TFT_English+0x164>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit)
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80050a2:	1d3b      	adds	r3, r7, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d324      	bcc.n	80050f8 <TFT_English+0x394>
	{
		pTFTHandle->nextline_flag = 1;
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		pTFTHandle->Xcharacter = 0;
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		pTFTHandle->Ycharacter += 2;
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80050ca:	3302      	adds	r3, #2
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit - 1))		pTFTHandle->Ycharacter = 0;
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80050de:	461a      	mov	r2, r3
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80050e8:	3b01      	subs	r3, #1
 80050ea:	429a      	cmp	r2, r3
 80050ec:	db04      	blt.n	80050f8 <TFT_English+0x394>
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	if(pTFTHandle->underscore_flag == 1)
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005100:	2b01      	cmp	r3, #1
 8005102:	d118      	bne.n	8005136 <TFT_English+0x3d2>
	{
		for(x = 0; x < 8; x++)
 8005104:	2300      	movs	r3, #0
 8005106:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800510a:	e010      	b.n	800512e <TFT_English+0x3ca>
		{
			pixel[x][15] = pTFTHandle->underscore;
 800510c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005110:	1d3a      	adds	r2, r7, #4
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 8005116:	f107 020c 	add.w	r2, r7, #12
 800511a:	015b      	lsls	r3, r3, #5
 800511c:	4413      	add	r3, r2
 800511e:	331e      	adds	r3, #30
 8005120:	460a      	mov	r2, r1
 8005122:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 8005124:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005128:	3301      	adds	r3, #1
 800512a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800512e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005132:	2b07      	cmp	r3, #7
 8005134:	d9ea      	bls.n	800510c <TFT_English+0x3a8>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800513e:	2b01      	cmp	r3, #1
 8005140:	d138      	bne.n	80051b4 <TFT_English+0x450>
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005152:	429a      	cmp	r2, r3
 8005154:	d12e      	bne.n	80051b4 <TFT_English+0x450>
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005166:	429a      	cmp	r2, r3
 8005168:	d124      	bne.n	80051b4 <TFT_English+0x450>
	{
		for(x = 0; x < 8; x++)
 800516a:	2300      	movs	r3, #0
 800516c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005170:	e01c      	b.n	80051ac <TFT_English+0x448>
		{
			pixel[x][14] = pTFTHandle->cursor;
 8005172:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005176:	1d3a      	adds	r2, r7, #4
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 800517c:	f107 020c 	add.w	r2, r7, #12
 8005180:	015b      	lsls	r3, r3, #5
 8005182:	4413      	add	r3, r2
 8005184:	331c      	adds	r3, #28
 8005186:	460a      	mov	r2, r1
 8005188:	801a      	strh	r2, [r3, #0]
			pixel[x][15] = pTFTHandle->cursor;
 800518a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 8005194:	f107 020c 	add.w	r2, r7, #12
 8005198:	015b      	lsls	r3, r3, #5
 800519a:	4413      	add	r3, r2
 800519c:	331e      	adds	r3, #30
 800519e:	460a      	mov	r2, r1
 80051a0:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 8; x++)
 80051a2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051a6:	3301      	adds	r3, #1
 80051a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80051ac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	d9de      	bls.n	8005172 <TFT_English+0x40e>
		}
	}

	if((pTFTHandle->nextline_flag == 1) && (pTFTHandle->Xcharacter == 0) && (code == ' '))
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d10a      	bne.n	80051d6 <TFT_English+0x472>
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <TFT_English+0x472>
 80051cc:	1cfb      	adds	r3, r7, #3
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	f000 8122 	beq.w	800541a <TFT_English+0x6b6>
	{
		return;
	}
	else if(pTFTHandle->background != Transparent)
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80051dc:	f640 0221 	movw	r2, #2081	; 0x821
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f000 80cd 	beq.w	8005380 <TFT_English+0x61c>
	{
		xPos = pTFTHandle->Xcharacter * 8;
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

		for(y = 0; y < 16; y++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80051fc:	e0ba      	b.n	8005374 <TFT_English+0x610>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	b29a      	uxth	r2, r3
 800520c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005210:	b29b      	uxth	r3, r3
 8005212:	4413      	add	r3, r2
 8005214:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			if(pTFTHandle->ScreenMode == 'L')
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005220:	2b4c      	cmp	r3, #76	; 0x4c
 8005222:	d11f      	bne.n	8005264 <TFT_English+0x500>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8005224:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	b29a      	uxth	r2, r3
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	2102      	movs	r1, #2
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	f7ff fbd5 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8005236:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800523a:	b2db      	uxtb	r3, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	2103      	movs	r1, #3
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	f7ff fbcc 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	2200      	movs	r2, #0
 800524c:	2106      	movs	r1, #6
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f7ff fbc6 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 8005254:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	2107      	movs	r1, #7
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	f7ff fbbf 	bl	80049e0 <TFT_Write>
 8005262:	e01e      	b.n	80052a2 <TFT_English+0x53e>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	2200      	movs	r2, #0
 8005268:	2102      	movs	r1, #2
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	f7ff fbb8 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 8005270:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	2103      	movs	r1, #3
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	f7ff fbb1 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 800527e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b29a      	uxth	r2, r3
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	2106      	movs	r1, #6
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	f7ff fba8 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8005290:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8005294:	b2db      	uxtb	r3, r3
 8005296:	b29a      	uxth	r2, r3
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	2107      	movs	r1, #7
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f7ff fb9f 	bl	80049e0 <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	2122      	movs	r1, #34	; 0x22
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f7ff fb25 	bl	80048f6 <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 80052ac:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80052b0:	f107 030c 	add.w	r3, r7, #12
 80052b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	4611      	mov	r1, r2
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	f7ff fb56 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 80052c2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80052c6:	f107 030c 	add.w	r3, r7, #12
 80052ca:	3210      	adds	r2, #16
 80052cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	4611      	mov	r1, r2
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f7ff fb4a 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 80052da:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	3220      	adds	r2, #32
 80052e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	4611      	mov	r1, r2
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f7ff fb3e 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 80052f2:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80052f6:	f107 030c 	add.w	r3, r7, #12
 80052fa:	3230      	adds	r2, #48	; 0x30
 80052fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	4611      	mov	r1, r2
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f7ff fb32 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 800530a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800530e:	f107 030c 	add.w	r3, r7, #12
 8005312:	3240      	adds	r2, #64	; 0x40
 8005314:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	4611      	mov	r1, r2
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	f7ff fb26 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 8005322:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	3250      	adds	r2, #80	; 0x50
 800532c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	4611      	mov	r1, r2
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	f7ff fb1a 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 800533a:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	3260      	adds	r2, #96	; 0x60
 8005344:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	4611      	mov	r1, r2
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f7ff fb0e 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 8005352:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	3270      	adds	r2, #112	; 0x70
 800535c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	4611      	mov	r1, r2
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f7ff fb02 	bl	800496e <TFT_Data>
		for(y = 0; y < 16; y++)
 800536a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800536e:	3301      	adds	r3, #1
 8005370:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005374:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005378:	2b0f      	cmp	r3, #15
 800537a:	f67f af40 	bls.w	80051fe <TFT_English+0x49a>
 800537e:	e041      	b.n	8005404 <TFT_English+0x6a0>
		}
	}
	else
	{
		for(y = 0; y < 16; y++)
 8005380:	2300      	movs	r3, #0
 8005382:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8005386:	e039      	b.n	80053fc <TFT_English+0x698>
		{
			for(x = 0; x < 8; x++)
 8005388:	2300      	movs	r3, #0
 800538a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800538e:	e02c      	b.n	80053ea <TFT_English+0x686>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 8 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005398:	b29b      	uxth	r3, r3
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	b29a      	uxth	r2, r3
 800539e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4413      	add	r3, r2
 80053a6:	b29c      	uxth	r4, r3
 80053a8:	1d3b      	adds	r3, r7, #4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	4413      	add	r3, r2
 80053be:	b29d      	uxth	r5, r3
 80053c0:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80053c4:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	0109      	lsls	r1, r1, #4
 80053ce:	440a      	add	r2, r1
 80053d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80053d4:	1d38      	adds	r0, r7, #4
 80053d6:	462a      	mov	r2, r5
 80053d8:	4621      	mov	r1, r4
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	f7ff fbce 	bl	8004b7c <TFT_Pixel>
			for(x = 0; x < 8; x++)
 80053e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80053e4:	3301      	adds	r3, #1
 80053e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80053ea:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	d9ce      	bls.n	8005390 <TFT_English+0x62c>
		for(y = 0; y < 16; y++)
 80053f2:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80053f6:	3301      	adds	r3, #1
 80053f8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80053fc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005400:	2b0f      	cmp	r3, #15
 8005402:	d9c1      	bls.n	8005388 <TFT_English+0x624>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800540c:	3301      	adds	r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005418:	e000      	b.n	800541c <TFT_English+0x6b8>
		return;
 800541a:	bf00      	nop
}
 800541c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005420:	46bd      	mov	sp, r7
 8005422:	bdb0      	pop	{r4, r5, r7, pc}

08005424 <TFT_English_Large>:


void TFT_English_Large(TFT_HandleTypeDef *pTFTHandle, uint8_t code)
{
 8005424:	b5b0      	push	{r4, r5, r7, lr}
 8005426:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800542a:	af00      	add	r7, sp, #0
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	6018      	str	r0, [r3, #0]
 8005430:	460a      	mov	r2, r1
 8005432:	1cfb      	adds	r3, r7, #3
 8005434:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[12][24];
	uint16_t xPos, yPos, dot0, dot1, dot2, dot3, dot4;

	for(x = 0; x < 12; x++)
 8005436:	2300      	movs	r3, #0
 8005438:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 800543c:	e04d      	b.n	80054da <TFT_English_Large+0xb6>
	{
		data = E_font_large[code][x];
 800543e:	1cfb      	adds	r3, r7, #3
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	f897 125e 	ldrb.w	r1, [r7, #606]	; 0x25e
 8005446:	48c1      	ldr	r0, [pc, #772]	; (800574c <TFT_English_Large+0x328>)
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4403      	add	r3, r0
 8005452:	440b      	add	r3, r1
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f

		for(y = 0; y < 8; y++)
 800545a:	2300      	movs	r3, #0
 800545c:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005460:	e032      	b.n	80054c8 <TFT_English_Large+0xa4>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8005462:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <TFT_English_Large+0x6e>
 800546e:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005472:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 800547c:	f107 010c 	add.w	r1, r7, #12
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4403      	add	r3, r0
 800548a:	4622      	mov	r2, r4
 800548c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005490:	e010      	b.n	80054b4 <TFT_English_Large+0x90>
			else				pixel[x][y] = pTFTHandle->background;
 8005492:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005496:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 80054a0:	f107 010c 	add.w	r1, r7, #12
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4403      	add	r3, r0
 80054ae:	4622      	mov	r2, r4
 80054b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			data = data >> 1;
 80054b4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		for(y = 0; y < 8; y++)
 80054be:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 80054c2:	3301      	adds	r3, #1
 80054c4:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 80054c8:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d9c8      	bls.n	8005462 <TFT_English_Large+0x3e>
	for(x = 0; x < 12; x++)
 80054d0:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80054d4:	3301      	adds	r3, #1
 80054d6:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 80054da:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80054de:	2b0b      	cmp	r3, #11
 80054e0:	d9ad      	bls.n	800543e <TFT_English_Large+0x1a>
		}
	}

	for(x = 0; x < 12; x++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 80054e8:	e053      	b.n	8005592 <TFT_English_Large+0x16e>
	{
		data = E_font_large[code][x+12];
 80054ea:	1cfb      	adds	r3, r7, #3
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80054f2:	f103 010c 	add.w	r1, r3, #12
 80054f6:	4895      	ldr	r0, [pc, #596]	; (800574c <TFT_English_Large+0x328>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4403      	add	r3, r0
 8005502:	440b      	add	r3, r1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f

		for(y = 0; y < 8; y++)
 800550a:	2300      	movs	r3, #0
 800550c:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005510:	e036      	b.n	8005580 <TFT_English_Large+0x15c>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8005512:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d013      	beq.n	8005546 <TFT_English_Large+0x122>
 800551e:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005522:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005526:	f103 0008 	add.w	r0, r3, #8
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 8005530:	f107 010c 	add.w	r1, r7, #12
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4403      	add	r3, r0
 800553e:	4622      	mov	r2, r4
 8005540:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8005544:	e012      	b.n	800556c <TFT_English_Large+0x148>
			else				pixel[x][y+8] = pTFTHandle->background;
 8005546:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 800554a:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 800554e:	f103 0008 	add.w	r0, r3, #8
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8005558:	f107 010c 	add.w	r1, r7, #12
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4403      	add	r3, r0
 8005566:	4622      	mov	r2, r4
 8005568:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			data = data >> 1;
 800556c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		for(y = 0; y < 8; y++)
 8005576:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 800557a:	3301      	adds	r3, #1
 800557c:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005580:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005584:	2b07      	cmp	r3, #7
 8005586:	d9c4      	bls.n	8005512 <TFT_English_Large+0xee>
	for(x = 0; x < 12; x++)
 8005588:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800558c:	3301      	adds	r3, #1
 800558e:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005592:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005596:	2b0b      	cmp	r3, #11
 8005598:	d9a7      	bls.n	80054ea <TFT_English_Large+0xc6>
		}
	}


	for(x = 0; x < 12; x++)
 800559a:	2300      	movs	r3, #0
 800559c:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 80055a0:	e053      	b.n	800564a <TFT_English_Large+0x226>
	{
		data = E_font_large[code][x+24];
 80055a2:	1cfb      	adds	r3, r7, #3
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80055aa:	f103 0118 	add.w	r1, r3, #24
 80055ae:	4867      	ldr	r0, [pc, #412]	; (800574c <TFT_English_Large+0x328>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4403      	add	r3, r0
 80055ba:	440b      	add	r3, r1
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f

		for(y = 0; y < 8; y++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 80055c8:	e036      	b.n	8005638 <TFT_English_Large+0x214>
		{
			if(data & 0x01)		pixel[x][y+16] = pTFTHandle->foreground;
 80055ca:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d013      	beq.n	80055fe <TFT_English_Large+0x1da>
 80055d6:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 80055da:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 80055de:	f103 0010 	add.w	r0, r3, #16
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 80055e8:	f107 010c 	add.w	r1, r7, #12
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4403      	add	r3, r0
 80055f6:	4622      	mov	r2, r4
 80055f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80055fc:	e012      	b.n	8005624 <TFT_English_Large+0x200>
			else				pixel[x][y+16] = pTFTHandle->background;
 80055fe:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005602:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005606:	f103 0010 	add.w	r0, r3, #16
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8005610:	f107 010c 	add.w	r1, r7, #12
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4403      	add	r3, r0
 800561e:	4622      	mov	r2, r4
 8005620:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			data = data >> 1;
 8005624:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		for(y = 0; y < 8; y++)
 800562e:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005632:	3301      	adds	r3, #1
 8005634:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005638:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 800563c:	2b07      	cmp	r3, #7
 800563e:	d9c4      	bls.n	80055ca <TFT_English_Large+0x1a6>
	for(x = 0; x < 12; x++)
 8005640:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005644:	3301      	adds	r3, #1
 8005646:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 800564a:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800564e:	2b0b      	cmp	r3, #11
 8005650:	d9a7      	bls.n	80055a2 <TFT_English_Large+0x17e>
		}
	}


	if(pTFTHandle->outline_flag == 1)
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800565a:	2b01      	cmp	r3, #1
 800565c:	f040 8226 	bne.w	8005aac <TFT_English_Large+0x688>
	{
		for(x = 0; x < 12; x++)
 8005660:	2300      	movs	r3, #0
 8005662:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005666:	e104      	b.n	8005872 <TFT_English_Large+0x44e>
		{
			dot0 = E_font_large[code][x] + E_font_large[code][x+12]*256;
 8005668:	1cfb      	adds	r3, r7, #3
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	f897 125e 	ldrb.w	r1, [r7, #606]	; 0x25e
 8005670:	4836      	ldr	r0, [pc, #216]	; (800574c <TFT_English_Large+0x328>)
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	440b      	add	r3, r1
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b299      	uxth	r1, r3
 8005682:	1cfb      	adds	r3, r7, #3
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800568a:	f103 000c 	add.w	r0, r3, #12
 800568e:	4c2f      	ldr	r4, [pc, #188]	; (800574c <TFT_English_Large+0x328>)
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4423      	add	r3, r4
 800569a:	4403      	add	r3, r0
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	440b      	add	r3, r1
 80056a6:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
			dot1 = dot0 >> 1;
 80056aa:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	f8a7 3258 	strh.w	r3, [r7, #600]	; 0x258
			dot2 = dot0;
 80056b4:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 80056b8:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
			dot3 = E_font_large[code][x+1] + E_font_large[code][x+13]*256;
 80056bc:	1cfb      	adds	r3, r7, #3
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80056c4:	1c59      	adds	r1, r3, #1
 80056c6:	4821      	ldr	r0, [pc, #132]	; (800574c <TFT_English_Large+0x328>)
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4403      	add	r3, r0
 80056d2:	440b      	add	r3, r1
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b299      	uxth	r1, r3
 80056d8:	1cfb      	adds	r3, r7, #3
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80056e0:	f103 000d 	add.w	r0, r3, #13
 80056e4:	4c19      	ldr	r4, [pc, #100]	; (800574c <TFT_English_Large+0x328>)
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4423      	add	r3, r4
 80056f0:	4403      	add	r3, r0
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	440b      	add	r3, r1
 80056fc:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
			dot4 = E_font_large[code][x-1] + E_font_large[code][x+11]*256;
 8005700:	1cfb      	adds	r3, r7, #3
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005708:	1e59      	subs	r1, r3, #1
 800570a:	4810      	ldr	r0, [pc, #64]	; (800574c <TFT_English_Large+0x328>)
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4403      	add	r3, r0
 8005716:	440b      	add	r3, r1
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	b299      	uxth	r1, r3
 800571c:	1cfb      	adds	r3, r7, #3
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005724:	f103 000b 	add.w	r0, r3, #11
 8005728:	4c08      	ldr	r4, [pc, #32]	; (800574c <TFT_English_Large+0x328>)
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4423      	add	r3, r4
 8005734:	4403      	add	r3, r0
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	b29b      	uxth	r3, r3
 800573e:	440b      	add	r3, r1
 8005740:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252

			for(y = 0; y < 15; y++)
 8005744:	2300      	movs	r3, #0
 8005746:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 800574a:	e088      	b.n	800585e <TFT_English_Large+0x43a>
 800574c:	0800c6d4 	.word	0x0800c6d4
			{
				if(!(dot0 & 0x0001))
 8005750:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d163      	bne.n	8005824 <TFT_English_Large+0x400>
				{
					if(dot1 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 800575c:	f8b7 3258 	ldrh.w	r3, [r7, #600]	; 0x258
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <TFT_English_Large+0x366>
 8005768:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 800576c:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8005776:	f107 010c 	add.w	r1, r7, #12
 800577a:	4613      	mov	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4403      	add	r3, r0
 8005784:	4622      	mov	r2, r4
 8005786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y] = pTFTHandle->outline;
 800578a:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <TFT_English_Large+0x394>
 8005796:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 800579a:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80057a4:	f107 010c 	add.w	r1, r7, #12
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4403      	add	r3, r0
 80057b2:	4622      	mov	r2, r4
 80057b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if((dot3 & 0x0001) && (x < 11))		pixel[x][y] = pTFTHandle->outline;
 80057b8:	f8b7 3254 	ldrh.w	r3, [r7, #596]	; 0x254
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d014      	beq.n	80057ee <TFT_English_Large+0x3ca>
 80057c4:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80057c8:	2b0a      	cmp	r3, #10
 80057ca:	d810      	bhi.n	80057ee <TFT_English_Large+0x3ca>
 80057cc:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 80057d0:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80057da:	f107 010c 	add.w	r1, r7, #12
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4403      	add	r3, r0
 80057e8:	4622      	mov	r2, r4
 80057ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y] = pTFTHandle->outline;
 80057ee:	f8b7 3252 	ldrh.w	r3, [r7, #594]	; 0x252
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d014      	beq.n	8005824 <TFT_English_Large+0x400>
 80057fa:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d010      	beq.n	8005824 <TFT_English_Large+0x400>
 8005802:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005806:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8005810:	f107 010c 	add.w	r1, r7, #12
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4403      	add	r3, r0
 800581e:	4622      	mov	r2, r4
 8005820:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				dot1 >>= 1;
 8005824:	f8b7 3258 	ldrh.w	r3, [r7, #600]	; 0x258
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	f8a7 3258 	strh.w	r3, [r7, #600]	; 0x258
				dot2 = dot0;
 800582e:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 8005832:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
				dot0 >>= 1;
 8005836:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
				dot3 >>= 1;
 8005840:	f8b7 3254 	ldrh.w	r3, [r7, #596]	; 0x254
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
				dot4 >>= 1;
 800584a:	f8b7 3252 	ldrh.w	r3, [r7, #594]	; 0x252
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252
			for(y = 0; y < 15; y++)
 8005854:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005858:	3301      	adds	r3, #1
 800585a:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 800585e:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005862:	2b0e      	cmp	r3, #14
 8005864:	f67f af74 	bls.w	8005750 <TFT_English_Large+0x32c>
		for(x = 0; x < 12; x++)
 8005868:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800586c:	3301      	adds	r3, #1
 800586e:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005872:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005876:	2b0b      	cmp	r3, #11
 8005878:	f67f aef6 	bls.w	8005668 <TFT_English_Large+0x244>
			}
		}

		for(x = 0; x < 12; x++)
 800587c:	2300      	movs	r3, #0
 800587e:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005882:	e10e      	b.n	8005aa2 <TFT_English_Large+0x67e>
		{
			dot0 = E_font_large[code][x+12] + E_font_large[code][x+24]*256;
 8005884:	1cfb      	adds	r3, r7, #3
 8005886:	781a      	ldrb	r2, [r3, #0]
 8005888:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800588c:	f103 010c 	add.w	r1, r3, #12
 8005890:	48be      	ldr	r0, [pc, #760]	; (8005b8c <TFT_English_Large+0x768>)
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4403      	add	r3, r0
 800589c:	440b      	add	r3, r1
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b299      	uxth	r1, r3
 80058a2:	1cfb      	adds	r3, r7, #3
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80058aa:	f103 0018 	add.w	r0, r3, #24
 80058ae:	4cb7      	ldr	r4, [pc, #732]	; (8005b8c <TFT_English_Large+0x768>)
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4423      	add	r3, r4
 80058ba:	4403      	add	r3, r0
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	440b      	add	r3, r1
 80058c6:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
			dot1 = dot0 >> 1;
 80058ca:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	f8a7 3258 	strh.w	r3, [r7, #600]	; 0x258
			dot2 = dot0;
 80058d4:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 80058d8:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
			dot3 = E_font_large[code][x+13] + E_font_large[code][x+25]*256;
 80058dc:	1cfb      	adds	r3, r7, #3
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80058e4:	f103 010d 	add.w	r1, r3, #13
 80058e8:	48a8      	ldr	r0, [pc, #672]	; (8005b8c <TFT_English_Large+0x768>)
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4403      	add	r3, r0
 80058f4:	440b      	add	r3, r1
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b299      	uxth	r1, r3
 80058fa:	1cfb      	adds	r3, r7, #3
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005902:	f103 0019 	add.w	r0, r3, #25
 8005906:	4ca1      	ldr	r4, [pc, #644]	; (8005b8c <TFT_English_Large+0x768>)
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4423      	add	r3, r4
 8005912:	4403      	add	r3, r0
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	440b      	add	r3, r1
 800591e:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
			dot4 = E_font_large[code][x+11] + E_font_large[code][x+23]*256;
 8005922:	1cfb      	adds	r3, r7, #3
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 800592a:	f103 010b 	add.w	r1, r3, #11
 800592e:	4897      	ldr	r0, [pc, #604]	; (8005b8c <TFT_English_Large+0x768>)
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4403      	add	r3, r0
 800593a:	440b      	add	r3, r1
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b299      	uxth	r1, r3
 8005940:	1cfb      	adds	r3, r7, #3
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005948:	f103 0017 	add.w	r0, r3, #23
 800594c:	4c8f      	ldr	r4, [pc, #572]	; (8005b8c <TFT_English_Large+0x768>)
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4423      	add	r3, r4
 8005958:	4403      	add	r3, r0
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b29b      	uxth	r3, r3
 8005962:	440b      	add	r3, r1
 8005964:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252

			for(y = 0; y < 16; y++)
 8005968:	2300      	movs	r3, #0
 800596a:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 800596e:	e08e      	b.n	8005a8e <TFT_English_Large+0x66a>
			{
				if(!(dot0 & 0x0001))
 8005970:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d16b      	bne.n	8005a54 <TFT_English_Large+0x630>
				{
					if(dot1 & 0x0001)		pixel[x][y+8] = pTFTHandle->outline;
 800597c:	f8b7 3258 	ldrh.w	r3, [r7, #600]	; 0x258
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <TFT_English_Large+0x58a>
 8005988:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 800598c:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005990:	f103 0008 	add.w	r0, r3, #8
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 800599a:	f107 010c 	add.w	r1, r7, #12
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4403      	add	r3, r0
 80059a8:	4622      	mov	r2, r4
 80059aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if(dot2 & 0x0001)		pixel[x][y+8] = pTFTHandle->outline;
 80059ae:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <TFT_English_Large+0x5bc>
 80059ba:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 80059be:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 80059c2:	f103 0008 	add.w	r0, r3, #8
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80059cc:	f107 010c 	add.w	r1, r7, #12
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	4403      	add	r3, r0
 80059da:	4622      	mov	r2, r4
 80059dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if((dot3 & 0x0001) && (x < 11))		pixel[x][y+8] = pTFTHandle->outline;
 80059e0:	f8b7 3254 	ldrh.w	r3, [r7, #596]	; 0x254
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d016      	beq.n	8005a1a <TFT_English_Large+0x5f6>
 80059ec:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80059f0:	2b0a      	cmp	r3, #10
 80059f2:	d812      	bhi.n	8005a1a <TFT_English_Large+0x5f6>
 80059f4:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 80059f8:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 80059fc:	f103 0008 	add.w	r0, r3, #8
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8005a06:	f107 010c 	add.w	r1, r7, #12
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4403      	add	r3, r0
 8005a14:	4622      	mov	r2, r4
 8005a16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					if((dot4 & 0x0001) && (x > 0))		pixel[x][y+8] = pTFTHandle->outline;
 8005a1a:	f8b7 3252 	ldrh.w	r3, [r7, #594]	; 0x252
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <TFT_English_Large+0x630>
 8005a26:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <TFT_English_Large+0x630>
 8005a2e:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005a32:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005a36:	f103 0008 	add.w	r0, r3, #8
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8005a40:	f107 010c 	add.w	r1, r7, #12
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4403      	add	r3, r0
 8005a4e:	4622      	mov	r2, r4
 8005a50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				dot1 >>= 1;
 8005a54:	f8b7 3258 	ldrh.w	r3, [r7, #600]	; 0x258
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f8a7 3258 	strh.w	r3, [r7, #600]	; 0x258
				dot2 = dot0;
 8005a5e:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 8005a62:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
				dot0 >>= 1;
 8005a66:	f8b7 325a 	ldrh.w	r3, [r7, #602]	; 0x25a
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
				dot3 >>= 1;
 8005a70:	f8b7 3254 	ldrh.w	r3, [r7, #596]	; 0x254
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
				dot4 >>= 1;
 8005a7a:	f8b7 3252 	ldrh.w	r3, [r7, #594]	; 0x252
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252
			for(y = 0; y < 16; y++)
 8005a84:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005a88:	3301      	adds	r3, #1
 8005a8a:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005a8e:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	f67f af6c 	bls.w	8005970 <TFT_English_Large+0x54c>
		for(x = 0; x < 12; x++)
 8005a98:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005aa2:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005aa6:	2b0b      	cmp	r3, #11
 8005aa8:	f67f aeec 	bls.w	8005884 <TFT_English_Large+0x460>
			}
		}
	}

	if(pTFTHandle->Xcharacter >= pTFTHandle->XcharacterLimit_Large)
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d324      	bcc.n	8005b0a <TFT_English_Large+0x6e6>
	{
		pTFTHandle->nextline_flag = 1;
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		pTFTHandle->Xcharacter = 0;
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		pTFTHandle->Ycharacter += 3;
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005adc:	3303      	adds	r3, #3
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	1d3b      	adds	r3, r7, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

		if(pTFTHandle->Ycharacter >= (pTFTHandle->YcharacterLimit_Large - 2))		pTFTHandle->Ycharacter = 0;
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005af0:	461a      	mov	r2, r3
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afa:	3b02      	subs	r3, #2
 8005afc:	429a      	cmp	r2, r3
 8005afe:	db04      	blt.n	8005b0a <TFT_English_Large+0x6e6>
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	if(pTFTHandle->underscore_flag == 1)
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d11b      	bne.n	8005b4e <TFT_English_Large+0x72a>
	{
		for(x = 0; x < 12; x++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005b1c:	e013      	b.n	8005b46 <TFT_English_Large+0x722>
		{
			pixel[x][23] = pTFTHandle->underscore;
 8005b1e:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 8005b28:	f107 010c 	add.w	r1, r7, #12
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	440b      	add	r3, r1
 8005b36:	332e      	adds	r3, #46	; 0x2e
 8005b38:	4602      	mov	r2, r0
 8005b3a:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 12; x++)
 8005b3c:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005b40:	3301      	adds	r3, #1
 8005b42:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005b46:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005b4a:	2b0b      	cmp	r3, #11
 8005b4c:	d9e7      	bls.n	8005b1e <TFT_English_Large+0x6fa>
		}
	}

	if((pTFTHandle->cursor_flag == 1) && (pTFTHandle->Xcharacter == pTFTHandle->Xcursor) && (pTFTHandle->Ycharacter == pTFTHandle->Ycursor))
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d141      	bne.n	8005bde <TFT_English_Large+0x7ba>
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d137      	bne.n	8005bde <TFT_English_Large+0x7ba>
 8005b6e:	1d3b      	adds	r3, r7, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d12d      	bne.n	8005bde <TFT_English_Large+0x7ba>
	{
		for(x = 0; x < 12; x++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005b88:	e025      	b.n	8005bd6 <TFT_English_Large+0x7b2>
 8005b8a:	bf00      	nop
 8005b8c:	0800c6d4 	.word	0x0800c6d4
		{
			pixel[x][22] = pTFTHandle->cursor;
 8005b90:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8005b9a:	f107 010c 	add.w	r1, r7, #12
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	440b      	add	r3, r1
 8005ba8:	332c      	adds	r3, #44	; 0x2c
 8005baa:	4602      	mov	r2, r0
 8005bac:	801a      	strh	r2, [r3, #0]
			pixel[x][23] = pTFTHandle->cursor;
 8005bae:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8005bb8:	f107 010c 	add.w	r1, r7, #12
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	440b      	add	r3, r1
 8005bc6:	332e      	adds	r3, #46	; 0x2e
 8005bc8:	4602      	mov	r2, r0
 8005bca:	801a      	strh	r2, [r3, #0]
		for(x = 0; x < 12; x++)
 8005bcc:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005bd6:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005bda:	2b0b      	cmp	r3, #11
 8005bdc:	d9d8      	bls.n	8005b90 <TFT_English_Large+0x76c>
		}
	}

	if((pTFTHandle->nextline_flag == 1) && (pTFTHandle->Xcharacter == 0) && (code == ' '))
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10a      	bne.n	8005c00 <TFT_English_Large+0x7dc>
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d104      	bne.n	8005c00 <TFT_English_Large+0x7dc>
 8005bf6:	1cfb      	adds	r3, r7, #3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	f000 815c 	beq.w	8005eb8 <TFT_English_Large+0xa94>
	{
		return;
	}
	else if(pTFTHandle->background != Transparent)
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005c06:	f640 0221 	movw	r2, #2081	; 0x821
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 8101 	beq.w	8005e12 <TFT_English_Large+0x9ee>
	{
		xPos = pTFTHandle->Xcharacter * 12;
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	0052      	lsls	r2, r2, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	f8a7 3250 	strh.w	r3, [r7, #592]	; 0x250

		for(y = 0; y < 24; y++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005c2c:	e0eb      	b.n	8005e06 <TFT_English_Large+0x9e2>
		{
			yPos = pTFTHandle->Ycharacter * 8 + y;
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	f8a7 324e 	strh.w	r3, [r7, #590]	; 0x24e

			if(pTFTHandle->ScreenMode == 'L')
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c50:	2b4c      	cmp	r3, #76	; 0x4c
 8005c52:	d11f      	bne.n	8005c94 <TFT_English_Large+0x870>
			{
				TFT_Write(pTFTHandle, 0x02, xPos >> 8);
 8005c54:	f8b7 3250 	ldrh.w	r3, [r7, #592]	; 0x250
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	2102      	movs	r1, #2
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f7fe febd 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos & 0x00FF);
 8005c66:	f8b7 3250 	ldrh.w	r3, [r7, #592]	; 0x250
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	2103      	movs	r1, #3
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f7fe feb4 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, 0x0000);
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2106      	movs	r1, #6
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f7fe feae 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos);
 8005c84:	f8b7 224e 	ldrh.w	r2, [r7, #590]	; 0x24e
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	2107      	movs	r1, #7
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f7fe fea7 	bl	80049e0 <TFT_Write>
 8005c92:	e01e      	b.n	8005cd2 <TFT_English_Large+0x8ae>
			}
			else
			{
				TFT_Write(pTFTHandle, 0x02, 0x0000);
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	2200      	movs	r2, #0
 8005c98:	2102      	movs	r1, #2
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	f7fe fea0 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x03, xPos);
 8005ca0:	f8b7 2250 	ldrh.w	r2, [r7, #592]	; 0x250
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	2103      	movs	r1, #3
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	f7fe fe99 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x06, yPos >> 8);
 8005cae:	f8b7 324e 	ldrh.w	r3, [r7, #590]	; 0x24e
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	2106      	movs	r1, #6
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	f7fe fe90 	bl	80049e0 <TFT_Write>
				TFT_Write(pTFTHandle, 0x07, yPos & 0x00FF);
 8005cc0:	f8b7 324e 	ldrh.w	r3, [r7, #590]	; 0x24e
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	2107      	movs	r1, #7
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	f7fe fe87 	bl	80049e0 <TFT_Write>
			}

			TFT_Command(pTFTHandle, 0x22);
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	2122      	movs	r1, #34	; 0x22
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	f7fe fe0d 	bl	80048f6 <TFT_Command>
			TFT_Data(pTFTHandle, pixel[0][y]);
 8005cdc:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	4611      	mov	r1, r2
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f7fe fe3e 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[1][y]);
 8005cf2:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005cf6:	f107 030c 	add.w	r3, r7, #12
 8005cfa:	3218      	adds	r2, #24
 8005cfc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	4611      	mov	r1, r2
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	f7fe fe32 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[2][y]);
 8005d0a:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	3230      	adds	r2, #48	; 0x30
 8005d14:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	f7fe fe26 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[3][y]);
 8005d22:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	3248      	adds	r2, #72	; 0x48
 8005d2c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	4611      	mov	r1, r2
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	f7fe fe1a 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[4][y]);
 8005d3a:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d3e:	f107 030c 	add.w	r3, r7, #12
 8005d42:	3260      	adds	r2, #96	; 0x60
 8005d44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	f7fe fe0e 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[5][y]);
 8005d52:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d56:	f107 030c 	add.w	r3, r7, #12
 8005d5a:	3278      	adds	r2, #120	; 0x78
 8005d5c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d60:	1d3b      	adds	r3, r7, #4
 8005d62:	4611      	mov	r1, r2
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f7fe fe02 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[6][y]);
 8005d6a:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	3290      	adds	r2, #144	; 0x90
 8005d74:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f7fe fdf6 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[7][y]);
 8005d82:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	32a8      	adds	r2, #168	; 0xa8
 8005d8c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	4611      	mov	r1, r2
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f7fe fdea 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[8][y]);
 8005d9a:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005d9e:	f107 030c 	add.w	r3, r7, #12
 8005da2:	32c0      	adds	r2, #192	; 0xc0
 8005da4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	4611      	mov	r1, r2
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	f7fe fdde 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[9][y]);
 8005db2:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	32d8      	adds	r2, #216	; 0xd8
 8005dbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	f7fe fdd2 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[10][y]);
 8005dca:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	32f0      	adds	r2, #240	; 0xf0
 8005dd4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	4611      	mov	r1, r2
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	f7fe fdc6 	bl	800496e <TFT_Data>
			TFT_Data(pTFTHandle, pixel[11][y]);
 8005de2:	f897 225d 	ldrb.w	r2, [r7, #605]	; 0x25d
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8005dee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	4611      	mov	r1, r2
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	f7fe fdb9 	bl	800496e <TFT_Data>
		for(y = 0; y < 24; y++)
 8005dfc:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005e00:	3301      	adds	r3, #1
 8005e02:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005e06:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005e0a:	2b17      	cmp	r3, #23
 8005e0c:	f67f af0f 	bls.w	8005c2e <TFT_English_Large+0x80a>
 8005e10:	e047      	b.n	8005ea2 <TFT_English_Large+0xa7e>
		}
	}
	else
	{
		for(y = 0; y < 24; y++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005e18:	e03f      	b.n	8005e9a <TFT_English_Large+0xa76>
		{
			for(x = 0; x < 12; x++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005e20:	e032      	b.n	8005e88 <TFT_English_Large+0xa64>
			{
				TFT_Pixel(pTFTHandle, pTFTHandle->Xcharacter * 12 + x, pTFTHandle->Ycharacter * 8 + y, pixel[x][y]);
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	0052      	lsls	r2, r2, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	b29c      	uxth	r4, r3
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	b29d      	uxth	r5, r3
 8005e58:	f897 225e 	ldrb.w	r2, [r7, #606]	; 0x25e
 8005e5c:	f897 025d 	ldrb.w	r0, [r7, #605]	; 0x25d
 8005e60:	f107 010c 	add.w	r1, r7, #12
 8005e64:	4613      	mov	r3, r2
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	4413      	add	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4403      	add	r3, r0
 8005e6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e72:	1d38      	adds	r0, r7, #4
 8005e74:	462a      	mov	r2, r5
 8005e76:	4621      	mov	r1, r4
 8005e78:	6800      	ldr	r0, [r0, #0]
 8005e7a:	f7fe fe7f 	bl	8004b7c <TFT_Pixel>
			for(x = 0; x < 12; x++)
 8005e7e:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005e82:	3301      	adds	r3, #1
 8005e84:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
 8005e88:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d9c8      	bls.n	8005e22 <TFT_English_Large+0x9fe>
		for(y = 0; y < 24; y++)
 8005e90:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005e94:	3301      	adds	r3, #1
 8005e96:	f887 325d 	strb.w	r3, [r7, #605]	; 0x25d
 8005e9a:	f897 325d 	ldrb.w	r3, [r7, #605]	; 0x25d
 8005e9e:	2b17      	cmp	r3, #23
 8005ea0:	d9bb      	bls.n	8005e1a <TFT_English_Large+0x9f6>
			}
		}
	}

	pTFTHandle->Xcharacter += 1;
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005eaa:	3301      	adds	r3, #1
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005eb6:	e000      	b.n	8005eba <TFT_English_Large+0xa96>
		return;
 8005eb8:	bf00      	nop
}
 8005eba:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec2:	bf00      	nop

08005ec4 <TFT_English_pixel>:


void TFT_English_pixel(TFT_HandleTypeDef *pTFTHandle, uint16_t Xpixel, uint16_t Ypixel, uint8_t code)
{
 8005ec4:	b5b0      	push	{r4, r5, r7, lr}
 8005ec6:	b0c6      	sub	sp, #280	; 0x118
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	f107 040c 	add.w	r4, r7, #12
 8005ece:	6020      	str	r0, [r4, #0]
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f107 030a 	add.w	r3, r7, #10
 8005eda:	4622      	mov	r2, r4
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	1dfb      	adds	r3, r7, #7
 8005ee8:	460a      	mov	r2, r1
 8005eea:	701a      	strb	r2, [r3, #0]
	uint8_t data, x, y;
	uint16_t pixel[8][16];

	for(x = 0; x < 8; x++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005ef2:	e046      	b.n	8005f82 <TFT_English_pixel+0xbe>
	{
		data = E_font[code][x];
 8005ef4:	1dfb      	adds	r3, r7, #7
 8005ef6:	781a      	ldrb	r2, [r3, #0]
 8005ef8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005efc:	496d      	ldr	r1, [pc, #436]	; (80060b4 <TFT_English_pixel+0x1f0>)
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	440a      	add	r2, r1
 8005f02:	4413      	add	r3, r2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		for(y = 0; y < 8; y++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8005f10:	e02e      	b.n	8005f70 <TFT_English_pixel+0xac>
		{
			if(data & 0x01)		pixel[x][y] = pTFTHandle->foreground;
 8005f12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <TFT_English_pixel+0x7a>
 8005f1e:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8005f22:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8005f26:	f107 030c 	add.w	r3, r7, #12
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8005f2e:	f107 0314 	add.w	r3, r7, #20
 8005f32:	0109      	lsls	r1, r1, #4
 8005f34:	440a      	add	r2, r1
 8005f36:	4601      	mov	r1, r0
 8005f38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8005f3c:	e00e      	b.n	8005f5c <TFT_English_pixel+0x98>
			else				pixel[x][y] = pTFTHandle->background;
 8005f3e:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8005f42:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	0109      	lsls	r1, r1, #4
 8005f54:	440a      	add	r2, r1
 8005f56:	4601      	mov	r1, r0
 8005f58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8005f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f60:	085b      	lsrs	r3, r3, #1
 8005f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for(y = 0; y < 8; y++)
 8005f66:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8005f70:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005f74:	2b07      	cmp	r3, #7
 8005f76:	d9cc      	bls.n	8005f12 <TFT_English_pixel+0x4e>
	for(x = 0; x < 8; x++)
 8005f78:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005f82:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005f86:	2b07      	cmp	r3, #7
 8005f88:	d9b4      	bls.n	8005ef4 <TFT_English_pixel+0x30>
		}
	}

	for(x = 0; x < 8; x++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005f90:	e04b      	b.n	800602a <TFT_English_pixel+0x166>
	{
		data = E_font[code][x+8];
 8005f92:	1dfb      	adds	r3, r7, #7
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	4945      	ldr	r1, [pc, #276]	; (80060b4 <TFT_English_pixel+0x1f0>)
 8005f9e:	0112      	lsls	r2, r2, #4
 8005fa0:	440a      	add	r2, r1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		for(y = 0; y < 8; y++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8005fb0:	e032      	b.n	8006018 <TFT_English_pixel+0x154>
		{
			if(data & 0x01)		pixel[x][y+8] = pTFTHandle->foreground;
 8005fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <TFT_English_pixel+0x11e>
 8005fbe:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8005fc2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005fc6:	f103 0208 	add.w	r2, r3, #8
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8005fd2:	f107 0314 	add.w	r3, r7, #20
 8005fd6:	0109      	lsls	r1, r1, #4
 8005fd8:	440a      	add	r2, r1
 8005fda:	4601      	mov	r1, r0
 8005fdc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8005fe0:	e010      	b.n	8006004 <TFT_English_pixel+0x140>
			else				pixel[x][y+8] = pTFTHandle->background;
 8005fe2:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8005fe6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005fea:	f103 0208 	add.w	r2, r3, #8
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	0109      	lsls	r1, r1, #4
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4601      	mov	r1, r0
 8006000:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			data = data >> 1;
 8006004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for(y = 0; y < 8; y++)
 800600e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8006012:	3301      	adds	r3, #1
 8006014:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8006018:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800601c:	2b07      	cmp	r3, #7
 800601e:	d9c8      	bls.n	8005fb2 <TFT_English_pixel+0xee>
	for(x = 0; x < 8; x++)
 8006020:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006024:	3301      	adds	r3, #1
 8006026:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800602a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800602e:	2b07      	cmp	r3, #7
 8006030:	d9af      	bls.n	8005f92 <TFT_English_pixel+0xce>
		}
	}

	for(y = 0; y < 16; y++)
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8006038:	e032      	b.n	80060a0 <TFT_English_pixel+0x1dc>
	{
		for(x = 0; x < 8; x++)
 800603a:	2300      	movs	r3, #0
 800603c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006040:	e025      	b.n	800608e <TFT_English_pixel+0x1ca>
		{
			TFT_Pixel(pTFTHandle, Xpixel + x, Ypixel + y, pixel[x][y]);
 8006042:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006046:	b29a      	uxth	r2, r3
 8006048:	f107 030a 	add.w	r3, r7, #10
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	4413      	add	r3, r2
 8006050:	b29c      	uxth	r4, r3
 8006052:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8006056:	b29a      	uxth	r2, r3
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	4413      	add	r3, r2
 8006060:	b29d      	uxth	r5, r3
 8006062:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
 8006066:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 800606a:	f107 0314 	add.w	r3, r7, #20
 800606e:	0109      	lsls	r1, r1, #4
 8006070:	440a      	add	r2, r1
 8006072:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006076:	f107 000c 	add.w	r0, r7, #12
 800607a:	462a      	mov	r2, r5
 800607c:	4621      	mov	r1, r4
 800607e:	6800      	ldr	r0, [r0, #0]
 8006080:	f7fe fd7c 	bl	8004b7c <TFT_Pixel>
		for(x = 0; x < 8; x++)
 8006084:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006088:	3301      	adds	r3, #1
 800608a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800608e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006092:	2b07      	cmp	r3, #7
 8006094:	d9d5      	bls.n	8006042 <TFT_English_pixel+0x17e>
	for(y = 0; y < 16; y++)
 8006096:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800609a:	3301      	adds	r3, #1
 800609c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80060a0:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d9c8      	bls.n	800603a <TFT_English_pixel+0x176>
		}
	}
}
 80060a8:	bf00      	nop
 80060aa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bdb0      	pop	{r4, r5, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	0800bed4 	.word	0x0800bed4

080060b8 <TFT_Signed_float>:
	}
}


void TFT_Signed_float(TFT_HandleTypeDef *pTFTHandle, float number, uint8_t integral, uint8_t fractional)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b089      	sub	sp, #36	; 0x24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4611      	mov	r1, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	460b      	mov	r3, r1
 80060c8:	71fb      	strb	r3, [r7, #7]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71bb      	strb	r3, [r7, #6]
	uint8_t zero_flag, digit, character;
	uint32_t div, integer;

	digit = integral + fractional;
 80060ce:	79fa      	ldrb	r2, [r7, #7]
 80060d0:	79bb      	ldrb	r3, [r7, #6]
 80060d2:	4413      	add	r3, r2
 80060d4:	77bb      	strb	r3, [r7, #30]

	if((integral == 0) || (fractional == 0) || (digit > 9))		return;
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 808b 	beq.w	80061f4 <TFT_Signed_float+0x13c>
 80060de:	79bb      	ldrb	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8087 	beq.w	80061f4 <TFT_Signed_float+0x13c>
 80060e6:	7fbb      	ldrb	r3, [r7, #30]
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	f200 8083 	bhi.w	80061f4 <TFT_Signed_float+0x13c>

	if(number >= 0)
 80060ee:	f04f 0100 	mov.w	r1, #0
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7fb f808 	bl	8001108 <__aeabi_fcmpge>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <TFT_Signed_float+0x50>
	{
		TFT_English(pTFTHandle, '+');
 80060fe:	212b      	movs	r1, #43	; 0x2b
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7fe fe2f 	bl	8004d64 <TFT_English>
 8006106:	e007      	b.n	8006118 <TFT_Signed_float+0x60>
	}
	else
	{
		TFT_English(pTFTHandle, '-');
 8006108:	212d      	movs	r1, #45	; 0x2d
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7fe fe2a 	bl	8004d64 <TFT_English>
		number = (-1)*number;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006116:	60bb      	str	r3, [r7, #8]
	}

	div = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]

	while(--digit)		div *= 10;
 800611c:	e005      	b.n	800612a <TFT_Signed_float+0x72>
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	7fbb      	ldrb	r3, [r7, #30]
 800612c:	3b01      	subs	r3, #1
 800612e:	77bb      	strb	r3, [r7, #30]
 8006130:	7fbb      	ldrb	r3, [r7, #30]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f3      	bne.n	800611e <TFT_Signed_float+0x66>

	while(fractional--)	number *= 10.;
 8006136:	e005      	b.n	8006144 <TFT_Signed_float+0x8c>
 8006138:	4930      	ldr	r1, [pc, #192]	; (80061fc <TFT_Signed_float+0x144>)
 800613a:	68b8      	ldr	r0, [r7, #8]
 800613c:	f7fa fe32 	bl	8000da4 <__aeabi_fmul>
 8006140:	4603      	mov	r3, r0
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	79bb      	ldrb	r3, [r7, #6]
 8006146:	1e5a      	subs	r2, r3, #1
 8006148:	71ba      	strb	r2, [r7, #6]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f4      	bne.n	8006138 <TFT_Signed_float+0x80>

	integer = (uint32_t)(number + 0.5);
 800614e:	68b8      	ldr	r0, [r7, #8]
 8006150:	f7fa f97a 	bl	8000448 <__aeabi_f2d>
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	4b29      	ldr	r3, [pc, #164]	; (8006200 <TFT_Signed_float+0x148>)
 800615a:	f7fa f817 	bl	800018c <__adddf3>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	4618      	mov	r0, r3
 8006164:	4621      	mov	r1, r4
 8006166:	f7fa fc9f 	bl	8000aa8 <__aeabi_d2uiz>
 800616a:	4603      	mov	r3, r0
 800616c:	617b      	str	r3, [r7, #20]

	zero_flag = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	77fb      	strb	r3, [r7, #31]

	digit = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	77bb      	strb	r3, [r7, #30]

	while(div > 0)
 8006176:	e039      	b.n	80061ec <TFT_Signed_float+0x134>
	{
		character = integer / div;
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	74fb      	strb	r3, [r7, #19]

		if((character == 0) && (zero_flag == 0) && (digit != integral))
 8006182:	7cfb      	ldrb	r3, [r7, #19]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10e      	bne.n	80061a6 <TFT_Signed_float+0xee>
 8006188:	7ffb      	ldrb	r3, [r7, #31]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <TFT_Signed_float+0xee>
 800618e:	7fba      	ldrb	r2, [r7, #30]
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	429a      	cmp	r2, r3
 8006194:	d007      	beq.n	80061a6 <TFT_Signed_float+0xee>
		{
			TFT_English(pTFTHandle, character + ' ');
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	3320      	adds	r3, #32
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7fe fde0 	bl	8004d64 <TFT_English>
 80061a4:	e008      	b.n	80061b8 <TFT_Signed_float+0x100>
		}
		else
		{
			zero_flag = 1;
 80061a6:	2301      	movs	r3, #1
 80061a8:	77fb      	strb	r3, [r7, #31]
			TFT_English(pTFTHandle, character + '0');
 80061aa:	7cfb      	ldrb	r3, [r7, #19]
 80061ac:	3330      	adds	r3, #48	; 0x30
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7fe fdd6 	bl	8004d64 <TFT_English>
		}

		integer %= div;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80061c0:	69b9      	ldr	r1, [r7, #24]
 80061c2:	fb01 f202 	mul.w	r2, r1, r2
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
		div /= 10;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <TFT_Signed_float+0x14c>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	61bb      	str	r3, [r7, #24]

		if(digit == integral)		TFT_English(pTFTHandle, '.');
 80061d6:	7fba      	ldrb	r2, [r7, #30]
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d103      	bne.n	80061e6 <TFT_Signed_float+0x12e>
 80061de:	212e      	movs	r1, #46	; 0x2e
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7fe fdbf 	bl	8004d64 <TFT_English>

		digit++;
 80061e6:	7fbb      	ldrb	r3, [r7, #30]
 80061e8:	3301      	adds	r3, #1
 80061ea:	77bb      	strb	r3, [r7, #30]
	while(div > 0)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1c2      	bne.n	8006178 <TFT_Signed_float+0xc0>
 80061f2:	e000      	b.n	80061f6 <TFT_Signed_float+0x13e>
	if((integral == 0) || (fractional == 0) || (digit > 9))		return;
 80061f4:	bf00      	nop
	}
}
 80061f6:	3724      	adds	r7, #36	; 0x24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}
 80061fc:	41200000 	.word	0x41200000
 8006200:	3fe00000 	.word	0x3fe00000
 8006204:	cccccccd 	.word	0xcccccccd

08006208 <TFT_Line>:


void TFT_Line(TFT_HandleTypeDef *pTFTHandle, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	4603      	mov	r3, r0
 8006218:	817b      	strh	r3, [r7, #10]
 800621a:	460b      	mov	r3, r1
 800621c:	813b      	strh	r3, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
	int16_t x, y;

	if((x1 == x2) && (y1 == y2))
 8006222:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800622a:	429a      	cmp	r2, r3
 800622c:	d10c      	bne.n	8006248 <TFT_Line+0x40>
 800622e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006236:	429a      	cmp	r2, r3
 8006238:	d106      	bne.n	8006248 <TFT_Line+0x40>
	{
		TFT_Pixel(pTFTHandle, x1, y1, color);
 800623a:	8979      	ldrh	r1, [r7, #10]
 800623c:	893a      	ldrh	r2, [r7, #8]
 800623e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fe fc9b 	bl	8004b7c <TFT_Pixel>
 8006246:	e109      	b.n	800645c <TFT_Line+0x254>
	}
	else
	{
		if(x1 < x2)		x = x2 - x1;
 8006248:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800624c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006250:	429a      	cmp	r2, r3
 8006252:	da05      	bge.n	8006260 <TFT_Line+0x58>
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	897b      	ldrh	r3, [r7, #10]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	82fb      	strh	r3, [r7, #22]
 800625e:	e004      	b.n	800626a <TFT_Line+0x62>
		else			x = x1 - x2;
 8006260:	897a      	ldrh	r2, [r7, #10]
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	82fb      	strh	r3, [r7, #22]

		if(y1 < y2)		y = y2 - y1;
 800626a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800626e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006272:	429a      	cmp	r2, r3
 8006274:	da05      	bge.n	8006282 <TFT_Line+0x7a>
 8006276:	8c3a      	ldrh	r2, [r7, #32]
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	b29b      	uxth	r3, r3
 800627e:	82bb      	strh	r3, [r7, #20]
 8006280:	e004      	b.n	800628c <TFT_Line+0x84>
		else			y = y1 - y2;
 8006282:	893a      	ldrh	r2, [r7, #8]
 8006284:	8c3b      	ldrh	r3, [r7, #32]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	b29b      	uxth	r3, r3
 800628a:	82bb      	strh	r3, [r7, #20]

		if((x >= y) && (x1 <= x2))
 800628c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	db33      	blt.n	8006300 <TFT_Line+0xf8>
 8006298:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800629c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	dc2d      	bgt.n	8006300 <TFT_Line+0xf8>
		{
			for(x = x1; x <= x2; x++)
 80062a4:	897b      	ldrh	r3, [r7, #10]
 80062a6:	82fb      	strh	r3, [r7, #22]
 80062a8:	e023      	b.n	80062f2 <TFT_Line+0xea>
			{
				y = y1 + (int32_t)(x - x1) * (int32_t)(y2 - y1) / (x2 - x1);
 80062aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80062ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80062b8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80062bc:	1a8a      	subs	r2, r1, r2
 80062be:	fb02 f203 	mul.w	r2, r2, r3
 80062c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80062c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80062ca:	1acb      	subs	r3, r1, r3
 80062cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	82bb      	strh	r3, [r7, #20]
				TFT_Pixel(pTFTHandle, x, y, color);
 80062da:	8af9      	ldrh	r1, [r7, #22]
 80062dc:	8aba      	ldrh	r2, [r7, #20]
 80062de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7fe fc4b 	bl	8004b7c <TFT_Pixel>
			for(x = x1; x <= x2; x++)
 80062e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3301      	adds	r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	82fb      	strh	r3, [r7, #22]
 80062f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80062f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	ddd5      	ble.n	80062aa <TFT_Line+0xa2>
		if((x >= y) && (x1 <= x2))
 80062fe:	e0ad      	b.n	800645c <TFT_Line+0x254>
			}
		}
		else if((x >= y) && (x1 > x2))
 8006300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006304:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006308:	429a      	cmp	r2, r3
 800630a:	db33      	blt.n	8006374 <TFT_Line+0x16c>
 800630c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006314:	429a      	cmp	r2, r3
 8006316:	dd2d      	ble.n	8006374 <TFT_Line+0x16c>
		{
			for(x = x1; x >= x2; x--)
 8006318:	897b      	ldrh	r3, [r7, #10]
 800631a:	82fb      	strh	r3, [r7, #22]
 800631c:	e023      	b.n	8006366 <TFT_Line+0x15e>
			{
				y = y1 + (int32_t)(x - x1) * (int32_t)(y2 - y1) / (x2 - x1);
 800631e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006322:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800632c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006330:	1a8a      	subs	r2, r1, r2
 8006332:	fb02 f203 	mul.w	r2, r2, r3
 8006336:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800633a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800633e:	1acb      	subs	r3, r1, r3
 8006340:	fb92 f3f3 	sdiv	r3, r2, r3
 8006344:	b29a      	uxth	r2, r3
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	4413      	add	r3, r2
 800634a:	b29b      	uxth	r3, r3
 800634c:	82bb      	strh	r3, [r7, #20]
				TFT_Pixel(pTFTHandle, x, y, color);
 800634e:	8af9      	ldrh	r1, [r7, #22]
 8006350:	8aba      	ldrh	r2, [r7, #20]
 8006352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7fe fc11 	bl	8004b7c <TFT_Pixel>
			for(x = x1; x >= x2; x--)
 800635a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	82fb      	strh	r3, [r7, #22]
 8006366:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800636a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800636e:	429a      	cmp	r2, r3
 8006370:	dad5      	bge.n	800631e <TFT_Line+0x116>
		else if((x >= y) && (x1 > x2))
 8006372:	e073      	b.n	800645c <TFT_Line+0x254>
			}
		}
		else if((x < y) && (y1 <= y2))
 8006374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006378:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	da33      	bge.n	80063e8 <TFT_Line+0x1e0>
 8006380:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006384:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006388:	429a      	cmp	r2, r3
 800638a:	dc2d      	bgt.n	80063e8 <TFT_Line+0x1e0>
		{
			for(y = y1; y <= y2; y++)
 800638c:	893b      	ldrh	r3, [r7, #8]
 800638e:	82bb      	strh	r3, [r7, #20]
 8006390:	e023      	b.n	80063da <TFT_Line+0x1d2>
			{
				x = x1 + (int32_t)(y - y1) * (int32_t)(x2 - x1) / (y2 - y1);
 8006392:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006396:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80063a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80063a4:	1a8a      	subs	r2, r1, r2
 80063a6:	fb02 f203 	mul.w	r2, r2, r3
 80063aa:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80063ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80063b2:	1acb      	subs	r3, r1, r3
 80063b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	897b      	ldrh	r3, [r7, #10]
 80063bc:	4413      	add	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	82fb      	strh	r3, [r7, #22]
				TFT_Pixel(pTFTHandle, x, y, color);
 80063c2:	8af9      	ldrh	r1, [r7, #22]
 80063c4:	8aba      	ldrh	r2, [r7, #20]
 80063c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7fe fbd7 	bl	8004b7c <TFT_Pixel>
			for(y = y1; y <= y2; y++)
 80063ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3301      	adds	r3, #1
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	82bb      	strh	r3, [r7, #20]
 80063da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80063de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	ddd5      	ble.n	8006392 <TFT_Line+0x18a>
		else if((x < y) && (y1 <= y2))
 80063e6:	e039      	b.n	800645c <TFT_Line+0x254>
			}
		}
		else if((x < y) && (y1 > y2))
 80063e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80063ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	da33      	bge.n	800645c <TFT_Line+0x254>
 80063f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80063f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	dd2d      	ble.n	800645c <TFT_Line+0x254>
		{
			for(y = y1; y >= y2; y--)
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	82bb      	strh	r3, [r7, #20]
 8006404:	e023      	b.n	800644e <TFT_Line+0x246>
			{
				x = x1 + (int32_t)(y - y1) * (int32_t)(x2 - x1) / (y2 - y1);
 8006406:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800640a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006414:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006418:	1a8a      	subs	r2, r1, r2
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8006422:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006426:	1acb      	subs	r3, r1, r3
 8006428:	fb92 f3f3 	sdiv	r3, r2, r3
 800642c:	b29a      	uxth	r2, r3
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	4413      	add	r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	82fb      	strh	r3, [r7, #22]
				TFT_Pixel(pTFTHandle, x, y, color);
 8006436:	8af9      	ldrh	r1, [r7, #22]
 8006438:	8aba      	ldrh	r2, [r7, #20]
 800643a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7fe fb9d 	bl	8004b7c <TFT_Pixel>
			for(y = y1; y >= y2; y--)
 8006442:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	82bb      	strh	r3, [r7, #20]
 800644e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006456:	429a      	cmp	r2, r3
 8006458:	dad5      	bge.n	8006406 <TFT_Line+0x1fe>
			}
		}
	}
}
 800645a:	e7ff      	b.n	800645c <TFT_Line+0x254>
 800645c:	bf00      	nop
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <TS_Init>:
 * 						For more information about the APIs, Check the function definitions					  *
 * 									  																		  *
 **************************************************************************************************************/

void TS_Init(TS_HandleTypeDef *pTSHandle)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	// Init the Low level hardware of Touch Screen : GPIO, SPI
	TS_MspInit(pTSHandle);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fd ffbd 	bl	80043ec <TS_MspInit>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <TS_Read_ADS7846>:


uint16_t TS_Read_ADS7846(uint16_t command)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	80fb      	strh	r3, [r7, #6]
	uint16_t axis;

	axis = SPI2->DR;
 8006486:	4b19      	ldr	r3, [pc, #100]	; (80064ec <TS_Read_ADS7846+0x70>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800648c:	2200      	movs	r2, #0
 800648e:	2108      	movs	r1, #8
 8006490:	4817      	ldr	r0, [pc, #92]	; (80064f0 <TS_Read_ADS7846+0x74>)
 8006492:	f7fb fbeb 	bl	8001c6c <GPIO_WritePin>
	SPI2->DR = command;
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <TS_Read_ADS7846+0x70>)
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	60d3      	str	r3, [r2, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 800649c:	bf00      	nop
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <TS_Read_ADS7846+0x70>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d1f9      	bne.n	800649e <TS_Read_ADS7846+0x22>
	axis = SPI2->DR;
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <TS_Read_ADS7846+0x70>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	81fb      	strh	r3, [r7, #14]
	Delay_us(1);
 80064b0:	2001      	movs	r0, #1
 80064b2:	f7fd fb6f 	bl	8003b94 <Delay_us>
	SPI2->DR = 0x0000;
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <TS_Read_ADS7846+0x70>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	60da      	str	r2, [r3, #12]
	while((SPI2->SR & 0x0003) != 0x0003);
 80064bc:	bf00      	nop
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <TS_Read_ADS7846+0x70>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d1f9      	bne.n	80064be <TS_Read_ADS7846+0x42>
	axis = SPI2->DR;
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <TS_Read_ADS7846+0x70>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	81fb      	strh	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80064d0:	2201      	movs	r2, #1
 80064d2:	2108      	movs	r1, #8
 80064d4:	4806      	ldr	r0, [pc, #24]	; (80064f0 <TS_Read_ADS7846+0x74>)
 80064d6:	f7fb fbc9 	bl	8001c6c <GPIO_WritePin>

	axis >>= 3;
 80064da:	89fb      	ldrh	r3, [r7, #14]
 80064dc:	08db      	lsrs	r3, r3, #3
 80064de:	81fb      	strh	r3, [r7, #14]

	return axis;
 80064e0:	89fb      	ldrh	r3, [r7, #14]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40003800 	.word	0x40003800
 80064f0:	40010c00 	.word	0x40010c00
 80064f4:	00000000 	.word	0x00000000

080064f8 <TS_Input>:


void TS_Input(TS_HandleTypeDef *pTSHandle)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint16_t temp;

	pTSHandle->x_12bit = 0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit = 0;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	855a      	strh	r2, [r3, #42]	; 0x2a

	for(i = 0; i < 16; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e040      	b.n	8006594 <TS_Input+0x9c>
	{
		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8006512:	2110      	movs	r1, #16
 8006514:	488c      	ldr	r0, [pc, #560]	; (8006748 <TS_Input+0x250>)
 8006516:	f7fb fb93 	bl	8001c40 <GPIO_ReadPin>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d117      	bne.n	8006550 <TS_Input+0x58>
		{
			pTSHandle->x_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_X);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8c1b      	ldrh	r3, [r3, #32]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ffa9 	bl	800647c <TS_Read_ADS7846>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	4413      	add	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->x_12bit = 0;
			pTSHandle->y_12bit = 0;
			break;
		}

		Delay_us(10);
 800653a:	200a      	movs	r0, #10
 800653c:	f7fd fb2a 	bl	8003b94 <Delay_us>

		if(GPIO_ReadPin(GPIOB, GPIO_PIN_4)  == GPIO_PIN_RESET)
 8006540:	2110      	movs	r1, #16
 8006542:	4881      	ldr	r0, [pc, #516]	; (8006748 <TS_Input+0x250>)
 8006544:	f7fb fb7c 	bl	8001c40 <GPIO_ReadPin>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d115      	bne.n	800657a <TS_Input+0x82>
 800654e:	e006      	b.n	800655e <TS_Input+0x66>
			pTSHandle->x_12bit = 0;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800655c:	e01d      	b.n	800659a <TS_Input+0xa2>
		{
			pTSHandle->y_12bit += TS_Read_ADS7846(pTSHandle->Init.ADS7846_CMD_Y);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ff8a 	bl	800647c <TS_Read_ADS7846>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	4413      	add	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006578:	e006      	b.n	8006588 <TS_Input+0x90>
		}
		else
		{
			pTSHandle->x_12bit = 0;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
			pTSHandle->y_12bit = 0;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8006586:	e008      	b.n	800659a <TS_Input+0xa2>
		}

		Delay_us(10);
 8006588:	200a      	movs	r0, #10
 800658a:	f7fd fb03 	bl	8003b94 <Delay_us>
	for(i = 0; i < 16; i++)
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	3301      	adds	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b0f      	cmp	r3, #15
 8006598:	d9bb      	bls.n	8006512 <TS_Input+0x1a>
	}

	pTSHandle->x_12bit >>= 4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	851a      	strh	r2, [r3, #40]	; 0x28
	pTSHandle->y_12bit >>= 4;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	091b      	lsrs	r3, r3, #4
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	855a      	strh	r2, [r3, #42]	; 0x2a

	if((pTSHandle->x_12bit == 0) && (pTSHandle->y_12bit == 0))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <TS_Input+0xd8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <TS_Input+0xd8>
	{
		pTSHandle->x_touch = 0;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 0;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	85da      	strh	r2, [r3, #46]	; 0x2e
		return;
 80065ce:	e0b0      	b.n	8006732 <TS_Input+0x23a>
	}

	if(pTSHandle->x_12bit <= pTSHandle->Init.x_touch_min)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d803      	bhi.n	80065e6 <TS_Input+0xee>
	{
		pTSHandle->x_touch = 0;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80065e4:	e03c      	b.n	8006660 <TS_Input+0x168>
	}
	else if(pTSHandle->x_12bit >= pTSHandle->Init.x_touch_max)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d303      	bcc.n	80065fc <TS_Input+0x104>
	{
		pTSHandle->x_touch = 239;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	22ef      	movs	r2, #239	; 0xef
 80065f8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80065fa:	e031      	b.n	8006660 <TS_Input+0x168>
	}
	else
	{
		pTSHandle->x_touch = (uint32_t)((float)(pTSHandle->x_12bit - pTSHandle->Init.x_touch_min) * 239./(float)(pTSHandle->Init.x_touch_max - pTSHandle->Init.x_touch_min));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	4618      	mov	r0, r3
 800660a:	f7fa fb73 	bl	8000cf4 <__aeabi_ui2f>
 800660e:	4603      	mov	r3, r0
 8006610:	4618      	mov	r0, r3
 8006612:	f7f9 ff19 	bl	8000448 <__aeabi_f2d>
 8006616:	a348      	add	r3, pc, #288	; (adr r3, 8006738 <TS_Input+0x240>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7f9 ff6c 	bl	80004f8 <__aeabi_dmul>
 8006620:	4603      	mov	r3, r0
 8006622:	460c      	mov	r4, r1
 8006624:	4625      	mov	r5, r4
 8006626:	461c      	mov	r4, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	4618      	mov	r0, r3
 8006634:	f7fa fb5e 	bl	8000cf4 <__aeabi_ui2f>
 8006638:	4603      	mov	r3, r0
 800663a:	4618      	mov	r0, r3
 800663c:	f7f9 ff04 	bl	8000448 <__aeabi_f2d>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7fa f880 	bl	800074c <__aeabi_ddiv>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4618      	mov	r0, r3
 8006652:	4621      	mov	r1, r4
 8006654:	f7fa fa28 	bl	8000aa8 <__aeabi_d2uiz>
 8006658:	4603      	mov	r3, r0
 800665a:	b29a      	uxth	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	859a      	strh	r2, [r3, #44]	; 0x2c
	}

	if(pTSHandle->y_12bit <= pTSHandle->Init.y_touch_min)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	429a      	cmp	r2, r3
 800666c:	d804      	bhi.n	8006678 <TS_Input+0x180>
	{
		pTSHandle->y_touch = 319;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f240 123f 	movw	r2, #319	; 0x13f
 8006674:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006676:	e040      	b.n	80066fa <TS_Input+0x202>
	}
	else if(pTSHandle->y_12bit >= pTSHandle->Init.y_touch_max)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	429a      	cmp	r2, r3
 8006684:	d303      	bcc.n	800668e <TS_Input+0x196>
	{
		pTSHandle->y_touch = 0;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800668c:	e035      	b.n	80066fa <TS_Input+0x202>
	}
	else
	{
		pTSHandle->y_touch = 319 - (uint32_t)((float)(pTSHandle->y_12bit - pTSHandle->Init.y_touch_min) * 319./(float)(pTSHandle->Init.y_touch_max - pTSHandle->Init.y_touch_min));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	4618      	mov	r0, r3
 800669c:	f7fa fb2a 	bl	8000cf4 <__aeabi_ui2f>
 80066a0:	4603      	mov	r3, r0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7f9 fed0 	bl	8000448 <__aeabi_f2d>
 80066a8:	a325      	add	r3, pc, #148	; (adr r3, 8006740 <TS_Input+0x248>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 ff23 	bl	80004f8 <__aeabi_dmul>
 80066b2:	4603      	mov	r3, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	4625      	mov	r5, r4
 80066b8:	461c      	mov	r4, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fa fb15 	bl	8000cf4 <__aeabi_ui2f>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7f9 febb 	bl	8000448 <__aeabi_f2d>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4620      	mov	r0, r4
 80066d8:	4629      	mov	r1, r5
 80066da:	f7fa f837 	bl	800074c <__aeabi_ddiv>
 80066de:	4603      	mov	r3, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	4618      	mov	r0, r3
 80066e4:	4621      	mov	r1, r4
 80066e6:	f7fa f9df 	bl	8000aa8 <__aeabi_d2uiz>
 80066ea:	4603      	mov	r3, r0
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80066f2:	3301      	adds	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if(TFT1Handle.ScreenMode == 'L')
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <TS_Input+0x254>)
 80066fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006700:	2b4c      	cmp	r3, #76	; 0x4c
 8006702:	d116      	bne.n	8006732 <TS_Input+0x23a>
	{
		temp = pTSHandle->x_12bit;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006708:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_12bit = pTSHandle->y_12bit;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	851a      	strh	r2, [r3, #40]	; 0x28
		pTSHandle->y_12bit = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	89ba      	ldrh	r2, [r7, #12]
 8006716:	855a      	strh	r2, [r3, #42]	; 0x2a
		temp = pTSHandle->x_touch;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800671c:	81bb      	strh	r3, [r7, #12]
		pTSHandle->x_touch = pTSHandle->y_touch;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	859a      	strh	r2, [r3, #44]	; 0x2c
		pTSHandle->y_touch = 239 - temp;
 8006726:	89bb      	ldrh	r3, [r7, #12]
 8006728:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	85da      	strh	r2, [r3, #46]	; 0x2e
	}
}
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bdb0      	pop	{r4, r5, r7, pc}
 8006738:	00000000 	.word	0x00000000
 800673c:	406de000 	.word	0x406de000
 8006740:	00000000 	.word	0x00000000
 8006744:	4073f000 	.word	0x4073f000
 8006748:	40010c00 	.word	0x40010c00
 800674c:	200003dc 	.word	0x200003dc

08006750 <Key_Init>:
/********************************************************************************************************************
 *												Initialization Function												*
 ********************************************************************************************************************/

void Key_Init(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOInit;

	memset(&GPIOInit, 0, sizeof(GPIOInit));
 8006756:	463b      	mov	r3, r7
 8006758:	2210      	movs	r2, #16
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f003 fae1 	bl	8009d24 <memset>

	/* Init GPIO of MODE Button */
	GPIOInit.Pin = GPIO_PIN_0;
 8006762:	2301      	movs	r3, #1
 8006764:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 8006766:	4b21      	ldr	r3, [pc, #132]	; (80067ec <Key_Init+0x9c>)
 8006768:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 800676a:	2301      	movs	r3, #1
 800676c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800676e:	463b      	mov	r3, r7
 8006770:	4619      	mov	r1, r3
 8006772:	481f      	ldr	r0, [pc, #124]	; (80067f0 <Key_Init+0xa0>)
 8006774:	f7fb f824 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI0, NVIC_PRIOR_15, ENABLE);
 8006778:	2201      	movs	r2, #1
 800677a:	210f      	movs	r1, #15
 800677c:	2006      	movs	r0, #6
 800677e:	f7fd f883 	bl	8003888 <NVIC_IRQConfig>

	/* Init GPIO of Up Button */
	GPIOInit.Pin = GPIO_PIN_1;
 8006782:	2302      	movs	r3, #2
 8006784:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 8006786:	4b19      	ldr	r3, [pc, #100]	; (80067ec <Key_Init+0x9c>)
 8006788:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 800678a:	2301      	movs	r3, #1
 800678c:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 800678e:	463b      	mov	r3, r7
 8006790:	4619      	mov	r1, r3
 8006792:	4817      	ldr	r0, [pc, #92]	; (80067f0 <Key_Init+0xa0>)
 8006794:	f7fb f814 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI1, NVIC_PRIOR_15, ENABLE);
 8006798:	2201      	movs	r2, #1
 800679a:	210f      	movs	r1, #15
 800679c:	2007      	movs	r0, #7
 800679e:	f7fd f873 	bl	8003888 <NVIC_IRQConfig>

	/* Init GPIO of Down Button */
	GPIOInit.Pin = GPIO_PIN_2;
 80067a2:	2304      	movs	r3, #4
 80067a4:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <Key_Init+0x9c>)
 80067a8:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 80067aa:	2301      	movs	r3, #1
 80067ac:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 80067ae:	463b      	mov	r3, r7
 80067b0:	4619      	mov	r1, r3
 80067b2:	480f      	ldr	r0, [pc, #60]	; (80067f0 <Key_Init+0xa0>)
 80067b4:	f7fb f804 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI2, NVIC_PRIOR_15, ENABLE);
 80067b8:	2201      	movs	r2, #1
 80067ba:	210f      	movs	r1, #15
 80067bc:	2008      	movs	r0, #8
 80067be:	f7fd f863 	bl	8003888 <NVIC_IRQConfig>

	/* Init GPIO of START/STOP Button */
	GPIOInit.Pin = GPIO_PIN_3;
 80067c2:	2308      	movs	r3, #8
 80067c4:	603b      	str	r3, [r7, #0]
	GPIOInit.Mode = GPIO_MODE_IT_FALLING;
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <Key_Init+0x9c>)
 80067c8:	607b      	str	r3, [r7, #4]
	GPIOInit.Pull = GPIO_PULLUP;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOA, &GPIOInit);
 80067ce:	463b      	mov	r3, r7
 80067d0:	4619      	mov	r1, r3
 80067d2:	4807      	ldr	r0, [pc, #28]	; (80067f0 <Key_Init+0xa0>)
 80067d4:	f7fa fff4 	bl	80017c0 <GPIO_Init>
	NVIC_IRQConfig(IRQ_NO_EXTI3, NVIC_PRIOR_15, ENABLE);
 80067d8:	2201      	movs	r2, #1
 80067da:	210f      	movs	r1, #15
 80067dc:	2009      	movs	r0, #9
 80067de:	f7fd f853 	bl	8003888 <NVIC_IRQConfig>
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	10210000 	.word	0x10210000
 80067f0:	40010800 	.word	0x40010800

080067f4 <BLDC1_Init>:


void BLDC1_Init(void)
{
 80067f4:	b598      	push	{r3, r4, r7, lr}
 80067f6:	af00      	add	r7, sp, #0
	/* Initialize Motor Hardware related Parameter */
	BLDC1Handle.Instance = BLDC1;
 80067f8:	4b5e      	ldr	r3, [pc, #376]	; (8006974 <BLDC1_Init+0x180>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
	BLDC1Handle.MotorPoleNum = 8;
 80067fe:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <BLDC1_Init+0x180>)
 8006800:	2208      	movs	r2, #8
 8006802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	BLDC1Handle.MotorGearRatio = 4;
 8006806:	4b5b      	ldr	r3, [pc, #364]	; (8006974 <BLDC1_Init+0x180>)
 8006808:	2204      	movs	r2, #4
 800680a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	BLDC1Handle.MotorResolution = (double)360/6/(BLDC1Handle.MotorPoleNum/2)/4;
 800680e:	4b59      	ldr	r3, [pc, #356]	; (8006974 <BLDC1_Init+0x180>)
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fe03 	bl	8000424 <__aeabi_i2d>
 800681e:	4603      	mov	r3, r0
 8006820:	460c      	mov	r4, r1
 8006822:	461a      	mov	r2, r3
 8006824:	4623      	mov	r3, r4
 8006826:	f04f 0000 	mov.w	r0, #0
 800682a:	4953      	ldr	r1, [pc, #332]	; (8006978 <BLDC1_Init+0x184>)
 800682c:	f7f9 ff8e 	bl	800074c <__aeabi_ddiv>
 8006830:	4603      	mov	r3, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4618      	mov	r0, r3
 8006836:	4621      	mov	r1, r4
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	4b4f      	ldr	r3, [pc, #316]	; (800697c <BLDC1_Init+0x188>)
 800683e:	f7f9 ff85 	bl	800074c <__aeabi_ddiv>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	4a4b      	ldr	r2, [pc, #300]	; (8006974 <BLDC1_Init+0x180>)
 8006848:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	/* Initialize Motor Control related Parameter*/
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 800684c:	4b49      	ldr	r3, [pc, #292]	; (8006974 <BLDC1_Init+0x180>)
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 8006854:	4b47      	ldr	r3, [pc, #284]	; (8006974 <BLDC1_Init+0x180>)
 8006856:	2200      	movs	r2, #0
 8006858:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 800685a:	4b46      	ldr	r3, [pc, #280]	; (8006974 <BLDC1_Init+0x180>)
 800685c:	2200      	movs	r2, #0
 800685e:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8006860:	4a44      	ldr	r2, [pc, #272]	; (8006974 <BLDC1_Init+0x180>)
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	f04f 0400 	mov.w	r4, #0
 800686a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 800686e:	4a41      	ldr	r2, [pc, #260]	; (8006974 <BLDC1_Init+0x180>)
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 0400 	mov.w	r4, #0
 8006878:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 800687c:	4a3d      	ldr	r2, [pc, #244]	; (8006974 <BLDC1_Init+0x180>)
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	f04f 0400 	mov.w	r4, #0
 8006886:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 800688a:	4a3a      	ldr	r2, [pc, #232]	; (8006974 <BLDC1_Init+0x180>)
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8006898:	4a36      	ldr	r2, [pc, #216]	; (8006974 <BLDC1_Init+0x180>)
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	/* Initialize Motor Position Trajectory related Parameter */
	BLDC1Handle.TrjCurPosition = 0;
 80068a6:	4a33      	ldr	r2, [pc, #204]	; (8006974 <BLDC1_Init+0x180>)
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 80068b4:	4a2f      	ldr	r2, [pc, #188]	; (8006974 <BLDC1_Init+0x180>)
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	f04f 0400 	mov.w	r4, #0
 80068be:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 80068c2:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <BLDC1_Init+0x180>)
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	f04f 0400 	mov.w	r4, #0
 80068cc:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 80068d0:	4a28      	ldr	r2, [pc, #160]	; (8006974 <BLDC1_Init+0x180>)
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	f04f 0400 	mov.w	r4, #0
 80068da:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <BLDC1_Init+0x180>)
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	/* Initialize Motor PID Control related Parameter */
	BLDC1Handle.Kp = 0;
 80068ec:	4a21      	ldr	r2, [pc, #132]	; (8006974 <BLDC1_Init+0x180>)
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	f04f 0400 	mov.w	r4, #0
 80068f6:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <BLDC1_Init+0x180>)
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	f04f 0400 	mov.w	r4, #0
 8006904:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8006908:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <BLDC1_Init+0x180>)
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	f04f 0400 	mov.w	r4, #0
 8006912:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8006916:	4a17      	ldr	r2, [pc, #92]	; (8006974 <BLDC1_Init+0x180>)
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	f04f 0400 	mov.w	r4, #0
 8006920:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <BLDC1_Init+0x180>)
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	f04f 0400 	mov.w	r4, #0
 800692e:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <BLDC1_Init+0x180>)
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <BLDC1_Init+0x180>)
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <BLDC1_Init+0x180>)
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	f04f 0400 	mov.w	r4, #0
 8006958:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 800695c:	4a05      	ldr	r2, [pc, #20]	; (8006974 <BLDC1_Init+0x180>)
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	BLDC_Init(&BLDC1Handle);
 800696a:	4802      	ldr	r0, [pc, #8]	; (8006974 <BLDC1_Init+0x180>)
 800696c:	f7fc f80a 	bl	8002984 <BLDC_Init>
}
 8006970:	bf00      	nop
 8006972:	bd98      	pop	{r3, r4, r7, pc}
 8006974:	200002a8 	.word	0x200002a8
 8006978:	404e0000 	.word	0x404e0000
 800697c:	40100000 	.word	0x40100000

08006980 <UART3_Init>:


void UART3_Init(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
	UART3Handle.Instance = USART3;
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <UART3_Init+0x48>)
 8006986:	4a11      	ldr	r2, [pc, #68]	; (80069cc <UART3_Init+0x4c>)
 8006988:	601a      	str	r2, [r3, #0]
	UART3Handle.Init.Mode = UART_MODE_TX;
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <UART3_Init+0x48>)
 800698c:	2208      	movs	r2, #8
 800698e:	615a      	str	r2, [r3, #20]
	UART3Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006990:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <UART3_Init+0x48>)
 8006992:	2200      	movs	r2, #0
 8006994:	61da      	str	r2, [r3, #28]
	UART3Handle.Init.BaudRate = USART_STD_BAUD_115200;
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <UART3_Init+0x48>)
 8006998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800699c:	605a      	str	r2, [r3, #4]
	UART3Handle.Init.Parity = UART_PARITY_NONE;
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <UART3_Init+0x48>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	611a      	str	r2, [r3, #16]
	UART3Handle.Init.StopBits = UART_STOPBITS_1;
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <UART3_Init+0x48>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	60da      	str	r2, [r3, #12]
	UART3Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <UART3_Init+0x48>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	619a      	str	r2, [r3, #24]
	UART3Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <UART3_Init+0x48>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
	UART3Handle.hdmatx = &DMA1Handle;
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <UART3_Init+0x48>)
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <UART3_Init+0x50>)
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30

	USART_Init(&UART3Handle);
 80069bc:	4802      	ldr	r0, [pc, #8]	; (80069c8 <UART3_Init+0x48>)
 80069be:	f7fb fe75 	bl	80026ac <USART_Init>
}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200003a0 	.word	0x200003a0
 80069cc:	40004800 	.word	0x40004800
 80069d0:	2000043c 	.word	0x2000043c

080069d4 <TIM6_Init>:


void TIM6_Init(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
	// Init TIM6 Base
	TIM6Handle.Instance = TIM6;
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <TIM6_Init+0x5c>)
 80069da:	4a16      	ldr	r2, [pc, #88]	; (8006a34 <TIM6_Init+0x60>)
 80069dc:	601a      	str	r2, [r3, #0]
	TIM6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <TIM6_Init+0x5c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	609a      	str	r2, [r3, #8]
	TIM6Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069e4:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <TIM6_Init+0x5c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
	TIM6Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80069ea:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <TIM6_Init+0x5c>)
 80069ec:	2280      	movs	r2, #128	; 0x80
 80069ee:	619a      	str	r2, [r3, #24]
	TIM6Handle.Init.Prescaler = (7200-1);	// 72MHz / 7200 = 10kHz
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <TIM6_Init+0x5c>)
 80069f2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80069f6:	605a      	str	r2, [r3, #4]
	TIM6Handle.Init.Period = (10-1);	// 10kHz / 10 = 1kHz
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <TIM6_Init+0x5c>)
 80069fa:	2209      	movs	r2, #9
 80069fc:	60da      	str	r2, [r3, #12]
	TIM6Handle.Init.RepetitionCounter = 0;
 80069fe:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <TIM6_Init+0x5c>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	615a      	str	r2, [r3, #20]
	TIM_Base_Init(&TIM6Handle);
 8006a04:	480a      	ldr	r0, [pc, #40]	; (8006a30 <TIM6_Init+0x5c>)
 8006a06:	f7fb fbc7 	bl	8002198 <TIM_Base_Init>

	// Enable TIM6 interrupt for Update Event
	TIM_ENABLE_IT(&TIM6Handle, TIM_IT_UPDATE);
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <TIM6_Init+0x5c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <TIM6_Init+0x5c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	60da      	str	r2, [r3, #12]

	// Enable TIM6 Counter
	TIM_ENABLE_COUNTER(&TIM6Handle);
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <TIM6_Init+0x5c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <TIM6_Init+0x5c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200004d4 	.word	0x200004d4
 8006a34:	40001000 	.word	0x40001000

08006a38 <DMA1_Init>:


void DMA1_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
	// 1. Enable the peripheral clock for the DMA1
	RCC_DMA1_CLK_ENABLE();
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <DMA1_Init+0x20>)
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	4a05      	ldr	r2, [pc, #20]	; (8006a58 <DMA1_Init+0x20>)
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	6153      	str	r3, [r2, #20]

	// 2. Configure the NVIC of DMA1 channel7
	NVIC_IRQConfig(IRQ_NO_DMA1_CHANNEL2, NVIC_PRIOR_15, ENABLE);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	210f      	movs	r1, #15
 8006a4c:	200c      	movs	r0, #12
 8006a4e:	f7fc ff1b 	bl	8003888 <NVIC_IRQConfig>
}
 8006a52:	bf00      	nop
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40021000 	.word	0x40021000

08006a5c <TFT1_Init>:


void TFT1_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	TFT1Handle.Instance = TFT1;
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <TFT1_Init+0x64>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
	TFT1Handle.ScreenMode = 'L';
 8006a66:	4b16      	ldr	r3, [pc, #88]	; (8006ac0 <TFT1_Init+0x64>)
 8006a68:	224c      	movs	r2, #76	; 0x4c
 8006a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TFT1Handle.XcharacterLimit = 40;
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <TFT1_Init+0x64>)
 8006a70:	2228      	movs	r2, #40	; 0x28
 8006a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	TFT1Handle.YcharacterLimit = 30;
 8006a76:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <TFT1_Init+0x64>)
 8006a78:	221e      	movs	r2, #30
 8006a7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	TFT1Handle.XcharacterLimit_Large = 26;
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <TFT1_Init+0x64>)
 8006a80:	221a      	movs	r2, #26
 8006a82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	TFT1Handle.YcharacterLimit_Large = 30;
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <TFT1_Init+0x64>)
 8006a88:	221e      	movs	r2, #30
 8006a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	TFT1Handle.nextline_flag = 0;
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <TFT1_Init+0x64>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	TFT1Handle.cursor_flag = 0;
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <TFT1_Init+0x64>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	TFT1Handle.underscore_flag = 0;
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <TFT1_Init+0x64>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	TFT1Handle.outline_flag = 0;
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <TFT1_Init+0x64>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	TFT1Handle.Kfont_type = 'M';
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <TFT1_Init+0x64>)
 8006ab0:	224d      	movs	r2, #77	; 0x4d
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	TFT_Init(&TFT1Handle);
 8006ab6:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <TFT1_Init+0x64>)
 8006ab8:	f7fd fd9e 	bl	80045f8 <TFT_Init>
}
 8006abc:	bf00      	nop
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	200003dc 	.word	0x200003dc

08006ac4 <TS1_Init>:


void TS1_Init(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
	TS1Handle.Instance = TS1;
 8006ac8:	4b18      	ldr	r3, [pc, #96]	; (8006b2c <TS1_Init+0x68>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
	TS1Handle.x_12bit = 0;
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <TS1_Init+0x68>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	851a      	strh	r2, [r3, #40]	; 0x28
	TS1Handle.y_12bit = 0;
 8006ad4:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <TS1_Init+0x68>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
	TS1Handle.x_touch = 0;
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <TS1_Init+0x68>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	859a      	strh	r2, [r3, #44]	; 0x2c
	TS1Handle.y_touch = 0;
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <TS1_Init+0x68>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
	TS1Handle.Init.x_touch_min = 250;
 8006ae6:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <TS1_Init+0x68>)
 8006ae8:	22fa      	movs	r2, #250	; 0xfa
 8006aea:	611a      	str	r2, [r3, #16]
	TS1Handle.Init.x_touch_max = 3700;
 8006aec:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <TS1_Init+0x68>)
 8006aee:	f640 6274 	movw	r2, #3700	; 0xe74
 8006af2:	615a      	str	r2, [r3, #20]
	TS1Handle.Init.y_touch_min = 350;
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <TS1_Init+0x68>)
 8006af6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006afa:	619a      	str	r2, [r3, #24]
	TS1Handle.Init.y_touch_max = 3750;
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <TS1_Init+0x68>)
 8006afe:	f640 62a6 	movw	r2, #3750	; 0xea6
 8006b02:	61da      	str	r2, [r3, #28]
	TS1Handle.Init.ADS7846_CMD_X = 0x00D0;
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <TS1_Init+0x68>)
 8006b06:	22d0      	movs	r2, #208	; 0xd0
 8006b08:	841a      	strh	r2, [r3, #32]
	TS1Handle.Init.ADS7846_CMD_Y = 0x0090;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <TS1_Init+0x68>)
 8006b0c:	2290      	movs	r2, #144	; 0x90
 8006b0e:	845a      	strh	r2, [r3, #34]	; 0x22

	TS_Init(&TS1Handle);
 8006b10:	4806      	ldr	r0, [pc, #24]	; (8006b2c <TS1_Init+0x68>)
 8006b12:	f7ff fca7 	bl	8006464 <TS_Init>

	SPI_ENABLE(&SPI2Handle);
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <TS1_Init+0x6c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <TS1_Init+0x6c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b24:	601a      	str	r2, [r3, #0]
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000278 	.word	0x20000278
 8006b30:	20000480 	.word	0x20000480

08006b34 <TIM_PeriodElapsedCallback>:
/********************************************************************************************************************
 *												  Callback Function													*
 ********************************************************************************************************************/

void TIM_PeriodElapsedCallback(TIM_HandleTypeDef *pTIMHandle)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	static int hallCnt20ms = 0;
	static int hallCnt20msOld = 0;;
	static int diffHallCnt20ms;

	/* TIM6 */
	if(pTIMHandle->Instance == TIM6)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <TIM_PeriodElapsedCallback+0x98>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d13d      	bne.n	8006bc2 <TIM_PeriodElapsedCallback+0x8e>
	{
		// Detect Key input
		Detect_KeyInput();
 8006b46:	f000 f937 	bl	8006db8 <Detect_KeyInput>


		// Detect Touch Screen input
		Detect_TouchScreenInput();
 8006b4a:	f000 f9ef 	bl	8006f2c <Detect_TouchScreenInput>


		// If Motor State is SPEED
		if(BLDC1Handle.MotorState == MOTOR_STATE_SPEED)
 8006b4e:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <TIM_PeriodElapsedCallback+0x9c>)
 8006b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d128      	bne.n	8006baa <TIM_PeriodElapsedCallback+0x76>
		{
			BLDC_SpeedMode();
 8006b58:	f000 f846 	bl	8006be8 <BLDC_SpeedMode>


			if(count0 >= 20)
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <TIM_PeriodElapsedCallback+0xa0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b13      	cmp	r3, #19
 8006b62:	dd1c      	ble.n	8006b9e <TIM_PeriodElapsedCallback+0x6a>
			{
				if(Recharge_flag == FLAG_RESET)
 8006b64:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <TIM_PeriodElapsedCallback+0xa4>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d115      	bne.n	8006b98 <TIM_PeriodElapsedCallback+0x64>
				{
					hallCnt20ms = BLDC1Handle.HallCount;
 8006b6c:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <TIM_PeriodElapsedCallback+0x9c>)
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <TIM_PeriodElapsedCallback+0xa8>)
 8006b72:	6013      	str	r3, [r2, #0]
					diffHallCnt20ms = hallCnt20ms - hallCnt20msOld;
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <TIM_PeriodElapsedCallback+0xa8>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <TIM_PeriodElapsedCallback+0xac>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <TIM_PeriodElapsedCallback+0xb0>)
 8006b80:	6013      	str	r3, [r2, #0]
					hallCnt20msOld = hallCnt20ms;
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <TIM_PeriodElapsedCallback+0xa8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <TIM_PeriodElapsedCallback+0xac>)
 8006b88:	6013      	str	r3, [r2, #0]

					if(diffHallCnt20ms == 0)
 8006b8a:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <TIM_PeriodElapsedCallback+0xb0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <TIM_PeriodElapsedCallback+0x64>
					{
						Recharge_flag = FLAG_SET;
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <TIM_PeriodElapsedCallback+0xa4>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
					}
				}

				count0 = 0;
 8006b98:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <TIM_PeriodElapsedCallback+0xa0>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
			}

			count0++;
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <TIM_PeriodElapsedCallback+0xa0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a0b      	ldr	r2, [pc, #44]	; (8006bd4 <TIM_PeriodElapsedCallback+0xa0>)
 8006ba6:	6013      	str	r3, [r2, #0]
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION) || (BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING) )
		{
			BLDC_PositionMode();
		}
	}
}
 8006ba8:	e00b      	b.n	8006bc2 <TIM_PeriodElapsedCallback+0x8e>
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION) || (BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING) )
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <TIM_PeriodElapsedCallback+0x9c>)
 8006bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d004      	beq.n	8006bbe <TIM_PeriodElapsedCallback+0x8a>
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <TIM_PeriodElapsedCallback+0x9c>)
 8006bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d101      	bne.n	8006bc2 <TIM_PeriodElapsedCallback+0x8e>
			BLDC_PositionMode();
 8006bbe:	f000 f887 	bl	8006cd0 <BLDC_PositionMode>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40001000 	.word	0x40001000
 8006bd0:	200002a8 	.word	0x200002a8
 8006bd4:	2000024c 	.word	0x2000024c
 8006bd8:	2000020d 	.word	0x2000020d
 8006bdc:	20000250 	.word	0x20000250
 8006be0:	20000254 	.word	0x20000254
 8006be4:	20000258 	.word	0x20000258

08006be8 <BLDC_SpeedMode>:


void BLDC_SpeedMode(void)
{
 8006be8:	b598      	push	{r3, r4, r7, lr}
 8006bea:	af00      	add	r7, sp, #0
	static int count1 = 0;


	if(count1 >= 100)
 8006bec:	4b2e      	ldr	r3, [pc, #184]	; (8006ca8 <BLDC_SpeedMode+0xc0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b63      	cmp	r3, #99	; 0x63
 8006bf2:	dd49      	ble.n	8006c88 <BLDC_SpeedMode+0xa0>
	{
		// 1. Calculate the Current Speed of BLDC Motor
		BLDC_Get_Speed(&BLDC1Handle, 0.1);
 8006bf4:	a328      	add	r3, pc, #160	; (adr r3, 8006c98 <BLDC_SpeedMode+0xb0>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	482c      	ldr	r0, [pc, #176]	; (8006cac <BLDC_SpeedMode+0xc4>)
 8006bfc:	f7fb ff66 	bl	8002acc <BLDC_Get_Speed>

		// 2. Set PWM duty cycle by Speed PID calculation
		BLDC_SpeedPID(&BLDC1Handle, 0.1);
 8006c00:	a325      	add	r3, pc, #148	; (adr r3, 8006c98 <BLDC_SpeedMode+0xb0>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	4829      	ldr	r0, [pc, #164]	; (8006cac <BLDC_SpeedMode+0xc4>)
 8006c08:	f7fc fae2 	bl	80031d0 <BLDC_SpeedPID>


		// 3. Calculate the Pixel corresponding to the Speed value */
		if( (GraphClear_flag == FLAG_RESET) || (GraphDraw_flag == FLAG_RESET) )
 8006c0c:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <BLDC_SpeedMode+0xc8>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <BLDC_SpeedMode+0x34>
 8006c14:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <BLDC_SpeedMode+0xcc>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d132      	bne.n	8006c82 <BLDC_SpeedMode+0x9a>
		{
			y = (uint16_t)( (-3.)/40.*BLDC1Handle.CurSpeed + 110 );		// y[pixel_y] = (-3)/40*x[rpm]+110
 8006c1c:	4b23      	ldr	r3, [pc, #140]	; (8006cac <BLDC_SpeedMode+0xc4>)
 8006c1e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8006c22:	a31f      	add	r3, pc, #124	; (adr r3, 8006ca0 <BLDC_SpeedMode+0xb8>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fc66 	bl	80004f8 <__aeabi_dmul>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4618      	mov	r0, r3
 8006c32:	4621      	mov	r1, r4
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	4b1f      	ldr	r3, [pc, #124]	; (8006cb8 <BLDC_SpeedMode+0xd0>)
 8006c3a:	f7f9 faa7 	bl	800018c <__adddf3>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	4618      	mov	r0, r3
 8006c44:	4621      	mov	r1, r4
 8006c46:	f7f9 ff2f 	bl	8000aa8 <__aeabi_d2uiz>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <BLDC_SpeedMode+0xd4>)
 8006c50:	801a      	strh	r2, [r3, #0]

			x_prv = x;
 8006c52:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <BLDC_SpeedMode+0xd8>)
 8006c54:	881a      	ldrh	r2, [r3, #0]
 8006c56:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <BLDC_SpeedMode+0xdc>)
 8006c58:	801a      	strh	r2, [r3, #0]
			y_prv = y;
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <BLDC_SpeedMode+0xd4>)
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <BLDC_SpeedMode+0xe0>)
 8006c60:	801a      	strh	r2, [r3, #0]

			x++;
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <BLDC_SpeedMode+0xd8>)
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <BLDC_SpeedMode+0xd8>)
 8006c6c:	801a      	strh	r2, [r3, #0]

			GraphDraw_flag = FLAG_SET;
 8006c6e:	4b11      	ldr	r3, [pc, #68]	; (8006cb4 <BLDC_SpeedMode+0xcc>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]

			if(x >= 250)
 8006c74:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <BLDC_SpeedMode+0xd8>)
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	2bf9      	cmp	r3, #249	; 0xf9
 8006c7a:	d902      	bls.n	8006c82 <BLDC_SpeedMode+0x9a>
			{
				GraphClear_flag = FLAG_SET;
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <BLDC_SpeedMode+0xc8>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
//				MotorSpeedStr[4] = (motorSpeedAbs % 10) + 48;
//				MotorSpeedStr[5] = '\n';
//
//				UART_Transmit_DMA(&UART3Handle, (uint8_t*)MotorSpeedStr, strlen((char*)MotorSpeedStr));

		count1 = 0;
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <BLDC_SpeedMode+0xc0>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
	}

	count1++;
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <BLDC_SpeedMode+0xc0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	4a06      	ldr	r2, [pc, #24]	; (8006ca8 <BLDC_SpeedMode+0xc0>)
 8006c90:	6013      	str	r3, [r2, #0]
}
 8006c92:	bf00      	nop
 8006c94:	bd98      	pop	{r3, r4, r7, pc}
 8006c96:	bf00      	nop
 8006c98:	9999999a 	.word	0x9999999a
 8006c9c:	3fb99999 	.word	0x3fb99999
 8006ca0:	33333333 	.word	0x33333333
 8006ca4:	bfb33333 	.word	0xbfb33333
 8006ca8:	2000025c 	.word	0x2000025c
 8006cac:	200002a8 	.word	0x200002a8
 8006cb0:	20000249 	.word	0x20000249
 8006cb4:	20000248 	.word	0x20000248
 8006cb8:	405b8000 	.word	0x405b8000
 8006cbc:	20000242 	.word	0x20000242
 8006cc0:	20000240 	.word	0x20000240
 8006cc4:	20000244 	.word	0x20000244
 8006cc8:	20000246 	.word	0x20000246
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <BLDC_PositionMode>:


void BLDC_PositionMode(void)
{
 8006cd0:	b598      	push	{r3, r4, r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
	static int count2 = 0;
	static int count3 = 0;


	/* Set PWM duty cycle by Position PID calculation */
	BLDC_PositionPID(&BLDC1Handle, 0.001);
 8006cd4:	a32c      	add	r3, pc, #176	; (adr r3, 8006d88 <BLDC_PositionMode+0xb8>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	482d      	ldr	r0, [pc, #180]	; (8006d90 <BLDC_PositionMode+0xc0>)
 8006cdc:	f7fc fadc 	bl	8003298 <BLDC_PositionPID>


	/* Calculate the Pixel corresponding to the Position value */
	if(count2 >= 10)
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <BLDC_PositionMode+0xc4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	dd41      	ble.n	8006d6c <BLDC_PositionMode+0x9c>
	{
		if( (GraphClear_flag == FLAG_RESET) || (GraphDraw_flag == FLAG_RESET) )
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <BLDC_PositionMode+0xc8>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <BLDC_PositionMode+0x28>
 8006cf0:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <BLDC_PositionMode+0xcc>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d136      	bne.n	8006d66 <BLDC_PositionMode+0x96>
		{
			y = (uint16_t)( (156. * BLDC1Handle.CurPosition) / BLDC1Handle.RefPosition );
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <BLDC_PositionMode+0xc0>)
 8006cfa:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <BLDC_PositionMode+0xd0>)
 8006d04:	f7f9 fbf8 	bl	80004f8 <__aeabi_dmul>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4b1f      	ldr	r3, [pc, #124]	; (8006d90 <BLDC_PositionMode+0xc0>)
 8006d12:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8006d16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	f7f9 fd15 	bl	800074c <__aeabi_ddiv>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	4618      	mov	r0, r3
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7f9 febd 	bl	8000aa8 <__aeabi_d2uiz>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <BLDC_PositionMode+0xd4>)
 8006d34:	801a      	strh	r2, [r3, #0]

			x_prv = x;
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <BLDC_PositionMode+0xd8>)
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <BLDC_PositionMode+0xdc>)
 8006d3c:	801a      	strh	r2, [r3, #0]
			y_prv = y;
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <BLDC_PositionMode+0xd4>)
 8006d40:	881a      	ldrh	r2, [r3, #0]
 8006d42:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <BLDC_PositionMode+0xe0>)
 8006d44:	801a      	strh	r2, [r3, #0]

			x++;
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <BLDC_PositionMode+0xd8>)
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <BLDC_PositionMode+0xd8>)
 8006d50:	801a      	strh	r2, [r3, #0]

			GraphDraw_flag = FLAG_SET;
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <BLDC_PositionMode+0xcc>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]

			if(x >= 250)
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <BLDC_PositionMode+0xd8>)
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	2bf9      	cmp	r3, #249	; 0xf9
 8006d5e:	d902      	bls.n	8006d66 <BLDC_PositionMode+0x96>
			{
				GraphClear_flag = FLAG_SET;
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <BLDC_PositionMode+0xc8>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	701a      	strb	r2, [r3, #0]
			}
		}

		count2 = 0;
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <BLDC_PositionMode+0xc4>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	601a      	str	r2, [r3, #0]
//
//		count3 = 0;
//	}


	count2++;
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <BLDC_PositionMode+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <BLDC_PositionMode+0xc4>)
 8006d74:	6013      	str	r3, [r2, #0]
	count3++;
 8006d76:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <BLDC_PositionMode+0xe4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <BLDC_PositionMode+0xe4>)
 8006d7e:	6013      	str	r3, [r2, #0]
}
 8006d80:	bf00      	nop
 8006d82:	bd98      	pop	{r3, r4, r7, pc}
 8006d84:	f3af 8000 	nop.w
 8006d88:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d8c:	3f50624d 	.word	0x3f50624d
 8006d90:	200002a8 	.word	0x200002a8
 8006d94:	20000260 	.word	0x20000260
 8006d98:	20000249 	.word	0x20000249
 8006d9c:	20000248 	.word	0x20000248
 8006da0:	40638000 	.word	0x40638000
 8006da4:	20000242 	.word	0x20000242
 8006da8:	20000240 	.word	0x20000240
 8006dac:	20000244 	.word	0x20000244
 8006db0:	20000246 	.word	0x20000246
 8006db4:	20000264 	.word	0x20000264

08006db8 <Detect_KeyInput>:


void Detect_KeyInput(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
	/* Mode Key Press Detection */
	if(KeyFlag_Mode == FLAG_SET)
 8006dbc:	4b4e      	ldr	r3, [pc, #312]	; (8006ef8 <Detect_KeyInput+0x140>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d124      	bne.n	8006e0e <Detect_KeyInput+0x56>
	{
		KeyTime_Mode++;
 8006dc4:	4b4d      	ldr	r3, [pc, #308]	; (8006efc <Detect_KeyInput+0x144>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	4a4c      	ldr	r2, [pc, #304]	; (8006efc <Detect_KeyInput+0x144>)
 8006dcc:	6013      	str	r3, [r2, #0]

		if(KeyTime_Mode >= 20)
 8006dce:	4b4b      	ldr	r3, [pc, #300]	; (8006efc <Detect_KeyInput+0x144>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b13      	cmp	r3, #19
 8006dd4:	f240 808b 	bls.w	8006eee <Detect_KeyInput+0x136>
		{
			/* Key is still pressed */
			if(READ_BIT(GPIOA->IDR, GPIO_PIN_0) == 0)
 8006dd8:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <Detect_KeyInput+0x148>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8084 	beq.w	8006eee <Detect_KeyInput+0x136>
			}

			/* Key is not pressed anymore */
			else
			{
				if(Mode_key >= 2)
 8006de6:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <Detect_KeyInput+0x14c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	dd03      	ble.n	8006df6 <Detect_KeyInput+0x3e>
				{
					Mode_key = 0;
 8006dee:	4b45      	ldr	r3, [pc, #276]	; (8006f04 <Detect_KeyInput+0x14c>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e004      	b.n	8006e00 <Detect_KeyInput+0x48>
				}
				else
				{
					Mode_key++;
 8006df6:	4b43      	ldr	r3, [pc, #268]	; (8006f04 <Detect_KeyInput+0x14c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	4a41      	ldr	r2, [pc, #260]	; (8006f04 <Detect_KeyInput+0x14c>)
 8006dfe:	6013      	str	r3, [r2, #0]
				}

				KeyFlag_Mode = FLAG_RESET;
 8006e00:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <Detect_KeyInput+0x140>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
				KeyTime_Mode = 0;
 8006e06:	4b3d      	ldr	r3, [pc, #244]	; (8006efc <Detect_KeyInput+0x144>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
				KeyFlag_Start = FLAG_RESET;
				KeyTime_Start = 0;
			}
		}
	}
}
 8006e0c:	e06f      	b.n	8006eee <Detect_KeyInput+0x136>
	else if(KeyFlag_Up == FLAG_SET)
 8006e0e:	4b3e      	ldr	r3, [pc, #248]	; (8006f08 <Detect_KeyInput+0x150>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d120      	bne.n	8006e58 <Detect_KeyInput+0xa0>
		KeyTime_Up++;
 8006e16:	4b3d      	ldr	r3, [pc, #244]	; (8006f0c <Detect_KeyInput+0x154>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <Detect_KeyInput+0x154>)
 8006e1e:	6013      	str	r3, [r2, #0]
		if(KeyTime_Up >= 200)
 8006e20:	4b3a      	ldr	r3, [pc, #232]	; (8006f0c <Detect_KeyInput+0x154>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2bc7      	cmp	r3, #199	; 0xc7
 8006e26:	d962      	bls.n	8006eee <Detect_KeyInput+0x136>
			if(READ_BIT(GPIOA->IDR, GPIO_PIN_1) == 0)
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <Detect_KeyInput+0x148>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <Detect_KeyInput+0x88>
				Up_key++;
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <Detect_KeyInput+0x158>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4a35      	ldr	r2, [pc, #212]	; (8006f10 <Detect_KeyInput+0x158>)
 8006e3c:	6013      	str	r3, [r2, #0]
}
 8006e3e:	e056      	b.n	8006eee <Detect_KeyInput+0x136>
				Up_key++;
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <Detect_KeyInput+0x158>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	4a32      	ldr	r2, [pc, #200]	; (8006f10 <Detect_KeyInput+0x158>)
 8006e48:	6013      	str	r3, [r2, #0]
				KeyFlag_Up = FLAG_RESET;
 8006e4a:	4b2f      	ldr	r3, [pc, #188]	; (8006f08 <Detect_KeyInput+0x150>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
				KeyTime_Up = 0;
 8006e50:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <Detect_KeyInput+0x154>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	e04a      	b.n	8006eee <Detect_KeyInput+0x136>
	else if(KeyFlag_Down == FLAG_SET)
 8006e58:	4b2e      	ldr	r3, [pc, #184]	; (8006f14 <Detect_KeyInput+0x15c>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d120      	bne.n	8006ea2 <Detect_KeyInput+0xea>
		KeyTime_Down++;
 8006e60:	4b2d      	ldr	r3, [pc, #180]	; (8006f18 <Detect_KeyInput+0x160>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <Detect_KeyInput+0x160>)
 8006e68:	6013      	str	r3, [r2, #0]
		if(KeyTime_Down >= 200)
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <Detect_KeyInput+0x160>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2bc7      	cmp	r3, #199	; 0xc7
 8006e70:	d93d      	bls.n	8006eee <Detect_KeyInput+0x136>
			if(READ_BIT(GPIOA->IDR, GPIO_PIN_2) == 0)
 8006e72:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <Detect_KeyInput+0x148>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <Detect_KeyInput+0xd2>
				Down_key++;
 8006e7e:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <Detect_KeyInput+0x164>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	4a25      	ldr	r2, [pc, #148]	; (8006f1c <Detect_KeyInput+0x164>)
 8006e86:	6013      	str	r3, [r2, #0]
}
 8006e88:	e031      	b.n	8006eee <Detect_KeyInput+0x136>
				Down_key++;
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <Detect_KeyInput+0x164>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <Detect_KeyInput+0x164>)
 8006e92:	6013      	str	r3, [r2, #0]
				KeyFlag_Down = FLAG_RESET;
 8006e94:	4b1f      	ldr	r3, [pc, #124]	; (8006f14 <Detect_KeyInput+0x15c>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
				KeyTime_Down = 0;
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <Detect_KeyInput+0x160>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	e025      	b.n	8006eee <Detect_KeyInput+0x136>
	else if(KeyFlag_Start == FLAG_SET)
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <Detect_KeyInput+0x168>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d121      	bne.n	8006eee <Detect_KeyInput+0x136>
		KeyTime_Start++;
 8006eaa:	4b1e      	ldr	r3, [pc, #120]	; (8006f24 <Detect_KeyInput+0x16c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <Detect_KeyInput+0x16c>)
 8006eb2:	6013      	str	r3, [r2, #0]
		if(KeyTime_Start >= 100)
 8006eb4:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <Detect_KeyInput+0x16c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b63      	cmp	r3, #99	; 0x63
 8006eba:	d918      	bls.n	8006eee <Detect_KeyInput+0x136>
			if(READ_BIT(GPIOA->IDR, GPIO_PIN_3) == 0)
 8006ebc:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <Detect_KeyInput+0x148>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d012      	beq.n	8006eee <Detect_KeyInput+0x136>
				if(Start_key >= 1)
 8006ec8:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <Detect_KeyInput+0x170>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd03      	ble.n	8006ed8 <Detect_KeyInput+0x120>
					Start_key = 0;
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <Detect_KeyInput+0x170>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e004      	b.n	8006ee2 <Detect_KeyInput+0x12a>
					Start_key++;
 8006ed8:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <Detect_KeyInput+0x170>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	4a12      	ldr	r2, [pc, #72]	; (8006f28 <Detect_KeyInput+0x170>)
 8006ee0:	6013      	str	r3, [r2, #0]
				KeyFlag_Start = FLAG_RESET;
 8006ee2:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <Detect_KeyInput+0x168>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
				KeyTime_Start = 0;
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <Detect_KeyInput+0x16c>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000220 	.word	0x20000220
 8006efc:	20000224 	.word	0x20000224
 8006f00:	40010800 	.word	0x40010800
 8006f04:	20000210 	.word	0x20000210
 8006f08:	20000221 	.word	0x20000221
 8006f0c:	20000228 	.word	0x20000228
 8006f10:	20000214 	.word	0x20000214
 8006f14:	20000222 	.word	0x20000222
 8006f18:	2000022c 	.word	0x2000022c
 8006f1c:	20000218 	.word	0x20000218
 8006f20:	20000223 	.word	0x20000223
 8006f24:	20000230 	.word	0x20000230
 8006f28:	2000021c 	.word	0x2000021c

08006f2c <Detect_TouchScreenInput>:


void Detect_TouchScreenInput(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0

	static uint16_t x_touch_prv = 0;
	static uint16_t y_touch_prv = 0;
	static uint8_t TouchLog_flag = FLAG_RESET;

	if(READ_BIT(GPIOB->IDR, GPIO_PIN_4) == 0)
 8006f30:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <Detect_TouchScreenInput+0x1a4>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d137      	bne.n	8006fac <Detect_TouchScreenInput+0x80>
	{
		TouchTime++;
 8006f3c:	4b65      	ldr	r3, [pc, #404]	; (80070d4 <Detect_TouchScreenInput+0x1a8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a64      	ldr	r2, [pc, #400]	; (80070d4 <Detect_TouchScreenInput+0x1a8>)
 8006f44:	6013      	str	r3, [r2, #0]

		if(TouchTime >= 200)
 8006f46:	4b63      	ldr	r3, [pc, #396]	; (80070d4 <Detect_TouchScreenInput+0x1a8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2bc7      	cmp	r3, #199	; 0xc7
 8006f4c:	d934      	bls.n	8006fb8 <Detect_TouchScreenInput+0x8c>
		{
			if(TouchDetection_flag == FLAG_RESET)
 8006f4e:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <Detect_TouchScreenInput+0x1ac>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d130      	bne.n	8006fb8 <Detect_TouchScreenInput+0x8c>
			{
				if( (TS1Handle.x_touch != x_touch_prv) && (TS1Handle.y_touch != y_touch_prv) )
 8006f56:	4b61      	ldr	r3, [pc, #388]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f5a:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <Detect_TouchScreenInput+0x1b4>)
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d020      	beq.n	8006fa4 <Detect_TouchScreenInput+0x78>
 8006f62:	4b5e      	ldr	r3, [pc, #376]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f64:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8006f66:	4b5f      	ldr	r3, [pc, #380]	; (80070e4 <Detect_TouchScreenInput+0x1b8>)
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d01a      	beq.n	8006fa4 <Detect_TouchScreenInput+0x78>
				{
					if( (TS1Handle.x_touch != 0) && (TS1Handle.y_touch != 0) )
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d016      	beq.n	8006fa4 <Detect_TouchScreenInput+0x78>
 8006f76:	4b59      	ldr	r3, [pc, #356]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d012      	beq.n	8006fa4 <Detect_TouchScreenInput+0x78>
					{
						xTouch_log = TS1Handle.x_touch;
 8006f7e:	4b57      	ldr	r3, [pc, #348]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <Detect_TouchScreenInput+0x1bc>)
 8006f84:	801a      	strh	r2, [r3, #0]
						yTouch_log = TS1Handle.y_touch;
 8006f86:	4b55      	ldr	r3, [pc, #340]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f88:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8006f8a:	4b58      	ldr	r3, [pc, #352]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 8006f8c:	801a      	strh	r2, [r3, #0]

						TouchLog_flag = FLAG_SET;
 8006f8e:	4b58      	ldr	r3, [pc, #352]	; (80070f0 <Detect_TouchScreenInput+0x1c4>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]

						x_touch_prv = TS1Handle.x_touch;
 8006f94:	4b51      	ldr	r3, [pc, #324]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f98:	4b51      	ldr	r3, [pc, #324]	; (80070e0 <Detect_TouchScreenInput+0x1b4>)
 8006f9a:	801a      	strh	r2, [r3, #0]
						y_touch_prv = TS1Handle.y_touch;
 8006f9c:	4b4f      	ldr	r3, [pc, #316]	; (80070dc <Detect_TouchScreenInput+0x1b0>)
 8006f9e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8006fa0:	4b50      	ldr	r3, [pc, #320]	; (80070e4 <Detect_TouchScreenInput+0x1b8>)
 8006fa2:	801a      	strh	r2, [r3, #0]
					}
				}

				TouchDetection_flag = FLAG_SET;
 8006fa4:	4b4c      	ldr	r3, [pc, #304]	; (80070d8 <Detect_TouchScreenInput+0x1ac>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e005      	b.n	8006fb8 <Detect_TouchScreenInput+0x8c>
		}
	}

	else
	{
		TouchTime = 0;
 8006fac:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <Detect_TouchScreenInput+0x1a8>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
		TouchDetection_flag = FLAG_RESET;
 8006fb2:	4b49      	ldr	r3, [pc, #292]	; (80070d8 <Detect_TouchScreenInput+0x1ac>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]
	}


	if(TouchLog_flag == FLAG_SET)
 8006fb8:	4b4d      	ldr	r3, [pc, #308]	; (80070f0 <Detect_TouchScreenInput+0x1c4>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	f040 8082 	bne.w	80070c6 <Detect_TouchScreenInput+0x19a>
	{
		switch (State)
 8006fc2:	4b4c      	ldr	r3, [pc, #304]	; (80070f4 <Detect_TouchScreenInput+0x1c8>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d877      	bhi.n	80070ba <Detect_TouchScreenInput+0x18e>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <Detect_TouchScreenInput+0xa4>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	080070bb 	.word	0x080070bb
 8006fd8:	080070bb 	.word	0x080070bb
 8006fdc:	080070bb 	.word	0x080070bb
		{
			case STATE_MENU :
			{
				if( (xTouch_log > 40) && (xTouch_log < 280) )
 8006fe0:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <Detect_TouchScreenInput+0x1bc>)
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	2b28      	cmp	r3, #40	; 0x28
 8006fe6:	d96a      	bls.n	80070be <Detect_TouchScreenInput+0x192>
 8006fe8:	4b3f      	ldr	r3, [pc, #252]	; (80070e8 <Detect_TouchScreenInput+0x1bc>)
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006ff0:	d265      	bcs.n	80070be <Detect_TouchScreenInput+0x192>
				{
					// Option : Speed Mode
					if( (yTouch_log > 95) && (yTouch_log < 140) )
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	2b5f      	cmp	r3, #95	; 0x5f
 8006ff8:	d91b      	bls.n	8007032 <Detect_TouchScreenInput+0x106>
 8006ffa:	4b3c      	ldr	r3, [pc, #240]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	2b8b      	cmp	r3, #139	; 0x8b
 8007000:	d817      	bhi.n	8007032 <Detect_TouchScreenInput+0x106>
					{
						if(State_option == STATE_SPEED)						Start_key = 1;
 8007002:	4b3d      	ldr	r3, [pc, #244]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d103      	bne.n	8007012 <Detect_TouchScreenInput+0xe6>
 800700a:	4b3c      	ldr	r3, [pc, #240]	; (80070fc <Detect_TouchScreenInput+0x1d0>)
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e04f      	b.n	80070b2 <Detect_TouchScreenInput+0x186>
						else if(State_option == STATE_POSITION)				Mode_key = 0;
 8007012:	4b39      	ldr	r3, [pc, #228]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <Detect_TouchScreenInput+0xf6>
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
						if(State_option == STATE_SPEED)						Start_key = 1;
 8007020:	e047      	b.n	80070b2 <Detect_TouchScreenInput+0x186>
						else if(State_option == STATE_POSITION_TRACKING)	Mode_key = 0;
 8007022:	4b35      	ldr	r3, [pc, #212]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d143      	bne.n	80070b2 <Detect_TouchScreenInput+0x186>
 800702a:	4b35      	ldr	r3, [pc, #212]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
						if(State_option == STATE_SPEED)						Start_key = 1;
 8007030:	e03f      	b.n	80070b2 <Detect_TouchScreenInput+0x186>
					}

					// Option : Position Mode
					else if( (yTouch_log > 140) && (yTouch_log < 179) )
 8007032:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	2b8c      	cmp	r3, #140	; 0x8c
 8007038:	d91b      	bls.n	8007072 <Detect_TouchScreenInput+0x146>
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	2bb2      	cmp	r3, #178	; 0xb2
 8007040:	d817      	bhi.n	8007072 <Detect_TouchScreenInput+0x146>
					{
						if(State_option == STATE_POSITION)					Start_key = 1;
 8007042:	4b2d      	ldr	r3, [pc, #180]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <Detect_TouchScreenInput+0x126>
 800704a:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <Detect_TouchScreenInput+0x1d0>)
 800704c:	2201      	movs	r2, #1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e031      	b.n	80070b6 <Detect_TouchScreenInput+0x18a>
						else if(State_option == STATE_SPEED)				Mode_key = 1;
 8007052:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d103      	bne.n	8007062 <Detect_TouchScreenInput+0x136>
 800705a:	4b29      	ldr	r3, [pc, #164]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]
						if(State_option == STATE_POSITION)					Start_key = 1;
 8007060:	e029      	b.n	80070b6 <Detect_TouchScreenInput+0x18a>
						else if(State_option == STATE_POSITION_TRACKING)	Mode_key = 1;
 8007062:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b03      	cmp	r3, #3
 8007068:	d125      	bne.n	80070b6 <Detect_TouchScreenInput+0x18a>
 800706a:	4b25      	ldr	r3, [pc, #148]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
						if(State_option == STATE_POSITION)					Start_key = 1;
 8007070:	e021      	b.n	80070b6 <Detect_TouchScreenInput+0x18a>
					}

					// Option : Position Tracking Mode
					else if( (yTouch_log > 179) && (yTouch_log < 220) )
 8007072:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	2bb3      	cmp	r3, #179	; 0xb3
 8007078:	d921      	bls.n	80070be <Detect_TouchScreenInput+0x192>
 800707a:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <Detect_TouchScreenInput+0x1c0>)
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2bdb      	cmp	r3, #219	; 0xdb
 8007080:	d81d      	bhi.n	80070be <Detect_TouchScreenInput+0x192>
					{
						if(State_option == STATE_POSITION_TRACKING)			Start_key = 1;
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d103      	bne.n	8007092 <Detect_TouchScreenInput+0x166>
 800708a:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <Detect_TouchScreenInput+0x1d0>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
						else if(State_option == STATE_SPEED)				Mode_key = 2;
						else if(State_option == STATE_POSITION)				Mode_key = 2;
					}
				}

				break;
 8007090:	e015      	b.n	80070be <Detect_TouchScreenInput+0x192>
						else if(State_option == STATE_SPEED)				Mode_key = 2;
 8007092:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d103      	bne.n	80070a2 <Detect_TouchScreenInput+0x176>
 800709a:	4b19      	ldr	r3, [pc, #100]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 800709c:	2202      	movs	r2, #2
 800709e:	601a      	str	r2, [r3, #0]
				break;
 80070a0:	e00d      	b.n	80070be <Detect_TouchScreenInput+0x192>
						else if(State_option == STATE_POSITION)				Mode_key = 2;
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <Detect_TouchScreenInput+0x1cc>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d109      	bne.n	80070be <Detect_TouchScreenInput+0x192>
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <Detect_TouchScreenInput+0x1d4>)
 80070ac:	2202      	movs	r2, #2
 80070ae:	601a      	str	r2, [r3, #0]
				break;
 80070b0:	e005      	b.n	80070be <Detect_TouchScreenInput+0x192>
						if(State_option == STATE_SPEED)						Start_key = 1;
 80070b2:	bf00      	nop
 80070b4:	e003      	b.n	80070be <Detect_TouchScreenInput+0x192>
						if(State_option == STATE_POSITION)					Start_key = 1;
 80070b6:	bf00      	nop
				break;
 80070b8:	e001      	b.n	80070be <Detect_TouchScreenInput+0x192>
				break;
			}
			default :
			{

				break;
 80070ba:	bf00      	nop
 80070bc:	e000      	b.n	80070c0 <Detect_TouchScreenInput+0x194>
				break;
 80070be:	bf00      	nop
			}
		}

		TouchLog_flag = FLAG_RESET;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <Detect_TouchScreenInput+0x1c4>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
//			ySamples[TouchTime] = TS1Handle.y_touch;
//
//			TouchTime++;
//		}

}
 80070c6:	bf00      	nop
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40010c00 	.word	0x40010c00
 80070d4:	20000238 	.word	0x20000238
 80070d8:	20000234 	.word	0x20000234
 80070dc:	20000278 	.word	0x20000278
 80070e0:	20000268 	.word	0x20000268
 80070e4:	2000026a 	.word	0x2000026a
 80070e8:	2000023c 	.word	0x2000023c
 80070ec:	2000023e 	.word	0x2000023e
 80070f0:	2000026c 	.word	0x2000026c
 80070f4:	2000020c 	.word	0x2000020c
 80070f8:	20000008 	.word	0x20000008
 80070fc:	2000021c 	.word	0x2000021c
 8007100:	20000210 	.word	0x20000210

08007104 <EXTI_Callback>:

void EXTI_Callback(uint32_t GPIO_Pin)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	if(GPIO_Pin & BLDC1Handle.Init.GPIO_Pins_Hall)
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <EXTI_Callback+0x74>)
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <EXTI_Callback+0x36>
	{
		// 1. Detect current HallPhase location
		BLDC1Handle.HallPhase = (READ_BIT(GPIOA->IDR, BLDC1Handle.Init.GPIO_Pins_Hall)) >> 5U;
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <EXTI_Callback+0x78>)
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <EXTI_Callback+0x74>)
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4013      	ands	r3, r2
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	b29a      	uxth	r2, r3
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <EXTI_Callback+0x74>)
 8007128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		// 2. Get current position value
		BLDC_Get_Position(&BLDC1Handle);
 800712c:	4812      	ldr	r0, [pc, #72]	; (8007178 <EXTI_Callback+0x74>)
 800712e:	f7fb fd1b 	bl	8002b68 <BLDC_Get_Position>

		// 3. Drive BLDC motor according to HallPhase location
		BLDC_Drive(&BLDC1Handle);
 8007132:	4811      	ldr	r0, [pc, #68]	; (8007178 <EXTI_Callback+0x74>)
 8007134:	f7fb fc32 	bl	800299c <BLDC_Drive>
		KeyFlag_Start = FLAG_SET;
	}


	UNUSED(GPIO_Pin);
}
 8007138:	e01a      	b.n	8007170 <EXTI_Callback+0x6c>
	else if(GPIO_Pin == GPIO_PIN_0)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d103      	bne.n	8007148 <EXTI_Callback+0x44>
		KeyFlag_Mode = FLAG_SET;
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <EXTI_Callback+0x7c>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
}
 8007146:	e013      	b.n	8007170 <EXTI_Callback+0x6c>
	else if(GPIO_Pin == GPIO_PIN_1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d103      	bne.n	8007156 <EXTI_Callback+0x52>
		KeyFlag_Up = FLAG_SET;
 800714e:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <EXTI_Callback+0x80>)
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
}
 8007154:	e00c      	b.n	8007170 <EXTI_Callback+0x6c>
	else if(GPIO_Pin == GPIO_PIN_2)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d103      	bne.n	8007164 <EXTI_Callback+0x60>
		KeyFlag_Down = FLAG_SET;
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <EXTI_Callback+0x84>)
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
}
 8007162:	e005      	b.n	8007170 <EXTI_Callback+0x6c>
	else if(GPIO_Pin == GPIO_PIN_3)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b08      	cmp	r3, #8
 8007168:	d102      	bne.n	8007170 <EXTI_Callback+0x6c>
		KeyFlag_Start = FLAG_SET;
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <EXTI_Callback+0x88>)
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	200002a8 	.word	0x200002a8
 800717c:	40010800 	.word	0x40010800
 8007180:	20000220 	.word	0x20000220
 8007184:	20000221 	.word	0x20000221
 8007188:	20000222 	.word	0x20000222
 800718c:	20000223 	.word	0x20000223

08007190 <State_Menu>:
/********************************************************************************************************************
 *							Group of functions which belong to main function for increasing Readability				*
 ********************************************************************************************************************/

void State_Menu(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af02      	add	r7, sp, #8
	// 1. Reset all variables (structure members, global variables)
	Reset_All_Variables();
 8007196:	f001 f87d 	bl	8008294 <Reset_All_Variables>

	// 2. Clear Screen of TFT LCD
	TFT_Clear_Screen(&TFT1Handle);
 800719a:	4899      	ldr	r0, [pc, #612]	; (8007400 <State_Menu+0x270>)
 800719c:	f7fd fc36 	bl	8004a0c <TFT_Clear_Screen>
	Delay_ms(100);
 80071a0:	2064      	movs	r0, #100	; 0x64
 80071a2:	f7fc fd13 	bl	8003bcc <Delay_ms>

	// 3. Draw Boundary outlines of TFT LCD
	TFT_Line(&TFT1Handle, 0, 0, 319, 0, Blue);
 80071a6:	231f      	movs	r3, #31
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	f240 133f 	movw	r3, #319	; 0x13f
 80071b2:	2200      	movs	r2, #0
 80071b4:	2100      	movs	r1, #0
 80071b6:	4892      	ldr	r0, [pc, #584]	; (8007400 <State_Menu+0x270>)
 80071b8:	f7ff f826 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 0, 1, 319, 1, Blue);
 80071bc:	231f      	movs	r3, #31
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	2301      	movs	r3, #1
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	f240 133f 	movw	r3, #319	; 0x13f
 80071c8:	2201      	movs	r2, #1
 80071ca:	2100      	movs	r1, #0
 80071cc:	488c      	ldr	r0, [pc, #560]	; (8007400 <State_Menu+0x270>)
 80071ce:	f7ff f81b 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 0, 0, 0, 239, Blue);
 80071d2:	231f      	movs	r3, #31
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	23ef      	movs	r3, #239	; 0xef
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	4887      	ldr	r0, [pc, #540]	; (8007400 <State_Menu+0x270>)
 80071e2:	f7ff f811 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 1, 0, 1, 239, Blue);
 80071e6:	231f      	movs	r3, #31
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	23ef      	movs	r3, #239	; 0xef
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2301      	movs	r3, #1
 80071f0:	2200      	movs	r2, #0
 80071f2:	2101      	movs	r1, #1
 80071f4:	4882      	ldr	r0, [pc, #520]	; (8007400 <State_Menu+0x270>)
 80071f6:	f7ff f807 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 318, 0, 318, 239, Blue);
 80071fa:	231f      	movs	r3, #31
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	23ef      	movs	r3, #239	; 0xef
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007206:	2200      	movs	r2, #0
 8007208:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800720c:	487c      	ldr	r0, [pc, #496]	; (8007400 <State_Menu+0x270>)
 800720e:	f7fe fffb 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 319, 0, 319, 239, Blue);
 8007212:	231f      	movs	r3, #31
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	23ef      	movs	r3, #239	; 0xef
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	f240 133f 	movw	r3, #319	; 0x13f
 800721e:	2200      	movs	r2, #0
 8007220:	f240 113f 	movw	r1, #319	; 0x13f
 8007224:	4876      	ldr	r0, [pc, #472]	; (8007400 <State_Menu+0x270>)
 8007226:	f7fe ffef 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 0, 238, 319, 238, Blue);
 800722a:	231f      	movs	r3, #31
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	23ee      	movs	r3, #238	; 0xee
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	f240 133f 	movw	r3, #319	; 0x13f
 8007236:	22ee      	movs	r2, #238	; 0xee
 8007238:	2100      	movs	r1, #0
 800723a:	4871      	ldr	r0, [pc, #452]	; (8007400 <State_Menu+0x270>)
 800723c:	f7fe ffe4 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 0, 239, 319, 239, Blue);
 8007240:	231f      	movs	r3, #31
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	23ef      	movs	r3, #239	; 0xef
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	f240 133f 	movw	r3, #319	; 0x13f
 800724c:	22ef      	movs	r2, #239	; 0xef
 800724e:	2100      	movs	r1, #0
 8007250:	486b      	ldr	r0, [pc, #428]	; (8007400 <State_Menu+0x270>)
 8007252:	f7fe ffd9 	bl	8006208 <TFT_Line>

	// 4. Draw Mode option Box of TFT LCD
	TFT_Line(&TFT1Handle, 40, 95, 280, 95, Blue);
 8007256:	231f      	movs	r3, #31
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	235f      	movs	r3, #95	; 0x5f
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8007262:	225f      	movs	r2, #95	; 0x5f
 8007264:	2128      	movs	r1, #40	; 0x28
 8007266:	4866      	ldr	r0, [pc, #408]	; (8007400 <State_Menu+0x270>)
 8007268:	f7fe ffce 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 40, 95, 40, 220, Blue);
 800726c:	231f      	movs	r3, #31
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	23dc      	movs	r3, #220	; 0xdc
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2328      	movs	r3, #40	; 0x28
 8007276:	225f      	movs	r2, #95	; 0x5f
 8007278:	2128      	movs	r1, #40	; 0x28
 800727a:	4861      	ldr	r0, [pc, #388]	; (8007400 <State_Menu+0x270>)
 800727c:	f7fe ffc4 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 280, 95, 280, 220, Blue);
 8007280:	231f      	movs	r3, #31
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	23dc      	movs	r3, #220	; 0xdc
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	f44f 738c 	mov.w	r3, #280	; 0x118
 800728c:	225f      	movs	r2, #95	; 0x5f
 800728e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007292:	485b      	ldr	r0, [pc, #364]	; (8007400 <State_Menu+0x270>)
 8007294:	f7fe ffb8 	bl	8006208 <TFT_Line>
	TFT_Line(&TFT1Handle, 40, 220, 280, 220, Blue);
 8007298:	231f      	movs	r3, #31
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	23dc      	movs	r3, #220	; 0xdc
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80072a4:	22dc      	movs	r2, #220	; 0xdc
 80072a6:	2128      	movs	r1, #40	; 0x28
 80072a8:	4855      	ldr	r0, [pc, #340]	; (8007400 <State_Menu+0x270>)
 80072aa:	f7fe ffad 	bl	8006208 <TFT_Line>

	// 5. Print String
	TFT_String_Large(&TFT1Handle, 6, 5, White, Magenta, (uint8_t*)"  Select mode  ");
 80072ae:	4b55      	ldr	r3, [pc, #340]	; (8007404 <State_Menu+0x274>)
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072bc:	2205      	movs	r2, #5
 80072be:	2106      	movs	r1, #6
 80072c0:	484f      	ldr	r0, [pc, #316]	; (8007400 <State_Menu+0x270>)
 80072c2:	f7fd fd17 	bl	8004cf4 <TFT_String_Large>
	Delay_ms(10);
 80072c6:	200a      	movs	r0, #10
 80072c8:	f7fc fc80 	bl	8003bcc <Delay_ms>


	while(1)
	{
		/* Get Touch Screen input */
		TS_Input(&TS1Handle);
 80072cc:	484e      	ldr	r0, [pc, #312]	; (8007408 <State_Menu+0x278>)
 80072ce:	f7ff f913 	bl	80064f8 <TS_Input>


		/* Select BLDC Motor Operation Mode */
		switch (Mode_key)
 80072d2:	4b4e      	ldr	r3, [pc, #312]	; (800740c <State_Menu+0x27c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d02a      	beq.n	8007330 <State_Menu+0x1a0>
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d04e      	beq.n	800737c <State_Menu+0x1ec>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d000      	beq.n	80072e4 <State_Menu+0x154>
				break;
			}

			default :
			{
				break;
 80072e2:	e071      	b.n	80073c8 <State_Menu+0x238>
				TFT_String(&TFT1Handle, 7, 14, White, Magenta, (uint8_t*)"        Speed Mode        ");
 80072e4:	4b4a      	ldr	r3, [pc, #296]	; (8007410 <State_Menu+0x280>)
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072f2:	220e      	movs	r2, #14
 80072f4:	2107      	movs	r1, #7
 80072f6:	4842      	ldr	r0, [pc, #264]	; (8007400 <State_Menu+0x270>)
 80072f8:	f7fd fcc5 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 19, White, Black, (uint8_t*)"       Position Mode      ");
 80072fc:	4b45      	ldr	r3, [pc, #276]	; (8007414 <State_Menu+0x284>)
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	2300      	movs	r3, #0
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007308:	2213      	movs	r2, #19
 800730a:	2107      	movs	r1, #7
 800730c:	483c      	ldr	r0, [pc, #240]	; (8007400 <State_Menu+0x270>)
 800730e:	f7fd fcba 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 24, White, Black, (uint8_t*)"  Position Tracking Mode  ");
 8007312:	4b41      	ldr	r3, [pc, #260]	; (8007418 <State_Menu+0x288>)
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800731e:	2218      	movs	r2, #24
 8007320:	2107      	movs	r1, #7
 8007322:	4837      	ldr	r0, [pc, #220]	; (8007400 <State_Menu+0x270>)
 8007324:	f7fd fcaf 	bl	8004c86 <TFT_String>
				State_option = STATE_SPEED;
 8007328:	4b3c      	ldr	r3, [pc, #240]	; (800741c <State_Menu+0x28c>)
 800732a:	2201      	movs	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
				break;
 800732e:	e04b      	b.n	80073c8 <State_Menu+0x238>
				TFT_String(&TFT1Handle, 7, 14, White, Black, (uint8_t*)"        Speed Mode        ");
 8007330:	4b37      	ldr	r3, [pc, #220]	; (8007410 <State_Menu+0x280>)
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	2300      	movs	r3, #0
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800733c:	220e      	movs	r2, #14
 800733e:	2107      	movs	r1, #7
 8007340:	482f      	ldr	r0, [pc, #188]	; (8007400 <State_Menu+0x270>)
 8007342:	f7fd fca0 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 19, White, Magenta, (uint8_t*)"       Position Mode      ");
 8007346:	4b33      	ldr	r3, [pc, #204]	; (8007414 <State_Menu+0x284>)
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007354:	2213      	movs	r2, #19
 8007356:	2107      	movs	r1, #7
 8007358:	4829      	ldr	r0, [pc, #164]	; (8007400 <State_Menu+0x270>)
 800735a:	f7fd fc94 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 24, White, Black, (uint8_t*)"  Position Tracking Mode  ");
 800735e:	4b2e      	ldr	r3, [pc, #184]	; (8007418 <State_Menu+0x288>)
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	2300      	movs	r3, #0
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800736a:	2218      	movs	r2, #24
 800736c:	2107      	movs	r1, #7
 800736e:	4824      	ldr	r0, [pc, #144]	; (8007400 <State_Menu+0x270>)
 8007370:	f7fd fc89 	bl	8004c86 <TFT_String>
				State_option = STATE_POSITION;
 8007374:	4b29      	ldr	r3, [pc, #164]	; (800741c <State_Menu+0x28c>)
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
				break;
 800737a:	e025      	b.n	80073c8 <State_Menu+0x238>
				TFT_String(&TFT1Handle, 7, 14, White, Black, (uint8_t*)"        Speed Mode        ");
 800737c:	4b24      	ldr	r3, [pc, #144]	; (8007410 <State_Menu+0x280>)
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	2300      	movs	r3, #0
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007388:	220e      	movs	r2, #14
 800738a:	2107      	movs	r1, #7
 800738c:	481c      	ldr	r0, [pc, #112]	; (8007400 <State_Menu+0x270>)
 800738e:	f7fd fc7a 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 19, White, Black, (uint8_t*)"       Position Mode      ");
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <State_Menu+0x284>)
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	2300      	movs	r3, #0
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800739e:	2213      	movs	r2, #19
 80073a0:	2107      	movs	r1, #7
 80073a2:	4817      	ldr	r0, [pc, #92]	; (8007400 <State_Menu+0x270>)
 80073a4:	f7fd fc6f 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 7, 24, White, Magenta, (uint8_t*)"  Position Tracking Mode  ");
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <State_Menu+0x288>)
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073b6:	2218      	movs	r2, #24
 80073b8:	2107      	movs	r1, #7
 80073ba:	4811      	ldr	r0, [pc, #68]	; (8007400 <State_Menu+0x270>)
 80073bc:	f7fd fc63 	bl	8004c86 <TFT_String>
				State_option = STATE_POSITION_TRACKING;
 80073c0:	4b16      	ldr	r3, [pc, #88]	; (800741c <State_Menu+0x28c>)
 80073c2:	2203      	movs	r2, #3
 80073c4:	701a      	strb	r2, [r3, #0]
				break;
 80073c6:	bf00      	nop
			}
		}


		/* If 'Start' key is pressed */
		if(Start_key >= FLAG_SET)
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <State_Menu+0x290>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dd10      	ble.n	80073f2 <State_Menu+0x262>
		{
			State = State_option;
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <State_Menu+0x28c>)
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	4b13      	ldr	r3, [pc, #76]	; (8007424 <State_Menu+0x294>)
 80073d6:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <State_Menu+0x27c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
			Up_key = 0;
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <State_Menu+0x298>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
			Down_key = 0;
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <State_Menu+0x29c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
			Start_key = FLAG_RESET;
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <State_Menu+0x290>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
			break;
 80073f0:	e003      	b.n	80073fa <State_Menu+0x26a>
		}


		Delay_ms(100);
 80073f2:	2064      	movs	r0, #100	; 0x64
 80073f4:	f7fc fbea 	bl	8003bcc <Delay_ms>
		TS_Input(&TS1Handle);
 80073f8:	e768      	b.n	80072cc <State_Menu+0x13c>
	}
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200003dc 	.word	0x200003dc
 8007404:	0800be1c 	.word	0x0800be1c
 8007408:	20000278 	.word	0x20000278
 800740c:	20000210 	.word	0x20000210
 8007410:	0800be2c 	.word	0x0800be2c
 8007414:	0800be48 	.word	0x0800be48
 8007418:	0800be64 	.word	0x0800be64
 800741c:	20000008 	.word	0x20000008
 8007420:	2000021c 	.word	0x2000021c
 8007424:	2000020c 	.word	0x2000020c
 8007428:	20000214 	.word	0x20000214
 800742c:	20000218 	.word	0x20000218

08007430 <State_Speed>:


void State_Speed(void)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b085      	sub	sp, #20
 8007434:	af02      	add	r7, sp, #8
	int32_t temp_RefSpeed;

	Mode_key = FLAG_RESET;
 8007436:	4bb4      	ldr	r3, [pc, #720]	; (8007708 <State_Speed+0x2d8>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
	Start_key = FLAG_RESET;
 800743c:	4bb3      	ldr	r3, [pc, #716]	; (800770c <State_Speed+0x2dc>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

	// 1. Clear Screen of TFT LCD
	TFT_Clear_Screen(&TFT1Handle);
 8007442:	48b3      	ldr	r0, [pc, #716]	; (8007710 <State_Speed+0x2e0>)
 8007444:	f7fd fae2 	bl	8004a0c <TFT_Clear_Screen>
	Delay_ms(100);
 8007448:	2064      	movs	r0, #100	; 0x64
 800744a:	f7fc fbbf 	bl	8003bcc <Delay_ms>

	// 2. Draw Axis of Graph
	Draw_axis(&TFT1Handle, State);
 800744e:	4bb1      	ldr	r3, [pc, #708]	; (8007714 <State_Speed+0x2e4>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	48ae      	ldr	r0, [pc, #696]	; (8007710 <State_Speed+0x2e0>)
 8007456:	f001 f8f9 	bl	800864c <Draw_axis>

	// 3. Print Strings
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 800745a:	4baf      	ldr	r3, [pc, #700]	; (8007718 <State_Speed+0x2e8>)
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	2300      	movs	r3, #0
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007466:	2214      	movs	r2, #20
 8007468:	2119      	movs	r1, #25
 800746a:	48a9      	ldr	r0, [pc, #676]	; (8007710 <State_Speed+0x2e0>)
 800746c:	f7fd fc0b 	bl	8004c86 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007470:	4baa      	ldr	r3, [pc, #680]	; (800771c <State_Speed+0x2ec>)
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	2300      	movs	r3, #0
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800747c:	2216      	movs	r2, #22
 800747e:	2119      	movs	r1, #25
 8007480:	48a3      	ldr	r0, [pc, #652]	; (8007710 <State_Speed+0x2e0>)
 8007482:	f7fd fc00 	bl	8004c86 <TFT_String>
	Delay_ms(100);
 8007486:	2064      	movs	r0, #100	; 0x64
 8007488:	f7fc fba0 	bl	8003bcc <Delay_ms>


	while(1)
	{
		/* Set Reference Speed of BLDC Motor with Key inputs */
		temp_RefSpeed = Up_key - Down_key;
 800748c:	4ba4      	ldr	r3, [pc, #656]	; (8007720 <State_Speed+0x2f0>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	4ba4      	ldr	r3, [pc, #656]	; (8007724 <State_Speed+0x2f4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	607b      	str	r3, [r7, #4]

		if(temp_RefSpeed > 1200)			BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 1200);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800749e:	dd06      	ble.n	80074ae <State_Speed+0x7e>
 80074a0:	4aa1      	ldr	r2, [pc, #644]	; (8007728 <State_Speed+0x2f8>)
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	4ca1      	ldr	r4, [pc, #644]	; (800772c <State_Speed+0x2fc>)
 80074a8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80074ac:	e012      	b.n	80074d4 <State_Speed+0xa4>
		else if(temp_RefSpeed < -1200)		BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, -1200);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80074b4:	da06      	bge.n	80074c4 <State_Speed+0x94>
 80074b6:	4a9c      	ldr	r2, [pc, #624]	; (8007728 <State_Speed+0x2f8>)
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	4c9c      	ldr	r4, [pc, #624]	; (8007730 <State_Speed+0x300>)
 80074be:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80074c2:	e007      	b.n	80074d4 <State_Speed+0xa4>
		else								BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, temp_RefSpeed);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7f8 ffad 	bl	8000424 <__aeabi_i2d>
 80074ca:	4603      	mov	r3, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	4a96      	ldr	r2, [pc, #600]	; (8007728 <State_Speed+0x2f8>)
 80074d0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68


		if(Start_key == FLAG_RESET)
 80074d4:	4b8d      	ldr	r3, [pc, #564]	; (800770c <State_Speed+0x2dc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d117      	bne.n	800750c <State_Speed+0xdc>
		{
			if(Recharge_flag == FLAG_SET)
 80074dc:	4b95      	ldr	r3, [pc, #596]	; (8007734 <State_Speed+0x304>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d113      	bne.n	800750c <State_Speed+0xdc>
			{
				BLDC1Handle.MotorState = MOTOR_STATE_RECHARGE;
 80074e4:	4b90      	ldr	r3, [pc, #576]	; (8007728 <State_Speed+0x2f8>)
 80074e6:	2204      	movs	r2, #4
 80074e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 80074ec:	488e      	ldr	r0, [pc, #568]	; (8007728 <State_Speed+0x2f8>)
 80074ee:	f7fb fc03 	bl	8002cf8 <BLDC_BootstrapCap_Charge>
				EXTI->SWIER |= (0x1 << 5);
 80074f2:	4b91      	ldr	r3, [pc, #580]	; (8007738 <State_Speed+0x308>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4a90      	ldr	r2, [pc, #576]	; (8007738 <State_Speed+0x308>)
 80074f8:	f043 0320 	orr.w	r3, r3, #32
 80074fc:	6113      	str	r3, [r2, #16]
				BLDC1Handle.MotorState = MOTOR_STATE_SPEED;
 80074fe:	4b8a      	ldr	r3, [pc, #552]	; (8007728 <State_Speed+0x2f8>)
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				Recharge_flag = FLAG_RESET;
 8007506:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <State_Speed+0x304>)
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
			}
		}


		/* Display Speed(Reference, Current) value */
		TFT_xy(&TFT1Handle, 31, 20);
 800750c:	2214      	movs	r2, #20
 800750e:	211f      	movs	r1, #31
 8007510:	487f      	ldr	r0, [pc, #508]	; (8007710 <State_Speed+0x2e0>)
 8007512:	f7fd fb0b 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefSpeed, 4, 1);
 8007516:	4b84      	ldr	r3, [pc, #528]	; (8007728 <State_Speed+0x2f8>)
 8007518:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800751c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007520:	4618      	mov	r0, r3
 8007522:	4621      	mov	r1, r4
 8007524:	f7f9 fae0 	bl	8000ae8 <__aeabi_d2f>
 8007528:	4601      	mov	r1, r0
 800752a:	2301      	movs	r3, #1
 800752c:	2204      	movs	r2, #4
 800752e:	4878      	ldr	r0, [pc, #480]	; (8007710 <State_Speed+0x2e0>)
 8007530:	f7fe fdc2 	bl	80060b8 <TFT_Signed_float>
		TFT_xy(&TFT1Handle, 31, 22);
 8007534:	2216      	movs	r2, #22
 8007536:	211f      	movs	r1, #31
 8007538:	4875      	ldr	r0, [pc, #468]	; (8007710 <State_Speed+0x2e0>)
 800753a:	f7fd faf7 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurSpeed, 4, 1);
 800753e:	4b7a      	ldr	r3, [pc, #488]	; (8007728 <State_Speed+0x2f8>)
 8007540:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8007544:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007548:	4618      	mov	r0, r3
 800754a:	4621      	mov	r1, r4
 800754c:	f7f9 facc 	bl	8000ae8 <__aeabi_d2f>
 8007550:	4601      	mov	r1, r0
 8007552:	2301      	movs	r3, #1
 8007554:	2204      	movs	r2, #4
 8007556:	486e      	ldr	r0, [pc, #440]	; (8007710 <State_Speed+0x2e0>)
 8007558:	f7fe fdae 	bl	80060b8 <TFT_Signed_float>


		/* Draw Graph of Motor Speed */
		Draw_Graph(&TFT1Handle);
 800755c:	486c      	ldr	r0, [pc, #432]	; (8007710 <State_Speed+0x2e0>)
 800755e:	f001 fded 	bl	800913c <Draw_Graph>


		/* If 'Start' key is pressed */
		if(Start_key >= FLAG_SET)
 8007562:	4b6a      	ldr	r3, [pc, #424]	; (800770c <State_Speed+0x2dc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f340 81b4 	ble.w	80078d4 <State_Speed+0x4a4>
		{
			/* Wait to Avoid Key chattering */
			Delay_ms(200);
 800756c:	20c8      	movs	r0, #200	; 0xc8
 800756e:	f7fc fb2d 	bl	8003bcc <Delay_ms>

			/* If 'Motor State' is 'STOP' */
			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8007572:	4b6d      	ldr	r3, [pc, #436]	; (8007728 <State_Speed+0x2f8>)
 8007574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 812b 	bne.w	80077d4 <State_Speed+0x3a4>
			{
				/* 'Motor State' Changes from 'STOP' to 'SPEED' */

				// 1. Clear Graph Screen
				Clear_Graph(&TFT1Handle);
 800757e:	4864      	ldr	r0, [pc, #400]	; (8007710 <State_Speed+0x2e0>)
 8007580:	f002 f9ec 	bl	800995c <Clear_Graph>
				Delay_ms(10);
 8007584:	200a      	movs	r0, #10
 8007586:	f7fc fb21 	bl	8003bcc <Delay_ms>

				// 2. Draw Axis of Graph
				Draw_axis(&TFT1Handle, State);
 800758a:	4b62      	ldr	r3, [pc, #392]	; (8007714 <State_Speed+0x2e4>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	485f      	ldr	r0, [pc, #380]	; (8007710 <State_Speed+0x2e0>)
 8007592:	f001 f85b 	bl	800864c <Draw_axis>

				// 3. Print Strings
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8007596:	4b60      	ldr	r3, [pc, #384]	; (8007718 <State_Speed+0x2e8>)
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	2300      	movs	r3, #0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075a2:	2214      	movs	r2, #20
 80075a4:	2119      	movs	r1, #25
 80075a6:	485a      	ldr	r0, [pc, #360]	; (8007710 <State_Speed+0x2e0>)
 80075a8:	f7fd fb6d 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 80075ac:	4b5b      	ldr	r3, [pc, #364]	; (800771c <State_Speed+0x2ec>)
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	2300      	movs	r3, #0
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075b8:	2216      	movs	r2, #22
 80075ba:	2119      	movs	r1, #25
 80075bc:	4854      	ldr	r0, [pc, #336]	; (8007710 <State_Speed+0x2e0>)
 80075be:	f7fd fb62 	bl	8004c86 <TFT_String>

				// 4. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 0.02, 8, 0);	// 0.02, 8, 0
 80075c2:	4a59      	ldr	r2, [pc, #356]	; (8007728 <State_Speed+0x2f8>)
 80075c4:	a44e      	add	r4, pc, #312	; (adr r4, 8007700 <State_Speed+0x2d0>)
 80075c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80075ca:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 80075ce:	4a56      	ldr	r2, [pc, #344]	; (8007728 <State_Speed+0x2f8>)
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	4c59      	ldr	r4, [pc, #356]	; (800773c <State_Speed+0x30c>)
 80075d6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 80075da:	4a53      	ldr	r2, [pc, #332]	; (8007728 <State_Speed+0x2f8>)
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	f04f 0400 	mov.w	r4, #0
 80075e4:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Set Direction of Rotation
				if(BLDC1Handle.RefSpeed >= 0)			BLDC1Handle.RotationDir = CW;
 80075e8:	4b4f      	ldr	r3, [pc, #316]	; (8007728 <State_Speed+0x2f8>)
 80075ea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	f7f9 fa05 	bl	8000a04 <__aeabi_dcmpge>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <State_Speed+0x1da>
 8007600:	4b49      	ldr	r3, [pc, #292]	; (8007728 <State_Speed+0x2f8>)
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007608:	e00f      	b.n	800762a <State_Speed+0x1fa>
				else if(BLDC1Handle.RefSpeed < 0)		BLDC1Handle.RotationDir = CCW;
 800760a:	4b47      	ldr	r3, [pc, #284]	; (8007728 <State_Speed+0x2f8>)
 800760c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	f7f9 f9e0 	bl	80009dc <__aeabi_dcmplt>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <State_Speed+0x1fa>
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <State_Speed+0x2f8>)
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 6. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 800762a:	4b45      	ldr	r3, [pc, #276]	; (8007740 <State_Speed+0x310>)
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	4b3e      	ldr	r3, [pc, #248]	; (8007728 <State_Speed+0x2f8>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	4013      	ands	r3, r2
 8007634:	099b      	lsrs	r3, r3, #6
 8007636:	b29a      	uxth	r2, r3
 8007638:	4b3b      	ldr	r3, [pc, #236]	; (8007728 <State_Speed+0x2f8>)
 800763a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800763e:	4b3a      	ldr	r3, [pc, #232]	; (8007728 <State_Speed+0x2f8>)
 8007640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007644:	3b01      	subs	r3, #1
 8007646:	2b05      	cmp	r3, #5
 8007648:	f200 80ad 	bhi.w	80077a6 <State_Speed+0x376>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <State_Speed+0x224>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007781 	.word	0x08007781
 8007658:	08007697 	.word	0x08007697
 800765c:	0800766d 	.word	0x0800766d
 8007660:	080076e7 	.word	0x080076e7
 8007664:	08007759 	.word	0x08007759
 8007668:	080076bf 	.word	0x080076bf
 800766c:	4b2e      	ldr	r3, [pc, #184]	; (8007728 <State_Speed+0x2f8>)
 800766e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <State_Speed+0x250>
 8007676:	4b2c      	ldr	r3, [pc, #176]	; (8007728 <State_Speed+0x2f8>)
 8007678:	2202      	movs	r2, #2
 800767a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800767e:	e092      	b.n	80077a6 <State_Speed+0x376>
 8007680:	4b29      	ldr	r3, [pc, #164]	; (8007728 <State_Speed+0x2f8>)
 8007682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007686:	2b01      	cmp	r3, #1
 8007688:	f040 808d 	bne.w	80077a6 <State_Speed+0x376>
 800768c:	4b26      	ldr	r3, [pc, #152]	; (8007728 <State_Speed+0x2f8>)
 800768e:	2201      	movs	r2, #1
 8007690:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007694:	e087      	b.n	80077a6 <State_Speed+0x376>
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <State_Speed+0x2f8>)
 8007698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800769c:	2b00      	cmp	r3, #0
 800769e:	d104      	bne.n	80076aa <State_Speed+0x27a>
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <State_Speed+0x2f8>)
 80076a2:	2206      	movs	r2, #6
 80076a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80076a8:	e07d      	b.n	80077a6 <State_Speed+0x376>
 80076aa:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <State_Speed+0x2f8>)
 80076ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d178      	bne.n	80077a6 <State_Speed+0x376>
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <State_Speed+0x2f8>)
 80076b6:	2203      	movs	r2, #3
 80076b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80076bc:	e073      	b.n	80077a6 <State_Speed+0x376>
 80076be:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <State_Speed+0x2f8>)
 80076c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <State_Speed+0x2a2>
 80076c8:	4b17      	ldr	r3, [pc, #92]	; (8007728 <State_Speed+0x2f8>)
 80076ca:	2204      	movs	r2, #4
 80076cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80076d0:	e069      	b.n	80077a6 <State_Speed+0x376>
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <State_Speed+0x2f8>)
 80076d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d164      	bne.n	80077a6 <State_Speed+0x376>
 80076dc:	4b12      	ldr	r3, [pc, #72]	; (8007728 <State_Speed+0x2f8>)
 80076de:	2202      	movs	r2, #2
 80076e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80076e4:	e05f      	b.n	80077a6 <State_Speed+0x376>
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <State_Speed+0x2f8>)
 80076e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d129      	bne.n	8007744 <State_Speed+0x314>
 80076f0:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <State_Speed+0x2f8>)
 80076f2:	2205      	movs	r2, #5
 80076f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80076f8:	e055      	b.n	80077a6 <State_Speed+0x376>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	47ae147b 	.word	0x47ae147b
 8007704:	3f947ae1 	.word	0x3f947ae1
 8007708:	20000210 	.word	0x20000210
 800770c:	2000021c 	.word	0x2000021c
 8007710:	200003dc 	.word	0x200003dc
 8007714:	2000020c 	.word	0x2000020c
 8007718:	0800be80 	.word	0x0800be80
 800771c:	0800be88 	.word	0x0800be88
 8007720:	20000214 	.word	0x20000214
 8007724:	20000218 	.word	0x20000218
 8007728:	200002a8 	.word	0x200002a8
 800772c:	4092c000 	.word	0x4092c000
 8007730:	c092c000 	.word	0xc092c000
 8007734:	2000020d 	.word	0x2000020d
 8007738:	40010400 	.word	0x40010400
 800773c:	40200000 	.word	0x40200000
 8007740:	40011000 	.word	0x40011000
 8007744:	4b75      	ldr	r3, [pc, #468]	; (800791c <State_Speed+0x4ec>)
 8007746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774a:	2b01      	cmp	r3, #1
 800774c:	d12b      	bne.n	80077a6 <State_Speed+0x376>
 800774e:	4b73      	ldr	r3, [pc, #460]	; (800791c <State_Speed+0x4ec>)
 8007750:	2206      	movs	r2, #6
 8007752:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007756:	e026      	b.n	80077a6 <State_Speed+0x376>
 8007758:	4b70      	ldr	r3, [pc, #448]	; (800791c <State_Speed+0x4ec>)
 800775a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <State_Speed+0x33c>
 8007762:	4b6e      	ldr	r3, [pc, #440]	; (800791c <State_Speed+0x4ec>)
 8007764:	2201      	movs	r2, #1
 8007766:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800776a:	e01c      	b.n	80077a6 <State_Speed+0x376>
 800776c:	4b6b      	ldr	r3, [pc, #428]	; (800791c <State_Speed+0x4ec>)
 800776e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007772:	2b01      	cmp	r3, #1
 8007774:	d117      	bne.n	80077a6 <State_Speed+0x376>
 8007776:	4b69      	ldr	r3, [pc, #420]	; (800791c <State_Speed+0x4ec>)
 8007778:	2204      	movs	r2, #4
 800777a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800777e:	e012      	b.n	80077a6 <State_Speed+0x376>
 8007780:	4b66      	ldr	r3, [pc, #408]	; (800791c <State_Speed+0x4ec>)
 8007782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <State_Speed+0x364>
 800778a:	4b64      	ldr	r3, [pc, #400]	; (800791c <State_Speed+0x4ec>)
 800778c:	2203      	movs	r2, #3
 800778e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007792:	e008      	b.n	80077a6 <State_Speed+0x376>
 8007794:	4b61      	ldr	r3, [pc, #388]	; (800791c <State_Speed+0x4ec>)
 8007796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800779a:	2b01      	cmp	r3, #1
 800779c:	d103      	bne.n	80077a6 <State_Speed+0x376>
 800779e:	4b5f      	ldr	r3, [pc, #380]	; (800791c <State_Speed+0x4ec>)
 80077a0:	2205      	movs	r2, #5
 80077a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80077a6:	bf00      	nop

				// 7. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 80077a8:	485c      	ldr	r0, [pc, #368]	; (800791c <State_Speed+0x4ec>)
 80077aa:	f7fb faa5 	bl	8002cf8 <BLDC_BootstrapCap_Charge>

				// 8. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 80077ae:	2201      	movs	r2, #1
 80077b0:	2108      	movs	r1, #8
 80077b2:	2017      	movs	r0, #23
 80077b4:	f7fc f868 	bl	8003888 <NVIC_IRQConfig>

				// 9. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);	// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 80077b8:	4b59      	ldr	r3, [pc, #356]	; (8007920 <State_Speed+0x4f0>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4a58      	ldr	r2, [pc, #352]	; (8007920 <State_Speed+0x4f0>)
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	6113      	str	r3, [r2, #16]

				// 10. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 80077c4:	4b55      	ldr	r3, [pc, #340]	; (800791c <State_Speed+0x4ec>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	659a      	str	r2, [r3, #88]	; 0x58

				// 11. Change 'MotorState' from 'MOTOR_STATE_STOP' to 'MOTOR_STATE_SPEED'
				BLDC1Handle.MotorState = MOTOR_STATE_SPEED;
 80077ca:	4b54      	ldr	r3, [pc, #336]	; (800791c <State_Speed+0x4ec>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80077d2:	e07c      	b.n	80078ce <State_Speed+0x49e>
			}


			/* If 'Motor state' is 'SPEED' */
			else if( (BLDC1Handle.MotorState == MOTOR_STATE_SPEED) || (BLDC1Handle.MotorState == MOTOR_STATE_RECHARGE) )
 80077d4:	4b51      	ldr	r3, [pc, #324]	; (800791c <State_Speed+0x4ec>)
 80077d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d004      	beq.n	80077e8 <State_Speed+0x3b8>
 80077de:	4b4f      	ldr	r3, [pc, #316]	; (800791c <State_Speed+0x4ec>)
 80077e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d172      	bne.n	80078ce <State_Speed+0x49e>
			{
				/* 'Motor State' Changes from 'SPEED' to 'STOP' */

				// 1. Set Reference Speed to 0
				BLDC_SET_REFERENCE_SPEED(&BLDC1Handle, 0);
 80077e8:	4a4c      	ldr	r2, [pc, #304]	; (800791c <State_Speed+0x4ec>)
 80077ea:	f04f 0300 	mov.w	r3, #0
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

				// 2. Wait for the Motor to stop completely
				while( ((int16_t)BLDC1Handle.CurSpeed) != 0 )
 80077f6:	e03d      	b.n	8007874 <State_Speed+0x444>
				{
					// Print Speed(Reference, Current) value until Motor stops completely
					TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <State_Speed+0x4f4>)
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	2300      	movs	r3, #0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007804:	2214      	movs	r2, #20
 8007806:	2119      	movs	r1, #25
 8007808:	4847      	ldr	r0, [pc, #284]	; (8007928 <State_Speed+0x4f8>)
 800780a:	f7fd fa3c 	bl	8004c86 <TFT_String>
					TFT_xy(&TFT1Handle, 31, 20);
 800780e:	2214      	movs	r2, #20
 8007810:	211f      	movs	r1, #31
 8007812:	4845      	ldr	r0, [pc, #276]	; (8007928 <State_Speed+0x4f8>)
 8007814:	f7fd f98a 	bl	8004b2c <TFT_xy>
					TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefSpeed, 4, 1);
 8007818:	4b40      	ldr	r3, [pc, #256]	; (800791c <State_Speed+0x4ec>)
 800781a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800781e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007822:	4618      	mov	r0, r3
 8007824:	4621      	mov	r1, r4
 8007826:	f7f9 f95f 	bl	8000ae8 <__aeabi_d2f>
 800782a:	4601      	mov	r1, r0
 800782c:	2301      	movs	r3, #1
 800782e:	2204      	movs	r2, #4
 8007830:	483d      	ldr	r0, [pc, #244]	; (8007928 <State_Speed+0x4f8>)
 8007832:	f7fe fc41 	bl	80060b8 <TFT_Signed_float>
					TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007836:	4b3d      	ldr	r3, [pc, #244]	; (800792c <State_Speed+0x4fc>)
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007842:	2216      	movs	r2, #22
 8007844:	2119      	movs	r1, #25
 8007846:	4838      	ldr	r0, [pc, #224]	; (8007928 <State_Speed+0x4f8>)
 8007848:	f7fd fa1d 	bl	8004c86 <TFT_String>
					TFT_xy(&TFT1Handle, 31, 22);
 800784c:	2216      	movs	r2, #22
 800784e:	211f      	movs	r1, #31
 8007850:	4835      	ldr	r0, [pc, #212]	; (8007928 <State_Speed+0x4f8>)
 8007852:	f7fd f96b 	bl	8004b2c <TFT_xy>
					TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurSpeed, 4, 1);
 8007856:	4b31      	ldr	r3, [pc, #196]	; (800791c <State_Speed+0x4ec>)
 8007858:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800785c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007860:	4618      	mov	r0, r3
 8007862:	4621      	mov	r1, r4
 8007864:	f7f9 f940 	bl	8000ae8 <__aeabi_d2f>
 8007868:	4601      	mov	r1, r0
 800786a:	2301      	movs	r3, #1
 800786c:	2204      	movs	r2, #4
 800786e:	482e      	ldr	r0, [pc, #184]	; (8007928 <State_Speed+0x4f8>)
 8007870:	f7fe fc22 	bl	80060b8 <TFT_Signed_float>
				while( ((int16_t)BLDC1Handle.CurSpeed) != 0 )
 8007874:	4b29      	ldr	r3, [pc, #164]	; (800791c <State_Speed+0x4ec>)
 8007876:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800787a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800787e:	4618      	mov	r0, r3
 8007880:	4621      	mov	r1, r4
 8007882:	f7f9 f8e9 	bl	8000a58 <__aeabi_d2iz>
 8007886:	4603      	mov	r3, r0
 8007888:	b21b      	sxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1b4      	bne.n	80077f8 <State_Speed+0x3c8>
				}

				Delay_ms(100);
 800788e:	2064      	movs	r0, #100	; 0x64
 8007890:	f7fc f99c 	bl	8003bcc <Delay_ms>

				// 3. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8007894:	2200      	movs	r2, #0
 8007896:	2108      	movs	r1, #8
 8007898:	2017      	movs	r0, #23
 800789a:	f7fb fff5 	bl	8003888 <NVIC_IRQConfig>

				// 4. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 800789e:	4b1f      	ldr	r3, [pc, #124]	; (800791c <State_Speed+0x4ec>)
 80078a0:	6858      	ldr	r0, [r3, #4]
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <State_Speed+0x4ec>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2200      	movs	r2, #0
 80078aa:	4619      	mov	r1, r3
 80078ac:	f7fa f9de 	bl	8001c6c <GPIO_WritePin>

				// 5. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 80078b0:	481a      	ldr	r0, [pc, #104]	; (800791c <State_Speed+0x4ec>)
 80078b2:	f002 f99f 	bl	8009bf4 <DisableTimerPwmChannel>

				// 6. Change MotorState from MOTOR_STATE_SPEED to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 80078b6:	4b19      	ldr	r3, [pc, #100]	; (800791c <State_Speed+0x4ec>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 7. Reset variables
				Reset_Speed_Variables();
 80078be:	f000 fdaf 	bl	8008420 <Reset_Speed_Variables>

				Recharge_flag = FLAG_RESET;
 80078c2:	4b1b      	ldr	r3, [pc, #108]	; (8007930 <State_Speed+0x500>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
				Mode_key = FLAG_RESET;
 80078c8:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <State_Speed+0x504>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
			}

			Start_key = FLAG_RESET;
 80078ce:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <State_Speed+0x508>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_SPEED) && (Mode_key >= FLAG_SET) )
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <State_Speed+0x4ec>)
 80078d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d107      	bne.n	80078ee <State_Speed+0x4be>
 80078de:	4b15      	ldr	r3, [pc, #84]	; (8007934 <State_Speed+0x504>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	dd03      	ble.n	80078ee <State_Speed+0x4be>
		{
			Mode_key = FLAG_RESET;
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <State_Speed+0x504>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e011      	b.n	8007912 <State_Speed+0x4e2>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <State_Speed+0x4ec>)
 80078f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f adc9 	bne.w	800748c <State_Speed+0x5c>
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <State_Speed+0x504>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f77f adc4 	ble.w	800748c <State_Speed+0x5c>
		{
			State = STATE_MENU;
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <State_Speed+0x50c>)
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <State_Speed+0x504>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
			break;
 8007910:	e000      	b.n	8007914 <State_Speed+0x4e4>
		temp_RefSpeed = Up_key - Down_key;
 8007912:	e5bb      	b.n	800748c <State_Speed+0x5c>
		}


	}
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bd90      	pop	{r4, r7, pc}
 800791c:	200002a8 	.word	0x200002a8
 8007920:	40010400 	.word	0x40010400
 8007924:	0800be80 	.word	0x0800be80
 8007928:	200003dc 	.word	0x200003dc
 800792c:	0800be88 	.word	0x0800be88
 8007930:	2000020d 	.word	0x2000020d
 8007934:	20000210 	.word	0x20000210
 8007938:	2000021c 	.word	0x2000021c
 800793c:	2000020c 	.word	0x2000020c

08007940 <State_Position>:


void State_Position(void)
{
 8007940:	b590      	push	{r4, r7, lr}
 8007942:	b085      	sub	sp, #20
 8007944:	af02      	add	r7, sp, #8
	int32_t temp_RefPosition;

	Mode_key = FLAG_RESET;
 8007946:	4bb6      	ldr	r3, [pc, #728]	; (8007c20 <State_Position+0x2e0>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
	Start_key = FLAG_RESET;
 800794c:	4bb5      	ldr	r3, [pc, #724]	; (8007c24 <State_Position+0x2e4>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

	// 1. Clear Screen of TFT LCD
	TFT_Clear_Screen(&TFT1Handle);
 8007952:	48b5      	ldr	r0, [pc, #724]	; (8007c28 <State_Position+0x2e8>)
 8007954:	f7fd f85a 	bl	8004a0c <TFT_Clear_Screen>
	Delay_ms(100);
 8007958:	2064      	movs	r0, #100	; 0x64
 800795a:	f7fc f937 	bl	8003bcc <Delay_ms>

	// 2. Draw Axis of Graph
	Draw_axis(&TFT1Handle, State);
 800795e:	4bb3      	ldr	r3, [pc, #716]	; (8007c2c <State_Position+0x2ec>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	48b0      	ldr	r0, [pc, #704]	; (8007c28 <State_Position+0x2e8>)
 8007966:	f000 fe71 	bl	800864c <Draw_axis>

	// 3. Print Strings
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 800796a:	4bb1      	ldr	r3, [pc, #708]	; (8007c30 <State_Position+0x2f0>)
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	2300      	movs	r3, #0
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007976:	2214      	movs	r2, #20
 8007978:	2119      	movs	r1, #25
 800797a:	48ab      	ldr	r0, [pc, #684]	; (8007c28 <State_Position+0x2e8>)
 800797c:	f7fd f983 	bl	8004c86 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007980:	4bac      	ldr	r3, [pc, #688]	; (8007c34 <State_Position+0x2f4>)
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	2300      	movs	r3, #0
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800798c:	2216      	movs	r2, #22
 800798e:	2119      	movs	r1, #25
 8007990:	48a5      	ldr	r0, [pc, #660]	; (8007c28 <State_Position+0x2e8>)
 8007992:	f7fd f978 	bl	8004c86 <TFT_String>
	Delay_ms(100);
 8007996:	2064      	movs	r0, #100	; 0x64
 8007998:	f7fc f918 	bl	8003bcc <Delay_ms>


	while(1)
	{
		if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 800799c:	4ba6      	ldr	r3, [pc, #664]	; (8007c38 <State_Position+0x2f8>)
 800799e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d102      	bne.n	80079ac <State_Position+0x6c>
		{
			Mode_key = FLAG_RESET;
 80079a6:	4b9e      	ldr	r3, [pc, #632]	; (8007c20 <State_Position+0x2e0>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
		}


		/* If 'Motor State' is 'STOP' */
		if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 80079ac:	4ba2      	ldr	r3, [pc, #648]	; (8007c38 <State_Position+0x2f8>)
 80079ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d13b      	bne.n	8007a2e <State_Position+0xee>
		{
			// Set Reference Position of BLDC Motor with Key inputs
			temp_RefPosition = 10 * (Up_key - Down_key);
 80079b6:	4ba1      	ldr	r3, [pc, #644]	; (8007c3c <State_Position+0x2fc>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4ba1      	ldr	r3, [pc, #644]	; (8007c40 <State_Position+0x300>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	607b      	str	r3, [r7, #4]

			if(temp_RefPosition > 99999)			BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, 99999);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a9d      	ldr	r2, [pc, #628]	; (8007c44 <State_Position+0x304>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	dd06      	ble.n	80079e0 <State_Position+0xa0>
 80079d2:	4a99      	ldr	r2, [pc, #612]	; (8007c38 <State_Position+0x2f8>)
 80079d4:	a48c      	add	r4, pc, #560	; (adr r4, 8007c08 <State_Position+0x2c8>)
 80079d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80079da:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80079de:	e012      	b.n	8007a06 <State_Position+0xc6>
			else if(temp_RefPosition < -99999)		BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, -99999);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a99      	ldr	r2, [pc, #612]	; (8007c48 <State_Position+0x308>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	da06      	bge.n	80079f6 <State_Position+0xb6>
 80079e8:	4a93      	ldr	r2, [pc, #588]	; (8007c38 <State_Position+0x2f8>)
 80079ea:	a489      	add	r4, pc, #548	; (adr r4, 8007c10 <State_Position+0x2d0>)
 80079ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80079f0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80079f4:	e007      	b.n	8007a06 <State_Position+0xc6>
			else									BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, temp_RefPosition);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7f8 fd14 	bl	8000424 <__aeabi_i2d>
 80079fc:	4603      	mov	r3, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	4a8d      	ldr	r2, [pc, #564]	; (8007c38 <State_Position+0x2f8>)
 8007a02:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

			// Display Reference Position value
			TFT_xy(&TFT1Handle, 31, 20);
 8007a06:	2214      	movs	r2, #20
 8007a08:	211f      	movs	r1, #31
 8007a0a:	4887      	ldr	r0, [pc, #540]	; (8007c28 <State_Position+0x2e8>)
 8007a0c:	f7fd f88e 	bl	8004b2c <TFT_xy>
			TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefPosition, 5, 1);
 8007a10:	4b89      	ldr	r3, [pc, #548]	; (8007c38 <State_Position+0x2f8>)
 8007a12:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007a16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	f7f9 f863 	bl	8000ae8 <__aeabi_d2f>
 8007a22:	4601      	mov	r1, r0
 8007a24:	2301      	movs	r3, #1
 8007a26:	2205      	movs	r2, #5
 8007a28:	487f      	ldr	r0, [pc, #508]	; (8007c28 <State_Position+0x2e8>)
 8007a2a:	f7fe fb45 	bl	80060b8 <TFT_Signed_float>
		}


		/* Display Position(Reference, Current) value */
		TFT_xy(&TFT1Handle, 31, 20);
 8007a2e:	2214      	movs	r2, #20
 8007a30:	211f      	movs	r1, #31
 8007a32:	487d      	ldr	r0, [pc, #500]	; (8007c28 <State_Position+0x2e8>)
 8007a34:	f7fd f87a 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefPosition, 5, 1);
 8007a38:	4b7f      	ldr	r3, [pc, #508]	; (8007c38 <State_Position+0x2f8>)
 8007a3a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007a3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a42:	4618      	mov	r0, r3
 8007a44:	4621      	mov	r1, r4
 8007a46:	f7f9 f84f 	bl	8000ae8 <__aeabi_d2f>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	2205      	movs	r2, #5
 8007a50:	4875      	ldr	r0, [pc, #468]	; (8007c28 <State_Position+0x2e8>)
 8007a52:	f7fe fb31 	bl	80060b8 <TFT_Signed_float>
		TFT_xy(&TFT1Handle, 31, 22);
 8007a56:	2216      	movs	r2, #22
 8007a58:	211f      	movs	r1, #31
 8007a5a:	4873      	ldr	r0, [pc, #460]	; (8007c28 <State_Position+0x2e8>)
 8007a5c:	f7fd f866 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurPosition, 5, 1);
 8007a60:	4b75      	ldr	r3, [pc, #468]	; (8007c38 <State_Position+0x2f8>)
 8007a62:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8007a66:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	f7f9 f83b 	bl	8000ae8 <__aeabi_d2f>
 8007a72:	4601      	mov	r1, r0
 8007a74:	2301      	movs	r3, #1
 8007a76:	2205      	movs	r2, #5
 8007a78:	486b      	ldr	r0, [pc, #428]	; (8007c28 <State_Position+0x2e8>)
 8007a7a:	f7fe fb1d 	bl	80060b8 <TFT_Signed_float>


		/* Draw Graph of Motor Position */
		Draw_Graph(&TFT1Handle);
 8007a7e:	486a      	ldr	r0, [pc, #424]	; (8007c28 <State_Position+0x2e8>)
 8007a80:	f001 fb5c 	bl	800913c <Draw_Graph>


		/* If 'Start' key is pressed */
		if(Start_key >= FLAG_SET)
 8007a84:	4b67      	ldr	r3, [pc, #412]	; (8007c24 <State_Position+0x2e4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f340 815d 	ble.w	8007d48 <State_Position+0x408>
		{
			/* Wait to Avoid Key chattering */
			Delay_ms(200);
 8007a8e:	20c8      	movs	r0, #200	; 0xc8
 8007a90:	f7fc f89c 	bl	8003bcc <Delay_ms>

			/* If 'Motor State' is 'STOP' */
			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8007a94:	4b68      	ldr	r3, [pc, #416]	; (8007c38 <State_Position+0x2f8>)
 8007a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 812c 	bne.w	8007cf8 <State_Position+0x3b8>
			{
				/* 'Motor State' Changes from 'STOP' to 'POSITION' */

				// 1. Clear Graph Screen
				Clear_Graph(&TFT1Handle);
 8007aa0:	4861      	ldr	r0, [pc, #388]	; (8007c28 <State_Position+0x2e8>)
 8007aa2:	f001 ff5b 	bl	800995c <Clear_Graph>
				Delay_ms(10);
 8007aa6:	200a      	movs	r0, #10
 8007aa8:	f7fc f890 	bl	8003bcc <Delay_ms>

				// 2. Draw Axis of Graph
				Draw_axis(&TFT1Handle, State);
 8007aac:	4b5f      	ldr	r3, [pc, #380]	; (8007c2c <State_Position+0x2ec>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	485d      	ldr	r0, [pc, #372]	; (8007c28 <State_Position+0x2e8>)
 8007ab4:	f000 fdca 	bl	800864c <Draw_axis>

				// 3. Print Strings
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8007ab8:	4b5d      	ldr	r3, [pc, #372]	; (8007c30 <State_Position+0x2f0>)
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ac4:	2214      	movs	r2, #20
 8007ac6:	2119      	movs	r1, #25
 8007ac8:	4857      	ldr	r0, [pc, #348]	; (8007c28 <State_Position+0x2e8>)
 8007aca:	f7fd f8dc 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007ace:	4b59      	ldr	r3, [pc, #356]	; (8007c34 <State_Position+0x2f4>)
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ada:	2216      	movs	r2, #22
 8007adc:	2119      	movs	r1, #25
 8007ade:	4852      	ldr	r0, [pc, #328]	; (8007c28 <State_Position+0x2e8>)
 8007ae0:	f7fd f8d1 	bl	8004c86 <TFT_String>

				// 4. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 15, 0, 0.01);
 8007ae4:	4a54      	ldr	r2, [pc, #336]	; (8007c38 <State_Position+0x2f8>)
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	4c58      	ldr	r4, [pc, #352]	; (8007c4c <State_Position+0x30c>)
 8007aec:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8007af0:	4a51      	ldr	r2, [pc, #324]	; (8007c38 <State_Position+0x2f8>)
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	f04f 0400 	mov.w	r4, #0
 8007afa:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8007afe:	4a4e      	ldr	r2, [pc, #312]	; (8007c38 <State_Position+0x2f8>)
 8007b00:	a445      	add	r4, pc, #276	; (adr r4, 8007c18 <State_Position+0x2d8>)
 8007b02:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b06:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Set Direction of Rotation
				if(BLDC1Handle.RefPosition >= 0)			BLDC1Handle.RotationDir = CW;
 8007b0a:	4b4b      	ldr	r3, [pc, #300]	; (8007c38 <State_Position+0x2f8>)
 8007b0c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	f04f 0300 	mov.w	r3, #0
 8007b18:	f7f8 ff74 	bl	8000a04 <__aeabi_dcmpge>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <State_Position+0x1ec>
 8007b22:	4b45      	ldr	r3, [pc, #276]	; (8007c38 <State_Position+0x2f8>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007b2a:	e00f      	b.n	8007b4c <State_Position+0x20c>
				else if(BLDC1Handle.RefPosition < 0)		BLDC1Handle.RotationDir = CCW;
 8007b2c:	4b42      	ldr	r3, [pc, #264]	; (8007c38 <State_Position+0x2f8>)
 8007b2e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	f7f8 ff4f 	bl	80009dc <__aeabi_dcmplt>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <State_Position+0x20c>
 8007b44:	4b3c      	ldr	r3, [pc, #240]	; (8007c38 <State_Position+0x2f8>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 6. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <State_Position+0x310>)
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <State_Position+0x2f8>)
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	4013      	ands	r3, r2
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	4b37      	ldr	r3, [pc, #220]	; (8007c38 <State_Position+0x2f8>)
 8007b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8007b60:	4b35      	ldr	r3, [pc, #212]	; (8007c38 <State_Position+0x2f8>)
 8007b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b66:	3b01      	subs	r3, #1
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	f200 80ae 	bhi.w	8007cca <State_Position+0x38a>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <State_Position+0x234>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007ca5 	.word	0x08007ca5
 8007b78:	08007bb7 	.word	0x08007bb7
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007c55 	.word	0x08007c55
 8007b84:	08007c7d 	.word	0x08007c7d
 8007b88:	08007bdf 	.word	0x08007bdf
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <State_Position+0x2f8>)
 8007b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <State_Position+0x260>
 8007b96:	4b28      	ldr	r3, [pc, #160]	; (8007c38 <State_Position+0x2f8>)
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007b9e:	e094      	b.n	8007cca <State_Position+0x38a>
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <State_Position+0x2f8>)
 8007ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	f040 808f 	bne.w	8007cca <State_Position+0x38a>
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <State_Position+0x2f8>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007bb4:	e089      	b.n	8007cca <State_Position+0x38a>
 8007bb6:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <State_Position+0x2f8>)
 8007bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <State_Position+0x28a>
 8007bc0:	4b1d      	ldr	r3, [pc, #116]	; (8007c38 <State_Position+0x2f8>)
 8007bc2:	2206      	movs	r2, #6
 8007bc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007bc8:	e07f      	b.n	8007cca <State_Position+0x38a>
 8007bca:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <State_Position+0x2f8>)
 8007bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d17a      	bne.n	8007cca <State_Position+0x38a>
 8007bd4:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <State_Position+0x2f8>)
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007bdc:	e075      	b.n	8007cca <State_Position+0x38a>
 8007bde:	4b16      	ldr	r3, [pc, #88]	; (8007c38 <State_Position+0x2f8>)
 8007be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <State_Position+0x2b2>
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <State_Position+0x2f8>)
 8007bea:	2204      	movs	r2, #4
 8007bec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007bf0:	e06b      	b.n	8007cca <State_Position+0x38a>
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <State_Position+0x2f8>)
 8007bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d166      	bne.n	8007cca <State_Position+0x38a>
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <State_Position+0x2f8>)
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007c04:	e061      	b.n	8007cca <State_Position+0x38a>
 8007c06:	bf00      	nop
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	40f869f0 	.word	0x40f869f0
 8007c10:	00000000 	.word	0x00000000
 8007c14:	c0f869f0 	.word	0xc0f869f0
 8007c18:	47ae147b 	.word	0x47ae147b
 8007c1c:	3f847ae1 	.word	0x3f847ae1
 8007c20:	20000210 	.word	0x20000210
 8007c24:	2000021c 	.word	0x2000021c
 8007c28:	200003dc 	.word	0x200003dc
 8007c2c:	2000020c 	.word	0x2000020c
 8007c30:	0800be80 	.word	0x0800be80
 8007c34:	0800be88 	.word	0x0800be88
 8007c38:	200002a8 	.word	0x200002a8
 8007c3c:	20000214 	.word	0x20000214
 8007c40:	20000218 	.word	0x20000218
 8007c44:	0001869f 	.word	0x0001869f
 8007c48:	fffe7961 	.word	0xfffe7961
 8007c4c:	402e0000 	.word	0x402e0000
 8007c50:	40011000 	.word	0x40011000
 8007c54:	4b4e      	ldr	r3, [pc, #312]	; (8007d90 <State_Position+0x450>)
 8007c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d104      	bne.n	8007c68 <State_Position+0x328>
 8007c5e:	4b4c      	ldr	r3, [pc, #304]	; (8007d90 <State_Position+0x450>)
 8007c60:	2205      	movs	r2, #5
 8007c62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007c66:	e030      	b.n	8007cca <State_Position+0x38a>
 8007c68:	4b49      	ldr	r3, [pc, #292]	; (8007d90 <State_Position+0x450>)
 8007c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d12b      	bne.n	8007cca <State_Position+0x38a>
 8007c72:	4b47      	ldr	r3, [pc, #284]	; (8007d90 <State_Position+0x450>)
 8007c74:	2206      	movs	r2, #6
 8007c76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007c7a:	e026      	b.n	8007cca <State_Position+0x38a>
 8007c7c:	4b44      	ldr	r3, [pc, #272]	; (8007d90 <State_Position+0x450>)
 8007c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <State_Position+0x350>
 8007c86:	4b42      	ldr	r3, [pc, #264]	; (8007d90 <State_Position+0x450>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007c8e:	e01c      	b.n	8007cca <State_Position+0x38a>
 8007c90:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <State_Position+0x450>)
 8007c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d117      	bne.n	8007cca <State_Position+0x38a>
 8007c9a:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <State_Position+0x450>)
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007ca2:	e012      	b.n	8007cca <State_Position+0x38a>
 8007ca4:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <State_Position+0x450>)
 8007ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <State_Position+0x378>
 8007cae:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <State_Position+0x450>)
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007cb6:	e008      	b.n	8007cca <State_Position+0x38a>
 8007cb8:	4b35      	ldr	r3, [pc, #212]	; (8007d90 <State_Position+0x450>)
 8007cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d103      	bne.n	8007cca <State_Position+0x38a>
 8007cc2:	4b33      	ldr	r3, [pc, #204]	; (8007d90 <State_Position+0x450>)
 8007cc4:	2205      	movs	r2, #5
 8007cc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8007cca:	bf00      	nop

				// 7. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 8007ccc:	4830      	ldr	r0, [pc, #192]	; (8007d90 <State_Position+0x450>)
 8007cce:	f7fb f813 	bl	8002cf8 <BLDC_BootstrapCap_Charge>

				// 8. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	2108      	movs	r1, #8
 8007cd6:	2017      	movs	r0, #23
 8007cd8:	f7fb fdd6 	bl	8003888 <NVIC_IRQConfig>

				// 9. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);	// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <State_Position+0x454>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a2c      	ldr	r2, [pc, #176]	; (8007d94 <State_Position+0x454>)
 8007ce2:	f043 0320 	orr.w	r3, r3, #32
 8007ce6:	6113      	str	r3, [r2, #16]

				// 10. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <State_Position+0x450>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	659a      	str	r2, [r3, #88]	; 0x58

				// 11. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION;
 8007cee:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <State_Position+0x450>)
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007cf6:	e024      	b.n	8007d42 <State_Position+0x402>
			}


			/* If 'Motor state' is 'POSITION' */
			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8007cf8:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <State_Position+0x450>)
 8007cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d11f      	bne.n	8007d42 <State_Position+0x402>
			{
				/* 'Motor State' Changes from 'POSITION' to 'STOP' */

				// 1. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 8007d02:	2200      	movs	r2, #0
 8007d04:	2108      	movs	r1, #8
 8007d06:	2017      	movs	r0, #23
 8007d08:	f7fb fdbe 	bl	8003888 <NVIC_IRQConfig>

				// 2. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 8007d0c:	4b20      	ldr	r3, [pc, #128]	; (8007d90 <State_Position+0x450>)
 8007d0e:	6858      	ldr	r0, [r3, #4]
 8007d10:	4b1f      	ldr	r3, [pc, #124]	; (8007d90 <State_Position+0x450>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2200      	movs	r2, #0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f7f9 ffa7 	bl	8001c6c <GPIO_WritePin>

				// 3. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8007d1e:	481c      	ldr	r0, [pc, #112]	; (8007d90 <State_Position+0x450>)
 8007d20:	f001 ff68 	bl	8009bf4 <DisableTimerPwmChannel>

				// 4. Change MotorState from MOTOR_STATE_POSITION to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8007d24:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <State_Position+0x450>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 5. Reset variables
				Reset_Position_Variables();
 8007d2c:	f000 fbee 	bl	800850c <Reset_Position_Variables>

				Mode_key = 0;
 8007d30:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <State_Position+0x458>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
				Up_key = 0;
 8007d36:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <State_Position+0x45c>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
				Down_key = 0;
 8007d3c:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <State_Position+0x460>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
			}

			Start_key = FLAG_RESET;
 8007d42:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <State_Position+0x464>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION) && (Mode_key >= FLAG_SET) )
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <State_Position+0x450>)
 8007d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d107      	bne.n	8007d62 <State_Position+0x422>
 8007d52:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <State_Position+0x458>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd03      	ble.n	8007d62 <State_Position+0x422>
		{
			Mode_key = FLAG_RESET;
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <State_Position+0x458>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e011      	b.n	8007d86 <State_Position+0x446>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <State_Position+0x450>)
 8007d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f47f ae17 	bne.w	800799c <State_Position+0x5c>
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <State_Position+0x458>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f77f ae12 	ble.w	800799c <State_Position+0x5c>
		{
			State = STATE_MENU;
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <State_Position+0x468>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <State_Position+0x458>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
			break;
 8007d84:	e000      	b.n	8007d88 <State_Position+0x448>
		if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION)
 8007d86:	e609      	b.n	800799c <State_Position+0x5c>
		}
	}
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd90      	pop	{r4, r7, pc}
 8007d90:	200002a8 	.word	0x200002a8
 8007d94:	40010400 	.word	0x40010400
 8007d98:	20000210 	.word	0x20000210
 8007d9c:	20000214 	.word	0x20000214
 8007da0:	20000218 	.word	0x20000218
 8007da4:	2000021c 	.word	0x2000021c
 8007da8:	2000020c 	.word	0x2000020c
 8007dac:	00000000 	.word	0x00000000

08007db0 <State_Position_Tracking>:


void State_Position_Tracking(void)
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af02      	add	r7, sp, #8
	int32_t temp_RefPosition;

	Mode_key = FLAG_RESET;
 8007db6:	4bb8      	ldr	r3, [pc, #736]	; (8008098 <State_Position_Tracking+0x2e8>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
	Start_key = FLAG_RESET;
 8007dbc:	4bb7      	ldr	r3, [pc, #732]	; (800809c <State_Position_Tracking+0x2ec>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]

	// 1. Clear Screen of TFT LCD
	TFT_Clear_Screen(&TFT1Handle);
 8007dc2:	48b7      	ldr	r0, [pc, #732]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007dc4:	f7fc fe22 	bl	8004a0c <TFT_Clear_Screen>
	Delay_ms(100);
 8007dc8:	2064      	movs	r0, #100	; 0x64
 8007dca:	f7fb feff 	bl	8003bcc <Delay_ms>

	// 2. Draw Axis of Graph
	Draw_axis(&TFT1Handle, State);
 8007dce:	4bb5      	ldr	r3, [pc, #724]	; (80080a4 <State_Position_Tracking+0x2f4>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	48b2      	ldr	r0, [pc, #712]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007dd6:	f000 fc39 	bl	800864c <Draw_axis>

	// 3. Print Strings
	TFT_String(&TFT1Handle, 25, 18, White, Black, (uint8_t*)"Ref : ");
 8007dda:	4bb3      	ldr	r3, [pc, #716]	; (80080a8 <State_Position_Tracking+0x2f8>)
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007de6:	2212      	movs	r2, #18
 8007de8:	2119      	movs	r1, #25
 8007dea:	48ad      	ldr	r0, [pc, #692]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007dec:	f7fc ff4b 	bl	8004c86 <TFT_String>
	TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 8007df0:	4bae      	ldr	r3, [pc, #696]	; (80080ac <State_Position_Tracking+0x2fc>)
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	2300      	movs	r3, #0
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dfc:	2214      	movs	r2, #20
 8007dfe:	2119      	movs	r1, #25
 8007e00:	48a7      	ldr	r0, [pc, #668]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007e02:	f7fc ff40 	bl	8004c86 <TFT_String>
	TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007e06:	4baa      	ldr	r3, [pc, #680]	; (80080b0 <State_Position_Tracking+0x300>)
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e12:	2216      	movs	r2, #22
 8007e14:	2119      	movs	r1, #25
 8007e16:	48a2      	ldr	r0, [pc, #648]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007e18:	f7fc ff35 	bl	8004c86 <TFT_String>
	Delay_ms(100);
 8007e1c:	2064      	movs	r0, #100	; 0x64
 8007e1e:	f7fb fed5 	bl	8003bcc <Delay_ms>


	while(1)
	{
		if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING)
 8007e22:	4ba4      	ldr	r3, [pc, #656]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d102      	bne.n	8007e32 <State_Position_Tracking+0x82>
		{
			Mode_key = FLAG_RESET;
 8007e2c:	4b9a      	ldr	r3, [pc, #616]	; (8008098 <State_Position_Tracking+0x2e8>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
		}


		/* If 'Motor State' is 'STOP' */
		if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8007e32:	4ba0      	ldr	r3, [pc, #640]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d147      	bne.n	8007ecc <State_Position_Tracking+0x11c>
		{
			// Set Reference Position of BLDC Motor with Key inputs
			temp_RefPosition = 10 * (Up_key - Down_key);
 8007e3c:	4b9e      	ldr	r3, [pc, #632]	; (80080b8 <State_Position_Tracking+0x308>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b9e      	ldr	r3, [pc, #632]	; (80080bc <State_Position_Tracking+0x30c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1ad2      	subs	r2, r2, r3
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]

			if(temp_RefPosition > 99999)			BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, 99999);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a9b      	ldr	r2, [pc, #620]	; (80080c0 <State_Position_Tracking+0x310>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	dd06      	ble.n	8007e66 <State_Position_Tracking+0xb6>
 8007e58:	4a96      	ldr	r2, [pc, #600]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e5a:	a489      	add	r4, pc, #548	; (adr r4, 8008080 <State_Position_Tracking+0x2d0>)
 8007e5c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007e60:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007e64:	e012      	b.n	8007e8c <State_Position_Tracking+0xdc>
			else if(temp_RefPosition < -99999)		BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, -99999);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a96      	ldr	r2, [pc, #600]	; (80080c4 <State_Position_Tracking+0x314>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	da06      	bge.n	8007e7c <State_Position_Tracking+0xcc>
 8007e6e:	4a91      	ldr	r2, [pc, #580]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e70:	a485      	add	r4, pc, #532	; (adr r4, 8008088 <State_Position_Tracking+0x2d8>)
 8007e72:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007e76:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007e7a:	e007      	b.n	8007e8c <State_Position_Tracking+0xdc>
			else									BLDC_SET_REFERENCE_POSITION(&BLDC1Handle, temp_RefPosition);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7f8 fad1 	bl	8000424 <__aeabi_i2d>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	4a8b      	ldr	r2, [pc, #556]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e88:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

			BLDC1Handle.TrjRefMaxSpeed = 7500;
 8007e8c:	4a89      	ldr	r2, [pc, #548]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e8e:	a480      	add	r4, pc, #512	; (adr r4, 8008090 <State_Position_Tracking+0x2e0>)
 8007e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007e94:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
			BLDC1Handle.TrjRefAcceleration = 2000;
 8007e98:	4a86      	ldr	r2, [pc, #536]	; (80080b4 <State_Position_Tracking+0x304>)
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	4c8a      	ldr	r4, [pc, #552]	; (80080c8 <State_Position_Tracking+0x318>)
 8007ea0:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

			// Display Reference Position value
			TFT_xy(&TFT1Handle, 31, 18);
 8007ea4:	2212      	movs	r2, #18
 8007ea6:	211f      	movs	r1, #31
 8007ea8:	487d      	ldr	r0, [pc, #500]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007eaa:	f7fc fe3f 	bl	8004b2c <TFT_xy>
			TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefPosition, 5, 1);
 8007eae:	4b81      	ldr	r3, [pc, #516]	; (80080b4 <State_Position_Tracking+0x304>)
 8007eb0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007eb4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	4621      	mov	r1, r4
 8007ebc:	f7f8 fe14 	bl	8000ae8 <__aeabi_d2f>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	4876      	ldr	r0, [pc, #472]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007ec8:	f7fe f8f6 	bl	80060b8 <TFT_Signed_float>
		}


		/* Display (Reference, Trajectory Current, Current) Position value */
		TFT_xy(&TFT1Handle, 31, 18);
 8007ecc:	2212      	movs	r2, #18
 8007ece:	211f      	movs	r1, #31
 8007ed0:	4873      	ldr	r0, [pc, #460]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007ed2:	f7fc fe2b 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.RefPosition, 5, 1);
 8007ed6:	4b77      	ldr	r3, [pc, #476]	; (80080b4 <State_Position_Tracking+0x304>)
 8007ed8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8007edc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f7f8 fe00 	bl	8000ae8 <__aeabi_d2f>
 8007ee8:	4601      	mov	r1, r0
 8007eea:	2301      	movs	r3, #1
 8007eec:	2205      	movs	r2, #5
 8007eee:	486c      	ldr	r0, [pc, #432]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007ef0:	f7fe f8e2 	bl	80060b8 <TFT_Signed_float>
		TFT_xy(&TFT1Handle, 31, 20);
 8007ef4:	2214      	movs	r2, #20
 8007ef6:	211f      	movs	r1, #31
 8007ef8:	4869      	ldr	r0, [pc, #420]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007efa:	f7fc fe17 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.TrjCurPosition, 5, 1);
 8007efe:	4b6d      	ldr	r3, [pc, #436]	; (80080b4 <State_Position_Tracking+0x304>)
 8007f00:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8007f04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	f7f8 fdec 	bl	8000ae8 <__aeabi_d2f>
 8007f10:	4601      	mov	r1, r0
 8007f12:	2301      	movs	r3, #1
 8007f14:	2205      	movs	r2, #5
 8007f16:	4862      	ldr	r0, [pc, #392]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f18:	f7fe f8ce 	bl	80060b8 <TFT_Signed_float>
		TFT_xy(&TFT1Handle, 31, 22);
 8007f1c:	2216      	movs	r2, #22
 8007f1e:	211f      	movs	r1, #31
 8007f20:	485f      	ldr	r0, [pc, #380]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f22:	f7fc fe03 	bl	8004b2c <TFT_xy>
		TFT_Signed_float(&TFT1Handle, BLDC1Handle.CurPosition, 5, 1);
 8007f26:	4b63      	ldr	r3, [pc, #396]	; (80080b4 <State_Position_Tracking+0x304>)
 8007f28:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8007f2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	4621      	mov	r1, r4
 8007f34:	f7f8 fdd8 	bl	8000ae8 <__aeabi_d2f>
 8007f38:	4601      	mov	r1, r0
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	2205      	movs	r2, #5
 8007f3e:	4858      	ldr	r0, [pc, #352]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f40:	f7fe f8ba 	bl	80060b8 <TFT_Signed_float>


		/* Draw Graph of Motor Position */
		Draw_Graph(&TFT1Handle);
 8007f44:	4856      	ldr	r0, [pc, #344]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f46:	f001 f8f9 	bl	800913c <Draw_Graph>


		/* If 'Start' key is pressed */
		if(Start_key >= FLAG_SET)
 8007f4a:	4b54      	ldr	r3, [pc, #336]	; (800809c <State_Position_Tracking+0x2ec>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f340 816e 	ble.w	8008230 <State_Position_Tracking+0x480>
		{
			/* Wait to Avoid Key chattering */
			Delay_ms(200);
 8007f54:	20c8      	movs	r0, #200	; 0xc8
 8007f56:	f7fb fe39 	bl	8003bcc <Delay_ms>

			/* If 'Motor State' is 'STOP' */
			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8007f5a:	4b56      	ldr	r3, [pc, #344]	; (80080b4 <State_Position_Tracking+0x304>)
 8007f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f040 813d 	bne.w	80081e0 <State_Position_Tracking+0x430>
			{
				/* 'Motor State' Changes from 'STOP' to 'POSITION TRACKING' */

				// 1. Clear Graph Screen
				Clear_Graph(&TFT1Handle);
 8007f66:	484e      	ldr	r0, [pc, #312]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f68:	f001 fcf8 	bl	800995c <Clear_Graph>
				Delay_ms(10);
 8007f6c:	200a      	movs	r0, #10
 8007f6e:	f7fb fe2d 	bl	8003bcc <Delay_ms>

				// 2. Draw Axis of Graph
				Draw_axis(&TFT1Handle, State);
 8007f72:	4b4c      	ldr	r3, [pc, #304]	; (80080a4 <State_Position_Tracking+0x2f4>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	4619      	mov	r1, r3
 8007f78:	4849      	ldr	r0, [pc, #292]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f7a:	f000 fb67 	bl	800864c <Draw_axis>

				// 3. Print Strings
				TFT_String(&TFT1Handle, 25, 18, White, Black, (uint8_t*)"Ref : ");
 8007f7e:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <State_Position_Tracking+0x2f8>)
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f8a:	2212      	movs	r2, #18
 8007f8c:	2119      	movs	r1, #25
 8007f8e:	4844      	ldr	r0, [pc, #272]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007f90:	f7fc fe79 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 8007f94:	4b45      	ldr	r3, [pc, #276]	; (80080ac <State_Position_Tracking+0x2fc>)
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fa0:	2214      	movs	r2, #20
 8007fa2:	2119      	movs	r1, #25
 8007fa4:	483e      	ldr	r0, [pc, #248]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007fa6:	f7fc fe6e 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8007faa:	4b41      	ldr	r3, [pc, #260]	; (80080b0 <State_Position_Tracking+0x300>)
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fb6:	2216      	movs	r2, #22
 8007fb8:	2119      	movs	r1, #25
 8007fba:	4839      	ldr	r0, [pc, #228]	; (80080a0 <State_Position_Tracking+0x2f0>)
 8007fbc:	f7fc fe63 	bl	8004c86 <TFT_String>

				// 4. Set PID gain
				BLDC_PID_GAIN_SET(&BLDC1Handle, 25, 4, 0);		// 25, 4, 0
 8007fc0:	4a3c      	ldr	r2, [pc, #240]	; (80080b4 <State_Position_Tracking+0x304>)
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	4c41      	ldr	r4, [pc, #260]	; (80080cc <State_Position_Tracking+0x31c>)
 8007fc8:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
 8007fcc:	4a39      	ldr	r2, [pc, #228]	; (80080b4 <State_Position_Tracking+0x304>)
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	4c3f      	ldr	r4, [pc, #252]	; (80080d0 <State_Position_Tracking+0x320>)
 8007fd4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
 8007fd8:	4a36      	ldr	r2, [pc, #216]	; (80080b4 <State_Position_Tracking+0x304>)
 8007fda:	f04f 0300 	mov.w	r3, #0
 8007fde:	f04f 0400 	mov.w	r4, #0
 8007fe2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

				// 5. Set Direction of Rotation
				if(BLDC1Handle.RefPosition >= 0)			BLDC1Handle.RotationDir = CW;
 8007fe6:	4b33      	ldr	r3, [pc, #204]	; (80080b4 <State_Position_Tracking+0x304>)
 8007fe8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	f7f8 fd06 	bl	8000a04 <__aeabi_dcmpge>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <State_Position_Tracking+0x258>
 8007ffe:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <State_Position_Tracking+0x304>)
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008006:	e00f      	b.n	8008028 <State_Position_Tracking+0x278>
				else if(BLDC1Handle.RefPosition < 0)		BLDC1Handle.RotationDir = CCW;
 8008008:	4b2a      	ldr	r3, [pc, #168]	; (80080b4 <State_Position_Tracking+0x304>)
 800800a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	f7f8 fce1 	bl	80009dc <__aeabi_dcmplt>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <State_Position_Tracking+0x278>
 8008020:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <State_Position_Tracking+0x304>)
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				// 6. Set Old HallPhase location based on Current HallPhase
				BLDC_SET_OLD_HALLPHASE(&BLDC1Handle);
 8008028:	4b2a      	ldr	r3, [pc, #168]	; (80080d4 <State_Position_Tracking+0x324>)
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <State_Position_Tracking+0x304>)
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4013      	ands	r3, r2
 8008032:	099b      	lsrs	r3, r3, #6
 8008034:	b29a      	uxth	r2, r3
 8008036:	4b1f      	ldr	r3, [pc, #124]	; (80080b4 <State_Position_Tracking+0x304>)
 8008038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800803c:	4b1d      	ldr	r3, [pc, #116]	; (80080b4 <State_Position_Tracking+0x304>)
 800803e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008042:	3b01      	subs	r3, #1
 8008044:	2b05      	cmp	r3, #5
 8008046:	f200 80b4 	bhi.w	80081b2 <State_Position_Tracking+0x402>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <State_Position_Tracking+0x2a0>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	0800818d 	.word	0x0800818d
 8008054:	080080ed 	.word	0x080080ed
 8008058:	08008069 	.word	0x08008069
 800805c:	0800813d 	.word	0x0800813d
 8008060:	08008165 	.word	0x08008165
 8008064:	08008115 	.word	0x08008115
 8008068:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <State_Position_Tracking+0x304>)
 800806a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800806e:	2b00      	cmp	r3, #0
 8008070:	d132      	bne.n	80080d8 <State_Position_Tracking+0x328>
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <State_Position_Tracking+0x304>)
 8008074:	2202      	movs	r2, #2
 8008076:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800807a:	e09a      	b.n	80081b2 <State_Position_Tracking+0x402>
 800807c:	f3af 8000 	nop.w
 8008080:	00000000 	.word	0x00000000
 8008084:	40f869f0 	.word	0x40f869f0
 8008088:	00000000 	.word	0x00000000
 800808c:	c0f869f0 	.word	0xc0f869f0
 8008090:	00000000 	.word	0x00000000
 8008094:	40bd4c00 	.word	0x40bd4c00
 8008098:	20000210 	.word	0x20000210
 800809c:	2000021c 	.word	0x2000021c
 80080a0:	200003dc 	.word	0x200003dc
 80080a4:	2000020c 	.word	0x2000020c
 80080a8:	0800be80 	.word	0x0800be80
 80080ac:	0800be90 	.word	0x0800be90
 80080b0:	0800be88 	.word	0x0800be88
 80080b4:	200002a8 	.word	0x200002a8
 80080b8:	20000214 	.word	0x20000214
 80080bc:	20000218 	.word	0x20000218
 80080c0:	0001869f 	.word	0x0001869f
 80080c4:	fffe7961 	.word	0xfffe7961
 80080c8:	409f4000 	.word	0x409f4000
 80080cc:	40390000 	.word	0x40390000
 80080d0:	40100000 	.word	0x40100000
 80080d4:	40011000 	.word	0x40011000
 80080d8:	4b67      	ldr	r3, [pc, #412]	; (8008278 <State_Position_Tracking+0x4c8>)
 80080da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d167      	bne.n	80081b2 <State_Position_Tracking+0x402>
 80080e2:	4b65      	ldr	r3, [pc, #404]	; (8008278 <State_Position_Tracking+0x4c8>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80080ea:	e062      	b.n	80081b2 <State_Position_Tracking+0x402>
 80080ec:	4b62      	ldr	r3, [pc, #392]	; (8008278 <State_Position_Tracking+0x4c8>)
 80080ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <State_Position_Tracking+0x350>
 80080f6:	4b60      	ldr	r3, [pc, #384]	; (8008278 <State_Position_Tracking+0x4c8>)
 80080f8:	2206      	movs	r2, #6
 80080fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80080fe:	e058      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008100:	4b5d      	ldr	r3, [pc, #372]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008106:	2b01      	cmp	r3, #1
 8008108:	d153      	bne.n	80081b2 <State_Position_Tracking+0x402>
 800810a:	4b5b      	ldr	r3, [pc, #364]	; (8008278 <State_Position_Tracking+0x4c8>)
 800810c:	2203      	movs	r2, #3
 800810e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8008112:	e04e      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008114:	4b58      	ldr	r3, [pc, #352]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <State_Position_Tracking+0x378>
 800811e:	4b56      	ldr	r3, [pc, #344]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008120:	2204      	movs	r2, #4
 8008122:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8008126:	e044      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008128:	4b53      	ldr	r3, [pc, #332]	; (8008278 <State_Position_Tracking+0x4c8>)
 800812a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812e:	2b01      	cmp	r3, #1
 8008130:	d13f      	bne.n	80081b2 <State_Position_Tracking+0x402>
 8008132:	4b51      	ldr	r3, [pc, #324]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008134:	2202      	movs	r2, #2
 8008136:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800813a:	e03a      	b.n	80081b2 <State_Position_Tracking+0x402>
 800813c:	4b4e      	ldr	r3, [pc, #312]	; (8008278 <State_Position_Tracking+0x4c8>)
 800813e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <State_Position_Tracking+0x3a0>
 8008146:	4b4c      	ldr	r3, [pc, #304]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008148:	2205      	movs	r2, #5
 800814a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800814e:	e030      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008150:	4b49      	ldr	r3, [pc, #292]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008156:	2b01      	cmp	r3, #1
 8008158:	d12b      	bne.n	80081b2 <State_Position_Tracking+0x402>
 800815a:	4b47      	ldr	r3, [pc, #284]	; (8008278 <State_Position_Tracking+0x4c8>)
 800815c:	2206      	movs	r2, #6
 800815e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8008162:	e026      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008164:	4b44      	ldr	r3, [pc, #272]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <State_Position_Tracking+0x3c8>
 800816e:	4b42      	ldr	r3, [pc, #264]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008170:	2201      	movs	r2, #1
 8008172:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8008176:	e01c      	b.n	80081b2 <State_Position_Tracking+0x402>
 8008178:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <State_Position_Tracking+0x4c8>)
 800817a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800817e:	2b01      	cmp	r3, #1
 8008180:	d117      	bne.n	80081b2 <State_Position_Tracking+0x402>
 8008182:	4b3d      	ldr	r3, [pc, #244]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008184:	2204      	movs	r2, #4
 8008186:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800818a:	e012      	b.n	80081b2 <State_Position_Tracking+0x402>
 800818c:	4b3a      	ldr	r3, [pc, #232]	; (8008278 <State_Position_Tracking+0x4c8>)
 800818e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <State_Position_Tracking+0x3f0>
 8008196:	4b38      	ldr	r3, [pc, #224]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008198:	2203      	movs	r2, #3
 800819a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800819e:	e008      	b.n	80081b2 <State_Position_Tracking+0x402>
 80081a0:	4b35      	ldr	r3, [pc, #212]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d103      	bne.n	80081b2 <State_Position_Tracking+0x402>
 80081aa:	4b33      	ldr	r3, [pc, #204]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081ac:	2205      	movs	r2, #5
 80081ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80081b2:	bf00      	nop

				// 7. Charge Bootstrap Capacitor for 10ms
				BLDC_BootstrapCap_Charge(&BLDC1Handle);
 80081b4:	4830      	ldr	r0, [pc, #192]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081b6:	f7fa fd9f 	bl	8002cf8 <BLDC_BootstrapCap_Charge>

				// 8. Enable EXTI of Hall sensor
				ENABLE_HALLSENSOR_EXTI();
 80081ba:	2201      	movs	r2, #1
 80081bc:	2108      	movs	r1, #8
 80081be:	2017      	movs	r0, #23
 80081c0:	f7fb fb62 	bl	8003888 <NVIC_IRQConfig>

				// 9. Trigger EXTI interrupt by SW to Execute 'BLDC_Drive' function. (Top Logic On, Bottom PWM On. But TIM_CCR == 0)
				EXTI->SWIER |= (0x1 << 5);		// The purpose of this line is to trigger EXTI9_5_IRQHandler. So, 5 can be replaced by 6, 7.
 80081c4:	4b2d      	ldr	r3, [pc, #180]	; (800827c <State_Position_Tracking+0x4cc>)
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	4a2c      	ldr	r2, [pc, #176]	; (800827c <State_Position_Tracking+0x4cc>)
 80081ca:	f043 0320 	orr.w	r3, r3, #32
 80081ce:	6113      	str	r3, [r2, #16]

				// 10. Reset HallCount value to 0. When EXTI9_5_IRQHandler is triggered, BLDC_Get_Position function increases / dicrease HallCount value by 1
				BLDC1Handle.HallCount = 0;
 80081d0:	4b29      	ldr	r3, [pc, #164]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	659a      	str	r2, [r3, #88]	; 0x58

				// 11. Change MotorState from MOTOR_STATE_STOP to MOTOR_STATE_POSITION_TRACKING
				BLDC1Handle.MotorState = MOTOR_STATE_POSITION_TRACKING;
 80081d6:	4b28      	ldr	r3, [pc, #160]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081d8:	2203      	movs	r2, #3
 80081da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80081de:	e024      	b.n	800822a <State_Position_Tracking+0x47a>
			}


			/* If 'Motor state' is 'POSITION_TRACKING' */
			else if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING)
 80081e0:	4b25      	ldr	r3, [pc, #148]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d11f      	bne.n	800822a <State_Position_Tracking+0x47a>
			{
				// 1. Disable EXTI of Hall sensor
				DISABLE_HALLSENSOR_EXTI();
 80081ea:	2200      	movs	r2, #0
 80081ec:	2108      	movs	r1, #8
 80081ee:	2017      	movs	r0, #23
 80081f0:	f7fb fb4a 	bl	8003888 <NVIC_IRQConfig>

				// 2. Clear GPIO pin of Top side(UT, VT, WT)
				GPIO_WritePin(BLDC1Handle.Init.GPIOx_Top, BLDC1Handle.Init.GPIO_Pins_Top, GPIO_PIN_RESET);
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081f6:	6858      	ldr	r0, [r3, #4]
 80081f8:	4b1f      	ldr	r3, [pc, #124]	; (8008278 <State_Position_Tracking+0x4c8>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2200      	movs	r2, #0
 8008200:	4619      	mov	r1, r3
 8008202:	f7f9 fd33 	bl	8001c6c <GPIO_WritePin>

				// 3. Disable All PWM channels
				DisableTimerPwmChannel(&BLDC1Handle);
 8008206:	481c      	ldr	r0, [pc, #112]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008208:	f001 fcf4 	bl	8009bf4 <DisableTimerPwmChannel>

				// 4. Change MotorState from MOTOR_STATE_POSITION_TRACKING to MOTOR_STATE_STOP
				BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <State_Position_Tracking+0x4c8>)
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				// 5. Reset variables
				Reset_Position_Variables();
 8008214:	f000 f97a 	bl	800850c <Reset_Position_Variables>

				Mode_key = 0;
 8008218:	4b19      	ldr	r3, [pc, #100]	; (8008280 <State_Position_Tracking+0x4d0>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
				Up_key = 0;
 800821e:	4b19      	ldr	r3, [pc, #100]	; (8008284 <State_Position_Tracking+0x4d4>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
				Down_key = 0;
 8008224:	4b18      	ldr	r3, [pc, #96]	; (8008288 <State_Position_Tracking+0x4d8>)
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
			}

			Start_key = FLAG_RESET;
 800822a:	4b18      	ldr	r3, [pc, #96]	; (800828c <State_Position_Tracking+0x4dc>)
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
		}


		/* If Mode key is pressed when Motor is running, Ignore the Mode key press  */
		if( (BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING) && (Mode_key >= FLAG_SET) )
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <State_Position_Tracking+0x4c8>)
 8008232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008236:	2b03      	cmp	r3, #3
 8008238:	d107      	bne.n	800824a <State_Position_Tracking+0x49a>
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <State_Position_Tracking+0x4d0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd03      	ble.n	800824a <State_Position_Tracking+0x49a>
		{
			Mode_key = FLAG_RESET;
 8008242:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <State_Position_Tracking+0x4d0>)
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e011      	b.n	800826e <State_Position_Tracking+0x4be>
		}

		/* If Mode key is pressed when Motor is stopped, Return to the Menu state  */
		else if( (BLDC1Handle.MotorState == MOTOR_STATE_STOP) && (Mode_key >= FLAG_SET) )
 800824a:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <State_Position_Tracking+0x4c8>)
 800824c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008250:	2b00      	cmp	r3, #0
 8008252:	f47f ade6 	bne.w	8007e22 <State_Position_Tracking+0x72>
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <State_Position_Tracking+0x4d0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f77f ade1 	ble.w	8007e22 <State_Position_Tracking+0x72>
		{
			State = STATE_MENU;
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <State_Position_Tracking+0x4e0>)
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
			Mode_key = FLAG_RESET;
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <State_Position_Tracking+0x4d0>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
			break;
 800826c:	e000      	b.n	8008270 <State_Position_Tracking+0x4c0>
		if(BLDC1Handle.MotorState == MOTOR_STATE_POSITION_TRACKING)
 800826e:	e5d8      	b.n	8007e22 <State_Position_Tracking+0x72>
		}
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	200002a8 	.word	0x200002a8
 800827c:	40010400 	.word	0x40010400
 8008280:	20000210 	.word	0x20000210
 8008284:	20000214 	.word	0x20000214
 8008288:	20000218 	.word	0x20000218
 800828c:	2000021c 	.word	0x2000021c
 8008290:	2000020c 	.word	0x2000020c

08008294 <Reset_All_Variables>:



void Reset_All_Variables(void)
{
 8008294:	b598      	push	{r3, r4, r7, lr}
 8008296:	af00      	add	r7, sp, #0
	// Reset Global Structure members
	BLDC1Handle.MotorState = MOTOR_STATE_STOP;
 8008298:	4b57      	ldr	r3, [pc, #348]	; (80083f8 <Reset_All_Variables+0x164>)
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	BLDC1Handle.HallCount = 0;
 80082a0:	4b55      	ldr	r3, [pc, #340]	; (80083f8 <Reset_All_Variables+0x164>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 80082a6:	4b54      	ldr	r3, [pc, #336]	; (80083f8 <Reset_All_Variables+0x164>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 80082ac:	4a52      	ldr	r2, [pc, #328]	; (80083f8 <Reset_All_Variables+0x164>)
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	f04f 0400 	mov.w	r4, #0
 80082b6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 80082ba:	4a4f      	ldr	r2, [pc, #316]	; (80083f8 <Reset_All_Variables+0x164>)
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	f04f 0400 	mov.w	r4, #0
 80082c4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.CurPosition = 0;
 80082c8:	4a4b      	ldr	r2, [pc, #300]	; (80083f8 <Reset_All_Variables+0x164>)
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	f04f 0400 	mov.w	r4, #0
 80082d2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 80082d6:	4a48      	ldr	r2, [pc, #288]	; (80083f8 <Reset_All_Variables+0x164>)
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	f04f 0400 	mov.w	r4, #0
 80082e0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 80082e4:	4a44      	ldr	r2, [pc, #272]	; (80083f8 <Reset_All_Variables+0x164>)
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	f04f 0400 	mov.w	r4, #0
 80082ee:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	BLDC1Handle.TrjCurPosition = 0;
 80082f2:	4a41      	ldr	r2, [pc, #260]	; (80083f8 <Reset_All_Variables+0x164>)
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	f04f 0400 	mov.w	r4, #0
 80082fc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8008300:	4a3d      	ldr	r2, [pc, #244]	; (80083f8 <Reset_All_Variables+0x164>)
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	f04f 0400 	mov.w	r4, #0
 800830a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 800830e:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <Reset_All_Variables+0x164>)
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	f04f 0400 	mov.w	r4, #0
 8008318:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 800831c:	4a36      	ldr	r2, [pc, #216]	; (80083f8 <Reset_All_Variables+0x164>)
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	f04f 0400 	mov.w	r4, #0
 8008326:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 800832a:	4a33      	ldr	r2, [pc, #204]	; (80083f8 <Reset_All_Variables+0x164>)
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	BLDC1Handle.Kp = 0;
 8008338:	4a2f      	ldr	r2, [pc, #188]	; (80083f8 <Reset_All_Variables+0x164>)
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	f04f 0400 	mov.w	r4, #0
 8008342:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 8008346:	4a2c      	ldr	r2, [pc, #176]	; (80083f8 <Reset_All_Variables+0x164>)
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f04f 0400 	mov.w	r4, #0
 8008350:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8008354:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <Reset_All_Variables+0x164>)
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	f04f 0400 	mov.w	r4, #0
 800835e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8008362:	4a25      	ldr	r2, [pc, #148]	; (80083f8 <Reset_All_Variables+0x164>)
 8008364:	f04f 0300 	mov.w	r3, #0
 8008368:	f04f 0400 	mov.w	r4, #0
 800836c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8008370:	4a21      	ldr	r2, [pc, #132]	; (80083f8 <Reset_All_Variables+0x164>)
 8008372:	f04f 0300 	mov.w	r3, #0
 8008376:	f04f 0400 	mov.w	r4, #0
 800837a:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 800837e:	4a1e      	ldr	r2, [pc, #120]	; (80083f8 <Reset_All_Variables+0x164>)
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	f04f 0400 	mov.w	r4, #0
 8008388:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 800838c:	4a1a      	ldr	r2, [pc, #104]	; (80083f8 <Reset_All_Variables+0x164>)
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	f04f 0400 	mov.w	r4, #0
 8008396:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 800839a:	4a17      	ldr	r2, [pc, #92]	; (80083f8 <Reset_All_Variables+0x164>)
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	f04f 0400 	mov.w	r4, #0
 80083a4:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80083a8:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <Reset_All_Variables+0x164>)
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	f04f 0400 	mov.w	r4, #0
 80083b2:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	// Reset Graph variables
	TFT_Color(&TFT1Handle, White, Black);
 80083b6:	2200      	movs	r2, #0
 80083b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083bc:	480f      	ldr	r0, [pc, #60]	; (80083fc <Reset_All_Variables+0x168>)
 80083be:	f7fc fbca 	bl	8004b56 <TFT_Color>
	x = 0;
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <Reset_All_Variables+0x16c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	801a      	strh	r2, [r3, #0]
	y = 0;
 80083c8:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <Reset_All_Variables+0x170>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 80083ce:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <Reset_All_Variables+0x174>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 80083d4:	4b0d      	ldr	r3, [pc, #52]	; (800840c <Reset_All_Variables+0x178>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	801a      	strh	r2, [r3, #0]

	// Reset Key variables
	Mode_key = 0;
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <Reset_All_Variables+0x17c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
	Up_key = 0;
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <Reset_All_Variables+0x180>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
	Down_key = 0;
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <Reset_All_Variables+0x184>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
	Start_key = 0;
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <Reset_All_Variables+0x188>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
}
 80083f2:	bf00      	nop
 80083f4:	bd98      	pop	{r3, r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200002a8 	.word	0x200002a8
 80083fc:	200003dc 	.word	0x200003dc
 8008400:	20000240 	.word	0x20000240
 8008404:	20000242 	.word	0x20000242
 8008408:	20000244 	.word	0x20000244
 800840c:	20000246 	.word	0x20000246
 8008410:	20000210 	.word	0x20000210
 8008414:	20000214 	.word	0x20000214
 8008418:	20000218 	.word	0x20000218
 800841c:	2000021c 	.word	0x2000021c

08008420 <Reset_Speed_Variables>:


void Reset_Speed_Variables(void)
{
 8008420:	b598      	push	{r3, r4, r7, lr}
 8008422:	af00      	add	r7, sp, #0
	BLDC1Handle.HallCount = 0;
 8008424:	4b33      	ldr	r3, [pc, #204]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008426:	2200      	movs	r2, #0
 8008428:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 800842a:	4b32      	ldr	r3, [pc, #200]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 800842c:	2200      	movs	r2, #0
 800842e:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurSpeed = 0;
 8008430:	4a30      	ldr	r2, [pc, #192]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	f04f 0400 	mov.w	r4, #0
 800843a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	BLDC1Handle.RefSpeed = 0;
 800843e:	4a2d      	ldr	r2, [pc, #180]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	f04f 0400 	mov.w	r4, #0
 8008448:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	BLDC1Handle.Kp = 0;
 800844c:	4a29      	ldr	r2, [pc, #164]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	f04f 0400 	mov.w	r4, #0
 8008456:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 800845a:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 8008468:	4a22      	ldr	r2, [pc, #136]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	f04f 0400 	mov.w	r4, #0
 8008472:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 8008476:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	f04f 0400 	mov.w	r4, #0
 8008480:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	f04f 0400 	mov.w	r4, #0
 800848e:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 8008492:	4a18      	ldr	r2, [pc, #96]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	f04f 0400 	mov.w	r4, #0
 800849c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80084a0:	4a14      	ldr	r2, [pc, #80]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 80084a2:	f04f 0300 	mov.w	r3, #0
 80084a6:	f04f 0400 	mov.w	r4, #0
 80084aa:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 80084ae:	4a11      	ldr	r2, [pc, #68]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	f04f 0400 	mov.w	r4, #0
 80084b8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80084bc:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <Reset_Speed_Variables+0xd4>)
 80084be:	f04f 0300 	mov.w	r3, #0
 80084c2:	f04f 0400 	mov.w	r4, #0
 80084c6:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	/* Graph variables */
	TFT_Color(&TFT1Handle, White, Black);
 80084ca:	2200      	movs	r2, #0
 80084cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <Reset_Speed_Variables+0xd8>)
 80084d2:	f7fc fb40 	bl	8004b56 <TFT_Color>
	x = 0;
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <Reset_Speed_Variables+0xdc>)
 80084d8:	2200      	movs	r2, #0
 80084da:	801a      	strh	r2, [r3, #0]
	y = 0;
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <Reset_Speed_Variables+0xe0>)
 80084de:	2200      	movs	r2, #0
 80084e0:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <Reset_Speed_Variables+0xe4>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <Reset_Speed_Variables+0xe8>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	801a      	strh	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	bd98      	pop	{r3, r4, r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200002a8 	.word	0x200002a8
 80084f8:	200003dc 	.word	0x200003dc
 80084fc:	20000240 	.word	0x20000240
 8008500:	20000242 	.word	0x20000242
 8008504:	20000244 	.word	0x20000244
 8008508:	20000246 	.word	0x20000246

0800850c <Reset_Position_Variables>:


void Reset_Position_Variables(void)
{
 800850c:	b598      	push	{r3, r4, r7, lr}
 800850e:	af00      	add	r7, sp, #0
	BLDC1Handle.HallCount = 0;
 8008510:	4b48      	ldr	r3, [pc, #288]	; (8008634 <Reset_Position_Variables+0x128>)
 8008512:	2200      	movs	r2, #0
 8008514:	659a      	str	r2, [r3, #88]	; 0x58
	BLDC1Handle.OldHallCount = 0;
 8008516:	4b47      	ldr	r3, [pc, #284]	; (8008634 <Reset_Position_Variables+0x128>)
 8008518:	2200      	movs	r2, #0
 800851a:	65da      	str	r2, [r3, #92]	; 0x5c
	BLDC1Handle.CurPosition = 0;
 800851c:	4a45      	ldr	r2, [pc, #276]	; (8008634 <Reset_Position_Variables+0x128>)
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	f04f 0400 	mov.w	r4, #0
 8008526:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	BLDC1Handle.RefPosition = 0;
 800852a:	4a42      	ldr	r2, [pc, #264]	; (8008634 <Reset_Position_Variables+0x128>)
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	f04f 0400 	mov.w	r4, #0
 8008534:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	BLDC1Handle.PrvRefPosition = 0;
 8008538:	4a3e      	ldr	r2, [pc, #248]	; (8008634 <Reset_Position_Variables+0x128>)
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	f04f 0400 	mov.w	r4, #0
 8008542:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	BLDC1Handle.TrjCurPosition = 0;
 8008546:	4a3b      	ldr	r2, [pc, #236]	; (8008634 <Reset_Position_Variables+0x128>)
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	f04f 0400 	mov.w	r4, #0
 8008550:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	BLDC1Handle.TrjCurSpeed = 0;
 8008554:	4a37      	ldr	r2, [pc, #220]	; (8008634 <Reset_Position_Variables+0x128>)
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	f04f 0400 	mov.w	r4, #0
 800855e:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	BLDC1Handle.TrjRefMaxSpeed = 0;
 8008562:	4a34      	ldr	r2, [pc, #208]	; (8008634 <Reset_Position_Variables+0x128>)
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	f04f 0400 	mov.w	r4, #0
 800856c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	BLDC1Handle.TrjRefAcceleration = 0;
 8008570:	4a30      	ldr	r2, [pc, #192]	; (8008634 <Reset_Position_Variables+0x128>)
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	f04f 0400 	mov.w	r4, #0
 800857a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	BLDC1Handle.TrjDtAcceleration = 0;
 800857e:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <Reset_Position_Variables+0x128>)
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	f04f 0400 	mov.w	r4, #0
 8008588:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	BLDC1Handle.Kp = 0;
 800858c:	4a29      	ldr	r2, [pc, #164]	; (8008634 <Reset_Position_Variables+0x128>)
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f04f 0400 	mov.w	r4, #0
 8008596:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	BLDC1Handle.Ki = 0;
 800859a:	4a26      	ldr	r2, [pc, #152]	; (8008634 <Reset_Position_Variables+0x128>)
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	f04f 0400 	mov.w	r4, #0
 80085a4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	BLDC1Handle.Kd = 0;
 80085a8:	4a22      	ldr	r2, [pc, #136]	; (8008634 <Reset_Position_Variables+0x128>)
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	f04f 0400 	mov.w	r4, #0
 80085b2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	BLDC1Handle.Error = 0;
 80085b6:	4a1f      	ldr	r2, [pc, #124]	; (8008634 <Reset_Position_Variables+0x128>)
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	f04f 0400 	mov.w	r4, #0
 80085c0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	BLDC1Handle.PrvError = 0;
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <Reset_Position_Variables+0x128>)
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f04f 0400 	mov.w	r4, #0
 80085ce:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	BLDC1Handle.P_term = 0;
 80085d2:	4a18      	ldr	r2, [pc, #96]	; (8008634 <Reset_Position_Variables+0x128>)
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	f04f 0400 	mov.w	r4, #0
 80085dc:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
	BLDC1Handle.I_term = 0;
 80085e0:	4a14      	ldr	r2, [pc, #80]	; (8008634 <Reset_Position_Variables+0x128>)
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	f04f 0400 	mov.w	r4, #0
 80085ea:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	BLDC1Handle.D_term = 0;
 80085ee:	4a11      	ldr	r2, [pc, #68]	; (8008634 <Reset_Position_Variables+0x128>)
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	f04f 0400 	mov.w	r4, #0
 80085f8:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
	BLDC1Handle.PwmPID = 0;
 80085fc:	4a0d      	ldr	r2, [pc, #52]	; (8008634 <Reset_Position_Variables+0x128>)
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	f04f 0400 	mov.w	r4, #0
 8008606:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

	/* Graph variables */
	TFT_Color(&TFT1Handle, White, Black);
 800860a:	2200      	movs	r2, #0
 800860c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008610:	4809      	ldr	r0, [pc, #36]	; (8008638 <Reset_Position_Variables+0x12c>)
 8008612:	f7fc faa0 	bl	8004b56 <TFT_Color>
	x = 0;
 8008616:	4b09      	ldr	r3, [pc, #36]	; (800863c <Reset_Position_Variables+0x130>)
 8008618:	2200      	movs	r2, #0
 800861a:	801a      	strh	r2, [r3, #0]
	y = 0;
 800861c:	4b08      	ldr	r3, [pc, #32]	; (8008640 <Reset_Position_Variables+0x134>)
 800861e:	2200      	movs	r2, #0
 8008620:	801a      	strh	r2, [r3, #0]
	x_prv = 0;
 8008622:	4b08      	ldr	r3, [pc, #32]	; (8008644 <Reset_Position_Variables+0x138>)
 8008624:	2200      	movs	r2, #0
 8008626:	801a      	strh	r2, [r3, #0]
	y_prv = 0;
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <Reset_Position_Variables+0x13c>)
 800862a:	2200      	movs	r2, #0
 800862c:	801a      	strh	r2, [r3, #0]
}
 800862e:	bf00      	nop
 8008630:	bd98      	pop	{r3, r4, r7, pc}
 8008632:	bf00      	nop
 8008634:	200002a8 	.word	0x200002a8
 8008638:	200003dc 	.word	0x200003dc
 800863c:	20000240 	.word	0x20000240
 8008640:	20000242 	.word	0x20000242
 8008644:	20000244 	.word	0x20000244
 8008648:	20000246 	.word	0x20000246

0800864c <Draw_axis>:


void Draw_axis(TFT_HandleTypeDef *pTFTHandle, uint8_t state)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b090      	sub	sp, #64	; 0x40
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
	if(state == STATE_SPEED)
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	2b01      	cmp	r3, #1
 800865c:	f040 823f 	bne.w	8008ade <Draw_axis+0x492>
	{
		TFT_String(pTFTHandle, 16, 0, White, Blue, (uint8_t *)"Speed Graph");
 8008660:	4bac      	ldr	r3, [pc, #688]	; (8008914 <Draw_axis+0x2c8>)
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	231f      	movs	r3, #31
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800866c:	2200      	movs	r2, #0
 800866e:	2110      	movs	r1, #16
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fc fb08 	bl	8004c86 <TFT_String>


		/* X-axis */

		// 1. Draw x-axis
		TFT_Line(pTFTHandle, 50, 216, 310, 216, White);		// straight line of x-axis
 8008676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	23d8      	movs	r3, #216	; 0xd8
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008684:	22d8      	movs	r2, #216	; 0xd8
 8008686:	2132      	movs	r1, #50	; 0x32
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7fd fdbd 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 211, 310, 216, White);	// upper arrow head of x-axis
 800868e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	23d8      	movs	r3, #216	; 0xd8
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	f44f 739b 	mov.w	r3, #310	; 0x136
 800869c:	22d3      	movs	r2, #211	; 0xd3
 800869e:	f240 1131 	movw	r1, #305	; 0x131
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fd fdb0 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 221, 310, 216, White);	// lower arrow head of x-axis
 80086a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	23d8      	movs	r3, #216	; 0xd8
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	f44f 739b 	mov.w	r3, #310	; 0x136
 80086b6:	22dd      	movs	r2, #221	; 0xdd
 80086b8:	f240 1131 	movw	r1, #305	; 0x131
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7fd fda3 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 100, 216, 100, 220, White); 	// gradation for 5[s]
 80086c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	23dc      	movs	r3, #220	; 0xdc
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	2364      	movs	r3, #100	; 0x64
 80086ce:	22d8      	movs	r2, #216	; 0xd8
 80086d0:	2164      	movs	r1, #100	; 0x64
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7fd fd98 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 150, 216, 150, 220, White); 	// gradation for 10[s]
 80086d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	23dc      	movs	r3, #220	; 0xdc
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	2396      	movs	r3, #150	; 0x96
 80086e4:	22d8      	movs	r2, #216	; 0xd8
 80086e6:	2196      	movs	r1, #150	; 0x96
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7fd fd8d 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 200, 216, 200, 220, White); 	// gradation for 15[s]
 80086ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	23dc      	movs	r3, #220	; 0xdc
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	23c8      	movs	r3, #200	; 0xc8
 80086fa:	22d8      	movs	r2, #216	; 0xd8
 80086fc:	21c8      	movs	r1, #200	; 0xc8
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fd fd82 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 250, 216, 250, 220, White); 	// gradation for 20[s]
 8008704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	23dc      	movs	r3, #220	; 0xdc
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	23fa      	movs	r3, #250	; 0xfa
 8008710:	22d8      	movs	r2, #216	; 0xd8
 8008712:	21fa      	movs	r1, #250	; 0xfa
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fd fd77 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 300, 216, 300, 220, White); 	// gradation for 25[s]
 800871a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800871e:	9301      	str	r3, [sp, #4]
 8008720:	23dc      	movs	r3, #220	; 0xdc
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008728:	22d8      	movs	r2, #216	; 0xd8
 800872a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fd fd6a 	bl	8006208 <TFT_Line>


		// 2. Draw dotted lines for x-axis
		for(int i = 100; i <= 300; i = i + 50)
 8008734:	2364      	movs	r3, #100	; 0x64
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	e014      	b.n	8008764 <Draw_axis+0x118>
		{
			for(int j = 20; j <= 215; j = j + 5)
 800873a:	2314      	movs	r3, #20
 800873c:	633b      	str	r3, [r7, #48]	; 0x30
 800873e:	e00b      	b.n	8008758 <Draw_axis+0x10c>
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	b299      	uxth	r1, r3
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	b29a      	uxth	r2, r3
 8008748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fc fa15 	bl	8004b7c <TFT_Pixel>
			for(int j = 20; j <= 215; j = j + 5)
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	3305      	adds	r3, #5
 8008756:	633b      	str	r3, [r7, #48]	; 0x30
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	2bd7      	cmp	r3, #215	; 0xd7
 800875c:	ddf0      	ble.n	8008740 <Draw_axis+0xf4>
		for(int i = 100; i <= 300; i = i + 50)
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	3332      	adds	r3, #50	; 0x32
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800876a:	dde6      	ble.n	800873a <Draw_axis+0xee>
			}
		}


		// 3. Print Time label[s] corresponding to the x-axis gradation
		TFT_Color(pTFTHandle, Cyan, Black);
 800876c:	2200      	movs	r2, #0
 800876e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fc f9ef 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');		// time label of 0[s]
 8008778:	2330      	movs	r3, #48	; 0x30
 800877a:	22de      	movs	r2, #222	; 0xde
 800877c:	2123      	movs	r1, #35	; 0x23
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fd fba0 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 97, 222, '5');		// time label of 5[s]
 8008784:	2335      	movs	r3, #53	; 0x35
 8008786:	22de      	movs	r2, #222	; 0xde
 8008788:	2161      	movs	r1, #97	; 0x61
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fd fb9a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 143, 222, '1');		// time label of 10[s]
 8008790:	2331      	movs	r3, #49	; 0x31
 8008792:	22de      	movs	r2, #222	; 0xde
 8008794:	218f      	movs	r1, #143	; 0x8f
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fd fb94 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 151, 222, '0');
 800879c:	2330      	movs	r3, #48	; 0x30
 800879e:	22de      	movs	r2, #222	; 0xde
 80087a0:	2197      	movs	r1, #151	; 0x97
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7fd fb8e 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 193, 222, '1');		// time label of 15[s]
 80087a8:	2331      	movs	r3, #49	; 0x31
 80087aa:	22de      	movs	r2, #222	; 0xde
 80087ac:	21c1      	movs	r1, #193	; 0xc1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fd fb88 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 201, 222, '5');
 80087b4:	2335      	movs	r3, #53	; 0x35
 80087b6:	22de      	movs	r2, #222	; 0xde
 80087b8:	21c9      	movs	r1, #201	; 0xc9
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fd fb82 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 243, 222, '2');		// time label of 20[s]
 80087c0:	2332      	movs	r3, #50	; 0x32
 80087c2:	22de      	movs	r2, #222	; 0xde
 80087c4:	21f3      	movs	r1, #243	; 0xf3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7fd fb7c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 251, 222, '0');
 80087cc:	2330      	movs	r3, #48	; 0x30
 80087ce:	22de      	movs	r2, #222	; 0xde
 80087d0:	21fb      	movs	r1, #251	; 0xfb
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7fd fb76 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 293, 222, '2');		// time label of 25[s]
 80087d8:	2332      	movs	r3, #50	; 0x32
 80087da:	22de      	movs	r2, #222	; 0xde
 80087dc:	f240 1125 	movw	r1, #293	; 0x125
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fd fb6f 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 301, 222, '5');
 80087e6:	2335      	movs	r3, #53	; 0x35
 80087e8:	22de      	movs	r2, #222	; 0xde
 80087ea:	f240 112d 	movw	r1, #301	; 0x12d
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fd fb68 	bl	8005ec4 <TFT_English_pixel>


		// 4. Print Time unit[s] to x-axis
		TFT_Color(pTFTHandle, Magenta, Black);
 80087f4:	2200      	movs	r2, #0
 80087f6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fc f9ab 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 288, 222, '[');		// time unit[s]
 8008800:	235b      	movs	r3, #91	; 0x5b
 8008802:	22de      	movs	r2, #222	; 0xde
 8008804:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fd fb5b 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 296, 222, 's');
 800880e:	2373      	movs	r3, #115	; 0x73
 8008810:	22de      	movs	r2, #222	; 0xde
 8008812:	f44f 7194 	mov.w	r1, #296	; 0x128
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fd fb54 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 304, 222, ']');
 800881c:	235d      	movs	r3, #93	; 0x5d
 800881e:	22de      	movs	r2, #222	; 0xde
 8008820:	f44f 7198 	mov.w	r1, #304	; 0x130
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fd fb4d 	bl	8005ec4 <TFT_English_pixel>


		/* Y-axis */

		// 1. Draw y-axis
		TFT_Line(pTFTHandle, 49, 215, 49, 5, White);		// straight line of y-axis
 800882a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	2305      	movs	r3, #5
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	2331      	movs	r3, #49	; 0x31
 8008836:	22d7      	movs	r2, #215	; 0xd7
 8008838:	2131      	movs	r1, #49	; 0x31
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fd fce4 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 44, 10, 49, 5, White);			// left arrow head of y-axis
 8008840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	2305      	movs	r3, #5
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	2331      	movs	r3, #49	; 0x31
 800884c:	220a      	movs	r2, #10
 800884e:	212c      	movs	r1, #44	; 0x2c
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7fd fcd9 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 54, 10, 49, 5, White);			// right arrow head of y-axis
 8008856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	2305      	movs	r3, #5
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2331      	movs	r3, #49	; 0x31
 8008862:	220a      	movs	r2, #10
 8008864:	2136      	movs	r1, #54	; 0x36
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7fd fcce 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 20, 49, 20, White);		// gradation for +1200[rpm]
 800886c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	2314      	movs	r3, #20
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	2331      	movs	r3, #49	; 0x31
 8008878:	2214      	movs	r2, #20
 800887a:	212d      	movs	r1, #45	; 0x2d
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fd fcc3 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 50, 49, 50, White);		// gradation for +800[rpm]
 8008882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	2332      	movs	r3, #50	; 0x32
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2331      	movs	r3, #49	; 0x31
 800888e:	2232      	movs	r2, #50	; 0x32
 8008890:	212d      	movs	r1, #45	; 0x2d
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fd fcb8 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 80, 49, 80, White);		// gradation for +400[rpm]
 8008898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2350      	movs	r3, #80	; 0x50
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2331      	movs	r3, #49	; 0x31
 80088a4:	2250      	movs	r2, #80	; 0x50
 80088a6:	212d      	movs	r1, #45	; 0x2d
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fd fcad 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 110, 49, 110, White);		// gradation for 0[rpm]
 80088ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	236e      	movs	r3, #110	; 0x6e
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2331      	movs	r3, #49	; 0x31
 80088ba:	226e      	movs	r2, #110	; 0x6e
 80088bc:	212d      	movs	r1, #45	; 0x2d
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fd fca2 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 140, 49, 140, White);		// gradation for -400[rpm]
 80088c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	238c      	movs	r3, #140	; 0x8c
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	2331      	movs	r3, #49	; 0x31
 80088d0:	228c      	movs	r2, #140	; 0x8c
 80088d2:	212d      	movs	r1, #45	; 0x2d
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fd fc97 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 170, 49, 170, White);		// gradation for -800[rpm]
 80088da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	23aa      	movs	r3, #170	; 0xaa
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2331      	movs	r3, #49	; 0x31
 80088e6:	22aa      	movs	r2, #170	; 0xaa
 80088e8:	212d      	movs	r1, #45	; 0x2d
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fd fc8c 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 200, 49, 200, White);		// gradation for -1200[rpm]
 80088f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	23c8      	movs	r3, #200	; 0xc8
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	2331      	movs	r3, #49	; 0x31
 80088fc:	22c8      	movs	r2, #200	; 0xc8
 80088fe:	212d      	movs	r1, #45	; 0x2d
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fd fc81 	bl	8006208 <TFT_Line>


		// 2. Draw dotted lines for y-axis
		for(int j = 20; j <= 200; j = j + 30)
 8008906:	2314      	movs	r3, #20
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800890a:	e018      	b.n	800893e <Draw_axis+0x2f2>
		{
			for(int i = 50; i <= 310; i = i + 5)
 800890c:	2332      	movs	r3, #50	; 0x32
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008910:	e00e      	b.n	8008930 <Draw_axis+0x2e4>
 8008912:	bf00      	nop
 8008914:	0800be98 	.word	0x0800be98
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	b299      	uxth	r1, r3
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	b29a      	uxth	r2, r3
 8008920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fc f929 	bl	8004b7c <TFT_Pixel>
			for(int i = 50; i <= 310; i = i + 5)
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	3305      	adds	r3, #5
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008936:	ddef      	ble.n	8008918 <Draw_axis+0x2cc>
		for(int j = 20; j <= 200; j = j + 30)
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	331e      	adds	r3, #30
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2bc8      	cmp	r3, #200	; 0xc8
 8008942:	dde3      	ble.n	800890c <Draw_axis+0x2c0>
			}
		}

		// 3. Print Speed label[rpm] corresponding to the y-axis gradation
		TFT_Color(&TFT1Handle, Cyan, Black);
 8008944:	2200      	movs	r2, #0
 8008946:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800894a:	489f      	ldr	r0, [pc, #636]	; (8008bc8 <Draw_axis+0x57c>)
 800894c:	f7fc f903 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 0, 14, '+');			// Speed label of +1200[rpm]
 8008950:	232b      	movs	r3, #43	; 0x2b
 8008952:	220e      	movs	r2, #14
 8008954:	2100      	movs	r1, #0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7fd fab4 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 14, '1');
 800895c:	2331      	movs	r3, #49	; 0x31
 800895e:	220e      	movs	r2, #14
 8008960:	2108      	movs	r1, #8
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fd faae 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 14, '2');
 8008968:	2332      	movs	r3, #50	; 0x32
 800896a:	220e      	movs	r2, #14
 800896c:	2110      	movs	r1, #16
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fd faa8 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 14, '0');
 8008974:	2330      	movs	r3, #48	; 0x30
 8008976:	220e      	movs	r2, #14
 8008978:	2118      	movs	r1, #24
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fd faa2 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 14, '0');
 8008980:	2330      	movs	r3, #48	; 0x30
 8008982:	220e      	movs	r2, #14
 8008984:	2120      	movs	r1, #32
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fd fa9c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 44, '+');			// Speed label of +800[rpm]
 800898c:	232b      	movs	r3, #43	; 0x2b
 800898e:	222c      	movs	r2, #44	; 0x2c
 8008990:	2108      	movs	r1, #8
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fd fa96 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 44, '8');
 8008998:	2338      	movs	r3, #56	; 0x38
 800899a:	222c      	movs	r2, #44	; 0x2c
 800899c:	2110      	movs	r1, #16
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fd fa90 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 44, '0');
 80089a4:	2330      	movs	r3, #48	; 0x30
 80089a6:	222c      	movs	r2, #44	; 0x2c
 80089a8:	2118      	movs	r1, #24
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7fd fa8a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 44, '0');
 80089b0:	2330      	movs	r3, #48	; 0x30
 80089b2:	222c      	movs	r2, #44	; 0x2c
 80089b4:	2120      	movs	r1, #32
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7fd fa84 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 74, '+');			// Speed label of +400[rpm]
 80089bc:	232b      	movs	r3, #43	; 0x2b
 80089be:	224a      	movs	r2, #74	; 0x4a
 80089c0:	2108      	movs	r1, #8
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fd fa7e 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 74, '4');
 80089c8:	2334      	movs	r3, #52	; 0x34
 80089ca:	224a      	movs	r2, #74	; 0x4a
 80089cc:	2110      	movs	r1, #16
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7fd fa78 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 74, '0');
 80089d4:	2330      	movs	r3, #48	; 0x30
 80089d6:	224a      	movs	r2, #74	; 0x4a
 80089d8:	2118      	movs	r1, #24
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fd fa72 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 74, '0');
 80089e0:	2330      	movs	r3, #48	; 0x30
 80089e2:	224a      	movs	r2, #74	; 0x4a
 80089e4:	2120      	movs	r1, #32
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fd fa6c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 104, '0');		// Speed label of 0[rpm]
 80089ec:	2330      	movs	r3, #48	; 0x30
 80089ee:	2268      	movs	r2, #104	; 0x68
 80089f0:	2120      	movs	r1, #32
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fd fa66 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 134, '-');			// Speed label of -400[rpm]
 80089f8:	232d      	movs	r3, #45	; 0x2d
 80089fa:	2286      	movs	r2, #134	; 0x86
 80089fc:	2108      	movs	r1, #8
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fd fa60 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 134, '4');
 8008a04:	2334      	movs	r3, #52	; 0x34
 8008a06:	2286      	movs	r2, #134	; 0x86
 8008a08:	2110      	movs	r1, #16
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7fd fa5a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 134, '0');
 8008a10:	2330      	movs	r3, #48	; 0x30
 8008a12:	2286      	movs	r2, #134	; 0x86
 8008a14:	2118      	movs	r1, #24
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fd fa54 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 134, '0');
 8008a1c:	2330      	movs	r3, #48	; 0x30
 8008a1e:	2286      	movs	r2, #134	; 0x86
 8008a20:	2120      	movs	r1, #32
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fd fa4e 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 164, '-');			// Speed label of -800[rpm]
 8008a28:	232d      	movs	r3, #45	; 0x2d
 8008a2a:	22a4      	movs	r2, #164	; 0xa4
 8008a2c:	2108      	movs	r1, #8
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fd fa48 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 164, '8');
 8008a34:	2338      	movs	r3, #56	; 0x38
 8008a36:	22a4      	movs	r2, #164	; 0xa4
 8008a38:	2110      	movs	r1, #16
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fd fa42 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 164, '0');
 8008a40:	2330      	movs	r3, #48	; 0x30
 8008a42:	22a4      	movs	r2, #164	; 0xa4
 8008a44:	2118      	movs	r1, #24
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fd fa3c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 164, '0');
 8008a4c:	2330      	movs	r3, #48	; 0x30
 8008a4e:	22a4      	movs	r2, #164	; 0xa4
 8008a50:	2120      	movs	r1, #32
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fd fa36 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 0, 194, '-');			// Speed label of -1200[rpm]
 8008a58:	232d      	movs	r3, #45	; 0x2d
 8008a5a:	22c2      	movs	r2, #194	; 0xc2
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fd fa30 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 194, '1');
 8008a64:	2331      	movs	r3, #49	; 0x31
 8008a66:	22c2      	movs	r2, #194	; 0xc2
 8008a68:	2108      	movs	r1, #8
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fd fa2a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 194, '2');
 8008a70:	2332      	movs	r3, #50	; 0x32
 8008a72:	22c2      	movs	r2, #194	; 0xc2
 8008a74:	2110      	movs	r1, #16
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fd fa24 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 194, '0');
 8008a7c:	2330      	movs	r3, #48	; 0x30
 8008a7e:	22c2      	movs	r2, #194	; 0xc2
 8008a80:	2118      	movs	r1, #24
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7fd fa1e 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 194, '0');
 8008a88:	2330      	movs	r3, #48	; 0x30
 8008a8a:	22c2      	movs	r2, #194	; 0xc2
 8008a8c:	2120      	movs	r1, #32
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fd fa18 	bl	8005ec4 <TFT_English_pixel>


		// 4. Print Speed unit[rpm] to y-axis
		TFT_Color(pTFTHandle, Magenta, Black);
 8008a94:	2200      	movs	r2, #0
 8008a96:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7fc f85b 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 0, 0, '[');
 8008aa0:	235b      	movs	r3, #91	; 0x5b
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fd fa0c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 0, 'r');
 8008aac:	2372      	movs	r3, #114	; 0x72
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2108      	movs	r1, #8
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7fd fa06 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 0, 'p');
 8008ab8:	2370      	movs	r3, #112	; 0x70
 8008aba:	2200      	movs	r2, #0
 8008abc:	2110      	movs	r1, #16
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fd fa00 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 0, 'm');
 8008ac4:	236d      	movs	r3, #109	; 0x6d
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2118      	movs	r1, #24
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7fd f9fa 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 0, ']');
 8008ad0:	235d      	movs	r3, #93	; 0x5d
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2120      	movs	r1, #32
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7fd f9f4 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 0, 'd');
		TFT_English_pixel(pTFTHandle, 16, 0, 'e');
		TFT_English_pixel(pTFTHandle, 24, 0, 'g');
		TFT_English_pixel(pTFTHandle, 32, 0, ']');
	}
}
 8008adc:	e32a      	b.n	8009134 <Draw_axis+0xae8>
	else if(state == STATE_POSITION)
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	f040 8193 	bne.w	8008e0c <Draw_axis+0x7c0>
		TFT_String(pTFTHandle, 14, 0, White, Blue, (uint8_t *)"Position Graph");
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <Draw_axis+0x580>)
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	231f      	movs	r3, #31
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008af2:	2200      	movs	r2, #0
 8008af4:	210e      	movs	r1, #14
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fc f8c5 	bl	8004c86 <TFT_String>
		TFT_Line(pTFTHandle, 50, 216, 310, 216, White);		// straight line of x-axis
 8008afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	23d8      	movs	r3, #216	; 0xd8
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008b0a:	22d8      	movs	r2, #216	; 0xd8
 8008b0c:	2132      	movs	r1, #50	; 0x32
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fd fb7a 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 211, 310, 216, White);	// upper arrow head of x-axis
 8008b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	23d8      	movs	r3, #216	; 0xd8
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008b22:	22d3      	movs	r2, #211	; 0xd3
 8008b24:	f240 1131 	movw	r1, #305	; 0x131
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fd fb6d 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 221, 310, 216, White);	// lower arrow head of x-axis
 8008b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	23d8      	movs	r3, #216	; 0xd8
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008b3c:	22dd      	movs	r2, #221	; 0xdd
 8008b3e:	f240 1131 	movw	r1, #305	; 0x131
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fd fb60 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 100, 216, 100, 220, White);	// gradation for 0.6[s]
 8008b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	23dc      	movs	r3, #220	; 0xdc
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	2364      	movs	r3, #100	; 0x64
 8008b54:	22d8      	movs	r2, #216	; 0xd8
 8008b56:	2164      	movs	r1, #100	; 0x64
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7fd fb55 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 150, 216, 150, 220, White);	// gradation for 1.2[s]
 8008b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	23dc      	movs	r3, #220	; 0xdc
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2396      	movs	r3, #150	; 0x96
 8008b6a:	22d8      	movs	r2, #216	; 0xd8
 8008b6c:	2196      	movs	r1, #150	; 0x96
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fd fb4a 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 200, 216, 200, 220, White);	// gradation for 1.8[s]
 8008b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	23dc      	movs	r3, #220	; 0xdc
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	23c8      	movs	r3, #200	; 0xc8
 8008b80:	22d8      	movs	r2, #216	; 0xd8
 8008b82:	21c8      	movs	r1, #200	; 0xc8
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fd fb3f 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 250, 216, 250, 220, White);	// gradation for 2.4[s]
 8008b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	23dc      	movs	r3, #220	; 0xdc
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	23fa      	movs	r3, #250	; 0xfa
 8008b96:	22d8      	movs	r2, #216	; 0xd8
 8008b98:	21fa      	movs	r1, #250	; 0xfa
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fd fb34 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 300, 216, 300, 220, White);	// gradation for 3.0[s]
 8008ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	23dc      	movs	r3, #220	; 0xdc
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008bae:	22d8      	movs	r2, #216	; 0xd8
 8008bb0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fd fb27 	bl	8006208 <TFT_Line>
		for(int i = 100; i <= 300; i = i + 50)
 8008bba:	2364      	movs	r3, #100	; 0x64
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbe:	e019      	b.n	8008bf4 <Draw_axis+0x5a8>
			for(int j = 20; j <= 215; j = j + 5)
 8008bc0:	2314      	movs	r3, #20
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	e010      	b.n	8008be8 <Draw_axis+0x59c>
 8008bc6:	bf00      	nop
 8008bc8:	200003dc 	.word	0x200003dc
 8008bcc:	0800bea4 	.word	0x0800bea4
				TFT_Pixel(pTFTHandle, i, j, White);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	b299      	uxth	r1, r3
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fb ffcd 	bl	8004b7c <TFT_Pixel>
			for(int j = 20; j <= 215; j = j + 5)
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	3305      	adds	r3, #5
 8008be6:	623b      	str	r3, [r7, #32]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2bd7      	cmp	r3, #215	; 0xd7
 8008bec:	ddf0      	ble.n	8008bd0 <Draw_axis+0x584>
		for(int i = 100; i <= 300; i = i + 50)
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	3332      	adds	r3, #50	; 0x32
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008bfa:	dde1      	ble.n	8008bc0 <Draw_axis+0x574>
		TFT_Color(pTFTHandle, Cyan, Black);
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7fb ffa7 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');		// time label of 0[s]
 8008c08:	2330      	movs	r3, #48	; 0x30
 8008c0a:	22de      	movs	r2, #222	; 0xde
 8008c0c:	2123      	movs	r1, #35	; 0x23
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fd f958 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 89, 222, '0');		// time label of 0.6[s]
 8008c14:	2330      	movs	r3, #48	; 0x30
 8008c16:	22de      	movs	r2, #222	; 0xde
 8008c18:	2159      	movs	r1, #89	; 0x59
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fd f952 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 97, 222, '.');
 8008c20:	232e      	movs	r3, #46	; 0x2e
 8008c22:	22de      	movs	r2, #222	; 0xde
 8008c24:	2161      	movs	r1, #97	; 0x61
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fd f94c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 105, 222, '6');
 8008c2c:	2336      	movs	r3, #54	; 0x36
 8008c2e:	22de      	movs	r2, #222	; 0xde
 8008c30:	2169      	movs	r1, #105	; 0x69
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fd f946 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 139, 222, '1');		// time label of 1.2[s]
 8008c38:	2331      	movs	r3, #49	; 0x31
 8008c3a:	22de      	movs	r2, #222	; 0xde
 8008c3c:	218b      	movs	r1, #139	; 0x8b
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7fd f940 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 147, 222, '.');
 8008c44:	232e      	movs	r3, #46	; 0x2e
 8008c46:	22de      	movs	r2, #222	; 0xde
 8008c48:	2193      	movs	r1, #147	; 0x93
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fd f93a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 155, 222, '2');
 8008c50:	2332      	movs	r3, #50	; 0x32
 8008c52:	22de      	movs	r2, #222	; 0xde
 8008c54:	219b      	movs	r1, #155	; 0x9b
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fd f934 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 189, 222, '1');		// time label of 1.8[s]
 8008c5c:	2331      	movs	r3, #49	; 0x31
 8008c5e:	22de      	movs	r2, #222	; 0xde
 8008c60:	21bd      	movs	r1, #189	; 0xbd
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fd f92e 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 197, 222, '.');
 8008c68:	232e      	movs	r3, #46	; 0x2e
 8008c6a:	22de      	movs	r2, #222	; 0xde
 8008c6c:	21c5      	movs	r1, #197	; 0xc5
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fd f928 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 206, 222, '8');
 8008c74:	2338      	movs	r3, #56	; 0x38
 8008c76:	22de      	movs	r2, #222	; 0xde
 8008c78:	21ce      	movs	r1, #206	; 0xce
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fd f922 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 239, 222, '2');		// time label of 2.4[s]
 8008c80:	2332      	movs	r3, #50	; 0x32
 8008c82:	22de      	movs	r2, #222	; 0xde
 8008c84:	21ef      	movs	r1, #239	; 0xef
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fd f91c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 247, 222, '.');
 8008c8c:	232e      	movs	r3, #46	; 0x2e
 8008c8e:	22de      	movs	r2, #222	; 0xde
 8008c90:	21f7      	movs	r1, #247	; 0xf7
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fd f916 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 255, 222, '4');
 8008c98:	2334      	movs	r3, #52	; 0x34
 8008c9a:	22de      	movs	r2, #222	; 0xde
 8008c9c:	21ff      	movs	r1, #255	; 0xff
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fd f910 	bl	8005ec4 <TFT_English_pixel>
		TFT_Color(pTFTHandle, Magenta, Black);
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fb ff53 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 288, 222, '[');		// time unit[s]
 8008cb0:	235b      	movs	r3, #91	; 0x5b
 8008cb2:	22de      	movs	r2, #222	; 0xde
 8008cb4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fd f903 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 296, 222, 's');
 8008cbe:	2373      	movs	r3, #115	; 0x73
 8008cc0:	22de      	movs	r2, #222	; 0xde
 8008cc2:	f44f 7194 	mov.w	r1, #296	; 0x128
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fd f8fc 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 304, 222, ']');
 8008ccc:	235d      	movs	r3, #93	; 0x5d
 8008cce:	22de      	movs	r2, #222	; 0xde
 8008cd0:	f44f 7198 	mov.w	r1, #304	; 0x130
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7fd f8f5 	bl	8005ec4 <TFT_English_pixel>
		TFT_Line(pTFTHandle, 49, 215, 49, 5, White);		// straight line of y-axis
 8008cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	2305      	movs	r3, #5
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2331      	movs	r3, #49	; 0x31
 8008ce6:	22d7      	movs	r2, #215	; 0xd7
 8008ce8:	2131      	movs	r1, #49	; 0x31
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fd fa8c 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 44, 10, 49, 5, White);			// left arrow head of y-axis
 8008cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	2305      	movs	r3, #5
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	2331      	movs	r3, #49	; 0x31
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	212c      	movs	r1, #44	; 0x2c
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fd fa81 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 54, 10, 49, 5, White);			// right arrow head of y-axis
 8008d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	2305      	movs	r3, #5
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2331      	movs	r3, #49	; 0x31
 8008d12:	220a      	movs	r2, #10
 8008d14:	2136      	movs	r1, #54	; 0x36
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fd fa76 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 20, 49, 20, White);		// gradation for RefPosition * 5 / 4 [deg]
 8008d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2314      	movs	r3, #20
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2331      	movs	r3, #49	; 0x31
 8008d28:	2214      	movs	r2, #20
 8008d2a:	212d      	movs	r1, #45	; 0x2d
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7fd fa6b 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 59, 49, 59, White);		// gradation for RefPosition * 4 / 4 [deg]
 8008d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	233b      	movs	r3, #59	; 0x3b
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2331      	movs	r3, #49	; 0x31
 8008d3e:	223b      	movs	r2, #59	; 0x3b
 8008d40:	212d      	movs	r1, #45	; 0x2d
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fd fa60 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 98, 49, 98, White);		// gradation for RefPosition * 3 / 4 [deg]
 8008d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	2362      	movs	r3, #98	; 0x62
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	2331      	movs	r3, #49	; 0x31
 8008d54:	2262      	movs	r2, #98	; 0x62
 8008d56:	212d      	movs	r1, #45	; 0x2d
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fd fa55 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 137, 49, 137, White);		// gradation for RefPosition * 2 / 4 [deg]
 8008d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	2389      	movs	r3, #137	; 0x89
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2331      	movs	r3, #49	; 0x31
 8008d6a:	2289      	movs	r2, #137	; 0x89
 8008d6c:	212d      	movs	r1, #45	; 0x2d
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fd fa4a 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 176, 49, 176, White);		// gradation for RefPosition * 1 / 4 [deg]
 8008d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	23b0      	movs	r3, #176	; 0xb0
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2331      	movs	r3, #49	; 0x31
 8008d80:	22b0      	movs	r2, #176	; 0xb0
 8008d82:	212d      	movs	r1, #45	; 0x2d
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fd fa3f 	bl	8006208 <TFT_Line>
		for(int j = 20; j <= 176; j = j + 39)
 8008d8a:	2314      	movs	r3, #20
 8008d8c:	61fb      	str	r3, [r7, #28]
 8008d8e:	e015      	b.n	8008dbc <Draw_axis+0x770>
			for(int i = 50; i <= 310; i = i + 5)
 8008d90:	2332      	movs	r3, #50	; 0x32
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	e00b      	b.n	8008dae <Draw_axis+0x762>
				TFT_Pixel(pTFTHandle, i, j, White);
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	b299      	uxth	r1, r3
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fb feea 	bl	8004b7c <TFT_Pixel>
			for(int i = 50; i <= 310; i = i + 5)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	3305      	adds	r3, #5
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008db4:	ddef      	ble.n	8008d96 <Draw_axis+0x74a>
		for(int j = 20; j <= 176; j = j + 39)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	3327      	adds	r3, #39	; 0x27
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	2bb0      	cmp	r3, #176	; 0xb0
 8008dc0:	dde6      	ble.n	8008d90 <Draw_axis+0x744>
		TFT_Color(pTFTHandle, Magenta, Black);
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7fb fec4 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 0, 0, '[');
 8008dce:	235b      	movs	r3, #91	; 0x5b
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7fd f875 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 0, 'd');
 8008dda:	2364      	movs	r3, #100	; 0x64
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2108      	movs	r1, #8
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fd f86f 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 0, 'e');
 8008de6:	2365      	movs	r3, #101	; 0x65
 8008de8:	2200      	movs	r2, #0
 8008dea:	2110      	movs	r1, #16
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7fd f869 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 0, 'g');
 8008df2:	2367      	movs	r3, #103	; 0x67
 8008df4:	2200      	movs	r2, #0
 8008df6:	2118      	movs	r1, #24
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fd f863 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 0, ']');
 8008dfe:	235d      	movs	r3, #93	; 0x5d
 8008e00:	2200      	movs	r2, #0
 8008e02:	2120      	movs	r1, #32
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7fd f85d 	bl	8005ec4 <TFT_English_pixel>
}
 8008e0a:	e193      	b.n	8009134 <Draw_axis+0xae8>
	else if(state == STATE_POSITION_TRACKING)
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	f040 8190 	bne.w	8009134 <Draw_axis+0xae8>
		TFT_String(pTFTHandle, 10, 0, White, Blue, (uint8_t *)"Position Tracking Graph");
 8008e14:	4ba9      	ldr	r3, [pc, #676]	; (80090bc <Draw_axis+0xa70>)
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	231f      	movs	r3, #31
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e20:	2200      	movs	r2, #0
 8008e22:	210a      	movs	r1, #10
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7fb ff2e 	bl	8004c86 <TFT_String>
		TFT_Line(pTFTHandle, 50, 216, 310, 216, White);		// straight line of x-axis
 8008e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	23d8      	movs	r3, #216	; 0xd8
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008e38:	22d8      	movs	r2, #216	; 0xd8
 8008e3a:	2132      	movs	r1, #50	; 0x32
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7fd f9e3 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 211, 310, 216, White);	// upper arrow head of x-axis
 8008e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	23d8      	movs	r3, #216	; 0xd8
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008e50:	22d3      	movs	r2, #211	; 0xd3
 8008e52:	f240 1131 	movw	r1, #305	; 0x131
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fd f9d6 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 305, 221, 310, 216, White);	// lower arrow head of x-axis
 8008e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	23d8      	movs	r3, #216	; 0xd8
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008e6a:	22dd      	movs	r2, #221	; 0xdd
 8008e6c:	f240 1131 	movw	r1, #305	; 0x131
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7fd f9c9 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 100, 216, 100, 220, White);	// gradation for 0.6[s]
 8008e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	23dc      	movs	r3, #220	; 0xdc
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2364      	movs	r3, #100	; 0x64
 8008e82:	22d8      	movs	r2, #216	; 0xd8
 8008e84:	2164      	movs	r1, #100	; 0x64
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fd f9be 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 150, 216, 150, 220, White);	// gradation for 1.2[s]
 8008e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	23dc      	movs	r3, #220	; 0xdc
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2396      	movs	r3, #150	; 0x96
 8008e98:	22d8      	movs	r2, #216	; 0xd8
 8008e9a:	2196      	movs	r1, #150	; 0x96
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fd f9b3 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 200, 216, 200, 220, White);	// gradation for 1.8[s]
 8008ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	23dc      	movs	r3, #220	; 0xdc
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	23c8      	movs	r3, #200	; 0xc8
 8008eae:	22d8      	movs	r2, #216	; 0xd8
 8008eb0:	21c8      	movs	r1, #200	; 0xc8
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fd f9a8 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 250, 216, 250, 220, White);	// gradation for 2.4[s]
 8008eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	23dc      	movs	r3, #220	; 0xdc
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	23fa      	movs	r3, #250	; 0xfa
 8008ec4:	22d8      	movs	r2, #216	; 0xd8
 8008ec6:	21fa      	movs	r1, #250	; 0xfa
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7fd f99d 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 300, 216, 300, 220, White);	// gradation for 3.0[s]
 8008ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	23dc      	movs	r3, #220	; 0xdc
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008edc:	22d8      	movs	r2, #216	; 0xd8
 8008ede:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fd f990 	bl	8006208 <TFT_Line>
		for(int i = 100; i <= 300; i = i + 50)
 8008ee8:	2364      	movs	r3, #100	; 0x64
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	e014      	b.n	8008f18 <Draw_axis+0x8cc>
			for(int j = 20; j <= 215; j = j + 5)
 8008eee:	2314      	movs	r3, #20
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e00b      	b.n	8008f0c <Draw_axis+0x8c0>
				TFT_Pixel(pTFTHandle, i, j, White);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	b299      	uxth	r1, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fb fe3b 	bl	8004b7c <TFT_Pixel>
			for(int j = 20; j <= 215; j = j + 5)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3305      	adds	r3, #5
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2bd7      	cmp	r3, #215	; 0xd7
 8008f10:	ddf0      	ble.n	8008ef4 <Draw_axis+0x8a8>
		for(int i = 100; i <= 300; i = i + 50)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	3332      	adds	r3, #50	; 0x32
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008f1e:	dde6      	ble.n	8008eee <Draw_axis+0x8a2>
		TFT_Color(pTFTHandle, Cyan, Black);
 8008f20:	2200      	movs	r2, #0
 8008f22:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7fb fe15 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 35, 222, '0');		// time label of 0[s]
 8008f2c:	2330      	movs	r3, #48	; 0x30
 8008f2e:	22de      	movs	r2, #222	; 0xde
 8008f30:	2123      	movs	r1, #35	; 0x23
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fc ffc6 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 89, 222, '0');		// time label of 0.6[s]
 8008f38:	2330      	movs	r3, #48	; 0x30
 8008f3a:	22de      	movs	r2, #222	; 0xde
 8008f3c:	2159      	movs	r1, #89	; 0x59
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fc ffc0 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 97, 222, '.');
 8008f44:	232e      	movs	r3, #46	; 0x2e
 8008f46:	22de      	movs	r2, #222	; 0xde
 8008f48:	2161      	movs	r1, #97	; 0x61
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fc ffba 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 105, 222, '6');
 8008f50:	2336      	movs	r3, #54	; 0x36
 8008f52:	22de      	movs	r2, #222	; 0xde
 8008f54:	2169      	movs	r1, #105	; 0x69
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fc ffb4 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 139, 222, '1');		// time label of 1.2[s]
 8008f5c:	2331      	movs	r3, #49	; 0x31
 8008f5e:	22de      	movs	r2, #222	; 0xde
 8008f60:	218b      	movs	r1, #139	; 0x8b
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7fc ffae 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 147, 222, '.');
 8008f68:	232e      	movs	r3, #46	; 0x2e
 8008f6a:	22de      	movs	r2, #222	; 0xde
 8008f6c:	2193      	movs	r1, #147	; 0x93
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fc ffa8 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 155, 222, '2');
 8008f74:	2332      	movs	r3, #50	; 0x32
 8008f76:	22de      	movs	r2, #222	; 0xde
 8008f78:	219b      	movs	r1, #155	; 0x9b
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fc ffa2 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 189, 222, '1');		// time label of 1.8[s]
 8008f80:	2331      	movs	r3, #49	; 0x31
 8008f82:	22de      	movs	r2, #222	; 0xde
 8008f84:	21bd      	movs	r1, #189	; 0xbd
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fc ff9c 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 197, 222, '.');
 8008f8c:	232e      	movs	r3, #46	; 0x2e
 8008f8e:	22de      	movs	r2, #222	; 0xde
 8008f90:	21c5      	movs	r1, #197	; 0xc5
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7fc ff96 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 206, 222, '8');
 8008f98:	2338      	movs	r3, #56	; 0x38
 8008f9a:	22de      	movs	r2, #222	; 0xde
 8008f9c:	21ce      	movs	r1, #206	; 0xce
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fc ff90 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 239, 222, '2');		// time label of 2.4[s]
 8008fa4:	2332      	movs	r3, #50	; 0x32
 8008fa6:	22de      	movs	r2, #222	; 0xde
 8008fa8:	21ef      	movs	r1, #239	; 0xef
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fc ff8a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 247, 222, '.');
 8008fb0:	232e      	movs	r3, #46	; 0x2e
 8008fb2:	22de      	movs	r2, #222	; 0xde
 8008fb4:	21f7      	movs	r1, #247	; 0xf7
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fc ff84 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 255, 222, '4');
 8008fbc:	2334      	movs	r3, #52	; 0x34
 8008fbe:	22de      	movs	r2, #222	; 0xde
 8008fc0:	21ff      	movs	r1, #255	; 0xff
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fc ff7e 	bl	8005ec4 <TFT_English_pixel>
		TFT_Color(pTFTHandle, Magenta, Black);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7fb fdc1 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 288, 222, '[');		// time unit[s]
 8008fd4:	235b      	movs	r3, #91	; 0x5b
 8008fd6:	22de      	movs	r2, #222	; 0xde
 8008fd8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fc ff71 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 296, 222, 's');
 8008fe2:	2373      	movs	r3, #115	; 0x73
 8008fe4:	22de      	movs	r2, #222	; 0xde
 8008fe6:	f44f 7194 	mov.w	r1, #296	; 0x128
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fc ff6a 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 304, 222, ']');
 8008ff0:	235d      	movs	r3, #93	; 0x5d
 8008ff2:	22de      	movs	r2, #222	; 0xde
 8008ff4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7fc ff63 	bl	8005ec4 <TFT_English_pixel>
		TFT_Line(pTFTHandle, 49, 215, 49, 5, White);		// straight line of y-axis
 8008ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	2305      	movs	r3, #5
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	2331      	movs	r3, #49	; 0x31
 800900a:	22d7      	movs	r2, #215	; 0xd7
 800900c:	2131      	movs	r1, #49	; 0x31
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fd f8fa 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 44, 10, 49, 5, White);			// left arrow head of y-axis
 8009014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	2305      	movs	r3, #5
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	2331      	movs	r3, #49	; 0x31
 8009020:	220a      	movs	r2, #10
 8009022:	212c      	movs	r1, #44	; 0x2c
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fd f8ef 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 54, 10, 49, 5, White);			// right arrow head of y-axis
 800902a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	2305      	movs	r3, #5
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	2331      	movs	r3, #49	; 0x31
 8009036:	220a      	movs	r2, #10
 8009038:	2136      	movs	r1, #54	; 0x36
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fd f8e4 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 20, 49, 20, White);		// gradation for RefPosition * 5 / 4 [deg]
 8009040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	2314      	movs	r3, #20
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	2331      	movs	r3, #49	; 0x31
 800904c:	2214      	movs	r2, #20
 800904e:	212d      	movs	r1, #45	; 0x2d
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fd f8d9 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 59, 49, 59, White);		// gradation for RefPosition * 4 / 4 [deg]
 8009056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	233b      	movs	r3, #59	; 0x3b
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	2331      	movs	r3, #49	; 0x31
 8009062:	223b      	movs	r2, #59	; 0x3b
 8009064:	212d      	movs	r1, #45	; 0x2d
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fd f8ce 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 98, 49, 98, White);		// gradation for RefPosition * 3 / 4 [deg]
 800906c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	2362      	movs	r3, #98	; 0x62
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2331      	movs	r3, #49	; 0x31
 8009078:	2262      	movs	r2, #98	; 0x62
 800907a:	212d      	movs	r1, #45	; 0x2d
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fd f8c3 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 137, 49, 137, White);		// gradation for RefPosition * 2 / 4 [deg]
 8009082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2389      	movs	r3, #137	; 0x89
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2331      	movs	r3, #49	; 0x31
 800908e:	2289      	movs	r2, #137	; 0x89
 8009090:	212d      	movs	r1, #45	; 0x2d
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fd f8b8 	bl	8006208 <TFT_Line>
		TFT_Line(pTFTHandle, 45, 176, 49, 176, White);		// gradation for RefPosition * 1 / 4 [deg]
 8009098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	23b0      	movs	r3, #176	; 0xb0
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	2331      	movs	r3, #49	; 0x31
 80090a4:	22b0      	movs	r2, #176	; 0xb0
 80090a6:	212d      	movs	r1, #45	; 0x2d
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fd f8ad 	bl	8006208 <TFT_Line>
		for(int j = 20; j <= 176; j = j + 39)
 80090ae:	2314      	movs	r3, #20
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e018      	b.n	80090e6 <Draw_axis+0xa9a>
			for(int i = 50; i <= 310; i = i + 5)
 80090b4:	2332      	movs	r3, #50	; 0x32
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	e00e      	b.n	80090d8 <Draw_axis+0xa8c>
 80090ba:	bf00      	nop
 80090bc:	0800beb4 	.word	0x0800beb4
				TFT_Pixel(pTFTHandle, i, j, White);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	b299      	uxth	r1, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7fb fd55 	bl	8004b7c <TFT_Pixel>
			for(int i = 50; i <= 310; i = i + 5)
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3305      	adds	r3, #5
 80090d6:	60bb      	str	r3, [r7, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80090de:	ddef      	ble.n	80090c0 <Draw_axis+0xa74>
		for(int j = 20; j <= 176; j = j + 39)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3327      	adds	r3, #39	; 0x27
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2bb0      	cmp	r3, #176	; 0xb0
 80090ea:	dde3      	ble.n	80090b4 <Draw_axis+0xa68>
		TFT_Color(pTFTHandle, Magenta, Black);
 80090ec:	2200      	movs	r2, #0
 80090ee:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fb fd2f 	bl	8004b56 <TFT_Color>
		TFT_English_pixel(pTFTHandle, 0, 0, '[');
 80090f8:	235b      	movs	r3, #91	; 0x5b
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fc fee0 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 8, 0, 'd');
 8009104:	2364      	movs	r3, #100	; 0x64
 8009106:	2200      	movs	r2, #0
 8009108:	2108      	movs	r1, #8
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fc feda 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 16, 0, 'e');
 8009110:	2365      	movs	r3, #101	; 0x65
 8009112:	2200      	movs	r2, #0
 8009114:	2110      	movs	r1, #16
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7fc fed4 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 24, 0, 'g');
 800911c:	2367      	movs	r3, #103	; 0x67
 800911e:	2200      	movs	r2, #0
 8009120:	2118      	movs	r1, #24
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7fc fece 	bl	8005ec4 <TFT_English_pixel>
		TFT_English_pixel(pTFTHandle, 32, 0, ']');
 8009128:	235d      	movs	r3, #93	; 0x5d
 800912a:	2200      	movs	r2, #0
 800912c:	2120      	movs	r1, #32
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fc fec8 	bl	8005ec4 <TFT_English_pixel>
}
 8009134:	bf00      	nop
 8009136:	3738      	adds	r7, #56	; 0x38
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <Draw_Graph>:


void Draw_Graph(TFT_HandleTypeDef *pTFTHandle)
{
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	af02      	add	r7, sp, #8
 8009142:	6078      	str	r0, [r7, #4]
	switch (State)
 8009144:	4b42      	ldr	r3, [pc, #264]	; (8009250 <Draw_Graph+0x114>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d054      	beq.n	80091f6 <Draw_Graph+0xba>
 800914c:	2b03      	cmp	r3, #3
 800914e:	f000 8223 	beq.w	8009598 <Draw_Graph+0x45c>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d000      	beq.n	8009158 <Draw_Graph+0x1c>
			break;
		}

		default :
		{
			break;
 8009156:	e3e7      	b.n	8009928 <Draw_Graph+0x7ec>
			if(GraphClear_flag == FLAG_SET)
 8009158:	4b3e      	ldr	r3, [pc, #248]	; (8009254 <Draw_Graph+0x118>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d128      	bne.n	80091b2 <Draw_Graph+0x76>
				Clear_Graph(&TFT1Handle);
 8009160:	483d      	ldr	r0, [pc, #244]	; (8009258 <Draw_Graph+0x11c>)
 8009162:	f000 fbfb 	bl	800995c <Clear_Graph>
				x = 0;
 8009166:	4b3d      	ldr	r3, [pc, #244]	; (800925c <Draw_Graph+0x120>)
 8009168:	2200      	movs	r2, #0
 800916a:	801a      	strh	r2, [r3, #0]
				y = 0;
 800916c:	4b3c      	ldr	r3, [pc, #240]	; (8009260 <Draw_Graph+0x124>)
 800916e:	2200      	movs	r2, #0
 8009170:	801a      	strh	r2, [r3, #0]
				x_prv = 0;
 8009172:	4b3c      	ldr	r3, [pc, #240]	; (8009264 <Draw_Graph+0x128>)
 8009174:	2200      	movs	r2, #0
 8009176:	801a      	strh	r2, [r3, #0]
				y_prv = 0;
 8009178:	4b3b      	ldr	r3, [pc, #236]	; (8009268 <Draw_Graph+0x12c>)
 800917a:	2200      	movs	r2, #0
 800917c:	801a      	strh	r2, [r3, #0]
				GraphClear_flag = FLAG_RESET;
 800917e:	4b35      	ldr	r3, [pc, #212]	; (8009254 <Draw_Graph+0x118>)
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8009184:	4b39      	ldr	r3, [pc, #228]	; (800926c <Draw_Graph+0x130>)
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009190:	2214      	movs	r2, #20
 8009192:	2119      	movs	r1, #25
 8009194:	4830      	ldr	r0, [pc, #192]	; (8009258 <Draw_Graph+0x11c>)
 8009196:	f7fb fd76 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 800919a:	4b35      	ldr	r3, [pc, #212]	; (8009270 <Draw_Graph+0x134>)
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2300      	movs	r3, #0
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091a6:	2216      	movs	r2, #22
 80091a8:	2119      	movs	r1, #25
 80091aa:	482b      	ldr	r0, [pc, #172]	; (8009258 <Draw_Graph+0x11c>)
 80091ac:	f7fb fd6b 	bl	8004c86 <TFT_String>
			break;
 80091b0:	e3b5      	b.n	800991e <Draw_Graph+0x7e2>
			else if(GraphDraw_flag == FLAG_SET)
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <Draw_Graph+0x138>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	f040 83b1 	bne.w	800991e <Draw_Graph+0x7e2>
				TFT_Line(&TFT1Handle, 50+x_prv, y_prv, 50+x, y, Green);
 80091bc:	4b29      	ldr	r3, [pc, #164]	; (8009264 <Draw_Graph+0x128>)
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	3332      	adds	r3, #50	; 0x32
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	b219      	sxth	r1, r3
 80091c6:	4b28      	ldr	r3, [pc, #160]	; (8009268 <Draw_Graph+0x12c>)
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	b218      	sxth	r0, r3
 80091cc:	4b23      	ldr	r3, [pc, #140]	; (800925c <Draw_Graph+0x120>)
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	3332      	adds	r3, #50	; 0x32
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	b21c      	sxth	r4, r3
 80091d6:	4b22      	ldr	r3, [pc, #136]	; (8009260 <Draw_Graph+0x124>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b21b      	sxth	r3, r3
 80091dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80091e0:	9201      	str	r2, [sp, #4]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	4623      	mov	r3, r4
 80091e6:	4602      	mov	r2, r0
 80091e8:	481b      	ldr	r0, [pc, #108]	; (8009258 <Draw_Graph+0x11c>)
 80091ea:	f7fd f80d 	bl	8006208 <TFT_Line>
				GraphDraw_flag = FLAG_RESET;
 80091ee:	4b21      	ldr	r3, [pc, #132]	; (8009274 <Draw_Graph+0x138>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	701a      	strb	r2, [r3, #0]
			break;
 80091f4:	e393      	b.n	800991e <Draw_Graph+0x7e2>
			if(GraphClear_flag == FLAG_SET)
 80091f6:	4b17      	ldr	r3, [pc, #92]	; (8009254 <Draw_Graph+0x118>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d13c      	bne.n	8009278 <Draw_Graph+0x13c>
				Clear_Graph(&TFT1Handle);
 80091fe:	4816      	ldr	r0, [pc, #88]	; (8009258 <Draw_Graph+0x11c>)
 8009200:	f000 fbac 	bl	800995c <Clear_Graph>
				x = 0;
 8009204:	4b15      	ldr	r3, [pc, #84]	; (800925c <Draw_Graph+0x120>)
 8009206:	2200      	movs	r2, #0
 8009208:	801a      	strh	r2, [r3, #0]
				y = 0;
 800920a:	4b15      	ldr	r3, [pc, #84]	; (8009260 <Draw_Graph+0x124>)
 800920c:	2200      	movs	r2, #0
 800920e:	801a      	strh	r2, [r3, #0]
				x_prv = 0;
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <Draw_Graph+0x128>)
 8009212:	2200      	movs	r2, #0
 8009214:	801a      	strh	r2, [r3, #0]
				y_prv = 0;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <Draw_Graph+0x12c>)
 8009218:	2200      	movs	r2, #0
 800921a:	801a      	strh	r2, [r3, #0]
				GraphClear_flag = FLAG_RESET;
 800921c:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <Draw_Graph+0x118>)
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Ref : ");
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <Draw_Graph+0x130>)
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	2300      	movs	r3, #0
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800922e:	2214      	movs	r2, #20
 8009230:	2119      	movs	r1, #25
 8009232:	4809      	ldr	r0, [pc, #36]	; (8009258 <Draw_Graph+0x11c>)
 8009234:	f7fb fd27 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <Draw_Graph+0x134>)
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	2300      	movs	r3, #0
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009244:	2216      	movs	r2, #22
 8009246:	2119      	movs	r1, #25
 8009248:	4803      	ldr	r0, [pc, #12]	; (8009258 <Draw_Graph+0x11c>)
 800924a:	f7fb fd1c 	bl	8004c86 <TFT_String>
 800924e:	e039      	b.n	80092c4 <Draw_Graph+0x188>
 8009250:	2000020c 	.word	0x2000020c
 8009254:	20000249 	.word	0x20000249
 8009258:	200003dc 	.word	0x200003dc
 800925c:	20000240 	.word	0x20000240
 8009260:	20000242 	.word	0x20000242
 8009264:	20000244 	.word	0x20000244
 8009268:	20000246 	.word	0x20000246
 800926c:	0800be80 	.word	0x0800be80
 8009270:	0800be88 	.word	0x0800be88
 8009274:	20000248 	.word	0x20000248
			else if(GraphDraw_flag == FLAG_SET)
 8009278:	4bbc      	ldr	r3, [pc, #752]	; (800956c <Draw_Graph+0x430>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d121      	bne.n	80092c4 <Draw_Graph+0x188>
				TFT_Line(&TFT1Handle, 50+x_prv, 215-y_prv, 50+x, 215-y, Green);	// (50,215) is the origin of Graph
 8009280:	4bbb      	ldr	r3, [pc, #748]	; (8009570 <Draw_Graph+0x434>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	3332      	adds	r3, #50	; 0x32
 8009286:	b29b      	uxth	r3, r3
 8009288:	b219      	sxth	r1, r3
 800928a:	4bba      	ldr	r3, [pc, #744]	; (8009574 <Draw_Graph+0x438>)
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 8009292:	b29b      	uxth	r3, r3
 8009294:	b218      	sxth	r0, r3
 8009296:	4bb8      	ldr	r3, [pc, #736]	; (8009578 <Draw_Graph+0x43c>)
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	3332      	adds	r3, #50	; 0x32
 800929c:	b29b      	uxth	r3, r3
 800929e:	b21c      	sxth	r4, r3
 80092a0:	4bb6      	ldr	r3, [pc, #728]	; (800957c <Draw_Graph+0x440>)
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80092b0:	9201      	str	r2, [sp, #4]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	4623      	mov	r3, r4
 80092b6:	4602      	mov	r2, r0
 80092b8:	48b1      	ldr	r0, [pc, #708]	; (8009580 <Draw_Graph+0x444>)
 80092ba:	f7fc ffa5 	bl	8006208 <TFT_Line>
				GraphDraw_flag = FLAG_RESET;
 80092be:	4bab      	ldr	r3, [pc, #684]	; (800956c <Draw_Graph+0x430>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 80092c4:	4baf      	ldr	r3, [pc, #700]	; (8009584 <Draw_Graph+0x448>)
 80092c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f040 8329 	bne.w	8009922 <Draw_Graph+0x7e6>
				char temp_str[7] = {0,};
 80092d0:	f107 0310 	add.w	r3, r7, #16
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f8c3 2003 	str.w	r2, [r3, #3]
				TFT_Color(&TFT1Handle, Cyan, Black);
 80092dc:	2200      	movs	r2, #0
 80092de:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80092e2:	48a7      	ldr	r0, [pc, #668]	; (8009580 <Draw_Graph+0x444>)
 80092e4:	f7fb fc37 	bl	8004b56 <TFT_Color>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 5. / 4.));
 80092e8:	4ba6      	ldr	r3, [pc, #664]	; (8009584 <Draw_Graph+0x448>)
 80092ea:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	4ba5      	ldr	r3, [pc, #660]	; (8009588 <Draw_Graph+0x44c>)
 80092f4:	f7f7 f900 	bl	80004f8 <__aeabi_dmul>
 80092f8:	4603      	mov	r3, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	4618      	mov	r0, r3
 80092fe:	4621      	mov	r1, r4
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	4ba1      	ldr	r3, [pc, #644]	; (800958c <Draw_Graph+0x450>)
 8009306:	f7f7 fa21 	bl	800074c <__aeabi_ddiv>
 800930a:	4603      	mov	r3, r0
 800930c:	460c      	mov	r4, r1
 800930e:	4618      	mov	r0, r3
 8009310:	4621      	mov	r1, r4
 8009312:	f7f7 fba1 	bl	8000a58 <__aeabi_d2iz>
 8009316:	4602      	mov	r2, r0
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	499c      	ldr	r1, [pc, #624]	; (8009590 <Draw_Graph+0x454>)
 800931e:	4618      	mov	r0, r3
 8009320:	f001 f958 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 14, temp_str[0]);
 8009324:	7c3b      	ldrb	r3, [r7, #16]
 8009326:	220e      	movs	r2, #14
 8009328:	2100      	movs	r1, #0
 800932a:	4895      	ldr	r0, [pc, #596]	; (8009580 <Draw_Graph+0x444>)
 800932c:	f7fc fdca 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 14, temp_str[1]);
 8009330:	7c7b      	ldrb	r3, [r7, #17]
 8009332:	220e      	movs	r2, #14
 8009334:	2108      	movs	r1, #8
 8009336:	4892      	ldr	r0, [pc, #584]	; (8009580 <Draw_Graph+0x444>)
 8009338:	f7fc fdc4 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 14, temp_str[2]);
 800933c:	7cbb      	ldrb	r3, [r7, #18]
 800933e:	220e      	movs	r2, #14
 8009340:	2110      	movs	r1, #16
 8009342:	488f      	ldr	r0, [pc, #572]	; (8009580 <Draw_Graph+0x444>)
 8009344:	f7fc fdbe 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 14, temp_str[3]);
 8009348:	7cfb      	ldrb	r3, [r7, #19]
 800934a:	220e      	movs	r2, #14
 800934c:	2118      	movs	r1, #24
 800934e:	488c      	ldr	r0, [pc, #560]	; (8009580 <Draw_Graph+0x444>)
 8009350:	f7fc fdb8 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 14, temp_str[4]);
 8009354:	7d3b      	ldrb	r3, [r7, #20]
 8009356:	220e      	movs	r2, #14
 8009358:	2120      	movs	r1, #32
 800935a:	4889      	ldr	r0, [pc, #548]	; (8009580 <Draw_Graph+0x444>)
 800935c:	f7fc fdb2 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 14, temp_str[5]);
 8009360:	7d7b      	ldrb	r3, [r7, #21]
 8009362:	220e      	movs	r2, #14
 8009364:	2128      	movs	r1, #40	; 0x28
 8009366:	4886      	ldr	r0, [pc, #536]	; (8009580 <Draw_Graph+0x444>)
 8009368:	f7fc fdac 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 4. / 4.));
 800936c:	4b85      	ldr	r3, [pc, #532]	; (8009584 <Draw_Graph+0x448>)
 800936e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	4b85      	ldr	r3, [pc, #532]	; (800958c <Draw_Graph+0x450>)
 8009378:	f7f7 f8be 	bl	80004f8 <__aeabi_dmul>
 800937c:	4603      	mov	r3, r0
 800937e:	460c      	mov	r4, r1
 8009380:	4618      	mov	r0, r3
 8009382:	4621      	mov	r1, r4
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	4b80      	ldr	r3, [pc, #512]	; (800958c <Draw_Graph+0x450>)
 800938a:	f7f7 f9df 	bl	800074c <__aeabi_ddiv>
 800938e:	4603      	mov	r3, r0
 8009390:	460c      	mov	r4, r1
 8009392:	4618      	mov	r0, r3
 8009394:	4621      	mov	r1, r4
 8009396:	f7f7 fb5f 	bl	8000a58 <__aeabi_d2iz>
 800939a:	4602      	mov	r2, r0
 800939c:	f107 0310 	add.w	r3, r7, #16
 80093a0:	497b      	ldr	r1, [pc, #492]	; (8009590 <Draw_Graph+0x454>)
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f916 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 53, temp_str[0]);
 80093a8:	7c3b      	ldrb	r3, [r7, #16]
 80093aa:	2235      	movs	r2, #53	; 0x35
 80093ac:	2100      	movs	r1, #0
 80093ae:	4874      	ldr	r0, [pc, #464]	; (8009580 <Draw_Graph+0x444>)
 80093b0:	f7fc fd88 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 53, temp_str[1]);
 80093b4:	7c7b      	ldrb	r3, [r7, #17]
 80093b6:	2235      	movs	r2, #53	; 0x35
 80093b8:	2108      	movs	r1, #8
 80093ba:	4871      	ldr	r0, [pc, #452]	; (8009580 <Draw_Graph+0x444>)
 80093bc:	f7fc fd82 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 53, temp_str[2]);
 80093c0:	7cbb      	ldrb	r3, [r7, #18]
 80093c2:	2235      	movs	r2, #53	; 0x35
 80093c4:	2110      	movs	r1, #16
 80093c6:	486e      	ldr	r0, [pc, #440]	; (8009580 <Draw_Graph+0x444>)
 80093c8:	f7fc fd7c 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 53, temp_str[3]);
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	2235      	movs	r2, #53	; 0x35
 80093d0:	2118      	movs	r1, #24
 80093d2:	486b      	ldr	r0, [pc, #428]	; (8009580 <Draw_Graph+0x444>)
 80093d4:	f7fc fd76 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 53, temp_str[4]);
 80093d8:	7d3b      	ldrb	r3, [r7, #20]
 80093da:	2235      	movs	r2, #53	; 0x35
 80093dc:	2120      	movs	r1, #32
 80093de:	4868      	ldr	r0, [pc, #416]	; (8009580 <Draw_Graph+0x444>)
 80093e0:	f7fc fd70 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 53, temp_str[5]);
 80093e4:	7d7b      	ldrb	r3, [r7, #21]
 80093e6:	2235      	movs	r2, #53	; 0x35
 80093e8:	2128      	movs	r1, #40	; 0x28
 80093ea:	4865      	ldr	r0, [pc, #404]	; (8009580 <Draw_Graph+0x444>)
 80093ec:	f7fc fd6a 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 3. / 4.));
 80093f0:	4b64      	ldr	r3, [pc, #400]	; (8009584 <Draw_Graph+0x448>)
 80093f2:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	4b66      	ldr	r3, [pc, #408]	; (8009594 <Draw_Graph+0x458>)
 80093fc:	f7f7 f87c 	bl	80004f8 <__aeabi_dmul>
 8009400:	4603      	mov	r3, r0
 8009402:	460c      	mov	r4, r1
 8009404:	4618      	mov	r0, r3
 8009406:	4621      	mov	r1, r4
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	4b5f      	ldr	r3, [pc, #380]	; (800958c <Draw_Graph+0x450>)
 800940e:	f7f7 f99d 	bl	800074c <__aeabi_ddiv>
 8009412:	4603      	mov	r3, r0
 8009414:	460c      	mov	r4, r1
 8009416:	4618      	mov	r0, r3
 8009418:	4621      	mov	r1, r4
 800941a:	f7f7 fb1d 	bl	8000a58 <__aeabi_d2iz>
 800941e:	4602      	mov	r2, r0
 8009420:	f107 0310 	add.w	r3, r7, #16
 8009424:	495a      	ldr	r1, [pc, #360]	; (8009590 <Draw_Graph+0x454>)
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f8d4 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 92, temp_str[0]);
 800942c:	7c3b      	ldrb	r3, [r7, #16]
 800942e:	225c      	movs	r2, #92	; 0x5c
 8009430:	2100      	movs	r1, #0
 8009432:	4853      	ldr	r0, [pc, #332]	; (8009580 <Draw_Graph+0x444>)
 8009434:	f7fc fd46 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 92, temp_str[1]);
 8009438:	7c7b      	ldrb	r3, [r7, #17]
 800943a:	225c      	movs	r2, #92	; 0x5c
 800943c:	2108      	movs	r1, #8
 800943e:	4850      	ldr	r0, [pc, #320]	; (8009580 <Draw_Graph+0x444>)
 8009440:	f7fc fd40 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 92, temp_str[2]);
 8009444:	7cbb      	ldrb	r3, [r7, #18]
 8009446:	225c      	movs	r2, #92	; 0x5c
 8009448:	2110      	movs	r1, #16
 800944a:	484d      	ldr	r0, [pc, #308]	; (8009580 <Draw_Graph+0x444>)
 800944c:	f7fc fd3a 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 92, temp_str[3]);
 8009450:	7cfb      	ldrb	r3, [r7, #19]
 8009452:	225c      	movs	r2, #92	; 0x5c
 8009454:	2118      	movs	r1, #24
 8009456:	484a      	ldr	r0, [pc, #296]	; (8009580 <Draw_Graph+0x444>)
 8009458:	f7fc fd34 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 92, temp_str[4]);
 800945c:	7d3b      	ldrb	r3, [r7, #20]
 800945e:	225c      	movs	r2, #92	; 0x5c
 8009460:	2120      	movs	r1, #32
 8009462:	4847      	ldr	r0, [pc, #284]	; (8009580 <Draw_Graph+0x444>)
 8009464:	f7fc fd2e 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 92, temp_str[5]);
 8009468:	7d7b      	ldrb	r3, [r7, #21]
 800946a:	225c      	movs	r2, #92	; 0x5c
 800946c:	2128      	movs	r1, #40	; 0x28
 800946e:	4844      	ldr	r0, [pc, #272]	; (8009580 <Draw_Graph+0x444>)
 8009470:	f7fc fd28 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 2. / 4.));
 8009474:	4b43      	ldr	r3, [pc, #268]	; (8009584 <Draw_Graph+0x448>)
 8009476:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	f7f6 fe85 	bl	800018c <__adddf3>
 8009482:	4603      	mov	r3, r0
 8009484:	460c      	mov	r4, r1
 8009486:	4618      	mov	r0, r3
 8009488:	4621      	mov	r1, r4
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	4b3f      	ldr	r3, [pc, #252]	; (800958c <Draw_Graph+0x450>)
 8009490:	f7f7 f95c 	bl	800074c <__aeabi_ddiv>
 8009494:	4603      	mov	r3, r0
 8009496:	460c      	mov	r4, r1
 8009498:	4618      	mov	r0, r3
 800949a:	4621      	mov	r1, r4
 800949c:	f7f7 fadc 	bl	8000a58 <__aeabi_d2iz>
 80094a0:	4602      	mov	r2, r0
 80094a2:	f107 0310 	add.w	r3, r7, #16
 80094a6:	493a      	ldr	r1, [pc, #232]	; (8009590 <Draw_Graph+0x454>)
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 f893 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 131, temp_str[0]);
 80094ae:	7c3b      	ldrb	r3, [r7, #16]
 80094b0:	2283      	movs	r2, #131	; 0x83
 80094b2:	2100      	movs	r1, #0
 80094b4:	4832      	ldr	r0, [pc, #200]	; (8009580 <Draw_Graph+0x444>)
 80094b6:	f7fc fd05 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 131, temp_str[1]);
 80094ba:	7c7b      	ldrb	r3, [r7, #17]
 80094bc:	2283      	movs	r2, #131	; 0x83
 80094be:	2108      	movs	r1, #8
 80094c0:	482f      	ldr	r0, [pc, #188]	; (8009580 <Draw_Graph+0x444>)
 80094c2:	f7fc fcff 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 131, temp_str[2]);
 80094c6:	7cbb      	ldrb	r3, [r7, #18]
 80094c8:	2283      	movs	r2, #131	; 0x83
 80094ca:	2110      	movs	r1, #16
 80094cc:	482c      	ldr	r0, [pc, #176]	; (8009580 <Draw_Graph+0x444>)
 80094ce:	f7fc fcf9 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 131, temp_str[3]);
 80094d2:	7cfb      	ldrb	r3, [r7, #19]
 80094d4:	2283      	movs	r2, #131	; 0x83
 80094d6:	2118      	movs	r1, #24
 80094d8:	4829      	ldr	r0, [pc, #164]	; (8009580 <Draw_Graph+0x444>)
 80094da:	f7fc fcf3 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 131, temp_str[4]);
 80094de:	7d3b      	ldrb	r3, [r7, #20]
 80094e0:	2283      	movs	r2, #131	; 0x83
 80094e2:	2120      	movs	r1, #32
 80094e4:	4826      	ldr	r0, [pc, #152]	; (8009580 <Draw_Graph+0x444>)
 80094e6:	f7fc fced 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 131, temp_str[5]);
 80094ea:	7d7b      	ldrb	r3, [r7, #21]
 80094ec:	2283      	movs	r2, #131	; 0x83
 80094ee:	2128      	movs	r1, #40	; 0x28
 80094f0:	4823      	ldr	r0, [pc, #140]	; (8009580 <Draw_Graph+0x444>)
 80094f2:	f7fc fce7 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 1. / 4.));
 80094f6:	4b23      	ldr	r3, [pc, #140]	; (8009584 <Draw_Graph+0x448>)
 80094f8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	4b22      	ldr	r3, [pc, #136]	; (800958c <Draw_Graph+0x450>)
 8009502:	f7f7 f923 	bl	800074c <__aeabi_ddiv>
 8009506:	4603      	mov	r3, r0
 8009508:	460c      	mov	r4, r1
 800950a:	4618      	mov	r0, r3
 800950c:	4621      	mov	r1, r4
 800950e:	f7f7 faa3 	bl	8000a58 <__aeabi_d2iz>
 8009512:	4602      	mov	r2, r0
 8009514:	f107 0310 	add.w	r3, r7, #16
 8009518:	491d      	ldr	r1, [pc, #116]	; (8009590 <Draw_Graph+0x454>)
 800951a:	4618      	mov	r0, r3
 800951c:	f001 f85a 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 170, temp_str[0]);
 8009520:	7c3b      	ldrb	r3, [r7, #16]
 8009522:	22aa      	movs	r2, #170	; 0xaa
 8009524:	2100      	movs	r1, #0
 8009526:	4816      	ldr	r0, [pc, #88]	; (8009580 <Draw_Graph+0x444>)
 8009528:	f7fc fccc 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 170, temp_str[1]);
 800952c:	7c7b      	ldrb	r3, [r7, #17]
 800952e:	22aa      	movs	r2, #170	; 0xaa
 8009530:	2108      	movs	r1, #8
 8009532:	4813      	ldr	r0, [pc, #76]	; (8009580 <Draw_Graph+0x444>)
 8009534:	f7fc fcc6 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 170, temp_str[2]);
 8009538:	7cbb      	ldrb	r3, [r7, #18]
 800953a:	22aa      	movs	r2, #170	; 0xaa
 800953c:	2110      	movs	r1, #16
 800953e:	4810      	ldr	r0, [pc, #64]	; (8009580 <Draw_Graph+0x444>)
 8009540:	f7fc fcc0 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 170, temp_str[3]);
 8009544:	7cfb      	ldrb	r3, [r7, #19]
 8009546:	22aa      	movs	r2, #170	; 0xaa
 8009548:	2118      	movs	r1, #24
 800954a:	480d      	ldr	r0, [pc, #52]	; (8009580 <Draw_Graph+0x444>)
 800954c:	f7fc fcba 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 170, temp_str[4]);
 8009550:	7d3b      	ldrb	r3, [r7, #20]
 8009552:	22aa      	movs	r2, #170	; 0xaa
 8009554:	2120      	movs	r1, #32
 8009556:	480a      	ldr	r0, [pc, #40]	; (8009580 <Draw_Graph+0x444>)
 8009558:	f7fc fcb4 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 170, temp_str[5]);
 800955c:	7d7b      	ldrb	r3, [r7, #21]
 800955e:	22aa      	movs	r2, #170	; 0xaa
 8009560:	2128      	movs	r1, #40	; 0x28
 8009562:	4807      	ldr	r0, [pc, #28]	; (8009580 <Draw_Graph+0x444>)
 8009564:	f7fc fcae 	bl	8005ec4 <TFT_English_pixel>
			break;
 8009568:	e1db      	b.n	8009922 <Draw_Graph+0x7e6>
 800956a:	bf00      	nop
 800956c:	20000248 	.word	0x20000248
 8009570:	20000244 	.word	0x20000244
 8009574:	20000246 	.word	0x20000246
 8009578:	20000240 	.word	0x20000240
 800957c:	20000242 	.word	0x20000242
 8009580:	200003dc 	.word	0x200003dc
 8009584:	200002a8 	.word	0x200002a8
 8009588:	40140000 	.word	0x40140000
 800958c:	40100000 	.word	0x40100000
 8009590:	0800becc 	.word	0x0800becc
 8009594:	40080000 	.word	0x40080000
			if(GraphClear_flag == FLAG_SET)
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <Draw_Graph+0x4cc>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d145      	bne.n	800962c <Draw_Graph+0x4f0>
				Clear_Graph(&TFT1Handle);
 80095a0:	481a      	ldr	r0, [pc, #104]	; (800960c <Draw_Graph+0x4d0>)
 80095a2:	f000 f9db 	bl	800995c <Clear_Graph>
				x = 0;
 80095a6:	4b1a      	ldr	r3, [pc, #104]	; (8009610 <Draw_Graph+0x4d4>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	801a      	strh	r2, [r3, #0]
				y = 0;
 80095ac:	4b19      	ldr	r3, [pc, #100]	; (8009614 <Draw_Graph+0x4d8>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	801a      	strh	r2, [r3, #0]
				x_prv = 0;
 80095b2:	4b19      	ldr	r3, [pc, #100]	; (8009618 <Draw_Graph+0x4dc>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	801a      	strh	r2, [r3, #0]
				y_prv = 0;
 80095b8:	4b18      	ldr	r3, [pc, #96]	; (800961c <Draw_Graph+0x4e0>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	801a      	strh	r2, [r3, #0]
				GraphClear_flag = FLAG_RESET;
 80095be:	4b12      	ldr	r3, [pc, #72]	; (8009608 <Draw_Graph+0x4cc>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]
				TFT_String(&TFT1Handle, 25, 18, White, Black, (uint8_t*)"Ref : ");
 80095c4:	4b16      	ldr	r3, [pc, #88]	; (8009620 <Draw_Graph+0x4e4>)
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	2300      	movs	r3, #0
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095d0:	2212      	movs	r2, #18
 80095d2:	2119      	movs	r1, #25
 80095d4:	480d      	ldr	r0, [pc, #52]	; (800960c <Draw_Graph+0x4d0>)
 80095d6:	f7fb fb56 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 20, White, Black, (uint8_t*)"Trj : ");
 80095da:	4b12      	ldr	r3, [pc, #72]	; (8009624 <Draw_Graph+0x4e8>)
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	2300      	movs	r3, #0
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095e6:	2214      	movs	r2, #20
 80095e8:	2119      	movs	r1, #25
 80095ea:	4808      	ldr	r0, [pc, #32]	; (800960c <Draw_Graph+0x4d0>)
 80095ec:	f7fb fb4b 	bl	8004c86 <TFT_String>
				TFT_String(&TFT1Handle, 25, 22, White, Black, (uint8_t*)"Cur : ");
 80095f0:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <Draw_Graph+0x4ec>)
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	2300      	movs	r3, #0
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095fc:	2216      	movs	r2, #22
 80095fe:	2119      	movs	r1, #25
 8009600:	4802      	ldr	r0, [pc, #8]	; (800960c <Draw_Graph+0x4d0>)
 8009602:	f7fb fb40 	bl	8004c86 <TFT_String>
 8009606:	e037      	b.n	8009678 <Draw_Graph+0x53c>
 8009608:	20000249 	.word	0x20000249
 800960c:	200003dc 	.word	0x200003dc
 8009610:	20000240 	.word	0x20000240
 8009614:	20000242 	.word	0x20000242
 8009618:	20000244 	.word	0x20000244
 800961c:	20000246 	.word	0x20000246
 8009620:	0800be80 	.word	0x0800be80
 8009624:	0800be90 	.word	0x0800be90
 8009628:	0800be88 	.word	0x0800be88
			else if(GraphDraw_flag == FLAG_SET)
 800962c:	4bc0      	ldr	r3, [pc, #768]	; (8009930 <Draw_Graph+0x7f4>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d121      	bne.n	8009678 <Draw_Graph+0x53c>
				TFT_Line(&TFT1Handle, 50+x_prv, 215-y_prv, 50+x, 215-y, Green);
 8009634:	4bbf      	ldr	r3, [pc, #764]	; (8009934 <Draw_Graph+0x7f8>)
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	3332      	adds	r3, #50	; 0x32
 800963a:	b29b      	uxth	r3, r3
 800963c:	b219      	sxth	r1, r3
 800963e:	4bbe      	ldr	r3, [pc, #760]	; (8009938 <Draw_Graph+0x7fc>)
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 8009646:	b29b      	uxth	r3, r3
 8009648:	b218      	sxth	r0, r3
 800964a:	4bbc      	ldr	r3, [pc, #752]	; (800993c <Draw_Graph+0x800>)
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	3332      	adds	r3, #50	; 0x32
 8009650:	b29b      	uxth	r3, r3
 8009652:	b21c      	sxth	r4, r3
 8009654:	4bba      	ldr	r3, [pc, #744]	; (8009940 <Draw_Graph+0x804>)
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
 800965c:	b29b      	uxth	r3, r3
 800965e:	b21b      	sxth	r3, r3
 8009660:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8009664:	9201      	str	r2, [sp, #4]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	4623      	mov	r3, r4
 800966a:	4602      	mov	r2, r0
 800966c:	48b5      	ldr	r0, [pc, #724]	; (8009944 <Draw_Graph+0x808>)
 800966e:	f7fc fdcb 	bl	8006208 <TFT_Line>
				GraphDraw_flag = FLAG_RESET;
 8009672:	4baf      	ldr	r3, [pc, #700]	; (8009930 <Draw_Graph+0x7f4>)
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]
			if(BLDC1Handle.MotorState == MOTOR_STATE_STOP)
 8009678:	4bb3      	ldr	r3, [pc, #716]	; (8009948 <Draw_Graph+0x80c>)
 800967a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800967e:	2b00      	cmp	r3, #0
 8009680:	f040 8151 	bne.w	8009926 <Draw_Graph+0x7ea>
				char temp_str[7] = {0,};
 8009684:	f107 0308 	add.w	r3, r7, #8
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f8c3 2003 	str.w	r2, [r3, #3]
				TFT_Color(&TFT1Handle, Cyan, Black);
 8009690:	2200      	movs	r2, #0
 8009692:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009696:	48ab      	ldr	r0, [pc, #684]	; (8009944 <Draw_Graph+0x808>)
 8009698:	f7fb fa5d 	bl	8004b56 <TFT_Color>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 5. / 4.));
 800969c:	4baa      	ldr	r3, [pc, #680]	; (8009948 <Draw_Graph+0x80c>)
 800969e:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	4ba9      	ldr	r3, [pc, #676]	; (800994c <Draw_Graph+0x810>)
 80096a8:	f7f6 ff26 	bl	80004f8 <__aeabi_dmul>
 80096ac:	4603      	mov	r3, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	4618      	mov	r0, r3
 80096b2:	4621      	mov	r1, r4
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	4ba5      	ldr	r3, [pc, #660]	; (8009950 <Draw_Graph+0x814>)
 80096ba:	f7f7 f847 	bl	800074c <__aeabi_ddiv>
 80096be:	4603      	mov	r3, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	4618      	mov	r0, r3
 80096c4:	4621      	mov	r1, r4
 80096c6:	f7f7 f9c7 	bl	8000a58 <__aeabi_d2iz>
 80096ca:	4602      	mov	r2, r0
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	49a0      	ldr	r1, [pc, #640]	; (8009954 <Draw_Graph+0x818>)
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ff7e 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 14, temp_str[0]);
 80096d8:	7a3b      	ldrb	r3, [r7, #8]
 80096da:	220e      	movs	r2, #14
 80096dc:	2100      	movs	r1, #0
 80096de:	4899      	ldr	r0, [pc, #612]	; (8009944 <Draw_Graph+0x808>)
 80096e0:	f7fc fbf0 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 14, temp_str[1]);
 80096e4:	7a7b      	ldrb	r3, [r7, #9]
 80096e6:	220e      	movs	r2, #14
 80096e8:	2108      	movs	r1, #8
 80096ea:	4896      	ldr	r0, [pc, #600]	; (8009944 <Draw_Graph+0x808>)
 80096ec:	f7fc fbea 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 14, temp_str[2]);
 80096f0:	7abb      	ldrb	r3, [r7, #10]
 80096f2:	220e      	movs	r2, #14
 80096f4:	2110      	movs	r1, #16
 80096f6:	4893      	ldr	r0, [pc, #588]	; (8009944 <Draw_Graph+0x808>)
 80096f8:	f7fc fbe4 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 14, temp_str[3]);
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	220e      	movs	r2, #14
 8009700:	2118      	movs	r1, #24
 8009702:	4890      	ldr	r0, [pc, #576]	; (8009944 <Draw_Graph+0x808>)
 8009704:	f7fc fbde 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 14, temp_str[4]);
 8009708:	7b3b      	ldrb	r3, [r7, #12]
 800970a:	220e      	movs	r2, #14
 800970c:	2120      	movs	r1, #32
 800970e:	488d      	ldr	r0, [pc, #564]	; (8009944 <Draw_Graph+0x808>)
 8009710:	f7fc fbd8 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 14, temp_str[5]);
 8009714:	7b7b      	ldrb	r3, [r7, #13]
 8009716:	220e      	movs	r2, #14
 8009718:	2128      	movs	r1, #40	; 0x28
 800971a:	488a      	ldr	r0, [pc, #552]	; (8009944 <Draw_Graph+0x808>)
 800971c:	f7fc fbd2 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 4. / 4.));
 8009720:	4b89      	ldr	r3, [pc, #548]	; (8009948 <Draw_Graph+0x80c>)
 8009722:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	4b89      	ldr	r3, [pc, #548]	; (8009950 <Draw_Graph+0x814>)
 800972c:	f7f6 fee4 	bl	80004f8 <__aeabi_dmul>
 8009730:	4603      	mov	r3, r0
 8009732:	460c      	mov	r4, r1
 8009734:	4618      	mov	r0, r3
 8009736:	4621      	mov	r1, r4
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	4b84      	ldr	r3, [pc, #528]	; (8009950 <Draw_Graph+0x814>)
 800973e:	f7f7 f805 	bl	800074c <__aeabi_ddiv>
 8009742:	4603      	mov	r3, r0
 8009744:	460c      	mov	r4, r1
 8009746:	4618      	mov	r0, r3
 8009748:	4621      	mov	r1, r4
 800974a:	f7f7 f985 	bl	8000a58 <__aeabi_d2iz>
 800974e:	4602      	mov	r2, r0
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	497f      	ldr	r1, [pc, #508]	; (8009954 <Draw_Graph+0x818>)
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ff3c 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 53, temp_str[0]);
 800975c:	7a3b      	ldrb	r3, [r7, #8]
 800975e:	2235      	movs	r2, #53	; 0x35
 8009760:	2100      	movs	r1, #0
 8009762:	4878      	ldr	r0, [pc, #480]	; (8009944 <Draw_Graph+0x808>)
 8009764:	f7fc fbae 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 53, temp_str[1]);
 8009768:	7a7b      	ldrb	r3, [r7, #9]
 800976a:	2235      	movs	r2, #53	; 0x35
 800976c:	2108      	movs	r1, #8
 800976e:	4875      	ldr	r0, [pc, #468]	; (8009944 <Draw_Graph+0x808>)
 8009770:	f7fc fba8 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 53, temp_str[2]);
 8009774:	7abb      	ldrb	r3, [r7, #10]
 8009776:	2235      	movs	r2, #53	; 0x35
 8009778:	2110      	movs	r1, #16
 800977a:	4872      	ldr	r0, [pc, #456]	; (8009944 <Draw_Graph+0x808>)
 800977c:	f7fc fba2 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 53, temp_str[3]);
 8009780:	7afb      	ldrb	r3, [r7, #11]
 8009782:	2235      	movs	r2, #53	; 0x35
 8009784:	2118      	movs	r1, #24
 8009786:	486f      	ldr	r0, [pc, #444]	; (8009944 <Draw_Graph+0x808>)
 8009788:	f7fc fb9c 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 53, temp_str[4]);
 800978c:	7b3b      	ldrb	r3, [r7, #12]
 800978e:	2235      	movs	r2, #53	; 0x35
 8009790:	2120      	movs	r1, #32
 8009792:	486c      	ldr	r0, [pc, #432]	; (8009944 <Draw_Graph+0x808>)
 8009794:	f7fc fb96 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 53, temp_str[5]);
 8009798:	7b7b      	ldrb	r3, [r7, #13]
 800979a:	2235      	movs	r2, #53	; 0x35
 800979c:	2128      	movs	r1, #40	; 0x28
 800979e:	4869      	ldr	r0, [pc, #420]	; (8009944 <Draw_Graph+0x808>)
 80097a0:	f7fc fb90 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 3. / 4.));
 80097a4:	4b68      	ldr	r3, [pc, #416]	; (8009948 <Draw_Graph+0x80c>)
 80097a6:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80097aa:	f04f 0200 	mov.w	r2, #0
 80097ae:	4b6a      	ldr	r3, [pc, #424]	; (8009958 <Draw_Graph+0x81c>)
 80097b0:	f7f6 fea2 	bl	80004f8 <__aeabi_dmul>
 80097b4:	4603      	mov	r3, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	4618      	mov	r0, r3
 80097ba:	4621      	mov	r1, r4
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	4b63      	ldr	r3, [pc, #396]	; (8009950 <Draw_Graph+0x814>)
 80097c2:	f7f6 ffc3 	bl	800074c <__aeabi_ddiv>
 80097c6:	4603      	mov	r3, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	4618      	mov	r0, r3
 80097cc:	4621      	mov	r1, r4
 80097ce:	f7f7 f943 	bl	8000a58 <__aeabi_d2iz>
 80097d2:	4602      	mov	r2, r0
 80097d4:	f107 0308 	add.w	r3, r7, #8
 80097d8:	495e      	ldr	r1, [pc, #376]	; (8009954 <Draw_Graph+0x818>)
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fefa 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 92, temp_str[0]);
 80097e0:	7a3b      	ldrb	r3, [r7, #8]
 80097e2:	225c      	movs	r2, #92	; 0x5c
 80097e4:	2100      	movs	r1, #0
 80097e6:	4857      	ldr	r0, [pc, #348]	; (8009944 <Draw_Graph+0x808>)
 80097e8:	f7fc fb6c 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 92, temp_str[1]);
 80097ec:	7a7b      	ldrb	r3, [r7, #9]
 80097ee:	225c      	movs	r2, #92	; 0x5c
 80097f0:	2108      	movs	r1, #8
 80097f2:	4854      	ldr	r0, [pc, #336]	; (8009944 <Draw_Graph+0x808>)
 80097f4:	f7fc fb66 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 92, temp_str[2]);
 80097f8:	7abb      	ldrb	r3, [r7, #10]
 80097fa:	225c      	movs	r2, #92	; 0x5c
 80097fc:	2110      	movs	r1, #16
 80097fe:	4851      	ldr	r0, [pc, #324]	; (8009944 <Draw_Graph+0x808>)
 8009800:	f7fc fb60 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 92, temp_str[3]);
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	225c      	movs	r2, #92	; 0x5c
 8009808:	2118      	movs	r1, #24
 800980a:	484e      	ldr	r0, [pc, #312]	; (8009944 <Draw_Graph+0x808>)
 800980c:	f7fc fb5a 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 92, temp_str[4]);
 8009810:	7b3b      	ldrb	r3, [r7, #12]
 8009812:	225c      	movs	r2, #92	; 0x5c
 8009814:	2120      	movs	r1, #32
 8009816:	484b      	ldr	r0, [pc, #300]	; (8009944 <Draw_Graph+0x808>)
 8009818:	f7fc fb54 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 92, temp_str[5]);
 800981c:	7b7b      	ldrb	r3, [r7, #13]
 800981e:	225c      	movs	r2, #92	; 0x5c
 8009820:	2128      	movs	r1, #40	; 0x28
 8009822:	4848      	ldr	r0, [pc, #288]	; (8009944 <Draw_Graph+0x808>)
 8009824:	f7fc fb4e 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 2. / 4.));
 8009828:	4b47      	ldr	r3, [pc, #284]	; (8009948 <Draw_Graph+0x80c>)
 800982a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	f7f6 fcab 	bl	800018c <__adddf3>
 8009836:	4603      	mov	r3, r0
 8009838:	460c      	mov	r4, r1
 800983a:	4618      	mov	r0, r3
 800983c:	4621      	mov	r1, r4
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	4b43      	ldr	r3, [pc, #268]	; (8009950 <Draw_Graph+0x814>)
 8009844:	f7f6 ff82 	bl	800074c <__aeabi_ddiv>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4618      	mov	r0, r3
 800984e:	4621      	mov	r1, r4
 8009850:	f7f7 f902 	bl	8000a58 <__aeabi_d2iz>
 8009854:	4602      	mov	r2, r0
 8009856:	f107 0308 	add.w	r3, r7, #8
 800985a:	493e      	ldr	r1, [pc, #248]	; (8009954 <Draw_Graph+0x818>)
 800985c:	4618      	mov	r0, r3
 800985e:	f000 feb9 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 131, temp_str[0]);
 8009862:	7a3b      	ldrb	r3, [r7, #8]
 8009864:	2283      	movs	r2, #131	; 0x83
 8009866:	2100      	movs	r1, #0
 8009868:	4836      	ldr	r0, [pc, #216]	; (8009944 <Draw_Graph+0x808>)
 800986a:	f7fc fb2b 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 131, temp_str[1]);
 800986e:	7a7b      	ldrb	r3, [r7, #9]
 8009870:	2283      	movs	r2, #131	; 0x83
 8009872:	2108      	movs	r1, #8
 8009874:	4833      	ldr	r0, [pc, #204]	; (8009944 <Draw_Graph+0x808>)
 8009876:	f7fc fb25 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 131, temp_str[2]);
 800987a:	7abb      	ldrb	r3, [r7, #10]
 800987c:	2283      	movs	r2, #131	; 0x83
 800987e:	2110      	movs	r1, #16
 8009880:	4830      	ldr	r0, [pc, #192]	; (8009944 <Draw_Graph+0x808>)
 8009882:	f7fc fb1f 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 131, temp_str[3]);
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	2283      	movs	r2, #131	; 0x83
 800988a:	2118      	movs	r1, #24
 800988c:	482d      	ldr	r0, [pc, #180]	; (8009944 <Draw_Graph+0x808>)
 800988e:	f7fc fb19 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 131, temp_str[4]);
 8009892:	7b3b      	ldrb	r3, [r7, #12]
 8009894:	2283      	movs	r2, #131	; 0x83
 8009896:	2120      	movs	r1, #32
 8009898:	482a      	ldr	r0, [pc, #168]	; (8009944 <Draw_Graph+0x808>)
 800989a:	f7fc fb13 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 131, temp_str[5]);
 800989e:	7b7b      	ldrb	r3, [r7, #13]
 80098a0:	2283      	movs	r2, #131	; 0x83
 80098a2:	2128      	movs	r1, #40	; 0x28
 80098a4:	4827      	ldr	r0, [pc, #156]	; (8009944 <Draw_Graph+0x808>)
 80098a6:	f7fc fb0d 	bl	8005ec4 <TFT_English_pixel>
				sprintf(temp_str, "%+6ld", (int32_t)(BLDC1Handle.RefPosition * 1. / 4.));
 80098aa:	4b27      	ldr	r3, [pc, #156]	; (8009948 <Draw_Graph+0x80c>)
 80098ac:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	4b26      	ldr	r3, [pc, #152]	; (8009950 <Draw_Graph+0x814>)
 80098b6:	f7f6 ff49 	bl	800074c <__aeabi_ddiv>
 80098ba:	4603      	mov	r3, r0
 80098bc:	460c      	mov	r4, r1
 80098be:	4618      	mov	r0, r3
 80098c0:	4621      	mov	r1, r4
 80098c2:	f7f7 f8c9 	bl	8000a58 <__aeabi_d2iz>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	4921      	ldr	r1, [pc, #132]	; (8009954 <Draw_Graph+0x818>)
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fe80 	bl	800a5d4 <siprintf>
				TFT_English_pixel(&TFT1Handle, 0, 170, temp_str[0]);
 80098d4:	7a3b      	ldrb	r3, [r7, #8]
 80098d6:	22aa      	movs	r2, #170	; 0xaa
 80098d8:	2100      	movs	r1, #0
 80098da:	481a      	ldr	r0, [pc, #104]	; (8009944 <Draw_Graph+0x808>)
 80098dc:	f7fc faf2 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 8, 170, temp_str[1]);
 80098e0:	7a7b      	ldrb	r3, [r7, #9]
 80098e2:	22aa      	movs	r2, #170	; 0xaa
 80098e4:	2108      	movs	r1, #8
 80098e6:	4817      	ldr	r0, [pc, #92]	; (8009944 <Draw_Graph+0x808>)
 80098e8:	f7fc faec 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 16, 170, temp_str[2]);
 80098ec:	7abb      	ldrb	r3, [r7, #10]
 80098ee:	22aa      	movs	r2, #170	; 0xaa
 80098f0:	2110      	movs	r1, #16
 80098f2:	4814      	ldr	r0, [pc, #80]	; (8009944 <Draw_Graph+0x808>)
 80098f4:	f7fc fae6 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 24, 170, temp_str[3]);
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	22aa      	movs	r2, #170	; 0xaa
 80098fc:	2118      	movs	r1, #24
 80098fe:	4811      	ldr	r0, [pc, #68]	; (8009944 <Draw_Graph+0x808>)
 8009900:	f7fc fae0 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 32, 170, temp_str[4]);
 8009904:	7b3b      	ldrb	r3, [r7, #12]
 8009906:	22aa      	movs	r2, #170	; 0xaa
 8009908:	2120      	movs	r1, #32
 800990a:	480e      	ldr	r0, [pc, #56]	; (8009944 <Draw_Graph+0x808>)
 800990c:	f7fc fada 	bl	8005ec4 <TFT_English_pixel>
				TFT_English_pixel(&TFT1Handle, 40, 170, temp_str[5]);
 8009910:	7b7b      	ldrb	r3, [r7, #13]
 8009912:	22aa      	movs	r2, #170	; 0xaa
 8009914:	2128      	movs	r1, #40	; 0x28
 8009916:	480b      	ldr	r0, [pc, #44]	; (8009944 <Draw_Graph+0x808>)
 8009918:	f7fc fad4 	bl	8005ec4 <TFT_English_pixel>
			break;
 800991c:	e003      	b.n	8009926 <Draw_Graph+0x7ea>
			break;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <Draw_Graph+0x7ec>
			break;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <Draw_Graph+0x7ec>
			break;
 8009926:	bf00      	nop
		}
	}
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}
 8009930:	20000248 	.word	0x20000248
 8009934:	20000244 	.word	0x20000244
 8009938:	20000246 	.word	0x20000246
 800993c:	20000240 	.word	0x20000240
 8009940:	20000242 	.word	0x20000242
 8009944:	200003dc 	.word	0x200003dc
 8009948:	200002a8 	.word	0x200002a8
 800994c:	40140000 	.word	0x40140000
 8009950:	40100000 	.word	0x40100000
 8009954:	0800becc 	.word	0x0800becc
 8009958:	40080000 	.word	0x40080000

0800995c <Clear_Graph>:


void Clear_Graph(TFT_HandleTypeDef *pTFTHandle)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08c      	sub	sp, #48	; 0x30
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	/* Window Re-Setting */

	// 1. x = 50 ~ 300
	TFT_Write(pTFTHandle, 0x02, 50U >> 8);
 8009964:	2200      	movs	r2, #0
 8009966:	2102      	movs	r1, #2
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fb f839 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 50U & 0x00FF);
 800996e:	2232      	movs	r2, #50	; 0x32
 8009970:	2103      	movs	r1, #3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7fb f834 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 300U >> 8);
 8009978:	2201      	movs	r2, #1
 800997a:	2104      	movs	r1, #4
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fb f82f 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 300U & 0x00FF);
 8009982:	222c      	movs	r2, #44	; 0x2c
 8009984:	2105      	movs	r1, #5
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7fb f82a 	bl	80049e0 <TFT_Write>


	// 2. y = 15 ~ 215
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 800998c:	2200      	movs	r2, #0
 800998e:	2106      	movs	r1, #6
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7fb f825 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 15U);
 8009996:	220f      	movs	r2, #15
 8009998:	2107      	movs	r1, #7
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fb f820 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 80099a0:	2200      	movs	r2, #0
 80099a2:	2108      	movs	r1, #8
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fb f81b 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 215U);
 80099aa:	22d7      	movs	r2, #215	; 0xd7
 80099ac:	2109      	movs	r1, #9
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fb f816 	bl	80049e0 <TFT_Write>

	TFT_Command(pTFTHandle, 0x22);
 80099b4:	2122      	movs	r1, #34	; 0x22
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fa ff9d 	bl	80048f6 <TFT_Command>


	/* Clear graph */

	// 1. Fill the Window with Black
	for(uint16_t i = 0; i < 251; i++)
 80099bc:	2300      	movs	r3, #0
 80099be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099c0:	e00f      	b.n	80099e2 <Clear_Graph+0x86>
	{
		for(uint16_t j = 0; j < 201; j++)
 80099c2:	2300      	movs	r3, #0
 80099c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80099c6:	e006      	b.n	80099d6 <Clear_Graph+0x7a>
		{
			TFT_Data(pTFTHandle, Black);
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fa ffcf 	bl	800496e <TFT_Data>
		for(uint16_t j = 0; j < 201; j++)
 80099d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099d2:	3301      	adds	r3, #1
 80099d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80099d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099d8:	2bc8      	cmp	r3, #200	; 0xc8
 80099da:	d9f5      	bls.n	80099c8 <Clear_Graph+0x6c>
	for(uint16_t i = 0; i < 251; i++)
 80099dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099de:	3301      	adds	r3, #1
 80099e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099e4:	2bfa      	cmp	r3, #250	; 0xfa
 80099e6:	d9ec      	bls.n	80099c2 <Clear_Graph+0x66>
		}
	}


	// 2. Draw dotted grid
	if(State == STATE_SPEED)
 80099e8:	4b56      	ldr	r3, [pc, #344]	; (8009b44 <Clear_Graph+0x1e8>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d138      	bne.n	8009a62 <Clear_Graph+0x106>
	{
		for(int i = 100; i <= 300; i = i + 50)
 80099f0:	2364      	movs	r3, #100	; 0x64
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f4:	e014      	b.n	8009a20 <Clear_Graph+0xc4>
		{
			for(int j = 20; j <= 215; j = j + 5)
 80099f6:	2314      	movs	r3, #20
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
 80099fa:	e00b      	b.n	8009a14 <Clear_Graph+0xb8>
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	b299      	uxth	r1, r3
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7fb f8b7 	bl	8004b7c <TFT_Pixel>
			for(int j = 20; j <= 215; j = j + 5)
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	3305      	adds	r3, #5
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	2bd7      	cmp	r3, #215	; 0xd7
 8009a18:	ddf0      	ble.n	80099fc <Clear_Graph+0xa0>
		for(int i = 100; i <= 300; i = i + 50)
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	3332      	adds	r3, #50	; 0x32
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009a26:	dde6      	ble.n	80099f6 <Clear_Graph+0x9a>
			}
		}


		for(int j = 20; j <= 200; j = j + 30)
 8009a28:	2314      	movs	r3, #20
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	e015      	b.n	8009a5a <Clear_Graph+0xfe>
		{
			for(int i = 50; i <= 310; i = i + 5)
 8009a2e:	2332      	movs	r3, #50	; 0x32
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	e00b      	b.n	8009a4c <Clear_Graph+0xf0>
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	b299      	uxth	r1, r3
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7fb f89b 	bl	8004b7c <TFT_Pixel>
			for(int i = 50; i <= 310; i = i + 5)
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	3305      	adds	r3, #5
 8009a4a:	61fb      	str	r3, [r7, #28]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009a52:	ddef      	ble.n	8009a34 <Clear_Graph+0xd8>
		for(int j = 20; j <= 200; j = j + 30)
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	331e      	adds	r3, #30
 8009a58:	623b      	str	r3, [r7, #32]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	2bc8      	cmp	r3, #200	; 0xc8
 8009a5e:	dde6      	ble.n	8009a2e <Clear_Graph+0xd2>
 8009a60:	e03f      	b.n	8009ae2 <Clear_Graph+0x186>
			}
		}
	}

	else if( (State == STATE_POSITION) || (State == STATE_POSITION_TRACKING) )
 8009a62:	4b38      	ldr	r3, [pc, #224]	; (8009b44 <Clear_Graph+0x1e8>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d003      	beq.n	8009a72 <Clear_Graph+0x116>
 8009a6a:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <Clear_Graph+0x1e8>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d137      	bne.n	8009ae2 <Clear_Graph+0x186>
	{
		for(int i = 100; i <= 300; i = i + 50)
 8009a72:	2364      	movs	r3, #100	; 0x64
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	e014      	b.n	8009aa2 <Clear_Graph+0x146>
		{
			for(int j = 20; j <= 215; j = j + 5)
 8009a78:	2314      	movs	r3, #20
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e00b      	b.n	8009a96 <Clear_Graph+0x13a>
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	b299      	uxth	r1, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fb f876 	bl	8004b7c <TFT_Pixel>
			for(int j = 20; j <= 215; j = j + 5)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	3305      	adds	r3, #5
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2bd7      	cmp	r3, #215	; 0xd7
 8009a9a:	ddf0      	ble.n	8009a7e <Clear_Graph+0x122>
		for(int i = 100; i <= 300; i = i + 50)
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	3332      	adds	r3, #50	; 0x32
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009aa8:	dde6      	ble.n	8009a78 <Clear_Graph+0x11c>
			}
		}


		for(int j = 20; j <= 176; j = j + 39)
 8009aaa:	2314      	movs	r3, #20
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	e015      	b.n	8009adc <Clear_Graph+0x180>
		{
			for(int i = 50; i <= 310; i = i + 5)
 8009ab0:	2332      	movs	r3, #50	; 0x32
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e00b      	b.n	8009ace <Clear_Graph+0x172>
			{
				TFT_Pixel(pTFTHandle, i, j, White);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	b299      	uxth	r1, r3
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fb f85a 	bl	8004b7c <TFT_Pixel>
			for(int i = 50; i <= 310; i = i + 5)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3305      	adds	r3, #5
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009ad4:	ddef      	ble.n	8009ab6 <Clear_Graph+0x15a>
		for(int j = 20; j <= 176; j = j + 39)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	3327      	adds	r3, #39	; 0x27
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2bb0      	cmp	r3, #176	; 0xb0
 8009ae0:	dde6      	ble.n	8009ab0 <Clear_Graph+0x154>


	/* Return the Window setting to its Original state */

	// 1. x = 0 ~ 319
	TFT_Write(pTFTHandle, 0x02, 0x0000);
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fa ff7a 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x03, 0x0000);
 8009aec:	2200      	movs	r2, #0
 8009aee:	2103      	movs	r1, #3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7fa ff75 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x04, 0x0001);
 8009af6:	2201      	movs	r2, #1
 8009af8:	2104      	movs	r1, #4
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fa ff70 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x05, 0x003F);
 8009b00:	223f      	movs	r2, #63	; 0x3f
 8009b02:	2105      	movs	r1, #5
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fa ff6b 	bl	80049e0 <TFT_Write>


	// 2. y = 0 ~ 239
	TFT_Write(pTFTHandle, 0x06, 0x0000);
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2106      	movs	r1, #6
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fa ff66 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x07, 0x0000);
 8009b14:	2200      	movs	r2, #0
 8009b16:	2107      	movs	r1, #7
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fa ff61 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x08, 0x0000);
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2108      	movs	r1, #8
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7fa ff5c 	bl	80049e0 <TFT_Write>
	TFT_Write(pTFTHandle, 0x09, 0x00EF);
 8009b28:	22ef      	movs	r2, #239	; 0xef
 8009b2a:	2109      	movs	r1, #9
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fa ff57 	bl	80049e0 <TFT_Write>

	TFT_Command(pTFTHandle, 0x22);
 8009b32:	2122      	movs	r1, #34	; 0x22
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7fa fede 	bl	80048f6 <TFT_Command>
}
 8009b3a:	bf00      	nop
 8009b3c:	3730      	adds	r7, #48	; 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2000020c 	.word	0x2000020c

08009b48 <MemsetHandleStructure>:


void MemsetHandleStructure(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
	memset(&TIM6Handle, 0, sizeof(TIM6Handle));
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4813      	ldr	r0, [pc, #76]	; (8009ba0 <MemsetHandleStructure+0x58>)
 8009b52:	f000 f8e7 	bl	8009d24 <memset>
	memset(&TIM4Handle, 0, sizeof(TIM4Handle));
 8009b56:	2220      	movs	r2, #32
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <MemsetHandleStructure+0x5c>)
 8009b5c:	f000 f8e2 	bl	8009d24 <memset>
	memset(&BLDC1Handle, 0, sizeof(BLDC1Handle));
 8009b60:	22f8      	movs	r2, #248	; 0xf8
 8009b62:	2100      	movs	r1, #0
 8009b64:	4810      	ldr	r0, [pc, #64]	; (8009ba8 <MemsetHandleStructure+0x60>)
 8009b66:	f000 f8dd 	bl	8009d24 <memset>
	memset(&UART3Handle, 0, sizeof(UART3Handle));
 8009b6a:	223c      	movs	r2, #60	; 0x3c
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	480f      	ldr	r0, [pc, #60]	; (8009bac <MemsetHandleStructure+0x64>)
 8009b70:	f000 f8d8 	bl	8009d24 <memset>
	memset(&DMA1Handle, 0, sizeof(DMA1Handle));
 8009b74:	2244      	movs	r2, #68	; 0x44
 8009b76:	2100      	movs	r1, #0
 8009b78:	480d      	ldr	r0, [pc, #52]	; (8009bb0 <MemsetHandleStructure+0x68>)
 8009b7a:	f000 f8d3 	bl	8009d24 <memset>
	memset(&TFT1Handle, 0, sizeof(TFT1Handle));
 8009b7e:	2240      	movs	r2, #64	; 0x40
 8009b80:	2100      	movs	r1, #0
 8009b82:	480c      	ldr	r0, [pc, #48]	; (8009bb4 <MemsetHandleStructure+0x6c>)
 8009b84:	f000 f8ce 	bl	8009d24 <memset>
	memset(&TS1Handle, 0, sizeof(TS1Handle));
 8009b88:	2230      	movs	r2, #48	; 0x30
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	480a      	ldr	r0, [pc, #40]	; (8009bb8 <MemsetHandleStructure+0x70>)
 8009b8e:	f000 f8c9 	bl	8009d24 <memset>
	memset(&SPI2Handle, 0, sizeof(SPI2Handle));
 8009b92:	2254      	movs	r2, #84	; 0x54
 8009b94:	2100      	movs	r1, #0
 8009b96:	4809      	ldr	r0, [pc, #36]	; (8009bbc <MemsetHandleStructure+0x74>)
 8009b98:	f000 f8c4 	bl	8009d24 <memset>
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200004d4 	.word	0x200004d4
 8009ba4:	2000041c 	.word	0x2000041c
 8009ba8:	200002a8 	.word	0x200002a8
 8009bac:	200003a0 	.word	0x200003a0
 8009bb0:	2000043c 	.word	0x2000043c
 8009bb4:	200003dc 	.word	0x200003dc
 8009bb8:	20000278 	.word	0x20000278
 8009bbc:	20000480 	.word	0x20000480

08009bc0 <StartTimerPwm>:


void StartTimerPwm(BLDC_HandleTypeDef *pBLDCHandle)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);			// Start PWM for UB
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 fcfc 	bl	80025cc <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);			// Start PWM for VB
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	2104      	movs	r1, #4
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f8 fcf6 	bl	80025cc <TIM_PWM_Start>
	TIM_PWM_Start(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);			// Start PWM for WB
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	2108      	movs	r1, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f8 fcf0 	bl	80025cc <TIM_PWM_Start>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <DisableTimerPwmChannel>:
	TIM_ENABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
}


void DisableTimerPwmChannel(BLDC_HandleTypeDef *pBLDCHandle)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6a1a      	ldr	r2, [r3, #32]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6a1a      	ldr	r2, [r3, #32]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0210 	bic.w	r2, r2, #16
 8009c22:	621a      	str	r2, [r3, #32]
	TIM_DISABLE_CHANNEL(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c36:	621a      	str	r2, [r3, #32]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr

08009c42 <SetPwmDuty>:


void SetPwmDuty(BLDC_HandleTypeDef *pBLDCHandle, uint32_t duty)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_1, (uint16_t)duty);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_2, (uint16_t)duty);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_SET_COMPARE(pBLDCHandle->Init.TIM_Handle, TIM_CHANNEL_3, (uint16_t)duty);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bc80      	pop	{r7}
 8009c78:	4770      	bx	lr
	...

08009c7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009c7c:	480d      	ldr	r0, [pc, #52]	; (8009cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009c7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c80:	480d      	ldr	r0, [pc, #52]	; (8009cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8009c82:	490e      	ldr	r1, [pc, #56]	; (8009cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c84:	4a0e      	ldr	r2, [pc, #56]	; (8009cc0 <LoopForever+0xe>)
  movs r3, #0
 8009c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c88:	e002      	b.n	8009c90 <LoopCopyDataInit>

08009c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c8e:	3304      	adds	r3, #4

08009c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c94:	d3f9      	bcc.n	8009c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c96:	4a0b      	ldr	r2, [pc, #44]	; (8009cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c98:	4c0b      	ldr	r4, [pc, #44]	; (8009cc8 <LoopForever+0x16>)
  movs r3, #0
 8009c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c9c:	e001      	b.n	8009ca2 <LoopFillZerobss>

08009c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ca0:	3204      	adds	r2, #4

08009ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ca4:	d3fb      	bcc.n	8009c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009ca6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8009caa:	f000 f817 	bl	8009cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009cae:	f7f9 ffe3 	bl	8003c78 <main>

08009cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8009cb2:	e7fe      	b.n	8009cb2 <LoopForever>
  ldr   r0, =_estack
 8009cb4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8009cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009cbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8009cc0:	0800db38 	.word	0x0800db38
  ldr r2, =_sbss
 8009cc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8009cc8:	200004f8 	.word	0x200004f8

08009ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009ccc:	e7fe      	b.n	8009ccc <ADC1_2_IRQHandler>
	...

08009cd0 <__errno>:
 8009cd0:	4b01      	ldr	r3, [pc, #4]	; (8009cd8 <__errno+0x8>)
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	2000000c 	.word	0x2000000c

08009cdc <__libc_init_array>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	2500      	movs	r5, #0
 8009ce0:	4e0c      	ldr	r6, [pc, #48]	; (8009d14 <__libc_init_array+0x38>)
 8009ce2:	4c0d      	ldr	r4, [pc, #52]	; (8009d18 <__libc_init_array+0x3c>)
 8009ce4:	1ba4      	subs	r4, r4, r6
 8009ce6:	10a4      	asrs	r4, r4, #2
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	d109      	bne.n	8009d00 <__libc_init_array+0x24>
 8009cec:	f002 f85e 	bl	800bdac <_init>
 8009cf0:	2500      	movs	r5, #0
 8009cf2:	4e0a      	ldr	r6, [pc, #40]	; (8009d1c <__libc_init_array+0x40>)
 8009cf4:	4c0a      	ldr	r4, [pc, #40]	; (8009d20 <__libc_init_array+0x44>)
 8009cf6:	1ba4      	subs	r4, r4, r6
 8009cf8:	10a4      	asrs	r4, r4, #2
 8009cfa:	42a5      	cmp	r5, r4
 8009cfc:	d105      	bne.n	8009d0a <__libc_init_array+0x2e>
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d04:	4798      	blx	r3
 8009d06:	3501      	adds	r5, #1
 8009d08:	e7ee      	b.n	8009ce8 <__libc_init_array+0xc>
 8009d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d0e:	4798      	blx	r3
 8009d10:	3501      	adds	r5, #1
 8009d12:	e7f2      	b.n	8009cfa <__libc_init_array+0x1e>
 8009d14:	0800db30 	.word	0x0800db30
 8009d18:	0800db30 	.word	0x0800db30
 8009d1c:	0800db30 	.word	0x0800db30
 8009d20:	0800db34 	.word	0x0800db34

08009d24 <memset>:
 8009d24:	4603      	mov	r3, r0
 8009d26:	4402      	add	r2, r0
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d100      	bne.n	8009d2e <memset+0xa>
 8009d2c:	4770      	bx	lr
 8009d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d32:	e7f9      	b.n	8009d28 <memset+0x4>

08009d34 <__cvt>:
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3a:	461e      	mov	r6, r3
 8009d3c:	bfbb      	ittet	lt
 8009d3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009d42:	461e      	movlt	r6, r3
 8009d44:	2300      	movge	r3, #0
 8009d46:	232d      	movlt	r3, #45	; 0x2d
 8009d48:	b088      	sub	sp, #32
 8009d4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d4c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009d50:	f027 0720 	bic.w	r7, r7, #32
 8009d54:	2f46      	cmp	r7, #70	; 0x46
 8009d56:	4614      	mov	r4, r2
 8009d58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d5a:	700b      	strb	r3, [r1, #0]
 8009d5c:	d004      	beq.n	8009d68 <__cvt+0x34>
 8009d5e:	2f45      	cmp	r7, #69	; 0x45
 8009d60:	d100      	bne.n	8009d64 <__cvt+0x30>
 8009d62:	3501      	adds	r5, #1
 8009d64:	2302      	movs	r3, #2
 8009d66:	e000      	b.n	8009d6a <__cvt+0x36>
 8009d68:	2303      	movs	r3, #3
 8009d6a:	aa07      	add	r2, sp, #28
 8009d6c:	9204      	str	r2, [sp, #16]
 8009d6e:	aa06      	add	r2, sp, #24
 8009d70:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009d74:	e9cd 3500 	strd	r3, r5, [sp]
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4633      	mov	r3, r6
 8009d7c:	f000 fcd8 	bl	800a730 <_dtoa_r>
 8009d80:	2f47      	cmp	r7, #71	; 0x47
 8009d82:	4680      	mov	r8, r0
 8009d84:	d102      	bne.n	8009d8c <__cvt+0x58>
 8009d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d88:	07db      	lsls	r3, r3, #31
 8009d8a:	d526      	bpl.n	8009dda <__cvt+0xa6>
 8009d8c:	2f46      	cmp	r7, #70	; 0x46
 8009d8e:	eb08 0905 	add.w	r9, r8, r5
 8009d92:	d111      	bne.n	8009db8 <__cvt+0x84>
 8009d94:	f898 3000 	ldrb.w	r3, [r8]
 8009d98:	2b30      	cmp	r3, #48	; 0x30
 8009d9a:	d10a      	bne.n	8009db2 <__cvt+0x7e>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2300      	movs	r3, #0
 8009da0:	4620      	mov	r0, r4
 8009da2:	4631      	mov	r1, r6
 8009da4:	f7f6 fe10 	bl	80009c8 <__aeabi_dcmpeq>
 8009da8:	b918      	cbnz	r0, 8009db2 <__cvt+0x7e>
 8009daa:	f1c5 0501 	rsb	r5, r5, #1
 8009dae:	f8ca 5000 	str.w	r5, [sl]
 8009db2:	f8da 3000 	ldr.w	r3, [sl]
 8009db6:	4499      	add	r9, r3
 8009db8:	2200      	movs	r2, #0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	f7f6 fe02 	bl	80009c8 <__aeabi_dcmpeq>
 8009dc4:	b938      	cbnz	r0, 8009dd6 <__cvt+0xa2>
 8009dc6:	2230      	movs	r2, #48	; 0x30
 8009dc8:	9b07      	ldr	r3, [sp, #28]
 8009dca:	454b      	cmp	r3, r9
 8009dcc:	d205      	bcs.n	8009dda <__cvt+0xa6>
 8009dce:	1c59      	adds	r1, r3, #1
 8009dd0:	9107      	str	r1, [sp, #28]
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e7f8      	b.n	8009dc8 <__cvt+0x94>
 8009dd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8009dda:	4640      	mov	r0, r8
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009de0:	eba3 0308 	sub.w	r3, r3, r8
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	b008      	add	sp, #32
 8009de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009dec <__exponent>:
 8009dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dee:	2900      	cmp	r1, #0
 8009df0:	bfb4      	ite	lt
 8009df2:	232d      	movlt	r3, #45	; 0x2d
 8009df4:	232b      	movge	r3, #43	; 0x2b
 8009df6:	4604      	mov	r4, r0
 8009df8:	bfb8      	it	lt
 8009dfa:	4249      	neglt	r1, r1
 8009dfc:	2909      	cmp	r1, #9
 8009dfe:	f804 2b02 	strb.w	r2, [r4], #2
 8009e02:	7043      	strb	r3, [r0, #1]
 8009e04:	dd21      	ble.n	8009e4a <__exponent+0x5e>
 8009e06:	f10d 0307 	add.w	r3, sp, #7
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	260a      	movs	r6, #10
 8009e0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e12:	fb06 1115 	mls	r1, r6, r5, r1
 8009e16:	2d09      	cmp	r5, #9
 8009e18:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009e1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e20:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e24:	4629      	mov	r1, r5
 8009e26:	dc09      	bgt.n	8009e3c <__exponent+0x50>
 8009e28:	3130      	adds	r1, #48	; 0x30
 8009e2a:	3b02      	subs	r3, #2
 8009e2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e30:	42bb      	cmp	r3, r7
 8009e32:	4622      	mov	r2, r4
 8009e34:	d304      	bcc.n	8009e40 <__exponent+0x54>
 8009e36:	1a10      	subs	r0, r2, r0
 8009e38:	b003      	add	sp, #12
 8009e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	e7e6      	b.n	8009e0e <__exponent+0x22>
 8009e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e44:	f804 2b01 	strb.w	r2, [r4], #1
 8009e48:	e7f2      	b.n	8009e30 <__exponent+0x44>
 8009e4a:	2330      	movs	r3, #48	; 0x30
 8009e4c:	4419      	add	r1, r3
 8009e4e:	7083      	strb	r3, [r0, #2]
 8009e50:	1d02      	adds	r2, r0, #4
 8009e52:	70c1      	strb	r1, [r0, #3]
 8009e54:	e7ef      	b.n	8009e36 <__exponent+0x4a>
	...

08009e58 <_printf_float>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	b091      	sub	sp, #68	; 0x44
 8009e5e:	460c      	mov	r4, r1
 8009e60:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009e62:	4693      	mov	fp, r2
 8009e64:	461e      	mov	r6, r3
 8009e66:	4605      	mov	r5, r0
 8009e68:	f001 fa16 	bl	800b298 <_localeconv_r>
 8009e6c:	6803      	ldr	r3, [r0, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	9309      	str	r3, [sp, #36]	; 0x24
 8009e72:	f7f6 f97d 	bl	8000170 <strlen>
 8009e76:	2300      	movs	r3, #0
 8009e78:	930e      	str	r3, [sp, #56]	; 0x38
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e7e:	3307      	adds	r3, #7
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	f103 0208 	add.w	r2, r3, #8
 8009e88:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009e8c:	f8d4 a000 	ldr.w	sl, [r4]
 8009e90:	603a      	str	r2, [r7, #0]
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e9a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009e9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	4ba6      	ldr	r3, [pc, #664]	; (800a144 <_printf_float+0x2ec>)
 8009eaa:	4638      	mov	r0, r7
 8009eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eae:	f7f6 fdbd 	bl	8000a2c <__aeabi_dcmpun>
 8009eb2:	bb68      	cbnz	r0, 8009f10 <_printf_float+0xb8>
 8009eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb8:	4ba2      	ldr	r3, [pc, #648]	; (800a144 <_printf_float+0x2ec>)
 8009eba:	4638      	mov	r0, r7
 8009ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ebe:	f7f6 fd97 	bl	80009f0 <__aeabi_dcmple>
 8009ec2:	bb28      	cbnz	r0, 8009f10 <_printf_float+0xb8>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4638      	mov	r0, r7
 8009eca:	4649      	mov	r1, r9
 8009ecc:	f7f6 fd86 	bl	80009dc <__aeabi_dcmplt>
 8009ed0:	b110      	cbz	r0, 8009ed8 <_printf_float+0x80>
 8009ed2:	232d      	movs	r3, #45	; 0x2d
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed8:	4f9b      	ldr	r7, [pc, #620]	; (800a148 <_printf_float+0x2f0>)
 8009eda:	4b9c      	ldr	r3, [pc, #624]	; (800a14c <_printf_float+0x2f4>)
 8009edc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ee0:	bf98      	it	ls
 8009ee2:	461f      	movls	r7, r3
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	f02a 0304 	bic.w	r3, sl, #4
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	9600      	str	r6, [sp, #0]
 8009ef4:	465b      	mov	r3, fp
 8009ef6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f9e2 	bl	800a2c4 <_printf_common>
 8009f00:	3001      	adds	r0, #1
 8009f02:	f040 8090 	bne.w	800a026 <_printf_float+0x1ce>
 8009f06:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0a:	b011      	add	sp, #68	; 0x44
 8009f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f10:	463a      	mov	r2, r7
 8009f12:	464b      	mov	r3, r9
 8009f14:	4638      	mov	r0, r7
 8009f16:	4649      	mov	r1, r9
 8009f18:	f7f6 fd88 	bl	8000a2c <__aeabi_dcmpun>
 8009f1c:	b110      	cbz	r0, 8009f24 <_printf_float+0xcc>
 8009f1e:	4f8c      	ldr	r7, [pc, #560]	; (800a150 <_printf_float+0x2f8>)
 8009f20:	4b8c      	ldr	r3, [pc, #560]	; (800a154 <_printf_float+0x2fc>)
 8009f22:	e7db      	b.n	8009edc <_printf_float+0x84>
 8009f24:	6863      	ldr	r3, [r4, #4]
 8009f26:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009f2a:	1c59      	adds	r1, r3, #1
 8009f2c:	a80d      	add	r0, sp, #52	; 0x34
 8009f2e:	a90e      	add	r1, sp, #56	; 0x38
 8009f30:	d140      	bne.n	8009fb4 <_printf_float+0x15c>
 8009f32:	2306      	movs	r3, #6
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	f04f 0c00 	mov.w	ip, #0
 8009f3a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009f3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009f42:	6863      	ldr	r3, [r4, #4]
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	464b      	mov	r3, r9
 8009f50:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009f54:	4628      	mov	r0, r5
 8009f56:	f7ff feed 	bl	8009d34 <__cvt>
 8009f5a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009f5e:	2b47      	cmp	r3, #71	; 0x47
 8009f60:	4607      	mov	r7, r0
 8009f62:	d109      	bne.n	8009f78 <_printf_float+0x120>
 8009f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f66:	1cd8      	adds	r0, r3, #3
 8009f68:	db02      	blt.n	8009f70 <_printf_float+0x118>
 8009f6a:	6862      	ldr	r2, [r4, #4]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	dd47      	ble.n	800a000 <_printf_float+0x1a8>
 8009f70:	f1a8 0802 	sub.w	r8, r8, #2
 8009f74:	fa5f f888 	uxtb.w	r8, r8
 8009f78:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009f7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f7e:	d824      	bhi.n	8009fca <_printf_float+0x172>
 8009f80:	3901      	subs	r1, #1
 8009f82:	4642      	mov	r2, r8
 8009f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f88:	910d      	str	r1, [sp, #52]	; 0x34
 8009f8a:	f7ff ff2f 	bl	8009dec <__exponent>
 8009f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f90:	4681      	mov	r9, r0
 8009f92:	1813      	adds	r3, r2, r0
 8009f94:	2a01      	cmp	r2, #1
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	dc02      	bgt.n	8009fa0 <_printf_float+0x148>
 8009f9a:	6822      	ldr	r2, [r4, #0]
 8009f9c:	07d1      	lsls	r1, r2, #31
 8009f9e:	d501      	bpl.n	8009fa4 <_printf_float+0x14c>
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	6123      	str	r3, [r4, #16]
 8009fa4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0a2      	beq.n	8009ef2 <_printf_float+0x9a>
 8009fac:	232d      	movs	r3, #45	; 0x2d
 8009fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb2:	e79e      	b.n	8009ef2 <_printf_float+0x9a>
 8009fb4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009fb8:	f000 816e 	beq.w	800a298 <_printf_float+0x440>
 8009fbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fc0:	d1b9      	bne.n	8009f36 <_printf_float+0xde>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1b7      	bne.n	8009f36 <_printf_float+0xde>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e7b4      	b.n	8009f34 <_printf_float+0xdc>
 8009fca:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009fce:	d119      	bne.n	800a004 <_printf_float+0x1ac>
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	6863      	ldr	r3, [r4, #4]
 8009fd4:	dd0c      	ble.n	8009ff0 <_printf_float+0x198>
 8009fd6:	6121      	str	r1, [r4, #16]
 8009fd8:	b913      	cbnz	r3, 8009fe0 <_printf_float+0x188>
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	07d2      	lsls	r2, r2, #31
 8009fde:	d502      	bpl.n	8009fe6 <_printf_float+0x18e>
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	440b      	add	r3, r1
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe8:	f04f 0900 	mov.w	r9, #0
 8009fec:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fee:	e7d9      	b.n	8009fa4 <_printf_float+0x14c>
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_printf_float+0x1a0>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	07d0      	lsls	r0, r2, #31
 8009ff6:	d501      	bpl.n	8009ffc <_printf_float+0x1a4>
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	e7f3      	b.n	8009fe4 <_printf_float+0x18c>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e7f1      	b.n	8009fe4 <_printf_float+0x18c>
 800a000:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a004:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a008:	4293      	cmp	r3, r2
 800a00a:	db05      	blt.n	800a018 <_printf_float+0x1c0>
 800a00c:	6822      	ldr	r2, [r4, #0]
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	07d1      	lsls	r1, r2, #31
 800a012:	d5e8      	bpl.n	8009fe6 <_printf_float+0x18e>
 800a014:	3301      	adds	r3, #1
 800a016:	e7e5      	b.n	8009fe4 <_printf_float+0x18c>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bfcc      	ite	gt
 800a01c:	2301      	movgt	r3, #1
 800a01e:	f1c3 0302 	rsble	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	e7de      	b.n	8009fe4 <_printf_float+0x18c>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	055a      	lsls	r2, r3, #21
 800a02a:	d407      	bmi.n	800a03c <_printf_float+0x1e4>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	463a      	mov	r2, r7
 800a030:	4659      	mov	r1, fp
 800a032:	4628      	mov	r0, r5
 800a034:	47b0      	blx	r6
 800a036:	3001      	adds	r0, #1
 800a038:	d129      	bne.n	800a08e <_printf_float+0x236>
 800a03a:	e764      	b.n	8009f06 <_printf_float+0xae>
 800a03c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a040:	f240 80d7 	bls.w	800a1f2 <_printf_float+0x39a>
 800a044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a048:	2200      	movs	r2, #0
 800a04a:	2300      	movs	r3, #0
 800a04c:	f7f6 fcbc 	bl	80009c8 <__aeabi_dcmpeq>
 800a050:	b388      	cbz	r0, 800a0b6 <_printf_float+0x25e>
 800a052:	2301      	movs	r3, #1
 800a054:	4a40      	ldr	r2, [pc, #256]	; (800a158 <_printf_float+0x300>)
 800a056:	4659      	mov	r1, fp
 800a058:	4628      	mov	r0, r5
 800a05a:	47b0      	blx	r6
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f af52 	beq.w	8009f06 <_printf_float+0xae>
 800a062:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a066:	429a      	cmp	r2, r3
 800a068:	db02      	blt.n	800a070 <_printf_float+0x218>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	07d8      	lsls	r0, r3, #31
 800a06e:	d50e      	bpl.n	800a08e <_printf_float+0x236>
 800a070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a074:	4659      	mov	r1, fp
 800a076:	4628      	mov	r0, r5
 800a078:	47b0      	blx	r6
 800a07a:	3001      	adds	r0, #1
 800a07c:	f43f af43 	beq.w	8009f06 <_printf_float+0xae>
 800a080:	2700      	movs	r7, #0
 800a082:	f104 081a 	add.w	r8, r4, #26
 800a086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a088:	3b01      	subs	r3, #1
 800a08a:	42bb      	cmp	r3, r7
 800a08c:	dc09      	bgt.n	800a0a2 <_printf_float+0x24a>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	079f      	lsls	r7, r3, #30
 800a092:	f100 80fd 	bmi.w	800a290 <_printf_float+0x438>
 800a096:	68e0      	ldr	r0, [r4, #12]
 800a098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09a:	4298      	cmp	r0, r3
 800a09c:	bfb8      	it	lt
 800a09e:	4618      	movlt	r0, r3
 800a0a0:	e733      	b.n	8009f0a <_printf_float+0xb2>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	4659      	mov	r1, fp
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b0      	blx	r6
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f af2a 	beq.w	8009f06 <_printf_float+0xae>
 800a0b2:	3701      	adds	r7, #1
 800a0b4:	e7e7      	b.n	800a086 <_printf_float+0x22e>
 800a0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc2b      	bgt.n	800a114 <_printf_float+0x2bc>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4a26      	ldr	r2, [pc, #152]	; (800a158 <_printf_float+0x300>)
 800a0c0:	4659      	mov	r1, fp
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af1d 	beq.w	8009f06 <_printf_float+0xae>
 800a0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ce:	b923      	cbnz	r3, 800a0da <_printf_float+0x282>
 800a0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d2:	b913      	cbnz	r3, 800a0da <_printf_float+0x282>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	07d9      	lsls	r1, r3, #31
 800a0d8:	d5d9      	bpl.n	800a08e <_printf_float+0x236>
 800a0da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0de:	4659      	mov	r1, fp
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b0      	blx	r6
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f af0e 	beq.w	8009f06 <_printf_float+0xae>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	f104 091a 	add.w	r9, r4, #26
 800a0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f4:	425b      	negs	r3, r3
 800a0f6:	4543      	cmp	r3, r8
 800a0f8:	dc01      	bgt.n	800a0fe <_printf_float+0x2a6>
 800a0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0fc:	e797      	b.n	800a02e <_printf_float+0x1d6>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4659      	mov	r1, fp
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f aefc 	beq.w	8009f06 <_printf_float+0xae>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	e7ee      	b.n	800a0f2 <_printf_float+0x29a>
 800a114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a116:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a118:	429a      	cmp	r2, r3
 800a11a:	bfa8      	it	ge
 800a11c:	461a      	movge	r2, r3
 800a11e:	2a00      	cmp	r2, #0
 800a120:	4690      	mov	r8, r2
 800a122:	dd07      	ble.n	800a134 <_printf_float+0x2dc>
 800a124:	4613      	mov	r3, r2
 800a126:	4659      	mov	r1, fp
 800a128:	463a      	mov	r2, r7
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b0      	blx	r6
 800a12e:	3001      	adds	r0, #1
 800a130:	f43f aee9 	beq.w	8009f06 <_printf_float+0xae>
 800a134:	f104 031a 	add.w	r3, r4, #26
 800a138:	f04f 0a00 	mov.w	sl, #0
 800a13c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a140:	930b      	str	r3, [sp, #44]	; 0x2c
 800a142:	e015      	b.n	800a170 <_printf_float+0x318>
 800a144:	7fefffff 	.word	0x7fefffff
 800a148:	0800d8d8 	.word	0x0800d8d8
 800a14c:	0800d8d4 	.word	0x0800d8d4
 800a150:	0800d8e0 	.word	0x0800d8e0
 800a154:	0800d8dc 	.word	0x0800d8dc
 800a158:	0800d8e4 	.word	0x0800d8e4
 800a15c:	2301      	movs	r3, #1
 800a15e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a160:	4659      	mov	r1, fp
 800a162:	4628      	mov	r0, r5
 800a164:	47b0      	blx	r6
 800a166:	3001      	adds	r0, #1
 800a168:	f43f aecd 	beq.w	8009f06 <_printf_float+0xae>
 800a16c:	f10a 0a01 	add.w	sl, sl, #1
 800a170:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a174:	eba9 0308 	sub.w	r3, r9, r8
 800a178:	4553      	cmp	r3, sl
 800a17a:	dcef      	bgt.n	800a15c <_printf_float+0x304>
 800a17c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a180:	429a      	cmp	r2, r3
 800a182:	444f      	add	r7, r9
 800a184:	db14      	blt.n	800a1b0 <_printf_float+0x358>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	07da      	lsls	r2, r3, #31
 800a18a:	d411      	bmi.n	800a1b0 <_printf_float+0x358>
 800a18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a18e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a190:	eba3 0209 	sub.w	r2, r3, r9
 800a194:	eba3 0901 	sub.w	r9, r3, r1
 800a198:	4591      	cmp	r9, r2
 800a19a:	bfa8      	it	ge
 800a19c:	4691      	movge	r9, r2
 800a19e:	f1b9 0f00 	cmp.w	r9, #0
 800a1a2:	dc0d      	bgt.n	800a1c0 <_printf_float+0x368>
 800a1a4:	2700      	movs	r7, #0
 800a1a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1aa:	f104 081a 	add.w	r8, r4, #26
 800a1ae:	e018      	b.n	800a1e2 <_printf_float+0x38a>
 800a1b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b0      	blx	r6
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d1e6      	bne.n	800a18c <_printf_float+0x334>
 800a1be:	e6a2      	b.n	8009f06 <_printf_float+0xae>
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b0      	blx	r6
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d1ea      	bne.n	800a1a4 <_printf_float+0x34c>
 800a1ce:	e69a      	b.n	8009f06 <_printf_float+0xae>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4642      	mov	r2, r8
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47b0      	blx	r6
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f43f ae93 	beq.w	8009f06 <_printf_float+0xae>
 800a1e0:	3701      	adds	r7, #1
 800a1e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	eba3 0309 	sub.w	r3, r3, r9
 800a1ec:	42bb      	cmp	r3, r7
 800a1ee:	dcef      	bgt.n	800a1d0 <_printf_float+0x378>
 800a1f0:	e74d      	b.n	800a08e <_printf_float+0x236>
 800a1f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1f4:	2a01      	cmp	r2, #1
 800a1f6:	dc01      	bgt.n	800a1fc <_printf_float+0x3a4>
 800a1f8:	07db      	lsls	r3, r3, #31
 800a1fa:	d538      	bpl.n	800a26e <_printf_float+0x416>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	463a      	mov	r2, r7
 800a200:	4659      	mov	r1, fp
 800a202:	4628      	mov	r0, r5
 800a204:	47b0      	blx	r6
 800a206:	3001      	adds	r0, #1
 800a208:	f43f ae7d 	beq.w	8009f06 <_printf_float+0xae>
 800a20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a210:	4659      	mov	r1, fp
 800a212:	4628      	mov	r0, r5
 800a214:	47b0      	blx	r6
 800a216:	3001      	adds	r0, #1
 800a218:	f107 0701 	add.w	r7, r7, #1
 800a21c:	f43f ae73 	beq.w	8009f06 <_printf_float+0xae>
 800a220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a226:	2200      	movs	r2, #0
 800a228:	f103 38ff 	add.w	r8, r3, #4294967295
 800a22c:	2300      	movs	r3, #0
 800a22e:	f7f6 fbcb 	bl	80009c8 <__aeabi_dcmpeq>
 800a232:	b9c0      	cbnz	r0, 800a266 <_printf_float+0x40e>
 800a234:	4643      	mov	r3, r8
 800a236:	463a      	mov	r2, r7
 800a238:	4659      	mov	r1, fp
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b0      	blx	r6
 800a23e:	3001      	adds	r0, #1
 800a240:	d10d      	bne.n	800a25e <_printf_float+0x406>
 800a242:	e660      	b.n	8009f06 <_printf_float+0xae>
 800a244:	2301      	movs	r3, #1
 800a246:	4642      	mov	r2, r8
 800a248:	4659      	mov	r1, fp
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b0      	blx	r6
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f ae59 	beq.w	8009f06 <_printf_float+0xae>
 800a254:	3701      	adds	r7, #1
 800a256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a258:	3b01      	subs	r3, #1
 800a25a:	42bb      	cmp	r3, r7
 800a25c:	dcf2      	bgt.n	800a244 <_printf_float+0x3ec>
 800a25e:	464b      	mov	r3, r9
 800a260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a264:	e6e4      	b.n	800a030 <_printf_float+0x1d8>
 800a266:	2700      	movs	r7, #0
 800a268:	f104 081a 	add.w	r8, r4, #26
 800a26c:	e7f3      	b.n	800a256 <_printf_float+0x3fe>
 800a26e:	2301      	movs	r3, #1
 800a270:	e7e1      	b.n	800a236 <_printf_float+0x3de>
 800a272:	2301      	movs	r3, #1
 800a274:	4642      	mov	r2, r8
 800a276:	4659      	mov	r1, fp
 800a278:	4628      	mov	r0, r5
 800a27a:	47b0      	blx	r6
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f ae42 	beq.w	8009f06 <_printf_float+0xae>
 800a282:	3701      	adds	r7, #1
 800a284:	68e3      	ldr	r3, [r4, #12]
 800a286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	42bb      	cmp	r3, r7
 800a28c:	dcf1      	bgt.n	800a272 <_printf_float+0x41a>
 800a28e:	e702      	b.n	800a096 <_printf_float+0x23e>
 800a290:	2700      	movs	r7, #0
 800a292:	f104 0819 	add.w	r8, r4, #25
 800a296:	e7f5      	b.n	800a284 <_printf_float+0x42c>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f43f ae94 	beq.w	8009fc6 <_printf_float+0x16e>
 800a29e:	f04f 0c00 	mov.w	ip, #0
 800a2a2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a2a6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a2b0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f7ff fd3a 	bl	8009d34 <__cvt>
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	e64f      	b.n	8009f64 <_printf_float+0x10c>

0800a2c4 <_printf_common>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	4691      	mov	r9, r2
 800a2ca:	461f      	mov	r7, r3
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bfb8      	it	lt
 800a2d6:	4613      	movlt	r3, r2
 800a2d8:	f8c9 3000 	str.w	r3, [r9]
 800a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2e6:	b112      	cbz	r2, 800a2ee <_printf_common+0x2a>
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f8c9 3000 	str.w	r3, [r9]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0699      	lsls	r1, r3, #26
 800a2f2:	bf42      	ittt	mi
 800a2f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2f8:	3302      	addmi	r3, #2
 800a2fa:	f8c9 3000 	strmi.w	r3, [r9]
 800a2fe:	6825      	ldr	r5, [r4, #0]
 800a300:	f015 0506 	ands.w	r5, r5, #6
 800a304:	d107      	bne.n	800a316 <_printf_common+0x52>
 800a306:	f104 0a19 	add.w	sl, r4, #25
 800a30a:	68e3      	ldr	r3, [r4, #12]
 800a30c:	f8d9 2000 	ldr.w	r2, [r9]
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	42ab      	cmp	r3, r5
 800a314:	dc29      	bgt.n	800a36a <_printf_common+0xa6>
 800a316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a31a:	6822      	ldr	r2, [r4, #0]
 800a31c:	3300      	adds	r3, #0
 800a31e:	bf18      	it	ne
 800a320:	2301      	movne	r3, #1
 800a322:	0692      	lsls	r2, r2, #26
 800a324:	d42e      	bmi.n	800a384 <_printf_common+0xc0>
 800a326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a32a:	4639      	mov	r1, r7
 800a32c:	4630      	mov	r0, r6
 800a32e:	47c0      	blx	r8
 800a330:	3001      	adds	r0, #1
 800a332:	d021      	beq.n	800a378 <_printf_common+0xb4>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	68e5      	ldr	r5, [r4, #12]
 800a338:	f003 0306 	and.w	r3, r3, #6
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	bf18      	it	ne
 800a340:	2500      	movne	r5, #0
 800a342:	f8d9 2000 	ldr.w	r2, [r9]
 800a346:	f04f 0900 	mov.w	r9, #0
 800a34a:	bf08      	it	eq
 800a34c:	1aad      	subeq	r5, r5, r2
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	6922      	ldr	r2, [r4, #16]
 800a352:	bf08      	it	eq
 800a354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a358:	4293      	cmp	r3, r2
 800a35a:	bfc4      	itt	gt
 800a35c:	1a9b      	subgt	r3, r3, r2
 800a35e:	18ed      	addgt	r5, r5, r3
 800a360:	341a      	adds	r4, #26
 800a362:	454d      	cmp	r5, r9
 800a364:	d11a      	bne.n	800a39c <_printf_common+0xd8>
 800a366:	2000      	movs	r0, #0
 800a368:	e008      	b.n	800a37c <_printf_common+0xb8>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4652      	mov	r2, sl
 800a36e:	4639      	mov	r1, r7
 800a370:	4630      	mov	r0, r6
 800a372:	47c0      	blx	r8
 800a374:	3001      	adds	r0, #1
 800a376:	d103      	bne.n	800a380 <_printf_common+0xbc>
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a380:	3501      	adds	r5, #1
 800a382:	e7c2      	b.n	800a30a <_printf_common+0x46>
 800a384:	2030      	movs	r0, #48	; 0x30
 800a386:	18e1      	adds	r1, r4, r3
 800a388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a392:	4422      	add	r2, r4
 800a394:	3302      	adds	r3, #2
 800a396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a39a:	e7c4      	b.n	800a326 <_printf_common+0x62>
 800a39c:	2301      	movs	r3, #1
 800a39e:	4622      	mov	r2, r4
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d0e6      	beq.n	800a378 <_printf_common+0xb4>
 800a3aa:	f109 0901 	add.w	r9, r9, #1
 800a3ae:	e7d8      	b.n	800a362 <_printf_common+0x9e>

0800a3b0 <_printf_i>:
 800a3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	7e09      	ldrb	r1, [r1, #24]
 800a3bc:	b085      	sub	sp, #20
 800a3be:	296e      	cmp	r1, #110	; 0x6e
 800a3c0:	4617      	mov	r7, r2
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	4698      	mov	r8, r3
 800a3c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c8:	f000 80b3 	beq.w	800a532 <_printf_i+0x182>
 800a3cc:	d822      	bhi.n	800a414 <_printf_i+0x64>
 800a3ce:	2963      	cmp	r1, #99	; 0x63
 800a3d0:	d036      	beq.n	800a440 <_printf_i+0x90>
 800a3d2:	d80a      	bhi.n	800a3ea <_printf_i+0x3a>
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	f000 80b9 	beq.w	800a54c <_printf_i+0x19c>
 800a3da:	2958      	cmp	r1, #88	; 0x58
 800a3dc:	f000 8083 	beq.w	800a4e6 <_printf_i+0x136>
 800a3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3e8:	e032      	b.n	800a450 <_printf_i+0xa0>
 800a3ea:	2964      	cmp	r1, #100	; 0x64
 800a3ec:	d001      	beq.n	800a3f2 <_printf_i+0x42>
 800a3ee:	2969      	cmp	r1, #105	; 0x69
 800a3f0:	d1f6      	bne.n	800a3e0 <_printf_i+0x30>
 800a3f2:	6820      	ldr	r0, [r4, #0]
 800a3f4:	6813      	ldr	r3, [r2, #0]
 800a3f6:	0605      	lsls	r5, r0, #24
 800a3f8:	f103 0104 	add.w	r1, r3, #4
 800a3fc:	d52a      	bpl.n	800a454 <_printf_i+0xa4>
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	da03      	bge.n	800a40e <_printf_i+0x5e>
 800a406:	222d      	movs	r2, #45	; 0x2d
 800a408:	425b      	negs	r3, r3
 800a40a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a40e:	486f      	ldr	r0, [pc, #444]	; (800a5cc <_printf_i+0x21c>)
 800a410:	220a      	movs	r2, #10
 800a412:	e039      	b.n	800a488 <_printf_i+0xd8>
 800a414:	2973      	cmp	r1, #115	; 0x73
 800a416:	f000 809d 	beq.w	800a554 <_printf_i+0x1a4>
 800a41a:	d808      	bhi.n	800a42e <_printf_i+0x7e>
 800a41c:	296f      	cmp	r1, #111	; 0x6f
 800a41e:	d020      	beq.n	800a462 <_printf_i+0xb2>
 800a420:	2970      	cmp	r1, #112	; 0x70
 800a422:	d1dd      	bne.n	800a3e0 <_printf_i+0x30>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	f043 0320 	orr.w	r3, r3, #32
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	e003      	b.n	800a436 <_printf_i+0x86>
 800a42e:	2975      	cmp	r1, #117	; 0x75
 800a430:	d017      	beq.n	800a462 <_printf_i+0xb2>
 800a432:	2978      	cmp	r1, #120	; 0x78
 800a434:	d1d4      	bne.n	800a3e0 <_printf_i+0x30>
 800a436:	2378      	movs	r3, #120	; 0x78
 800a438:	4865      	ldr	r0, [pc, #404]	; (800a5d0 <_printf_i+0x220>)
 800a43a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a43e:	e055      	b.n	800a4ec <_printf_i+0x13c>
 800a440:	6813      	ldr	r3, [r2, #0]
 800a442:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a446:	1d19      	adds	r1, r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6011      	str	r1, [r2, #0]
 800a44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a450:	2301      	movs	r3, #1
 800a452:	e08c      	b.n	800a56e <_printf_i+0x1be>
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a45a:	6011      	str	r1, [r2, #0]
 800a45c:	bf18      	it	ne
 800a45e:	b21b      	sxthne	r3, r3
 800a460:	e7cf      	b.n	800a402 <_printf_i+0x52>
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	6825      	ldr	r5, [r4, #0]
 800a466:	1d18      	adds	r0, r3, #4
 800a468:	6010      	str	r0, [r2, #0]
 800a46a:	0628      	lsls	r0, r5, #24
 800a46c:	d501      	bpl.n	800a472 <_printf_i+0xc2>
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	e002      	b.n	800a478 <_printf_i+0xc8>
 800a472:	0668      	lsls	r0, r5, #25
 800a474:	d5fb      	bpl.n	800a46e <_printf_i+0xbe>
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	296f      	cmp	r1, #111	; 0x6f
 800a47a:	bf14      	ite	ne
 800a47c:	220a      	movne	r2, #10
 800a47e:	2208      	moveq	r2, #8
 800a480:	4852      	ldr	r0, [pc, #328]	; (800a5cc <_printf_i+0x21c>)
 800a482:	2100      	movs	r1, #0
 800a484:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a488:	6865      	ldr	r5, [r4, #4]
 800a48a:	2d00      	cmp	r5, #0
 800a48c:	60a5      	str	r5, [r4, #8]
 800a48e:	f2c0 8095 	blt.w	800a5bc <_printf_i+0x20c>
 800a492:	6821      	ldr	r1, [r4, #0]
 800a494:	f021 0104 	bic.w	r1, r1, #4
 800a498:	6021      	str	r1, [r4, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d13d      	bne.n	800a51a <_printf_i+0x16a>
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	f040 808e 	bne.w	800a5c0 <_printf_i+0x210>
 800a4a4:	4665      	mov	r5, ip
 800a4a6:	2a08      	cmp	r2, #8
 800a4a8:	d10b      	bne.n	800a4c2 <_printf_i+0x112>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	07db      	lsls	r3, r3, #31
 800a4ae:	d508      	bpl.n	800a4c2 <_printf_i+0x112>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	6862      	ldr	r2, [r4, #4]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	bfde      	ittt	le
 800a4b8:	2330      	movle	r3, #48	; 0x30
 800a4ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4c2:	ebac 0305 	sub.w	r3, ip, r5
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	f8cd 8000 	str.w	r8, [sp]
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	aa03      	add	r2, sp, #12
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff fef6 	bl	800a2c4 <_printf_common>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d14d      	bne.n	800a578 <_printf_i+0x1c8>
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	b005      	add	sp, #20
 800a4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	4839      	ldr	r0, [pc, #228]	; (800a5cc <_printf_i+0x21c>)
 800a4e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4ec:	6813      	ldr	r3, [r2, #0]
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	1d1d      	adds	r5, r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6015      	str	r5, [r2, #0]
 800a4f6:	060a      	lsls	r2, r1, #24
 800a4f8:	d50b      	bpl.n	800a512 <_printf_i+0x162>
 800a4fa:	07ca      	lsls	r2, r1, #31
 800a4fc:	bf44      	itt	mi
 800a4fe:	f041 0120 	orrmi.w	r1, r1, #32
 800a502:	6021      	strmi	r1, [r4, #0]
 800a504:	b91b      	cbnz	r3, 800a50e <_printf_i+0x15e>
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	f022 0220 	bic.w	r2, r2, #32
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	2210      	movs	r2, #16
 800a510:	e7b7      	b.n	800a482 <_printf_i+0xd2>
 800a512:	064d      	lsls	r5, r1, #25
 800a514:	bf48      	it	mi
 800a516:	b29b      	uxthmi	r3, r3
 800a518:	e7ef      	b.n	800a4fa <_printf_i+0x14a>
 800a51a:	4665      	mov	r5, ip
 800a51c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a520:	fb02 3311 	mls	r3, r2, r1, r3
 800a524:	5cc3      	ldrb	r3, [r0, r3]
 800a526:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a52a:	460b      	mov	r3, r1
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d1f5      	bne.n	800a51c <_printf_i+0x16c>
 800a530:	e7b9      	b.n	800a4a6 <_printf_i+0xf6>
 800a532:	6813      	ldr	r3, [r2, #0]
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	1d18      	adds	r0, r3, #4
 800a538:	6961      	ldr	r1, [r4, #20]
 800a53a:	6010      	str	r0, [r2, #0]
 800a53c:	0628      	lsls	r0, r5, #24
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	d501      	bpl.n	800a546 <_printf_i+0x196>
 800a542:	6019      	str	r1, [r3, #0]
 800a544:	e002      	b.n	800a54c <_printf_i+0x19c>
 800a546:	066a      	lsls	r2, r5, #25
 800a548:	d5fb      	bpl.n	800a542 <_printf_i+0x192>
 800a54a:	8019      	strh	r1, [r3, #0]
 800a54c:	2300      	movs	r3, #0
 800a54e:	4665      	mov	r5, ip
 800a550:	6123      	str	r3, [r4, #16]
 800a552:	e7b9      	b.n	800a4c8 <_printf_i+0x118>
 800a554:	6813      	ldr	r3, [r2, #0]
 800a556:	1d19      	adds	r1, r3, #4
 800a558:	6011      	str	r1, [r2, #0]
 800a55a:	681d      	ldr	r5, [r3, #0]
 800a55c:	6862      	ldr	r2, [r4, #4]
 800a55e:	2100      	movs	r1, #0
 800a560:	4628      	mov	r0, r5
 800a562:	f000 feaf 	bl	800b2c4 <memchr>
 800a566:	b108      	cbz	r0, 800a56c <_printf_i+0x1bc>
 800a568:	1b40      	subs	r0, r0, r5
 800a56a:	6060      	str	r0, [r4, #4]
 800a56c:	6863      	ldr	r3, [r4, #4]
 800a56e:	6123      	str	r3, [r4, #16]
 800a570:	2300      	movs	r3, #0
 800a572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a576:	e7a7      	b.n	800a4c8 <_printf_i+0x118>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4639      	mov	r1, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	47c0      	blx	r8
 800a582:	3001      	adds	r0, #1
 800a584:	d0aa      	beq.n	800a4dc <_printf_i+0x12c>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	079b      	lsls	r3, r3, #30
 800a58a:	d413      	bmi.n	800a5b4 <_printf_i+0x204>
 800a58c:	68e0      	ldr	r0, [r4, #12]
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	4298      	cmp	r0, r3
 800a592:	bfb8      	it	lt
 800a594:	4618      	movlt	r0, r3
 800a596:	e7a3      	b.n	800a4e0 <_printf_i+0x130>
 800a598:	2301      	movs	r3, #1
 800a59a:	464a      	mov	r2, r9
 800a59c:	4639      	mov	r1, r7
 800a59e:	4630      	mov	r0, r6
 800a5a0:	47c0      	blx	r8
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d09a      	beq.n	800a4dc <_printf_i+0x12c>
 800a5a6:	3501      	adds	r5, #1
 800a5a8:	68e3      	ldr	r3, [r4, #12]
 800a5aa:	9a03      	ldr	r2, [sp, #12]
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	42ab      	cmp	r3, r5
 800a5b0:	dcf2      	bgt.n	800a598 <_printf_i+0x1e8>
 800a5b2:	e7eb      	b.n	800a58c <_printf_i+0x1dc>
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	f104 0919 	add.w	r9, r4, #25
 800a5ba:	e7f5      	b.n	800a5a8 <_printf_i+0x1f8>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1ac      	bne.n	800a51a <_printf_i+0x16a>
 800a5c0:	7803      	ldrb	r3, [r0, #0]
 800a5c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5ca:	e76c      	b.n	800a4a6 <_printf_i+0xf6>
 800a5cc:	0800d8e6 	.word	0x0800d8e6
 800a5d0:	0800d8f7 	.word	0x0800d8f7

0800a5d4 <siprintf>:
 800a5d4:	b40e      	push	{r1, r2, r3}
 800a5d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5da:	b500      	push	{lr}
 800a5dc:	b09c      	sub	sp, #112	; 0x70
 800a5de:	ab1d      	add	r3, sp, #116	; 0x74
 800a5e0:	9002      	str	r0, [sp, #8]
 800a5e2:	9006      	str	r0, [sp, #24]
 800a5e4:	9107      	str	r1, [sp, #28]
 800a5e6:	9104      	str	r1, [sp, #16]
 800a5e8:	4808      	ldr	r0, [pc, #32]	; (800a60c <siprintf+0x38>)
 800a5ea:	4909      	ldr	r1, [pc, #36]	; (800a610 <siprintf+0x3c>)
 800a5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f0:	9105      	str	r1, [sp, #20]
 800a5f2:	6800      	ldr	r0, [r0, #0]
 800a5f4:	a902      	add	r1, sp, #8
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	f001 fa68 	bl	800bacc <_svfiprintf_r>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	9b02      	ldr	r3, [sp, #8]
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	b01c      	add	sp, #112	; 0x70
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b003      	add	sp, #12
 800a60a:	4770      	bx	lr
 800a60c:	2000000c 	.word	0x2000000c
 800a610:	ffff0208 	.word	0xffff0208

0800a614 <quorem>:
 800a614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	6903      	ldr	r3, [r0, #16]
 800a61a:	690c      	ldr	r4, [r1, #16]
 800a61c:	4680      	mov	r8, r0
 800a61e:	42a3      	cmp	r3, r4
 800a620:	f2c0 8084 	blt.w	800a72c <quorem+0x118>
 800a624:	3c01      	subs	r4, #1
 800a626:	f101 0714 	add.w	r7, r1, #20
 800a62a:	f100 0614 	add.w	r6, r0, #20
 800a62e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a632:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a636:	3501      	adds	r5, #1
 800a638:	fbb0 f5f5 	udiv	r5, r0, r5
 800a63c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a640:	eb06 030c 	add.w	r3, r6, ip
 800a644:	eb07 090c 	add.w	r9, r7, ip
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	b39d      	cbz	r5, 800a6b4 <quorem+0xa0>
 800a64c:	f04f 0a00 	mov.w	sl, #0
 800a650:	4638      	mov	r0, r7
 800a652:	46b6      	mov	lr, r6
 800a654:	46d3      	mov	fp, sl
 800a656:	f850 2b04 	ldr.w	r2, [r0], #4
 800a65a:	b293      	uxth	r3, r2
 800a65c:	fb05 a303 	mla	r3, r5, r3, sl
 800a660:	0c12      	lsrs	r2, r2, #16
 800a662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a666:	fb05 a202 	mla	r2, r5, r2, sl
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ebab 0303 	sub.w	r3, fp, r3
 800a670:	f8de b000 	ldr.w	fp, [lr]
 800a674:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a678:	fa1f fb8b 	uxth.w	fp, fp
 800a67c:	445b      	add	r3, fp
 800a67e:	fa1f fb82 	uxth.w	fp, r2
 800a682:	f8de 2000 	ldr.w	r2, [lr]
 800a686:	4581      	cmp	r9, r0
 800a688:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	b29b      	uxth	r3, r3
 800a692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a696:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a69a:	f84e 3b04 	str.w	r3, [lr], #4
 800a69e:	d2da      	bcs.n	800a656 <quorem+0x42>
 800a6a0:	f856 300c 	ldr.w	r3, [r6, ip]
 800a6a4:	b933      	cbnz	r3, 800a6b4 <quorem+0xa0>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	429e      	cmp	r6, r3
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	d331      	bcc.n	800a714 <quorem+0x100>
 800a6b0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	f001 f833 	bl	800b720 <__mcmp>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	db26      	blt.n	800a70c <quorem+0xf8>
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f04f 0c00 	mov.w	ip, #0
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	f857 1b04 	ldr.w	r1, [r7], #4
 800a6ca:	f8d0 e000 	ldr.w	lr, [r0]
 800a6ce:	b28b      	uxth	r3, r1
 800a6d0:	ebac 0303 	sub.w	r3, ip, r3
 800a6d4:	fa1f f28e 	uxth.w	r2, lr
 800a6d8:	4413      	add	r3, r2
 800a6da:	0c0a      	lsrs	r2, r1, #16
 800a6dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ea:	45b9      	cmp	r9, r7
 800a6ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6f0:	f840 3b04 	str.w	r3, [r0], #4
 800a6f4:	d2e7      	bcs.n	800a6c6 <quorem+0xb2>
 800a6f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6fe:	b92a      	cbnz	r2, 800a70c <quorem+0xf8>
 800a700:	3b04      	subs	r3, #4
 800a702:	429e      	cmp	r6, r3
 800a704:	461a      	mov	r2, r3
 800a706:	d30b      	bcc.n	800a720 <quorem+0x10c>
 800a708:	f8c8 4010 	str.w	r4, [r8, #16]
 800a70c:	4628      	mov	r0, r5
 800a70e:	b003      	add	sp, #12
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	6812      	ldr	r2, [r2, #0]
 800a716:	3b04      	subs	r3, #4
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d1c9      	bne.n	800a6b0 <quorem+0x9c>
 800a71c:	3c01      	subs	r4, #1
 800a71e:	e7c4      	b.n	800a6aa <quorem+0x96>
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	3b04      	subs	r3, #4
 800a724:	2a00      	cmp	r2, #0
 800a726:	d1ef      	bne.n	800a708 <quorem+0xf4>
 800a728:	3c01      	subs	r4, #1
 800a72a:	e7ea      	b.n	800a702 <quorem+0xee>
 800a72c:	2000      	movs	r0, #0
 800a72e:	e7ee      	b.n	800a70e <quorem+0xfa>

0800a730 <_dtoa_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	4616      	mov	r6, r2
 800a736:	461f      	mov	r7, r3
 800a738:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a73a:	b095      	sub	sp, #84	; 0x54
 800a73c:	4604      	mov	r4, r0
 800a73e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a742:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a746:	b93d      	cbnz	r5, 800a758 <_dtoa_r+0x28>
 800a748:	2010      	movs	r0, #16
 800a74a:	f000 fdb3 	bl	800b2b4 <malloc>
 800a74e:	6260      	str	r0, [r4, #36]	; 0x24
 800a750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a754:	6005      	str	r5, [r0, #0]
 800a756:	60c5      	str	r5, [r0, #12]
 800a758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a75a:	6819      	ldr	r1, [r3, #0]
 800a75c:	b151      	cbz	r1, 800a774 <_dtoa_r+0x44>
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	2301      	movs	r3, #1
 800a762:	4093      	lsls	r3, r2
 800a764:	604a      	str	r2, [r1, #4]
 800a766:	608b      	str	r3, [r1, #8]
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fdf8 	bl	800b35e <_Bfree>
 800a76e:	2200      	movs	r2, #0
 800a770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	1e3b      	subs	r3, r7, #0
 800a776:	bfaf      	iteee	ge
 800a778:	2300      	movge	r3, #0
 800a77a:	2201      	movlt	r2, #1
 800a77c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a780:	9303      	strlt	r3, [sp, #12]
 800a782:	bfac      	ite	ge
 800a784:	f8c8 3000 	strge.w	r3, [r8]
 800a788:	f8c8 2000 	strlt.w	r2, [r8]
 800a78c:	4bae      	ldr	r3, [pc, #696]	; (800aa48 <_dtoa_r+0x318>)
 800a78e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a792:	ea33 0308 	bics.w	r3, r3, r8
 800a796:	d11b      	bne.n	800a7d0 <_dtoa_r+0xa0>
 800a798:	f242 730f 	movw	r3, #9999	; 0x270f
 800a79c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	b923      	cbnz	r3, 800a7ae <_dtoa_r+0x7e>
 800a7a4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	f000 8545 	beq.w	800b238 <_dtoa_r+0xb08>
 800a7ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7b0:	b953      	cbnz	r3, 800a7c8 <_dtoa_r+0x98>
 800a7b2:	4ba6      	ldr	r3, [pc, #664]	; (800aa4c <_dtoa_r+0x31c>)
 800a7b4:	e021      	b.n	800a7fa <_dtoa_r+0xca>
 800a7b6:	4ba6      	ldr	r3, [pc, #664]	; (800aa50 <_dtoa_r+0x320>)
 800a7b8:	9306      	str	r3, [sp, #24]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	9806      	ldr	r0, [sp, #24]
 800a7c2:	b015      	add	sp, #84	; 0x54
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	4ba0      	ldr	r3, [pc, #640]	; (800aa4c <_dtoa_r+0x31c>)
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	3303      	adds	r3, #3
 800a7ce:	e7f5      	b.n	800a7bc <_dtoa_r+0x8c>
 800a7d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f8f4 	bl	80009c8 <__aeabi_dcmpeq>
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	b160      	cbz	r0, 800a7fe <_dtoa_r+0xce>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8520 	beq.w	800b232 <_dtoa_r+0xb02>
 800a7f2:	4b98      	ldr	r3, [pc, #608]	; (800aa54 <_dtoa_r+0x324>)
 800a7f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	9306      	str	r3, [sp, #24]
 800a7fc:	e7e0      	b.n	800a7c0 <_dtoa_r+0x90>
 800a7fe:	ab12      	add	r3, sp, #72	; 0x48
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	ab13      	add	r3, sp, #76	; 0x4c
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4632      	mov	r2, r6
 800a808:	463b      	mov	r3, r7
 800a80a:	4620      	mov	r0, r4
 800a80c:	f001 f800 	bl	800b810 <__d2b>
 800a810:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a814:	4683      	mov	fp, r0
 800a816:	2d00      	cmp	r5, #0
 800a818:	d07d      	beq.n	800a916 <_dtoa_r+0x1e6>
 800a81a:	46b0      	mov	r8, r6
 800a81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a820:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a824:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a828:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a82c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a830:	2200      	movs	r2, #0
 800a832:	4b89      	ldr	r3, [pc, #548]	; (800aa58 <_dtoa_r+0x328>)
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f5 fca6 	bl	8000188 <__aeabi_dsub>
 800a83c:	a37c      	add	r3, pc, #496	; (adr r3, 800aa30 <_dtoa_r+0x300>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fe59 	bl	80004f8 <__aeabi_dmul>
 800a846:	a37c      	add	r3, pc, #496	; (adr r3, 800aa38 <_dtoa_r+0x308>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fc9e 	bl	800018c <__adddf3>
 800a850:	4606      	mov	r6, r0
 800a852:	4628      	mov	r0, r5
 800a854:	460f      	mov	r7, r1
 800a856:	f7f5 fde5 	bl	8000424 <__aeabi_i2d>
 800a85a:	a379      	add	r3, pc, #484	; (adr r3, 800aa40 <_dtoa_r+0x310>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	f7f5 fe4a 	bl	80004f8 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fc8e 	bl	800018c <__adddf3>
 800a870:	4606      	mov	r6, r0
 800a872:	460f      	mov	r7, r1
 800a874:	f7f6 f8f0 	bl	8000a58 <__aeabi_d2iz>
 800a878:	2200      	movs	r2, #0
 800a87a:	4682      	mov	sl, r0
 800a87c:	2300      	movs	r3, #0
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f6 f8ab 	bl	80009dc <__aeabi_dcmplt>
 800a886:	b148      	cbz	r0, 800a89c <_dtoa_r+0x16c>
 800a888:	4650      	mov	r0, sl
 800a88a:	f7f5 fdcb 	bl	8000424 <__aeabi_i2d>
 800a88e:	4632      	mov	r2, r6
 800a890:	463b      	mov	r3, r7
 800a892:	f7f6 f899 	bl	80009c8 <__aeabi_dcmpeq>
 800a896:	b908      	cbnz	r0, 800a89c <_dtoa_r+0x16c>
 800a898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a89c:	f1ba 0f16 	cmp.w	sl, #22
 800a8a0:	d85a      	bhi.n	800a958 <_dtoa_r+0x228>
 800a8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a6:	496d      	ldr	r1, [pc, #436]	; (800aa5c <_dtoa_r+0x32c>)
 800a8a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8b0:	f7f6 f8b2 	bl	8000a18 <__aeabi_dcmpgt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d051      	beq.n	800a95c <_dtoa_r+0x22c>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8be:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8c2:	1b5d      	subs	r5, r3, r5
 800a8c4:	1e6b      	subs	r3, r5, #1
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	bf43      	ittte	mi
 800a8ca:	2300      	movmi	r3, #0
 800a8cc:	f1c5 0901 	rsbmi	r9, r5, #1
 800a8d0:	9307      	strmi	r3, [sp, #28]
 800a8d2:	f04f 0900 	movpl.w	r9, #0
 800a8d6:	f1ba 0f00 	cmp.w	sl, #0
 800a8da:	db41      	blt.n	800a960 <_dtoa_r+0x230>
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a8e2:	4453      	add	r3, sl
 800a8e4:	9307      	str	r3, [sp, #28]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	f200 808f 	bhi.w	800aa10 <_dtoa_r+0x2e0>
 800a8f2:	2b05      	cmp	r3, #5
 800a8f4:	bfc4      	itt	gt
 800a8f6:	3b04      	subgt	r3, #4
 800a8f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a8fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8fc:	bfc8      	it	gt
 800a8fe:	2500      	movgt	r5, #0
 800a900:	f1a3 0302 	sub.w	r3, r3, #2
 800a904:	bfd8      	it	le
 800a906:	2501      	movle	r5, #1
 800a908:	2b03      	cmp	r3, #3
 800a90a:	f200 808d 	bhi.w	800aa28 <_dtoa_r+0x2f8>
 800a90e:	e8df f003 	tbb	[pc, r3]
 800a912:	7d7b      	.short	0x7d7b
 800a914:	6f2f      	.short	0x6f2f
 800a916:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a91a:	441d      	add	r5, r3
 800a91c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a920:	2820      	cmp	r0, #32
 800a922:	dd13      	ble.n	800a94c <_dtoa_r+0x21c>
 800a924:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	fa08 f800 	lsl.w	r8, r8, r0
 800a92e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a932:	fa23 f000 	lsr.w	r0, r3, r0
 800a936:	ea48 0000 	orr.w	r0, r8, r0
 800a93a:	f7f5 fd63 	bl	8000404 <__aeabi_ui2d>
 800a93e:	2301      	movs	r3, #1
 800a940:	4680      	mov	r8, r0
 800a942:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a946:	3d01      	subs	r5, #1
 800a948:	9310      	str	r3, [sp, #64]	; 0x40
 800a94a:	e771      	b.n	800a830 <_dtoa_r+0x100>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	f1c0 0020 	rsb	r0, r0, #32
 800a952:	fa03 f000 	lsl.w	r0, r3, r0
 800a956:	e7f0      	b.n	800a93a <_dtoa_r+0x20a>
 800a958:	2301      	movs	r3, #1
 800a95a:	e7b0      	b.n	800a8be <_dtoa_r+0x18e>
 800a95c:	900d      	str	r0, [sp, #52]	; 0x34
 800a95e:	e7af      	b.n	800a8c0 <_dtoa_r+0x190>
 800a960:	f1ca 0300 	rsb	r3, sl, #0
 800a964:	9308      	str	r3, [sp, #32]
 800a966:	2300      	movs	r3, #0
 800a968:	eba9 090a 	sub.w	r9, r9, sl
 800a96c:	930c      	str	r3, [sp, #48]	; 0x30
 800a96e:	e7bc      	b.n	800a8ea <_dtoa_r+0x1ba>
 800a970:	2301      	movs	r3, #1
 800a972:	9309      	str	r3, [sp, #36]	; 0x24
 800a974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a976:	2b00      	cmp	r3, #0
 800a978:	dd74      	ble.n	800aa64 <_dtoa_r+0x334>
 800a97a:	4698      	mov	r8, r3
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	2200      	movs	r2, #0
 800a980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a982:	6072      	str	r2, [r6, #4]
 800a984:	2204      	movs	r2, #4
 800a986:	f102 0014 	add.w	r0, r2, #20
 800a98a:	4298      	cmp	r0, r3
 800a98c:	6871      	ldr	r1, [r6, #4]
 800a98e:	d96e      	bls.n	800aa6e <_dtoa_r+0x33e>
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fcb0 	bl	800b2f6 <_Balloc>
 800a996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a998:	6030      	str	r0, [r6, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f1b8 0f0e 	cmp.w	r8, #14
 800a9a0:	9306      	str	r3, [sp, #24]
 800a9a2:	f200 80ed 	bhi.w	800ab80 <_dtoa_r+0x450>
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	f000 80ea 	beq.w	800ab80 <_dtoa_r+0x450>
 800a9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9b0:	f1ba 0f00 	cmp.w	sl, #0
 800a9b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a9b8:	dd77      	ble.n	800aaaa <_dtoa_r+0x37a>
 800a9ba:	4a28      	ldr	r2, [pc, #160]	; (800aa5c <_dtoa_r+0x32c>)
 800a9bc:	f00a 030f 	and.w	r3, sl, #15
 800a9c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a9c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9c8:	06f0      	lsls	r0, r6, #27
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a9d2:	d568      	bpl.n	800aaa6 <_dtoa_r+0x376>
 800a9d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a9d8:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <_dtoa_r+0x330>)
 800a9da:	2503      	movs	r5, #3
 800a9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e0:	f7f5 feb4 	bl	800074c <__aeabi_ddiv>
 800a9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e8:	f006 060f 	and.w	r6, r6, #15
 800a9ec:	4f1c      	ldr	r7, [pc, #112]	; (800aa60 <_dtoa_r+0x330>)
 800a9ee:	e04f      	b.n	800aa90 <_dtoa_r+0x360>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9f6:	4453      	add	r3, sl
 800a9f8:	f103 0801 	add.w	r8, r3, #1
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	4643      	mov	r3, r8
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	bfb8      	it	lt
 800aa04:	2301      	movlt	r3, #1
 800aa06:	e7ba      	b.n	800a97e <_dtoa_r+0x24e>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e7b2      	b.n	800a972 <_dtoa_r+0x242>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	e7f0      	b.n	800a9f2 <_dtoa_r+0x2c2>
 800aa10:	2501      	movs	r5, #1
 800aa12:	2300      	movs	r3, #0
 800aa14:	9509      	str	r5, [sp, #36]	; 0x24
 800aa16:	931e      	str	r3, [sp, #120]	; 0x78
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	4698      	mov	r8, r3
 800aa22:	2312      	movs	r3, #18
 800aa24:	921f      	str	r2, [sp, #124]	; 0x7c
 800aa26:	e7aa      	b.n	800a97e <_dtoa_r+0x24e>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2c:	e7f4      	b.n	800aa18 <_dtoa_r+0x2e8>
 800aa2e:	bf00      	nop
 800aa30:	636f4361 	.word	0x636f4361
 800aa34:	3fd287a7 	.word	0x3fd287a7
 800aa38:	8b60c8b3 	.word	0x8b60c8b3
 800aa3c:	3fc68a28 	.word	0x3fc68a28
 800aa40:	509f79fb 	.word	0x509f79fb
 800aa44:	3fd34413 	.word	0x3fd34413
 800aa48:	7ff00000 	.word	0x7ff00000
 800aa4c:	0800d911 	.word	0x0800d911
 800aa50:	0800d908 	.word	0x0800d908
 800aa54:	0800d8e5 	.word	0x0800d8e5
 800aa58:	3ff80000 	.word	0x3ff80000
 800aa5c:	0800d940 	.word	0x0800d940
 800aa60:	0800d918 	.word	0x0800d918
 800aa64:	2301      	movs	r3, #1
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	4698      	mov	r8, r3
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	e7da      	b.n	800aa24 <_dtoa_r+0x2f4>
 800aa6e:	3101      	adds	r1, #1
 800aa70:	6071      	str	r1, [r6, #4]
 800aa72:	0052      	lsls	r2, r2, #1
 800aa74:	e787      	b.n	800a986 <_dtoa_r+0x256>
 800aa76:	07f1      	lsls	r1, r6, #31
 800aa78:	d508      	bpl.n	800aa8c <_dtoa_r+0x35c>
 800aa7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa82:	f7f5 fd39 	bl	80004f8 <__aeabi_dmul>
 800aa86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa8a:	3501      	adds	r5, #1
 800aa8c:	1076      	asrs	r6, r6, #1
 800aa8e:	3708      	adds	r7, #8
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	d1f0      	bne.n	800aa76 <_dtoa_r+0x346>
 800aa94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9c:	f7f5 fe56 	bl	800074c <__aeabi_ddiv>
 800aaa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa4:	e01b      	b.n	800aade <_dtoa_r+0x3ae>
 800aaa6:	2502      	movs	r5, #2
 800aaa8:	e7a0      	b.n	800a9ec <_dtoa_r+0x2bc>
 800aaaa:	f000 80a4 	beq.w	800abf6 <_dtoa_r+0x4c6>
 800aaae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aab2:	f1ca 0600 	rsb	r6, sl, #0
 800aab6:	4ba0      	ldr	r3, [pc, #640]	; (800ad38 <_dtoa_r+0x608>)
 800aab8:	f006 020f 	and.w	r2, r6, #15
 800aabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fd18 	bl	80004f8 <__aeabi_dmul>
 800aac8:	2502      	movs	r5, #2
 800aaca:	2300      	movs	r3, #0
 800aacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad0:	4f9a      	ldr	r7, [pc, #616]	; (800ad3c <_dtoa_r+0x60c>)
 800aad2:	1136      	asrs	r6, r6, #4
 800aad4:	2e00      	cmp	r6, #0
 800aad6:	f040 8083 	bne.w	800abe0 <_dtoa_r+0x4b0>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e0      	bne.n	800aaa0 <_dtoa_r+0x370>
 800aade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 808a 	beq.w	800abfa <_dtoa_r+0x4ca>
 800aae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aaee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4b92      	ldr	r3, [pc, #584]	; (800ad40 <_dtoa_r+0x610>)
 800aaf6:	f7f5 ff71 	bl	80009dc <__aeabi_dcmplt>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d07d      	beq.n	800abfa <_dtoa_r+0x4ca>
 800aafe:	f1b8 0f00 	cmp.w	r8, #0
 800ab02:	d07a      	beq.n	800abfa <_dtoa_r+0x4ca>
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd36      	ble.n	800ab78 <_dtoa_r+0x448>
 800ab0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4b8c      	ldr	r3, [pc, #560]	; (800ad44 <_dtoa_r+0x614>)
 800ab12:	f7f5 fcf1 	bl	80004f8 <__aeabi_dmul>
 800ab16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab1a:	9e04      	ldr	r6, [sp, #16]
 800ab1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ab20:	3501      	adds	r5, #1
 800ab22:	4628      	mov	r0, r5
 800ab24:	f7f5 fc7e 	bl	8000424 <__aeabi_i2d>
 800ab28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab2c:	f7f5 fce4 	bl	80004f8 <__aeabi_dmul>
 800ab30:	2200      	movs	r2, #0
 800ab32:	4b85      	ldr	r3, [pc, #532]	; (800ad48 <_dtoa_r+0x618>)
 800ab34:	f7f5 fb2a 	bl	800018c <__adddf3>
 800ab38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ab3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab40:	950b      	str	r5, [sp, #44]	; 0x2c
 800ab42:	2e00      	cmp	r6, #0
 800ab44:	d15c      	bne.n	800ac00 <_dtoa_r+0x4d0>
 800ab46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	4b7f      	ldr	r3, [pc, #508]	; (800ad4c <_dtoa_r+0x61c>)
 800ab4e:	f7f5 fb1b 	bl	8000188 <__aeabi_dsub>
 800ab52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab54:	462b      	mov	r3, r5
 800ab56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab5a:	f7f5 ff5d 	bl	8000a18 <__aeabi_dcmpgt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f040 8281 	bne.w	800b066 <_dtoa_r+0x936>
 800ab64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ab6e:	f7f5 ff35 	bl	80009dc <__aeabi_dcmplt>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f040 8275 	bne.w	800b062 <_dtoa_r+0x932>
 800ab78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f2c0 814b 	blt.w	800ae1e <_dtoa_r+0x6ee>
 800ab88:	f1ba 0f0e 	cmp.w	sl, #14
 800ab8c:	f300 8147 	bgt.w	800ae1e <_dtoa_r+0x6ee>
 800ab90:	4b69      	ldr	r3, [pc, #420]	; (800ad38 <_dtoa_r+0x608>)
 800ab92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f280 80d7 	bge.w	800ad54 <_dtoa_r+0x624>
 800aba6:	f1b8 0f00 	cmp.w	r8, #0
 800abaa:	f300 80d3 	bgt.w	800ad54 <_dtoa_r+0x624>
 800abae:	f040 8257 	bne.w	800b060 <_dtoa_r+0x930>
 800abb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb6:	2200      	movs	r2, #0
 800abb8:	4b64      	ldr	r3, [pc, #400]	; (800ad4c <_dtoa_r+0x61c>)
 800abba:	f7f5 fc9d 	bl	80004f8 <__aeabi_dmul>
 800abbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abc2:	f7f5 ff1f 	bl	8000a04 <__aeabi_dcmpge>
 800abc6:	4646      	mov	r6, r8
 800abc8:	4647      	mov	r7, r8
 800abca:	2800      	cmp	r0, #0
 800abcc:	f040 822d 	bne.w	800b02a <_dtoa_r+0x8fa>
 800abd0:	9b06      	ldr	r3, [sp, #24]
 800abd2:	9a06      	ldr	r2, [sp, #24]
 800abd4:	1c5d      	adds	r5, r3, #1
 800abd6:	2331      	movs	r3, #49	; 0x31
 800abd8:	f10a 0a01 	add.w	sl, sl, #1
 800abdc:	7013      	strb	r3, [r2, #0]
 800abde:	e228      	b.n	800b032 <_dtoa_r+0x902>
 800abe0:	07f2      	lsls	r2, r6, #31
 800abe2:	d505      	bpl.n	800abf0 <_dtoa_r+0x4c0>
 800abe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe8:	f7f5 fc86 	bl	80004f8 <__aeabi_dmul>
 800abec:	2301      	movs	r3, #1
 800abee:	3501      	adds	r5, #1
 800abf0:	1076      	asrs	r6, r6, #1
 800abf2:	3708      	adds	r7, #8
 800abf4:	e76e      	b.n	800aad4 <_dtoa_r+0x3a4>
 800abf6:	2502      	movs	r5, #2
 800abf8:	e771      	b.n	800aade <_dtoa_r+0x3ae>
 800abfa:	4657      	mov	r7, sl
 800abfc:	4646      	mov	r6, r8
 800abfe:	e790      	b.n	800ab22 <_dtoa_r+0x3f2>
 800ac00:	4b4d      	ldr	r3, [pc, #308]	; (800ad38 <_dtoa_r+0x608>)
 800ac02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac06:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d048      	beq.n	800aca2 <_dtoa_r+0x572>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	2000      	movs	r0, #0
 800ac16:	494e      	ldr	r1, [pc, #312]	; (800ad50 <_dtoa_r+0x620>)
 800ac18:	f7f5 fd98 	bl	800074c <__aeabi_ddiv>
 800ac1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac20:	f7f5 fab2 	bl	8000188 <__aeabi_dsub>
 800ac24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac28:	9d06      	ldr	r5, [sp, #24]
 800ac2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac2e:	f7f5 ff13 	bl	8000a58 <__aeabi_d2iz>
 800ac32:	9011      	str	r0, [sp, #68]	; 0x44
 800ac34:	f7f5 fbf6 	bl	8000424 <__aeabi_i2d>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac40:	f7f5 faa2 	bl	8000188 <__aeabi_dsub>
 800ac44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac4a:	3330      	adds	r3, #48	; 0x30
 800ac4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac54:	f7f5 fec2 	bl	80009dc <__aeabi_dcmplt>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d163      	bne.n	800ad24 <_dtoa_r+0x5f4>
 800ac5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac60:	2000      	movs	r0, #0
 800ac62:	4937      	ldr	r1, [pc, #220]	; (800ad40 <_dtoa_r+0x610>)
 800ac64:	f7f5 fa90 	bl	8000188 <__aeabi_dsub>
 800ac68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac6c:	f7f5 feb6 	bl	80009dc <__aeabi_dcmplt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f040 80b5 	bne.w	800ade0 <_dtoa_r+0x6b0>
 800ac76:	9b06      	ldr	r3, [sp, #24]
 800ac78:	1aeb      	subs	r3, r5, r3
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	f77f af7c 	ble.w	800ab78 <_dtoa_r+0x448>
 800ac80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac84:	2200      	movs	r2, #0
 800ac86:	4b2f      	ldr	r3, [pc, #188]	; (800ad44 <_dtoa_r+0x614>)
 800ac88:	f7f5 fc36 	bl	80004f8 <__aeabi_dmul>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac96:	4b2b      	ldr	r3, [pc, #172]	; (800ad44 <_dtoa_r+0x614>)
 800ac98:	f7f5 fc2e 	bl	80004f8 <__aeabi_dmul>
 800ac9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca0:	e7c3      	b.n	800ac2a <_dtoa_r+0x4fa>
 800aca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aca6:	f7f5 fc27 	bl	80004f8 <__aeabi_dmul>
 800acaa:	9b06      	ldr	r3, [sp, #24]
 800acac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acb0:	199d      	adds	r5, r3, r6
 800acb2:	461e      	mov	r6, r3
 800acb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb8:	f7f5 fece 	bl	8000a58 <__aeabi_d2iz>
 800acbc:	9011      	str	r0, [sp, #68]	; 0x44
 800acbe:	f7f5 fbb1 	bl	8000424 <__aeabi_i2d>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acca:	f7f5 fa5d 	bl	8000188 <__aeabi_dsub>
 800acce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acd4:	3330      	adds	r3, #48	; 0x30
 800acd6:	f806 3b01 	strb.w	r3, [r6], #1
 800acda:	42ae      	cmp	r6, r5
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	d124      	bne.n	800ad2c <_dtoa_r+0x5fc>
 800ace2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ace6:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <_dtoa_r+0x620>)
 800ace8:	f7f5 fa50 	bl	800018c <__adddf3>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf4:	f7f5 fe90 	bl	8000a18 <__aeabi_dcmpgt>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d171      	bne.n	800ade0 <_dtoa_r+0x6b0>
 800acfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad00:	2000      	movs	r0, #0
 800ad02:	4913      	ldr	r1, [pc, #76]	; (800ad50 <_dtoa_r+0x620>)
 800ad04:	f7f5 fa40 	bl	8000188 <__aeabi_dsub>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad10:	f7f5 fe64 	bl	80009dc <__aeabi_dcmplt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f af2f 	beq.w	800ab78 <_dtoa_r+0x448>
 800ad1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad1e:	1e6a      	subs	r2, r5, #1
 800ad20:	2b30      	cmp	r3, #48	; 0x30
 800ad22:	d001      	beq.n	800ad28 <_dtoa_r+0x5f8>
 800ad24:	46ba      	mov	sl, r7
 800ad26:	e04a      	b.n	800adbe <_dtoa_r+0x68e>
 800ad28:	4615      	mov	r5, r2
 800ad2a:	e7f6      	b.n	800ad1a <_dtoa_r+0x5ea>
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <_dtoa_r+0x614>)
 800ad2e:	f7f5 fbe3 	bl	80004f8 <__aeabi_dmul>
 800ad32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad36:	e7bd      	b.n	800acb4 <_dtoa_r+0x584>
 800ad38:	0800d940 	.word	0x0800d940
 800ad3c:	0800d918 	.word	0x0800d918
 800ad40:	3ff00000 	.word	0x3ff00000
 800ad44:	40240000 	.word	0x40240000
 800ad48:	401c0000 	.word	0x401c0000
 800ad4c:	40140000 	.word	0x40140000
 800ad50:	3fe00000 	.word	0x3fe00000
 800ad54:	9d06      	ldr	r5, [sp, #24]
 800ad56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 fcf3 	bl	800074c <__aeabi_ddiv>
 800ad66:	f7f5 fe77 	bl	8000a58 <__aeabi_d2iz>
 800ad6a:	4681      	mov	r9, r0
 800ad6c:	f7f5 fb5a 	bl	8000424 <__aeabi_i2d>
 800ad70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad74:	f7f5 fbc0 	bl	80004f8 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	4639      	mov	r1, r7
 800ad80:	f7f5 fa02 	bl	8000188 <__aeabi_dsub>
 800ad84:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ad88:	f805 6b01 	strb.w	r6, [r5], #1
 800ad8c:	9e06      	ldr	r6, [sp, #24]
 800ad8e:	4602      	mov	r2, r0
 800ad90:	1bae      	subs	r6, r5, r6
 800ad92:	45b0      	cmp	r8, r6
 800ad94:	460b      	mov	r3, r1
 800ad96:	d135      	bne.n	800ae04 <_dtoa_r+0x6d4>
 800ad98:	f7f5 f9f8 	bl	800018c <__adddf3>
 800ad9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ada0:	4606      	mov	r6, r0
 800ada2:	460f      	mov	r7, r1
 800ada4:	f7f5 fe38 	bl	8000a18 <__aeabi_dcmpgt>
 800ada8:	b9c8      	cbnz	r0, 800adde <_dtoa_r+0x6ae>
 800adaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 fe09 	bl	80009c8 <__aeabi_dcmpeq>
 800adb6:	b110      	cbz	r0, 800adbe <_dtoa_r+0x68e>
 800adb8:	f019 0f01 	tst.w	r9, #1
 800adbc:	d10f      	bne.n	800adde <_dtoa_r+0x6ae>
 800adbe:	4659      	mov	r1, fp
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 facc 	bl	800b35e <_Bfree>
 800adc6:	2300      	movs	r3, #0
 800adc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adca:	702b      	strb	r3, [r5, #0]
 800adcc:	f10a 0301 	add.w	r3, sl, #1
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800add4:	2b00      	cmp	r3, #0
 800add6:	f43f acf3 	beq.w	800a7c0 <_dtoa_r+0x90>
 800adda:	601d      	str	r5, [r3, #0]
 800addc:	e4f0      	b.n	800a7c0 <_dtoa_r+0x90>
 800adde:	4657      	mov	r7, sl
 800ade0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ade4:	1e6b      	subs	r3, r5, #1
 800ade6:	2a39      	cmp	r2, #57	; 0x39
 800ade8:	d106      	bne.n	800adf8 <_dtoa_r+0x6c8>
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	429a      	cmp	r2, r3
 800adee:	d107      	bne.n	800ae00 <_dtoa_r+0x6d0>
 800adf0:	2330      	movs	r3, #48	; 0x30
 800adf2:	7013      	strb	r3, [r2, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	3701      	adds	r7, #1
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	3201      	adds	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e791      	b.n	800ad24 <_dtoa_r+0x5f4>
 800ae00:	461d      	mov	r5, r3
 800ae02:	e7ed      	b.n	800ade0 <_dtoa_r+0x6b0>
 800ae04:	2200      	movs	r2, #0
 800ae06:	4b99      	ldr	r3, [pc, #612]	; (800b06c <_dtoa_r+0x93c>)
 800ae08:	f7f5 fb76 	bl	80004f8 <__aeabi_dmul>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4606      	mov	r6, r0
 800ae12:	460f      	mov	r7, r1
 800ae14:	f7f5 fdd8 	bl	80009c8 <__aeabi_dcmpeq>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d09e      	beq.n	800ad5a <_dtoa_r+0x62a>
 800ae1c:	e7cf      	b.n	800adbe <_dtoa_r+0x68e>
 800ae1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	f000 8088 	beq.w	800af36 <_dtoa_r+0x806>
 800ae26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae28:	2a01      	cmp	r2, #1
 800ae2a:	dc6d      	bgt.n	800af08 <_dtoa_r+0x7d8>
 800ae2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	d066      	beq.n	800af00 <_dtoa_r+0x7d0>
 800ae32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae36:	464d      	mov	r5, r9
 800ae38:	9e08      	ldr	r6, [sp, #32]
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	441a      	add	r2, r3
 800ae40:	4620      	mov	r0, r4
 800ae42:	4499      	add	r9, r3
 800ae44:	9207      	str	r2, [sp, #28]
 800ae46:	f000 fb2a 	bl	800b49e <__i2b>
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	2d00      	cmp	r5, #0
 800ae4e:	dd0b      	ble.n	800ae68 <_dtoa_r+0x738>
 800ae50:	9b07      	ldr	r3, [sp, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dd08      	ble.n	800ae68 <_dtoa_r+0x738>
 800ae56:	42ab      	cmp	r3, r5
 800ae58:	bfa8      	it	ge
 800ae5a:	462b      	movge	r3, r5
 800ae5c:	9a07      	ldr	r2, [sp, #28]
 800ae5e:	eba9 0903 	sub.w	r9, r9, r3
 800ae62:	1aed      	subs	r5, r5, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	9307      	str	r3, [sp, #28]
 800ae68:	9b08      	ldr	r3, [sp, #32]
 800ae6a:	b1eb      	cbz	r3, 800aea8 <_dtoa_r+0x778>
 800ae6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d065      	beq.n	800af3e <_dtoa_r+0x80e>
 800ae72:	b18e      	cbz	r6, 800ae98 <_dtoa_r+0x768>
 800ae74:	4639      	mov	r1, r7
 800ae76:	4632      	mov	r2, r6
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 fbaf 	bl	800b5dc <__pow5mult>
 800ae7e:	465a      	mov	r2, fp
 800ae80:	4601      	mov	r1, r0
 800ae82:	4607      	mov	r7, r0
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 fb13 	bl	800b4b0 <__multiply>
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	900a      	str	r0, [sp, #40]	; 0x28
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 fa65 	bl	800b35e <_Bfree>
 800ae94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae96:	469b      	mov	fp, r3
 800ae98:	9b08      	ldr	r3, [sp, #32]
 800ae9a:	1b9a      	subs	r2, r3, r6
 800ae9c:	d004      	beq.n	800aea8 <_dtoa_r+0x778>
 800ae9e:	4659      	mov	r1, fp
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fb9b 	bl	800b5dc <__pow5mult>
 800aea6:	4683      	mov	fp, r0
 800aea8:	2101      	movs	r1, #1
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 faf7 	bl	800b49e <__i2b>
 800aeb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 81c6 	beq.w	800b246 <_dtoa_r+0xb16>
 800aeba:	461a      	mov	r2, r3
 800aebc:	4601      	mov	r1, r0
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 fb8c 	bl	800b5dc <__pow5mult>
 800aec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aec6:	4606      	mov	r6, r0
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	dc3e      	bgt.n	800af4a <_dtoa_r+0x81a>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d137      	bne.n	800af42 <_dtoa_r+0x812>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d134      	bne.n	800af46 <_dtoa_r+0x816>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aee2:	0d1b      	lsrs	r3, r3, #20
 800aee4:	051b      	lsls	r3, r3, #20
 800aee6:	b12b      	cbz	r3, 800aef4 <_dtoa_r+0x7c4>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	f109 0901 	add.w	r9, r9, #1
 800aeee:	3301      	adds	r3, #1
 800aef0:	9307      	str	r3, [sp, #28]
 800aef2:	2301      	movs	r3, #1
 800aef4:	9308      	str	r3, [sp, #32]
 800aef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d128      	bne.n	800af4e <_dtoa_r+0x81e>
 800aefc:	2001      	movs	r0, #1
 800aefe:	e02e      	b.n	800af5e <_dtoa_r+0x82e>
 800af00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af06:	e796      	b.n	800ae36 <_dtoa_r+0x706>
 800af08:	9b08      	ldr	r3, [sp, #32]
 800af0a:	f108 36ff 	add.w	r6, r8, #4294967295
 800af0e:	42b3      	cmp	r3, r6
 800af10:	bfb7      	itett	lt
 800af12:	9b08      	ldrlt	r3, [sp, #32]
 800af14:	1b9e      	subge	r6, r3, r6
 800af16:	1af2      	sublt	r2, r6, r3
 800af18:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800af1a:	bfbf      	itttt	lt
 800af1c:	9608      	strlt	r6, [sp, #32]
 800af1e:	189b      	addlt	r3, r3, r2
 800af20:	930c      	strlt	r3, [sp, #48]	; 0x30
 800af22:	2600      	movlt	r6, #0
 800af24:	f1b8 0f00 	cmp.w	r8, #0
 800af28:	bfb9      	ittee	lt
 800af2a:	eba9 0508 	sublt.w	r5, r9, r8
 800af2e:	2300      	movlt	r3, #0
 800af30:	464d      	movge	r5, r9
 800af32:	4643      	movge	r3, r8
 800af34:	e781      	b.n	800ae3a <_dtoa_r+0x70a>
 800af36:	9e08      	ldr	r6, [sp, #32]
 800af38:	464d      	mov	r5, r9
 800af3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af3c:	e786      	b.n	800ae4c <_dtoa_r+0x71c>
 800af3e:	9a08      	ldr	r2, [sp, #32]
 800af40:	e7ad      	b.n	800ae9e <_dtoa_r+0x76e>
 800af42:	2300      	movs	r3, #0
 800af44:	e7d6      	b.n	800aef4 <_dtoa_r+0x7c4>
 800af46:	9b02      	ldr	r3, [sp, #8]
 800af48:	e7d4      	b.n	800aef4 <_dtoa_r+0x7c4>
 800af4a:	2300      	movs	r3, #0
 800af4c:	9308      	str	r3, [sp, #32]
 800af4e:	6933      	ldr	r3, [r6, #16]
 800af50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af54:	6918      	ldr	r0, [r3, #16]
 800af56:	f000 fa54 	bl	800b402 <__hi0bits>
 800af5a:	f1c0 0020 	rsb	r0, r0, #32
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	4418      	add	r0, r3
 800af62:	f010 001f 	ands.w	r0, r0, #31
 800af66:	d047      	beq.n	800aff8 <_dtoa_r+0x8c8>
 800af68:	f1c0 0320 	rsb	r3, r0, #32
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	dd3b      	ble.n	800afe8 <_dtoa_r+0x8b8>
 800af70:	9b07      	ldr	r3, [sp, #28]
 800af72:	f1c0 001c 	rsb	r0, r0, #28
 800af76:	4481      	add	r9, r0
 800af78:	4405      	add	r5, r0
 800af7a:	4403      	add	r3, r0
 800af7c:	9307      	str	r3, [sp, #28]
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	dd05      	ble.n	800af90 <_dtoa_r+0x860>
 800af84:	4659      	mov	r1, fp
 800af86:	464a      	mov	r2, r9
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fb75 	bl	800b678 <__lshift>
 800af8e:	4683      	mov	fp, r0
 800af90:	9b07      	ldr	r3, [sp, #28]
 800af92:	2b00      	cmp	r3, #0
 800af94:	dd05      	ble.n	800afa2 <_dtoa_r+0x872>
 800af96:	4631      	mov	r1, r6
 800af98:	461a      	mov	r2, r3
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 fb6c 	bl	800b678 <__lshift>
 800afa0:	4606      	mov	r6, r0
 800afa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afa4:	b353      	cbz	r3, 800affc <_dtoa_r+0x8cc>
 800afa6:	4631      	mov	r1, r6
 800afa8:	4658      	mov	r0, fp
 800afaa:	f000 fbb9 	bl	800b720 <__mcmp>
 800afae:	2800      	cmp	r0, #0
 800afb0:	da24      	bge.n	800affc <_dtoa_r+0x8cc>
 800afb2:	2300      	movs	r3, #0
 800afb4:	4659      	mov	r1, fp
 800afb6:	220a      	movs	r2, #10
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 f9e7 	bl	800b38c <__multadd>
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afc4:	4683      	mov	fp, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8144 	beq.w	800b254 <_dtoa_r+0xb24>
 800afcc:	2300      	movs	r3, #0
 800afce:	4639      	mov	r1, r7
 800afd0:	220a      	movs	r2, #10
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 f9da 	bl	800b38c <__multadd>
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	4607      	mov	r7, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	dc4d      	bgt.n	800b07c <_dtoa_r+0x94c>
 800afe0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	dd4a      	ble.n	800b07c <_dtoa_r+0x94c>
 800afe6:	e011      	b.n	800b00c <_dtoa_r+0x8dc>
 800afe8:	d0c9      	beq.n	800af7e <_dtoa_r+0x84e>
 800afea:	9a07      	ldr	r2, [sp, #28]
 800afec:	331c      	adds	r3, #28
 800afee:	441a      	add	r2, r3
 800aff0:	4499      	add	r9, r3
 800aff2:	441d      	add	r5, r3
 800aff4:	4613      	mov	r3, r2
 800aff6:	e7c1      	b.n	800af7c <_dtoa_r+0x84c>
 800aff8:	4603      	mov	r3, r0
 800affa:	e7f6      	b.n	800afea <_dtoa_r+0x8ba>
 800affc:	f1b8 0f00 	cmp.w	r8, #0
 800b000:	dc36      	bgt.n	800b070 <_dtoa_r+0x940>
 800b002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b004:	2b02      	cmp	r3, #2
 800b006:	dd33      	ble.n	800b070 <_dtoa_r+0x940>
 800b008:	f8cd 8010 	str.w	r8, [sp, #16]
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	b963      	cbnz	r3, 800b02a <_dtoa_r+0x8fa>
 800b010:	4631      	mov	r1, r6
 800b012:	2205      	movs	r2, #5
 800b014:	4620      	mov	r0, r4
 800b016:	f000 f9b9 	bl	800b38c <__multadd>
 800b01a:	4601      	mov	r1, r0
 800b01c:	4606      	mov	r6, r0
 800b01e:	4658      	mov	r0, fp
 800b020:	f000 fb7e 	bl	800b720 <__mcmp>
 800b024:	2800      	cmp	r0, #0
 800b026:	f73f add3 	bgt.w	800abd0 <_dtoa_r+0x4a0>
 800b02a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b02c:	9d06      	ldr	r5, [sp, #24]
 800b02e:	ea6f 0a03 	mvn.w	sl, r3
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	4631      	mov	r1, r6
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 f990 	bl	800b35e <_Bfree>
 800b03e:	2f00      	cmp	r7, #0
 800b040:	f43f aebd 	beq.w	800adbe <_dtoa_r+0x68e>
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	d005      	beq.n	800b056 <_dtoa_r+0x926>
 800b04a:	45b9      	cmp	r9, r7
 800b04c:	d003      	beq.n	800b056 <_dtoa_r+0x926>
 800b04e:	4649      	mov	r1, r9
 800b050:	4620      	mov	r0, r4
 800b052:	f000 f984 	bl	800b35e <_Bfree>
 800b056:	4639      	mov	r1, r7
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 f980 	bl	800b35e <_Bfree>
 800b05e:	e6ae      	b.n	800adbe <_dtoa_r+0x68e>
 800b060:	2600      	movs	r6, #0
 800b062:	4637      	mov	r7, r6
 800b064:	e7e1      	b.n	800b02a <_dtoa_r+0x8fa>
 800b066:	46ba      	mov	sl, r7
 800b068:	4637      	mov	r7, r6
 800b06a:	e5b1      	b.n	800abd0 <_dtoa_r+0x4a0>
 800b06c:	40240000 	.word	0x40240000
 800b070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b072:	f8cd 8010 	str.w	r8, [sp, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80f3 	beq.w	800b262 <_dtoa_r+0xb32>
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	dd05      	ble.n	800b08c <_dtoa_r+0x95c>
 800b080:	4639      	mov	r1, r7
 800b082:	462a      	mov	r2, r5
 800b084:	4620      	mov	r0, r4
 800b086:	f000 faf7 	bl	800b678 <__lshift>
 800b08a:	4607      	mov	r7, r0
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d04c      	beq.n	800b12c <_dtoa_r+0x9fc>
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4620      	mov	r0, r4
 800b096:	f000 f92e 	bl	800b2f6 <_Balloc>
 800b09a:	4605      	mov	r5, r0
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	f107 010c 	add.w	r1, r7, #12
 800b0a2:	3202      	adds	r2, #2
 800b0a4:	0092      	lsls	r2, r2, #2
 800b0a6:	300c      	adds	r0, #12
 800b0a8:	f000 f91a 	bl	800b2e0 <memcpy>
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fae1 	bl	800b678 <__lshift>
 800b0b6:	46b9      	mov	r9, r7
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	9b06      	ldr	r3, [sp, #24]
 800b0bc:	9307      	str	r3, [sp, #28]
 800b0be:	9b02      	ldr	r3, [sp, #8]
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	9308      	str	r3, [sp, #32]
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4658      	mov	r0, fp
 800b0ca:	f7ff faa3 	bl	800a614 <quorem>
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b0d6:	4658      	mov	r0, fp
 800b0d8:	f000 fb22 	bl	800b720 <__mcmp>
 800b0dc:	463a      	mov	r2, r7
 800b0de:	9002      	str	r0, [sp, #8]
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fb36 	bl	800b754 <__mdiff>
 800b0e8:	68c3      	ldr	r3, [r0, #12]
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	bb03      	cbnz	r3, 800b130 <_dtoa_r+0xa00>
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	9009      	str	r0, [sp, #36]	; 0x24
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f000 fb14 	bl	800b720 <__mcmp>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4620      	mov	r0, r4
 800b100:	9309      	str	r3, [sp, #36]	; 0x24
 800b102:	f000 f92c 	bl	800b35e <_Bfree>
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	b9a3      	cbnz	r3, 800b134 <_dtoa_r+0xa04>
 800b10a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b10c:	b992      	cbnz	r2, 800b134 <_dtoa_r+0xa04>
 800b10e:	9a08      	ldr	r2, [sp, #32]
 800b110:	b982      	cbnz	r2, 800b134 <_dtoa_r+0xa04>
 800b112:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b116:	d029      	beq.n	800b16c <_dtoa_r+0xa3c>
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	dd01      	ble.n	800b122 <_dtoa_r+0x9f2>
 800b11e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b122:	9b07      	ldr	r3, [sp, #28]
 800b124:	1c5d      	adds	r5, r3, #1
 800b126:	f883 8000 	strb.w	r8, [r3]
 800b12a:	e784      	b.n	800b036 <_dtoa_r+0x906>
 800b12c:	4638      	mov	r0, r7
 800b12e:	e7c2      	b.n	800b0b6 <_dtoa_r+0x986>
 800b130:	2301      	movs	r3, #1
 800b132:	e7e3      	b.n	800b0fc <_dtoa_r+0x9cc>
 800b134:	9a02      	ldr	r2, [sp, #8]
 800b136:	2a00      	cmp	r2, #0
 800b138:	db04      	blt.n	800b144 <_dtoa_r+0xa14>
 800b13a:	d123      	bne.n	800b184 <_dtoa_r+0xa54>
 800b13c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b13e:	bb0a      	cbnz	r2, 800b184 <_dtoa_r+0xa54>
 800b140:	9a08      	ldr	r2, [sp, #32]
 800b142:	b9fa      	cbnz	r2, 800b184 <_dtoa_r+0xa54>
 800b144:	2b00      	cmp	r3, #0
 800b146:	ddec      	ble.n	800b122 <_dtoa_r+0x9f2>
 800b148:	4659      	mov	r1, fp
 800b14a:	2201      	movs	r2, #1
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fa93 	bl	800b678 <__lshift>
 800b152:	4631      	mov	r1, r6
 800b154:	4683      	mov	fp, r0
 800b156:	f000 fae3 	bl	800b720 <__mcmp>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	dc03      	bgt.n	800b166 <_dtoa_r+0xa36>
 800b15e:	d1e0      	bne.n	800b122 <_dtoa_r+0x9f2>
 800b160:	f018 0f01 	tst.w	r8, #1
 800b164:	d0dd      	beq.n	800b122 <_dtoa_r+0x9f2>
 800b166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b16a:	d1d8      	bne.n	800b11e <_dtoa_r+0x9ee>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	9a07      	ldr	r2, [sp, #28]
 800b170:	1c5d      	adds	r5, r3, #1
 800b172:	2339      	movs	r3, #57	; 0x39
 800b174:	7013      	strb	r3, [r2, #0]
 800b176:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b17a:	1e6a      	subs	r2, r5, #1
 800b17c:	2b39      	cmp	r3, #57	; 0x39
 800b17e:	d04d      	beq.n	800b21c <_dtoa_r+0xaec>
 800b180:	3301      	adds	r3, #1
 800b182:	e052      	b.n	800b22a <_dtoa_r+0xafa>
 800b184:	9a07      	ldr	r2, [sp, #28]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f102 0501 	add.w	r5, r2, #1
 800b18c:	dd06      	ble.n	800b19c <_dtoa_r+0xa6c>
 800b18e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b192:	d0eb      	beq.n	800b16c <_dtoa_r+0xa3c>
 800b194:	f108 0801 	add.w	r8, r8, #1
 800b198:	9b07      	ldr	r3, [sp, #28]
 800b19a:	e7c4      	b.n	800b126 <_dtoa_r+0x9f6>
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	9a04      	ldr	r2, [sp, #16]
 800b1a0:	1aeb      	subs	r3, r5, r3
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b1a8:	d021      	beq.n	800b1ee <_dtoa_r+0xabe>
 800b1aa:	4659      	mov	r1, fp
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	220a      	movs	r2, #10
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 f8eb 	bl	800b38c <__multadd>
 800b1b6:	45b9      	cmp	r9, r7
 800b1b8:	4683      	mov	fp, r0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	f04f 020a 	mov.w	r2, #10
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	d105      	bne.n	800b1d4 <_dtoa_r+0xaa4>
 800b1c8:	f000 f8e0 	bl	800b38c <__multadd>
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	9507      	str	r5, [sp, #28]
 800b1d2:	e778      	b.n	800b0c6 <_dtoa_r+0x996>
 800b1d4:	f000 f8da 	bl	800b38c <__multadd>
 800b1d8:	4639      	mov	r1, r7
 800b1da:	4681      	mov	r9, r0
 800b1dc:	2300      	movs	r3, #0
 800b1de:	220a      	movs	r2, #10
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 f8d3 	bl	800b38c <__multadd>
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	e7f2      	b.n	800b1d0 <_dtoa_r+0xaa0>
 800b1ea:	f04f 0900 	mov.w	r9, #0
 800b1ee:	4659      	mov	r1, fp
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fa40 	bl	800b678 <__lshift>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4683      	mov	fp, r0
 800b1fc:	f000 fa90 	bl	800b720 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	dcb8      	bgt.n	800b176 <_dtoa_r+0xa46>
 800b204:	d102      	bne.n	800b20c <_dtoa_r+0xadc>
 800b206:	f018 0f01 	tst.w	r8, #1
 800b20a:	d1b4      	bne.n	800b176 <_dtoa_r+0xa46>
 800b20c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b210:	1e6a      	subs	r2, r5, #1
 800b212:	2b30      	cmp	r3, #48	; 0x30
 800b214:	f47f af0f 	bne.w	800b036 <_dtoa_r+0x906>
 800b218:	4615      	mov	r5, r2
 800b21a:	e7f7      	b.n	800b20c <_dtoa_r+0xadc>
 800b21c:	9b06      	ldr	r3, [sp, #24]
 800b21e:	4293      	cmp	r3, r2
 800b220:	d105      	bne.n	800b22e <_dtoa_r+0xafe>
 800b222:	2331      	movs	r3, #49	; 0x31
 800b224:	9a06      	ldr	r2, [sp, #24]
 800b226:	f10a 0a01 	add.w	sl, sl, #1
 800b22a:	7013      	strb	r3, [r2, #0]
 800b22c:	e703      	b.n	800b036 <_dtoa_r+0x906>
 800b22e:	4615      	mov	r5, r2
 800b230:	e7a1      	b.n	800b176 <_dtoa_r+0xa46>
 800b232:	4b17      	ldr	r3, [pc, #92]	; (800b290 <_dtoa_r+0xb60>)
 800b234:	f7ff bae1 	b.w	800a7fa <_dtoa_r+0xca>
 800b238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f47f aabb 	bne.w	800a7b6 <_dtoa_r+0x86>
 800b240:	4b14      	ldr	r3, [pc, #80]	; (800b294 <_dtoa_r+0xb64>)
 800b242:	f7ff bada 	b.w	800a7fa <_dtoa_r+0xca>
 800b246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b248:	2b01      	cmp	r3, #1
 800b24a:	f77f ae3f 	ble.w	800aecc <_dtoa_r+0x79c>
 800b24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b250:	9308      	str	r3, [sp, #32]
 800b252:	e653      	b.n	800aefc <_dtoa_r+0x7cc>
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dc03      	bgt.n	800b262 <_dtoa_r+0xb32>
 800b25a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	f73f aed5 	bgt.w	800b00c <_dtoa_r+0x8dc>
 800b262:	9d06      	ldr	r5, [sp, #24]
 800b264:	4631      	mov	r1, r6
 800b266:	4658      	mov	r0, fp
 800b268:	f7ff f9d4 	bl	800a614 <quorem>
 800b26c:	9b06      	ldr	r3, [sp, #24]
 800b26e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b272:	f805 8b01 	strb.w	r8, [r5], #1
 800b276:	9a04      	ldr	r2, [sp, #16]
 800b278:	1aeb      	subs	r3, r5, r3
 800b27a:	429a      	cmp	r2, r3
 800b27c:	ddb5      	ble.n	800b1ea <_dtoa_r+0xaba>
 800b27e:	4659      	mov	r1, fp
 800b280:	2300      	movs	r3, #0
 800b282:	220a      	movs	r2, #10
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f881 	bl	800b38c <__multadd>
 800b28a:	4683      	mov	fp, r0
 800b28c:	e7ea      	b.n	800b264 <_dtoa_r+0xb34>
 800b28e:	bf00      	nop
 800b290:	0800d8e4 	.word	0x0800d8e4
 800b294:	0800d908 	.word	0x0800d908

0800b298 <_localeconv_r>:
 800b298:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <_localeconv_r+0x14>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6a18      	ldr	r0, [r3, #32]
 800b29e:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <_localeconv_r+0x18>)
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	bf08      	it	eq
 800b2a4:	4618      	moveq	r0, r3
 800b2a6:	30f0      	adds	r0, #240	; 0xf0
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	2000000c 	.word	0x2000000c
 800b2b0:	20000070 	.word	0x20000070

0800b2b4 <malloc>:
 800b2b4:	4b02      	ldr	r3, [pc, #8]	; (800b2c0 <malloc+0xc>)
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	f000 bb53 	b.w	800b964 <_malloc_r>
 800b2be:	bf00      	nop
 800b2c0:	2000000c 	.word	0x2000000c

0800b2c4 <memchr>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	b2c9      	uxtb	r1, r1
 800b2c8:	4402      	add	r2, r0
 800b2ca:	4290      	cmp	r0, r2
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	d101      	bne.n	800b2d4 <memchr+0x10>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e003      	b.n	800b2dc <memchr+0x18>
 800b2d4:	781c      	ldrb	r4, [r3, #0]
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	428c      	cmp	r4, r1
 800b2da:	d1f6      	bne.n	800b2ca <memchr+0x6>
 800b2dc:	4618      	mov	r0, r3
 800b2de:	bd10      	pop	{r4, pc}

0800b2e0 <memcpy>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	1e43      	subs	r3, r0, #1
 800b2e4:	440a      	add	r2, r1
 800b2e6:	4291      	cmp	r1, r2
 800b2e8:	d100      	bne.n	800b2ec <memcpy+0xc>
 800b2ea:	bd10      	pop	{r4, pc}
 800b2ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2f4:	e7f7      	b.n	800b2e6 <memcpy+0x6>

0800b2f6 <_Balloc>:
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	b93d      	cbnz	r5, 800b310 <_Balloc+0x1a>
 800b300:	2010      	movs	r0, #16
 800b302:	f7ff ffd7 	bl	800b2b4 <malloc>
 800b306:	6260      	str	r0, [r4, #36]	; 0x24
 800b308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b30c:	6005      	str	r5, [r0, #0]
 800b30e:	60c5      	str	r5, [r0, #12]
 800b310:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b312:	68eb      	ldr	r3, [r5, #12]
 800b314:	b183      	cbz	r3, 800b338 <_Balloc+0x42>
 800b316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b31e:	b9b8      	cbnz	r0, 800b350 <_Balloc+0x5a>
 800b320:	2101      	movs	r1, #1
 800b322:	fa01 f506 	lsl.w	r5, r1, r6
 800b326:	1d6a      	adds	r2, r5, #5
 800b328:	0092      	lsls	r2, r2, #2
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 fabf 	bl	800b8ae <_calloc_r>
 800b330:	b160      	cbz	r0, 800b34c <_Balloc+0x56>
 800b332:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b336:	e00e      	b.n	800b356 <_Balloc+0x60>
 800b338:	2221      	movs	r2, #33	; 0x21
 800b33a:	2104      	movs	r1, #4
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fab6 	bl	800b8ae <_calloc_r>
 800b342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b344:	60e8      	str	r0, [r5, #12]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e4      	bne.n	800b316 <_Balloc+0x20>
 800b34c:	2000      	movs	r0, #0
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	6802      	ldr	r2, [r0, #0]
 800b352:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b356:	2300      	movs	r3, #0
 800b358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b35c:	e7f7      	b.n	800b34e <_Balloc+0x58>

0800b35e <_Bfree>:
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b362:	4606      	mov	r6, r0
 800b364:	460d      	mov	r5, r1
 800b366:	b93c      	cbnz	r4, 800b378 <_Bfree+0x1a>
 800b368:	2010      	movs	r0, #16
 800b36a:	f7ff ffa3 	bl	800b2b4 <malloc>
 800b36e:	6270      	str	r0, [r6, #36]	; 0x24
 800b370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b374:	6004      	str	r4, [r0, #0]
 800b376:	60c4      	str	r4, [r0, #12]
 800b378:	b13d      	cbz	r5, 800b38a <_Bfree+0x2c>
 800b37a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b37c:	686a      	ldr	r2, [r5, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b384:	6029      	str	r1, [r5, #0]
 800b386:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b38a:	bd70      	pop	{r4, r5, r6, pc}

0800b38c <__multadd>:
 800b38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b390:	461f      	mov	r7, r3
 800b392:	4606      	mov	r6, r0
 800b394:	460c      	mov	r4, r1
 800b396:	2300      	movs	r3, #0
 800b398:	690d      	ldr	r5, [r1, #16]
 800b39a:	f101 0c14 	add.w	ip, r1, #20
 800b39e:	f8dc 0000 	ldr.w	r0, [ip]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b281      	uxth	r1, r0
 800b3a6:	fb02 7101 	mla	r1, r2, r1, r7
 800b3aa:	0c00      	lsrs	r0, r0, #16
 800b3ac:	0c0f      	lsrs	r7, r1, #16
 800b3ae:	fb02 7000 	mla	r0, r2, r0, r7
 800b3b2:	b289      	uxth	r1, r1
 800b3b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b3b8:	429d      	cmp	r5, r3
 800b3ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b3be:	f84c 1b04 	str.w	r1, [ip], #4
 800b3c2:	dcec      	bgt.n	800b39e <__multadd+0x12>
 800b3c4:	b1d7      	cbz	r7, 800b3fc <__multadd+0x70>
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	42ab      	cmp	r3, r5
 800b3ca:	dc12      	bgt.n	800b3f2 <__multadd+0x66>
 800b3cc:	6861      	ldr	r1, [r4, #4]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	3101      	adds	r1, #1
 800b3d2:	f7ff ff90 	bl	800b2f6 <_Balloc>
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	6922      	ldr	r2, [r4, #16]
 800b3da:	f104 010c 	add.w	r1, r4, #12
 800b3de:	3202      	adds	r2, #2
 800b3e0:	0092      	lsls	r2, r2, #2
 800b3e2:	300c      	adds	r0, #12
 800b3e4:	f7ff ff7c 	bl	800b2e0 <memcpy>
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ffb7 	bl	800b35e <_Bfree>
 800b3f0:	4644      	mov	r4, r8
 800b3f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3f6:	3501      	adds	r5, #1
 800b3f8:	615f      	str	r7, [r3, #20]
 800b3fa:	6125      	str	r5, [r4, #16]
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b402 <__hi0bits>:
 800b402:	0c02      	lsrs	r2, r0, #16
 800b404:	0412      	lsls	r2, r2, #16
 800b406:	4603      	mov	r3, r0
 800b408:	b9b2      	cbnz	r2, 800b438 <__hi0bits+0x36>
 800b40a:	0403      	lsls	r3, r0, #16
 800b40c:	2010      	movs	r0, #16
 800b40e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b412:	bf04      	itt	eq
 800b414:	021b      	lsleq	r3, r3, #8
 800b416:	3008      	addeq	r0, #8
 800b418:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b41c:	bf04      	itt	eq
 800b41e:	011b      	lsleq	r3, r3, #4
 800b420:	3004      	addeq	r0, #4
 800b422:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b426:	bf04      	itt	eq
 800b428:	009b      	lsleq	r3, r3, #2
 800b42a:	3002      	addeq	r0, #2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	db06      	blt.n	800b43e <__hi0bits+0x3c>
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	d503      	bpl.n	800b43c <__hi0bits+0x3a>
 800b434:	3001      	adds	r0, #1
 800b436:	4770      	bx	lr
 800b438:	2000      	movs	r0, #0
 800b43a:	e7e8      	b.n	800b40e <__hi0bits+0xc>
 800b43c:	2020      	movs	r0, #32
 800b43e:	4770      	bx	lr

0800b440 <__lo0bits>:
 800b440:	6803      	ldr	r3, [r0, #0]
 800b442:	4601      	mov	r1, r0
 800b444:	f013 0207 	ands.w	r2, r3, #7
 800b448:	d00b      	beq.n	800b462 <__lo0bits+0x22>
 800b44a:	07da      	lsls	r2, r3, #31
 800b44c:	d423      	bmi.n	800b496 <__lo0bits+0x56>
 800b44e:	0798      	lsls	r0, r3, #30
 800b450:	bf49      	itett	mi
 800b452:	085b      	lsrmi	r3, r3, #1
 800b454:	089b      	lsrpl	r3, r3, #2
 800b456:	2001      	movmi	r0, #1
 800b458:	600b      	strmi	r3, [r1, #0]
 800b45a:	bf5c      	itt	pl
 800b45c:	600b      	strpl	r3, [r1, #0]
 800b45e:	2002      	movpl	r0, #2
 800b460:	4770      	bx	lr
 800b462:	b298      	uxth	r0, r3
 800b464:	b9a8      	cbnz	r0, 800b492 <__lo0bits+0x52>
 800b466:	2010      	movs	r0, #16
 800b468:	0c1b      	lsrs	r3, r3, #16
 800b46a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b46e:	bf04      	itt	eq
 800b470:	0a1b      	lsreq	r3, r3, #8
 800b472:	3008      	addeq	r0, #8
 800b474:	071a      	lsls	r2, r3, #28
 800b476:	bf04      	itt	eq
 800b478:	091b      	lsreq	r3, r3, #4
 800b47a:	3004      	addeq	r0, #4
 800b47c:	079a      	lsls	r2, r3, #30
 800b47e:	bf04      	itt	eq
 800b480:	089b      	lsreq	r3, r3, #2
 800b482:	3002      	addeq	r0, #2
 800b484:	07da      	lsls	r2, r3, #31
 800b486:	d402      	bmi.n	800b48e <__lo0bits+0x4e>
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	d006      	beq.n	800b49a <__lo0bits+0x5a>
 800b48c:	3001      	adds	r0, #1
 800b48e:	600b      	str	r3, [r1, #0]
 800b490:	4770      	bx	lr
 800b492:	4610      	mov	r0, r2
 800b494:	e7e9      	b.n	800b46a <__lo0bits+0x2a>
 800b496:	2000      	movs	r0, #0
 800b498:	4770      	bx	lr
 800b49a:	2020      	movs	r0, #32
 800b49c:	4770      	bx	lr

0800b49e <__i2b>:
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	f7ff ff27 	bl	800b2f6 <_Balloc>
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	6144      	str	r4, [r0, #20]
 800b4ac:	6102      	str	r2, [r0, #16]
 800b4ae:	bd10      	pop	{r4, pc}

0800b4b0 <__multiply>:
 800b4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	690a      	ldr	r2, [r1, #16]
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	4688      	mov	r8, r1
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	bfbe      	ittt	lt
 800b4c0:	460b      	movlt	r3, r1
 800b4c2:	46a0      	movlt	r8, r4
 800b4c4:	461c      	movlt	r4, r3
 800b4c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4d6:	eb07 0609 	add.w	r6, r7, r9
 800b4da:	42b3      	cmp	r3, r6
 800b4dc:	bfb8      	it	lt
 800b4de:	3101      	addlt	r1, #1
 800b4e0:	f7ff ff09 	bl	800b2f6 <_Balloc>
 800b4e4:	f100 0514 	add.w	r5, r0, #20
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b4f0:	4573      	cmp	r3, lr
 800b4f2:	d316      	bcc.n	800b522 <__multiply+0x72>
 800b4f4:	f104 0214 	add.w	r2, r4, #20
 800b4f8:	f108 0114 	add.w	r1, r8, #20
 800b4fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b500:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	9b00      	ldr	r3, [sp, #0]
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d80c      	bhi.n	800b528 <__multiply+0x78>
 800b50e:	2e00      	cmp	r6, #0
 800b510:	dd03      	ble.n	800b51a <__multiply+0x6a>
 800b512:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b516:	2b00      	cmp	r3, #0
 800b518:	d05d      	beq.n	800b5d6 <__multiply+0x126>
 800b51a:	6106      	str	r6, [r0, #16]
 800b51c:	b003      	add	sp, #12
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	f843 2b04 	str.w	r2, [r3], #4
 800b526:	e7e3      	b.n	800b4f0 <__multiply+0x40>
 800b528:	f8b2 b000 	ldrh.w	fp, [r2]
 800b52c:	f1bb 0f00 	cmp.w	fp, #0
 800b530:	d023      	beq.n	800b57a <__multiply+0xca>
 800b532:	4689      	mov	r9, r1
 800b534:	46ac      	mov	ip, r5
 800b536:	f04f 0800 	mov.w	r8, #0
 800b53a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b53e:	f8dc a000 	ldr.w	sl, [ip]
 800b542:	b2a3      	uxth	r3, r4
 800b544:	fa1f fa8a 	uxth.w	sl, sl
 800b548:	fb0b a303 	mla	r3, fp, r3, sl
 800b54c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b550:	f8dc 4000 	ldr.w	r4, [ip]
 800b554:	4443      	add	r3, r8
 800b556:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b55a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b55e:	46e2      	mov	sl, ip
 800b560:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b564:	b29b      	uxth	r3, r3
 800b566:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b56a:	454f      	cmp	r7, r9
 800b56c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b570:	f84a 3b04 	str.w	r3, [sl], #4
 800b574:	d82b      	bhi.n	800b5ce <__multiply+0x11e>
 800b576:	f8cc 8004 	str.w	r8, [ip, #4]
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	3204      	adds	r2, #4
 800b57e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b582:	f1ba 0f00 	cmp.w	sl, #0
 800b586:	d020      	beq.n	800b5ca <__multiply+0x11a>
 800b588:	4689      	mov	r9, r1
 800b58a:	46a8      	mov	r8, r5
 800b58c:	f04f 0b00 	mov.w	fp, #0
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	f8b9 c000 	ldrh.w	ip, [r9]
 800b596:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	fb0a 440c 	mla	r4, sl, ip, r4
 800b5a0:	46c4      	mov	ip, r8
 800b5a2:	445c      	add	r4, fp
 800b5a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b5a8:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b5b4:	0c1b      	lsrs	r3, r3, #16
 800b5b6:	fb0a b303 	mla	r3, sl, r3, fp
 800b5ba:	454f      	cmp	r7, r9
 800b5bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b5c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b5c4:	d805      	bhi.n	800b5d2 <__multiply+0x122>
 800b5c6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b5ca:	3504      	adds	r5, #4
 800b5cc:	e79b      	b.n	800b506 <__multiply+0x56>
 800b5ce:	46d4      	mov	ip, sl
 800b5d0:	e7b3      	b.n	800b53a <__multiply+0x8a>
 800b5d2:	46e0      	mov	r8, ip
 800b5d4:	e7dd      	b.n	800b592 <__multiply+0xe2>
 800b5d6:	3e01      	subs	r6, #1
 800b5d8:	e799      	b.n	800b50e <__multiply+0x5e>
	...

0800b5dc <__pow5mult>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	f012 0203 	ands.w	r2, r2, #3
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	d007      	beq.n	800b5fc <__pow5mult+0x20>
 800b5ec:	4c21      	ldr	r4, [pc, #132]	; (800b674 <__pow5mult+0x98>)
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5f6:	f7ff fec9 	bl	800b38c <__multadd>
 800b5fa:	4607      	mov	r7, r0
 800b5fc:	10ad      	asrs	r5, r5, #2
 800b5fe:	d035      	beq.n	800b66c <__pow5mult+0x90>
 800b600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b602:	b93c      	cbnz	r4, 800b614 <__pow5mult+0x38>
 800b604:	2010      	movs	r0, #16
 800b606:	f7ff fe55 	bl	800b2b4 <malloc>
 800b60a:	6270      	str	r0, [r6, #36]	; 0x24
 800b60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b610:	6004      	str	r4, [r0, #0]
 800b612:	60c4      	str	r4, [r0, #12]
 800b614:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b61c:	b94c      	cbnz	r4, 800b632 <__pow5mult+0x56>
 800b61e:	f240 2171 	movw	r1, #625	; 0x271
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff ff3b 	bl	800b49e <__i2b>
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	f04f 0800 	mov.w	r8, #0
 800b636:	07eb      	lsls	r3, r5, #31
 800b638:	d50a      	bpl.n	800b650 <__pow5mult+0x74>
 800b63a:	4639      	mov	r1, r7
 800b63c:	4622      	mov	r2, r4
 800b63e:	4630      	mov	r0, r6
 800b640:	f7ff ff36 	bl	800b4b0 <__multiply>
 800b644:	4681      	mov	r9, r0
 800b646:	4639      	mov	r1, r7
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff fe88 	bl	800b35e <_Bfree>
 800b64e:	464f      	mov	r7, r9
 800b650:	106d      	asrs	r5, r5, #1
 800b652:	d00b      	beq.n	800b66c <__pow5mult+0x90>
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	b938      	cbnz	r0, 800b668 <__pow5mult+0x8c>
 800b658:	4622      	mov	r2, r4
 800b65a:	4621      	mov	r1, r4
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff ff27 	bl	800b4b0 <__multiply>
 800b662:	6020      	str	r0, [r4, #0]
 800b664:	f8c0 8000 	str.w	r8, [r0]
 800b668:	4604      	mov	r4, r0
 800b66a:	e7e4      	b.n	800b636 <__pow5mult+0x5a>
 800b66c:	4638      	mov	r0, r7
 800b66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b672:	bf00      	nop
 800b674:	0800da08 	.word	0x0800da08

0800b678 <__lshift>:
 800b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	460c      	mov	r4, r1
 800b67e:	4607      	mov	r7, r0
 800b680:	4616      	mov	r6, r2
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b688:	eb0a 0903 	add.w	r9, sl, r3
 800b68c:	6849      	ldr	r1, [r1, #4]
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	f109 0501 	add.w	r5, r9, #1
 800b694:	42ab      	cmp	r3, r5
 800b696:	db32      	blt.n	800b6fe <__lshift+0x86>
 800b698:	4638      	mov	r0, r7
 800b69a:	f7ff fe2c 	bl	800b2f6 <_Balloc>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f100 0114 	add.w	r1, r0, #20
 800b6a8:	4553      	cmp	r3, sl
 800b6aa:	db2b      	blt.n	800b704 <__lshift+0x8c>
 800b6ac:	6920      	ldr	r0, [r4, #16]
 800b6ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6b2:	f104 0314 	add.w	r3, r4, #20
 800b6b6:	f016 021f 	ands.w	r2, r6, #31
 800b6ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6c2:	d025      	beq.n	800b710 <__lshift+0x98>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f1c2 0e20 	rsb	lr, r2, #32
 800b6ca:	468a      	mov	sl, r1
 800b6cc:	681e      	ldr	r6, [r3, #0]
 800b6ce:	4096      	lsls	r6, r2
 800b6d0:	4330      	orrs	r0, r6
 800b6d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b6d6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b6da:	459c      	cmp	ip, r3
 800b6dc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b6e0:	d814      	bhi.n	800b70c <__lshift+0x94>
 800b6e2:	6048      	str	r0, [r1, #4]
 800b6e4:	b108      	cbz	r0, 800b6ea <__lshift+0x72>
 800b6e6:	f109 0502 	add.w	r5, r9, #2
 800b6ea:	3d01      	subs	r5, #1
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f8c8 5010 	str.w	r5, [r8, #16]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f7ff fe33 	bl	800b35e <_Bfree>
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fe:	3101      	adds	r1, #1
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	e7c7      	b.n	800b694 <__lshift+0x1c>
 800b704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b708:	3301      	adds	r3, #1
 800b70a:	e7cd      	b.n	800b6a8 <__lshift+0x30>
 800b70c:	4651      	mov	r1, sl
 800b70e:	e7dc      	b.n	800b6ca <__lshift+0x52>
 800b710:	3904      	subs	r1, #4
 800b712:	f853 2b04 	ldr.w	r2, [r3], #4
 800b716:	459c      	cmp	ip, r3
 800b718:	f841 2f04 	str.w	r2, [r1, #4]!
 800b71c:	d8f9      	bhi.n	800b712 <__lshift+0x9a>
 800b71e:	e7e4      	b.n	800b6ea <__lshift+0x72>

0800b720 <__mcmp>:
 800b720:	6903      	ldr	r3, [r0, #16]
 800b722:	690a      	ldr	r2, [r1, #16]
 800b724:	b530      	push	{r4, r5, lr}
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	d10c      	bne.n	800b744 <__mcmp+0x24>
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	3014      	adds	r0, #20
 800b72e:	3114      	adds	r1, #20
 800b730:	1884      	adds	r4, r0, r2
 800b732:	4411      	add	r1, r2
 800b734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b73c:	4295      	cmp	r5, r2
 800b73e:	d003      	beq.n	800b748 <__mcmp+0x28>
 800b740:	d305      	bcc.n	800b74e <__mcmp+0x2e>
 800b742:	2301      	movs	r3, #1
 800b744:	4618      	mov	r0, r3
 800b746:	bd30      	pop	{r4, r5, pc}
 800b748:	42a0      	cmp	r0, r4
 800b74a:	d3f3      	bcc.n	800b734 <__mcmp+0x14>
 800b74c:	e7fa      	b.n	800b744 <__mcmp+0x24>
 800b74e:	f04f 33ff 	mov.w	r3, #4294967295
 800b752:	e7f7      	b.n	800b744 <__mcmp+0x24>

0800b754 <__mdiff>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	460d      	mov	r5, r1
 800b75a:	4607      	mov	r7, r0
 800b75c:	4611      	mov	r1, r2
 800b75e:	4628      	mov	r0, r5
 800b760:	4614      	mov	r4, r2
 800b762:	f7ff ffdd 	bl	800b720 <__mcmp>
 800b766:	1e06      	subs	r6, r0, #0
 800b768:	d108      	bne.n	800b77c <__mdiff+0x28>
 800b76a:	4631      	mov	r1, r6
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff fdc2 	bl	800b2f6 <_Balloc>
 800b772:	2301      	movs	r3, #1
 800b774:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	bfa4      	itt	ge
 800b77e:	4623      	movge	r3, r4
 800b780:	462c      	movge	r4, r5
 800b782:	4638      	mov	r0, r7
 800b784:	6861      	ldr	r1, [r4, #4]
 800b786:	bfa6      	itte	ge
 800b788:	461d      	movge	r5, r3
 800b78a:	2600      	movge	r6, #0
 800b78c:	2601      	movlt	r6, #1
 800b78e:	f7ff fdb2 	bl	800b2f6 <_Balloc>
 800b792:	f04f 0e00 	mov.w	lr, #0
 800b796:	60c6      	str	r6, [r0, #12]
 800b798:	692b      	ldr	r3, [r5, #16]
 800b79a:	6926      	ldr	r6, [r4, #16]
 800b79c:	f104 0214 	add.w	r2, r4, #20
 800b7a0:	f105 0914 	add.w	r9, r5, #20
 800b7a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b7a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b7ac:	f100 0114 	add.w	r1, r0, #20
 800b7b0:	f852 ab04 	ldr.w	sl, [r2], #4
 800b7b4:	f859 5b04 	ldr.w	r5, [r9], #4
 800b7b8:	fa1f f38a 	uxth.w	r3, sl
 800b7bc:	4473      	add	r3, lr
 800b7be:	b2ac      	uxth	r4, r5
 800b7c0:	1b1b      	subs	r3, r3, r4
 800b7c2:	0c2c      	lsrs	r4, r5, #16
 800b7c4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b7c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b7d2:	45c8      	cmp	r8, r9
 800b7d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b7d8:	4694      	mov	ip, r2
 800b7da:	f841 4b04 	str.w	r4, [r1], #4
 800b7de:	d8e7      	bhi.n	800b7b0 <__mdiff+0x5c>
 800b7e0:	45bc      	cmp	ip, r7
 800b7e2:	d304      	bcc.n	800b7ee <__mdiff+0x9a>
 800b7e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7e8:	b183      	cbz	r3, 800b80c <__mdiff+0xb8>
 800b7ea:	6106      	str	r6, [r0, #16]
 800b7ec:	e7c4      	b.n	800b778 <__mdiff+0x24>
 800b7ee:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b7f2:	b2a2      	uxth	r2, r4
 800b7f4:	4472      	add	r2, lr
 800b7f6:	1413      	asrs	r3, r2, #16
 800b7f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b802:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b806:	f841 2b04 	str.w	r2, [r1], #4
 800b80a:	e7e9      	b.n	800b7e0 <__mdiff+0x8c>
 800b80c:	3e01      	subs	r6, #1
 800b80e:	e7e9      	b.n	800b7e4 <__mdiff+0x90>

0800b810 <__d2b>:
 800b810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b814:	461c      	mov	r4, r3
 800b816:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b81a:	2101      	movs	r1, #1
 800b81c:	4690      	mov	r8, r2
 800b81e:	f7ff fd6a 	bl	800b2f6 <_Balloc>
 800b822:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b826:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b82a:	4607      	mov	r7, r0
 800b82c:	bb34      	cbnz	r4, 800b87c <__d2b+0x6c>
 800b82e:	9201      	str	r2, [sp, #4]
 800b830:	f1b8 0200 	subs.w	r2, r8, #0
 800b834:	d027      	beq.n	800b886 <__d2b+0x76>
 800b836:	a802      	add	r0, sp, #8
 800b838:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b83c:	f7ff fe00 	bl	800b440 <__lo0bits>
 800b840:	9900      	ldr	r1, [sp, #0]
 800b842:	b1f0      	cbz	r0, 800b882 <__d2b+0x72>
 800b844:	9a01      	ldr	r2, [sp, #4]
 800b846:	f1c0 0320 	rsb	r3, r0, #32
 800b84a:	fa02 f303 	lsl.w	r3, r2, r3
 800b84e:	430b      	orrs	r3, r1
 800b850:	40c2      	lsrs	r2, r0
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	9201      	str	r2, [sp, #4]
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bf14      	ite	ne
 800b85c:	2102      	movne	r1, #2
 800b85e:	2101      	moveq	r1, #1
 800b860:	61bb      	str	r3, [r7, #24]
 800b862:	6139      	str	r1, [r7, #16]
 800b864:	b1c4      	cbz	r4, 800b898 <__d2b+0x88>
 800b866:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b86a:	4404      	add	r4, r0
 800b86c:	6034      	str	r4, [r6, #0]
 800b86e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b872:	6028      	str	r0, [r5, #0]
 800b874:	4638      	mov	r0, r7
 800b876:	b002      	add	sp, #8
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b880:	e7d5      	b.n	800b82e <__d2b+0x1e>
 800b882:	6179      	str	r1, [r7, #20]
 800b884:	e7e7      	b.n	800b856 <__d2b+0x46>
 800b886:	a801      	add	r0, sp, #4
 800b888:	f7ff fdda 	bl	800b440 <__lo0bits>
 800b88c:	2101      	movs	r1, #1
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	6139      	str	r1, [r7, #16]
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	3020      	adds	r0, #32
 800b896:	e7e5      	b.n	800b864 <__d2b+0x54>
 800b898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b89c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b8a0:	6030      	str	r0, [r6, #0]
 800b8a2:	6918      	ldr	r0, [r3, #16]
 800b8a4:	f7ff fdad 	bl	800b402 <__hi0bits>
 800b8a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b8ac:	e7e1      	b.n	800b872 <__d2b+0x62>

0800b8ae <_calloc_r>:
 800b8ae:	b538      	push	{r3, r4, r5, lr}
 800b8b0:	fb02 f401 	mul.w	r4, r2, r1
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f000 f855 	bl	800b964 <_malloc_r>
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	b118      	cbz	r0, 800b8c6 <_calloc_r+0x18>
 800b8be:	4622      	mov	r2, r4
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	f7fe fa2f 	bl	8009d24 <memset>
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b8cc <_free_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	2900      	cmp	r1, #0
 800b8d2:	d043      	beq.n	800b95c <_free_r+0x90>
 800b8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d8:	1f0c      	subs	r4, r1, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	bfb8      	it	lt
 800b8de:	18e4      	addlt	r4, r4, r3
 800b8e0:	f000 fa27 	bl	800bd32 <__malloc_lock>
 800b8e4:	4a1e      	ldr	r2, [pc, #120]	; (800b960 <_free_r+0x94>)
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	b933      	cbnz	r3, 800b8fa <_free_r+0x2e>
 800b8ec:	6063      	str	r3, [r4, #4]
 800b8ee:	6014      	str	r4, [r2, #0]
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8f6:	f000 ba1d 	b.w	800bd34 <__malloc_unlock>
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	d90b      	bls.n	800b916 <_free_r+0x4a>
 800b8fe:	6821      	ldr	r1, [r4, #0]
 800b900:	1862      	adds	r2, r4, r1
 800b902:	4293      	cmp	r3, r2
 800b904:	bf01      	itttt	eq
 800b906:	681a      	ldreq	r2, [r3, #0]
 800b908:	685b      	ldreq	r3, [r3, #4]
 800b90a:	1852      	addeq	r2, r2, r1
 800b90c:	6022      	streq	r2, [r4, #0]
 800b90e:	6063      	str	r3, [r4, #4]
 800b910:	6004      	str	r4, [r0, #0]
 800b912:	e7ed      	b.n	800b8f0 <_free_r+0x24>
 800b914:	4613      	mov	r3, r2
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	b10a      	cbz	r2, 800b91e <_free_r+0x52>
 800b91a:	42a2      	cmp	r2, r4
 800b91c:	d9fa      	bls.n	800b914 <_free_r+0x48>
 800b91e:	6819      	ldr	r1, [r3, #0]
 800b920:	1858      	adds	r0, r3, r1
 800b922:	42a0      	cmp	r0, r4
 800b924:	d10b      	bne.n	800b93e <_free_r+0x72>
 800b926:	6820      	ldr	r0, [r4, #0]
 800b928:	4401      	add	r1, r0
 800b92a:	1858      	adds	r0, r3, r1
 800b92c:	4282      	cmp	r2, r0
 800b92e:	6019      	str	r1, [r3, #0]
 800b930:	d1de      	bne.n	800b8f0 <_free_r+0x24>
 800b932:	6810      	ldr	r0, [r2, #0]
 800b934:	6852      	ldr	r2, [r2, #4]
 800b936:	4401      	add	r1, r0
 800b938:	6019      	str	r1, [r3, #0]
 800b93a:	605a      	str	r2, [r3, #4]
 800b93c:	e7d8      	b.n	800b8f0 <_free_r+0x24>
 800b93e:	d902      	bls.n	800b946 <_free_r+0x7a>
 800b940:	230c      	movs	r3, #12
 800b942:	602b      	str	r3, [r5, #0]
 800b944:	e7d4      	b.n	800b8f0 <_free_r+0x24>
 800b946:	6820      	ldr	r0, [r4, #0]
 800b948:	1821      	adds	r1, r4, r0
 800b94a:	428a      	cmp	r2, r1
 800b94c:	bf01      	itttt	eq
 800b94e:	6811      	ldreq	r1, [r2, #0]
 800b950:	6852      	ldreq	r2, [r2, #4]
 800b952:	1809      	addeq	r1, r1, r0
 800b954:	6021      	streq	r1, [r4, #0]
 800b956:	6062      	str	r2, [r4, #4]
 800b958:	605c      	str	r4, [r3, #4]
 800b95a:	e7c9      	b.n	800b8f0 <_free_r+0x24>
 800b95c:	bd38      	pop	{r3, r4, r5, pc}
 800b95e:	bf00      	nop
 800b960:	20000270 	.word	0x20000270

0800b964 <_malloc_r>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	1ccd      	adds	r5, r1, #3
 800b968:	f025 0503 	bic.w	r5, r5, #3
 800b96c:	3508      	adds	r5, #8
 800b96e:	2d0c      	cmp	r5, #12
 800b970:	bf38      	it	cc
 800b972:	250c      	movcc	r5, #12
 800b974:	2d00      	cmp	r5, #0
 800b976:	4606      	mov	r6, r0
 800b978:	db01      	blt.n	800b97e <_malloc_r+0x1a>
 800b97a:	42a9      	cmp	r1, r5
 800b97c:	d903      	bls.n	800b986 <_malloc_r+0x22>
 800b97e:	230c      	movs	r3, #12
 800b980:	6033      	str	r3, [r6, #0]
 800b982:	2000      	movs	r0, #0
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	f000 f9d4 	bl	800bd32 <__malloc_lock>
 800b98a:	4a21      	ldr	r2, [pc, #132]	; (800ba10 <_malloc_r+0xac>)
 800b98c:	6814      	ldr	r4, [r2, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	b991      	cbnz	r1, 800b9b8 <_malloc_r+0x54>
 800b992:	4c20      	ldr	r4, [pc, #128]	; (800ba14 <_malloc_r+0xb0>)
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	b91b      	cbnz	r3, 800b9a0 <_malloc_r+0x3c>
 800b998:	4630      	mov	r0, r6
 800b99a:	f000 f98f 	bl	800bcbc <_sbrk_r>
 800b99e:	6020      	str	r0, [r4, #0]
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 f98a 	bl	800bcbc <_sbrk_r>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d124      	bne.n	800b9f6 <_malloc_r+0x92>
 800b9ac:	230c      	movs	r3, #12
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	f000 f9bf 	bl	800bd34 <__malloc_unlock>
 800b9b6:	e7e4      	b.n	800b982 <_malloc_r+0x1e>
 800b9b8:	680b      	ldr	r3, [r1, #0]
 800b9ba:	1b5b      	subs	r3, r3, r5
 800b9bc:	d418      	bmi.n	800b9f0 <_malloc_r+0x8c>
 800b9be:	2b0b      	cmp	r3, #11
 800b9c0:	d90f      	bls.n	800b9e2 <_malloc_r+0x7e>
 800b9c2:	600b      	str	r3, [r1, #0]
 800b9c4:	18cc      	adds	r4, r1, r3
 800b9c6:	50cd      	str	r5, [r1, r3]
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f000 f9b3 	bl	800bd34 <__malloc_unlock>
 800b9ce:	f104 000b 	add.w	r0, r4, #11
 800b9d2:	1d23      	adds	r3, r4, #4
 800b9d4:	f020 0007 	bic.w	r0, r0, #7
 800b9d8:	1ac3      	subs	r3, r0, r3
 800b9da:	d0d3      	beq.n	800b984 <_malloc_r+0x20>
 800b9dc:	425a      	negs	r2, r3
 800b9de:	50e2      	str	r2, [r4, r3]
 800b9e0:	e7d0      	b.n	800b984 <_malloc_r+0x20>
 800b9e2:	684b      	ldr	r3, [r1, #4]
 800b9e4:	428c      	cmp	r4, r1
 800b9e6:	bf16      	itet	ne
 800b9e8:	6063      	strne	r3, [r4, #4]
 800b9ea:	6013      	streq	r3, [r2, #0]
 800b9ec:	460c      	movne	r4, r1
 800b9ee:	e7eb      	b.n	800b9c8 <_malloc_r+0x64>
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	6849      	ldr	r1, [r1, #4]
 800b9f4:	e7cc      	b.n	800b990 <_malloc_r+0x2c>
 800b9f6:	1cc4      	adds	r4, r0, #3
 800b9f8:	f024 0403 	bic.w	r4, r4, #3
 800b9fc:	42a0      	cmp	r0, r4
 800b9fe:	d005      	beq.n	800ba0c <_malloc_r+0xa8>
 800ba00:	1a21      	subs	r1, r4, r0
 800ba02:	4630      	mov	r0, r6
 800ba04:	f000 f95a 	bl	800bcbc <_sbrk_r>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d0cf      	beq.n	800b9ac <_malloc_r+0x48>
 800ba0c:	6025      	str	r5, [r4, #0]
 800ba0e:	e7db      	b.n	800b9c8 <_malloc_r+0x64>
 800ba10:	20000270 	.word	0x20000270
 800ba14:	20000274 	.word	0x20000274

0800ba18 <__ssputs_r>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	688e      	ldr	r6, [r1, #8]
 800ba1e:	4682      	mov	sl, r0
 800ba20:	429e      	cmp	r6, r3
 800ba22:	460c      	mov	r4, r1
 800ba24:	4690      	mov	r8, r2
 800ba26:	4699      	mov	r9, r3
 800ba28:	d837      	bhi.n	800ba9a <__ssputs_r+0x82>
 800ba2a:	898a      	ldrh	r2, [r1, #12]
 800ba2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba30:	d031      	beq.n	800ba96 <__ssputs_r+0x7e>
 800ba32:	2302      	movs	r3, #2
 800ba34:	6825      	ldr	r5, [r4, #0]
 800ba36:	6909      	ldr	r1, [r1, #16]
 800ba38:	1a6f      	subs	r7, r5, r1
 800ba3a:	6965      	ldr	r5, [r4, #20]
 800ba3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba40:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba44:	f109 0301 	add.w	r3, r9, #1
 800ba48:	443b      	add	r3, r7
 800ba4a:	429d      	cmp	r5, r3
 800ba4c:	bf38      	it	cc
 800ba4e:	461d      	movcc	r5, r3
 800ba50:	0553      	lsls	r3, r2, #21
 800ba52:	d530      	bpl.n	800bab6 <__ssputs_r+0x9e>
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7ff ff85 	bl	800b964 <_malloc_r>
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	b950      	cbnz	r0, 800ba74 <__ssputs_r+0x5c>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	f8ca 3000 	str.w	r3, [sl]
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	463a      	mov	r2, r7
 800ba76:	6921      	ldr	r1, [r4, #16]
 800ba78:	f7ff fc32 	bl	800b2e0 <memcpy>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	6126      	str	r6, [r4, #16]
 800ba8a:	443e      	add	r6, r7
 800ba8c:	6026      	str	r6, [r4, #0]
 800ba8e:	464e      	mov	r6, r9
 800ba90:	6165      	str	r5, [r4, #20]
 800ba92:	1bed      	subs	r5, r5, r7
 800ba94:	60a5      	str	r5, [r4, #8]
 800ba96:	454e      	cmp	r6, r9
 800ba98:	d900      	bls.n	800ba9c <__ssputs_r+0x84>
 800ba9a:	464e      	mov	r6, r9
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	4641      	mov	r1, r8
 800baa0:	6820      	ldr	r0, [r4, #0]
 800baa2:	f000 f92d 	bl	800bd00 <memmove>
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	2000      	movs	r0, #0
 800baaa:	1b9b      	subs	r3, r3, r6
 800baac:	60a3      	str	r3, [r4, #8]
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	441e      	add	r6, r3
 800bab2:	6026      	str	r6, [r4, #0]
 800bab4:	e7dc      	b.n	800ba70 <__ssputs_r+0x58>
 800bab6:	462a      	mov	r2, r5
 800bab8:	f000 f93d 	bl	800bd36 <_realloc_r>
 800babc:	4606      	mov	r6, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	d1e2      	bne.n	800ba88 <__ssputs_r+0x70>
 800bac2:	6921      	ldr	r1, [r4, #16]
 800bac4:	4650      	mov	r0, sl
 800bac6:	f7ff ff01 	bl	800b8cc <_free_r>
 800baca:	e7c8      	b.n	800ba5e <__ssputs_r+0x46>

0800bacc <_svfiprintf_r>:
 800bacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	461d      	mov	r5, r3
 800bad2:	898b      	ldrh	r3, [r1, #12]
 800bad4:	b09d      	sub	sp, #116	; 0x74
 800bad6:	061f      	lsls	r7, r3, #24
 800bad8:	4680      	mov	r8, r0
 800bada:	460c      	mov	r4, r1
 800badc:	4616      	mov	r6, r2
 800bade:	d50f      	bpl.n	800bb00 <_svfiprintf_r+0x34>
 800bae0:	690b      	ldr	r3, [r1, #16]
 800bae2:	b96b      	cbnz	r3, 800bb00 <_svfiprintf_r+0x34>
 800bae4:	2140      	movs	r1, #64	; 0x40
 800bae6:	f7ff ff3d 	bl	800b964 <_malloc_r>
 800baea:	6020      	str	r0, [r4, #0]
 800baec:	6120      	str	r0, [r4, #16]
 800baee:	b928      	cbnz	r0, 800bafc <_svfiprintf_r+0x30>
 800baf0:	230c      	movs	r3, #12
 800baf2:	f8c8 3000 	str.w	r3, [r8]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bafa:	e0c8      	b.n	800bc8e <_svfiprintf_r+0x1c2>
 800bafc:	2340      	movs	r3, #64	; 0x40
 800bafe:	6163      	str	r3, [r4, #20]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9309      	str	r3, [sp, #36]	; 0x24
 800bb04:	2320      	movs	r3, #32
 800bb06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb0a:	2330      	movs	r3, #48	; 0x30
 800bb0c:	f04f 0b01 	mov.w	fp, #1
 800bb10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb14:	9503      	str	r5, [sp, #12]
 800bb16:	4637      	mov	r7, r6
 800bb18:	463d      	mov	r5, r7
 800bb1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb1e:	b10b      	cbz	r3, 800bb24 <_svfiprintf_r+0x58>
 800bb20:	2b25      	cmp	r3, #37	; 0x25
 800bb22:	d13e      	bne.n	800bba2 <_svfiprintf_r+0xd6>
 800bb24:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb28:	d00b      	beq.n	800bb42 <_svfiprintf_r+0x76>
 800bb2a:	4653      	mov	r3, sl
 800bb2c:	4632      	mov	r2, r6
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4640      	mov	r0, r8
 800bb32:	f7ff ff71 	bl	800ba18 <__ssputs_r>
 800bb36:	3001      	adds	r0, #1
 800bb38:	f000 80a4 	beq.w	800bc84 <_svfiprintf_r+0x1b8>
 800bb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3e:	4453      	add	r3, sl
 800bb40:	9309      	str	r3, [sp, #36]	; 0x24
 800bb42:	783b      	ldrb	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 809d 	beq.w	800bc84 <_svfiprintf_r+0x1b8>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb5c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb5e:	462f      	mov	r7, r5
 800bb60:	2205      	movs	r2, #5
 800bb62:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb66:	4850      	ldr	r0, [pc, #320]	; (800bca8 <_svfiprintf_r+0x1dc>)
 800bb68:	f7ff fbac 	bl	800b2c4 <memchr>
 800bb6c:	9b04      	ldr	r3, [sp, #16]
 800bb6e:	b9d0      	cbnz	r0, 800bba6 <_svfiprintf_r+0xda>
 800bb70:	06d9      	lsls	r1, r3, #27
 800bb72:	bf44      	itt	mi
 800bb74:	2220      	movmi	r2, #32
 800bb76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb7a:	071a      	lsls	r2, r3, #28
 800bb7c:	bf44      	itt	mi
 800bb7e:	222b      	movmi	r2, #43	; 0x2b
 800bb80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb84:	782a      	ldrb	r2, [r5, #0]
 800bb86:	2a2a      	cmp	r2, #42	; 0x2a
 800bb88:	d015      	beq.n	800bbb6 <_svfiprintf_r+0xea>
 800bb8a:	462f      	mov	r7, r5
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	250a      	movs	r5, #10
 800bb90:	9a07      	ldr	r2, [sp, #28]
 800bb92:	4639      	mov	r1, r7
 800bb94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb98:	3b30      	subs	r3, #48	; 0x30
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	d94d      	bls.n	800bc3a <_svfiprintf_r+0x16e>
 800bb9e:	b1b8      	cbz	r0, 800bbd0 <_svfiprintf_r+0x104>
 800bba0:	e00f      	b.n	800bbc2 <_svfiprintf_r+0xf6>
 800bba2:	462f      	mov	r7, r5
 800bba4:	e7b8      	b.n	800bb18 <_svfiprintf_r+0x4c>
 800bba6:	4a40      	ldr	r2, [pc, #256]	; (800bca8 <_svfiprintf_r+0x1dc>)
 800bba8:	463d      	mov	r5, r7
 800bbaa:	1a80      	subs	r0, r0, r2
 800bbac:	fa0b f000 	lsl.w	r0, fp, r0
 800bbb0:	4318      	orrs	r0, r3
 800bbb2:	9004      	str	r0, [sp, #16]
 800bbb4:	e7d3      	b.n	800bb5e <_svfiprintf_r+0x92>
 800bbb6:	9a03      	ldr	r2, [sp, #12]
 800bbb8:	1d11      	adds	r1, r2, #4
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	9103      	str	r1, [sp, #12]
 800bbbe:	2a00      	cmp	r2, #0
 800bbc0:	db01      	blt.n	800bbc6 <_svfiprintf_r+0xfa>
 800bbc2:	9207      	str	r2, [sp, #28]
 800bbc4:	e004      	b.n	800bbd0 <_svfiprintf_r+0x104>
 800bbc6:	4252      	negs	r2, r2
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	9207      	str	r2, [sp, #28]
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	783b      	ldrb	r3, [r7, #0]
 800bbd2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd4:	d10c      	bne.n	800bbf0 <_svfiprintf_r+0x124>
 800bbd6:	787b      	ldrb	r3, [r7, #1]
 800bbd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbda:	d133      	bne.n	800bc44 <_svfiprintf_r+0x178>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	3702      	adds	r7, #2
 800bbe0:	1d1a      	adds	r2, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9203      	str	r2, [sp, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfb8      	it	lt
 800bbea:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	4d2e      	ldr	r5, [pc, #184]	; (800bcac <_svfiprintf_r+0x1e0>)
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	7839      	ldrb	r1, [r7, #0]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7ff fb64 	bl	800b2c4 <memchr>
 800bbfc:	b138      	cbz	r0, 800bc0e <_svfiprintf_r+0x142>
 800bbfe:	2340      	movs	r3, #64	; 0x40
 800bc00:	1b40      	subs	r0, r0, r5
 800bc02:	fa03 f000 	lsl.w	r0, r3, r0
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	3701      	adds	r7, #1
 800bc0a:	4303      	orrs	r3, r0
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	7839      	ldrb	r1, [r7, #0]
 800bc10:	2206      	movs	r2, #6
 800bc12:	4827      	ldr	r0, [pc, #156]	; (800bcb0 <_svfiprintf_r+0x1e4>)
 800bc14:	1c7e      	adds	r6, r7, #1
 800bc16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc1a:	f7ff fb53 	bl	800b2c4 <memchr>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d038      	beq.n	800bc94 <_svfiprintf_r+0x1c8>
 800bc22:	4b24      	ldr	r3, [pc, #144]	; (800bcb4 <_svfiprintf_r+0x1e8>)
 800bc24:	bb13      	cbnz	r3, 800bc6c <_svfiprintf_r+0x1a0>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	3307      	adds	r3, #7
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	3308      	adds	r3, #8
 800bc30:	9303      	str	r3, [sp, #12]
 800bc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc34:	444b      	add	r3, r9
 800bc36:	9309      	str	r3, [sp, #36]	; 0x24
 800bc38:	e76d      	b.n	800bb16 <_svfiprintf_r+0x4a>
 800bc3a:	fb05 3202 	mla	r2, r5, r2, r3
 800bc3e:	2001      	movs	r0, #1
 800bc40:	460f      	mov	r7, r1
 800bc42:	e7a6      	b.n	800bb92 <_svfiprintf_r+0xc6>
 800bc44:	2300      	movs	r3, #0
 800bc46:	250a      	movs	r5, #10
 800bc48:	4619      	mov	r1, r3
 800bc4a:	3701      	adds	r7, #1
 800bc4c:	9305      	str	r3, [sp, #20]
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc54:	3a30      	subs	r2, #48	; 0x30
 800bc56:	2a09      	cmp	r2, #9
 800bc58:	d903      	bls.n	800bc62 <_svfiprintf_r+0x196>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0c8      	beq.n	800bbf0 <_svfiprintf_r+0x124>
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	e7c6      	b.n	800bbf0 <_svfiprintf_r+0x124>
 800bc62:	fb05 2101 	mla	r1, r5, r1, r2
 800bc66:	2301      	movs	r3, #1
 800bc68:	4607      	mov	r7, r0
 800bc6a:	e7f0      	b.n	800bc4e <_svfiprintf_r+0x182>
 800bc6c:	ab03      	add	r3, sp, #12
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4622      	mov	r2, r4
 800bc72:	4b11      	ldr	r3, [pc, #68]	; (800bcb8 <_svfiprintf_r+0x1ec>)
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	4640      	mov	r0, r8
 800bc78:	f7fe f8ee 	bl	8009e58 <_printf_float>
 800bc7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc80:	4681      	mov	r9, r0
 800bc82:	d1d6      	bne.n	800bc32 <_svfiprintf_r+0x166>
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	065b      	lsls	r3, r3, #25
 800bc88:	f53f af35 	bmi.w	800baf6 <_svfiprintf_r+0x2a>
 800bc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc8e:	b01d      	add	sp, #116	; 0x74
 800bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	4622      	mov	r2, r4
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <_svfiprintf_r+0x1ec>)
 800bc9c:	a904      	add	r1, sp, #16
 800bc9e:	4640      	mov	r0, r8
 800bca0:	f7fe fb86 	bl	800a3b0 <_printf_i>
 800bca4:	e7ea      	b.n	800bc7c <_svfiprintf_r+0x1b0>
 800bca6:	bf00      	nop
 800bca8:	0800da14 	.word	0x0800da14
 800bcac:	0800da1a 	.word	0x0800da1a
 800bcb0:	0800da1e 	.word	0x0800da1e
 800bcb4:	08009e59 	.word	0x08009e59
 800bcb8:	0800ba19 	.word	0x0800ba19

0800bcbc <_sbrk_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4c05      	ldr	r4, [pc, #20]	; (800bcd8 <_sbrk_r+0x1c>)
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	f7f8 fc6a 	bl	80045a0 <_sbrk>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_sbrk_r+0x1a>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_sbrk_r+0x1a>
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	200004f4 	.word	0x200004f4

0800bcdc <__ascii_mbtowc>:
 800bcdc:	b082      	sub	sp, #8
 800bcde:	b901      	cbnz	r1, 800bce2 <__ascii_mbtowc+0x6>
 800bce0:	a901      	add	r1, sp, #4
 800bce2:	b142      	cbz	r2, 800bcf6 <__ascii_mbtowc+0x1a>
 800bce4:	b14b      	cbz	r3, 800bcfa <__ascii_mbtowc+0x1e>
 800bce6:	7813      	ldrb	r3, [r2, #0]
 800bce8:	600b      	str	r3, [r1, #0]
 800bcea:	7812      	ldrb	r2, [r2, #0]
 800bcec:	1c10      	adds	r0, r2, #0
 800bcee:	bf18      	it	ne
 800bcf0:	2001      	movne	r0, #1
 800bcf2:	b002      	add	sp, #8
 800bcf4:	4770      	bx	lr
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	e7fb      	b.n	800bcf2 <__ascii_mbtowc+0x16>
 800bcfa:	f06f 0001 	mvn.w	r0, #1
 800bcfe:	e7f8      	b.n	800bcf2 <__ascii_mbtowc+0x16>

0800bd00 <memmove>:
 800bd00:	4288      	cmp	r0, r1
 800bd02:	b510      	push	{r4, lr}
 800bd04:	eb01 0302 	add.w	r3, r1, r2
 800bd08:	d807      	bhi.n	800bd1a <memmove+0x1a>
 800bd0a:	1e42      	subs	r2, r0, #1
 800bd0c:	4299      	cmp	r1, r3
 800bd0e:	d00a      	beq.n	800bd26 <memmove+0x26>
 800bd10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd14:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bd18:	e7f8      	b.n	800bd0c <memmove+0xc>
 800bd1a:	4283      	cmp	r3, r0
 800bd1c:	d9f5      	bls.n	800bd0a <memmove+0xa>
 800bd1e:	1881      	adds	r1, r0, r2
 800bd20:	1ad2      	subs	r2, r2, r3
 800bd22:	42d3      	cmn	r3, r2
 800bd24:	d100      	bne.n	800bd28 <memmove+0x28>
 800bd26:	bd10      	pop	{r4, pc}
 800bd28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bd30:	e7f7      	b.n	800bd22 <memmove+0x22>

0800bd32 <__malloc_lock>:
 800bd32:	4770      	bx	lr

0800bd34 <__malloc_unlock>:
 800bd34:	4770      	bx	lr

0800bd36 <_realloc_r>:
 800bd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd38:	4607      	mov	r7, r0
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	460e      	mov	r6, r1
 800bd3e:	b921      	cbnz	r1, 800bd4a <_realloc_r+0x14>
 800bd40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd44:	4611      	mov	r1, r2
 800bd46:	f7ff be0d 	b.w	800b964 <_malloc_r>
 800bd4a:	b922      	cbnz	r2, 800bd56 <_realloc_r+0x20>
 800bd4c:	f7ff fdbe 	bl	800b8cc <_free_r>
 800bd50:	4625      	mov	r5, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd56:	f000 f821 	bl	800bd9c <_malloc_usable_size_r>
 800bd5a:	42a0      	cmp	r0, r4
 800bd5c:	d20f      	bcs.n	800bd7e <_realloc_r+0x48>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff fdff 	bl	800b964 <_malloc_r>
 800bd66:	4605      	mov	r5, r0
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0f2      	beq.n	800bd52 <_realloc_r+0x1c>
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4622      	mov	r2, r4
 800bd70:	f7ff fab6 	bl	800b2e0 <memcpy>
 800bd74:	4631      	mov	r1, r6
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7ff fda8 	bl	800b8cc <_free_r>
 800bd7c:	e7e9      	b.n	800bd52 <_realloc_r+0x1c>
 800bd7e:	4635      	mov	r5, r6
 800bd80:	e7e7      	b.n	800bd52 <_realloc_r+0x1c>

0800bd82 <__ascii_wctomb>:
 800bd82:	b149      	cbz	r1, 800bd98 <__ascii_wctomb+0x16>
 800bd84:	2aff      	cmp	r2, #255	; 0xff
 800bd86:	bf8b      	itete	hi
 800bd88:	238a      	movhi	r3, #138	; 0x8a
 800bd8a:	700a      	strbls	r2, [r1, #0]
 800bd8c:	6003      	strhi	r3, [r0, #0]
 800bd8e:	2001      	movls	r0, #1
 800bd90:	bf88      	it	hi
 800bd92:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd96:	4770      	bx	lr
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4770      	bx	lr

0800bd9c <_malloc_usable_size_r>:
 800bd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda0:	1f18      	subs	r0, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	bfbc      	itt	lt
 800bda6:	580b      	ldrlt	r3, [r1, r0]
 800bda8:	18c0      	addlt	r0, r0, r3
 800bdaa:	4770      	bx	lr

0800bdac <_init>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	bf00      	nop
 800bdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb2:	bc08      	pop	{r3}
 800bdb4:	469e      	mov	lr, r3
 800bdb6:	4770      	bx	lr

0800bdb8 <_fini>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr
